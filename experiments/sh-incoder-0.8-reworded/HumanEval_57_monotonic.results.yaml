language: sh
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local L=\"$1\"\n  local result=true\n\
    \  local i=1\n  local last=false\n  while [ $i -le ${#L} ]\n  do\n    local this=\"\
    $L\"\n    this=${this#$i}\n    if [ -z \"$last\" ]\n    then\n      if [ \"$this\"\
    \ -lt \"$L\" ]\n      then\n        result=false\n        break\n      fi\n  \
    \  elif [ \"$this\" -gt \"$L\" ]\n    then\n      result=false\n      break\n\
    \    fi\n    last=$this\n    ((i++))\n  done\n  return $result\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9w57jdtf.sh: line 27: [:  2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 27: [: 1 2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 27: [: 1 2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 27: [: 1 2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 27: [: 1 2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 27: [: 1 2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 27: [: 1 2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 27: [: 1 2 4 10: integer expression expected

    /tmp/tmp9w57jdtf.sh: line 35: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i n prev tmp val count\n\
    \  val=\"${1// }\"\n  prev=\"1\"\n  count=0\n  while [[ $val ]];\n  do\n    count=$(($count+1))\n\
    \    tmp=\"$(echo \"$prev+$val\" | bc)\"\n    if [ \"$tmp\" -eq \"$prev\" ];\n\
    \    then\n      ((count++))\n      prev=\"$tmp\"\n    else\n      if [ \"$count\"\
    \ -eq \"1\" ];\n      then\n         return 1\n      else\n         return 0\n\
    \      fi\n    fi\n    shift\n  done\n}\n\ncandidate() {\n    monotonic \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local xs i\n  xs=()\n  for\
    \ i in $@; do\n    [[ -z \"$xs\" ]] && { xs=( \"$i\" ); }\n    [[ -z \"$xs\" ]]\
    \ && { echo \"false\"; return 1; }\n    [[ $xs[-1] -gt $i ]] && { echo \"true\"\
    ; return 0; }\n    xs=( \"$xs\" \"$i\" )\n  done\n  echo \"false\"\n  return 1\n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz3o2m1ro.sh: line 17: [[: 1[-1]: syntax error: invalid arithmetic
    operator (error token is "[-1]")

    /tmp/tmpz3o2m1ro.sh: line 17: [[: 1[-1]: syntax error: invalid arithmetic operator
    (error token is "[-1]")

    /tmp/tmpz3o2m1ro.sh: line 17: [[: 1[-1]: syntax error: invalid arithmetic operator
    (error token is "[-1]")

    /tmp/tmpz3o2m1ro.sh: line 17: [[: 1[-1]: syntax error: invalid arithmetic operator
    (error token is "[-1]")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  # http://awk.freeshell.org/AllAboutGetline\n\
    \  # Example use: Avoid this trap in sudo\n  local list=\"$1\"\n\n  local lastval=\"\
    $list\"\n  local lastval2=\"$list\"\n  local lastval3=\"$list\"\n  local lastval4=\"\
    $list\"\n  local lastval5=\"$list\"\n  local lastval6=\"$list\"\n  local lastval7=\"\
    $list\"\n  local lastval8=\"$list\"\n\n  local val=\"$list\"\n  local val2=\"\
    $list\"\n  local val3=\"$list\"\n  local val4=\"$list\"\n  local val5=\"$list\"\
    \n  local val6=\"$list\"\n  local val7=\"$list\"\n  local val8=\"$list\"\n\n \
    \ local count=0\n\n  while read -r -n 1 val; do\n    if [ \"$val\" != \"$lastval\"\
    \ ]; then\n      lastval=\"$val\"\n      lastval2=\"$val2\"\n      lastval3=\"\
    $val3\"\n      lastval4=\"$val4\"\n      lastval5=\"$val5\"\n      lastval6=\"\
    $val6\"\n      lastval7=\"$val7\"\n      lastval8=\"$val8\"\n    fi\n    lastval=\"\
    $val\"\n    lastval2=\"$val2\"\n    lastval3=\"$val3\"\n    lastval4=\"$val4\"\
    \n    lastval5=\"$val5\"\n    lastval6=\"$val6\"\n    lastval7=\"$val7\"\n   \
    \ lastval8=\"$val8\"\n    ((count++))\n  done <<< \"$list\"\n\n  ((count > 0))\
    \ && return 0\n  ((count < 0)) && return 1\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local nl nc result head tail\n\
    \  nl=$'\\n'\n  nc=$'\\c'\n  result=$(nc $1 2>/dev/null | sort -n -r | \\\n  \
    \  sed -ne \"/^$nl$nl$/p\" | sed \"s/^/$nl/; s/$nl$nl/$nl/; p\")\n  head=$(echo\
    \ \"$result\" | head -1)\n  tail=$(echo \"$result\" | tail -1)\n  [ \"$head\"\
    \ -gt \"$tail\" ] && return 0\n  [ \"$tail\" -gt \"$head\" ] && return 1\n  return\
    \ 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=18 encoding='utf-8'>
  timestamp: 1660060215
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local L1 L2\n    for L1\
    \ in $*; do\n        L2=()\n        for L1item in $L1; do\n            case \"\
    $L1item\" in\n                -0)\n                    (( L2[0] < L1item )) &&\
    \ L2[0]=$L1item\n                    ;;\n                *)\n                \
    \    (( L2[1] < L1item )) && L2[1]=$L1item\n                    ;;\n         \
    \   esac\n        done\n        (( L2[1] == 0 )) && return 1\n    done\n    return\
    \ 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -r file=\"$1\"\n  shift\n\
    \  awk 'BEGIN{ res=0 }\n     {\n       for(i=1; i<=NF; i++)\n         {\n    \
    \       if($i==\"\" || $i==prev)\n             {\n               if(i==1)\n  \
    \               {\n                   res=1;\n                   break;\n    \
    \             }\n               continue;\n             }\n           prev=$i;\n\
    \           if(res==1)\n             {\n               res=0;\n              \
    \ break;\n             }\n         }\n     }\n     END{ print res }'  \"${file}\"\
    \ \\\n    >/dev/null\n  return $?\n}\n\ncandidate() {\n    monotonic \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: fatal: cannot open file `1 2 4 10'' for reading (No such
    file or directory)

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal elems=$1 prev=0 cur=0\
    \ ret=0 count\n\tlocal i ix iy x\n\tIFS=' ' read -r -a elems <<< \"$1\"\n\tfor\
    \ ix in \"${!elems[@]}\"; do\n\t\tiy=${elems[$ix]}\n\t\t[[ $iy < $prev || $iy\
    \ > $cur ]] && ret=1 || ret=0\n\t\tprev=$iy\n\t\tcur=$iy\n\tdone\n\tcount=$((ix-ix+1))\n\
    \t[ \"$ret\" == \"1\" ] && [ \"$count\" -gt 1 ] && return 0\n\treturn 1\n}\n\n\
    candidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -r line=${1}\n  local\
    \ -r lines=${line//$'\\n'/}\n  local previous\n  local -a elements\n  local result\n\
    \  IFS=$'\\n' read -r -a elements <<< \"${lines}\"\n  result=false\n  for ((i\
    \ = 0; i < ${#elements[@]}; i++)); do\n    local e=${elements[i]}\n    if [[ -z\
    \ \"${e}\" ]]; then\n      continue\n    fi\n    local timestamp=$(stat -c %Y\
    \ \"${e}\")\n    if [[ -z \"${timestamp}\" ]]; then\n      echo \"error: could\
    \ not stat ${e}\"\n      continue\n    fi\n    previous=$timestamp\n    if [[\
    \ \"${previous:-}\" > \"${timestamp}\" ]]; then\n      result=true\n    fi\n \
    \ done\n  echo \"${result}\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'stat: cannot stat ''1 2 4 10'': No such file or directory

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local elements=$1\n\n  \
    \  local i\n    local val\n    local minval\n    local maxval\n    local x\n \
    \   local minx\n    local maxx\n    local y\n    local miny\n    local maxy\n\
    \    local cmp\n\n    # Special case: if only one element return true\n    if\
    \ [[ ${#elements} -eq 1 ]]; then\n        echo -n \"true\"\n        return\n \
    \   fi\n\n    # Scan for min and max values\n    minval=\"${elements[0]}\"\n \
    \   maxval=\"${elements[0]}\"\n\n    for (( i=1; i<${#elements[@]}; i++ )); do\n\
    \        val=\"${elements[$i]}\"\n        echo \"Comparing ${minval} and ${val}\"\
    \n        minval=${val}\n        [ $minval -eq \"$minval\" ] 2>/dev/null &&\n\
    \            cmp=0 ||\n            cmp=1\n        [ $minval -gt \"$maxval\" ]\
    \ 2>/dev/null &&\n            cmp=-1 ||\n            cmp=-1\n        if [[ -z\
    \ \"$minval\" ]]; then\n            minval=\"$val\"\n            minx=$i\n   \
    \     else\n            maxval=\"$val\"\n            maxx=$i\n        fi\n   \
    \ done\n\n    echo -n \"false\"\n\n    if [[ $cmp -eq 1 ]]; then\n        # At\
    \ least one element is out of order\n        echo -n \"true\"\n    else\n    \
    \    # At least one element is out of order\n        if [[ $minx -eq $maxx ]];\
    \ then\n            # If only one element was out of order, return true\n    \
    \        echo -n \"true\"\n        else\n            # If more than one element\
    \ was out of order, return false\n            echo -n \"false\"\n        fi\n\
    \    fi\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -a list=( \"${1:-}\"\
    \ )\n  local n=\"${#list[@]}\"\n  local prev=0\n  local i\n  local last\n  local\
    \ lasti\n  local ret=true\n  for ((i=0; i<n; i++)); do\n    last=${list[$i]}\n\
    \    lasti=$i\n    local j\n    for ((j=$((i+1)); j<n; j++)); do\n      if [[\
    \ ${list[$j]} == ${last} ]]; then\n        local m=$((${i}+1))\n        if [[\
    \ $((i-lasti)) -gt $((m-prev)) ]]; then\n          ret=false\n          break\n\
    \        fi\n      else\n        prev=$((i+1))\n      fi\n    done\n  done\n \
    \ echo $ret\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local a b x y\n    a=$(echo\
    \ \"$1\" | sed -e 's/^[ \\t]*//')\n    for x in $a; do\n\ta=\"$a\\n$x\"\n\tb=$(echo\
    \ \"$1\" | sed -e 's/^[ \\t]*//')\n\ty=0\n\tfor y in $b; do\n\t    if [ \"$x\"\
    \ -gt \"$y\" ]; then\n\t\techo \"true\"\n\t\treturn\n\t    else\n\t\tif [ \"$x\"\
    \ -lt \"$y\" ]; then\n\t\t    echo \"true\"\n\t\t    return\n\t\tfi\n\t    fi\n\
    \tdone\n    done\n    echo \"false\"\n}\n\ncandidate() {\n    monotonic \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i=1\n  local n=$#\n\
    \  local min=${1:-$n}\n  local max=0\n  local output\n  while [ $i -le $n ]; do\n\
    \    local val=${!i}\n    if [ $val -gt $max ]; then\n      max=$val\n    fi\n\
    \    if [ $val -lt $min ]; then\n      min=$val\n    fi\n    i=$(($i+1))\n  done\n\
    \  output=$(($max-$min))\n  if [ $output -eq 0 ]; then\n    output=true\n  else\n\
    \    output=false\n  fi\n  echo \"$output\"\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyo8y1qar.sh: line 19: [: too many arguments

    /tmp/tmpyo8y1qar.sh: line 22: [: too many arguments

    /tmp/tmpyo8y1qar.sh: line 27: 0-1 2 4 10: syntax error in expression (error token
    is "2 4 10")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local elements\n    local\
    \ line\n    local last\n    local result\n\n    local -n list=${1:-}\n    local\
    \ -n last=${2:-}\n    local -n result=${3:-}\n\n    if [[ \"${#list}\" -eq 0 ]];\
    \ then\n        result=\"false\"\n        return\n    fi\n\n    elements=()\n\
    \    last=${list[-1]}\n    last=${last//[[:space:]]/}\n    last=${last//[[:punct:]]/}\n\
    \n    for line in \"${list}\"; do\n        line=${line//[[:space:]]/}\n      \
    \  line=${line//[[:punct:]]/}\n        if [[ \"${line}\" -ne \"${last}\" ]]; then\n\
    \            elements=(\"${elements[@]}\" \"$line\")\n            last=${line}\n\
    \        fi\n    done\n\n    result=\"${elements[@]}\"\n    echo \"${result}\"\
    \ | sort -n | uniq -c | sort -n | uniq -c | sort -n > /dev/null\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpp59t8oz4.sh: line 17: local: `1 2 4 10'': invalid variable name
    for name reference

    /tmp/tmpp59t8oz4.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpp59t8oz4.sh: line 19: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i=\"$(( $#-2 ))\"\n\
    \  [[ $i -eq 0 ]] || local a=$1\n  [[ $i -eq 1 ]] || local b=$2\n  [[ $i -eq 2\
    \ ]] || local c=$3\n  [[ $i -eq 3 ]] || local d=$4\n  [[ $i -eq 4 ]] || local\
    \ e=$5\n\n  local max=$(( 0 ))\n  local min=$(( 0 ))\n  local x=$(( 0 ))\n  local\
    \ y=$(( 0 ))\n\n  [[ $c -eq 0 ]] || [[ $d -eq 0 ]] || [[ $e -eq 0 ]]\n\n  [[ $a\
    \ -gt 0 ]] || [[ $b -gt 0 ]] || [[ $c -gt 0 ]] || [[ $d -gt 0 ]] || [[ $e -gt\
    \ 0 ]] || return\n\n  local tmp=$(( 0 ))\n  local tmp2=$(( 0 ))\n\n  for i in\
    \ $(seq 0 $(( $(echo $a | wc -w) - 1 ))); do\n    [[ $tmp -eq 1 ]] || [[ $tmp2\
    \ -eq 1 ]] || [[ $c -le 1 ]] || [[ $d -le 1 ]] || [[ $e -le 1 ]]\n    [ $a -le\
    \ $(( $a )) ] && [[ $b -le $(( $b )) ]] && [[ $c -le $(( $c )) ]] && [[ $d -le\
    \ $(( $d )) ]] && [[ $e -le $(( $e )) ]] || continue\n    local j=$(( $(echo $a\
    \ | awk -F \" \" '{ print $i }' | sort -nr | wc -w) - 1 ))\n    local k=$(( $(echo\
    \ $b | awk -F \" \" '{ print $i }' | sort -nr | wc -w) - 1 ))\n    local l=$((\
    \ $(echo $c | awk -F \" \" '{ print $i }' | sort -nr | wc -w) - 1 ))\n    local\
    \ m=$(( $(echo $d | awk -F \" \" '{ print $i }' | sort -nr | wc -w) - 1 ))\n \
    \   local n=$(( $(echo $e | awk -F \" \" '{ print $i }' | sort -nr | wc -w) -\
    \ 1 ))\n    local jx=$(echo $j | awk '{print $1*$2}')\n    local k\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmbld4sgz.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmpmbld4sgz.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i ilist len out\n  #\
    \ shellcheck disable=SC2086\n  ilist=\"$1\"\n  # shellcheck disable=SC2086\n \
    \ len=\"$#\"\n  out=\"$(printf '%s\\n' \"${ilist}\"| sort -n | uniq -c | sort\
    \ -n | \\\n    awk '$2 > 1 { print $1 }')\"\n  [[ $out == *$ilist* ]] && return\
    \ 0\n  return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list_elements=$(echo\
    \ \"$1\" | tr \" \" \"\\n\")\n  local last_element=\"${list_elements[${#list_elements[@]}\
    \ - 1]}\"\n\n  for (( i = 1; i <= ${#list_elements[@]}; i++ )); do\n    local\
    \ current_element=\"${list_elements[i - 1]}\"\n\n    if (( $(echo \"$list_elements[i]\"\
    \ \"$last_element\" | bc -l) -eq 0 )); then\n      echo \"true\"\n      return\
    \ 0\n    fi\n\n    if (( $(echo \"$current_element > $last_element\" | bc -l)\
    \ -eq 0 )); then\n      echo \"true\"\n      return 0\n    fi\n\n    local last_element=\"\
    ${current_element}\"\n  done\n\n  echo \"false\"\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 4: syntax error

    /tmp/tmpj4wgokbt.sh: line 18: ((: 1

    2

    4

    2

    4

    10 -eq 0 : syntax error in expression (error token is "2

    4

    2

    4

    10 -eq 0 ")

    /tmp/tmpj4wgokbt.sh: line 23: ((: 1

    2

    4

    1

    2

    4

    10 -eq 0 : syntax error in expression (error token is "2

    4

    1

    2

    4

    10 -eq 0 ")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i1 i2 i3 diff i1i i2i\
    \ i3i incr=0 decr=0\n  IFS=$'\\n' i1=0 i2=0 i3=0\n  for i in $*; do\n    [[ $i\
    \ =~ ^-?[0-9]+$ ]] || return 1\n    [i1=$i; i1i=$i1]\n    [i2=$i; i2i=$i2]\n \
    \   [i3=$i; i3i=$i3]\n    ((incr=$((incr+i1i)))) [i1i=$i1]\n    ((decr=$((decr-i2i))))\
    \ [i2i=$i2]\n    ((decr=$((decr-i3i)))) [i3i=$i3]\n  done\n  if [[ -z $i1 ]];\
    \ then\n    if [[ -z $i2 ]]; then\n      if [[ -z $i3 ]]; then\n        return\
    \ 0\n      fi\n      incr=$((incr-i3i)) decr=$((decr+i3i)) ;;\n      incr=$((incr+i3i))\
    \ decr=$((decr-i3i)) ;;\n      incr=$((incr-i2i)) decr=$((decr+i2i)) ;;\n    \
    \  incr=$((incr+i2i)) decr=$((decr-i2i)) ;;\n    else incr=$((incr+i3i))\n   \
    \   decr=$((decr+i3i)) ;;\n    else incr=$((incr-i3i)) ;;\n    else incr=$((incr-i2i))\
    \ ;;\n    else incr=$((incr+i2i)) ;;\n    else decr=$((decr-i3i)) ;;\n    else\
    \ decr=$((decr+i3i)) ;;\n    fi\n  fi\n  diff=$((incr-decr))\n  [[ $diff -ne 0\
    \ ]] || return 0\n  [[ $diff -gt 0 ]] || return 1\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2i0itijm.sh: line 19: syntax error near unexpected token `[i1i=$i1]''

    /tmp/tmp2i0itijm.sh: line 19: `    ((incr=$((incr+i1i)))) [i1i=$i1]''

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local sorted=( ${1//\\/ }\
    \ )\n  local sortedlength=${#sorted[@]}\n  local nextvalue\n  local retval\n \
    \ local diff\n  local index\n  local nextindex\n  local length\n  local lengthdiff\n\
    \  local first\n  local last\n  local lengthdiff\n  local i\n\n  retval=false\n\
    \n  if [ $sortedlength -eq 0 ]; then\n    return 0\n  fi\n\n  if [ $sortedlength\
    \ -eq 1 ]; then\n    first=$sorted[0]\n    if [ \"$first\" -gt \"$last\" ] ||\
    \ [ \"$first\" -lt \"$last\" ]; then\n      retval=true\n    fi\n  else\n    first=$sorted[0]\n\
    \    last=$sorted[$sortedlength-1]\n    length=${#sorted[@]}\n    length=${#sorted[@]}-$((length-1))\n\
    \    lengthdiff=$((length-sortedlength))\n    nextvalue=$((first+lengthdiff))\n\
    \n    if [ \"$first\" -ge \"$nextvalue\" ] || [ \"$first\" -le \"$last\" ]; then\n\
    \      retval=true\n    fi\n  fi\n\n  for i in $(seq 1 $sortedlength); do\n  \
    \  nextvalue=$((sorted[$i]+1))\n    diff=$((nextvalue-nextvalue))\n    nextindex=$(expr\
    \ $i+1 \\* $length)\n    if [ \"$diff\" -gt 0 ]; then\n      retval=true\n   \
    \ elif [ \"$diff\" -lt 0 ]; then\n      retval=false\n      break\n    fi\n  done\n\
    \n  return \"$retval\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdpc8exvx.sh: line 43: 1[0]: syntax error: invalid arithmetic operator
    (error token is "[0]")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local elements=\"${1}\"\n\
    \  local sorted=$(command awk '{print gensub(\"\\\\([0-9]\\\\)$\",\"\",1,$0)}')\n\
    \  # Sort elements numerically\n  local sorted_elements=$(echo \"$elements\" |\
    \ tr ' ' '\\n' | sort --numeric-sort --key=2 | tr ' ' '\\n')\n  # Compare sorted\
    \ elements\n  local result=$(($(echo \"$sorted_elements\" | tr ' ' '\\n' | sort\
    \ --key=2) > $(echo \"$sorted\" | tr ' ' '\\n' | sort --numeric-sort --key=2)))\n\
    \  echo \"$result\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=3 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=24 encoding='utf-8'>
  timestamp: 1660060215
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local list_elements=$1\n\
    \n    local last_val=\"$list_elements[$((${#list_elements[@]} - 1))]\"\n    for\
    \ (( i=${#list_elements[@]} - 1; i >= 0; --i )); do\n        local current_val=\"\
    $list_elements[i]\"\n        if [[ $last_val > $current_val ]]; then\n       \
    \     # monotonically increasing\n            return 0\n        fi\n        last_val=$current_val\n\
    \    done\n    return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -n list=\"$1\"\n  [[\
    \ $# -ne 1 ]] || [[ \"$list\" =~ $1 ]]\n}\n\ncandidate() {\n    monotonic \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxhyym_5_.sh: line 12: local: `1 2 4 10'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  # return true if a list is\
    \ monotonically increasing or decreasing\n  local i\n  local i1=$1\n  local i2\n\
    \  local last\n  local diff\n  local t1\n  local t2\n  local i3\n  local i4\n\
    \  for i in $( echo $i1 ); do\n    i2=$i\n    last=$i1\n    i3=`expr index \"\
    $i\" \"$i2\"`\n    if [ $i3 = -1 ]; then return 1; fi\n    while [ $i3 -ne 0 ];\
    \ do\n      last=$i\n      i4=`expr index \"$i\" \"$i2\"`\n      if [ $i4 -eq\
    \ 0 ]; then return 1; fi\n      diff=`expr \"$i\" \"$i3\"`\n      i1=$i4\n   \
    \   i2=`expr index \"$i3\" \"$i4\"`\n      i3=$i4\n    done\n  done\n  return\
    \ 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=30 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=21 encoding='utf-8'>
  timestamp: 1660060215
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list_elements sorted=()\
    \ last=$1 shift\n  list_elements=($1)\n  sorted=( $(sort ${list_elements[@]})\
    \ )\n  shift\n  for e in \"${sorted[@]}\"; do\n    if [ \"$e\" -gt \"$last\" ];\
    \ then\n      return 0\n    elif [ \"$e\" -lt \"$last\" ]; then\n      return\
    \ 1\n    fi\n  done\n  return 2\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") =\
    \ \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local i\n    local len\n\
    \    local prev=0\n    local next\n    local result\n    local x\n    len=\"${#1}\"\
    \n    for ((i = 0; i < len; i++))\n    do\n        x=\"${1:$i:1}\"\n        case\
    \ \"${x}\" in\n            *[!-]* )\n                echo \"true\"\n         \
    \       return\n                ;;\n            *)\n                x=$((${x}\
    \ < prev ? 1 : -1))\n                prev=${x}\n                ;;\n        esac\n\
    \    done\n    echo \"false\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local x y diffs xs ys\n\
    \    xs=()\n    ys=()\n    for x in $*; do\n        diffs=()\n        for y in\
    \ $xs; do\n            diffs+=($(echo \"$y > $x\" | bc))\n        done\n     \
    \   [[ ${#diffs[*]} -gt 0 ]] || return 1\n        xs+=(\"$x\")\n        ys+=(\"\
    $y\")\n    done\n    [[ ${#xs[*]} -gt 0 ]] || return 1\n    [[ ${#ys[*]} -gt 0\
    \ ]] || return 1\n    [[ \"${ys[*]}\" < \"${xs[*]}\" ]]\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local i=1\n    local prev=-1\n\
    \    local res=\"\"\n    local result=$(echo \"$1\" | sed 's/ /\\n/g' | sort -n\
    \ | \\\n        while read line; do\n            ((i++))\n            if [ $i\
    \ -eq 1 ]; then\n                if [ \"$prev\" != $line ]; then\n           \
    \         prev=$line\n                    res=\"$prev true\"\n               \
    \ else\n                    res=\"$res true\"\n                fi\n          \
    \  elif [ $i -eq 2 ]; then\n                if [ \"$prev\" != \"$line\" ]; then\n\
    \                    prev=$line\n                    res=\"$prev false\"\n   \
    \             else\n                    res=\"$res true\"\n                fi\n\
    \            elif [ $i -ge 3 ] && [ $i -le 5 ]; then\n                if [ \"\
    $prev\" != \"$line\" ]; then\n                    prev=$line\n               \
    \     res=\"$prev false\"\n                else\n                    res=\"$res\
    \ true\"\n                fi\n            elif [ $i -eq 5 ]; then\n          \
    \      if [ \"$prev\" != \"$line\" ]; then\n                    prev=$line\n \
    \                   res=\"$prev true\"\n                else\n               \
    \     res=\"$res false\"\n                fi\n            fi\n        done)\n\
    \    echo \"$result\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  # sort -n -t - -u \"$1\" |\
    \ wc -l\n  sort -nr <<< \"$1\" | wc -l\n}\n\ncandidate() {\n    monotonic \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  # $1 is assumed to be space-separated\
    \ list\n  local i j k\n  local count=0\n  for k in $(echo $1 | tr -s ' ' ' ');\
    \ do\n    ((count++))\n    i=$(( k-1 ))\n    j=$(( k ))\n    if [ $i -gt $j ];\
    \ then\n      return 0\n    elif [ $i -lt $j ]; then\n      return 1\n    elif\
    \ [ $k -gt $j ]; then\n      return 1\n    elif [ $k -lt $j ]; then\n      return\
    \ 0\n    fi\n  done\n  return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") =\
    \ \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal elements=($(echo \"\
    $1\" | sed 's/ /\\n/g'))\n\tlocal max=0\n\tlocal min=1\n\tfor element in ${elements[@]};\
    \ do\n\t\tlocal this=`expr $element \\* 1000`\n\t\tlet thisMax=`expr $this \\\
    > $max`\n\t\tlet thisMin=`expr $this \\< $min`\n\t\tif [ \"$thisMax\" -eq 1 ]\
    \ && [ \"$thisMin\" -eq 1 ]; then\n\t\t\treturn 0\n\t\tfi\n\t\tlet max=$thisMax\n\
    \t\tlet min=$thisMin\n\tdone\n\treturn 1\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local i\n    declare -a\
    \ elements=($(echo \"$1\" | tr \" \" \" \"))\n    elements=($(sort <<<\"${elements[@]}\"\
    ))\n    for (( i=0; i<${#elements[@]} - 1; i++ )); do\n        [ -z \"${elements[i+1]}\"\
    \ ] && return 1\n        [ \"${elements[i]}\" -gt \"${elements[i+1]}\" ] || return\
    \ 0\n    done\n    return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local a b last;\n  a=$1;\n\
    \  shift;\n  last=1;\n  while [ $# -gt 0 ]; do\n    b=$1;\n    shift;\n    [ $a\
    \ -gt $b ] ||\n      [ $a -eq $b ] &&\n      last=0 || last=1;\n  done\n  echo\
    \ $last\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -a list=( \"${@}\" )\n\
    \  local i cur prev tmp res\n  local -a sorted=($(sort --reverse \"${list[@]}\"\
    ))\n  for (( i = 0; i < ${#sorted[@]}; i++ )); do\n    prev=${sorted[$(( i - 1\
    \ ))]}\n    cur=${sorted[$i]}\n    res=0\n    for (( j = 0; j < i; j++ )); do\n\
    \      tmp=${sorted[$j]}\n      (( tmp > cur )); res=$(( res + tmp )) || res=$((\
    \ res - prev ))\n    done\n    res=$(( res - prev ))\n    [[ $res -eq 0 ]] ||\
    \ return 1\n  done\n  return 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: ''1 2 4 10'': No such file or directory

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local l n s i j\n    local\
    \ first\n    local last\n    local ok\n    read -a l <<< \"$1\"\n    local -a\
    \ res\n    first=${l[0]}\n    last=${l[-1]}\n    res=( )\n    for n in \"${l[@]:1}\"\
    ; do\n        ok=false\n        for (( j=0; !ok && j<${#l[@]}; j++ )); do\n  \
    \          local -a l1=( )\n            read -a l1 <<< \"${l[j]}\"\n         \
    \   if [ -z \"${l1[*]}\" ]; then\n                continue\n            fi\n \
    \           local -a l2=( )\n            read -a l2 <<< \"${l[j-1]}\"\n      \
    \      if [ -z \"${l2[*]}\" ]; then\n                continue\n            fi\n\
    \            if [ ! \"$n\" -gt \"$l1[-1]\" ] || [ \"$n\" -lt \"$l2[0]\" ]; then\n\
    \                ok=true\n            fi\n        done\n        if ! ok; then\n\
    \            res=( \"${res[@]}\" \"$n\" )\n        fi\n    done\n    [ \"$first\"\
    \ -eq \"$last\" ] || return 0\n    for ((i=0; i<${#res[@]}; i++)); do\n      \
    \  [ \"${l[$i]}\" -gt \"$res[i]\" ] && return 1 || return 0\n    done\n    return\
    \ 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpvbla7l61.sh: line 34: [: 1[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 10[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 2[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 1[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 4[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 2[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 10[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 4[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 38: ok: command not found

    /tmp/tmpvbla7l61.sh: line 34: [: 1[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 10[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 2[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 1[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 4[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 2[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 10[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 4[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 38: ok: command not found

    /tmp/tmpvbla7l61.sh: line 34: [: 1[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 10[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 2[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 1[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 4[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 2[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 10[-1]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 34: [: 4[0]: integer expression expected

    /tmp/tmpvbla7l61.sh: line 38: ok: command not found

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local set prev i n\n  local\
    \ -n LIST=\"$1\"\n  shift\n  set=$(IFS=,;echo \"$*\")\n  prev=\"1\"\n  for i in\
    \ $(seq 0 \"$#\"); do\n    if [ -z \"$set\" ]; then\n      continue\n    fi\n\
    \    if [ \"$prev\" == \"$set\" ]; then\n      prev=\"1\"\n      continue\n  \
    \  fi\n    if [ \"$prev\" != \"$set\" ]; then\n      prev=\"$set\"\n      echo\
    \ \"$set\"\n      return 0\n    fi\n  done\n  prev=\"1\"\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe48iszv2.sh: line 13: local: `1 2 4 10'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local l=$(echo \"$1\" | tr\
    \ ' ' '\\n')\n  local m=$2 || 0\n  local n=$3 || 0\n  [[ $n -eq 0 ]] && n=\"$(echo\
    \ \"$l\" | wc -w)\"\n  [[ $(echo \"$l\" | wc -w) -eq 1 ]] && n=$((n-1))\n  local\
    \ i=0\n  local j=0\n  local k=0\n  while (( i < $(echo \"$l\" | wc -l) )) ; do\n\
    \    (( i++, j++ ))\n    if (( i <= n )); then\n      if [[ $m -eq 0 ]]; then\n\
    \        if (( j <= m )); then\n          (( m = j ))\n        fi\n      else\n\
    \        if (( j > m )); then\n          (( m = j ))\n        fi\n      fi\n \
    \   fi\n    (( k++ ))\n  done\n  if (( n <= i )); then\n    return 1\n  else\n\
    \    return 0\n  fi\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local arg\n    local res=\"\
    false\"\n    while (( ${#1} > 0 )); do\n        arg=\"${1}\"\n        shift\n\
    \        if [[ \"$arg\" =~ ^([-0-9]+|-[0-9.]+) ]]; then\n            if (( ${arg:0:1}\
    \ > 0 )) ; then\n                res=\"$res\"\n            else\n            \
    \    if (( ${arg:0:1} < 0 )) ; then\n                    res=\"$res\"\n      \
    \          else\n                    if (( ${arg:0:1} != ${arg:0:1} )) ; then\n\
    \                        res=\"$res\"\n                    fi\n              \
    \  fi\n            fi\n        fi\n    done\n    echo \"$res\"\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    set -- $1 || return\n  \
    \  local first=${1%% *}\n    local last=${1##* }\n    local sorted=($first)\n\
    \    local lastsorted=($last)\n    for (( c=0; c < ${#sorted[@]}; c++ )); do\n\
    \        for (( l=${c}; l <= ${#lastsorted[@]} && l <= ${#sorted[@]}; l++ ));\
    \ do\n            [ \"${sorted[l]}\" -gt \"${lastsorted[l]}\" ] && break\n   \
    \     done\n        [ \"${sorted[c]}\" -gt \"${lastsorted[c]}\" ] && return 0\n\
    \        sorted[c]=${lastsorted[c]}\n        lastsorted[c]=${sorted[c]}\n    done\n\
    \    return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8nggbhta.sh: line 19: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i n x y\n  local -a\
    \ data\n  local s=0\n  local o=0\n  local k\n  local e\n  local p\n  local c\n\
    \  local b\n  data=($1)\n  for i in ${data[@]}; do\n    [[ $i == ${data[-1]} ]]\
    \ && break\n    ((s=s+1))\n  done\n  local s=$((s-1))\n  for k in \"${data[@]:${s}}\"\
    ; do\n    ((o=o+1))\n    [[ $k == ${data[((${#data[@]} - 1))]} ]] && break\n \
    \ done\n  local o=$((o-1))\n  [[ -z \"$k\" ]] || return 0\n  local j=$((o-1))\n\
    \  local i\n  local e\n  local p\n  local c\n  local b\n  local x\n  local y\n\
    \  local z\n  local d\n  local s\n  local i\n  local o\n  local p\n  local c\n\
    \  local b\n  local x\n  local y\n  local z\n  local d\n  local s\n  local k\n\
    \  local e\n  local p\n  local c\n  local b\n  local x\n  local y\n  local z\n\
    \  local d\n  local s\n  local k\n  local e\n  local p\n  local c\n  local b\n\
    \  local x\n  local y\n  local z\n  local d\n  local s\n  local k\n  local e\n\
    \  local p\n  local c\n  local b\n  local x\n  local y\n  local z\n  local d\n\
    \  local s\n  local k\n  local e\n  local p\n  local c\n  local b\n  local x\n\
    \  local y\n  local z\n  local d\n  local s\n  local k\n  local e\n  local p\n\
    \  local c\n  local b\n  local x\n  local y\n  local z\n  local d\n  local s\n\
    \  local k\n  local e\n  local p\n  local c\n  local b\n  local x\n  local y\n\
    \  local z\n  local d\n  local s\n  local k\n  local e\n  local p\n  local c\n\
    \  local b\n  local x\n  local y\n  local z\n  local d\n  local \n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list x\n  IFS=' ' read\
    \ -a list <<< \"$1\"\n  for x in \"${list[@]}\"; do\n    if [ -z \"$x\" ]; then\
    \ continue; fi\n    # Avoid trying to compare the numeric value with the empty\
    \ string.\n    # See this bug report: https://bugzilla.redhat.com/show_bug.cgi?id=1367486\n\
    \    if [ \"$x\" -gt \"$x\" ]; then return 0; fi\n    if [ \"$x\" -lt \"$x\" ];\
    \ then return 1; fi\n  done\n  return 0\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal l i last ok result=false\
    \ words=$1\n\tfor (( i=$#words; i; i-- )); do\n\t\twords=${words:0:i}\n\t\t[ -z\
    \ \"$words\" ] && return\n\t\tlast=${words::-1}\n\t\tok=0\n\t\twhile (( ok==0\
    \ )); do\n\t\t\t[ -z \"$last\" ] && break\n\t\t\tlast=$(( last + 1 ))\n\t\t\t\
    i=$(( i + 1 ))\n\t\t\t[ -z \"$words\" ] && return\n\t\t\t[ \"${words:$i}\" -gt\
    \ \"$last\" ] && ok=1\n\t\tdone\n\t\tresult=$(($result+ok))\n\tdone\n\techo $result\n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp23sa6qmb.sh: line 13: ((: i=1words: value too great for base (error
    token is "1words")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -r line=$1\n  local\
    \ -r list=\n  # Echo each item in list one at a time so we don't read too many\
    \ lines.\n  while IFS= read -r item; do\n    list=\"${list} $item\"\n  done <<<\
    \ \"$line\"\n  unset IFS\n  # Remove leading space, if any\n  list=\"${list#*\
    \ }\"\n  # Split each line into the elements using the same delimiter as $line\n\
    \  # (space).\n  list=($(echo \"$list\" | sed \"s:${line} ::g\"))\n  # Remove\
    \ trailing space, if any\n  list=\"${list[@]}\"\n  # If the length of the array\
    \ is 0, then assume that all elements are\n  # equal.  If the array has elements,\
    \ then assume that they are ordered.\n  if [ \"${#list}\" -eq 0 ]; then return\
    \ 1; fi\n  # If the length of the array is 1, then check that all elements are\
    \ equal\n  if [ \"${#list}\" -eq 1 ]; then\n    local elem=${list[0]}\n    local\
    \ elems=${list[0]}\n    for (( i = 0; i < ${#list}; i++ )); do\n      local other=${list[i]}\n\
    \      if [ \"$elem\" != \"$other\" ] || [ \"$elems\" != \"$other\" ]; then\n\
    \        return 1\n      fi\n      elem=$other\n      elems=${list[i]}\n    done\n\
    \  fi\n  # If there are more elements in the list than are in the array, assume\n\
    \  # that they are ordered.\n  local count=0\n  local prev=\n  for (( i = 0; i\
    \ < ${#list}; i++ )); do\n    local elem=${list[i]}\n    local elems=${list[i]}\n\
    \    if [ \"$elem\" != \"$elems\" ]; then\n      return 1\n    fi\n    if [ \"\
    $count\" -eq 0 ]; then\n      count=$i\n      prev=$elem\n      continue\n   \
    \ fi\n    if [ \"$count\" -gt \"$i\" ]; then\n      if [ \"$elem\" < \"$prev\"\
    \ ]; then\n        return 1\n      fi\n    fi\n    count=$(( $count + 1 ))\n \
    \   prev=$elem\n  done\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph8l8cpig.sh: line 16: list: readonly variable

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local L=(${1})\n    local\
    \ A=()\n    local B=()\n    local CURR\n    local END\n    for I in ${L[@]}; do\n\
    \        CURR=$I\n        END=$((${I} + 1))\n        for(( I=0 ; I<${#A[@]} &&\
    \ ${A[I]}<${CURR} ; I++)); do\n            B[I]=${A[I]}\n        done\n      \
    \  for(( I=0 ; I<${#A[@]} && ${A[I]}>${CURR} ; I++)); do\n            A[I]=${B[I]}\n\
    \        done\n        for(( I=0 ; I<${#A[@]} && ${A[I]}==${CURR} ; I++)); do\n\
    \            B[I]=${A[I]}\n        done\n        [[ ${B[@]} ]] || return 1\n \
    \   done\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe1o6sbqf.sh: line 20: ((: I<0 && <1 : syntax error: operand expected
    (error token is "<1 ")

    /tmp/tmpe1o6sbqf.sh: line 23: ((: I<0 && >1 : syntax error: operand expected (error
    token is ">1 ")

    /tmp/tmpe1o6sbqf.sh: line 26: ((: I<0 && ==1 : syntax error: operand expected
    (error token is "==1 ")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local a b\n    a=$(echo\
    \ \"$1\" | sed 's/^[ \\t]*//g')\n    # remove leading empty fields\n    a=${a#*}\n\
    \    local i\n    for ((i=0; i<${#a}; i++)); do\n        b=${a#*$i}\n        if\
    \ [[ \"$b\" == \"$a\" ]]; then\n            echo \"true\"\n            return\n\
    \        fi\n    done\n    echo \"false\"\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local a b i j min max\n  a=${1//+/\
    \ }; shift\n  for (( i=0; i<${#a}; i++ )); do\n    b=${a[i]//+/-}; shift\n   \
    \ for (( j=0; j<${#b}; j++ )); do\n      if [[ ${b[j]} -gt ${b[j+1]} ]]; then\n\
    \        b[j]=${b[j+1]}\n      fi\n    done\n    min=$(expr ${a[i]} + ${b[0]})\n\
    \    max=$(expr ${a[i]} + ${b[1]})\n    [[ \"$min\" -lt \"$max\" ]] && return\
    \ 1 || return 0\n  done\n  return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmppqb1xdii.sh: line 17: [[: 1 2 4 10: syntax error in expression\
    \ (error token is \"2 4 10\")\nexpr: syntax error: unexpected argument \u2018\
    2\u2019\nexpr: syntax error: unexpected argument \u20182\u2019\n"
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal L=${1// /}  # replace\
    \ spaces with newlines for readability\n\techo \"$L\" | while read -r line; do\n\
    \t\tIFS='' read -ra LB <<<\"$line\"  # split the line into array of words\n\t\t\
    # sort and get last element of array\n\t\tLB_sorted=($(IFS=$'\\n' sort <(printf\
    \ \"%s\\n\" \"${LB[@]}\") | tail -n 1))\n\t\tif [[ \"$LB\" = \"${LB_sorted[@]}\"\
    \ ]]; then\n\t\t\t# all elements are equal\n\t\t\treturn 0\n\t\telse\n\t\t\tif\
    \ [[ $LB_sorted =~ ^[0-9]+(-[0-9]+)?$ ]]; then\n\t\t\t\t# last element is numeric\n\
    \t\t\t\treturn 1\n\t\t\telif [[ $LB_sorted =~ ^[0-9]+$ ]]; then\n\t\t\t\t# last\
    \ element is numeric\n\t\t\t\treturn 1\n\t\t\telse\n\t\t\t\t# all elements are\
    \ not numeric\n\t\t\t\treturn 0\n\t\t\tfi\n\t\tfi\n\tdone\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local items=$1 prev=0 cur\
    \ last\n\n  [[ $# -eq 0 ]] && echo \"error: empty list\" && return 1\n  for item\
    \ in $items; do\n    [[ ${item%% *} == ${item%% *}* ]] || return 1\n    if [[\
    \ $item < $prev ]]; then\n      last=$item\n      cur=$item\n    elif [[ $item\
    \ > $cur ]]; then\n      last=$prev\n      cur=$item\n    else\n      cur=$item\n\
    \    fi\n    prev=$cur\n  done\n  echo -n $last\n  return 0\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local sorted_list=${1//[:\
    \ ]/}\n    local increasing=false\n    local decreasing=false\n\n    local i=1\n\
    \    local size=${#sorted_list}\n\n    while [ $i -le $size ]; do\n        local\
    \ first_element=${sorted_list:$i:1}\n        local second_element=${sorted_list:$(i+1):1}\n\
    \        if [ \"$first_element\" -gt \"$second_element\" ]; then\n           \
    \ increasing=true\n            decreasing=false\n        elif [ \"$first_element\"\
    \ -lt \"$second_element\" ]; then\n            increasing=false\n            decreasing=true\n\
    \        else\n            increasing=false\n            decreasing=false\n  \
    \      fi\n        i=$(( $i + 2 ))\n    done\n\n    echo \"$increasing && $decreasing\"\
    \n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpxz_r1mge.sh: line 21: i+1: command not found

    /tmp/tmpxz_r1mge.sh: line 21: i+1: command not found

    /tmp/tmpxz_r1mge.sh: line 21: i+1: command not found

    /tmp/tmpxz_r1mge.sh: line 22: [: : integer expression expected

    /tmp/tmpxz_r1mge.sh: line 25: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local -r first_time=\"$(echo\
    \ \"$1\" | awk '{ print $1; exit }')\"\n    local -r current_time=\"$(date +%s)\"\
    \n\n    local -a sorted\n    sorted=( $(sort -n \"$1\") )\n\n    for i in $(seq\
    \ 1 \"${#sorted[@]}\"); do\n        local first=${sorted[$i - 1]}\n        local\
    \ last=${sorted[$i]}\n        if [ \"$first\" -gt \"$last\" ]; then\n        \
    \    echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\
    \n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'sort: cannot read: ''1 2 4 10'': No such file or directory

    sort: cannot read: ''1 2 4 20'': No such file or directory

    sort: cannot read: ''1 20 4 10'': No such file or directory

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list=\"$1\"\n  local\
    \ last=\"${list:(-1)}\"\n  local next=\"${last}\"\n  while [ \"$next\" != \"$last\"\
    \ ]; do\n    case \"$last\" in\n      *[!0-9]*) echo \"false\" ;;\n      *[0-9]*)\
    \ echo \"true\" ;;\n      *) echo \"$next\" > \"$list\" ;;\n    esac\n    last=\"\
    $next\"\n    next=\"${next#?}\"\n  done\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local elements=($@)\n  local\
    \ last=\n  local i\n  local j\n  local diff\n  local max_diff\n  local is_increasing\n\
    \  for (( i = 0; i < ${#elements[@]}; ++i )); do\n    diff=0\n    max_diff=0\n\
    \    for (( j=0; j<i; ++j )); do\n      diff+=\"${elements[j+1]} ${elements[j]}\"\
    \n      if [[ ${diff} -ge ${max_diff} ]]; then\n        is_increasing=true\n \
    \       break\n      fi\n    done\n    if [[ ! ${is_increasing} ]]; then\n   \
    \   last=${elements[i]}\n      continue\n    fi\n    break\n  done\n  if [[ ${i}\
    \ -gt ${#elements[@]} ]]; then\n    return 1\n  else\n    return 0\n  fi\n}\n\n\
    candidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvh4qn66k.sh: line 24: [[: 02 1: syntax error in expression (error
    token is "1")

    /tmp/tmpvh4qn66k.sh: line 24: [[: 02 1: syntax error in expression (error token
    is "1")

    /tmp/tmpvh4qn66k.sh: line 24: [[: 02 14 2: syntax error in expression (error token
    is "14 2")

    /tmp/tmpvh4qn66k.sh: line 24: [[: 02 1: syntax error in expression (error token
    is "1")

    /tmp/tmpvh4qn66k.sh: line 24: [[: 02 14 2: syntax error in expression (error token
    is "14 2")

    /tmp/tmpvh4qn66k.sh: line 24: [[: 02 14 210 4: syntax error in expression (error
    token is "14 210 4")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i a b c\n  local list=\"\
    $1\"\n  shift\n  local output=\"false\"\n  for ((i=0; i < ${#list}; i++)); do\n\
    \    a=\"${list[i]}\"\n    for ((j=i+1; j<${#list}; j++)); do\n      b=\"${list[j]}\"\
    \n      c=$(expr $a > $b || $a < $b)\n      if [ \"$c\" = \"true\" ]; then\n \
    \       output=\"true\"\n        break\n      fi\n    done\n  done\n  echo \"\
    $output\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: ambiguous redirect

    /tmp/tmp7e1ootuw.sh: line 20: $b: '
  stdout: ''
  timestamp: 1660060211
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -r arg1=$1\n  local\
    \ -r list=( $arg1 )\n  local -r length=${#list[@]}\n  if (( length <= 1 )); then\n\
    \    echo \"${list[0]} is not an ordered list\"\n    return\n  fi\n  # reverse\
    \ list because the first element is the most recent\n  local -r list2=(${list[@]#*\
    \ })\n  local -r length=${#list2[@]}\n  if (( length < 2 )); then\n    echo \"\
    ${list2[0]} is not an ordered list\"\n    return\n  fi\n  local result=\n  for\
    \ (( i=length-2; i>=0; i-- )); do\n    result=$result${result:+,}${list2[i]}\n\
    \  done\n  # reverse result back to original order\n  result=${result%,}\n  echo\
    \ \"${result}\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnd134svz.sh: line 21: local: length: readonly variable

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local IFS='' OPTIND=1 L1\
    \ L2 L3 L4 L5 L6 L7 L8 L9 L10\n    local LLIST=$1\n\n    # Parse list\n    for\
    \ L1 in ${LLIST}; do\n        L2=${L1:0:1}\n        L3=${L1:1:1}\n        L4=${L1:2:1}\n\
    \        L5=${L1:3:1}\n        L6=${L1:4:1}\n        L7=${L1:5:1}\n        L8=${L1:6:1}\n\
    \        L9=${L1:7:1}\n        L10=${L1:8:1}\n\n        if [[ $L1 =~ ^-[0-9]+$\
    \ ]]; then\n            # Negative number\n            if (( $(echo \"$L1 < $L10\"\
    \ | bc -l | tail -n 1 | cut -c9- | head -c2) > 0 )) ; then\n                echo\
    \ \"false\"\n            else\n                echo \"true\"\n            fi\n\
    \        elif (( $L1 -gt $L10 )); then\n            if (( $(echo \"$L1 > $L10\"\
    \ | bc -l | tail -n 1 | cut -c9- | head -c2) > 0 )) ; then\n                echo\
    \ \"false\"\n            else\n                echo \"true\"\n            fi\n\
    \        elif (( $L1 -lt $L10 )); then\n            if (( $(echo \"$L1 < $L10\"\
    \ | bc -l | tail -n 1 | cut -c9- | head -c2) < 0 )) ; then\n                echo\
    \ \"false\"\n            else\n                echo \"true\"\n            fi\n\
    \        else\n            # Positive number\n            if (( $(echo \"$L1 =\
    \ $L10\" | bc -l | tail -n 1 | cut -c9- | head -c2) < 0 )) ; then\n          \
    \      echo \"true\"\n            else\n                echo \"false\"\n     \
    \       fi\n        fi\n    done\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") =\
    \ \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp486i7txd.sh: line 34: ((: 1 2 4 10 -gt  : syntax error in expression
    (error token is "2 4 10 -gt  ")

    /tmp/tmp486i7txd.sh: line 40: ((: 1 2 4 10 -lt  : syntax error in expression (error
    token is "2 4 10 -lt  ")

    (standard_in) 1: syntax error

    /tmp/tmp486i7txd.sh: line 48: ((: < 0 : syntax error: operand expected (error
    token is "< 0 ")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local n=1\n  local a=( \"\
    ${!1}\" )\n  local s=\"\"\n  for element in \"${a[@]}\"; do\n    local current=$(\
    \ bc <<<\"$n > 0\" )\n    local previous=$( bc <<<\"$n == 1\" )\n    local delta=$(\
    \ bc <<<\"( $element > $n )\" )\n    if [ \"$delta\" -eq 0 ]; then\n      delta=-1\n\
    \    elif [ \"$delta\" -eq 1 ]; then\n      delta=+1\n    fi\n    if [ \"$previous\"\
    \ -eq 0 ]; then\n      delta=0\n      previous\n    elif [ \"$previous\" -eq 1\
    \ ]; then\n      delta=1\n      previous\n    fi\n    s=${s$delta$element}\n \
    \   n=$( bc <<<\"$n+$delta\" )\n  done\n  echo \"$s\" | bc -l\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjqverwsa.sh: line 13: 1 2 4 10: invalid variable name

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal n=$1; shift\n\tlocal\
    \ x\n\tlocal last\n\tlocal y\n\tlocal prev\n\tx=0\n\ty=$((n-1))\n\tlast=$((n-1))\n\
    \tprev=0\n\twhile [ \"$n\" -gt \"0\" ]; do\n\t\tx=$((x-1))\n\t\tif [ \"$x\" -eq\
    \ \"$prev\" ]; then\n\t\t\ty=0\n\t\t\tlast=$((n-1))\n\t\t\tbreak\n\t\tfi\n\t\t\
    prev=$((n-1))\n\t\tlast=$((n-1))\n\tdone\n\tx=$((x-1))\n\tif [ \"$x\" -ne \"0\"\
    \ ]; then\n\t\tx=\"$x $prev\"\n\tfi\n\tif [ \"$y\" -eq \"$n\" ]; then\n\t\ty=\"\
    $y $last\"\n\tfi\n\tif [ \"$prev\" -gt \"0\" ]; then\n\t\tx=\"$x $prev\"\n\tfi\n\
    \tif [ \"$last\" -gt \"0\" ]; then\n\t\ty=\"$y $last\"\n\tfi\n\tif [ \"$y\" -eq\
    \ \"$x\" ]; then\n\t\treturn 0\n\telse\n\t\treturn 1\n\tfi\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1nn2svuo.sh: line 18: 1 2 4 10: syntax error in expression (error
    token is "2 4 10")

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local l i\n    l=$1\n  \
    \  for ((i=1; i<${#l}; i++)); do\n        if [ \"$i\" -eq 0 ] ; then continue;\
    \ fi\n        if [ \"$i\" -eq 1 ] || [ \"$l\" -le \"$l\" ] || [ \"$i\" -ge \"\
    $i\" ] || [ \"$l\" -ge \"$l\" ] ; then return 0; fi\n    done\n    return 1\n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  [ \"$#\" -eq 1 ] || return\
    \ 1\n  local elements\n  local element\n  local output\n  local i\n  local j\n\
    \n  # Convert to an array\n  IFS=' ' read -r -a elements <<< \"$1\"\n\n  # Scan\
    \ the list from left-to-right\n  for (( j=${#elements[@]}-1; j>=0; j-- )); do\n\
    \    output=$(\n      echo $((elements[$j+1] > elements[$j])) || $output || echo\
    \ \"false\"\n    )\n  done\n  echo $output\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal L=\"$1\"\n\tlocal i\n\
    \t[[ -z \"$L\" ]] && return 0\n\t[[ ${L:0:1} -eq \" \" ]] && L=\"$(echo \"$L\"\
    )\"\n\t[[ ${L:0:1} -eq \"-\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1}\
    \ -eq \"+\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq \".\" ]] &&\
    \ L=\"$(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq \",\" ]] && L=\"$(echo \"$L\"\
    \ | xargs)\"\n\t[[ ${L:0:1} -eq \"?\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\t[[\
    \ ${L:0:1} -eq \"!\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq \"\\\
    \"\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq \"(\"]] && L=\"$(echo\
    \ \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq \")\" ]] && L=\"$(echo \"$L\" | xargs)\"\
    \n\t[[ ${L:0:1} -eq \";\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq\
    \ \"{\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq \"}\" ]] && L=\"\
    $(echo \"$L\" | xargs)\"\n\t[[ ${L:0:1} -eq \"'\" ]] && L=\"$(echo \"$L\" | xargs)\"\
    \n\t[[ ${L:0:1} -eq \"`\" ]] && L=\"$(echo \"$L\" | xargs)\"\n\n\t# sort -n -k\
    \ 1\n\tfor i; do case \"$i\" in *\" \"*) continue;; esac; case $i in\n\t\t*[!-0-9]-[0-9]*)\
    \ continue;;\n\t\t*)\n\t\t\t[ \"$i\" -le \"$L\" ] && return 0\n\t\t\t[ \"$i\"\
    \ -ge \"$L\" ] && return 1\n\t\tesac\n\tdone\n\treturn 1\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmpx4guykdh.sh: line 23: unexpected token `newline', conditional binary\
    \ operator expected\n/tmp/tmpx4guykdh.sh: line 23: syntax error near `xargs)\"\
    '\n/tmp/tmpx4guykdh.sh: line 23: `\t[[ ${L:0:1} -eq \"(\"]] && L=\"$(echo \"$L\"\
    \ | xargs)\"'\n"
  stdout: ''
  timestamp: 1660060210
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local elements=$(echo \"$1\"\
    \ | sed -e \"s@[ \\t]*\\([0-9]\\+\\).*$@@\")\n  local first=$(awk -v e=\"$elements\"\
    \ '{for(i=1; i<=NF; i++) if($i > e[i+1]) print \"false\"; else print \"true\"\
    }')\n  if [ \"$first\" = \"false\" ]; then\n    local last=$(awk -v e=\"$elements\"\
    \ '{for(i=1; i<=NF; i++) if($i < e[i+1]) print \"false\"; else print \"true\"\
    }')\n    if [ \"$last\" = \"true\" ]; then\n      echo \"true\"\n    else\n  \
    \    echo \"false\"\n    fi\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=64 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=61 encoding='utf-8'>
  timestamp: 1660060215
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i\n  for ((i=0; i<${#1};\
    \ i+=1)); do\n    local x\n    # convert string \"x y\" into integer x\n    read\
    \ x x <&${1}\n    # convert string \"x y x\" into integer y\n    read y y <&${1}\n\
    \    if [[ $(eval expr \"${x} > ${y}\") ]]; then \n      return 0\n    elif [[\
    \ $(eval expr \"${x} < ${y}\") ]]; then \n      return 1\n    elif [[ $(eval expr\
    \ \"${x} == ${y}\") ]]; then \n      return 1\n    elif [[ $(eval expr \"${x}\
    \ < ${y}\" && $(eval expr \"${x} > ${y}\")) ]]; then \n      return 1\n    elif\
    \ [[ $(eval expr \"${x} > ${y}\" && $(eval expr \"${x} < ${y}\")) ]]; then \n\
    \      return 1\n    else \n      return 0\n    fi\n  done\n  return 1\n}\n\n\
    candidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq892fsvq.sh: line 16: ${1}: ambiguous redirect

    /tmp/tmpq892fsvq.sh: line 18: ${1}: ambiguous redirect

    /tmp/tmpq892fsvq.sh: eval: line 19: syntax error near unexpected token `newline''

    /tmp/tmpq892fsvq.sh: eval: line 19: `expr  > ''

    /tmp/tmpq892fsvq.sh: eval: line 21: syntax error near unexpected token `newline''

    /tmp/tmpq892fsvq.sh: eval: line 21: `expr  < ''

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local sorted_list=(\"$@\"\
    )\n  local first=${sorted_list[0]}\n  local last=${sorted_list[${#sorted_list[@]}\
    \ - 1]}\n  local retval\n  local prev_diff\n\n  if [ $(echo \"${first} > ${last}\
    \ | bc\" |bc -l) -eq 0 ]; then\n    echo \"true\"\n    return 0\n  fi\n\n  prev_diff=0\n\
    \  retval=0\n  for ((i=1; i<${#sorted_list[@]}; i++)); do\n    local diff=$(echo\
    \ \"${sorted_list[$i]} - ${sorted_list[i - 1]}\" |bc -l)\n    if [[ $diff -ne\
    \ 0 ]]; then\n      retval=1\n      break\n    elif [[ $diff -eq 0 && $diff !=\
    \ $prev_diff ]]; then\n      retval=1\n      break\n    elif [[ $diff -eq 0 &&\
    \ $prev_diff != 0 ]]; then\n      retval=1\n      break\n    fi\n    prev_diff=$diff\n\
    \  done\n\n  echo \"${retval}\"\n  return \"${retval}\"\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: illegal character: |

    /tmp/tmpsscegpe2.sh: line 18: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local xs ys mx my xd yd\
    \ d s p i xt yt\n    # $1 is a space-separated list\n    IFS=' ' read -a xs <<<\
    \ \"$1\"\n    mx=${#xs[*]}\n    my ${mx}=0\n    for (( i=0; i < mx; i++ )); do\n\
    \        # find min\n        xd=${xs[i]}\n        mx=$(( mx < xd ? mx : xd ))\n\
    \        (( mx-- ))\n        ys=${ys:+${ys}:}$xd\n    done\n    # find max\n \
    \   yd=${ys[$mx]}\n    for (( i=0; i < mx; i++ )); do\n        yd=$(( yd >= ${xs[i]}\
    \ ? yd : ${xs[i]} ))\n    done\n    yd=$(( yd < 0 ? 0 : $yd ))\n    s=$(( yd <\
    \ xs ? $yd : xs ))\n    s=${s:+${s}}\n    p=$(echo \"$s\" | sort -n | tail -n\
    \ 1)\n    i=1\n    for xt in ${xs[*]}; do\n        if [[ $p < $xt ]]; then\n \
    \           s=$(( $s ))\n        elif [[ $p > $xt ]]; then\n            s=$((\
    \ $s - 1 ))\n        else\n            s=$(( s + 1 ))\n        fi\n    done\n\
    \    echo \"$s\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp38htrmje.sh: line 16: my: command not found

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  test \"$#\" -eq 1 &&\n   \
    \ test -n \"$1\" ||\n    return\n\n  local n=$1 nlist\n  local -a list\n\n  nlist=$(nfilter\
    \ \"$1\")\n  list=($nlist)\n\n  if [ ! -e \"$nlist\" ]; then\n    echo \"No such\
    \ file: $nlist\"\n    exit 1\n  fi\n\n  if [ ! -e \"$nlist\" ]; then\n    echo\
    \ \"No such file: $nlist\"\n    exit 1\n  fi\n\n  test \"$#\" -lt \"$nlist\" ||\n\
    \    return\n\n  local -i i\n  local first=$(nfilter \"$nlist\" | head -n1)\n\n\
    \  # \"nlist | head -n1\" is unnecessary but much faster than \"head\"\n  i=$((\
    \ nlist - 1 ))\n  while [ $i -ge 0 ]; do\n    local next=$(nfilter \"$nlist\"\
    \ | head -n \"$i\")\n\n    if [ \"$first\" -gt \"$next\" ]; then\n      list=(\"\
    ${list[@]:0:$i}\" \"${list[@]:$(($i - 1))}\")\n      break\n    fi\n\n    first=$next\n\
    \    i=$(( i - 1 ))\n  done\n\n  echo $(nfilter \"$nlist\" | tail -n 1)\n  echo\
    \ \"${list[@]}\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi20eoew2.sh: line 19: nfilter: command not found

    '
  stdout: ''
  timestamp: 1660060210
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal list=\"$1\"\n\tlocal\
    \ i j cur prev min\n\tlocal -a elements\n\n\t# Get all numeric elements\n\tIFS=\"\
    \ \" read -r -a elements <<< \"$list\"\n\t# Get min element and all elements less\
    \ than it\n\tmin=\"${elements[0]}\"\n\tfor element in \"${elements[@]:1}\"; do\n\
    \t\t(( j++ ))\n\t\tcur=\"${element}\"\n\t\tif [[ $cur > $min ]]; then\n\t\t\t\
    min=\"${cur}\"\n\t\tfi\n\tdone\n\n\tprev=\"\"\n\tfor ((i = 0; i < j; i++)); do\n\
    \t\tcur=\"${elements[i]}\"\n\t\tif [[ $cur != $prev ]]; then\n\t\t\tprev=$cur\n\
    \t\t\techo \"true\"\n\t\t\treturn 0\n\t\tfi\n\tdone\n\techo \"false\"\n\treturn\
    \ 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660060210
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local x\n  [[ \"$1\" =~ ^[[:space:]]*([[:digit:]]+[[:space:]]+)*[[:space:]]+([[:digit:]]+[[:space:]]+)*[[:space:]]+[[:digit:]]+\
    \ ]]\n  local x=\"${BASH_REMATCH[@]:0:${#BASH_REMATCH[@]}}\"\n  local last\n \
    \ local start=0\n  local stop=0\n  local i\n  for ((i = 0; i < ${#x}; i++)); do\n\
    \    [[ \"$x\" =~ (^[[:space:]]*([[:digit:]]+[[:space:]]+)*[[:space:]]+([[:digit:]]+[[:space:]]+)*[[:space:]]+[[:digit:]]+)\
    \ ]] || return 1\n    [[ \"$x\" =~ (^[[:space:]]*[[:digit:]]+[[:space:]]+)*([[:space:]]+[[:digit:]]+[[:space:]]+)*[[:space:]]+[[:digit:]]+\
    \ ]] || return 1\n    last=\"${BASH_REMATCH[2]}\"\n    [[ \"$x\" =~ (^[[:space:]]*([[:digit:]]+[[:space:]]+)*[[:space:]]+([[:digit:]]+[[:space:]]+)*[[:space:]]+[[:digit:]]+)\
    \ ]] || return 1\n    [[ \"$x\" =~ (^[[:space:]]*[[:digit:]]+[[:space:]]+)*([[:space:]]+[[:digit:]]+[[:space:]]+)*[[:space:]]+[[:digit:]]+\
    \ ]] || return 1\n    [[ \"$x\" =~ (^[[:space:]]*[[:digit:]]+[[:space:]]+)*([[:space:]]+[[:digit:]]+[[:space:]]+)*[[:space:]]+[[:digit:]]+\
    \ ]] || return 1\n    if [[ $((${BASH_REMATCH[1]} - ${BASH_REMATCH[2]})) > 0 ]];\
    \ then\n      return 0\n    fi\n    if [[ $((${BASH_REMATCH[1]} - ${last})) >\
    \ 0 ]]; then\n      return 0\n    fi\n    if [[ $((${BASH_REMATCH[2]} - ${BASH_REMATCH[1]\n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmph1at65xn.sh: line 32: unexpected EOF while looking for matching
    `)''\n/tmp/tmph1at65xn.sh: line 52: unexpected token `\xff'' in conditional command\n/tmp/tmph1at65xn.sh:
    line 52: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list=\"$1\"\n  shift\n\
    \  case \"$list\" in\n  *[!0-9]*) echo \"$list\" > /dev/stderr; return 1\n  esac\n\
    \  local prev=0\n  local cur=0\n  while read line; do\n    case \"$line\" in\n\
    \    *) prev=\"$cur\"\n      ;;\n    *)\n      local int=$(echo \"$cur - $prev\"\
    \ | bc)\n      if [ \"$int\" -gt 0 ]; then echo \"true\"; else echo \"false\"\
    ; fi\n      prev=\"$cur\"\n      ;;\n    esac\n    cur=$((cur+1))\n  done < <(echo\
    \ \"$list\" | tr ' ' '\\n' | sort -n)\n}\n\ncandidate() {\n    monotonic \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b'1 2 4 10\n'
  stdout: b''
  timestamp: 1660078881
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local line\n  local i n a\
    \ b x\n  n=$#\n  a=$1\n  shift\n  b=$1\n  shift\n  while [[ $n -gt 0 ]]; do\n\
    \    x=$(b=$(echo \"$b+1\" | bc -l))\n    if [[ $x -le $a ]]; then\n      x=$a\n\
    \    elif [[ $x -gt $b ]]; then\n      x=$b\n    fi\n    a=$x\n    shift\n   \
    \ b=$x\n    shift\n  done\n  echo $((a>b)) && return 0 || echo $((a<b)) && return\
    \ 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=10>
  stdout: <_io.BufferedReader name=8>
  timestamp: 1660078886
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\t# shellcheck disable=SC2034\n\
    \tlocal l i j ii jj a\n\t# shellcheck disable=SC2034\n\tread -ra a=($1)\n\tlocal\
    \ len=\"${#a[@]}\"\n\tif [ \"${#a[0]}\" -eq \"${#a[@]}\" ]; then\n\t\techo \"\
    true\"\n\telse\n\t\ti=0 j=0 ii=0\n\t\tjj=0\n\t\tfor (( i=0; i<len; i++ )); do\n\
    \t\t\tif [ \"$i\" -ge \"$j\" ]; then\n\t\t\t\techo \"false\"\n\t\t\t\treturn\n\
    \t\t\tfi\n\t\t\tj=$(( i+1 ))\n\t\t\tii=$(( ii+1 ))\n\t\t\tjj=$(( ii+1 ))\n\t\t\
    \tif [ \"$i\" -le \"$j\" ]; then\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\techo\
    \ \"true\"\n\tfi\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp1z38nbzd.sh: line 15: syntax error near unexpected token `(''\n/tmp/tmp1z38nbzd.sh:
    line 15: `\tread -ra a=($1)''\n"'
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  awk 'BEGIN { split($1,a,\"\
    \ \"); for (i in a) a[i]=a[i]-1; print a[1]<a[2]?true:false }'\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local -a list=( \"${1//'\
    \ '/}\" )\n    local i\n    local prev=\"${list[0]}\"\n    for (( i=1; i<\"${#list[@]}\"\
    ; i++ )); do\n        local current=\"${list[i]}\"\n        if [ \"$(compgen -W\
    \ )\" = \"--noblank\" ] || [ \"$prev\" -gt \"$current\" ]; then\n            return\
    \ 1\n        elif [ \"$prev\" -ge \"$current\" ]; then\n            return 1\n\
    \        fi\n        prev=\"$current\"\n    done\n    return 0\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local elements=( \"$1\" )\n\
    \  local sorted=( \"${elements[@]}\" )\n  local previous_element=( \"$2\" )\n\n\
    \  local i\n  for (( i = 0; i < ${#sorted[@]}-1; i++ )); do\n    if [[ \"$previous_element\"\
    \ == \"${sorted[$i]}\" ]]; then\n      sorted[$i+1]=$previous_element\n      break\n\
    \    fi\n    previous_element=\"${sorted[$i]}\"\n  done\n\n  [[ \"${sorted[@]:(-1)}\"\
    \ == \"${sorted[0]}\" ]] || return 1\n  [[ \"${sorted[@]:(-2)}\" == \"${sorted[0]}\"\
    \ ]] || return 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal list i\n\tIFS=\" \"\
    \ read -r -a list <<<\"$1\"\n\n\tfor i in \"${!list[@]}\"; do\n\t\t(( ${list[i]}\
    \ > ${list[i+1]} )) && return 0\n\t\t(( ${list[i]} < ${list[i+1]} )) && return\
    \ 1\n\tdone\n\n\treturn 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal IFS=$1; shift\n\tlocal\
    \ cur=$1; shift\n\tlocal prev=$1; shift\n\tlocal last=$1; shift\n\tlocal next=$1;\
    \ shift\n\tlocal diff=$(expr $cur - $prev)\n\tlocal count\n\tlocal prevcount\n\
    \tif [[ $diff -le 0 ]]; then\n\t\tprevcount=0\n\telse\n\t\tprevcount=$(( $(expr\
    \ $last + 1 - $prev) + 1 ))\n\tfi\n\twhile [[ $prevcount -ge $((count=$prevcount))\
    \ ]]; do\n\t\tlast=$prev\n\t\tnext=$cur\n\t\tdiff=$(expr $cur - $prev)\n\t\tif\
    \ [[ $diff -le 0 ]]; then\n\t\t\tnext=$(( $prev + 1 ))\n\t\telse\n\t\t\tnext=$((\
    \ $cur + 1 ))\n\t\tfi\n\t\tprev=$next\n\tdone\n\techo $(( $diff == 0 ))\n}\n\n\
    candidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=18>
  stdout: <_io.BufferedReader name=7>
  timestamp: 1660078886
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal i n ok n last\n\tIFS='\
    \ '\n\tfor n; do\n\t\ti=${n}\n\t\tok=0\n\t\tlast=0\n\t\twhile [[ $i -ge 0 ]] &&\
    \ [[ $i -le $n ]]; do\n\t\t\t[ $i == $last -a $i == $n ]\n\t\t\t[ \"$i\" = \"\
    $last\" ] && ok=1\n\t\t\t[ $i -gt $n ] && [ $i -gt $last ]\n\t\t\t[ $i -lt $n\
    \ ] && [ $i -lt $last ]\n\t\t\tlast=$i\n\t\t\ti=$(( $i + 1 ))\n\t\tdone\n\t\t\
    [ \"$ok\" = 1 ] && return 0\n\tdone\n\treturn 1\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5w049q0y.sh: line 18: [[: 1 2 4 10: syntax error in expression
    (error token is "2 4 10")\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -r line=\"$1\"\n\n \
    \ if echo \"$line\" | awk '{print $(NF - 1)}' &>/dev/null; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    monotonic \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    if [ \"$(type -t \"$1\"\
    )\" = \"function\" ]; then\n        local -r list=\"$1\"\n    else\n        list=\"\
    $1 $2 $3 $4\"\n    fi\n    local -r lines=$(wc -l <<< \"$list\")\n    local i\n\
    \    for ((i=0; i < lines; i++)); do\n        local line=$(sed -n \"$((i + 1))p\"\
    \ <<< \"$list\")\n        local last\n        local val\n        [[ -z \"$line\"\
    \ ]] && return 1\n        val=\"${line#*[[:space:]]}\"\n        [[ -z \"$last\"\
    \ ]] && (( last )) || [[ $last < $val ]]\n    done\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local -r script=\"${1:-}\"\
    \n    # replace all non-digit sequences with nothing\n    script=\"${script//[^0-9]/}\"\
    \n    # count number of digits\n    local num_digits=$(echo \"${script}\" | sed\
    \ 's/^\\([0-9]*\\)$/\\1/')\n    if [ -z \"$num_digits\" ]; then\n        return\
    \ 0\n    fi\n    # compute max value and minumum value\n    local -r max_val=\"\
    $((10#$num_digits))\"\n    local -r min_val=\"$((10#${num_digits}))\"\n    # convert\
    \ to an array\n    local -r vals=(\"$@\")\n    local -r max_idx=0\n    local -r\
    \ min_idx=0\n    for idx in \"${!vals[@]}\"; do\n        # find first non-matching\
    \ number\n        if [ \"$max_idx\" -lt \"$idx\" ]; then\n            max_idx=\"\
    $idx\"\n            max_val=\"$vals[$idx]\"\n        elif [ \"$min_idx\" -lt \"\
    $idx\" ]; then\n            min_idx=\"$idx\"\n            min_val=\"$vals[$idx]\"\
    \n        fi\n    done\n    # return true is list elements are monotonically increasing\
    \ or decreasing\n    if [ \"$max_idx\" -eq \"$min_idx\" ]; then\n        return\
    \ 0\n    elif [ \"$max_val\" -gt \"$min_val\" ]; then\n        return 1\n    else\n\
    \        return -1\n    fi\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmppgqzvn1c.sh: line 14: script: readonly variable\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal list_var=$1\n\tshift\n\
    \tlocal sorted=( $list_var )\n\tlocal i=0 last=${sorted[0]}\n\tlocal last_i=$((\
    \ ${#sorted[@]} - 1 ))\n\tlocal ret\n\tfor ((i = 0; i <= $last_i; i++)); do\n\t\
    \tlocal current=${sorted[$i]}\n\t\tlocal current_i=$(( ${#sorted[@]} - 1 ))\n\t\
    \tif [[ $(expr substr $current $last_i 1) -gt $(expr substr $current $current_i\
    \ 1) ]]; then\n\t\t\tret=false\n\t\telse\n\t\t\tret=true\n\t\tfi\n\t\tlast=$current\n\
    \tdone\n\techo $ret\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local -a list=( \"${@}\"\
    \ )\n    local i iprev i1 i2 i3 i4 s1 s2 s3 s4\n    local -a monotonic_array=(\
    \ )\n\n    # Find the first non-empty entry\n    i=${#list[@]}\n    while (( i\
    \ > 0 )); do\n        # First compare with the previous entry\n        if [[ ${i}\
    \ == 0 ]]; then\n            if (( iprev > 0 )); then\n                monotonic_array+=(\
    \ \"$iprev\" \"$i\" )\n            fi\n        fi\n        # Next compare the\
    \ first element\n        if [[ ${i} -gt 0 ]]; then\n            if (( i > 1 ));\
    \ then\n                i1=$(( i - 2 ))\n                s1=$(( list[i-1] ))\n\
    \                i2=$(( i - 1 ))\n                s2=$(( list[i] ))\n        \
    \        s3=$(( list[i+1] ))\n                s4=$(( list[i+2] ))\n          \
    \      # if previous entry is less than the current entry and the first\n    \
    \            # entry is greater than the second, then list is monotonic\n    \
    \            if [[ $s1 < $s2 ]] && [[ $i1 > $i2 ]]; then\n                   \
    \ monotonic_array+=( \"$i\" \"$i1\" \"$i2\" \"$i3\" \"$i4\" )\n              \
    \  fi\n            fi\n        fi\n        # Next compare the last element\n \
    \       if [[ ${i} -lt ${#list[@]} ]]; then\n            if (( i )); then\n  \
    \              i3=$(( i - 2 ))\n                s3=$(( list[i-1] ))\n        \
    \        s4=$(( list[i] ))\n                s5=$(( list[i+1] ))\n            \
    \    # if previous entry is greater than the current entry and the last\n    \
    \            # entry is less than the second, then list is monotonic\n       \
    \         if [[ $s3 > $s4 ]] && [[ $i3 > $i4 ]]; then\n                    monotonic_array+=(\
    \ \"$i\" \"$i3\" \"$i4\" \"$i1\" \"$i2\" )\n                fi\n            fi\n\
    \        fi\n        iprev=$i\n        i=$(( i - 1 ))\n    done\n    echo \"${monotonic_array[@]}\"\
    \n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local n=\"${#}\"\n    local\
    \ a\n    local b\n    local last\n    local i\n    for ((i = 0; i < n; ++i));\
    \ do\n        a=\"${!i}\"\n        shift\n        b=\"${!i}\"\n        if ((last\
    \ == \"-\" && a < b)) || ((last == \"+\" && a > b)) ; then\n            return\
    \ 1\n        fi\n        last=\"${!i}\"\n    done\n    return 0\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg3vv9gz.sh: line 21: ((: last == - && a < b: syntax error:
    operand expected (error token is "&& a < b")\n/tmp/tmpmg3vv9gz.sh: line 21: ((:
    last == + && a > b: syntax error: operand expected (error token is "&& a > b")\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local IFS=$1; shift\n  \
    \  local list=\n    for element in $*\n    do\n        [[ $element != *\"-\"*\
    \ ]] && list+=${element} || list+=`expr $(expr $(expr ${list[-1]} + ${element})\
    \ - ${list[-1]} - ${element}) > 0`\n    done\n    echo \"${list[-1]}\"\n}\n\n\
    candidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpijt08ydg.sh: line 18: list: bad array subscript\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local a=\"$1\"\n  local b\n\
    \  local c\n  local first=\"-${!a}\"\n  local last=\"-${!a}\"\n  local i\n  local\
    \ j\n  for ((i=0; i<${#a}; i++)); do\n    b=\"${a[i]}\"\n    c=\"${a[i]}\"\n \
    \   if [[ ${b} -le ${c} ]]; then\n      first=\"${b}\"\n    fi\n    if [[ ${c}\
    \ -le ${b} ]]; then\n      last=\"${c}\"\n    fi\n  done\n  echo \"$((${last}\
    \ - ${first}) > 0)\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpgrh2kyi8.sh: line 15: 1 2 4 10: invalid variable name\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local -r pattern=$1\n  \
    \  shift\n    for element in $@; do\n        if [ \"$element\" = \"$element\"\
    \ ] || [ \"$element\" = \"$pattern\" ] ; then\n            continue\n        fi\n\
    \        local last_index=0\n        local last_value=0\n        for i in $(seq\
    \ 0 $(( ${#element} - 1 ))); do\n            local value=${element:$i:1}\n   \
    \         [[ \"$value\" != \"$last_value\" ]] || return 1\n            [[ \"$value\"\
    \ > \"$last_value\" ]] || return 1\n            last_index=$(expr $i + 1)\n  \
    \          last_value=${element:$last_index:1}\n        done\n        return 0\n\
    \    done\n    return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local -a elems=(\"$@\")\n\
    \    local cur=${elems[0]}\n    local prev=${elems[0]}\n    local result=false\n\
    \    local i\n\n    for i in \"${!elems[@]}\"; do\n        [[ $cur -gt $prev ]]\
    \ && result=true && break\n        (( ++i ))\n        prev=$cur\n        cur=${elems[i]}\n\
    \    done\n    echo \"$result\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") =\
    \ \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp74vis_qg.sh: line 19: [[: 1 2 4 10: syntax error in expression
    (error token is "2 4 10")\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -r line=\"$1\"\n  local\
    \ -r lines=( ${line} )\n  local a\n  local b\n  local start\n  local -a indices\n\
    \  local i\n  local diff\n  local -a sorted_indices\n  local j\n  local prev_value\n\
    \  local tmp\n  local value\n\n  for a; do\n    indices=()\n    value=$a\n   \
    \ for b in \"${lines[@]}\"; do\n      # If the previous value was zero and we\
    \ incremented\n      # it, then it was zero and we didn't increase\n      # it,\
    \ so the current value is bigger.\n      if [ \"$prev_value\" -eq 0 -a \"$b\"\
    \ -eq 0 ]; then\n        indices=( \"$indices\" \"$i\" )\n        diff=$(( b -\
    \ value ))\n      else\n        indices=( \"$indices\" )\n        diff=$(( b -\
    \ prev_value ))\n      fi\n      prev_value=$b\n      i=$(( i + 1 ))\n    done\n\
    \    sorted_indices=( ${indices[*]} )\n    tmp_var=${sorted_indices[*]}\n    for\
    \ j in \"${!sorted_indices[@]}\"; do\n      if [ \"${sorted_indices[j]}\" -ne\
    \ \"$j\" ]; then\n        diff=$(( sorted_indices[j] - j ))\n      fi\n    done\n\
    \    tmp=$(( sorted_indices[*][0] ))\n    for j in \"${!sorted_indices[@]}\";\
    \ do\n      tmp=$(( tmp + diff ))\n      sorted_indices[$j]=$tmp\n    done\n \
    \   a=$tmp\n  done\n  echo ${sorted_indices[*]}\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpclhmsj6t.sh: line 33: [: : integer expression expected\n/tmp/tmpclhmsj6t.sh:
    line 50: sorted_indices[*][0] : syntax error: invalid arithmetic operator (error
    token is "[0] ")\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local list monotonic prev\
    \ diff x\n    list=\"$1\"\n    monotonic=\"false\"\n    for x in \"$list\"; do\n\
    \        diff=$(expr \"$x\" \"$prev\")\n        prev=\"$x\"\n        if [ \"$diff\"\
    \ -eq 0 ]; then\n            monotonic=\"true\"\n        fi\n    done\n    echo\
    \ \"$monotonic\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''expr: syntax error: unexpected argument \xe2\x80\x98\xe2\x80\x99\n/tmp/tmp57fh9x4z.sh:
    line 18: [: : integer expression expected\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local -r line=\"$1\"\n\n\
    \    local -r pattern=\"^[ ]*([0-9]+) \\+([0-9]+)(?: \\([0-9]*\\))? \\+([0-9]+)(?:\
    \ \\([0-9]*\\))? $\"\n    local -r match=$(echo \"${line}\" | sed -e 's/^[ ]*\\\
    ([0-9]*\\).*/\\1/')\n    if [[ ${match} == \"\" ]]; then\n        return 0\n \
    \   fi\n    local -r before=\"${BASH_REMATCH[1]}\"\n    local -r after=\"${BASH_REMATCH[2]}\"\
    \n    local -r delta=\"${BASH_REMATCH[4]}\"\n    local -r extra=\"${BASH_REMATCH[6]}\"\
    \n\n    if [[ -z ${before} || -z ${after} || -z ${delta} ]]; then\n        return\
    \ 0\n    fi\n    if [[ -z ${extra} ]]; then\n        local -r diff=\"${after}-${before}\"\
    \n    else\n        local -r diff=\"${after}-${before}${extra}\"\n    fi\n   \
    \ if [[ ${diff} =~ ${pattern} ]]; then\n        if [[ \"${before}\" -gt \"${after}\"\
    \ ]]; then\n            echo \"true\"\n        else\n            echo \"false\"\
    \n        fi\n    else\n        return 0\n    fi\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local items=( \"$1\" )\n \
    \ local first=${items[0]}\n  local last=${items[-1]}\n  local ret=0\n\n  for item\
    \ in \"${items[@]:1}\"; do\n    if [ $item -gt $first ]; then\n      ret=1\n \
    \   elif [ $item -lt $last ]; then\n      ret=0\n    else\n      echo \"$item\
    \ is not monotonic\" >&2\n      return 1\n    fi\n    first=$item\n  done\n  echo\
    \ \"$ret\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local list prev current\
    \ prevprev max\n    list=\"$1\"\n    IFS=\" \" read -a list <<< \"$list\"\n  \
    \  prev=${list[0]}\n    for current in \"${list[@]:1}\"; do\n        if [ \"$prev\"\
    \ -gt \"$current\" ] || [ \"$current\" -gt \"$prev\" ]; then\n            echo\
    \ \"$prev $current\"\n        fi\n        prev=$current\n    done\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local list=\"$1\"\n    shift\n\
    \n    local sorted count\n    sorted=$(sort -n)\n    count=0\n    for element\
    \ in $sorted; do\n        count=$((count + 1))\n    done\n\n    local max\n  \
    \  max=${sorted[0]}\n    for element in ${list[@]}; do\n        if [ \"$element\"\
    \ -ge \"$max\" ]; then\n            max=$element\n        fi\n    done\n\n   \
    \ if [ \"$count\" -eq \"$#\" ]; then\n        echo \"$max\"\n    else\n      \
    \  false\n    fi\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=42>
  stdout: <_io.BufferedReader name=17>
  timestamp: 1660078886
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    set -A A \"$1\"\n    if\
    \ [[ \"${#A[@]}\" -ne \"${#A[0]}\" ]]; then\n        echo \"bad number of arguments\"\
    \ >&2\n        return 1\n    fi\n    local i j k nl diff new_i new_j new_k new_nl\
    \ is_increasing is_decreasing\n    for ((i = 0; i < ${#A[@]}; i++)); do\n    \
    \    nl=${A[i]}\n        if [[ ${nl} =~ ^-?[0-9]+$ ]]; then\n            if ((j=${nl}\
    \ - ${A[i+1]})); then\n                is_decreasing=false\n            else\n\
    \                is_decreasing=true\n            fi\n        else\n          \
    \  is_decreasing=true\n        fi\n        if [[ ${nl} =~ ^-?[0-9]+$ ]]; then\n\
    \            if ((j=${nl} - ${A[i-1]})); then\n                is_increasing=false\n\
    \            else\n                is_increasing=true\n            fi\n      \
    \  else\n            is_increasing=true\n        fi\n        if [[ ${nl} =~ ^-?[0-9]+$\
    \ ]]; then\n            if ((j=${nl} - ${A[i]})); then\n                if ((k=${nl}\
    \ - ${A[i+1]})); then\n                    diff=${j}\n                else\n \
    \                   diff=${k}\n                fi\n            else\n        \
    \        diff=${nl}\n            fi\n        else\n            diff=${nl}\n  \
    \      fi\n        if [[ \"$is_increasing\" = \"true\" && \"$is_decreasing\" =\
    \ \"true\" ]]; then\n            if ((diff>0)); then\n                A[i+2]=${A[i+1]}\n\
    \            else\n                A[i-1]=${A[i]}\n            fi\n        fi\n\
    \    done\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp34n8wewy.sh: line 12: set: -A: invalid option\nset: usage: set
    [-abefhkmnptuvxBCHP] [-o option-name] [--] [arg ...]\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local L=\"$1\"\n    local\
    \ RET=\"yes\"\n    for X in \"${L[@]}\"; do\n        [ $X -le $Y ] && RET=\"no\"\
    \n    done\n    echo \"$RET\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpm4e0qpri.sh: line 15: [: too many arguments\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\t# The function returns false\
    \ for zero argument\n\t# The function returns true if list elements are monotonically\
    \ increasing or decreasing.\n\t[ \"$#\" -eq 1 ] || { echo \"$FUNCNAME: Wrong number\
    \ of arguments\" 1>&2; return 1; }\n\tlocal elements\n\tlocal first\n\tlocal last\n\
    \tlocal max\n\tlocal min\n\tlocal length\n\n\telements=$1\n\n\tfirst=${elements[0]}\n\
    \tlast=${elements[-1]}\n\n\tmax=$first\n\tmin=$first\n\n\tlength=${#elements[@]}\n\
    \n\tfor (( n=0 ; n<length ; n++ )); do\n\t\t(( max=$n ))\n\t\t(( min=$(n-1)))\n\
    \t\t(( $n < length ))\n\t\tfor (( h=$n+1 ; h<length ; h++ )); do\n\t\t\t[ \"$h\"\
    \ -gt \"$last\" ] && [ \"$max\" -gt \"$h\" ] && [ \"$h\" -le \"$min\" ] && [ \"\
    $max\" -lt \"$h\" ] && { max=$h; }\n\t\tdone\n\t\t[ \"$max\" -lt \"$last\" ] &&\
    \ [ \"$max\" -gt \"$min\" ] && [ \"$min\" -lt \"$max\" ] && { max=$last; }\n\t\
    done\n\n\tif [ \"$first\" -gt \"$max\" ] || [ \"$last\" -gt \"$max\" ]; then\n\
    \t\techo \"false\"\n\telse\n\t\techo \"true\"\n\tfi\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpanxgekd3.sh: line 25: elements: bad array subscript\n/tmp/tmpanxgekd3.sh:
    line 34: n-1: command not found\n/tmp/tmpanxgekd3.sh: line 34: ((: min=: syntax
    error: operand expected (error token is "=")\n/tmp/tmpanxgekd3.sh: line 39: [:
    : integer expression expected\n/tmp/tmpanxgekd3.sh: line 42: [: 1 2 4 10: integer
    expression expected\n/tmp/tmpanxgekd3.sh: line 42: [: : integer expression expected\n/tmp/tmpanxgekd3.sh:
    line 25: elements: bad array subscript\n/tmp/tmpanxgekd3.sh: line 34: n-1: command
    not found\n/tmp/tmpanxgekd3.sh: line 34: ((: min=: syntax error: operand expected
    (error token is "=")\n/tmp/tmpanxgekd3.sh: line 39: [: : integer expression expected\n/tmp/tmpanxgekd3.sh:
    line 42: [: 1 2 4 20: integer expression expected\n/tmp/tmpanxgekd3.sh: line 42:
    [: : integer expression expected\n/tmp/tmpanxgekd3.sh: line 25: elements: bad
    array subscript\n/tmp/tmpanxgekd3.sh: line 34: n-1: command not found\n/tmp/tmpanxgekd3.sh:
    line 34: ((: min=: syntax error: operand expected (error token is "=")\n/tmp/tmpanxgekd3.sh:
    line 39: [: : integer expression expected\n/tmp/tmpanxgekd3.sh: line 42: [: 1
    20 4 10: integer expression expected\n/tmp/tmpanxgekd3.sh: line 42: [: : integer
    expression expected\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list=\n  local last_num=\n\
    \  while IFS= read -r x ; do\n    case \"$x\" in\n      -*) ;;\n      *) list=(\"\
    $list\" \"$x\") ;;\n    esac\n  done\n  for (( i=1 ; i<=\"${#list[@]}-1 ; i++\
    \ )); do\n    (( last_num += ${list[$i]} ))\n    (( last_num == ${list[$i+1]}\
    \ ))\n  done\n  echo $last_num\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmeo6jws6.sh: line 40: unexpected EOF while looking for matching
    `"\''\n/tmp/tmpmeo6jws6.sh: line 44: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list=(\"${1// /}\")\n\
    \  local last\n  local lastdiff\n  local i\n  local ret\n\n  for (( i=0; i<${#list[@]}-1;\
    \ i++ )); do\n    last=${list[i]}\n    lastdiff=$(( $(expr ${last}+${list[i+1]})\
    \ - $(expr ${last}-${list[i+1]}) ))\n    if [[ ${lastdiff} -ge 0 ]]; then\n  \
    \    ret=0\n    elif [[ ${lastdiff} -lt 0 ]]; then\n      ret=1\n    else\n  \
    \    ret=$(expr ${lastdiff} > 0)\n    fi\n    if [[ ret -eq 1 ]]; then\n     \
    \ break\n    fi\n  done\n  echo \"${ret}\"\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local a b i last min tmp\
    \ x\n    local line\n    x=\"${1// /}\"\n    IFS=' ' read -a a <<< \"$x\"\n  \
    \  for b in \"${a[@]}\"; do\n        tmp=${b//[!0-9]/}\n        i=\"${tmp:0:3}\"\
    \n        case \"$i\" in\n            0|1|2|3)\n                last=$b\n    \
    \            ;;\n            *)\n                [ \"$tmp\" = \"$last\" ] && return\
    \ 0\n                last=$b\n                ;;\n        esac\n    done\n   \
    \ [ \"$last\" = \"$a[-1]\" ] && return 0\n    last=${a[-1]}\n    [ \"$last\" =\
    \ \"$a[1]\" ] && return 0\n    IFS=' ' read -a b <<< \"$x\"\n    min=$(echo \"\
    ${b[0]}\" | bc)\n    [ \"$min\" -gt \"$b[1]\" ] && return 1\n    [ \"$min\" -lt\
    \ \"$b[2]\" ] && return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpui447goe.sh: line 34: [: 12410[1]: integer expression expected\n/tmp/tmpui447goe.sh:
    line 35: [: 12410[2]: integer expression expected\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  # Get list elements one by\
    \ one\n  while IFS= read -r -a elements; do\n    # Compare them\n    if (( $((\
    \ $elements[1] < $elements[2] )) )); then\n      return 1\n    elif (( $(( $elements[1]\
    \ > $elements[2] )) )); then\n      return 0\n    else\n      continue\n    fi\n\
    \  done\n  # List is all 0\n  return 0\n}\n\ncandidate() {\n    monotonic \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=53>
  stdout: <_io.BufferedReader name=51>
  timestamp: 1660078886
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local a b i n res\n\n  local\
    \ input=\"$1\"\n  shift\n\n  a=( \"$input\" )\n  n=${#a[@]}\n\n  for i in $(seq\
    \ 0 $((n - 1)); do\n    b=${a[i]}\n    if [[ ${b} > ${a[i - 1]} ]]; then\n   \
    \   b=b\n    else\n      b=b\n    fi\n    if [[ ${b} > ${a[i - 1]} ]]; then\n\
    \      b=$a[i-1]\n    fi\n    res=$(( ${res} || (( ${b} <= ${a[i - 1]} )) ))\n\
    \  done\n\n  echo \"$res\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpi7exqhev.sh: line 20: unexpected EOF while looking for matching
    `)''\n/tmp/tmpi7exqhev.sh: line 53: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local -a list=( \"${(@s:/:)1}\"\
    \ )\n    local previous\n    local -a sorted=()\n    local i last\n    local diff=0\n\
    \    for ((i=0; i<${#list[@]}; i++)); do\n        sorted+=( ${list[i]} )\n   \
    \ done\n    local -n first=$1\n    local -n last=$1\n    local -n current=$1\n\
    \    local -n found=$1\n\n    local -a out\n    for ((i=0; i<${#list[@]}; i++));\
    \ do\n        local -n temp=$1\n        current=${list[i]}\n        found=false\n\
    \        local -a tmp\n        for ((j=0; j<${#list[@]}; j++)); do\n         \
    \   if [[ ${list[j]} > \"$current\" ]]; then\n                if (( j > 0 )) &&\
    \ (( ${list[j]} > ${sorted[${j}-1]} )) ; then\n                    found=true\n\
    \                    temp=${list[j]}\n                else\n                 \
    \   if (( j == 0 )); then\n                        first=${list[j]}\n        \
    \            else\n                        last=${list[j]}\n                 \
    \   fi\n                fi\n                break\n            else\n        \
    \        tmp=( ${list[j]} )\n                if (( j > 0 )) && (( ${list[j]} <\
    \ ${sorted[${j}-1]} )) ; then\n                    found=true\n              \
    \      temp=${list[j]}\n                else\n                    if (( j == 0\
    \ )); then\n                        first=${list[j]}\n                    else\n\
    \                        last=${list[j]}\n                    fi\n           \
    \     fi\n            fi\n        done\n        if (( !found )); then\n      \
    \      if (( diff > 0 )); then\n                out+=( \"$first\" )\n        \
    \    else\n                out+=( \"$last\" )\n            fi\n        fi\n  \
    \      diff=$(( ${#out[@]} - 1 ))\n    done\n    if (( ${#out[@]} > 0 )); then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp2y6ktll8.sh: line 12: ${(@s:/:)1}: bad substitution\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    # Sort elements\n    sort\
    \ \"$1\";\n    # Count each element\n    local i j count max;\n    count=$#;\n\
    \    max=$i;\n    for (( i=1; i<$count; i++ )); do\n        if [[ $1 == $max*\
    \ ]]; then\n            (( count++ ))\n        else\n            if [[ $1 < $max*\
    \ ]]; then\n                j=$max;\n                max=$i;\n               \
    \ while [ $j -ne 0 ] && [ $i < $j* ]; do\n                    (( count-- ))\n\
    \                    (( j-- ))\n                done\n            fi\n       \
    \ fi\n    done\n    # Are all elements monotonically increasing or decreasing?\n\
    \    echo \"$count $max $(( count == 1 ))\"\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"sort: cannot read: ''1 2 4 10'': No such file or directory\n"'
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local IFS=\" \" # Handle spaces\
    \ in list\n  local sorted=( $(sort -n \"${1:-}\") )\n  local length=\"${#sorted[@]}\"\
    \n  if [ \"$length\" -eq \"1\" ]; then\n    local i\n    for ((i = 0; i < length;\
    \ i++)) ; do\n      local j=0\n      while ((j++ < i)) ; do\n        local a=\"\
    ${sorted[j]}\"\n        local b=\"${sorted[j+1]}\"\n        if [ \"${a}\" -gt\
    \ \"${b}\" ]; then\n          sorted[j+1]=\"${a}\"\n        else\n          sorted[j+1]=\"\
    ${b}\"\n        fi\n      done\n    done\n  fi\n  # echo \"${sorted[@]}\"\n  local\
    \ out=0\n  local count=1\n  local last=\"${sorted[0]}\"\n  local diff\n  local\
    \ count2\n  for ((i = 1; i < length; i++)) ; do\n    diff=( $(echo \"${sorted[i]}-${last}\"\
    \ | bc -l) )\n    # echo \"${diff}\"\n    count2=$(echo \"${diff}\" | bc -l)\n\
    \    if [ \"${count2}\" -eq 0 ]; then\n      last=\"${sorted[i]}\"\n    elif [\
    \ \"${count2}\" -gt 0 ]; then\n      out=1\n      count=0\n      break\n    else\n\
    \      count2=0\n      count=0\n      last=\"${sorted[i]}\"\n    fi\n  done\n\
    \  echo \"${out}\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"sort: cannot read: ''1 2 4 10'': No such file or directory\n"'
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local L1 L2 L3 L4 N TMP VAL\n\
    \  if ! IFS=\" \" read -ra L1 <<< \"$1\"; then\n    echo \"monotonic failed: malformed\
    \ input\"\n    return 1\n  fi\n  (( ${#L1[*]} != ${#L1[@]} )) || return 1\n  ((\
    \ ${#L1[@]} < 2 )) || return 1\n  L2=()\n  (( ${#L1[*]} > 2 )) || return 1\n \
    \ (( ${#L1[*]} % 2 == 1 )) || return 1\n  TMP=$( L1=( ${L1[@]:0:1} \"${L1[@]:1}\"\
    \ ))\n  while (( ${#L1[*]} > 1 )); do\n    (( ${#L1[*]} > 2 )) || return 1\n \
    \   (( ${#L1[*]} % 2 == 1 )) || return 1\n    L2=( ${L2[@]:0:1} \"${L1[@]:1}\"\
    \ )\n    (( ${#L1[*]} -= 2 ))\n  done\n  L3=( ${L2[@]:0:1} \"${L1[@]:1}\" )\n\
    \  (( ${#L1[*]} -= 2 ))\n  while (( ${#L1[*]} > 1 )); do\n    (( ${#L1[*]} > 2\
    \ )) || return 1\n    (( ${#L1[*]} % 2 == 1 )) || return 1\n    L4=( ${L4[@]:0:1}\
    \ \"${L1[@]:1}\" )\n    (( ${#L1[*]} -= 2 ))\n  done\n  N=${#L1[*]}\n  VAL=\"\
    -${L3[0]}\"\n  (( N > 1 )) && VAL=\"${VAL} -${L4[0]}\"\n  (( N > 2 )) && VAL=\"\
    ${VAL} -${L4[1]}\"\n  (( N > 3 )) && VAL=\"${VAL} -${L4[2]}\"\n  (( N > 4 )) &&\
    \ VAL=\"${VAL} -${L4[3]}\"\n  (( N > 5 )) && VAL=\"${VAL} -${L4[4]}\"\n  (( N\
    \ > 6 )) && VAL=\"${VAL} -${L4[5]}\"\n  (( N > 7 )) && VAL=\"${VAL} -${L4[6]}\"\
    \n  (( N > 8 )) \n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local elements=\"${1}\"\n\
    \    local monotonic=\"true\"\n    local element\n    local x\n    for element\
    \ in ${elements}; do\n        x=$( echo $element | awk '{printf \"%f \", $1}')\n\
    \        [ $(echo \"${x} <= ${x}\" | bc -l) -eq 1 ] && \\\n            monotonic=\"\
    false\"\n    done\n    echo \"${monotonic}\"\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local sorted=\"$1\"\n  \
    \  local last=\"$(tail -n 1 <<<\"$sorted\")\"\n\n    for element in $sorted; do\n\
    \        if [ \"$(head -n 1 <<<\"$sorted\" | tail -n +2 <<<\"$element\")\" -ne\
    \ \"$last\" ]; then\n            return 0\n        fi\n\n        last=\"$element\"\
    \n    done\n\n    return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp_il5zhhs.sh: line 16: [: : integer expression expected\n/tmp/tmp_il5zhhs.sh:
    line 16: [: : integer expression expected\n/tmp/tmp_il5zhhs.sh: line 16: [: :
    integer expression expected\n/tmp/tmp_il5zhhs.sh: line 16: [: : integer expression
    expected\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local IFS=\"$1\"\n  local\
    \ a=\"$2\"\n  shift\n\n  for i in $(seq \"${#a[@]}\"); do\n    if [ \"${a[i+1]}\"\
    \ = \"${a[i]}\" ] ; then\n      continue\n    fi\n    if [ \"$i\" = \"0\" ] ;\
    \ then\n      echo \"true\"\n      return 0\n    fi\n    if [ \"$a[i] -gt $a[i-1]\"\
    \ ] || [ \"$a[i] -lt $a[i-1]\" ] ; then\n      echo \"true\"\n      return 0\n\
    \    fi\n  done\n\n  echo \"false\"\n  return 1\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list x\n  IFS=\" \"\
    \ read -ra list <<<\"$1\"\n  for x in \"${list[@]}\"; do\n    [[ \"$x\" != \"\
    $x\" -a \"$x\" != \"$((x-1))\" ]]\n  done\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk9jv243s.sh: line 15: syntax error in conditional expression\n/tmp/tmpk9jv243s.sh:
    line 15: syntax error near `-a\''\n/tmp/tmpk9jv243s.sh: line 15: `    [[ "$x"
    != "$x" -a "$x" != "$((x-1))" ]]\''\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal -r lines=$(wc -l <<<\
    \ \"${1:-}\")\n\tlocal -r total=${lines#* }\n\tlocal ret=0\n\tlocal i\n\tfor i\
    \ in $(seq 0 \"$((total-1))\"); do\n\t\tlocal j\n\t\tlocal last=$((i+1))\n\t\t\
    local cur=${1:$last}\n\t\tlocal line\n\t\twhile read -r line; do\n\t\t\t[[ $line\
    \ =~ ^[0-9]+ ]] || continue\n\t\t\tlocal elem=$(echo $line | cut -d'-' -f 1)\n\
    \t\t\t[[ $elem -gt $cur ]] || [[ $elem -lt $cur ]] || continue\n\t\t\tlocal cmp=$((elem\
    \ > $cur ? 1 : elem))\n\t\t\t[[ $cmp -eq 0 ]] && ret=1 || ret=0\n\t\tdone <<<\
    \ \"$(echo \"${1:$last}\" | sed -n \"/^$cur/p\")\"\n\tdone\n\techo \"$ret\"\n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp1urwr3p.sh: line 24: [[: 2 4 10: syntax error in expression
    (error token is "4 10")\n/tmp/tmpp1urwr3p.sh: line 24: [[: 2 4 10: syntax error
    in expression (error token is "4 10")\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local -n list=\n    local\
    \ -n prev=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    local\
    \ -n list=\n    local -n list=\n    local -n list=\n    local -n list=\n    \n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpq5wsuxt0.sh: line 12: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh:
    line 13: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 14: local:
    `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 15: local: `'': not a valid
    identifier\n/tmp/tmpq5wsuxt0.sh: line 16: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh:
    line 17: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 18: local:
    `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 19: local: `'': not a valid
    identifier\n/tmp/tmpq5wsuxt0.sh: line 20: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh:
    line 21: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 22: local:
    `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 23: local: `'': not a valid
    identifier\n/tmp/tmpq5wsuxt0.sh: line 24: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh:
    line 25: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 26: local:
    `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 27: local: `'': not a valid
    identifier\n/tmp/tmpq5wsuxt0.sh: line 28: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh:
    line 29: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 30: local:
    `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 31: local: `'': not a valid
    identifier\n/tmp/tmpq5wsuxt0.sh: line 32: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh:
    line 33: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 34: local:
    `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 35: local: `'': not a valid
    identifier\n/tmp/tmpq5wsuxt0.sh: line 36: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh:
    line 37: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 38: local:
    `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 39: local: `'': not a valid
    identifier\n/tmp/tmpq5wsuxt0.sh: line 40: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh:
    line 41: local: `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 42: local:
    `'': not a valid identifier\n/tmp/tmpq5wsuxt0.sh: line 43: l'
  stdout: b''
  timestamp: 1660078881
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local L\n    L=$1\n    for\
    \ element in $L; do\n        case $element in\n            $(awk '$1 > $2 {exit\
    \ 1}' $element $L)) && echo \"true\" || echo \"false\"\n        esac\n    done\n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgg_spqos.sh: line 16: syntax error near unexpected token `&&\''\n/tmp/tmpgg_spqos.sh:
    line 16: `            $(awk \''$1 > $2 {exit 1}\'' $element $L)) && echo "true"
    || echo "false"\''\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -n list=( \"$1\" )\n\
    \  local -i n=\"${#list[@]}\"\n  local -i j\n  local x\n  local i\n  local prev\n\
    \  local j1\n  local last\n  local last1\n  local c\n  local l\n  local ok\n \
    \ local ret\n\n  if [ \"${#list[@]}\" -lt \"2\" ]; then\n    echo \"not enough\
    \ arguments\"\n    return 1\n  fi\n\n  local -a vals=( )\n\n  for (( i = 0; i\
    \ < n - 1; i++ )); do\n    vals[$i]=$(( ${list[i]} + ${list[i+1]} ))\n  done\n\
    \  vals[-1]=$(( ${list[-1]} + ${list[n-1]} ))\n\n  prev=${vals[0]}\n  j1=1\n \
    \ last=${vals[0]}\n  last1=${vals[0]}\n\n  ok=true\n  j=0\n\n  while [ $ok ];\
    \ do\n    ok=false\n    i=$(( j1 ))\n    while [ $i -lt n ]; do\n      x=$(( ${list[j]}\
    \ ))\n      if [ $x -gt $last ]; then\n        j=$(( j+1 ))\n        last=$((\
    \ x ))\n      elif [ $x -lt $last1 ]; then\n        j=$(( j+1 ))\n        last1=$((\
    \ x ))\n      fi\n      c=$(expr ${vals[i]} + ${vals[j]})\n      l=$(expr ${list[i]}\
    \ + ${list[j]})\n      if [ $c -eq ${list[i]} ]; then\n        ok=true\n     \
    \   break\n      elif [ $c -le ${list[j]} ]; then\n        ok=true\n        break\n\
    \      fi\n      j=$(( j+1 ))\n      if [ $i -gt $(( j1 )) ]; then\n        j=$((\
    \ j+1 ))\n      fi\n      i=$(( i+1 ))\n    done\n    j1=$(( j1+1 ))\n    if [\
    \ $j1 -gt $(( n )) ]; then\n      j1=0\n    fi\n  done\n  if [ $ok -eq true ];\
    \ then\n    ret=true\n  else\n    ret=false\n  fi\n  echo \"$ret\"\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp8mb3x1zi.sh: line 12: local: list: reference variable cannot
    be an array\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local list prev min max\n\
    \    list=\"$1\"\n    shift\n\n    min=$(echo $list | awk '{print $1}')\n    max=$(echo\
    \ $list | awk '{print $1}')\n\n    for element in $list; do\n        prev=$element\n\
    \        if [ -z \"$min\" ]; then\n            min=$element\n        fi\n    \
    \    if [ \"$element\" -gt \"$max\" ]; then\n            max=$element\n      \
    \  fi\n    done\n\n    # A non-empty list contains monotonically increasing or\
    \ decreasing\n    # numbers.\n    echo $(( $(expr $prev $min) -gt $(expr $prev\
    \ $max) ))\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''expr: syntax error: unexpected argument \xe2\x80\x981\xe2\x80\x99\nexpr:
    syntax error: unexpected argument \xe2\x80\x9810\xe2\x80\x99\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local i imax=\"${#1}\"\n\
    \    if [[ ${imax} -lt 1 ]]; then\n        return 0\n    fi\n    local x=\"${1%%\
    \ *}\"\n    local j=\"${1#* }\"\n    local m=$(( ${j} + 1 ))\n    for (( i = imax\
    \ - 1 ; i >= 1 ; i-- )); do\n        local x=\"${1%% *}\"\n        local j=\"\
    ${1#* }\"\n        local k=\"${1##* }\"\n        if [[ ${x} -ne ${j} ]]; then\n\
    \            break\n        fi\n        if [[ ${x} -gt ${m} ]]; then\n       \
    \     m=${x}\n        fi\n    done\n    [[ \"${m}\" -lt $x ]] && return 1\n  \
    \  [[ \"${m}\" -gt $x ]] && return 0\n    return 1\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmprre4vzfh.sh: line 18: 2 4 10 + 1 : syntax error in expression
    (error token is "4 10 + 1 ")\n'''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local a b\n\n    for a in\
    \ \"$@\"; do\n        b=\"${a#* }\"\n        if [[ ${b} != ${a} ]]; then\n   \
    \         echo \"true\"\n            return\n        fi\n    done\n\n    echo\
    \ \"false\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal i=\"$1\"\n\tshift\n\t\
    local last\n\tlocal start\n\tlocal diff\n\tlocal lastVal\n\n\tfor i in \"${@}\"\
    ; do\n\t\tcase \"$i\" in\n\t\t\t-[1-9][0-9]*|0) lastVal=\"$i\" ;;\n\t\t\t-[1-9][0-9]*|[1-9][0-9]*|0)\
    \ ;;\n\t\t\t*) lastVal=\"$i\" ;;\n\t\tesac\n\t\tif [ -z \"$lastVal\" ] ; then\n\
    \t\t\tstart=\"$i\"\n\t\t\tcontinue\n\t\tfi\n\t\tif [[ \"$start\" == \"$i\" ]];\
    \ then\n\t\t\tstart=\"$i\"\n\t\t\tdiff=$(expr \"$i\" - \"$start\")\n\t\t\tif [\
    \ -z \"$diff\" ] ; then\n\t\t\t\treturn 1\n\t\t\telse\n\t\t\t\tdiff=$(expr \"\
    $diff\" \"$lastVal\")\n\t\t\t\tif [ \"$diff\" -gt 0 ] ; then\n\t\t\t\t\treturn\
    \ 0\n\t\t\t\telse\n\t\t\t\t\tlastVal=\"$i\"\n\t\t\t\tfi\n\t\t\tfi\n\t\telse\n\t\
    \t\tlast=\"$i\"\n\t\tfi\n\tdone\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") =\
    \ \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local a\n    for a in $@;\
    \ do\n        # Check if the first value of a is less than the second\n      \
    \  if [[ ${a:0:1} -lt ${a:1:1} ]]; then\n            echo \"true\"\n         \
    \   return 0\n        fi\n    done\n    echo \"false\"\n    return 1\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    # Parse arguments and test\
    \ inputs\n    local -r args=$1\n    shift\n    local -r timestamp=$(date +%s)\n\
    \    local -r first=$1; shift\n    local -r prev=$1; shift\n    local -r current=$1;\
    \ shift\n    local -r last=$1; shift\n\n    local -r threshold=$(expr ${first}\
    \ - ${last})\n    local -r timestamp=$(date +%s)\n\n    # If the first number\
    \ is greater than the second, the list elements are not monotonically increasing\
    \ or decreasing\n    local -ra list=($@)\n    [[ ${#list[@]} -eq 1 ]] && return\
    \ 1\n\n    # If the first number is equal to the second, the list elements are\
    \ monotonically increasing or decreasing\n    if [[ \"${#list[@]}\" -eq 2 ]];\
    \ then\n        return ${list[last]}\n    fi\n\n    # If the number of elements\
    \ is between 2 and 5, the list elements are monotonically increasing or decreasing\n\
    \    # If the number of elements is between 5 and 10, the list elements are monotonically\
    \ increasing\n    # If the number of elements is between 10 and 20, list elements\
    \ are monotonically decreasing\n    # If the number of elements is between 20\
    \ and 1000, list elements are monotonically decreasing\n    # If the number of\
    \ elements is between 1000 and 2000, list elements are monotonically increasing\n\
    \    if [[ \"${#list[@]}\" -lt 5 || \"${#list[@]}\" -gt 10 ]]; then\n        #\
    \ Iterate through list looking for decreasing or increasing values\n        local\
    \ i j diff prev\n        for ((i=1; i<${#list[@]}; i++)); do\n            # If\
    \ the previous number is greater than the current number, the list elements are\
    \ not monotonically increasing or decreasing\n            diff -n \"${prev}\"\
    \ \"${list[i]}\"\n            if [[ \"${diff}\" -gt \"${threshold}\" ]]; then\n\
    \                return 1\n            fi\n            prev=\"${list[i]}\"\n \
    \       done\n        return 0\n    elif [[ \"${#list[@]}\" -lt 10 ]]; then\n\
    \        # Iterate through list looking for increasing or decreasing values\n\
    \        local i j diff prev\n        for ((i=1; i<${#list[@]}; i++)); do\n  \
    \          # If the previous number is greater than the current number, the list\
    \ elements are not monotonically increasing or decreasing\n            diff -n\
    \ \"${prev}\" \"${list[i]}\"\n            if [[ \"${diff}\" -lt \"${threshold}\"\
    \ ]]; then\n                return 1\n            fi\n            prev=\"${list[i]}\"\
    \n        done\n        return 0\n    elif [[ \"${#list[@]}\" -lt 20 ]]; then\n\
    \n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpdcd463j0.sh: line 64: syntax error near unexpected token `}''\n/tmp/tmpdcd463j0.sh:
    line 64: `}''\n"'
  stdout: b''
  timestamp: 1660078881
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local l\n  l=$1\n  shift\n\
    \  local f\n  f=\"0 1 2 3 4 5 6 7 8 9 10\"\n  for x in $f; do\n    (( $x == ${l}\
    \ )) && return 0\n    (( $x <  ${l} )) && return 1\n    (( $x > ${l} )) && return\
    \ -1\n  done\n  return 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8e946tja.sh: line 18: ((: 0 == 1 2 4 10 : syntax error in expression
    (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh: line 19: ((: 0 <  1 2 4 10 :
    syntax error in expression (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh: line
    20: ((: 0 > 1 2 4 10 : syntax error in expression (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh:
    line 18: ((: 1 == 1 2 4 10 : syntax error in expression (error token is "2 4 10
    ")\n/tmp/tmp8e946tja.sh: line 19: ((: 1 <  1 2 4 10 : syntax error in expression
    (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh: line 20: ((: 1 > 1 2 4 10 : syntax
    error in expression (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh: line 18:
    ((: 2 == 1 2 4 10 : syntax error in expression (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh:
    line 19: ((: 2 <  1 2 4 10 : syntax error in expression (error token is "2 4 10
    ")\n/tmp/tmp8e946tja.sh: line 20: ((: 2 > 1 2 4 10 : syntax error in expression
    (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh: line 18: ((: 3 == 1 2 4 10 :
    syntax error in expression (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh: line
    19: ((: 3 <  1 2 4 10 : syntax error in expression (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh:
    line 20: ((: 3 > 1 2 4 10 : syntax error in expression (error token is "2 4 10
    ")\n/tmp/tmp8e946tja.sh: line 18: ((: 4 == 1 2 4 10 : syntax error in expression
    (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh: line 19: ((: 4 <  1 2 4 10 :
    syntax error in expression (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh: line
    20: ((: 4 > 1 2 4 10 : syntax error in expression (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh:
    line 18: ((: 5 == 1 2 4 10 : syntax error in expression (error token is "2 4 10
    ")\n/tmp/tmp8e946tja.sh: line 19: ((: 5 <  1 2 4 10 : syntax error in expression
    (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh: line 20: ((: 5 > 1 2 4 10 : syntax
    error in expression (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh: line 18:
    ((: 6 == 1 2 4 10 : syntax error in expression (error token is "2 4 10 ")\n/tmp/tmp8e946tja.sh:
    line 19: ((: 6 <  1 2 4 10 : syntax '
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local items count\n  IFS=$'\\\
    n'\n  items=\"${1}\"\n  if [ \"${items}\" == \"\" ]; then\n    items=\"0\"\n \
    \ fi\n  items=$(echo \"${items}\" | tr -c ' ' ',' | sed -e 's/^,//' | sed -e 's/,$//')\n\
    \  IFS=$' '\n  for i in ${items}; do\n    ((count=count+i))\n  done\n  while [\
    \ \"${count}\" -gt \"0\" ]; do\n    count=0\n    for j in ${items}; do\n     \
    \ ((count=count+j))\n    done\n  done\n  [ \"${count}\" -eq \"0\" ] && return\
    \ 1\n  [ \"${count}\" -eq \"1\" ] || return 0\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3ja7s3z4.sh: line 21: ((: ,: syntax error: operand expected
    (error token is ",")\n/tmp/tmp3ja7s3z4.sh: line 21: ((: ,: syntax error: operand
    expected (error token is ",")\n/tmp/tmp3ja7s3z4.sh: line 21: ((: ,,: syntax error:
    operand expected (error token is ",,")\n/tmp/tmp3ja7s3z4.sh: line 23: [: : integer
    expression expected\n/tmp/tmp3ja7s3z4.sh: line 29: [: : integer expression expected\n/tmp/tmp3ja7s3z4.sh:
    line 30: [: : integer expression expected\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local list_elements\n  \
    \  IFS=\" \" list_elements=($1)\n    local list_elements_num=${#list_elements[@]}\n\
    \    for (( i = 0; i < list_elements_num; i++ )); do\n        local elem=${list_elements[$i]}\n\
    \        if [[ $list_elements[$(($i - 1))] -lt $elem ]]; then\n            list_elements[$(($i\
    \ - 1))]=$elem\n        fi\n        if [[ $elem -lt $list_elements[$(($i - 1))]\
    \ ]]; then\n            list_elements[$i]=$elem\n        fi\n    done\n    echo\
    \ \"${list_elements[@]}\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp78wxu2_9.sh: line 17: [[: 1[-1]: syntax error: invalid arithmetic
    operator (error token is "[-1]")\n/tmp/tmp78wxu2_9.sh: line 20: [[: 1[-1]: syntax
    error: invalid arithmetic operator (error token is "[-1]")\n/tmp/tmp78wxu2_9.sh:
    line 17: [[: 1[0]: syntax error: invalid arithmetic operator (error token is "[0]")\n/tmp/tmp78wxu2_9.sh:
    line 20: [[: 1[0]: syntax error: invalid arithmetic operator (error token is "[0]")\n/tmp/tmp78wxu2_9.sh:
    line 17: [[: 1[1]: syntax error: invalid arithmetic operator (error token is "[1]")\n/tmp/tmp78wxu2_9.sh:
    line 20: [[: 1[1]: syntax error: invalid arithmetic operator (error token is "[1]")\n/tmp/tmp78wxu2_9.sh:
    line 17: [[: 1[2]: syntax error: invalid arithmetic operator (error token is "[2]")\n/tmp/tmp78wxu2_9.sh:
    line 20: [[: 1[2]: syntax error: invalid arithmetic operator (error token is "[2]")\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local a b i\n  local -a arr\
    \ i1 i2\n  arr=( $1 )\n  a=${arr[0]}\n  b=${arr[1]}\n  for i in $(seq 2 ${#arr[@]});\
    \ do\n    if [[ $a -le $b ]]; then\n      i1=${i}\n      a=$a\n    else\n    \
    \  i2=${i}\n      b=$b\n    fi\n  done\n  echo \"$a $b\"\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tshift\n\tL=$1\n\tA=()\n\t\
    for i in `seq 1 ${#L}`; do\n\t\tA+=( $( echo \"${L}\" | sed \"s/${L}[ ]*//\" )\
    \ )\n\tdone\n\tA=( \"${A[@]}\" )\n\tif (( \"${#A[@]}\" > 0 )) && (( \"${#A[@]}\"\
    \ == 1 )); then\n\t\tif (( \"${A[0]}\" > \"${A[1]}\" )); then\n\t\t\techo true\n\
    \t\telse\n\t\t\techo false\n\t\tfi\n\telse\n\t\techo true\n\tfi\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -r list=$(echo $1)\n\
    \n  local elements=$(echo $list | tr \" \" \"\\n\")\n  local last_element first_element\n\
    \n  first_element=$(echo $elements | cut -f1 -d\")\"\n  last_element=$(echo $elements\
    \ | cut -f2 -d\")\"\n\n  local increasing=false\n  local decreasing=false\n  local\
    \ first=$(echo $first_element | cut -c1-1)\n  local last=$(echo $last_element\
    \ | cut -c1-1)\n\n  local i\n  for i in $(seq 0 $((${#elements} - 1))); do\n \
    \   local j\n    for j in $(seq 0 $((${#elements} - 1))); do\n      local k\n\
    \      for k in $(seq 0 $((${#elements} - 1))); do\n        local l\n        for\
    \ l in $(seq 0 $((${#elements} - 1))); do\n          local m\n          for m\
    \ in $(seq 0 $((${#elements} - 1))); do\n            if [[ $(($k + $l)) -eq $((${#elements}\
    \ - 1)) ]]; then\n              break\n            fi\n\n            local n\n\
    \            for n in $(seq 0 $((${#elements} - 1))); do\n              if [[\
    \ $(($j + $k)) -eq $((${#elements} - 1)) ]]; then\n                break\n   \
    \           fi\n\n              local o\n              for o in $(seq 0 $((${#elements}\
    \ - 1))); do\n                if [[ $(($m + $n)) -eq $((${#elements} - 1)) ]];\
    \ then\n                  break\n                fi\n\n                local p\n\
    \                for p in $(seq 0 $((${#elements} - 1))); do\n               \
    \   if [[ $(($i + $j)) -eq $((${#elements} - 1)) ]]; then\n                  \
    \  break\n                  fi\n\n                  if [[ $(($k + $l)) -le $((${#elements}\
    \ - 1)) ]]; then\n                    local q\n                    for q in $(seq\
    \ 0 $((${#elements} - 1))); do\n                      if [[ $(($j + $k)) -le $((${#elements}\
    \ - 1)) ]]; then\n                        local r\n                        for\
    \ r in $(seq 0 $((${#elements} - 1))); do\n                          if [[ $(($m\
    \ + $n)) -le $((${#elements} - 1)) ]]; then\n                            local\
    \ s\n                            for s in $(seq 0 $((${#elements} - 1))); do\n\
    \                              if [[ $(($p + $q)) -le $((${#elements} - 1)) ]];\
    \ then\n                                local t\n                            \
    \    for t in $(seq 0 $((${#elements} - 1))); do\n                           \
    \       if [[ $(($\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmptzqbiq6_.sh: line 69: unexpected EOF while looking for matching
    `)''\n/tmp/tmptzqbiq6_.sh: line 89: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  test \"-z '$1'\" || return\
    \ 1\n  local -a list=( ${1//[[:space:]]/ } )\n  test \"${#list}\" -gt 2 || return\
    \ 1\n  local prev=${list[0]}\n  local next=${list[1]}\n  local -a sorted=( ${list[@]:2}\
    \ )  # remove $2\n  test \"-z '$prev' || -z '$next'\" || return 1\n  [ \"$next\"\
    \ = \"$prev\" ] || (( \"$next\" < \"$prev\" )) || return 0\n  local -a tail=(\
    \ ${sorted[@]:1} )\n  local -a head=( ${sorted[@]:0:1} )\n  while [ -n \"${tail}\"\
    \ ] || [ -n \"${head}\" ] ; do\n    [ -z \"${tail}\" ] && [ \"$head\" -gt \"$next\"\
    \ ] || [ \"$tail\" -gt \"$next\" ] || return 0\n    [ \"$prev\" = \"$head\" ]\
    \ && [ \"$next\" -gt \"$head\" ] || [ \"$prev\" -gt \"$head\" ] || return 0\n\
    \    prev=\"${head}\"\n    next=\"${tail}\"\n    head=\"${tail}\"\n    tail=\"\
    ${sorted[$(( $# - 2 ))]}\"\n  done\n  return 1\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local list=\"$1\"\n    #\
    \ Make sure it's a list of numbers.\n    list=\"$(echo \"$list\" | sed -e 's/\
    \ /\\n/g' | sed -e 's/^/-/' -e 's/$/-/')\"\n    local sorted=\"$list\"\n    local\
    \ last=\"$list\"\n    local sortedlast=\"1\"\n    local sortlast=\"1\"\n    while\
    \ [ \"$last\" != \"$sortedlast\" ]; do\n        sorted=\"$(\"$sort\" <<< \"$sorted\"\
    \ $last)\" \"$list\"\n        sortlast=\"$(echo \"$sorted\" | tail -n1)\"\n  \
    \      last=\"$(\"$sort\" <<< \"$last\" $sortlast)\"\n        sortedlast=\"$(echo\
    \ \"$sorted\" | tail -n1)\"\n    done\n    [[ \"$sortedlast\" == \"\" ]] && return\
    \ 0\n    local lastval=\"$(\"$sort\" <<< \"$last\" $sortlast)\"\n    [[ \"$lastval\"\
    \ != \"\" ]] && return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=28>
  stdout: <_io.BufferedReader name=5>
  timestamp: 1660078887
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local sorted_list=\"$1\"\
    \n    local prev=\"$2\"\n    local is_monotonic=false\n\n    echo \"$sorted_list\"\
    \ | sort -n | while read line ; do\n        local cur_val=$(echo \"$line\" | cut\
    \ -d ' ' -f 2)\n        local max_val=$(echo \"$line\" | cut -d ' ' -f 3)\n  \
    \      local min_val=$(echo \"$line\" | cut -d ' ' -f 4)\n        if [ \"$max_val\"\
    \ -gt \"$cur_val\" ]; then\n            is_monotonic=true\n        elif [ \"$min_val\"\
    \ -lt \"$cur_val\" ]; then\n            is_monotonic=true\n        fi\n      \
    \  if [ \"$is_monotonic\" = true ]; then\n            if [ \"$min_val\" -lt \"\
    $prev\" ]; then\n                is_monotonic=true\n            fi\n         \
    \   if [ \"$max_val\" -gt \"$prev\" ]; then\n                is_monotonic=true\n\
    \            fi\n        fi\n        prev=\"$cur_val\"\n    done\n    echo \"\
    $is_monotonic\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpm1v4t8fl.sh: line 26: [: : integer expression expected\n/tmp/tmpm1v4t8fl.sh:
    line 29: [: : integer expression expected\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local a=\"${1// / }\" # Replace\
    \ all spaces by single spaces\n  local b\n  local previous\n  local last\n  local\
    \ output\n  local i\n\n  # Loop through all elements in the list\n  for element\
    \ in ${a[*]}; do\n    # If the current element is the same as the previous one\n\
    \    if [ \"$element\" == \"$previous\" ]; then\n      # No change to the order\n\
    \      continue\n    else\n      # Set previous variable\n      previous=\"$element\"\
    \n    fi\n    # If we have no previous element we know we are on the first element\n\
    \    if [ ! -z \"$previous\" ]; then\n      # The first element must be different\
    \ from the last one\n      if [ \"$previous\" == \"$last\" ];then\n        # All\
    \ elements are equal\n        continue\n      else\n        # If we have an increasing\
    \ order we set the boolean to true\n        output=\"true\"\n        shift\n \
    \       ((i>=last))\n      fi\n    else\n      # We are on the first element of\
    \ the list and the order is increasing\n      output=\"true\"\n    fi\n    # We\
    \ know we are on the second or third element of the list so we are in the middle\
    \ of the list\n    output=\"false\"\n    # Set the last element variable\n   \
    \ last=\"$element\"\n    ((i++))\n  done\n  echo \"$output\"\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal elements element\n\t\
    elements=$(echo \"$1\" | sed -n '/^[0-9]*$/,/^[0-9]*$/ p' | sort -n)\n\t[ \"$elements\"\
    \ ] || return 0\n\twhile [ \"$1\" ];do\n\t\telement=$(echo \"$1\" | sed -n '/^[0-9]*$/,/^[0-9]*$/\
    \ p' | sort -n | tail -1)\n\t\t[ \"$element\" ] || return 0\n\t\t[ \"$element\"\
    \ -gt \"$elements\" ] || return 1\n\t\t[ \"$element\" -lt \"$elements\" ] || return\
    \ 1\n\t\tshift\n\tdone\n\treturn 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local items=$1\n    # Trim\
    \ whitespace\n    items=$(echo \"${items}\"| sed 's/^[ \\t]*//g' | sed 's/[ \\\
    t]*$//g')\n    # Sort items and check that first and last element are greater\
    \ than the others.\n    local items=$(echo \"${items}\"| sort -n | tail -1)\n\
    \    local items=$(echo \"${items}\"| sort -n)\n    local items=$(echo \"${items}\"\
    | head -2)\n    local items=$(echo \"${items}\"| tail -1)\n    local items=$(echo\
    \ \"${items}\"| head -2)\n    if [[ ${items} =~ ^[-]?[0-9][0-9]*(\\.[0-9]*)?$\
    \ -o ${items} =~ ^[-]?[0-9]*$ ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmps_miqnbx.sh: line 21: syntax error in conditional expression\n/tmp/tmps_miqnbx.sh:
    line 21: syntax error near `-o''\n/tmp/tmps_miqnbx.sh: line 21: `    if [[ ${items}
    =~ ^[-]?[0-9][0-9]*(\\.[0-9]*)?$ -o ${items} =~ ^[-]?[0-9]*$ ]]; then''\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local list=$1\n    local\
    \ last=$(( $list[ 0 ] + 1 ))\n    for i in ${list[@]}; do\n        if (( i > last\
    \ )); then\n            return 0\n        fi\n    done\n    return 1\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkioz1i9m.sh: line 13: 1 2 4 10[ 0 ] + 1 : syntax error in expression
    (error token is "2 4 10[ 0 ] + 1 ")\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local elements prev=0\n\
    \    local monotonic=false\n    IFS=' ' read -a elements <<<\"$1\"\n\n    for\
    \ element in \"${elements[@]}\"; do\n        if [[ \"$element\" -gt \"$prev\"\
    \ ]]; then\n            monotonic=true\n        fi\n        prev=\"$element\"\n\
    \    done\n    echo \"$monotonic\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local list=\"$1\"\n    shift\n\
    \    local previous=\n    local current=\n    local result=\n    local count=0\n\
    \    local i\n\n    # Split input list and count elements\n    list=\"${list}\"\
    \ | sed 's/ /\\n/g'\n    list=\"${list}\" | sed 's/^/  /g'\n    list=\"${list}\"\
    \ | sed 's/$/  /g'\n    list=\"${list}\" | sed 's/[ ]\\+/ /g'\n    list=\"$(echo\
    \ \"${list}\")\"\n    list=\"$( sort -n <<<\"${list}\" )\"\n\n    # Scan input\
    \ list backwards and count elements\n    for i in $(seq ${#list} -1 -1 -1 ); do\n\
    \        (( count++ ))\n        current=\"${list[i]}\"\n        previous=\"${list[i-1]}\"\
    \n        result=0\n        if [ \"$previous\" -lt \"$current\" ]; then\n    \
    \        result=1\n        elif [ \"$previous\" -gt \"$current\" ]; then\n   \
    \         result=0\n        fi\n        if [ \"$result\" -eq 1 ]; then\n     \
    \       break\n        fi\n    done\n\n    echo -n \"${result}\"\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"seq: extra operand \xe2\x80\x98-1\xe2\x80\x99\nTry ''seq --help'' for
    more information.\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local a b\n\n  for b in \"\
    $1\"; do\n    a=\"$b\"\n  done\n  if [ -z \"$a\" ]; then\n    echo \"0\"\n  else\n\
    \    [ $a -gt $b ] || [ $a -lt $b ]\n  fi\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp6sx46bz0.sh: line 20: [: too many arguments\n/tmp/tmp6sx46bz0.sh:
    line 20: [: too many arguments\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local l l l l l l l l l\n\
    \    l=${1//$'\\n'}\n    for ((i = 0; i < ${#l}; i++)); do\n        l[i]=$(expr\
    \ \"$l[$i]\" : '\\([0-9]\\+\\)')\n    done\n    local nl m\n    for ((i = 0; i\
    \ < ${#l}; i++)); do\n        if [ ${l[$i]} -gt ${l[$((i - 1))] } ]; then\n  \
    \          nl=\"$nl $i\"\n        elif [ ${l[$i]} -lt ${l[$((i - 1))] } ]; then\n\
    \            m=\"$m $i\"\n        fi\n    done\n    if [ \"$(expr \"$nl\" : '\\\
    ([0-9]\\)')\" = \"$(expr \"$nl\" : '\\([0-9]\\)')\" ]; then\n        return \"\
    true\"\n    elif [ \"$(expr \"$m\" : '\\([0-9]\\)')\" = \"$(expr \"$m\" : '\\\
    ([0-9]\\)')\" ]; then\n        return \"false\"\n    else\n        return \"$m\"\
    \n    fi\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpa_wmgves.sh: line 19: ${l[$((i - 1))] }: bad substitution\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local a=$1; shift\n\n  \
    \  local b=${a#*[! -]}; a=${a% *}\n    local b=${b#*[! -]}; b=${b% *}\n\n    local\
    \ i j\n    for (( i=0; i < ${#a}; ++i )); do\n        if [[ ${a[i]} -gt ${a[i+1]}\
    \ ]]; then\n            echo \"true\"\n            exit 0\n        fi\n    done\n\
    \n    local i j\n    for (( j=0; j < ${#a}; ++j )); do\n        if [[ ${a[j]}\
    \ -lt ${a[j+1]} ]]; then\n            echo \"false\"\n            exit 0\n   \
    \     fi\n    done\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0201cw79.sh: line 19: [[: 1 2 4: syntax error in expression
    (error token is "2 4")\n/tmp/tmp0201cw79.sh: line 27: [[: 1 2 4: syntax error
    in expression (error token is "2 4")\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local -n l=$1\n    local\
    \ -n a=()\n    local -n b=()\n    local i tmp\n    for ((i=0; i < ${#l[*]}; i++))\
    \ {\n        local tmp=${l[i]}\n        tmp=${tmp:0:1}\n        if [ \"${#a[*]}\"\
    \ -ge \"${i}\" -o \"${#b[*]}\" -ge \"${i}\" ] ; then\n            if [ \"${#a[*]}\"\
    \ -lt \"${i}\" ] ; then\n                a[${#a[*]}]=\"${tmp}\"\n            else\n\
    \                b[${#b[*]}]=\"${tmp}\"\n            fi\n        else\n      \
    \      a[${#a[*]}]=\"${tmp}\"\n            b[${#b[*]}]=\"${tmp}\"\n        fi\n\
    \    }\n    local len=${#a[*]}\n    for ((i=0; i < ${len}; i++)) {\n        if\
    \ [ \"${b[${i}]}\" -gt \"${a[${i}]}\" -o \"${b[${i}]}\" -lt \"${a[${i}]}\" ] ;\
    \ then\n            echo \"false\"\n            return 1\n        fi\n    }\n\
    \    echo \"true\"\n    return 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") =\
    \ \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpc_wwqs17.sh: line 12: local: `1 2 4 10'': invalid variable name
    for name reference\n/tmp/tmpc_wwqs17.sh: line 13: local: a: reference variable
    cannot be an array\n/tmp/tmpc_wwqs17.sh: line 14: local: b: reference variable
    cannot be an array\n/tmp/tmpc_wwqs17.sh: line 12: local: `1 2 4 20'': invalid
    variable name for name reference\n/tmp/tmpc_wwqs17.sh: line 13: local: a: reference
    variable cannot be an array\n/tmp/tmpc_wwqs17.sh: line 14: local: b: reference
    variable cannot be an array\n/tmp/tmpc_wwqs17.sh: line 12: local: `1 20 4 10'':
    invalid variable name for name reference\n/tmp/tmpc_wwqs17.sh: line 13: local:
    a: reference variable cannot be an array\n/tmp/tmpc_wwqs17.sh: line 14: local:
    b: reference variable cannot be an array\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local sorted_list\n    local\
    \ last_value\n    local sorted_list_length\n    local i\n    sorted_list=( \"\
    $@\" )\n    sorted_list_length=${#sorted_list[@]}\n    if [ $sorted_list_length\
    \ -gt 1 ]; then\n        local next_value\n        next_value=${sorted_list[1]}\n\
    \        last_value=${sorted_list[0]}\n        for i in $(seq $(( $sorted_list_length-1\
    \ ))); do\n            if [ \"$last_value\" = \"${sorted_list[i]}\" ]; then\n\
    \                local next_value\n                next_value=${sorted_list[i+1]}\n\
    \                if [ \"$next_value\" = \"${sorted_list[i]}\" ]; then\n      \
    \              last_value=${sorted_list[i]}\n                    continue\n  \
    \              else\n                    last_value=${sorted_list[i]}\n      \
    \              return 0\n                fi\n            else\n              \
    \  last_value=${sorted_list[i]}\n                continue\n            fi\n  \
    \      done\n        return 1\n    fi\n    return 0\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list=\"$1\";\n\n  local\
    \ last_element=\"\";\n\n  local status=0;\n\n  for element in $list; do\n    if\
    \ [ \"$element\" == \"$last_element\" ]; then\n      status=1;\n    else\n   \
    \   status=0;\n    fi\n    last_element=\"$element\";\n  done\n\n  echo $status;\n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local i\n  local result=0\n\
    \n  for i; do\n    [ -z \"$result\" ] && result=$i\n    if [ \"$i\" != \"$result\"\
    \ ]; then\n      result=0\n    fi\n  done\n\n  if [ \"$result\" -gt 0 ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tdeclare -i i\n\tlocal sorted=($(sort\
    \ -n \"$1\"))\n\tlocal prev=${sorted[0]}\n\tlocal i\n\tlocal max=0\n\tlocal diff=0\n\
    \tlocal true=0\n\tlocal false=0\n\tfor i in \"${sorted[@]:1}\"; do\n\t\tif [[\
    \ $i == $prev ]]; then\n\t\t\ttrue=$((true+1))\n\t\telse\n\t\t\tfalse=$((false+1))\n\
    \t\tfi\n\t\tdiff=$((diff+1))\n\t\tif [[ $diff -gt $max ]]; then\n\t\t\tmax=$diff\n\
    \t\tfi\n\t\tprev=$i\n\tdone\n\tif [[ $false -eq 1 ]]; then\n\t\treturn false\n\
    \telse\n\t\treturn true\n\tfi\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"sort: cannot read: ''1 2 4 10'': No such file or directory\n/tmp/tmp6598u5m6.sh:
    line 35: return: true: numeric argument required\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  # Deal with empty list input\n\
    \  if [ \"$1\" = \"\" ]; then\n    return 0\n  fi\n\n  # Get the first and last\
    \ elements\n  first=${1% *}\n  last=${1#*}\n\n  # Deal with lists larger than\
    \ 2 elements\n  if [ \"${#last}\" -gt \"2\" ]; then\n    return 0\n  fi\n\n  #\
    \ We need to know which number is larger\n  larger=$last\n  smaller=$first\n\n\
    \  # Go through the list from end to start, comparing each\n  # number to the\
    \ previous one\n  for i in `seq 1 ${#1}`; do\n    [ ${#last} -gt 1 ] || return\
    \ 1\n\n    # Compare the current number to the previous one\n    if [ \"$i\" -eq\
    \ \"1\" ]; then\n      if [ \"$larger\" -eq \"$1\" ]; then\n        larger=$1\n\
    \      elif [ \"$smaller\" -eq \"$1\" ]; then\n        smaller=$1\n      fi\n\
    \    elif [ \"$i\" -gt \"1\" ]; then\n      if [ \"$larger\" -eq \"$last\" ];\
    \ then\n        larger=$i\n      elif [ \"$smaller\" -eq \"$last\" ]; then\n \
    \       smaller=$i\n      fi\n    fi\n  done\n\n  # Check all numbers are positive\n\
    \  if [ $smaller -lt 0 ]; then\n    return 1\n  fi\n\n  # All numbers are positive\
    \ or negative\n  if [ $larger -ge 0 ]; then\n    return 0\n  fi\n\n  return 1\n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local l\n    local n=$#\n\
    \    if [[ ${n} -ne 1 ]]; then\n        echo \"Usage: $(basename $0) list1 list2\
    \ ...\"\n        return 1\n    fi\n    l=$(sed \"s/[ \\t]*$//g\" <<< \"${!1}\"\
    )\n    l=$(echo \"${l}\" | awk '{\n        l = length($0);\n        for (i = 2;\
    \ i <= l; i++) {\n            if ((i - 1) == l) {\n                if ($i > $(i-1))\
    \ {\n                    print \"false\";\n                    return \"true\"\
    \n                }\n                print \"true\";\n            }\n        \
    \    if ((i - 2) == l) {\n                if ($i < $(i-1)) {\n               \
    \     print \"true\";\n                    return \"false\"\n                }\n\
    \                print \"false\";\n            }\n            if (($i-2) == l\
    \ && ($i<$i-1)) {\n                print \"true\";\n                return \"\
    true\"\n            }\n            if (($i-3)==l && ($i<$i-2)) {\n           \
    \     print \"false\";\n                return \"true\"\n            }\n     \
    \       if (($i-4)==l && ($i<$i-3)) {\n                print \"true\";\n     \
    \           return \"false\"\n            }\n            if (($i-5)==l && ($i<$i-4))\
    \ {\n                print \"false\";\n                return \"true\"\n     \
    \       }\n        }\n        print \"false\";\n        return \"true\"\n    }')\n\
    \    eval \"$l\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpfjyawses.sh: line 18: 1 2 4 10: invalid variable name\nawk:
    cmd. line:7:                     return "true"\nawk: cmd. line:7:                     ^
    `return\'' used outside function context\nawk: cmd. line:14:                     return
    "false"\nawk: cmd. line:14:                     ^ `return\'' used outside function
    context\nawk: cmd. line:20:                 return "true"\nawk: cmd. line:20:                 ^
    `return\'' used outside function context\nawk: cmd. line:24:                 return
    "true"\nawk: cmd. line:24:                 ^ `return\'' used outside function
    context\nawk: cmd. line:28:                 return "false"\nawk: cmd. line:28:                 ^
    `return\'' used outside function context\nawk: cmd. line:32:                 return
    "true"\nawk: cmd. line:32:                 ^ `return\'' used outside function
    context\nawk: cmd. line:36:         return "true"\nawk: cmd. line:36:         ^
    `return\'' used outside function context\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list=\"$1\"\n  shift\n\
    \  local last=\"$1\"\n  shift\n  for ((i=1; i<=${#list}; i++)); do\n    local\
    \ current=\"$1\"\n    shift\n    if [[ \"${last}\" -gt \"${current}\" ]]; then\n\
    \      echo true\n      return 0\n    elif [[ \"${last}\" -lt \"${current}\" ]];\
    \ then\n      echo false\n      return 0\n    fi\n    last=\"${current}\"\n  done\n\
    \  echo true\n  return 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local sorted_list=$1 sorted_list_length=${#sorted_list}\
    \ i=1\n  while [[ $i -lt $sorted_list_length ]]; do\n    if [[ $sorted_list[$i]\
    \ -gt $sorted_list[$(( i + 1 ))] ]]; then\n      echo \"false\"\n      return\
    \ 1\n    elif [[ $sorted_list[$i] -lt $sorted_list[$(( i + 1 ))] ]]; then\n  \
    \    echo \"true\"\n      return 0\n    fi\n    (( i++ ))\n  done\n  echo \"false\"\
    \n  return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local list=$(echo \"$1\"\
    \ | sed 's/ /\\n/g')\n    local -a sorted=()\n    local -a unsorted=()\n    local\
    \ current\n    local prev\n    local last\n    for current in $list; do\n    \
    \    # Avoid empty lists\n        [ -z \"$current\" ] && continue\n\n        #\
    \ Avoid non-numerical items\n        [ -z \"$current\" ] || [ \"$(echo \"$current\"\
    \ | sed 's/[^0-9\\.-]//g')\" ] || continue\n\n        # Avoid duplicate items\n\
    \        if [[ \"${sorted[$prev]}\" == \"$current\" ]]; then\n            continue\n\
    \        fi\n\n        sorted+=(\"$current\")\n        unsorted+=(\"$prev\")\n\
    \        prev=\"$current\"\n    done\n\n    local result\n    if [[ ${#sorted[@]}\
    \ -ne ${#unsorted[@]} ]]; then\n        result=false\n    else\n        result=$(for\
    \ current in \"${sorted[@]}\";\n                  do [ $((current-last)) -gt 0\
    \ ] && return 0;\n                  last=$current; done)\n    fi\n    echo \"\
    $result\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local elem next prev prev_tail\n\
    \  local l=${#1}\n  local i=1 j=1\n  local list\n  local increasing\n\n  # Build\
    \ a list of increasing or decreasing elements\n  list=$( echo \"${1}\" | tr \"\
    \ \" \"\\n\" | sort -rn )\n  increasing=0\n\n  # Go through list\n  while [ $i\
    \ -lt $l ]; do\n    elem=$( echo \"${1}\" | cut -d' ' -f$i )\n    # Find the previous\
    \ element in a loop\n    prev=-1\n    while [ $j -gt $i ]; do\n      prev=$( echo\
    \ \"${1}\" | cut -d' ' -f$j-1 )\n      prev_tail=$( echo \"${1}\" | cut -d' '\
    \ -f$j )\n      if [ \"$prev_tail\" -gt \"$prev\" ] || [ \"$elem\" -gt \"$prev_tail\"\
    \ ]; then\n        prev=$prev_tail\n      else\n        j=$(( $j + 1 ))\n    \
    \  fi\n    done\n    if [ $j -gt $i ]; then\n      j=$(( $j + 1 ))\n    fi\n \
    \   # Compare it with next element\n    next=$( echo \"${1}\" | cut -d' ' -f$j\
    \ )\n    if [ \"$elem\" -gt \"$next\" ]; then\n      increasing=1\n    fi\n  \
    \  i=$(( $i + 1 ))\n  done\n\n  # If list is monotonically increasing, return\
    \ \"true\"\n  if [ $increasing -eq 1 ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmps02v2rw5.sh: line 41: [: : integer expression expected\n/tmp/tmps02v2rw5.sh:
    line 41: [: : integer expression expected\n/tmp/tmps02v2rw5.sh: line 41: [: :
    integer expression expected\n/tmp/tmps02v2rw5.sh: line 41: [: : integer expression
    expected\n/tmp/tmps02v2rw5.sh: line 41: [: : integer expression expected\n/tmp/tmps02v2rw5.sh:
    line 41: [: : integer expression expected\n/tmp/tmps02v2rw5.sh: line 41: [: :
    integer expression expected\n/tmp/tmps02v2rw5.sh: line 41: [: : integer expression
    expected\n/tmp/tmps02v2rw5.sh: line 41: [: : integer expression expected\n/tmp/tmps02v2rw5.sh:
    line 41: [: : integer expression expected\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -r line=\"$1\"\n  local\
    \ -r list sorted\n  list=( $line )\n  IFS=$'\\n' sorted=( \"${list[@]}\" )\n \
    \ declare -i i j start curr\n  start=0\n  curr=0\n  for (( i = 0; i < ${#sorted[@]};\
    \ i++ )); do\n    curr=\"${sorted[i]}\"\n    i=$(( i + 1 ))\n    for (( j = (\
    \ i + 1 ); j < ${#sorted[@]}; j++ )); do\n      if [ \"${sorted[j]}\" -gt \"${sorted[i\
    \ - 1]}\" ]; then\n        break\n      fi\n    done\n    if [ \"${sorted[j]}\"\
    \ -lt \"${sorted[i - 1]}\" ]; then\n      start=$(( i + 1 ))\n      break\n  \
    \  fi\n  done\n  [ \"$start\" = \"$curr\" ] && return 0\n  return 1\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpww2lehsu.sh: line 14: list: readonly variable\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local prefix=${1:-\"\"}\n\
    \  local elems=$2\n  local -a monotonic_array=()\n  local last=\"\"\n  local i=0\n\
    \  local -a ordered_array=()\n\n  while read -r elem || [ \"$elem\" != \"$last\"\
    \ ]; do\n    last=\"$elem\"\n    monotonic_array+=(\"$elem\")\n  done\n\n  for\
    \ elem in \"${monotonic_array[@]:1}\"; do\n    local -a elem_order=()\n    local\
    \ elem_index=0\n    for idx in \"${!monotonic_array[@]}\"; do\n      if [ \"$elem\"\
    \ == \"${ordered_array[$idx]}\" ]; then\n        elem_order+=(\"$idx\")\n    \
    \  fi\n    done\n    for idx in \"${!elem_order[@]}\"; do\n      local next_elem=\"\
    ${monotonic_array[$idx+1]}\"\n      if [ \"$elem\" == \"$next_elem\" ]; then\n\
    \        elem_index=$idx\n        break\n      fi\n    done\n    elem_index=$((elem_index+1))\n\
    \    ordered_array+=(\"$elem\")\n    ordered_array[$elem_index]=\"$elem\"\n  done\n\
    \n  echo \"${prefix} ${ordered_array[@]}\"\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=22>
  stdout: <_io.BufferedReader name=15>
  timestamp: 1660078887
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  declare -a l\n  declare -i\
    \ i a b\n  IFS=$'\\n' read -r -a l <<<\"$1\"\n  for ((i = 0; i < ${#l[@]}; ++i));\
    \ do\n    b=$((l[$i] >  l[i-1] ? 1 : 0))\n    a=$((l[$i] <= l[i-1] ? 1 : 0))\n\
    \    if [ \"$b\" -eq 1 ] && [ \"$a\" -eq 1 ]; then\n      echo \"true\"\n    \
    \  return 0\n    fi\n  done\n  echo \"false\"\n  return 1\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjvjkwkrd.sh: line 16: 1 2 4 10: syntax error in expression (error
    token is "2 4 10")\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -a elements=( \"$1\"\
    \ )\n  local last=\"${elements[-1]}\"\n\n  while [ \"${elements[0]}\" -gt \"${last}\"\
    \ ]; do\n    elements+=( \"$last\" )\n    last=\"${elements[-1]}\"\n  done\n\n\
    \  echo \"${#elements[@]}\" -eq 0 ||\n    [[ \"${elements[0]}\" -gt \"${elements[1]}\"\
    \ ]]\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpbx81cujg.sh: line 15: [: 1 2 4 10: integer expression expected\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local n=$1; shift\n    for\
    \ n in $@; do\n        [ ! -z \"$n\" ] \\\n            && [ \"$n\" -gt \"$n\"\
    \ ] \\\n            && return 0\n    done\n    return 1\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local elements=\"$1\"\n\
    \    local last=\"${elements[-1]}\"\n    local first=\"${elements[0]}\"\n    local\
    \ firstIndex=0\n    local lastIndex=0\n    local index=0\n    local increment=\"\
    ${last}\"\n\n    # Count elements and find the smallest and the largest index\n\
    \    while (( \"${index}\" < \"${#elements[@]}\" )); do\n        increment=\"\
    ${elements[index]}\"\n        lastIndex=\"${index}\"\n        (( index++ ))\n\
    \    done\n    # Find if first element is bigger than the last\n    if (( \"${first}\"\
    \ > \"${last}\" )); then\n        # Increment the first index\n        firstIndex=\"\
    ${index}\"\n        # Decrement the last\n        increment=\"-${last}\"\n   \
    \ fi\n    local result=0\n    # Walk through all indexes from smallest to largest\n\
    \    for ((index=\"${firstIndex}\"; index<=\"${lastIndex}\"; index++ )); do\n\
    \        if [ \"${increment}\" == \"${elements[index]}\" ]; then\n           \
    \ (( result++ ))\n        else\n            break\n        fi\n    done\n    #\
    \ Return result as a boolean\n    case \"${result}\" in\n        1)\n        \
    \    echo \"true\"\n            ;;\n        0)\n            echo \"false\"\n \
    \           ;;\n    esac\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo2hsp108.sh: line 13: elements: bad array subscript\n/tmp/tmpo2hsp108.sh:
    line 27: ((: 1 2 4 10 >  : syntax error in expression (error token is "2 4 10
    >  ")\n/tmp/tmpo2hsp108.sh: line 13: elements: bad array subscript\n/tmp/tmpo2hsp108.sh:
    line 27: ((: 1 2 4 20 >  : syntax error in expression (error token is "2 4 20
    >  ")\n/tmp/tmpo2hsp108.sh: line 13: elements: bad array subscript\n/tmp/tmpo2hsp108.sh:
    line 27: ((: 1 20 4 10 >  : syntax error in expression (error token is "20 4 10
    >  ")\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  [[ $1 =~ \" \" ]]; return\
    \ 1\n  [[ $1 =~ \"[[:space:]]\" ]]; return 1\n\n  # \"Monotonic\" means a monotonically\
    \ increasing or decreasing list.  It can be\n  # used as follows:\n  #\n  # $(monotonic\
    \ \"1 2 4 20\")\n  # $(monotonic \"1 20 4 10\")\n  # $(monotonic \"4 1 0 -10\"\
    )\n  # $(monotonic \"5 6 10 1\")\n  # $(monotonic \"6 10 1 5\")\n  #\n  # The\
    \ monotonic list returned is always a valid monotonic list:\n  #\n  # $ git update-index\
    \ --refresh -q --add --index-info && \\\n  #   git diff-files --quiet --ignore-submodules\
    \ --\n  # $ git update-index --add --remove\n  #\n  # If this does not return\
    \ \"true\" the list is not valid monotonic and may not\n  # be updated by git\
    \ update-index.  It is therefore recommended to use\n  # $(git diff-index --cached\
    \ --name-only HEAD -- .).\n  #\n  # The git update-index command only considers\
    \ a file to be valid if it is\n  # a clean file with no changes other than whitespace.\n\
    \  #\n  # The git diff-index command is a bit more sophisticated.  It will consider\n\
    \  # all files to be valid if a file is both modified and unchanged.  This means\n\
    \  # that git diff-index --cached --name-only HEAD -- . will consider only files\n\
    \  # to be modified (and not unchanged).  It will consider a file to be valid\n\
    \  # if all lines of that file are clean.  So git diff-index --cached --name-only\n\
    \  # HEAD -- . can be \"invalid\" even if a file is modified.\n  #\n  # The git\
    \ diff-files command is a bit more sophisticated.  It will consider\n  # all files\
    \ to be valid if all lines of that file are clean.  So git\n  # diff-files --quiet\
    \ --ignore-submodules . will consider only files to\n  # be modified (and not\
    \ unchanged).\n  #\n  # Finally, if the file list is not a clean list, but has\
    \ modified files,\n  # git diff-files --quiet --ignore-submodules . can consider\
    \ only\n  # modified files.\n  #\n  # The --name-only option is to limit the output\
    \ to the names of the files, not\n  # the full paths.  This option does not affect\
    \ output of git diff-files.\n\n  local i \n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local IFS=' '\n    local\
    \ list start stop\n    IFS=$' \\t\\n'\n    list=( \"$@\" )\n    for stop in \"\
    ${list[@]:0:2}\"; do\n        start=\"${list[@]:2}\"\n        if [[ \"$start\"\
    \ < \"$stop\" ]]; then\n            return 0\n        fi\n    done\n    return\
    \ 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local x\n    x=\"$1\"\n\
    \    shift\n    local last\n    local diff\n    local i\n    for ((i=1; i<${#x};\
    \ i++)); do\n        last=${x[i]}\n        diff=${last}\n        for x in \"${x[@]:i}\"\
    ; do\n            if [[ \"$x\" -gt \"$last\" ]]; then\n                last=$x\n\
    \            fi\n            if [[ \"$x\" -lt \"$last\" ]]; then\n           \
    \     diff=$x\n            fi\n        done\n        [[ $diff -ne 0 ]]\n    done\n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3a48wdby.sh: line 22: [[: 2 4 10: syntax error in expression
    (error token is "4 10")\n/tmp/tmp3a48wdby.sh: line 25: [[: 2 4 10: syntax error
    in expression (error token is "4 10")\n/tmp/tmp3a48wdby.sh: line 22: [[: 4 10:
    syntax error in expression (error token is "10")\n/tmp/tmp3a48wdby.sh: line 25:
    [[: 4 10: syntax error in expression (error token is "10")\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local a=\"${1:-}\"\n  local\
    \ a1=()\n  local b1=0\n  local b2=0\n  local diff diff1 diff2\n  local x=0\n\n\
    \  for i in $a; do\n    a1+=(\"$x\")\n    diff1=$(expr ${a1[$(( ${#a1[@]} - 1\
    \ ))] - $b1})\n    diff2=$(expr ${a1[$(( ${#a1[@]} - 1 ))] - $b2})\n\n    if [[\
    \ \"$diff1\" -gt \"$diff2\" ]]; then\n      b1=$i\n    elif [[ \"$diff2\" -gt\
    \ \"$diff1\" ]]; then\n      b2=$i\n    fi\n    x=$(( ${#a1[@]} - 1 ))\n  done\n\
    \n  [[ $b1 -ne $b2 ]]\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpepo1mjd7.sh: line 21: ${a1[$(( ${#a1[@]} - 1 ))] - $b1}: bad
    substitution\n/tmp/tmpepo1mjd7.sh: line 22: ${a1[$(( ${#a1[@]} - 1 ))] - $b2}:
    bad substitution\n/tmp/tmpepo1mjd7.sh: line 21: ${a1[$(( ${#a1[@]} - 1 ))] - $b1}:
    bad substitution\n/tmp/tmpepo1mjd7.sh: line 22: ${a1[$(( ${#a1[@]} - 1 ))] - $b2}:
    bad substitution\n/tmp/tmpepo1mjd7.sh: line 21: ${a1[$(( ${#a1[@]} - 1 ))] - $b1}:
    bad substitution\n/tmp/tmpepo1mjd7.sh: line 22: ${a1[$(( ${#a1[@]} - 1 ))] - $b2}:
    bad substitution\n/tmp/tmpepo1mjd7.sh: line 21: ${a1[$(( ${#a1[@]} - 1 ))] - $b1}:
    bad substitution\n/tmp/tmpepo1mjd7.sh: line 22: ${a1[$(( ${#a1[@]} - 1 ))] - $b2}:
    bad substitution\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list=$1 result=false\n\
    \  IFS=$'\\n' read -r -a list < <(echo \"$list\") || return $result\n  while ((\
    \ ${#list[@]} > 0 )); do\n    last=${list[${#list[@]} - 1]}\n    (( ${#last} >\
    \ 1 )) && break\n    last -gt list[${#list[@]} - 2] && break\n    last=${list[${#list[@]}\
    \ - 1]}\n    (( ${#last} > 1 )) && break\n    result=true\n  done\n  unset IFS\n\
    \  return $result\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmps22cjh70.sh: line 23: return: false: numeric argument required\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal elements=\"$1\"\n\t\
    local first=\"${elements#* }\"\n\tlocal last=\"${elements% *}\"\n\t[ -z \"${first}\"\
    \ ] || [ -z \"${last}\" ] || \\\n\t\t[ \"-${first}\" -gt \"-${last}\" ] || \\\n\
    \t\t[ \"-${last}\" -gt \"-${first}\" ]\n}\n\ncandidate() {\n    monotonic \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpf_cz0x58.sh: line 16: [: -2 4 10: integer expression expected\n/tmp/tmpf_cz0x58.sh:
    line 17: [: -1 2 4: integer expression expected\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list=\"$1\"\n  local\
    \ last=\"$list\"\n  local start=0\n  local stop=0\n  local increment=1\n  local\
    \ result\n\n  for element in $list; do\n    if [ \"$stop\" -gt \"$increment\"\
    \ ]; then\n      increment=$(( $increment * 2 ))\n      stop=0\n    fi\n    last=$element\n\
    \    stop=$(( $stop + $increment ))\n  done\n\n  if [ \"$last\" -ne \"$start\"\
    \ ]; then\n    result=true\n  else\n    result=false\n  fi\n\n  echo \"$result\"\
    \n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local sorted=( \"${@}\"\
    \ )\n    local n=\"$(sort <<<\"$sorted\" | uniq)\"\n    for i in $(seq 0 \"${#n[@]}\"\
    )\n    do\n        # this skips the current element and goes to next\n       \
    \ [ \"${n[$i]}\" -gt \"${n[$((i+1))]}\" ]\n    done\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpn6i1c51f.sh: line 17: [: 1 2 4 10: integer expression expected\n/tmp/tmpn6i1c51f.sh:
    line 17: [: : integer expression expected\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local LIST=\"$1\"\n    shift\n\
    \    for x in $(echo $LIST | tr ' ' ','); do\n      (( ${#x} )) && [[ \"$x\" -gt\
    \ \"$(head -n 1 <<< $LIST | tail -n 1)\" || \"$x\" -lt \"$(tail -n 1 <<< $LIST\
    \ | head -n 1)\" ]] && return 0\n    done\n    return 1\n}\n\ncandidate() {\n\
    \    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp54nyas_p.sh: line 15: [[: 1 2 4 10: syntax error in expression
    (error token is "2 4 10")\n/tmp/tmp54nyas_p.sh: line 15: [[: 1 2 4 10: syntax
    error in expression (error token is "2 4 10")\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local -n list=$1\n    local\
    \ n prev=0 result=0\n    for n in $list; do\n        result=0\n        for ((\
    \ prev=$n; prev<$n; prev++ )); do\n            result=$((result+prev))\n     \
    \   done\n        if (( result>$n )); then\n            return false\n       \
    \ fi\n    done\n    return true\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") =\
    \ \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpkvya4gwh.sh: line 12: local: `1 2 4 10'': invalid variable name
    for name reference\n/tmp/tmpkvya4gwh.sh: line 23: return: true: numeric argument
    required\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local sortedList=\"$1\"\n\
    \    local lastValue=\"${sortedList}\"\n\n    for index in ${!sortedList}\n  \
    \  do\n        local currentValue=\"${sortedList[$index]}\"\n        local isIncreasing=\"\
    $( test -n \"$currentValue\" && \"$lastValue\" -gt \"$currentValue\")\"\n    \
    \    local isDecreasing=\"$( test -n \"$currentValue\" && \"$lastValue\" -lt \"\
    $currentValue\")\"\n        \n        if [ -z \"$isIncreasing\" ] && [ -z \"$isDecreasing\"\
    \ ]; then\n            echo \"$index\"\n            return\n        fi\n     \
    \   \n        local lastIndex=\"$index\"\n        \n        if [ \"$isIncreasing\"\
    \ ] || [ \"$isDecreasing\" ]; then\n            if [ \"$isIncreasing\" ]; then\n\
    \                lastValue=\"$currentValue\"\n            else\n             \
    \   sortedList=\"$( echo \"${sortedList}\" | sed -e \"s/^${lastValue}$/$currentValue/\"\
    )\"\n            fi\n        fi\n    done\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpu33m0ocb.sh: line 15: 1 2 4 10: invalid variable name\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local sorted_list=\"$1\"\n\
    \  shift\n  local prev=\"$(head -n 1 \"$sorted_list\")\"\n  local increasing_flag=false\n\
    \  local last_element=$(tail -n 1 \"$sorted_list\")\n  for element in $sorted_list;\
    \ do\n    if [ \"$element\" -gt \"$prev\" ]; then\n      if [ \"$increasing_flag\"\
    \ = true ]; then\n        increasing_flag=false\n      else\n        increasing_flag=true\n\
    \      fi\n    else\n      if [ \"$increasing_flag\" = true ]; then\n        increasing_flag=false\n\
    \      else\n        increasing_flag=true\n      fi\n    fi\n    prev=$element\n\
    \  done\n  if [ \"$increasing_flag\" = false ]; then\n    echo \"false\"\n  else\n\
    \    echo \"true\"\n  fi\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"head: cannot open ''1 2 4 10'' for reading: No such file or directory\ntail:
    cannot open ''1 2 4 10'' for reading: No such file or directory\n/tmp/tmpjg85__dr.sh:
    line 18: [: : integer expression expected\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local list=\"$1\"\n    local\
    \ last=\"-1\"\n    local i\n    for i in $(seq $(( ${#list} - 1 )) ) ; do\n  \
    \      local value=\"${list[i]}\"\n        if [ \"$last\" -lt \"$value\" ] \\\n\
    \         || [ \"$value\" = \"$last\" ] || [ \"$last\" == \"-1\" ]; then\n   \
    \         echo \"false\"\n            return 0\n        fi\n        echo \"true\"\
    \n        last=\"$value\"\n    done\n    return 0\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp70b2xx51.sh: line 17: [: : integer expression expected\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local -r list_name=$1\n\
    \    shift\n    local -r lines=(\"$@\")\n    local min_length=$(expr ${#lines[*]}\
    \ - 1)\n    local i\n    local current_max=$((${#lines[*]} + 1))\n    local current_min=$((${#lines[*]}\
    \ - 1))\n\n    # Handle empty list case\n    if [ ${#lines[*]} -eq 0 ]; then\n\
    \        echo \"${lines[*]}\"\n        return\n    fi\n\n    # Handle list of\
    \ 1 element\n    if [ ${#lines[*]} -eq 1 ]; then\n        echo \"true\"\n    \
    \    return\n    fi\n\n    # Find minimum length list\n    if [ ${#lines[*]} -gt\
    \ ${min_length} ]; then\n        min_length=${#lines[*]}\n    fi\n\n    for i\
    \ in $(seq 0 $(( ${#lines[*]} - 1 ))); do\n        local line=${lines[$i]}\n \
    \       local value=${line#*=}\n        local value_type=${line%%=*}\n\n     \
    \   # Handle empty string case\n        if [ ${value_type} != \"s\" ]; then\n\
    \            echo \"false\"\n            return\n        fi\n\n        if [ $i\
    \ -eq 0 ]; then\n            current_max=$(( ${#line} - 1 ))\n        else\n \
    \           current_max=$(( $current_max ))\n        fi\n\n        if [ $i -eq\
    \ $(( ${#lines[*]} - 1 )) ]; then\n            current_min=$(( ${#line} - 1 ))\n\
    \        else\n            current_min=$(( $current_min ))\n        fi\n\n   \
    \     if [ $value -lt $current_min ]; then\n            current_min=$value\n \
    \       fi\n\n        if [ $value -gt $current_max ]; then\n            current_max=$value\n\
    \        fi\n    done\n\n    if [ $current_min -lt $current_max ]; then\n    \
    \    echo \"true\"\n        return\n    fi\n\n    echo \"false\"\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local tmp\n    local last\n\
    \    local min\n    local max\n    local first\n    local diff\n\n    # Split\
    \ $1 by spaces, get rid of empty elements\n    read -a array <<< \"$1\"\n\n  \
    \  # Find the min/max element in the array\n    first=${array[0]}\n    for element\
    \ in \"${array[@]:1}\"; do\n        if [[ \"$first\" == \"$element\" ]]; then\n\
    \            first=\n            continue\n        fi\n        case \"$first\"\
    \ in\n            \"$element\" )\n                continue\n                ;;\n\
    \            *)\n                first=\"$element\"\n                ;;\n    \
    \    esac\n    done\n\n    # Remove the first element\n    shift\n\n    # Find\
    \ the max/min elements in the remaining elements\n    max=$first\n    min=$first\n\
    \    for element in \"${array[@]}\"; do\n        if [[ \"$min\" == \"$element\"\
    \ ]]; then\n            min=\"$element\"\n        fi\n        if [[ \"$max\" ==\
    \ \"$element\" ]]; then\n            max=\"$element\"\n        fi\n    done\n\n\
    \    # See if the list contains any monotonically increasing or decreasing elements\n\
    \    for element in \"${array[@]}\"; do\n        if [[ \"$element\" -le \"$min\"\
    \ ]] || [[ \"$element\" -gt \"$max\" ]]; then\n            case \"$first\" in\n\
    \                \"\" )\n                    first=\"$element\"\n            \
    \        ;;\n                *)\n                    first=\"$element\"\n    \
    \                ;;\n            esac\n        else\n            case \"$first\"\
    \ in\n                \"\" )\n                    first=\"$element\"\n       \
    \             ;;\n                *)\n                    first=\"\"\n       \
    \             ;;\n            esac\n        fi\n    done\n\n    # Return true\
    \ if list has any monotonically increasing or decreasing elements\n    [[ \"$first\"\
    \ ]]\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local n=1\n  local prev=0\n\
    \  local elems=( $1 )\n  local first=1\n  while [ $# -gt 0 ]; do\n    case $1\
    \ in\n      -*)\n        echo \"error: unknown option $1\"\n        return 1\n\
    \        ;;\n      *)\n        elems[$n]=\"$1\"\n        ((n++))\n        ;;\n\
    \    esac\n    ((n--))\n    shift\n  done\n  if [ $n -lt 1 ]; then\n    echo \"\
    error: no arguments given\"\n    return 2\n  fi\n  for ((i=1; i<=n; i++)); do\n\
    \    local elem=${elems[$i]}\n    case \"$prev\" in\n      -?*)\n        # last\
    \ element - no prev\n        if [ -z $prev ]; then\n          if [ -z \"$elem\"\
    \ ]; then\n            case \"$first\" in\n              0)\n                echo\
    \ \"true\"\n                ;;\n              *)\n                echo \"false\"\
    \n                ;;\n            esac\n          else\n            echo \"$elem\
    \ < $elem\"\n          fi\n        else\n          case \"$elem\" in\n       \
    \     \"$prev\")\n              echo \"false\"\n              ;;\n           \
    \ *)\n              echo \"$elem < $prev\"\n              ;;\n          esac\n\
    \        fi\n        ;;\n      *)\n        if [ -z \"$elem\" ]; then\n       \
    \   case \"$first\" in\n            0)\n              echo \"true\"\n        \
    \      ;;\n            *)\n              echo \"false\"\n              ;;\n  \
    \        esac\n        else\n          case \"$elem\" in\n            \"$prev\"\
    )\n              echo \"false\"\n              ;;\n            *)\n          \
    \    echo \"$elem < $prev\"\n              ;;\n          esac\n        fi\n  \
    \      ;;\n    esac\n    prev=\"$elem\"\n    ((first++))\n  done\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local l\n  l=\"$1\"\n  local\
    \ a\n  a=($(echo $l | tr \" \" \"\\n\"))\n  for (( i = 0; i < ${#a[@]}; i++ ));\
    \ do\n    # echo \"i=$i\" > /tmp/monotonic.txt\n    local b\n    b=${a[i+1]}\n\
    \    local c\n    c=${a[i-1]}\n    if [ $c -gt $b ]; then\n      return 0\n  \
    \  elif [ $c -lt $b ]; then\n      return 1\n    fi\n  done\n  return 1\n}\n\n\
    candidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local elements=$1\n    local\
    \ min=1\n    local max=0\n    for i in $(echo $elements)\n    do\n        if [\
    \ $(($i-$min)) -lt 0 ]; then\n            min=$i\n        fi\n        if [ $(($i-$max))\
    \ -gt 0 ]; then\n            max=$i\n        fi\n    done\n    echo $((max-min))\n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local L1 L2 i\n  L1=${1}\n\
    \  L2=${2:-\"\"}\n  for i in ${L1};\n  do\n    if [ -z \"${L2}\" ];\n    then\n\
    \      if [ -z \"${L1}\" ];\n      then\n        return 0\n      else\n      \
    \  return 1\n      fi\n    else\n      if [ \"${i}\" -gt \"${L2}\" ];\n      then\n\
    \        return 1\n      else\n        return 0\n      fi\n    fi\n  done\n}\n\
    \ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local list_size=$(echo $1\
    \ | wc -w)\n    if [[ $list_size < 2 ]]; then\n        echo \"Invalid list size\"\
    \n        return 1\n    fi\n\n    local min=$(bc <<< \"$list_size < 2 ? $list_size\
    \ : 2\")\n    local max=0\n    local list_elements=$(echo $1 | tr ' ' '\\n' |\
    \ sort -n)\n    local last_element=$(echo $list_elements | tail -1)\n    while\
    \ read element; do\n        if [[ $(echo $element | cut -d' ' -f2) -gt $max ]];\
    \ then\n            max=$(( $element ))\n        fi\n    done\n    local result=$(echo\
    \ $list_elements | tr ' ' '\\n' | sort -n | head -1 | awk '{printf \"%d, \", $2}')\n\
    \    echo \"$min $max $result\" > /dev/stderr\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=54>
  stdout: <_io.BufferedReader name=40>
  timestamp: 1660078887
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local list=\"$1\" # Input\
    \ is a space-separated string\n    local -n list=\"$list\" # Don't override argument\
    \ list\n    local -n i_list=\"$list\" # Copy list to another variable name\n \
    \   local i=\"$list_index\" # Initialize a variable name\n    local -n min=\"\
    $1\" # Initialize a variable name\n    local -n max=\"$1\" # Initialize a variable\
    \ name\n    local -n val=\"$1\" # Initialize a variable name\n    local -n a=\"\
    $1\" # Initialize a variable name\n    local -n b=\"$1\" # Initialize a variable\
    \ name\n    local -n c=\"$1\" # Initialize a variable name\n    local -n d=\"\
    $1\" # Initialize a variable name\n\n    # Initialize variables\n    list_index=\"\
    0\"\n    list_length=$(echo \"$list\" | wc -w)\n    i=0\n    min=$list[0]\n  \
    \  max=$list[0]\n    val=$list[0]\n\n    # Process list\n    for element in \"\
    ${list[@]}\"; do\n        if [ \"$i\" -lt \"$list_length\" ]; then\n         \
    \   a=$element\n            if [[ $a -lt \"$min\" ]]; then\n                min=$a\n\
    \            fi\n            i=$((i+1))\n        elif [ \"$i\" -ge \"$list_length\"\
    \ ]; then\n            b=$element\n            if [[ $b -lt \"$max\" ]]; then\n\
    \                max=$b\n            fi\n            i=$((i+1))\n        fi\n\
    \        i=$((i+1))\n    done\n\n    # Compare list values\n    if [ \"$min\"\
    \ != \"$max\" ]; then\n        # List elements are monotonically increasing or\
    \ decreasing.\n        case \"$a\" in\n            $min) val=\"true\" ;;\n   \
    \         *)   val=\"false\" ;;\n        esac\n    elif [ \"$min\" == \"$max\"\
    \ ]; then\n        # List elements are uniformly increasing or decreasing.\n \
    \       case \"$a\" in\n            $a) val=\"true\" ;;\n            *)   val=\"\
    false\" ;;\n        esac\n    else\n        # List elements are disjoint.\n  \
    \      val=\"true\"\n    fi\n\n    echo \"$val\"\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxf87z30y.sh: line 13: local: `1 2 4 10\'': invalid variable
    name for name reference\n/tmp/tmpxf87z30y.sh: line 14: local: `1 2 4 10\'': invalid
    variable name for name reference\n/tmp/tmpxf87z30y.sh: line 16: local: `1 2 4
    10\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh: line 17:
    local: `1 2 4 10\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 18: local: `1 2 4 10\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 19: local: `1 2 4 10\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 20: local: `1 2 4 10\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 21: local: `1 2 4 10\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 22: local: `1 2 4 10\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 36: [[: 1 2 4 10: syntax error in expression (error token is "2 4 10")\n/tmp/tmpxf87z30y.sh:
    line 13: local: `1 2 4 20\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 14: local: `1 2 4 20\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 16: local: `1 2 4 20\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 17: local: `1 2 4 20\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 18: local: `1 2 4 20\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 19: local: `1 2 4 20\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 20: local: `1 2 4 20\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 21: local: `1 2 4 20\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 22: local: `1 2 4 20\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 36: [[: 1 2 4 20: syntax error in expression (error token is "2 4 20")\n/tmp/tmpxf87z30y.sh:
    line 13: local: `1 20 4 10\'': invalid variable name for name reference\n/tmp/tmpxf87z30y.sh:
    line 14: local: `1 20 4 10\'': invalid variable name for name reference\n/tmp/tmp'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    # Trim whitespace\n    local\
    \ trimmed=${1//[[:space:]]/}\n    # Convert to an array\n    local nums=( $trimmed\
    \ )\n    # Return result\n    declare -n monotonic_results=${nums[@]:0:${#nums[@]}}\n\
    \    [[ ${#monotonic_results[@]} -gt 1 ]] || return 0\n    declare -n num_sorted=(\
    \ ${monotonic_results[@]} )\n    [[ ${#num_sorted[@]} -gt 1 ]] || return 0\n \
    \   [[ ${num_sorted[0]} -gt ${num_sorted[1]} ]] || return 1\n    local n=$(( ${#num_sorted[@]}\
    \ - 1 ))\n    while (( n >= 0 )); do\n        [[ ${num_sorted[n+1]} -gt ${num_sorted[n]}\
    \ ]] || return 0\n        n=$(( n - 1 ))\n    done\n    return 1\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpujjggd60.sh: line 17: declare: `12410'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -n list=$1\n  local\
    \ last=$list[-1]\n  local cur=$last\n  for el in $list; do\n    case ${cur} in\n\
    \      \"${el}\") ;;\n      \"-${el}\") return 1 ;;\n      \"+${el}\") return\
    \ 0 ;;\n      *) return 1 ;;\n    esac\n    cur=$el\n  done\n  return 0\n}\n\n\
    candidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpd19d1tl1.sh: line 12: local: `1 2 4 10'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local l\n  local count\n \
    \ local max\n  local maxe\n  local i\n  local j\n  local last\n  local lastvalue\n\
    \  local result\n  local value\n\n  l=\"$1\"\n  shift\n  count=$(expr \"$#\" :\
    \ '\\([0-9]*\\)')\n  if [[ $count -gt 0 ]]; then\n    max=$(( ${l} > ${l}[0] ))\
    \ || return 1\n  else\n    max=1\n  fi\n  maxe=${#l}\n  result=0\n  i=$(( ${#l}\
    \ - 1 ))\n  while [ $i -ge 0 ]; do\n    value=${l::i}\n    if [[ $count -gt 0\
    \ ]]; then\n      if [[ ${value} -gt ${l}[${i}] ]]; then\n        (( ++count ))\n\
    \      fi\n    else\n      if [[ ${value} -gt ${l}[${i}] ]]; then\n        return\
    \ 1\n      fi\n    fi\n    if [[ $count -gt 0 ]]; then\n      if [[ $result -eq\
    \ 0 ]]; then\n        last=${l::i}\n        lastvalue=${value}\n      elif [[\
    \ $lastvalue -lt ${value} ]]; then\n        result=1\n      fi\n    elif [[ $result\
    \ -eq 0 ]]; then\n      last=${l::i}\n      lastvalue=${value}\n    elif [[ $lastvalue\
    \ -lt ${value} ]]; then\n      result=1\n    fi\n    i=$(( ${i} - 1 ))\n  done\n\
    \  [[ ${result} == 0 ]] && return 1\n  return 0\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2ew4m5gt.sh: line 41: [[: 1 2 4 1: syntax error in expression
    (error token is "2 4 1")\n/tmp/tmp2ew4m5gt.sh: line 41: [[: 1 2 4 : syntax error
    in expression (error token is "2 4 ")\n/tmp/tmp2ew4m5gt.sh: line 41: [[: 1 2 4:
    syntax error in expression (error token is "2 4")\n/tmp/tmp2ew4m5gt.sh: line 41:
    [[: 1 2 : syntax error in expression (error token is "2 ")\n/tmp/tmp2ew4m5gt.sh:
    line 41: [[: 1 2: syntax error in expression (error token is "2")\n/tmp/tmp2ew4m5gt.sh:
    line 41: [[: 1 2 4 10[2]: syntax error in expression (error token is "2 4 10[2]")\n/tmp/tmp2ew4m5gt.sh:
    line 41: [[: 1 2 4 10[1]: syntax error in expression (error token is "2 4 10[1]")\n/tmp/tmp2ew4m5gt.sh:
    line 41: [[: 1 2 4 10[0]: syntax error in expression (error token is "2 4 10[0]")\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local i j k l\n    [[ \"\
    $#\" -lt 2 ]] && return 1\n    for (( j=$1; j<$1; j++ )); do\n        for (( k=$j;\
    \ k>0; k-- )); do\n            l=$j\n            [[ \"$l\" -gt \"$k\" ]] && return\
    \ 0\n        done\n    done\n    return 1\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  # shellcheck disable=SC2034\n\
    \  local -r n=$1\n  local -r string=\"$2\"\n  local -a sorted=( $(sort -n \"${string}\"\
    ) )\n  local -r max_diff=0\n  local -r diff\n  local -r max_elem\n  local i\n\n\
    \  for (( i=1 ; i<=\"${#sorted[@]}\" ; i++ )); do\n    local elem=${sorted[$((\
    \ i - 1 ))]}\n    local next_elem=${sorted[$i]}\n\n    if [[ \"${elem}\" == \"\
    ${next_elem}\" ]]; then\n      # ${elem} is equal to ${next_elem}, so no change\n\
    \      continue\n    fi\n\n    diff=$(( ${next_elem} - ${elem} ))\n    if [[ \"\
    ${diff}\" -gt \"${max_diff}\" ]]; then\n      max_diff=\"${diff}\"\n      max_elem=\"\
    ${elem}\"\n    fi\n  done\n\n  echo -n \"${max_elem}\"\n}\n\ncandidate() {\n \
    \   monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\"\
    \ ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"sort: cannot read: '''': No such file or directory\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -n list=$1\n  local\
    \ -a monotonic_list\n  local -n i=$list\n  local -n j=$list\n  local -n tmp=$list\n\
    \  local -n prev=$list\n  local -n last=$list\n  local -n next=$list\n  local\
    \ -n elem\n  local -n elem1\n  local -n elem1_len\n  local -n elem2\n  local -n\
    \ elem2_len\n  local -n elem3\n  local -n elem3_len\n  local -n last_elem\n  local\
    \ -n next_elem\n  local -n last_elem_len\n  local -n next_elem_len\n  local -n\
    \ max_len\n  local -n cur\n\n  max_len=${#list[@]}\n  cur=$i\n  monotonic_list[0]=$cur\n\
    \  i=0\n  j=${#list[@]}\n  while [ $i -le $j ]\n  do\n    elem=${list[i]}\n  \
    \  if [ \"$prev\" != \"$cur\" ]\n    then\n      elem1=\"${list[$i]}\"\n     \
    \ if [ \"$elem1\" -ge \"$elem\" ]\n      then\n        elem2=\"${list[$(i-1)]}\"\
    \n        if [ \"$elem2\" -le \"$elem\" ]\n        then\n          elem3=\"${list[$((i-1))]}\"\
    \n          if [ \"$elem3\" -ge \"$elem\" ]\n          then\n            monotonic_list[$((i-1))]=\"\
    $elem\"\n            if [ \"$elem\" -eq \"$elem1\" ]\n            then\n     \
    \         monotonic_list[$i]=\"$elem\"\n            fi\n          else\n     \
    \       monotonic_list[$i]=\"$elem\"\n          fi\n        else\n          monotonic_list[$i]=\"\
    $elem\"\n        fi\n      else\n        monotonic_list[$i]=\"$elem\"\n      fi\n\
    \    fi\n    ((i++))\n    prev=\"$cur\"\n    ((cur++))\n  done\n  ((j--))\n  ((last_elem\
    \ = ${list[$((j-1))]}))\n  ((next_elem = ${list[$((j+1))]}))\n  ((last_elem_len\
    \ = ${#last_elem}))\n  ((next_elem_len = ${#next_elem}))\n  if [ \"$last_elem_len\"\
    \ -ge \"$max_len\" ]\n  then\n    max_len=$last_elem_len\n  fi\n  if [ \"$next_elem_len\"\
    \ -ge \"$max_len\" ]\n  then\n    max_len=$next_elem_len\n  fi\n  i=0\n  \n}\n\
    \ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp6gckw4pe.sh: line 12: local: `1 2 4 10'': invalid variable name
    for name reference\n/tmp/tmp6gckw4pe.sh: line 14: local: `'': not a valid identifier\n/tmp/tmp6gckw4pe.sh:
    line 15: local: `'': not a valid identifier\n/tmp/tmp6gckw4pe.sh: line 16: local:
    `'': not a valid identifier\n/tmp/tmp6gckw4pe.sh: line 17: local: `'': not a valid
    identifier\n/tmp/tmp6gckw4pe.sh: line 18: local: `'': not a valid identifier\n/tmp/tmp6gckw4pe.sh:
    line 19: local: `'': not a valid identifier\n/tmp/tmp6gckw4pe.sh: line 34: `0'':
    not a valid identifier\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -r list=\"$1\"\n  local\
    \ -r list_sorted=\"$(printf \"%s\" \"${list}\" | sort -n)\"\n  local -r last=${list_sorted[-1]}\n\
    \  local -r length=${#list}\n  [[ \"$last\" -gt \"$last\" ]] || return 1\n  local\
    \ -r result=true\n  local item item2 item3\n  for (( c=1; c<=$length; c++ ));\
    \ do\n    item=${list_sorted[c]}\n    item2=${list_sorted[c-1]}\n    item3=${list_sorted[c-2]}\n\
    \    if [[ \"$item2\" -gt \"$item\" ]] ||\n       [[ \"$item\" -gt \"$item2\"\
    \ ]] ||\n       [[ \"$item3\" -gt \"$item\" ]]; then\n      result=false\n   \
    \   break\n    fi\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp087nkhul.sh: line 14: list_sorted: bad array subscript\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local i prev=$1\n    for\
    \ ((i=1;i<$#;i++)) ; do\n        local val=$i\n        prev=${val}\n        echo\
    \ \"$i is [${val}]\"\n        local cmp=$(( val > prev ))\n        if [ \"$cmp\"\
    \ = \"0\" ] ; then\n            return 0\n        else\n            return 1\n\
    \        fi\n    done\n    return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local l=$1\n    local -n\
    \ list=$(echo $l | tr ' ' ,) # Make it into a comma-separated list\n    local\
    \ i j\n    local res\n    local t1 t2\n    local tmp\n    local -a t\n    local\
    \ -a t2\n    local -a l1\n    local -a l2\n    local -a l3\n    local -a l1diff\n\
    \    local -a l2diff\n    local -a l1diff2\n    local -a l2diff2\n    local -a\
    \ l3diff\n    local -a t1\n    local -a t2\n    local -a l\n    local n\n    local\
    \ tmp\n\n    for (( i=0 ; i<${#list[@]} ; i++ )); do\n\t(( j=$(i+2) ))\n\tl1=${l::$i}\n\
    \tl2=${l::$j}\n\tl3=${l::$i$j}\n\t# Test for unequal length lists.\n\tif [ $((\
    \ $j - $i )) -eq 0 ]; then\n\t    l1diff=true\n\t    l2diff=true\n\t    l1diff2=true\n\
    \t    l2diff2=true\n\t    l3diff=true\n\telse\n\t    # Compare first two items\
    \ of each list\n\t    t1=(${list[$i]:0})\n\t    t2=(${list[$j]:0})\n\t    if [\
    \ \"$t1\" -gt \"$t2\" ]; then\n\t\tl1diff=true\n\t    else\n\t\tt1=(${list[$i]:1})\n\
    \t\tt2=(${list[$j]:1})\n\t\tif [ \"$t1\" -gt \"$t2\" ]; then\n\t\t    l1diff2=true\n\
    \t\telse\n\t\t    l1diff=true\n\t\t    l2diff=true\n\t\t    l2diff2=true\n\t\t\
    \    l3diff=true\n\t\tfi\n\t    fi\n\tfi\n\t# Test if list elements are monotonically\
    \ increasing or decreasing.\n\tif [ \"$l1diff\" -eq true ]; then\n\t    if [ \"\
    $l2diff\" -eq true ]; then\n\t\tif [ \"$l1diff2\" -eq true ]; then\n\t\t    if\
    \ [ \"$l2diff2\" -eq true ]; then\n\t\t        if [ \"$l3diff\" -eq true ]; then\n\
    \t\t\tres=true\n\t\t        fi\n\t\t    else\n\t\t\tres=true\n\t\t    fi\n\t\t\
    else\n\t\t    res=true\n\t\tfi\n\t    else\n\t\tres=true\n\t    fi\n\telse\n\t\
    \    if [ \"$l2diff\" -eq\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpinr136ni.sh: line 84: syntax error near unexpected token `}''\n/tmp/tmpinr136ni.sh:
    line 84: `}''\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: -1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -n elements=$1\n\n \
    \ if [[ $# -eq 0 ]]; then\n    return 1\n  fi\n\n  local -a elements\n  IFS='\
    \ ' read -r -a elements <<<\"${elements// /, }\"\n\n  # sort the elements by ascending\
    \ order\n  elements+=( )\n  sort -n ${elements+\"${elements[@]}\"}\n\n  local\
    \ -n last=${elements[@]}\n  local -n cur\n  local -n len=${#last[@]}\n  local\
    \ -n j\n  local -n i\n\n  printf -v cur '%0' \"$len\"\n  for (( j=1; ((j-1)<len);\
    \ j+=1 )); do\n    i=\"${last[j]}\"\n    last[j]=\"${cur}\"\n    cur=\"${last[j-1]}\"\
    \n    ((cur++))\n    if [[ -n \"${last[j]}\" ]]; then\n      ((cur--))\n    fi\n\
    \  done\n  printf -v last '%0' \"${last[@]}\"\n  [[ \"${last}\" -ge \"$cur\" ]]\
    \ && return 0 || return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=30>
  stdout: <_io.BufferedReader name=13>
  timestamp: 1660078887
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local elements\n    local\
    \ result\n    local tmp\n    local x\n    elements=($(printf \"%s\\n\" \"${@}\"\
    \ | sort -n | sed -e 's/^[ \\t]*//'))\n    for x in \"${elements[@]}\"; do\n \
    \       if [[ $x == *\"-\"* ]]; then\n            if [[ $(( $(echo \"${x}\" |\
    \ cut -c1) - $(echo \"${x}\" | cut -c2) )) == 0 ]]; then\n                if [[\
    \ -n $result ]]; then\n                    return 0\n                fi\n    \
    \            tmp=${x}\n            else\n                if [[ -n $result ]];\
    \ then\n                    return 1\n                fi\n                tmp=${x}\n\
    \            fi\n        fi\n        result=$(( $(echo \"${tmp}\" | cut -c1) <\
    \ $(echo \"${tmp}\" | cut -c2) ))\n    done\n    if [[ -n $result ]]; then\n \
    \       return 1\n    fi\n    return 0\n}\n\ncandidate() {\n    monotonic \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj7bmzooo.sh: line 31: <  : syntax error: operand expected (error
    token is "<  ")\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local elements prev next\
    \ prev2 next2\n    local -i i j\n    local increasing decreasing\n    elements=(\"\
    ${@// / }\")\n    prev=${elements[0]}\n    increasing=true\n    prev2=$(expr \"\
    $prev\" : '-\\(.*\\)')\n    for (( j=3; j < \"${#elements[@]}\"; j=j+2)); do\n\
    \        next=${elements[$j]}\n        next2=$(expr \"$next\" : '-\\(.*\\)')\n\
    \        if [[ \"$next\" -gt \"$prev\" ]]; then\n            increasing=false\n\
    \        elif [[ \"$next\" -eq \"$prev\" ]]; then\n            if [[ \"$prev2\"\
    \ -gt \"$next2\" ]]; then\n                increasing=false\n            fi\n\
    \        fi\n        prev=$next\n        prev2=$next2\n    done\n    echo \"$increasing\"\
    \n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local -n l=$1\n  local -a\
    \ sorted=($l)\n  local -a tail\n\n  IFS=\" \" read -r -a tail <<< \"${sorted[@]:1}\"\
    \n  tail+=($tail[0])\n\n  # sort and store in tail\n  sorted=($(sort -n \"${sorted[@]}\"\
    )); tail=($(sort -n \"${tail[@]}\")); unset sorted\n\n  # do we have a sorted\
    \ or unsorted list?\n  [[ \"${sorted+${tail[@]}\" != \"${sorted[@]}\" ]] || [[\
    \ $tail ]]\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9t_1_ste.sh: line 39: unexpected EOF while looking for matching
    `"\''\n/tmp/tmp9t_1_ste.sh: line 43: unexpected token `\xff\'' in conditional
    command\n/tmp/tmp9t_1_ste.sh: line 43: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local prefix=$2 prefix1=$2\
    \ prefix2=$2 cur=${1:-0}\n    local result=true\n\n    IFS=$'\\n' read -r -a list\
    \ <<<\"$1\"\n    for element in \"${list[@]}\"; do\n      if [[ -z \"$cur\" ]];\
    \ then\n        cur=$element\n      else\n        case \"$element\" in\n     \
    \     \"$cur\"*)\n            if [ \"$cur\" -gt \"$element\" ]; then\n       \
    \       result=false\n            fi\n          ;;\n          *)\n           \
    \ if [ \"$cur\" -lt \"$element\" ]; then\n              result=false\n       \
    \     fi\n          ;;\n        esac\n      fi\n    done\n    if [[ $result -eq\
    \ false ]]; then\n      prefix2=$prefix\n      if [[ $prefix -eq 0 ]]; then\n\
    \        prefix1=$(expr \"$cur\" : '.*')\n      else\n        prefix1=$(expr \"\
    $cur\" : '\\(.\\)')\n      fi\n      echo \"$prefix2 $prefix1\"\n    fi\n}\n\n\
    candidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpj3pla6qz.sh: line 22: [: 1 2 4 10: integer expression expected\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local sorted=( \"$@\" )\n\
    \    local i j k m=0\n    local _\n    _=( ${sorted[*]} )\n    for ((i=0; i<${#_[*]};\
    \ i++)) do\n        j=${i}\n        k=${i}\n        while ((j<${#_[*]}) && (_[j]<_[k]))\
    \ do\n            j=$((j+1))\n            k=$((k+1))\n        done\n        ((m=k))\n\
    \        if ((j==${#_[*]}) && (_[j]>_[k])) then\n            ((m=j))\n       \
    \ fi\n        if ((k==${#_[*]}) && (_[k]>_[m])) then\n            ((k=j))\n  \
    \      fi\n        if ((m>j)) then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    done\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpiibmk_q7.sh: line 30: syntax error near unexpected token `then''\n/tmp/tmpiibmk_q7.sh:
    line 30: `        if ((m>j)) then''\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal sortedlist=$(sort --field-separator='\
    \ ' -n \"$1\")\n\t# Return true if the list elements are monotonically increasing\
    \ or\n\t# decreasing.\n\t[[ ${sortedlist[0]} > ${sortedlist[${#sortedlist[@]}\
    \ - 1]} ]] &&\n\t\treturn 1 || return 0\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"sort: cannot read: ''1 2 4 10'': No such file or directory\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local -r lines=$1;\n   \
    \ local -r linecount=$#;\n    local -r sort=${3:-ascending};\n\n    if [ $linecount\
    \ -eq 0 ]; then\n        return 0\n    fi\n    local prev=$lines[0] || return\
    \ 0;\n    local curr;\n    local inc=1;\n    local dec=1;\n    local x=\"x${prev}\"\
    ;\n    local i;\n\n    if [ -z \"$lines\" ]; then\n        echo \"$0: empty list\"\
    \ >&2;\n        return 1\n    fi\n\n    echo \"$0: checking lines $lines\"\n \
    \   echo \"$0: sort: $sort\"\n    echo \"$0: prev=$prev\"\n\n    for ((i=0; i\
    \ < ${#lines[@]}; i++)); do\n        curr=${lines[i]}\n        if [ \"-$sort\"\
    \ == \"-descending\" ]; then\n            if [ \"$prev\" == \"$curr\" ]; then\n\
    \                echo \"$0: element $i is already monotonic\" >&2;\n         \
    \       return 1;\n            fi\n            inc=0;\n            dec=1;\n  \
    \          x=$curr;\n        elif [ \"-$sort\" == \"-ascending\" ]; then\n   \
    \         if [ \"$prev\" == \"$curr\" ]; then\n                echo \"$0: element\
    \ $i is already monotonic\" >&2;\n                return 1;\n            fi\n\
    \            dec=0;\n            inc=1;\n            x=$curr;\n        else\n\
    \            echo \"$0: unknown sort type $sort\" >&2;\n            return 1;\n\
    \        fi\n        prev=$curr;\n        if [ -z \"$prev\" ]; then\n        \
    \    continue\n        fi\n        if [ $inc -eq 1 ] && [ $dec -eq 1 ]; then #\
    \ all increasing\n            echo \"$0: $x is monotonic, all increasing\" >&2;\n\
    \            echo \"$0: $x is $sort\" >&2;\n            echo \"$0: $x\" >&2;\n\
    \            return 0\n        elif [ $inc -eq 0 ] && [ $dec -eq 0 ]; then # all\
    \ decreasing\n            echo \"$0: $x is monotonic, all decreasing\" >&2;\n\
    \            echo \"$0: $x is $sort\" >&2;\n            echo \"$0: $x\" >&2;\n\
    \            return 0\n        elif [ $inc -eq 1 ]; then # increasing\n      \
    \      echo \"$0: $x is monotonic, increasing up to $curr from $prev\" >&2;\n\
    \            echo \"$0: $x is $sort\" >&2;\n            echo \"$0: $x\" >&2;\n\
    \            return 0\n        elif [ $dec -eq\n}\n\ncandidate() {\n    monotonic\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20\
    \ 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate\
    \ \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmphq78tepn.sh: line 77: syntax error near unexpected token `}''\n/tmp/tmphq78tepn.sh:
    line 77: `}''\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local elements=$1\n\n  \
    \  local i\n\n    for ((i=0; i < ${#elements}; i++)); do\n        if ((${elements[$i]}\
    \ < ${elements[$(($i-1))]})); then\n            return 0\n        elif ((${elements[$i]}\
    \ > ${elements[$(($i-1))]})); then\n            return 1\n        fi\n    done\n\
    \    return 2\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4kh0nlu9.sh: line 17: elements: bad array subscript\n/tmp/tmp4kh0nlu9.sh:
    line 17: ((: 1 2 4 10 < : syntax error in expression (error token is "2 4 10 <
    ")\n/tmp/tmp4kh0nlu9.sh: line 19: elements: bad array subscript\n/tmp/tmp4kh0nlu9.sh:
    line 19: ((: 1 2 4 10 > : syntax error in expression (error token is "2 4 10 >
    ")\n/tmp/tmp4kh0nlu9.sh: line 17: ((: < 1 2 4 10: syntax error: operand expected
    (error token is "< 1 2 4 10")\n/tmp/tmp4kh0nlu9.sh: line 19: ((: > 1 2 4 10: syntax
    error: operand expected (error token is "> 1 2 4 10")\n/tmp/tmp4kh0nlu9.sh: line
    17: ((: < : syntax error: operand expected (error token is "< ")\n/tmp/tmp4kh0nlu9.sh:
    line 19: ((: > : syntax error: operand expected (error token is "> ")\n/tmp/tmp4kh0nlu9.sh:
    line 17: ((: < : syntax error: operand expected (error token is "< ")\n/tmp/tmp4kh0nlu9.sh:
    line 19: ((: > : syntax error: operand expected (error token is "> ")\n/tmp/tmp4kh0nlu9.sh:
    line 17: ((: < : syntax error: operand expected (error token is "< ")\n/tmp/tmp4kh0nlu9.sh:
    line 19: ((: > : syntax error: operand expected (error token is "> ")\n/tmp/tmp4kh0nlu9.sh:
    line 17: ((: < : syntax error: operand expected (error token is "< ")\n/tmp/tmp4kh0nlu9.sh:
    line 19: ((: > : syntax error: operand expected (error token is "> ")\n/tmp/tmp4kh0nlu9.sh:
    line 17: ((: < : syntax error: operand expected (error token is "< ")\n/tmp/tmp4kh0nlu9.sh:
    line 19: ((: > : syntax error: operand expected (error token is "> ")\n/tmp/tmp4kh0nlu9.sh:
    line 17: ((: < : syntax error: operand expected (error token is "< ")\n/tmp/tmp4kh0nlu9.sh:
    line 19: ((: > : syntax error: operand expected (error token is "> ")\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  # The algorithm used is O(N*log(N))\n\
    \  local tmp=${1#*}\n  local tmp1=${tmp%% *}\n  local tmp2=${tmp##* }\n  local\
    \ list=\"${tmp1}\"\n  shift\n\n  for element in $@; do\n    local tmp_elem=${element#*}\n\
    \    local tmp_elem1=${tmp_elem%% *}\n    local tmp_elem2=${tmp_elem##* }\n  \
    \  if [ \"$(printf %s \"$list\" | sort -n | uniq -d)\" = \"$tmp_elem\" ]; then\n\
    \      list=$tmp_elem$list\n    fi\n    list=$tmp_elem2$list\n  done\n\n  if [\
    \ \"$(printf %s \"$list\" | sort -n)\" = \"$tmp2\" ]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    monotonic \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n\tlocal list_var=\"$1\"\n\t\
    # echo \"list_var='$list_var'\"\n\tlocal sorted_var=$(echo \"$list_var\" | sort)\n\
    \tlocal max_diff=\n\tlocal max_index=\n\tlocal cur_index=0\n\tlocal diff=\n\t\
    # echo \"sorted_var='$sorted_var'\"\n\tfor index in $(seq 1 \"${#sorted_var}\"\
    ); do\n\t\tdiff=${sorted_var[$((index-1))]}\\>${sorted_var[$index]}\n\t\t# echo\
    \ \"diff='$diff'\"\n\t\tlet \"diff=diff+1\"\n\t\t# echo \"diff='$diff'\"\n\t\t\
    if [[ \"${diff}\" -gt \"$max_diff\" ]] \\\n\t\t\t&& [[ \"$max_index\" -ne \"$index\"\
    \ ]]; then\n\t\t\t# echo \"max_diff='$max_diff'\"\n\t\t\t# echo \"max_index='$max_index'\"\
    \n\t\t\tmax_diff=$diff\n\t\t\tmax_index=$index\n\t\tfi\n\tdone\n\t# echo \"max_diff='$max_diff'\"\
    \n\t# echo \"max_index='$max_index'\"\n\t[[ \"$max_index\" -eq \"${#sorted_var}\"\
    \ ]] && return 0\n\techo \"${list_var}\"\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmdqg69qx.sh: line 23: let: 1 2 4 10>: syntax error in expression
    (error token is "2 4 10>")\n/tmp/tmpmdqg69qx.sh: line 25: [[: 1 2 4 10>: syntax
    error in expression (error token is "2 4 10>")\n/tmp/tmpmdqg69qx.sh: line 23:
    let: >: syntax error: operand expected (error token is ">")\n/tmp/tmpmdqg69qx.sh:
    line 25: [[: >: syntax error: operand expected (error token is ">")\n/tmp/tmpmdqg69qx.sh:
    line 23: let: >: syntax error: operand expected (error token is ">")\n/tmp/tmpmdqg69qx.sh:
    line 25: [[: >: syntax error: operand expected (error token is ">")\n/tmp/tmpmdqg69qx.sh:
    line 23: let: >: syntax error: operand expected (error token is ">")\n/tmp/tmpmdqg69qx.sh:
    line 25: [[: >: syntax error: operand expected (error token is ">")\n/tmp/tmpmdqg69qx.sh:
    line 23: let: >: syntax error: operand expected (error token is ">")\n/tmp/tmpmdqg69qx.sh:
    line 25: [[: >: syntax error: operand expected (error token is ">")\n/tmp/tmpmdqg69qx.sh:
    line 23: let: >: syntax error: operand expected (error token is ">")\n/tmp/tmpmdqg69qx.sh:
    line 25: [[: >: syntax error: operand expected (error token is ">")\n/tmp/tmpmdqg69qx.sh:
    line 23: let: >: syntax error: operand expected (error token is ">")\n/tmp/tmpmdqg69qx.sh:
    line 25: [[: >: syntax error: operand expected (error token is ">")\n/tmp/tmpmdqg69qx.sh:
    line 23: let: >: syntax error: operand expected (error token is ">")\n/tmp/tmpmdqg69qx.sh:
    line 25: [[: >: syntax error: operand expected (error token is ">")\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local LAST_NON-POSITIVE\n\
    \  local LAST_NON-NEGATIVE\n  local LAST_NEGATIVE\n  local LAST_NON_POSITIVE_OR_NEGATIVE\n\
    \  local N\n  local -a ELEMS\n  local ELEM_1\n  local ELEM_2\n  local ELEM_3\n\
    \  local ELEM_4\n  local ELEM_5\n  local ELEM_6\n  local ELEM_7\n  local ELEM_8\n\
    \  local ELEM_9\n  local ELEM_10\n  local ELEM_11\n  local ELEM_12\n  local ELEM_13\n\
    \  local ELEM_14\n  local ELEM_15\n  local ELEM_16\n  local ELEM_17\n  local ELEM_18\n\
    \  local ELEM_19\n  local ELEM_20\n  local ELEM_21\n  local ELEM_22\n  local ELEM_23\n\
    \  local ELEM_24\n  local ELEM_25\n  local ELEM_26\n  local ELEM_27\n  local ELEM_28\n\
    \  local ELEM_29\n  local ELEM_30\n  local ELEM_31\n  local ELEM_32\n  local ELEM_33\n\
    \  local ELEM_34\n  local ELEM_35\n  local ELEM_36\n  local ELEM_37\n  local ELEM_38\n\
    \  local ELEM_39\n  local ELEM_40\n  local ELEM_41\n  local ELEM_42\n  local ELEM_43\n\
    \  local ELEM_44\n  local ELEM_45\n  local ELEM_46\n  local ELEM_47\n  local ELEM_48\n\
    \  local ELEM_49\n  local ELEM_50\n  local ELEM_51\n  local ELEM_52\n  local ELEM_53\n\
    \  local ELEM_54\n  local ELEM_55\n  local ELEM_56\n  local ELEM_57\n  local ELEM_58\n\
    \  local ELEM_59\n  local ELEM_60\n  local ELEM_61\n  local ELEM_62\n  local ELEM_63\n\
    \  local ELEM_64\n  local ELEM_65\n  local ELEM_66\n  local ELEM_67\n  local ELEM_68\n\
    \  local ELEM_69\n  local ELEM_70\n  local ELEM_71\n  local ELEM_72\n  local ELEM_73\n\
    \  local ELEM_74\n  local ELEM_75\n  local ELEM_76\n  local ELEM_\n}\n\ncandidate()\
    \ {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\
    \ 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"\
    true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpzpzagvt1.sh: line 12: local: `LAST_NON-POSITIVE'': not a valid
    identifier\n/tmp/tmpzpzagvt1.sh: line 13: local: `LAST_NON-NEGATIVE'': not a valid
    identifier\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local IFS=$1\n  local l\n\
    \  l=$2\n\n  local i\n  for ((i=${#l}-1; i>0; i--)); do\n    [[ ${l[i]} -gt ${l[i-1]}\
    \ ]] &&\n      return 0\n    [[ ${l[i]} -lt ${l[i-1]} ]] &&\n      return 1\n\
    \  done\n  return 1\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2\
    \ 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n  \
    \  [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 2
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local list=\"$1\"\n  local\
    \ nmax=$(expr ${#list} + 1)\n  local sorted\n  local i\n  local n\n  local prev=\"\
    +\"\n  local c\n  local d\n\n  for n in $(seq 1 ${nmax}); do\n    sorted=$(IFS=,;\
    \ echo \"${list}\"|sort -n)\n    i=$((${n} - 1))\n    if [ ${sorted:i:1} == \"\
    +\" ]; then prev=\"-\"; else prev=\"+\"; fi\n    if [ -z \"$prev\" ] || [ \"${sorted[i\
    \ - 1]:i:1}\" == \"+\" ]; then prev=\"-\"; else prev=\"+\"; fi\n    if [ \"${sorted[n]:i:1}\"\
    \ == \"+\" ]; then prev=\"-\"; else prev=\"+\"; fi\n    if [ \"${sorted[n]:i:1}\"\
    \ == \"-\" ]; then prev=\"+\"; else prev=\"-\"; fi\n\n    if [ \"${prev:0:1}\"\
    \ == \"-\" ]; then\n      c=-1\n      d=$(expr ${sorted[n]:i:1} + 1)\n    else\n\
    \      c=1\n      d=$(expr ${sorted[n]:i:1} - 1)\n    fi\n    if [ \"${d:0:1}\"\
    \ == \"-\" ]; then\n      d=$(expr ${d} + 1)\n    fi\n    if [ \"${prev:0:1}\"\
    \ == \"+\" ]; then\n      d=$((-${d}))\n    fi\n    if [ \"${sorted[n]:i:1}\"\
    \ == \"+\" ] || [ \"${sorted[n]:i:1}\" == \"-\" ]; then\n      if [ \"${prev:0:1}\"\
    \ == \"+\" ]; then\n        d=$((-${d}))\n      fi\n    fi\n\n    if [ \"${sorted[n]:i:1}\"\
    \ == \"+\" ] || [ \"${sorted[n]:i:1}\" == \"-\" ]; then\n      if [ \"${prev:0:1}\"\
    \ == \"+\" ]; then\n        c=$((-${c}))\n      fi\n    fi\n\n    if [ -n \"$prev\"\
    \ ] && [ \"${sorted[n]:i:1}\" == \"-\" ]; then\n      c=$((-${c}))\n    fi\n\n\
    \    if [ \"${sorted[n]:i:1}\" == \"+\" ] || [ \"${sorted[n]:i:1}\" == \"-\" ];\
    \ then\n      if [ \"${prev:0:1}\" == \"+\" ]; then\n        c=$((-${c}))\n  \
    \    fi\n    fi\n\n    if [ -n \"$prev\" ] && [ \"${sorted[n]:i:1}\" == \"+\"\
    \ ] || [ \"${sorted[n]:i:1}\" == \"-\" ]; then\n      d=$((-${d}))\n    fi\n\n\
    \    if [ -n \"$prev\" ] && [ \"${sorted\n}\n\ncandidate() {\n    monotonic \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk07b714c.sh: line 84: unexpected EOF while looking for matching
    `"\''\n/tmp/tmpk07b714c.sh: line 88: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local elements=$1\n  local\
    \ last_index=0\n\n  local -n result=\n  result=${elements[0]}\n\n  for element\
    \ in \"${elements[@]:1}\"\n  do\n    local elem\n    elem=${element}\n    local\
    \ -n elem_index=$result\n    if [ \"$elem_index\" -lt \"$last_index\" ]\n    then\n\
    \      result=$elem_index\n    fi\n    last_index=$elem_index\n  done\n\n  printf\
    \ '%s\\n' \"${result}\"\n}\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n\
    \    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpb6mzsay2.sh: line 15: local: `'': not a valid identifier\n/tmp/tmpb6mzsay2.sh:
    line 22: local: `1 2 4 10'': invalid variable name for name reference\n/tmp/tmpb6mzsay2.sh:
    line 23: [: : integer expression expected\n"'
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local elements=( \"$@\" )\n\
    \  local min_diff=${#elements[@]}\n  local i j k min_element max_element\n  local\
    \ increment=\" \"\n  local decrement=\" \"\n  local sorted=( $(printf '%s\\n'\
    \ \"${elements[@]}\") )\n\n  local previous_min_element=\"unsorted\"\n  local\
    \ previous_max_element=\"unsorted\"\n  local previous_increment=\"unsorted\"\n\
    \  local previous_decrement=\"unsorted\"\n  for (( i=0; i < ${#elements[@]}; i++\
    \ )); do\n    local current_element=${sorted[$i]}\n\n    # Do we have any existing\
    \ min?\n    if (( j=index \"$min_element $current_element\" \"$min_diff\" )) ;\
    \ then\n      # Current element is smaller than existing min\n      if [[ ${elements[$i]}\
    \ -gt ${elements[$j]} ]]; then\n        # Increment existing min and save max\
    \ element\n        increment=${elements[$i]}\n        min_element=${elements[$j]}\n\
    \        max_element=${elements[$i]}\n      fi\n    fi\n    # Do we have any existing\
    \ max?\n    if (( k=index \"$max_element $current_element\" \"$min_diff\" )) ;\
    \ then\n      # Current element is larger than existing max\n      if [[ ${elements[$i]}\
    \ -lt ${elements[$k]} ]]; then\n        # Decrement existing max and save min\
    \ element\n        decrement=${elements[$i]}\n        min_element=${elements[$k]}\n\
    \        max_element=${elements[$i]}\n      fi\n    fi\n    # Do we have a min\
    \ and max?\n    if (( min_element && max_element )) ; then\n      # Current element\
    \ is between existing min and existing max\n      if (( $(echo \"${current_element}\
    \ < ${min_element} || ${current_element} > ${max_element}\" | bc) )) ; then\n\
    \        # No change in current element\n        continue\n      else\n      \
    \  # Current element is between two existing elements\n        if [[ $min_element\
    \ -gt \"$current_element\" ]]; then\n          # Increment existing min and save\
    \ max element\n          increment=${elements[$i]}\n          min_element=${elements[$j]}\n\
    \          max_element=${elements[$i]}\n        elif [[ $max_element -lt \"$current_element\"\
    \ ]]; then\n          # Decrement existing max and save min element\n        \
    \  decrement=${elements[$i]}\n          min_element=${elements[$k]}\n        \
    \  max_element=${elements[$i]}\n        fi\n      fi\n    fi\n  done\n\n\n}\n\n\
    candidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1eemyxmx.sh: line 27: ((: j=index  1 1 : syntax error in expression
    (error token is "1 1 ")\n/tmp/tmp1eemyxmx.sh: line 37: ((: k=index  1 1 : syntax
    error in expression (error token is "1 1 ")\n'''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n  local sorted=($(sort -rV <(printf\
    \ \"%s\\n\" \"$1\")))\n  local last=${sorted[0]}\n  local first=${sorted[1]}\n\
    \  [[ $first -lt $last ]] || return 1\n  [[ $last -gt $first ]] || return 0\n\
    }\n\ncandidate() {\n    monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 4 10\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 20 4 10\") = \"false\" ]]\n    [[ $(candidate \"4 1 0\
    \ -10\") = \"true\" ]]\n    [[ $(candidate \"4 1 1 0\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2 3 2 5 60\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\
    \ 60\") = \"true\" ]]\n    [[ $(candidate \"9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078882
- exit_code: 1
  program: "#!/bin/bash\n# Return true is list elements are monotonically increasing\
    \ or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic\
    \ \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n\
    #\n# $1 is a space-separated list\nmonotonic() {\n    local i\n    for ((i=1;\
    \ i<=$#; i++)); do\n        local -n arrayname=$1\n        local elements=(\"\
    ${!arrayname[@]}\")\n        local last_element=$(\n            sort --field-separator=\"\
    \ \" -t \" \" \"$elements\" | head -1)\n        [ -n \"$last_element\" ]\n   \
    \     local last_element_lt=false\n        for element in \"${elements[@]}\";\
    \ do\n            if [ \"$element\" < \"$last_element\" ]; then\n            \
    \    last_element_lt=true\n                break\n            fi\n        done\n\
    \        if [ \"$last_element_lt\" = \"false\" ]; then\n            return 1\n\
    \        fi\n    done\n    return 0\n}\n\ncandidate() {\n    monotonic \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 10\") = \"true\" ]]\n  \
    \  [[ $(candidate \"1 2 4 20\") = \"true\" ]]\n    [[ $(candidate \"1 20 4 10\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4 1 0 -10\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4 1 1 0\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 2 5 60\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 60\") = \"true\" ]]\n    [[ $(candidate \"\
    9 9 9 9\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp6axwurhn.sh: line 14: local: `1 2 4 10'': invalid variable name
    for name reference\nsort: cannot read: '''': No such file or directory\n"'
  stdout: b''
  timestamp: 1660078882
