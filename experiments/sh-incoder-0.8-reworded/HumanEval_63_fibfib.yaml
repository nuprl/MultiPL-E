name: HumanEval_63_fibfib
language: sh
prompt: "#!/bin/bash\n# The FibFib number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2)\
  \ == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write\
  \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
  # >>> $(fibfib \"1\")\n# \"0\"\n# >>> $(fibfib \"5\")\n# \"4\"\n# >>> $(fibfib \"\
  8\")\n# \"24\"\n#\n# $1 is an integer\nfibfib() {\n"
tests: "}\n\ncandidate() {\n    fibfib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"2\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"\
  5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"24\" ]]\n    [[ $(candidate \"10\"\
  ) = \"81\" ]]\n    [[ $(candidate \"12\") = \"274\" ]]\n    [[ $(candidate \"14\"\
  ) = \"927\" ]]\n}\n\nrun_test"
completions: ["\tlocal n=$1\n\tlocal fib=$(( $(n-2) ))\n\tlocal fibfib=$(( $fib +\
    \ $fibfib + $fib ))\n\techo \"$fibfib\"", "    let fib=$1\n    [ $fib -lt 3 ]\
    \ || return $fibfib\n    let fib1=$fibfib\n    let fib2=$fibfib+1\n    let fib3=$fibfib+2\n\
    \    [ $fib -eq 0 ] || return $fibfib\n    [ $fib -eq 1 ] || return $fibfib\n\
    \    [ $fib -eq 2 ] || return $fibfib\n    [ $fib -gt 3 ] || return $fibfib+$fibfib+$fibfib",
  "\t# Initialize our fibfib var\n\tlocal fibfib=$(( $1 + ( $2 * 2 ) + ( $3 * 3 )\
    \ ))\n\t# Return the fibfib\n\techo $fibfib", "  if [ $# -ne 1 ]; then\n    echo\
    \ \"Usage: fibfib (integer)\"\n  else\n    \n    local fibfib=$(( $(( $1 * $1\
    \ )) ))\n    echo $fibfib\n  fi", "  local i\n  local fibfibArray=( $(seq 0 $1\
    \ ) )\n  local fibfibArrayLength=${#fibfibArray[@]}\n  for i in $(seq 1 $fibfibArrayLength);\
    \ do\n    local fibfibArrayTempLength=${#fibfibArray[@]}\n    local fibfibArrayTemp=$(\
    \ printf \"%02d\" ${fibfibArray[@]} )  # Convert to a string\n    fibfibArrayTempLength=${#fibfibArrayTemp[@]}\n\
    \    local fibfibArrayTemp2=$( echo \"$fibfibArrayTemp\"$(echo \"$fibfibArrayTemp\"\
    \ | bc))  # Convert to a number\n    fibfibArrayTemp2=${fibfibArrayTemp2}$(echo\
    \ \"$fibfibArrayTemp2\" | bc) # Convert to a number\n    fibfibArrayTempLength=${#fibfibArrayTemp2}\n\
    \    fibfibArrayTemp=$( echo \"$fibfibArrayTemp\"$(echo \"$fibfibArrayTemp\" |\
    \ bc -l)) # Convert to a string\n    fibfibArrayTempLength=${#fibfibArrayTemp}\n\
    \    fibfibArrayTemp2=$( echo \"$fibfibArrayTemp\"$(echo \"$fibfibArrayTemp\"\
    \ | bc -l)) # Convert to a number\n    fibfibArrayTemp2=${fibfibArrayTemp2}$(echo\
    \ \"$fibfibArrayTemp2\" | bc) # Convert to a number\n    fibfibArrayTempLength=${#fibfibArrayTemp2}\n\
    \    fibfibArrayTemp=$( echo \"$fibfibArrayTemp\"$(echo \"$fibfibArrayTemp\" |\
    \ bc -l)) # Convert to a string\n    fibfibArrayTempLength=${#fibfibArrayTemp}\n\
    \    fibfibArrayTemp2=$( echo \"$fibfibArrayTemp\"$(echo \"$fibfibArrayTemp\"\
    \ | bc -l)) # Convert to a number\n    fibfibArrayTemp2=${fibfibArrayTemp2}$(echo\
    \ \"$fibfibArrayTemp2\" | bc) # Convert to a number\n    fibfibArrayTempLength=${#fibfibArrayTemp2}\n\
    \    fibfibArrayTemp=$( echo \"$fibfibArrayTemp\"$(echo \"$fibfibArrayTemp\" |\
    \ bc -l)) # Convert to a string\n    fibfibArrayTempLength=${#fibfibArrayTemp}\n\
    \    fibfibArrayTemp2=$( echo \"$fibfibArrayTemp\"$(echo \"$fibfibArrayTemp\"\
    \ | bc -l)) # Convert to a number\n    fibfibArrayTemp2=${fibfibArrayTemp2}$(echo\
    \ \"$fibfibArrayTemp2\" | bc", "    local n fibfib \"$1\"\n\n    fibfib=$((fibfib\
    \ + fibfib + fibfib))", '    # Fill in your code here', '  echo $(($1*$(($1+1)*$(($1+2)))))
    | bc -l', "  local n=$1\n  local fibfib\n  fibfib=$((\n    local fibfib\n    fibfib=0\n\
    \    local i\n    for i in {0..($(n))}; do\n      local fibfib\n      fibfib=$((\n\
    \        fibfib=$((fibfib + $(fibfib+1))))\n      ))\n    done\n    echo ${fibfib}\n\
    \  ))\n  echo $fibfib", "\tlocal n i\n\tn=$1\n\tfor i in $(seq 0 $n-1); do\n\t\
    \techo $(( ${i} * ${i} + ${i} - 2 ))\n\tdone", "    let n=$(echo \"$1\"|bc)\n\
    \    if [ $n -eq 1 ]\n    then\n        echo 0\n    elif [ $n -eq 2 ]\n    then\n\
    \        echo 0\n    elif [ $n -eq 3 ]\n    then\n        echo 1\n    else\n \
    \       fibfib \"$(( n - 1 ))\" + \"$(( n - 2 ))\" + \"$(( n - 3 ))\"\n    fi",
  "\tif (( \"$#\" -ne 1 )); then\n\t\tprintf \"error: fibfib takes exactly 1 argument\\\
    n\"\n\t\texit 1\n\tfi\n\tlocal n=\"$1\"\n\tlocal fibnum\n\tlocal i\n\tlocal fib\n\
    \tfibnum=$(echo $(( $(( $(( $n - 2 )) )) )) | bc)\n\tif (( $fibnum == 0 ));then\n\
    \t\techo \"0\"\n\telif (( $fibnum == 1 ));then\n\t\techo \"0\"\n\telse\n\t\tfib\
    \ =$(( $fibnum + $fibnum + $fibnum ))\n\t\twhile (( fib > 1 ));do\n\t\t\ti=\"\
    $(( $i + 1 ))\"\n\t\t\tfib=$(( $fib - $(( $fib + $(( $fibnum - $i )) )) ))\n\t\
    \t\tfibnum=$(( $fibnum - $i ))\n\t\tdone\n\t\techo $fib\n\tfi", "  local a b\n\
    \  a=$1\n  b=4\n  while [ \"$b\" -lt \"$a\" ] ; do\n    b=$((b+b))\n  done\n \
    \ echo $b", "  local n=$1\n  [ $n -lt 0 -o $n -gt 3 ] || return 1\n  local fibfib=0\n\
    \  [ $n == 0 ] || return 0\n  [ $n == 1 ] || return 1\n  [ $n == 2 ] || return\
    \ 2\n  [ $n == 3 ] || return 1\n  fibfib=`echo \"$fibfib + $fibfib + $fibfib +\
    \ $fibfib\" |bc`\n  return $fibfib", "  # Your code here\n  (( ${#1} > 2 )) &&\
    \ { echo \"Error: fibfib is not defined for $1, fibfib requires at least two integers\"\
    \ >&2 ; exit 1 ; }\n  local i\n  (( ${#1} > 0 )) == 0 && { echo \"Error: fibfib\
    \ is not defined for $1, fibfib requires at least one integer\" >&2 ; exit 1 ;\
    \ }\n\n  local fibfib\n\n  fibfib=$( seq 1 $1 )\n  fibfib=$( echo $fibfib | sed\
    \ 's/^/0 /' )\n  fibfib=$( echo $fibfib | sed 's/$/0 /' )\n  fibfib=$( echo $fibfib\
    \ | sed 's/0 /1 /' )\n  fibfib=$( echo $fibfib | sed 's/1 /2 /' )\n  fibfib=$(\
    \ echo $fibfib | sed 's/2 /3 /' )\n  fibfib=$( echo $fibfib | sed 's/3 /4 /' )\n\
    \  fibfib=$( echo $fibfib | sed 's/4 /5 /' )\n  fibfib=$( echo $fibfib | sed 's/5\
    \ /6 /' )\n  fibfib=$( echo $fibfib | sed 's/6 /7 /' )\n  fibfib=$( echo $fibfib\
    \ | sed 's/7 /8 /' )\n  fibfib=$( echo $fibfib | sed 's/8 /9 /' )\n  fibfib=$(\
    \ echo $fibfib | sed 's/9 /0 /' )\n  echo $fibfib", "    local n=$1\n    if [\
    \ $n -eq 0 ]; then\n        echo \"0\"\n    elif [ $n -eq 1 ]; then\n        echo\
    \ \"0\"\n    elif [ $n -eq 2 ]; then\n        echo \"1\"\n    else\n        echo\
    \ \"$($(n-2)) $($(n-1)) $(n)\"\n    fi", "  local fibfib \"$1\"\n  fib =\n  while\
    \ [ \"$fibfib\" -gt 0 ]; do\n    fibfib=\"$((fibfib + fibfib))\"\n  done\n  echo\
    \ $fibfib", "  if (( ${1:?} >= 1 )); then\n  echo $((${1:?}-1+${1:?}-2+${1:?}-3))\n\
    \  else\n  echo \"-1\"\n  fi", "  local n=$1\n  if [ $n -lt 0 ]; then\n    echo\
    \ \"fibfib: Input number must be non-negative\"\n    return\n  fi\n  if [ $n =\
    \ 0 ]; then\n    echo 0\n  elif [ $n = 1 ]; then\n    echo 0\n  elif [ $n = 2\
    \ ]; then\n    echo 1\n  else\n    echo $(fibfib \"$((n-1))\"+$(fibfib \"$((n-2))\"\
    +$(fibfib \"$((n-3))\")))\n  fi", "  local n=$1\n  if [[ -z \"$n\" ]]; then\n\
    \    echo \"Please provide an integer for fibfib()\" >&2\n    return 1\n  fi\n\
    \  local x\n  x=$(echo \"$((n-1))\" |bc)\n  x=\"$((x+x))\"\n  x=$((x-1))\n  x=$((x+x))\n\
    \  echo \"$x\"", "    local n=$1 niter fibfib\n    # Initialize fibfib\n    fibfib=0\n\
    \    # Initialize niter\n    niter=1\n    while [ $fibfib -le $n ]; do\n     \
    \   fibfib=$((fibfib+niter))\n        niter=$((niter+1))\n    done\n    # Return\
    \ fibfib\n    echo \"$fibfib\"", "    # Write your code here\n    echo $(( $1\
    \ ))", "\t# Check that the passed number is between 0 and 20\n\t[ -z \"$1\" ]\
    \ && echo \"invalid fib argument\" && return 1\n\n\t# The fib number is computed\n\
    \tlet \"fibfib$1 = $1 + $2 - $3 + $4\"\n\n\t# Check for out-of-bounds values and\
    \ return an error\n\t[ -z \"$fibfib$1\" ] && echo \"fibfib$1 out of bounds\" &&\
    \ return 1\n\t[ -z \"$fibfib$2\" ] && echo \"fibfib$2 out of bounds\" && return\
    \ 1\n\n\t# Return the result\n\techo \"$fibfib$1\"", "  local n=$1\n  if [ $n\
    \ -eq 0 ] ; then return 0\n  elif [ $n -eq 1 ] ; then return 0\n  elif [ $n -eq\
    \ 2 ] ; then return 1\n  elif [ $n -le 6 ] ; then return $(fibfib \"${n-1} ${n-2}\
    \ ${n-3}\")\n  else echo \"fibfib: cannot compute fibfib($1)\"\n  return 1\n \
    \ fi", "  local n result\n\n  (( n = $1 ))\n  result=0\n  while [ $n -gt 0 ];\
    \ do\n    result=$(( $result+1 ))\n    (( n = $n-1 ))\n  done\n  printf '%d' $result",
  "  if [ \"$1\" = \"0\" ]\n  then\n    echo \"0\"\n  elif [ \"$1\" = \"1\" ]\n  then\n\
    \    echo \"0\"\n  elif [ \"$1\" = \"2\" ]\n  then\n    echo \"1\"\n  elif [ \"\
    $1\" = \"$1\" ]\n  then\n    echo \"$1\"\n  else\n    fibfib \"$(($1 - 2))\" +\
    \ \"$(($1 - 1))\" + \"$(($1-1))\"\n  fi", "        local n=$1\n        local fibfib=$((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $((", "  local n=$1 i\n  local fibfib=0\n  for i in $(seq 1 $n); do\n\
    \    fibfib=$((fibfib + i))\n  done\n  echo $fibfib", "    if [ \"$1\" = \"0\"\
    \ ]; then\n        echo 0\n    elif [ \"$1\" = \"1\" ]; then\n        echo 0\n\
    \    elif [ \"$1\" = \"2\" ]; then\n        echo 1\n    elif [ \"$1\" = \"$(($1\
    \ - 1))\" ]; then\n        echo `expr $1 + $(( $2 - 1 ))`\n    elif [ \"$1\" =\
    \ \"$(($1 - 2))\" ]; then\n        echo `expr $1 + $(( $3 - 1 ))`\n    elif [\
    \ \"$1\" = \"$(($1 - 3))\" ]; then\n        echo `expr $1 + $(( $4 - 1 ))`\n \
    \   elif [ \"$1\" = \"$(($1 - 4))\" ]; then\n        echo `expr $1 + $(( $5 -\
    \ 1 ))`\n    elif [ \"$1\" = \"$(($1 - 5))\" ]; then\n        echo `expr $1 +\
    \ $(( $6 - 1 ))`\n    elif [ \"$1\" = \"$(($1 - 6))\" ]; then\n        echo `expr\
    \ $1 + $(( $7 - 1 ))`\n    elif [ \"$1\" = \"$(($1 - 7))\" ]; then\n        echo\
    \ `expr $1 + $(( $8 - 1 ))`\n    elif [ \"$1\" = \"$(($1 - 8))\" ]; then\n   \
    \     echo `expr $1 + $(( $9 - 1 ))`\n    elif [ \"$1\" = \"$(($1 - 9))\" ]; then\n\
    \        echo `expr $1 + $(( $10 - 1 ))`\n    elif [ \"$1\" = \"$(($1 - 10))\"\
    \ ]; then\n        echo `expr $1 + $(( $11 - 1 ))`\n    elif [ \"$1\" = \"$(($1\
    \ - 11))\" ]; then\n        echo `expr $1 + $(( $12 - 1 ))`\n    elif [ \"$1\"\
    \ = \"$(($1 - 12))\" ]; then\n        echo `expr $1 + $(( $13 - 1 ))`\n    elif\
    \ [ \"$1\" = \"$(($1 - 13))\" ]; then\n        echo `expr $1 + $(( $14 - 1 ))`\n\
    \    elif [ \"$1\" = \"$(($1 - 14))\" ]; then\n        echo `expr $1 + $(( $15\
    \ - 1 ))`\n    elif [ \"$1\" = \"$(($1 - 15))\" ]; then\n        echo `expr $1\
    \ + $(( $16 - 1 ))`\n    elif [ \"$1\" = \"$(($1 - 16))\" ]; then\n        echo\
    \ `expr $1 + $(( $17 - 1 ))`\n    elif [ \"$1\" = \"$(($1 - 17))\" ]; then\n \
    \       echo `expr $1 + $(( $18 - 1 ))`\n    elif [ \"$1\" = \"$(($1 - 18))\"\
    \ ]; then\n        echo `expr $1 + $(( $19 - 1 ))`\n    elif [ \"$1\" = \"$(($1\
    \ - 19))\" ]; then\n        echo `expr $1 + $(( $20 - 1 ))", "    echo \"Computing\
    \ fibfib($1)...\"\n    local i\n    local ret\n    # initialize fibfib(0) = 0\n\
    \    local fibfib0=0\n    # initialize fibfib(1) = 0\n    local fibfib1=0\n  \
    \  # initialize fibfib(2) = 1\n    local fibfib2=1\n    # initialize fibfib(n)\
    \ = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    local fibfib\n    for i in $(seq\
    \ 1 \"$1\"); do\n        fibfib=$(expr \"$fibfib\" + \"$fibfib$((fibfib1)))\"\
    )\n        fibfib1=$(expr \"$fibfib\" + \"$fibfib$((fibfib2)))\")\n        fibfib2=$(expr\
    \ \"$fibfib\" + \"$fibfib$((fibfib3)))\")\n        fibfib=$(expr \"$fibfib\" +\
    \ \"$fibfib$((fibfib3)))\"\n    done\n    ret=$fibfib\n    echo \"fibfib($1):\
    \ $ret\"", "  local fibfib \"$@\"\n  local n\n  (( n = $1 ))\n  fibfib=$(( fibfib\
    \ + $(( fibfib + $(( fibfib + $(( fibfib + $(( fibfib + $(( fibfib + $(( fibfib\
    \ + $(( fibfib + $(( fibfib + $(( fibfib + $(( fibfib + $n ))) )) )) )) )) ))\
    \ )) )) ))\n  echo $fibfib", "    local N=$1 i\n    echo \"$2\"\n    echo \"$3\"\
    \n    while (( N > 0 ))\n    do\n        echo \"$5\"\n        echo \"$3\"\n  \
    \      echo \"$2\"\n        echo \"$4\"\n        echo \"$1\"\n        echo \"\
    $6\"\n        echo \"$7\"\n        echo \"$8\"\n        echo \"$9\"\n        echo\
    \ \"$10\"\n        N=$(( $N - 1 ))\n    done\n    echo \"$2\"", "  local number=$1\n\
    \  local fibfibnum=0\n  while [ $number -gt 1 ]\n  do\n    fibfibnum=$((fibfibnum+number))\n\
    \    number=$((number-1))\n  done\n  echo $fibfibnum", "    local i\n    local\
    \ fibfib\n    local fibfib\n    local fibfib\n    local fibfib\n    local fibfib\n\
    \n    fibfib=0\n    fibfib=1\n    fibfib=2\n    fibfib=$((fibfib+3))\n    for\
    \ i in $(seq 0 $1 $fibfib); do\n        fibfib=$((fibfib+fibfib))\n    done\n\n\
    \    echo \"$fibfib\"", "  # Your code goes here\n  (( n = $1 ))\n  (( f = 1 ))\n\
    \  (( fibfib_res = 0 ))\n  (( fibfib_res_i = 0 ))\n  (( fibfib_res_f = 0 ))\n\
    \  (( fibfib_res_n = 0 ))\n  while (( fibfib_res_i < n ))\n  do\n    (( f = f\
    \ + 1 ))\n    (( fibfib_res_f = fibfib_res_f + 1 ))\n    (( fibfib_res_i = fibfib_res_i\
    \ + 1 ))\n    (( fibfib_res = fibfib_res + f ))\n  done\n  (( fibfib_res = fibfib_res\
    \ / fibfib_res_f ))\n  (( fibfib_res = fibfib_res_i ))\n  echo $fibfib_res ",
  "  local n=$1\n  echo \"$(($n + $(($n - 1)) + $(($n - 2)) + $(($n - 3))))\"", "\t\
    local n=$1\n\tlocal fibfib\n\tfibfib=0\n\tfor i in $(seq 0 $((n-2)) )\n\tdo\n\t\
    \tlocal fibfib\n\t\tfibfib=$(( fibfib + fibfib ))\n\tdone\n\techo $fibfib", "\t\
    local n=$1\n\tlocal fibfib\n\tfibfib=$((${fibfib}+${fibfib}+${fibfib}))\n\techo\
    \ $fibfib", "    declare -a fibfibnum\n    fibfibnum[0]=0\n    fibfibnum[1]=0\n\
    \    fibfibnum[2]=1\n    fibfibnum[3]=1\n    fibfibnum[4]=2\n    fibfibnum[5]=2\n\
    \    fibfibnum[6]=3\n    fibfibnum[7]=3\n\n    for (( n = 8; n >= 0; n-- )); do\n\
    \        fibfibnum[$(( n - 1 ))]=$(fibfibnum[$(( n - 1 ))] + fibfibnum[$(( n -\
    \ 2 ))] + fibfibnum[$(( n - 3 ))])\n    done\n\n    echo \"${fibfibnum[$1]}\"",
  "\tlocal n=$1\n\tlocal fib\n\tlocal fibfib\n\tif [[ -z $n ]]; then\n\t\treturn 0\n\
    \telse\n\t\tif [ $n -eq 0 ]; then\n\t\t\treturn 0\n\t\telse\n\t\t\tfib = $(( $n\
    \ * $(( n - 1 )) ))\n\t\t\tfibfib=$(( $fib + $(( $fib - 1 )) ))\n\t\tfi\n\tfi",
  "\tlocal n=$1\n\tif [[ $n -lt 2 ]]; then\n\t\techo \"0\"\n\telse\n\t\tlocal prev=$((\
    \ $(( n - 1 )) ))\n\t\tlocal next=$(( $(( n - 2 )) ))\n\t\techo \"$(( prev + next\
    \ + fibfib( $(( next - 1 )) ) ))\"\n\tfi", "    local x\n    printf -v x \"$1\"\
    \ \"\"\n    local y\n    y=$(echo \"$x$x$x$x\" | sed 's/\\(.*\\)\\(.*\\)\\(.*\\\
    )/\\3\\2\\1/')\n    printf -v x \"$x$y$x\"", "  local fibfib=\"$1\"\n\n  [ $((fibfib\
    \ - 1)) -eq $((fibfib - 2)) ] && return 0\n  [ $((fibfib - 2)) -eq $((fibfib -\
    \ 3)) ] && return 1\n  [ $((fibfib - 3)) -eq $((fibfib - 4)) ] && return 2\n\n\
    \  fibfib=$((fibfib - 3)) + $((fibfib - 2)) + $((fibfib - 1))\n  return $fibfib",
  "    local number=$1\n    if [ $number -eq 0 ]; then\n        echo 0\n    elif [\
    \ $number -eq 1 ]; then\n        echo 0\n    elif [ $number -eq 2 ]; then\n  \
    \      echo 1\n    else\n        local first=$2\n        local second=$3\n   \
    \     local third=$4\n        local sum=$(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $", "    local n=$1\n    if [ $n -lt 0 ] || [ $n -gt 0 ]; then\n   \
    \     echo \"fibfib() takes an integer argument\"\n        return 1\n    fi\n\
    \    if [ $n == 0 ]; then\n        return 0\n    fi\n    local fibfib=0 fibfib1=0\n\
    \    for i in $(seq 1 $n) ; do\n        fibfib1+=$fibfib\n        fibfib+=$fibfib1\n\
    \    done\n    echo $fibfib", "    local n=$1\n    local a=0\n    local b=1\n\
    \    local c=1\n    local d=1\n    local e=1\n    local f=1\n    local fibfib=$((a\
    \ + b + c + d))\n    while [ $fibfib -gt $n ]; do\n        local a=b\n       \
    \ local b=c\n        local c=d\n        local d=e\n        local e=f\n       \
    \ f=$((a + b + c + d))\n        fibfib=$((fibfib + f))\n    done\n    echo $fibfib",
  "\tn=$1\n\tfibfiblist=\"0 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584\
    \ 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269\
    \ 2178309 3524578 5702887 9227465 14930352 24157817 39088169 49971228 64575127\
    \ 79261957 109461464 172179161 251512049 353011916 535329329\"\n\tlet n=n-1\n\t\
    let fibfib=((fibfiblist[n]))\n\techo $fibfib", "  case $1 in\n    0) echo \"0\"\
    \n    1) echo \"0\"\n    2) echo \"1\"\n    *)\n      local i=1\n      while [\
    \ $i -le $1 ]; do\n        local a=$(fibfib $((i+1)))\n        local b=$(fibfib\
    \ $((i-1)))\n        local c=$(fibfib ($((i-2))))\n        echo \"$((a + b + c))\"\
    \n        ((i++))\n      done\n    ;;\n  esac", "  local n fib\n  local fibfib\n\
    \  fibfib=$(( fib ))\n  (( n -= 1 ))\n  while (( n >= 0 )) ; do\n    (( fibfib\
    \ += fib ))\n    (( fib = $( fibfib - fib ) ))\n    (( n -= 1 ))\n  done\n  echo\
    \ $( fibfib )", "\tif [[ $1 =~ ^[0-9]+$ ]]; then \n\t\tfibfib=$(fibfib-helper\
    \ $1)\n\t\treturn $fibfib\n\tfi\n\treturn 0", "  if [ $1 -eq 0 ]\n  then\n   \
    \ echo \"0\"\n  fi\n  fi\n  fibfib \"$(( ${1:-$1} -1 ))\"", "  local n\n  n=$(echo\
    \ $1 | cut -d \"-\" -f 1)\n  echo $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $(( $((\
    \ $(( $(( $(( $(( $(( $(( $(( $((", "  if [ \"$1\" = \"0\" ]; then\n    echo \"\
    0\"\n  elif [ \"$1\" = \"1\" ]; then\n    echo \"0\"\n  elif [ \"$1\" = \"2\"\
    \ ]; then\n    echo \"1\"\n  else\n    fibfib \"$(( $1 + 1 ))\" $(($1 - 1 ))\n\
    \  fi", "  n=$1\n  fibfib=$((fibfib + 2*n - 3*(fibfib+n)*(n-2)/2))", "    local\
    \ n=$1 fibfib=0\n    for i in {0..1}; do\n        fibfib=$((fibfib + i))\n   \
    \ done\n    echo $fibfib", "\tif [ \"$1\" = \"0\" ]; then\n\t\techo \"0\"\n\t\
    elif [ \"$1\" = \"1\" ]; then\n\t\techo \"0\"\n\telif [ \"$1\" = \"2\" ]; then\n\
    \t\techo \"1\"\n\telse\n\t\tlet \"fibfib_value = $(expr $1 + $(expr $1 \\* 3)\
    \ + $(expr $1 \\* 5 \\* 3))\"\n\t\techo \"$fibfib_value\"\n\tfi", "\tlocal n=$1\n\
    \tlocal fibfib\n\tfibfib=0\n\twhile ((fibfib<n)); do\n\t\t((fibfib=fibfib+1))\n\
    \tdone\n\techo $fibfib", "  local n=$1 i=0 fibfibval\n  while [ \"$n\" -gt \"\
    $i\" ]\n  do\n    fibfibval=$(( $fibfibval + $fibfibval ))\n    (( i++ ))\n  done\n\
    \  echo $fibfibval", "\tlocal n=$1\n\tlocal a=0\n\tlocal b=1\n\tlocal fibfib\n\
    \n\twhile [[ $n -gt 0 ]]; do\n\t\tfibfib=$(($fibfib + $(($a * $b)) + $n))\n\t\t\
    n=$(($n - 1))\n\t\ta=$(($a + $b))\n\t\tb=$(($b * 2))\n\tdone\n\techo $fibfib",
  "  if [[ \"$1\" -eq 0 ]]; then\n    echo \"0\"\n  else\n    echo \"${fibfib ($(($1\
    \ - 1))) + ${fibfib ($(($1 - 2))) + ${fibfib ($(($1 - 3))) }}\"\n  fi", "  ((\
    \ $# > 2 )) && printf '%s\\n' \"Too many parameters!\" >&2 || return 0\n  local\
    \ n i\n  (( $# == 0 )) && printf '%s\\n' \"Invalid parameter number!\" >&2 ||\
    \ return 0\n  local -n a=($1)\n  (( $#a > 0 )) && printf '%s\\n' \"Only parameters\
    \ can be negative numbers\" >&2 || return 0\n  local -n b=($2)\n  (( $#b > 0 ))\
    \ && printf '%s\\n' \"Only parameters can be negative numbers\" >&2 || return\
    \ 0\n  (( ( ( $# > 1 )) && [[ \"$a\" < \"$b\" ]]) ) || printf '%s\\n' \"Only positive\
    \ number parameters\" >&2 || return 0\n  (( ( ( $# > 2 )) && [[ \"$a\" < \"$b\"\
    \ ]]) ) || printf '%s\\n' \"Only positive number parameters\" >&2 || return 0\n\
    \  (( ( ( $# == 0 )) && [[ \"$a\" == \"$b\" ]]) ) || printf '%s\\n' \"Only positive\
    \ number parameters\" >&2 || return 0\n  (( ( ( $# > 1 )) && [[ \"$a\" < \"$b\"\
    \ ]]) ) || printf '%s\\n' \"Only positive number parameters\" >&2 || return 0\n\
    \  (( ( ( $# == 0 )) && [[ \"$a\" == \"$b\" ]]) ) || printf '%s\\n' \"Only positive\
    \ number parameters\" >&2 || return 0\n  (( ( ( $# > 2 )) && [[ \"$a\" < \"$b\"\
    \ ]]) ) || printf '%s\\n' \"Only positive number parameters\" >&2 || return 0\n\
    \  (( ( ( $# == 0 )) && [[ \"$a\" == \"$b\" ]]) ) || printf '%s\\n' \"Only positive\
    \ number parameters\" >&2 || return 0\n  (( ( ( $# > 1 )) && [[ \"$a\" < \"$b\"\
    \ ]]) ) || printf '%s\\n' \"Only positive number parameters\" >&2 || return 0\n\
    \  (( ( ( $# == 0 )) && [[ \"$a\" == \"$b\" ]]) ) || printf '%s\\n' \"Only positive\
    \ number parameters\" >&2 || return 0\n  (( ( ( $# > 2 )) && [[ \"$a\" < \"$b\"\
    \ ]]) ) || printf '%s\\n' \"Only positive number parameters\" >&2 || return 0\n\
    \  (( ( ( $# == 0 )) && [[ \"$a\" == \"$b\" ]]", "    local i fibfib\n    local\
    \ fibfib\n    fibfib=0\n    i=1\n    while [ $i -le $1 ] ; do\n        fibfib=$((fibfib\
    \ + i))\n        i=$((i + 2))\n    done\n    echo $fibfib", "  local n=$1\n  echo\
    \ $(( $(( ($(( ($(( $(( $(( $(( $(( $(( 2 * $n )) )) )) )) )) )) )) )) )) ))",
  "\tlocal n=$1\n\tlocal a=1\n\tlocal b=0\n\tlocal c=1\n\twhile [ $n -gt 0 ]; do\n\
    \t\ta=$((a+b))\n\t\tb=$((b+c))\n\t\tc=$((c+n))\n\t\techo $a\n\tdone", "  [ $1\
    \ -eq 0 ] && return 0\n  [ $1 -eq 1 ] && return 0\n  [ $1 -eq 2 ] && return 1\n\
    \  fibfib ($(($1 - 1)) + $(($2 - 1)) + $(($3 - 1))) || return $(($1 + $2 + $3))",
  "    local n=$1\n    if [ $n -lt 1 ]; then\n        echo \"fibfib: argument $1 must\
    \ be >= 1\"\n    elif [ $n -gt 101 ]; then\n        echo \"fibfib: argument $1\
    \ must be <= 101\"\n    else\n        local s=0\n        local i=1\n        local\
    \ m=1\n        local j=3\n        echo \"fibfib: argument $1 $(( $(n--) )) \"\n\
    \        while [ $i -lt $n ];do\n            s=$(( $s + $i ))\n            i=$((\
    \ $i + m ))\n            m=$(( $m - j ))\n            j=$(( $j + 1 ))\n      \
    \  done\n        echo \"$s $(( $n - $s ))\"\n    fi", "    local n=$1\n    local\
    \ fibfibnum=$(printf \"%0$(($((n)))d\" 0)\n    local fibfibnum2=0\n    local fibfibnum3=0\n\
    \    local fibfibnum4=0\n    local fibfibnum5=0\n    local fibfibnum6=0\n    local\
    \ fibfibnum7=0\n    local fibfibnum8=0\n    local fibfibnum9=0\n    local fibfibnum10=0\n\
    \    local fibfibnum11=0\n    local fibfibnum12=0\n    local fibfibnum13=0\n \
    \   local fibfibnum14=0\n    local fibfibnum15=0\n    local fibfibnum16=0\n  \
    \  local fibfibnum17=0\n    local fibfibnum18=0\n    local fibfibnum19=0\n   \
    \ local fibfibnum20=0\n    local fibfibnum21=0\n    local fibfibnum22=0\n    local\
    \ fibfibnum23=0\n    local fibfibnum24=0\n    local fibfibnum25=0\n    local fibfibnum26=0\n\
    \    local fibfibnum27=0\n    local fibfibnum28=0\n    local fibfibnum29=0\n \
    \   local fibfibnum30=0\n    local fibfibnum31=0\n    local fibfibnum32=0\n  \
    \  local fibfibnum33=0\n    local fibfibnum34=0\n    local fibfibnum35=0\n   \
    \ local fibfibnum36=0\n    local fibfibnum37=0\n    local fibfibnum38=0\n    local\
    \ fibfibnum39=0\n    local fibfibnum40=0\n    local fibfibnum41=0\n    local fibfibnum42=0\n\
    \    local fibfibnum43=0\n    local fibfibnum44=0\n    local fibfibnum45=0\n \
    \   local fibfibnum46=0\n    local fibfibnum47=0\n    local fibfibnum48=0\n  \
    \  local fibfibnum49=0\n    local fibfibnum50=0\n    local fibfibnum51=0\n   \
    \ local fibfibnum52=0\n    local fibfibnum53=0\n    local fibfibnum54=0\n    local\
    \ fibfibnum55=0\n    local fibfibnum56=0\n    local fibfibnum57=0\n    local fibfibnum58=0\n\
    \    local fibfibnum59=0\n    local fibfibnum60=0\n    local fibfibnum61=0\n \
    \   local fibfibnum62=0\n", '    # Your code goes here', "    local number=$1\n\
    \    local fibfib=0\n\n    if [ $number -eq 0 ]\n    then\n        echo 0\n  \
    \  elif [ $number -eq 1 ]\n    then\n        echo 0\n    elif [ $number -eq 2\
    \ ]\n    then\n        echo 1\n    else\n        fibfib=$((fibfib + $(fibfib $((number\
    \ - 2))) + $(fibfib $((number - 1)))))\n    fi", "    local n=$1\n    # Write\
    \ your function here\n    if [ $n -lt 2 ]\n        then\n            return 0\n\
    \    elif [ $n -eq 1 ]\n        then\n            return 0\n    elif [ $n -eq\
    \ 2 ]\n        then\n            return 1\n    elif [ $n -gt 2 ]\n        then\n\
    \            local ret=$(fibfib $((n-1))) + $(fibfib ($((n-2))))\n           \
    \ echo ${ret}\n            echo \"${ret}\"\n    fi", "    local n=$1\n    echo\
    \ \"$((($n-1)$(fibfib \"$((n-2))\") + $((n-1)$(fibfib \"$((n-3))\"))))\"", "\t\
    if [ \"$1\" = \"1\" ]; then\n\t\techo \"0\"\n\telse\n\t\tfibfib \"$(($1 - 1))\"\
    \ \"$(($1 - 2))\" \"$(($1 - 3))\"\n\tfi", "  local n\n  n=$1\n  echo \"$(( (($((\
    \ ($n << 1) + 1) + $n ))) + $(( $(( $n << 2) + 1) + $n ))) + $(( $(( $n << 3)\
    \ + 1) + $n ))\"", "    if [ \"$1\" -gt 3 ]; then\n        echo \"Error: fibfib\
    \ is not defined for values of n greater than 3.\"\n    else\n        echo $((\
    \ $(( $1 * $1 ) ) + ( $2 * $2 ) + ( $3 * $3 ) ))\n    fi", "  # Convert argument\
    \ to integer\n  IFS=\\> read n\n  # Check for argument error\n  if [[ $n =~ ^[0-9]+$\
    \ ]]; then\n    # Return error if no argument\n    if [[ -z $n ]]; then\n    \
    \  echo \"fibfib(): Must enter argument integer\"\n      exit 1\n    # Recursion\
    \ if argument is a positive integer\n    elif [[ $n -gt 0 ]]; then\n      # Compute\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n      fibfib \"$((n-1))$((n-2))$((n-3))\"\
    \n    # Recursion if argument is a negative integer\n    elif [[ $n -lt 0 ]];\
    \ then\n      # Compute fibfib(0) + fibfib(-3) + fibfib(-6)\n      fibfib \"$((0))$((-3))$((-6))\"\
    \n    # Raise error if argument is neither positive or negative integer\n    else\n\
    \      echo \"fibfib(): Only positive and negative integers allowed\"\n      exit\
    \ 1\n    fi\n  # Raise error if argument is not an integer\n  else\n    echo \"\
    fibfib(): Argument must be an integer\"\n    exit 1\n  fi\n  # Return fibfib(n-1)\n\
    \  echo $((n-1))", "    local fib fibfib \"$@\"\n    if [[ $# -gt 1 ]]; then\n\
    \        echo 0\n    elif [[ $# -eq 0 ]]; then\n        echo 0\n    else\n   \
    \     fibfib=`expr $fibfib + 1`\n        echo `expr $fibfib - 1`\n    fi", " \
    \   local n=$1\n    local fib=$( seq 1 $n | fold -w1 -d+ | awk '{print $1+$2+$3+$4+$5}'\
    \ ) # compute fib sequence\n    echo \"$fibfib\" # print the fibfib sequence",
  "  local n=$1\n  local fibfib=\n  local digit\n  for i in {0..$(($n-1))}; do\n \
    \   digit=$(( $((fibfib[$((i-1))] + fibfib[$((i-2))])) + fibfib[$((i-1))] ))\n\
    \    fibfib[$i]=$digit\n  done\n  echo $fibfib[$n]", "  declare -i n=$1\n  local\
    \ i\n  local fib\n  (( n==0 )) && return 0\n  (( n==1 )) && return 0\n  (( n==2\
    \ )) && return 1\n  (( n<0 )) && return 0\n  fib =0\n  for i in {1..$((n-1))}\
    \ do\n    fib=$((fib+i))\n  done\n  echo $fib", "  case $1 in\n    [0-9]*)\n \
    \     echo \"$(($2 + $1))\"\n      ;;\n    *)\n      echo \"$(($1 + $2))\"\n \
    \     ;;\n  esac", "    local n=$1 fibfib=0\n    # Loop through all the numbers\
    \ from 0 to the passed argument\n    for (( i=1; i <= n; i++ ))\n    do\n    \
    \    fibfib=$(($fibfib + $i))\n    done\n    echo $fibfib", "  local i ret\n \
    \ (( i=\"$1\" ))\n  if (( i < 0)); then\n    echo -1\n  else\n    if (( i == 0\
    \ )); then\n      echo 0\n    else\n      (( ret = $(fibfib $(( $i - 1 ))) ))\n\
    \      (( ret = $(fibfib $(( $i - 1 ))) ))\n      echo $(ret)\n    fi\n  fi",
  "    local i=1\n    local j=1\n    local sum\n\n    for i in $@\n    do\n      \
    \  j=$((j+i))\n        sum=$((sum+j))\n    done\n    echo $sum", "\tlet n=$1\n\
    \tlet fibfib=0\n\tlet fibfib2=0\n\tlet fibfib3=0\n\tlet fibfib4=0\n\tlet fibfib5=0\n\
    \tlet fibfib6=0\n\tlet fibfib7=0\n\tlet fibfib8=0\n\tlet fibfib9=0\n\tlet fibfib10=0\n\
    \tlet fibfib11=0\n\tlet fibfib12=0\n\tlet fibfib13=0\n\tlet fibfib14=0\n\tlet\
    \ fibfib15=0\n\tlet fibfib16=0\n\tlet fibfib17=0\n\tlet fibfib18=0\n\tlet fibfib19=0\n\
    \tlet fibfib20=0\n\tlet fibfib21=0\n\tlet fibfib22=0\n\tlet fibfib23=0\n\tlet\
    \ fibfib24=0\n\tlet fibfib25=0\n\tlet fibfib26=0\n\tlet fibfib27=0\n\tlet fibfib28=0\n\
    \tlet fibfib29=0\n\tlet fibfib30=0\n\tlet fibfib31=0\n\tlet fibfib32=0\n\tlet\
    \ fibfib33=0\n\tlet fibfib34=0\n\tlet fibfib35=0\n\tlet fibfib36=0\n\tlet fibfib37=0\n\
    \tlet fibfib38=0\n\tlet fibfib39=0\n\tlet fibfib40=0\n\tlet fibfib41=0\n\tlet\
    \ fibfib42=0\n\tlet fibfib43=0\n\tlet fibfib44=0\n\tlet fibfib45=0\n\tlet fibfib46=0\n\
    \tlet fibfib47=0\n\tlet fibfib48=0\n\tlet fibfib49=0\n\tlet fibfib50=0\n\tlet\
    \ fibfib51=0\n\tlet fibfib52=0\n\tlet fibfib53=0\n\tlet fibfib54=0\n\tlet fibfib55=0\n\
    \tlet fibfib56=0\n\tlet fibfib57=0\n\tlet fibfib58=0\n\tlet fibfib59=0\n\tlet\
    \ fibfib60=0\n\tlet fibfib61=0\n\tlet fibfib62=0\n\tlet fibfib63=0\n\tlet fibfib64=0\n\
    \tlet fibfib65=0\n\tlet fibfib66=0\n\tlet fibfib67=0\n\tlet fibfib68=0\n\tlet\
    \ fibfib69=0\n\tlet fibfib70=0\n\tlet fibfib71=0\n\tlet fibfib72=0\n\tlet fib",
  "  local n sum=0 n1=1 n2=1\n  IFS=- read -r n\n  while ((n<=n1)); do\n    ((n+=n2))\n\
    \    ((sum+=n3))\n    ((n3=n2))\n    ((n2=n1))\n    ((n1=n))\n  done\n  printf\
    \ \"%s\\n\" $sum", "\tlocal n=$1 i\n\tlocal fib=$2\n\tlocal fibfib=$(( fibfib\
    \ - 3 ))\n\techo \"$(( fibfib + fib + fib ))\"", "    local i\n    local fibfib\n\
    \    local n=$1\n    local fibfib\n    local fibfib\n    fibfib=0\n    for i in\
    \ $(seq 2 $((n-1))); do\n        fibfib=$((fibfib + fibfib))\n    done\n    fibfib=$((fibfib\
    \ + fibfib))\n    echo $fibfib", '    echo $(( $(( $(( $(( $1 ))-1) ))+$(( $((
    $(( $(( $(( $(( $(( $(( $(( $1 ))-2 ))-3 )) )) )) )) )) ))', '    (( $# )) &&
    echo $(( $(($1) + 1) + $(($2) + 1) + $(($3) + 1) ))', "\tlet val=${1}\n\tlet fibfib=${val}\n\
    \tlet i=0\n\tlet fibfibs=0\n\twhile [[ $i -lt $val ]]; do\n\t\tlet fibfibs=$((fibfibs\
    \ + fibfib))\n\t\tlet i=$((i+1))\n\tdone\n\techo $fibfibs", "    local n=$1\n\
    \    if [ $n -le 0 ]; then\n        echo \"fibfib: n must be greater than 0\"\n\
    \    elif [ $n -eq 1 ]; then\n        echo \"0\"\n    elif [ $n -eq 2 ]; then\n\
    \        echo \"0\"\n    elif [ $n -gt 3 ]; then\n        local n=$(( n - 3 ))\n\
    \        local val=$(( fibb($n) + fibb($n-1) + fibb($n-2) ))\n        echo $val\n\
    \    else\n        echo \"fibfib: n too large\"\n    fi", "  # check if n is an\
    \ integer\n  expr=`expr $1`\n  if [ $? -eq 0 ]\n    then\n    echo $(($1 + $2\
    \ + $3))\n  else\n    echo \"Not an integer\"\n  fi", "    local n\n    local\
    \ fib\n    ((n = $1))\n    fib=0\n    while [ $n -gt 0 ]; do\n        ((fib+=$(fibfib\
    \ ($n-1))))\n        ((fib+=$(fibfib ($n-2))))\n        ((fib+=$(fibfib ($n-3))))\n\
    \        ((n--))\n    done\n    echo \"$fib\"", "  (( $# )) && {\n    local a=$1\n\
    \    local b\n    local i\n\n    echo 0\n\n    for i in {1..$a}\n    do\n    \
    \  (( b=$(i+a) ))\n      (( $#b > 1 )) && {\n        echo $(b-$a)$(( b+$(a-1)\
    \ ))\n      }\n    done\n  }", "    if (( $# < 1 )); then\n        echo \"fibfib:\
    \ usage: $0 fibfib_index\"\n        return 1\n    fi\n\n    fib_index=$1\n\n \
    \   if [[ $fib_index -gt $(( ${#fibfib[@]} -1 )) ]]; then\n        echo \"fibfib:\
    \ fibfib_index must be less than ${#fibfib[@]}; use 0 to get the last element\"\
    \n        return 1\n    fi\n\n    local fibfib_index=$(( $fib_index + 2 ))\n\n\
    \    local fibfib\n    fibfib=( \"${fibfib[@]}\" )\n\n    if [[ -z ${fibfib[$fibfib_index]}\
    \ ]]; then\n        return 0\n    fi\n\n    local fibfib\n    fibfib=( \"${fibfib[@]}\"\
    \ )\n\n    local fibfib\n    fibfib=( \"${fibfib[@]}\" )\n\n    if [[ -z ${fibfib[$fibfib_index]}\
    \ ]]; then\n        return 0\n    fi\n\n    if [[ -z ${fibfib[$fibfib_index +\
    \ 1]} ]]; then\n        return 0\n    fi\n\n    if [[ -z ${fibfib[$fibfib_index\
    \ + 1]} ]]; then\n        return 1\n    fi\n\n    local fibfib\n    fibfib=( \"\
    ${fibfib[@]}\" )\n\n    local fibfib\n    fibfib=( \"${fibfib[@]}\" )\n\n    if\
    \ [[ -z ${fibfib[$fibfib_index + 1]} ]]; then\n        return 1\n    fi\n\n  \
    \  local fibfib\n    fibfib=( \"${fibfib[@]}\" )\n\n    local fibfib\n    fibfib=(\
    \ \"${fibfib[@]}\" )\n\n    if [[ -z ${fibfib[$fibfib_index + 1]} ]]; then\n \
    \       return 1\n    fi\n\n    local fibfib\n    fibfib=( \"${fibfib[@]}\" )\n\
    \n    local fibfib\n    fibfib=( \"${fibfib[@]}\" )\n\n    if [[ -z ${fibfib[$fibfib_index\
    \ + 1]} ]]; then\n        return 1\n    fi\n\n    local fibfib\n    fibfib=( \"\
    ${fibfib[@]}\" )\n\n    local fibfib\n    fibfib=( \"${fibfib[@]}\" )\n\n    if\
    \ [[ -z ${fibfib[$fibfib_index + 1]} ]]; then\n        return 1\n    fi\n\n  \
    \  local fibfib\n    fibfib=( \"${fibfib[@]}\" )\n\n    local fibfib\n    fibfib=(\
    \ \"${fibfib[@]}\" )\n\n    if [[ -z ${fibfib[$fibfib_index + 1]} ]]; then\n \
    \       return 1\n    fi\n\n    if [[ -z ${fibfib[$fibfib_index + 1]} ", "  local\
    \ num=$1\n  if [ $num = 0 ] ; then\n    echo \"0\"\n  else\n    if [ $num = 1\
    \ ] ; then\n      echo \"0\"\n    elif [ $num = 2 ] ; then\n      echo \"1\"\n\
    \    else\n      echo $(($fibfib($num-1)+$fibfib($num-2)))\n    fi\n  fi", " \
    \       local fibfib=$(( $1 + $2 ))\n        echo $fibfib", "  local n=$1\n  ((n--))\n\
    \  local fibfib=( 0 1 )\n  local fibfib1=(0)\n  local fibfib2=(0)\n  local fibfib3=(0)\n\
    \  local fibfib4=(0)\n  local fibfib5=(0)\n  local fibfib6=(0)\n  local fibfib7=(0)\n\
    \  local fibfib8=(0)\n  local fibfib9=(0)\n  local fibfib10=(0)\n  local fibfib11=(0)\n\
    \  local fibfib12=(0)\n  local fibfib13=(0)\n  local fibfib14=(0)\n  local fibfib15=(0)\n\
    \  local fibfib16=(0)\n  local fibfib17=(0)\n  local fibfib18=(0)\n  local fibfib19=(0)\n\
    \  local fibfib20=(0)\n  local fibfib21=(0)\n  local fibfib22=(0)\n  local fibfib23=(0)\n\
    \  local fibfib24=(0)\n  local fibfib25=(0)\n  local fibfib26=(0)\n  local fibfib27=(0)\n\
    \  local fibfib28=(0)\n  local fibfib29=(0)\n  local fibfib30=(0)\n  local fibfib31=(0)\n\
    \  local fibfib32=(0)\n  local fibfib33=(0)\n  local fibfib34=(0)\n  local fibfib35=(0)\n\
    \  local fibfib36=(0)\n  local fibfib37=(0)\n  local fibfib38=(0)\n  local fibfib39=(0)\n\
    \  local fibfib40=(0)\n  local fibfib41=(0)\n  local fibfib42=(0)\n  local fibfib43=(0)\n\
    \  local fibfib44=(0)\n  local fibfib45=(0)\n  local fibfib46=(0)\n  local fibfib47=(0)\n\
    \  local fibfib48=(0)\n  local fibfib49=(0)\n  local fibfib50=(0)\n  local fibfib51=(0)\n\
    \  local fibfib52=(0)\n  local fibfib53=(0)\n  local fibfib54=(0)\n  local fibfib55=(0)\n\
    \  local fibfib56=(0)\n  local fibfib57=(0)\n  local fibfib58=(0)\n  local fibfib59=(0)\n\
    \  local fibfib60=(0)\n  local fibfib61=(0)\n  local ", "    local fibfibnum=$1\n\
    \    local fibfibnum1=$fibfibnum\n    local fibfibnum2=$fibfibnum\n    local fibfibnum3=$fibfibnum\n\
    \    local fibfibnum4=$fibfibnum\n    local fibfibnum5=$fibfibnum\n    local fibfibnum6=$fibfibnum\n\
    \    local fibfibnum7=$fibfibnum\n    local fibfibnum8=$fibfibnum\n    local fibfibnum9=$fibfibnum\n\
    \    local fibfibnum10=$fibfibnum\n    local fibfibnum11=$fibfibnum\n    local\
    \ fibfibnum12=$fibfibnum\n    local fibfibnum13=$fibfibnum\n    local fibfibnum14=$fibfibnum\n\
    \    local fibfibnum15=$fibfibnum\n    local fibfibnum16=$fibfibnum\n    local\
    \ fibfibnum17=$fibfibnum\n    local fibfibnum18=$fibfibnum\n    local fibfibnum19=$fibfibnum\n\
    \    local fibfibnum20=$fibfibnum\n    local fibfibnum21=$fibfibnum\n    local\
    \ fibfibnum22=$fibfibnum\n    local fibfibnum23=$fibfibnum\n    local fibfibnum24=$fibfibnum\n\
    \    local fibfibnum25=$fibfibnum\n    local fibfibnum26=$fibfibnum\n    local\
    \ fibfibnum27=$fibfibnum\n    local fibfibnum28=$fibfibnum\n    local fibfibnum29=$fibfibnum\n\
    \    local fibfibnum30=$fibfibnum\n    local fibfibnum31=$fibfibnum\n    local\
    \ fibfibnum32=$fibfibnum\n    local fibfibnum33=$fibfibnum\n    local fibfibnum34=$fibfibnum\n\
    \    local fibfibnum35=$fibfibnum\n    local fibfibnum36=$fibfibnum\n    local\
    \ fibfibnum37=$fibfibnum\n    local fibfibnum38=$fibfibnum\n    local fibfibnum39=$fibfibnum\n\
    \    local fibfibnum40=$fibfibnum\n    local fibfibnum41=$fibfibnum\n    local\
    \ fibfibnum42=$fibfibnum\n    local fibfibnum43=$fibfibnum\n    local fibfibnum44=$fibfibnum\n\
    \    local fibfibnum45=$fibfibnum\n    local fibfibnum46=$fibfib", "    local\
    \ n=$1 b=$2\n    \n    if [ $n -eq 1 ]\n    then\n        echo $b\n    elif [\
    \ $n -eq 2 ]\n    then\n        echo $b\n    elif [ $n -le $((n-1)) ]\n    then\n\
    \        fibfib \"$((n - 1)) + (n - 2)\" $((b + n))\n    else\n        fibfib\
    \ \"$((n - 2)) + (n - 3)\" $((b + n + 1))\n    fi", "    local n=$1\n    if [\
    \ $n -eq 1 ]; then\n        echo \"0\"\n    elif [ $n -eq 2 ]; then\n        echo\
    \ \"0\"\n    elif [ $n -eq 3 ]; then\n        echo \"1\"\n    else\n        echo\
    \ \"$(fibfib $(expr $n - 1) $$(fibfib $(expr $n - 2) $$(fibfib $(expr $n - 3)))\"\
    \n    fi", "  # Your code goes here\n  if [ \"$1\" = \"0\" ]\n  then\n    echo\
    \ \"0\"\n  elif [ \"$1\" = \"1\" ]\n  then\n    echo \"0\"\n  elif [ \"$1\" =\
    \ \"2\" ]\n  then\n    echo \"1\"\n  elif [ \"$1\" = \"$2\" ]\n  then\n    echo\
    \ \"0\"\n  elif [ \"$1\" -gt \"$2\" ]\n  then\n    echo \"$(fibfib ($2 - $1 +\
    \ 1) $(fibfib ($2 - $1 + 1))) + $(fibfib ($2 - $1 + 1))\"\n  else\n    echo \"\
    $(( $(fibfib ($2 - $1 + 1) $(fibfib ($2 - $1 + 1)) + $(fibfib ($2 - $1 + 1)) ))\"\
    \n  fi", "    # https://gist.github.com/williamdcleese/2681060\n    local i fib\
    \ sum\n    if [[ $1 -eq 0 ]] ; then\n        return 0\n    elif [[ $1 -eq 1 ]]\
    \ ; then\n        return 1\n    elif [[ $1 -eq 2 ]] ; then\n        return 1\n\
    \    fi\n    for (( i = 3; i <= $1; i++ )); do\n        fib=$(($fib + $(i-1)))\n\
    \    done\n    sum=$(($fib + $(($i-2))+$(($i-3))))\n    echo \"$sum\"", "    local\
    \ fibfibo=1\n    local fibfib=1\n    local fibfib=1\n    local fibfib=$[$fibfib+1]\n\
    \    while [ $fibfibo -le $1 ]\n    do\n        fibfib=$[$fibfib+$fibfib+$fibfib]\n\
    \        fibfibo=$[$fibfib+1]\n    done\n    return $fibfib", "  local i fib\n\
    \  fib=1\n  for i in {0..$1-1}; do\n    fib=$((fib + $fib))\n  done\n  echo $fib",
  "  local -i num=$1\n  test $num -gt 0 && test $num -le 1000 && echo $((${fibfib[${num}-1]}+${fibfib[${num}-2]}+${fibfib[${num}-3]}))",
  "  local n ret\n  (( n = $1 ))\n  (( ret = $(n-1) ))\n  (( ret = ret + $(n-2) ))\n\
    \  (( ret = ret + $(n-3) ))\n  return ret", "\tlocal n result\n\tif [ \"${#}\"\
    \ -eq \"1\" ]; then\n\t\tn=$1\n\telse\n\t\tn=$2\n\tfi\n\tif [ $n -eq 1 ]; then\n\
    \t\techo \"0\"\n\telse\n\t\tif [ $n -eq 2 ]; then\n\t\t\techo \"0\"\n\t\telse\n\
    \t\t\tif [ $n -eq 3 ]; then\n\t\t\t\techo \"1\"\n\t\t\telse\n\t\t\t\tresult=$(fibfib\
    \ $((n-3)))\n\t\t\t\tif [ $n -eq 4 ]; then\n\t\t\t\t\techo \"$result\"\n\t\t\t\
    \telse\n\t\t\t\t\tresult=$($result $((n-2)))\n\t\t\t\t\tif [ $n -eq 5 ]; then\n\
    \t\t\t\t\t\techo \"$result\"\n\t\t\t\t\telse\n\t\t\t\t\t\tresult=$($result $((n-1)))\n\
    \t\t\t\t\t\techo \"$result\"\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tfi",
  "  local n sum result\n  ((n=$1))\n  sum=1\n  result=0\n  while (( n > 0 )); do\n\
    \    (( result = sum + result ))\n    (( n-- ))\n    (( sum = sum + sum))\n  done\n\
    \  echo $result", "  (( $# > 2 )) && { echo \"Only 2 arguments supported\"; return\
    \ 1; }\n  (( $# == 0 )) && { echo \"Missing argument\"; return 1; }\n  \n  local\
    \ -i n=$1\n  \n  (( $n < 0 )) && { echo \"fibfib() argument must be >= 0\"; return\
    \ 1; }\n  \n  local -i f1 f2 f3 f4 f5\n  f1=$(expr $n \\* 3)\n  f2=$(expr $n \\\
    * 2 \\+ 1)\n  f3=$(expr $n \\* 1 \\+ 1)\n  f4=$(expr $n \\* 0 \\+ 1)\n  f5=$(expr\
    \ $n \\* 1 \\+ 2 )\n  \n  printf \"%d\\n\" $f1 $f2 $f3 $f4 $f5", "  local val=$1\n\
    \  local fibfib\n  fibbonacci() {\n    if [ $val -le 1 ]; then\n      echo $val\n\
    \    else\n      echo $(( val * $fibfib - $fibfib ))\n    fi\n  }\n  fibfib=`fibbonacci`\n\
    \  fibfib=`fibfib`\n  fibfib=`fibfib`\n  echo $fibfib", "  local i result\n  read\
    \ -r i || return 1\n  result=0 # Initialize result\n  ((result++))\n  ((result++))\n\
    \  ((result++))\n  ((result+=i))", "  local n=$1\n  local result\n\n  if [ $n\
    \ -le 0 ]; then\n    echo 0\n  fi\n  if [ $n -le 1 ]; then\n    echo 0\n  fi\n\
    \  if [ $n -le 2 ]; then\n    echo 1\n  fi\n\n  result=$(fibfib \"$(($n-1))\"\
    ) + $(fibfib \"$(($n-2))\") + $(fibfib \"$(($n-3))\")\n  echo \"$result\"", " \
    \ if [ $# -ne 1 ];\n  then\n    echo \"Error: expecting one arg (int)\"\n    exit\
    \ 1\n  fi\n  if [ \"$1\" -lt 0 -o \"$1\" -gt 20 ];\n  then\n    echo \"Error:\
    \ expecting input integer from 0 to 20\"\n    exit 1\n  fi\n  local n=$1\n  if\
    \ [ \"$n\" -gt \"$(($(echo \"$n\" | bc) + 1))\" ];\n  then\n    echo \"Error:\
    \ expecting input integer from 0 to $(($(echo \"$n\" | bc) + 1))\"\n    exit 1\n\
    \  fi\n  local fibfib=$(($(echo \"$n-1\" | bc) + $(echo \"$n-2\" | bc) + $(echo\
    \ \"$n-3\" | bc)))\n  echo $fibfib", "  local n=\"$1\"\n  local fib=0\n  while\
    \ [ $n -gt 1 ]; do\n    fib=$((fib+1))\n    n=$((n-1))\n  done\n  echo $fib",
  "  # Write your code here.\n  n=$1\n  if ((n <= 1)); then\n    echo \"0\"\n  else\n\
    \    fibfib=$((fibfib + fibfib - fibfib))\n  fi", "  local i=\"$1\"\n  if [ -z\
    \ \"$i\" ]; then echo 0; return; fi\n  if [ \"$i\" -eq 0 ]; then echo 0; return;\
    \ fi\n  fibfib \"$((i-1))\" && fibfib \"$((i-2))\" && fibfib \"$((i-3))\"", "\t\
    [ $# -ne 1 ] && echo \"${FUNCNAME[0]} expects 1 arg ($# were provided)\" && exit\
    \ 1\n\tlocal n=$1\n\tlocal fibfib=\n\tfor (( i = 3; i <= n; i++ )); do\n\t\tfibfib=$((fibfib\
    \ + i))\n\tdone\n\techo $fibfib", "  local i\n  local fib\n  for i in $(seq $1\
    \ $2); do\n    fib=$(($fib + $i))\n  done\n  echo $fib", "\tlocal n=$1\n\tif [[\
    \ $n -lt 2 ]]; then\n\t\techo \"-1\"\n\telse\n\t\techo \"$(( $(fibfib \"$1-1\"\
    ) + $(fibfib \"$1-2\") + $(fibfib \"$1-3\") ))\"\n\tfi", "  if [ $1 -eq 0 ]\n\
    \  then\n    echo 0\n  elif [ $1 -eq 1 ]\n  then\n    echo 0\n  elif [ $1 -eq\
    \ 2 ]\n  then\n    echo 1\n  elif [ $1 -gt 2 ]\n  then\n    fibfib ($(( $1 - 2\
    \ ))) $(( $1 + 2 ))\n  else\n    fibfib ($(( $1 - 2 ))) $(( $1 + 2 ))\n  fi",
  "  [[ -z \"$1\" ]] && echo \"Usage: $0 (n)\" && exit 1 || echo \"$1\"\n  [[ $1 -lt\
    \ 1 ]] && echo \"Usage: $0 (n)\" && exit 1 || echo \"$1\"\n  if [[ $1 == 1 ]];\
    \ then\n    echo \"0\"\n  else\n    fibfib \"$(( $(fibfib $(($1 -2)) ) ))\" \"\
    $(( $(fibfib $(($1 -1)) ) ))\"\n  fi", '  echo $(( $( echo $( echo "$( echo fibfib($1)-1"
    | bc -l)$( echo fibfib($1)-2" | bc -l)$( echo fibfib($1)-3" | bc -l)$( echo fibfib($1)-4"
    | bc -l)$( echo fibfib($1)-5" | bc -l)$( echo fibfib($1)-6" | bc -l)$( echo fibfib($1)-7"
    | bc -l)$( echo fibfib($1)-8" | bc -l)$( echo fibfib($1)-9" | bc -l)$( echo fibfib($1)-10"
    | bc -l)$( echo fibfib($1)-11" | bc -l)$( echo fibfib($1)-12" | bc -l)$( echo
    fibfib($1)-13" | bc -l)$( echo fibfib($1)-14" | bc -l)$( echo fibfib($1)-15" |
    bc -l)$( echo fibfib($1)-16" | bc -l)$( echo fibfib($1)-17" | bc -l)$( echo fibfib($1)-18"
    | bc -l)$( echo fibfib($1)-19" | bc -l)$( echo fibfib($1)-20" | bc -l)$( echo
    fibfib($1)-21" | bc -l)$( echo fibfib($1)-22" | bc -l)$( echo fibfib($1)-23" |
    bc -l)$( echo fibfib($1)-24" | bc -l)$( echo fibfib($1)-25" | bc -l)$( echo fibfib($1)-26"
    | bc -l)$( echo fibfib($1)-27" | bc -l)$( echo fibfib($1)-28" | bc -l)$( echo
    fibfib($1)-29" | bc -l)$( echo fibfib($1)-30" | bc -l)$( echo fibfib($1)-31" |
    bc -l)$( echo fibfib($1)-32" | bc -l)$( echo fibfib($1)-33" | bc -l)$( echo fibfib($1)-34"
    | bc -l)$( echo fibfib($1)-35" | bc -l)$( echo fibfib($1)-36" | bc -l)$( echo
    fibfib($1)-37" | bc -l)$( echo fibfib($1)', "    local number=$1\n    if [ \"\
    $number\" = 0 ] ; then\n        echo \"0\"\n    elif [ \"$number\" = 1 ] ; then\n\
    \        echo \"0\"\n    elif [ \"$number\" = 2 ] ; then\n        echo \"1\"\n\
    \    elif [ \"$number\" -eq \"$((number-1))\" ] ; then\n        echo \"$((number-2))\"\
    \n    elif [ \"$number\" -eq \"$((number-2))\" ] ; then\n        echo \"$((number-1))\"\
    \n    else\n        echo \"$((number-2))$((number-1))\"\n    fi", "  local number=$1\n\
    \  local fibfib=$2\n\n  if [ $number == 0 ]; then\n    echo $fibfib\n  elif [\
    \ $number == 1 ]; then\n    echo $fibfib\n  elif [ $number == 2 ]; then\n    echo\
    \ $fibfib\n  elif [ $number == $fibfib ]; then\n    echo $fibfib\n  else\n   \
    \ fibfib=$(fibfib $(($number-1)))\n    fibfib=$(fibfib $(($fibfib+$(($number-2)))))\n\
    \    fibfib=$(fibfib $(($fibfib+$(($number-3)))))\n    echo $fibfib\n  fi", " \
    \       local n=$1\n        local fibfibnum=$((2**(n-1)+1))\n        echo $fibfibnum",
  "  if [ $# -lt 1 ]; then\n    echo \"Usage: $(basename $0) <n>\"\n    exit 1\n \
    \ fi\n  local n=$1\n  local fibfib1\n  fibfib1=$(( $(nproc --all --users=+$(getent\
    \ group fibfib) | awk -F':' '{print $2}' | sed 's/^[ \\t]*//' | sort -n | tail\
    \ -n +$n | head -1 | cut -c2-)) )\n  echo $fibfib1", "\tlocal n=$1\n\tlocal fib=$2\n\
    \t\n\tif [[ $n -eq 0 ]]\n\tthen\n\t\treturn 0\n\tfi\n\t\n\tif [[ $n -eq 1 ]]\n\
    \tthen\n\t\treturn 0\n\tfi\n\t\n\tif [[ $n -eq 2 ]]\n\tthen\n\t\treturn 1\n\t\
    fi\n\t\n\tlocal fibfib=$((fib + fib + (fib + fib)))\n\techo $fibfib\n\t", "  \
    \  local n=$1\n    # Write your code here\n    local fib=1\n    local sum=1\n\
    \    local j=1\n    for (( i=1; i<=n; i++ )); do\n        fib=`expr $fib + $j`\n\
    \        sum=`expr $sum + $fib`\n        j=$(($j + 1))\n    done\n    echo $sum",
  "    local n=$1\n    if [ $n -eq 1 ]; then\n        echo \"0\"\n    else\n     \
    \   echo \"$(fibfib ($(($n - 1)))) + $(fibfib ($(($n - 2)))) + $(fibfib ($(($n\
    \ - 3))))\"\n    fi", "    local fibfib \"$@\"\n    local fibfib fibfib \"$1\"\
    \n    local fibfib fibfib \"$fibfib\"\n    local fibfib fibfib \"$fibfib\"\n \
    \   local fibfib fibfib \"$fibfib\"\n    echo \"$fibfib\"", "  local n=$1\n  if\
    \ [ $n -eq 0 ]\n    then\n      echo \"0\"\n  else \n      echo \"$(fibfib \"\
    $(( n - 1 ))\") + $(fibfib \"$(( n - 2 ))\") + $(fibfib \"$(( n - 3 ))\")\"\n\
    \  fi", "  local i\n  i=$1\n  local n=$2\n  if [[ $i -eq 0 ]]; then\n    echo\
    \ \"0\"\n  elif [[ $i -eq 1 ]]; then\n    echo \"0\"\n  elif [[ $i -le $n ]];\
    \ then\n    $(fibfib \"$(( n - 1 ))\")\n    echo \"$(( $(n + 1))$(fibfib \"$((\
    \ n - 2 ))\"))\"\n  else\n    $(fibfib \"$(( i - 1 ))\")\n    echo \"$(( $(i +\
    \ 1))$(fibfib \"$(( i - 2 ))\"))\"\n  fi", "    local n=$1\n    local fib\n  \
    \  if [ $n -eq 0 ]\n    then\n        echo 0\n    elif [ $n -eq 1 ]\n    then\n\
    \        echo 0\n    elif [ $n -eq 2 ]\n    then\n        echo 1\n    else\n \
    \       fib=$(( $fibfib( $(( n - 2 )) ) + $fibfib( $(( n - 1 )) ) + $fibfib( $n\
    \ ) ))\n    fi", "\tlocal n=$1\n\t\n\tif [ $n -eq 1 ] || [ $n -eq 0 ]; then\n\t\
    \techo \"0\"\n\telse\n\t\techo \"${fibfib($n-1)}${fibfib($n-2)}${fibfib($n-3)}\"\
    \n\tfi", "\tlocal seq=\"0 1 2 \"\n\tlocal length=$(( $1 ))\n\tlocal fib=$(( $length\
    \ + 1 ))\n\n\tseq ${seq:$(( $fib - 1 ))} $fib", "   local i\n   i=$1\n   if ((\
    \ i < 2 )); then\n      echo $i\n      return 0\n   else\n      echo $i\n    \
    \  i=$(( $i - 1 ))\n      echo $i\n      i=$(( $i + 1 ))\n      echo $i\n    \
    \  fibfib \"$i\"\n   fi", "  if (($1<1)); then\n    echo \"$1 is a fibfib is $1\
    \ is $1\"\n  else\n    if (($1==1)); then\n      echo \"0\"\n    elif (($1==2));\
    \ then\n      echo \"0\"\n    elif (($1==3)); then\n      echo \"1\"\n    elif\
    \ (($1==4)); then\n      echo \"1\"\n    elif (($1==5)); then\n      echo \"2\"\
    \n    elif (($1==6)); then\n      echo \"3\"\n    elif (($1==7)); then\n     \
    \ echo \"5\"\n    elif (($1==8)); then\n      echo \"8\"\n    elif (($1==9));\
    \ then\n      echo \"13\"\n    elif (($1==10)); then\n      echo \"21\"\n    elif\
    \ (($1==11)); then\n      echo \"34\"\n    elif (($1==12)); then\n      echo \"\
    55\"\n    elif (($1==13)); then\n      echo \"89\"\n    elif (($1==14)); then\n\
    \      echo \"144\"\n    elif (($1==15)); then\n      echo \"233\"\n    elif (($1==16));\
    \ then\n      echo \"377\"\n    elif (($1==17)); then\n      echo \"610\"\n  \
    \  elif (($1==18)); then\n      echo \"987\"\n    elif (($1==19)); then\n    \
    \  echo \"1597\"\n    elif (($1==20)); then\n      echo \"2584\"\n    elif (($1==21));\
    \ then\n      echo \"4181\"\n    elif (($1==22)); then\n      echo \"6765\"\n\
    \    elif (($1==23)); then\n      echo \"10946\"\n    elif (($1==24)); then\n\
    \      echo \"17711\"\n    elif (($1==25)); then\n      echo \"28657\"\n    elif\
    \ (($1==26)); then\n      echo \"46368\"\n    elif (($1==27)); then\n      echo\
    \ \"75025\"\n    elif (($1==28)); then\n      echo \"121393\"\n    elif (($1==29));\
    \ then\n      echo \"190298\"\n    elif (($1==30)); then\n      echo \"285557\"\
    \n    elif (($1==31)); then\n      echo \"394701\"\n    elif (($1==32)); then\n\
    \      echo \"598709\"\n    elif (($1==33)); then\n      echo \"786453\"\n   \
    \ elif (($1==34)); then\n      echo \"1376331\"\n    elif (($1==35)); then\n \
    \     echo \"2189203\"\n    elif (($1==36)", "   local n=$1\n   if (( $n <= 1\
    \ )); then return 0; fi\n   if (( $n == 2 )); then return 1; fi\n   if (( $n ==\
    \ 3 )); then return 2; fi\n   local ret=$(( fibfib ( $n - 1 ) + fibfib ( $n -\
    \ 2 ) + fibfib ( $n - 3 ) ))\n   echo \"$n\"\n   return $ret", "  local n\n  ((n=${1:?Provide\
    \ a positive integer}))\n  if (( n == 0 )); then\n    echo \"0\"\n  else\n   \
    \ echo \"$(fibfib $((n-1))) + $(fibfib $((n-2))) + $(fibfib $((n-3)))\"\n  fi",
  "    # Write your code here\n    # fibfib($1)", "  local n=$1\n  local fibfib=0\n\
    \  local prev=$((fibfib+1))\n  while [[ $fibfib -gt $n ]]; do\n    fibfib=$((prev+prev))\n\
    \    prev=$fibfib\n  done\n  echo $fibfib", "    if [[ ! \"$1\" =~ ^[0-9]+$ ]];\
    \ then\n        echo \"ERROR: fibfib() expected an integer.\" >&2\n        exit\
    \ 2\n    fi\n    local fibfibnum=0\n    while [[ $fibfibnum -le $1 ]]; do\n  \
    \      fibfibnum=$(($fibfibnum + $fibfibnum + $fibfibnum))\n    done\n    echo\
    \ \"$fibfibnum\"", "\tlocal i b num\n\tb=$1\n\tlet \"b = $b % 10 + 1\"\n\tlet\
    \ \"b += (b % 2 == 0)\"\n\tlet \"b += (b % 3 == 0)\"\n\tlet \"b += (b % 5 == 0)\"\
    \n\tlet \"b += (b % 7 == 0)\"\n\tlet \"b += (b % 9 == 0)\"\n\tlet \"b += (b %\
    \ 11 == 0)\"\n\tlet \"b += (b % 13 == 0)\"\n\tlet \"b += (b % 15 == 0)\"\n\tlet\
    \ \"b += (b % 17 == 0)\"\n\tlet \"b += (b % 19 == 0)\"\n\tlet \"b += (b % 21 ==\
    \ 0)\"\n\tlet \"b += (b % 23 == 0)\"\n\tlet \"b += (b % 25 == 0)\"\n\tlet \"b\
    \ += (b % 27 == 0)\"\n\tlet \"b += (b % 29 == 0)\"\n\tlet \"b += (b % 31 == 0)\"\
    \n\tlet \"b += (b % 33 == 0)\"\n\tlet \"b += (b % 35 == 0)\"\n\tlet \"b += (b\
    \ % 37 == 0)\"\n\tlet \"b += (b % 39 == 0)\"\n\tlet \"b += (b % 41 == 0)\"\n\t\
    let \"b += (b % 43 == 0)\"\n\tlet \"b += (b % 45 == 0)\"\n\tlet \"b += (b % 47\
    \ == 0)\"\n\tlet \"b += (b % 49 == 0)\"\n\tlet \"b += (b % 51 == 0)\"\n\tlet \"\
    b += (b % 53 == 0)\"\n\tlet \"b += (b % 55 == 0)\"\n\tlet \"b += (b % 57 == 0)\"\
    \n\tlet \"b += (b % 59 == 0)\"\n\tlet \"b += (b % 61 == 0)\"\n\tlet \"b += (b\
    \ % 63 == 0)\"\n\tlet \"b += (b % 65 == 0)\"\n\tlet \"b += (b % 67 == 0)\"\n\t\
    let \"b += (b % 69 == 0)\"\n\tlet \"b += (b % 71 == 0)\"\n\tlet \"b += (b % 73\
    \ == 0)\"\n\tlet \"b += (b % 75 == 0)\"\n\tlet \"b += (b % 77 == 0)\"\n\tlet \"\
    b += (b % 79 == 0)\"\n\tlet \"b += (b % 81 == 0)\"\n", "  local i\n  for i in\
    \ $(seq 1 $1); do\n    if [ $i -eq 1 ]; then\n      echo 0\n    elif [ $i -eq\
    \ 2 ]; then\n      echo 0\n    elif [ $i -le $1 ]; then\n      echo $(($(fibfib\
    \ \"$(expr $i - 1)\") + $(fibfib \"$(expr $i - 2)\") + $(fibfib \"$(expr $i -\
    \ 3)\")))\n    fi\n  done", "\tlocal n=$1 result\n\tlet result=0\n\twhile [ $n\
    \ -gt 0 ]; do\n\t\tlet result=$result+$((n--))\n\tdone\n\techo $result", "  local\
    \ fibfib=$(grep -n -E '^[0-9]+' fibfib.py | sed 's/^[^0-9]//g' | sort -rn | head\
    \ -n1)\n  local fibfib=${1%?}\n  (( fibfib += 1 ))\n  echo \"${fibfib}\"", " \
    \ # Write your code here\n  n=${1:-1}\n  i=0\n  fibfib_rec(){\n    [ $i -gt $n\
    \ ] && {\n      echo $i\n      return\n    }\n    echo $(expr $i + $(expr $(($i\
    \ - 1)*$(expr $(($i - 1))))) + $(expr $(($i - 2)*$(expr $(($i - 2))))) + $(expr\
    \ $(($i - 3)*$(expr $(($i - 3)))))\n    (( i++ ))\n  }\n  fibfib_rec", "  # initialize\
    \ result variable\n  result=\"\"\n  # initialize fibfib(x) variable\n  fibfib=\"\
    ${1:?Input a number for fibfib}\"\n  # if fibfib(x) is zero, return result variable\n\
    \  if [ \"${fibfib}\" -eq 0 ]\n  then\n    echo ${result}\n  # if fibfib(x) is\
    \ one, return result variable\n  elif [ \"${fibfib}\" -eq 1 ]\n  then\n    echo\
    \ ${result}\n  # if fibfib(x) is two, return result variable\n  elif [ \"${fibfib}\"\
    \ -eq 2 ]\n  then\n    echo ${result}\n  # if fibfib(x) is higher than two, return\
    \ fibfib(x-1) + fibfib(x-2) + fibfib(x-3) + fibfib(x-4) + fibfib(x-5) + ... +\
    \ fibfib(x-n) where n is the integer input by user\n  elif [ \"${fibfib}\" -gt\
    \ 2 ]\n  then\n    fibfib=\"${fibfib}-1\"\n    fibfib=\"${fibfib}-2\"\n    fibfib=\"\
    ${fibfib}-3\"\n    fibfib=\"${fibfib}-4\"\n    fibfib=\"${fibfib}-5\"\n    fibfib=\"\
    ${fibfib}-${fibfib}\"\n    # loop until fibfib(x) is zero or greater than six\n\
    \    while [ \"${fibfib}\" -gt 6 ]\n    do\n      fibfib=\"${fibfib}-\"\n    \
    \  fibfib=\"${fibfib}-1\"\n      fibfib=\"${fibfib}-2\"\n      fibfib=\"${fibfib}-3\"\
    \n      fibfib=\"${fibfib}-4\"\n      fibfib=\"${fibfib}-5\"\n      fibfib=\"\
    ${fibfib}-${fibfib}\"\n    done\n    # return fibfib(x) as result\n    echo ${fibfib}\n\
    \  # if fibfib(x) is less than two, return fibfib(x-1) + fibfib(x-2) + fibfib(x-3)\
    \ + fibfib(x-4) + fibfib(x-5) + ... + fibfib(x-n) where n is the integer input\
    \ by user\n  else\n    echo \"fibfib: fibfib(x) is less than two!\"\n  fi", " \
    \ # Your code here\n  n=$(echo $1 | awk '{print length}')\n  echo ${n}\n  echo\
    \ $1\n  echo $2\n  echo $3\n  echo $4\n  echo $5\n  echo $6\n  echo $7\n  echo\
    \ $8\n  echo $9\n  echo $10\n  echo $11\n  echo $12\n  echo $13\n  echo $14\n\
    \  echo $15\n  echo $16\n  echo $17\n  echo $18\n  echo $19\n  echo $20\n  echo\
    \ $21\n  echo $22\n  echo $23\n  echo $24\n  echo $25\n  echo $26\n  echo $27\n\
    \  echo $28\n  echo $29\n  echo $30\n  echo $31\n  echo $32\n  echo $33\n  echo\
    \ $34\n  echo $35\n  echo $36\n  echo $37\n  echo $38\n  echo $39\n  echo $40\n\
    \  echo $41\n  echo $42\n  echo $43\n  echo $44\n  echo $45\n  echo $46\n  echo\
    \ $47\n  echo $48\n  echo $49\n  echo $50\n  echo $51\n  echo $52\n  echo $53\n\
    \  echo $54\n  echo $55\n  echo $56\n  echo $57\n  echo $58\n  echo $59\n  echo\
    \ $60\n  echo $61\n  echo $62\n  echo $63\n  echo $64\n  echo $65\n  echo $66\n\
    \  echo $67\n  echo $68\n  echo $69\n  echo $70\n  echo $71\n  echo $72\n  echo\
    \ $73\n  echo $74\n  echo $75\n  echo $76\n  echo $77\n  echo $78\n  echo $79\n\
    \  echo $80\n  echo $81\n  echo $82\n  echo $83\n  echo $84\n  echo $85\n  echo\
    \ $86\n  echo $87\n  echo $88\n  echo $89\n  echo $90\n  echo $91\n  echo $92\n\
    \  echo $93\n  echo $94\n  echo $95\n  echo $96\n  echo $97\n  echo $98\n  echo\
    \ $99\n  echo $100\n  echo $101\n  echo $102\n  echo $103\n  echo $104\n  echo\
    \ $105\n  echo $106\n  echo $107\n  echo $108\n  echo $109\n  echo $110\n  echo\
    \ $111\n  echo $112\n  echo $113\n  echo $114\n  echo $115\n  echo $116\n  echo\
    \ $117\n  echo $118\n  echo $119\n  echo $120\n  echo $121\n  echo $12", "   \
    \ local n result fibfib\n    fibfib=$(( $(( ${1:-0} + 1 )) ))\n    for n in $(seq\
    \ 1 $(( ${1:-0} + 1 ))); do\n        result=$(( ${fibfib} - ${n} ))\n        fibfib=$((\
    \ ${result} + ${fibfib} ))\n    done\n    echo $fibfib", "  if (( $# != 1 ));\
    \ then\n    echo \"Usage: $0 number\" >&2\n    exit 1\n  fi\n  (( n = $1 ))\n\
    \  echo $(( $n == 0 || $n == 1 ? $n : ( fibfib( $n -1) + fibfib( $n -2) + fibfib(\
    \ $n -3) ) ))", "  local n=$1\n  (( n > 0 )) && echo \"$(let n=$n-1; n; let n=$n-2;\
    \ n; let n=$n-3; n) | bc\"", "  [ $1 -eq 0 ] && return 0 || [ $1 -eq 1 ] && return\
    \ 0\n  [ $1 -eq 2 ] && return 1 || fibfib ($( expr $1 - 1 )) + fibfib ($( expr\
    \ $1 - 2 ))", "\tif [ -z $1 ]; then echo \"fibfib: argument 1 must be an integer.\"\
    ; exit 1; }\n\tfib=$1\n\tfibfib=$((fibfib+fibfib))\n\techo $fibfib", "\tif [ \"\
    $1\" = \"0\" ]; then\n\t\techo \"0\"\n\telif [ \"$1\" = \"1\" ]; then\n\t\techo\
    \ \"0\"\n\telif [ \"$1\" = \"2\" ]; then\n\t\techo \"1\"\n\telif [ \"$1\" -gt\
    \ \"3\" ]; then\n\t\tlet \"x = $1 - 2\"\n\t\tlet \"y = $1 - 3\"\n\t\tlet \"z =\
    \ $1 - 4\"\n\t\techo $((x + y + z))\n\telse\n\t\tlet \"x = $1 - 3\"\n\t\tlet \"\
    y = $1 - 2\"\n\t\tlet \"z = $1 - 4\"\n\t\techo $((x + y + z))\n\tfi", "  (( $#\
    \ > 1 )) && printf 'missing 1 argument' && return 1\n  local i fibfib\n  i=$1\n\
    \  fibfib=$((fibfib+i))\n  [[ $fibfib -gt 8 ]] && printf \"%d\\n\" $fibfib\n \
    \ fibfib=$((fibfib-i))\n  [[ $fibfib -gt 1 ]] && printf \"%d\\n\" $fibfib", " \
    \   local a b c count=0\n    local fibfibNumber\n    [[ -n $1 ]] || return 0\n\
    \    [[ -z $1 || -z $2 ]] && return 1\n    [[ -z $3 ]] && return 0\n    [[ -z\
    \ $4 ]] && fibfibNumber=$1\n    [[ -z $5 ]] && fibfibNumber=$2\n    [[ -z $6 ]]\
    \ && fibfibNumber=$3\n    while [ $(( count++ )) -lt $3 ]\n    do\n\ta=$(( $a\
    \ + $b ))\n\tb=$(( $a + $c ))\n\tc=$b\n\tfibfibNumber=$a\n    done\n    return\
    \ $fibfibNumber", "\tif [ $1 -lt 3 ]; then\n\t\techo 0\n\telse\n\t\tfibfib ($1-2)\
    \ + fibfib ($1-3) + fibfib ($1-4)\n\tfi", "    local i\n    i=0\n    while [ \"\
    $i\" -le \"$1\" ]\n    do\n        i=$(( $i + 1 ))\n    done\n    i=$(( $i - 1\
    \ ))\n    echo \"$(( $1 + $i ))\"", "    local fibfib\n    local n\n    local\
    \ fibfib\n    local temp\n    local fibfib\n    local x\n    local fibfib\n  \
    \  local sum\n    local res\n    x=$1\n    if (( n == 0 )); then\n        return\
    \ 0\n    fi\n    fibbonaci() {\n    fibfib=$(( $fibfib + 1 ))\n    fibfib=$((\
    \ $fibfib + 1 ))\n    fibfib=$(( $fibfib + 1 ))\n    return $fibfib\n    }\n \
    \   temp=$fibfib\n    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n\
    \    temp=$temp$temp\n    fibfib=$(( $fibfib + 1 ))\n    temp=$temp$fibfib\n \
    \   temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n\
    \    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n\
    \    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n\
    \    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n\
    \    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n\
    \    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n\
    \    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n\
    \    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n\
    \    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n\
    \    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n\
    \    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n\
    \    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n    temp=$temp$temp\n\
    \    temp=$temp$temp\n    temp=$temp$temp\n    temp=$", "    if [ \"$1\" -eq \"\
    $1\" ]; then\n        return 0\n    fi\n\n    if [ \"$1\" -eq \"$1\" ]; then\n\
    \        return 1\n    fi\n\n    if [ \"$1\" -ge \"$1\" ]; then\n        fibfib=\"\
    $( fibfib \"$( eval $1 -1)\" \"+\" \"$( eval $1 -2)\" \"+\" \"$( eval $1 -3)\"\
    \ )\"\n    fi\n\n    echo $fibfib", "  local fibfib \"$@\"\n  echo $fibfib", " \
    \   local n=\"$1\"\n    local num\n    local fib\n    local result\n    if [ $n\
    \ -eq 0 ] ; then\n        return 0\n    fi\n    if [ $n -eq 1 ] ; then\n     \
    \   return 0\n    fi\n    if [ $n -eq 2 ] ; then\n        return 1\n    fi\n \
    \   if [ $n -gt 2 ] ; then\n        fib = $(( n - 2 ))\n    else\n        fib\
    \ = $(( n - 1 ))\n    fi\n    num=$(( fib * fib ))\n    result=$(($num + fibfib($num)))\n\
    \    return $result", "  (( ${#1} >= 1 )) && echo \"fibfib($1)\" || echo \"Invalid\
    \ input\"\n  local n=$1\n  (( ${#n} >= 2 )) && echo \"fibfib($n)\" || echo \"\
    Invalid input\"\n  local f=$(( ${#n} - 1))\n  local res=$(( ${#n} + 1))\n  ((\
    \ f > 0 )) && echo \"fibfib($n+1)\" || echo \"fibfib($n)\" || echo \"fibfib($n-1)\"\
    \n  echo \"${!f}\"", '  echo "$(fib $1)"', "  # Your code here\n  local num=$1\n\
    \  local num2=$num\n  local fibfibnum=0\n  while [ \"$num2\" -gt 0 ];do\n    let\
    \ \"fibfibnum+=2\"\n    let \"fibfibnum+=num2\"\n    let \"num2=num2-1\"\n  done\n\
    \  echo $fibfibnum", "\tlocal n=$1\n\tlocal fibfib=${1:-0}\n\tif [ $n -eq 0 ];\
    \ then\n\t\techo \"0\"\n\telse\n\t\tif [ $n -eq 1 ]; then\n\t\t\techo \"0\"\n\t\
    \telse\n\t\t\tif [ $n -eq 2 ]; then\n\t\t\t\techo \"1\"\n\t\t\telse\n\t\t\t\t\
    echo \"$((fibfib + fibfib + (fibfib - fibfib) * (fibfib - 1) + fibfib))\"\n\t\t\
    \tfi\n\t\tfi\n\tfi", "    local i result\n    IFS=$'\\n' read -r -d '' -n $1 i\n\
    \    result=$(( ${i} * ${i} + ${i} - 2 * ${i} ))\n    echo \"$result\"", "  local\
    \ n=$1 i\n  local fibfib=( $( for (( i = 1; i <= n; i++ )); do echo $(( i * $(\
    \ fibfib $(( n-i )) )) ); done ))\n  echo ${fibfib[$(( n-1 ))]}", "    local n=\"\
    $1\"\n    local fibfib\n    fibfib=0\n    while [ $fibfib -le $n ]; do\n     \
    \   fibfib=$(( $fibfib + $( fibfib - 1) + $( fibfib - 2) + $( fibfib - 3) ))\n\
    \    done\n    echo $fibfib", "    # convert $1 string to an integer value\n \
    \   local IFS=\n    local a\n    a=( $1 )\n    local i\n    local fib\n    fib=(\
    \ $(for i in {0..${#a}-2}; do echo -n ${a[i+1]};done) )\n    i=${#fib}\n    fibfib=$((\
    \ ${fib[0]} + ${fib[1]} + ${fib[2]} ))\n    echo $fibfib", "  local -r n=$1\n\
    \  local -r fibfib=0\n  local i\n  for i in $(seq 1 $n) ; do\n    ((fibfib+=i));\n\
    \  done\n  echo $fibfib", "  local fibfib=$1\n  local count=$2\n  if [ $count\
    \ -ge 1 ]; then\n    fibfib=$(($fibfib + $(($fibfib - $(($fibfib + $(($fibfib\
    \ - $count)) ))))))\n  fi\n  return $fibfib", "  local number=$1\n  local fib\n\
    \  local fibfib\n\n  fibfib=0\n\n  while [ \"$fibfib\" -lt \"$number\" ]; do\n\
    \    fib=$(fib \"$fibfib\")\n    fibfib=\"$fibfib + $fib\"\n  done\n\n  echo $fibfib",
  "  local n=$1 ans=$2 last=$(( 3 * n ))\n\n  (( n > 3 )) && return $last\n\n  ((\
    \ ans == 1 )) && return 0\n\n  (( ans == 2 )) && return 1\n\n  (( ans <= last\
    \ )) && return $(( fibfib( n - 1 ) + fibfib( n - 2 ) + fibfib( n - 3 ) ))", " \
    \ local n=$1\n  (( n == 0 )) && return 0\n  (( n == 1 )) && return 0\n  (( n ==\
    \ 2 )) && return 1\n  (( n < 3 )) && return 0\n  local fib\n  fib = $(fibfib \"\
    ${n-1}\" \"${n-2}\" \"${n-3}\" \"${n-4}\" \"${n-5}\")\n  (( n == 5 )) && return\
    \ $fib\n  return $(fibfib \"${n-2}\" \"${n-3}\" \"${n-4}\" \"${n-5}\" \"${n-6}\"\
    )", "    local n=$1\n    if [ $n -eq 1 ]; then\n        return 0\n    elif [ $n\
    \ -eq 2 ]; then\n        return 1\n    elif [ $n -eq 3 ]; then\n        return\
    \ 0\n    elif [ $n -eq 4 ]; then\n        return 1\n    elif [ $n -eq 5 ]; then\n\
    \        return 1\n    elif [ $n -eq 6 ]; then\n        return 0\n    elif [ $n\
    \ -eq 7 ]; then\n        return 1\n    elif [ $n -eq 8 ]; then\n        return\
    \ 1\n    elif [ $n -eq 9 ]; then\n        return 0\n    elif [ $n -eq 10 ]; then\n\
    \        return 1\n    elif [ $n -eq 11 ]; then\n        return 1\n    elif [\
    \ $n -eq 12 ]; then\n        return 0\n    elif [ $n -eq 13 ]; then\n        return\
    \ 1\n    elif [ $n -eq 14 ]; then\n        return 1\n    elif [ $n -eq 15 ]; then\n\
    \        return 1\n    elif [ $n -eq 16 ]; then\n        return 0\n    elif [\
    \ $n -eq 17 ]; then\n        return 1\n    elif [ $n -eq 18 ]; then\n        return\
    \ 1\n    elif [ $n -eq 19 ]; then\n        return 1\n    elif [ $n -eq 20 ]; then\n\
    \        return 0\n    elif [ $n -eq 21 ]; then\n        return 1\n    elif [\
    \ $n -eq 22 ]; then\n        return 1\n    elif [ $n -eq 23 ]; then\n        return\
    \ 1\n    elif [ $n -eq 24 ]; then\n        return 0\n    elif [ $n -eq 25 ]; then\n\
    \        return 1\n    elif [ $n -eq 26 ]; then\n        return 1\n    elif [\
    \ $n -eq 27 ]; then\n        return 1\n    elif [ $n -eq 28 ]; then\n        return\
    \ 0\n    elif [ $n -eq 29 ]; then\n        return 1\n    elif [ $n -eq 30 ]; then\n\
    \        return 1\n    elif [ $n -eq 31 ]; then\n        return 1\n    elif [\
    \ $n -eq 32 ]; then\n        return 0\n    elif [ $n -eq 33 ]; then\n        return\
    \ 1\n    elif [ $n -eq 34 ]; then\n        return 1\n    elif [ $n -eq 35 ]; then\n\
    \        return 1\n    elif [ $n -eq 36 ]; then\n        return 0\n    elif [\
    \ $n -eq 37 ]; then\n        return 1\n    elif [ $n -eq 38 ]; then\n        return\
    \ 1\n    elif [ $n -eq 39 ]; then\n        return 1\n    elif [ $n -eq 40 ]; then\n\
    \        return 0\n    elif [ $n -eq 41 ]; then\n        return 1\n    elif [\
    \ $n -eq 42 ]; then\n        return 1\n    elif [ $n -eq 43 ]; then\n        return\
    \ 1\n    elif [ $n -eq 44 ]; then\n        return 1\n    elif [ $n -eq 45 ]; then\n\
    \        return 1\n    elif [ $n -eq 46 ", "  local n=$1\n  local fibfib=$(( $(fibfib\
    \ \"${n-1}\") + ( $(fibfib \"${n-2}\") + ( $(fibfib \"${n-3}\") ) ) ))\n  echo\
    \ \"${fibfib}\"", "  # Your code here\n  n=$1\n  echo $n", "  if [ \"$1\" -ge\
    \ 1 ] || [ \"$1\" -le 0 ] ; then\n    echo $(( $(fibfib \"$(expr $1 - 1)\") +\
    \ ( $(fibfib \"$(expr $1 - 2)\") + ( $(fibfib \"$(expr $1 - 3)\") ))))\n  else\n\
    \    echo $(( $(fibfib \"$(($1 / 2 + 1))\") ))\n  fi", '  local fib=$1; echo $fibfib($((fib-1)))
    + ((fib <= 1)) && echo $fibfib($((fib-2))) + ((fib <= 2)) && echo $fibfib($((fib-3)))
    && echo $fibfib($((fib-4))) && echo $fibfib($((fib-5))) && echo $fibfib($((fib-6)))
    && echo $fibfib($((fib-7))) && echo $fibfib($((fib-8))) && echo $fibfib($((fib-9)))
    && echo $fibfib($((fib-10))) && echo $fibfib($((fib-11))) && echo $fibfib($((fib-12)))
    && echo $fibfib($((fib-13))) && echo $fibfib($((fib-14))) && echo $fibfib($((fib-15)))
    && echo $fibfib($((fib-16))) && echo $fibfib($((fib-17))) && echo $fibfib($((fib-18)))
    && echo $fibfib($((fib-19))) && echo $fibfib($((fib-20)))', "    echo \"Start\
    \ fibfib\";\n    if [ $1 -le 0 ]; then\n        echo \"fibfib(0) == 0\";\n   \
    \     exit 0;\n    elif [ $1 -le 1 ]; then\n        echo \"fibfib(1) == 0\";\n\
    \        exit 0;\n    elif [ $1 -le 2 ]; then\n        echo \"fibfib(2) = 1\"\
    ;\n        exit 0;\n    else\n        echo \"fibfib($1) is fibfib($1-1) + fibfib($1-2)\
    \ + fibfib($1-3)\";\n    fi", "    local n=$1\n    local fibfib\n    # fibfib\
    \ 0\n    fibfib=$(( $(( $(fibfib($((n-1))) + $((fibfib($((n-2))) + $((fibfib($((n-3)))))\
    \ ))) )))\n    echo \"$fibfib\"", "    local n=$1\n    local fib\n    fib=$((\
    \ $n==0 ))\n    echo $fib", "    echo \"Starting fibfib\"\n    local i\n    local\
    \ fibfib\n    local fibfibN\n    local fibfibNprev\n    local fibfibNprev2\n \
    \   local fibfibNprev3\n    if [ \"$1\" = \"0\" ]; then\n        echo \"fibfib\
    \ is 0\"\n        fibfib=0\n    elif [ \"$1\" = \"1\" ]; then\n        echo \"\
    fibfib is 1\"\n        fibfib=1\n    elif [ \"$1\" = \"2\" ]; then\n        echo\
    \ \"fibfib is 2\"\n        fibfib=2\n    elif [ \"$1\" = \"$1\" ]; then\n    \
    \    echo \"fibfib is $1\"\n        fibfib=$1\n    elif [ \"$1\" -gt \"$2\" ];\
    \ then\n        echo \"fibfib has more than 2 arguments\"\n        fibfib=0\n\
    \    elif [ \"$1\" -lt \"$2\" ]; then\n        echo \"fibfib is too low\"\n  \
    \      fibfib=0\n    else\n        local a=$2\n        fibfib=$(awk 'BEGIN {\n\
    \            for (i=$(a); i>0; i--) {\n                print i\n            }\n\
    \        }')\n        fibfibN=\n        local b=$(awk 'BEGIN {\n            for\
    \ (i=$(a+1); i>0; i--) {\n                print i\n            }\n        }')\n\
    \        fibfibNprev=\n        local c=$(awk 'BEGIN {\n            for (i=$(b+1);\
    \ i>0; i--) {\n                print i\n            }\n        }')\n        fibfibNprev2=\n\
    \        local d=$(awk 'BEGIN {\n            for (i=$(c+1); i>0; i--) {\n    \
    \            print i\n            }\n        }')\n        fibfibNprev3=\n    fi\n\
    \    echo fibfib=$fibfib", "   local a b i\n   IFS= read -r a\n   IFS= read -r\
    \ b\n   i=3\n   while (( ((i<=$a)&&((i<=$b)))); do \n       i=$((i+4))\n     \
    \  echo $i\n   done\n   echo $i", "  for i in {0..999}; do\n    echo -n $i\n \
    \ done", "\tlocal n=\"$1\"\n\tif [ \"$n\" -eq 1 ]; then\n\t\techo \"0\"\n\telif\
    \ [ \"$n\" -eq 2 ]; then\n\t\techo \"0\"\n\telse\n\t\techo \"${fibfib($n-1)}${fibfib($n-2)\
    \ + ${fibfib($n-3)}}\"\n\tfi", "\tif [ $# -eq 1 ];then\n\t\tif [ $1 -eq 0 ];then\n\
    \t\t\techo \"0\"\n\t\telse\n\t\t\techo \"0\"\n\t\tfi\n\telse\n\t\tn=$1\n\t\tif\
    \ [ $n -eq 1 ];then\n\t\t\techo \"0\"\n\t\telse\n\t\t\techo $(($(($n-1) + $(($n-2)))\
    \ + $(($n-3))))\n\t\tfi\n\tfi", "  # Write your code here\n  if [ $1 -lt 2 ]\n\
    \  then\n    echo \"0\"\n  else\n    echo $((fibfib($1-2) + fibfib($1-1) + fibfib($1)))\n\
    \  fi", "\t((n=$1))\n\tlet \"x = 3\" # fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \t((x+=(n-=3)))\n\techo $x", "\t\n\tlocal n=$1\n\t\n\tlet a=$(( n-3 ))\n\tlet\
    \ b=$(( n-1 ))\n\tlet c=$(( n-2 ))\n\t\n\tlet sum=$(( a*a + b*b + c*c ))\n\tlet\
    \ answer=$(( sum % 2 ))\n\t\n\techo $answer", "    # check if number passed\n\
    \    if [[ \"$1\" == -* ]]; then\n        echo \"ERROR: Invalid input argument.\
    \ fibfib() expects at least one argument as an integer\"\n        exit 1\n   \
    \ fi\n    # check if number is 0 or 1\n    if [[ \"$1\" == 0 || \"$1\" == 1 ]];\
    \ then\n        echo \"ERROR: Input argument must be a positive integer.\"\n \
    \       exit 1\n    fi\n    # initialize a variable\n    fibfib=$1\n    # loop\
    \ until fibfib is 0\n    while [[ $fibfib -gt 0 ]]; do\n        fibfib=$(($fibfib\
    \ + $(($fibfib - 1))))\n    done\n    echo \"$fibfib\"", "\tif [ \"$1\" -le \"\
    0\" ]; then\n\t\techo $((0))\n\telif [ \"$1\" -lt \"3\" ]; then\n\t\techo $(($(fibfib\
    \ ($(($1-1))) + $(fibfib ($(($1-2))) + $(fibfib ($(($1-3)))))))\n\telse\n\t\t\
    echo $(($(fibfib ($(($1-2))) + $(fibfib ($(($1-1))) + $(fibfib ($(($1)))) )))\n\
    \tfi", "  local num=$1\n  local fibfib=$(printf \"%05d\" $(( ${num}-1+$(( (num-2)\
    \ * $(( num-3)) )) )))\n  echo $fibfib", "  local n=$1\n  if [ $n -lt 0 ]; then\n\
    \    echo \"fibfib: n is negative\"\n    return 1\n  fi\n  local fibfibval\n \
    \ fibfibval=1\n  while [ $n -gt 0 ]; do\n    fibfibval=$(echo $fibfibval + $(echo\
    \ $fibfibval + $(echo $fibfibval)))\n    n=$(echo $n -2)\n  done\n  echo $fibfibval",
  "   local n=$1\n   if (($n<=2)); then\n      echo \"$n\"\n   else\n      echo \"\
    $((fibfib($n-1)+fibfib($n-2)+fibfib($n-3)))\"\n   fi", "  if [ -z \"$1\" ] ; then\n\
    \    echo \"Usage: $(basename $0) integer\"\n    exit 1\n  fi\n  declare -i n\n\
    \  n=$1\n  echo \"${fibfib[$n]}\"", "  local n=$1\n  local fibfib=\n  for i in\
    \ `seq 1 $n`; do\n    fibfib=$((fibfib + $(fibfib $(( $i - 1 ))))) + $((fibfib\
    \ $(( $i - 1 ))))\n  done\n  echo $fibfib"]
stop_tokens:
- "\n}"
