language: sh
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=$1\n    local tmp=\"\"\n\n    for (( i=0; i<${#str}; i++ ));\
    \ do\n        if [ ${str: -i } != \"${str[i]}\" ]; then\n            tmp=\"${tmp},${str[i]}\"\
    \n        fi\n    done\n\n    local tmp2=\"\"\n    for (( i=0; i<${#str}; i++\
    \ )); do\n        if [ ${str: -i } = \"${str[i]}\" ]; then\n            if [[\
    \ ${tmp: -i } != \",\" ]]; then\n                tmp2=\"${tmp2}${str[i]}\"\n \
    \           fi\n        fi\n    done\n\n    if [ -z \"${tmp2}\" ]; then\n    \
    \    echo \"${tmp}\"\n    else\n        echo \"${tmp2}\"\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5rwjq2mp.sh: line 19: [: too many arguments

    /tmp/tmp5rwjq2mp.sh: line 19: [: too many arguments

    /tmp/tmp5rwjq2mp.sh: line 19: [: too many arguments

    /tmp/tmp5rwjq2mp.sh: line 19: [: too many arguments

    /tmp/tmp5rwjq2mp.sh: line 19: [: too many arguments

    /tmp/tmp5rwjq2mp.sh: line 26: [: too many arguments

    /tmp/tmp5rwjq2mp.sh: line 26: [: too many arguments

    /tmp/tmp5rwjq2mp.sh: line 26: [: too many arguments

    /tmp/tmp5rwjq2mp.sh: line 26: [: too many arguments

    /tmp/tmp5rwjq2mp.sh: line 26: [: too many arguments

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local IFS=$1; shift\n    local input=$1\n    local output\n\n    while\
    \ [ -n \"$input\" ]\n    do\n        output=\"$output${output#?}\"\n        local\
    \ input_count=\"${input//[^A-Za-z]}\"\n        if [ \"$input_count\" = \"\" ]\
    \ ; then\n            input_count=\"${input//[^A-Za-z,]}\"\n        fi\n     \
    \   input=\"${input%$input_count}\"\n    done\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    echo \"$1\" | sed -e 's/,/ /g' | awk '{split($1,a,\" \"); for (i=1;i<=length(a);i++)\
    \ {if (a[i] ~ /^[a-z]/) {if (a[i] ~ /[a-z]/) printf (\"%s%c\",a[i],i); else if\
    \ (a[i] ~ /[a-z]/) printf (\"%s%c\",a[i],i+2); else printf (\"%s%c\",a[i],i);\
    \ printf (\"%s\",\"_\");}else printf (\"%s%c\",a[i],i);}} print \"\"'\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: {split($1,a," "); for (i=1;i<=length(a);i++) {if (a[i]
    ~ /^[a-z]/) {if (a[i] ~ /[a-z]/) printf ("%s%c",a[i],i); else if (a[i] ~ /[a-z]/)
    printf ("%s%c",a[i],i+2); else printf ("%s%c",a[i],i); printf ("%s","_");}else
    printf ("%s%c",a[i],i);}} print ""

    awk: cmd. line:1:                                                                                                                                                                                                                                                   ^
    syntax error

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local _words=\"$1\"\n    local _word=''\n    local _words=${_words/,\
    \ /$,}\n    local _word_count=0\n    local _splits=${_words/\\s/\\n}\n    local\
    \ _splits=${_splits/,/\\\\n}\n    for _word in ${_splits}; do\n        ((_word_count+=$(_wc\
    \ -l <<< \"$_word\")));\n    done\n    echo \"$((_word_count%2))\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgso51qk2.sh: line 22: _wc: command not found

    /tmp/tmpgso51qk2.sh: line 22: ((: _word_count+=: syntax error: operand expected
    (error token is "+=")

    /tmp/tmpgso51qk2.sh: line 22: _wc: command not found

    /tmp/tmpgso51qk2.sh: line 22: ((: _word_count+=: syntax error: operand expected
    (error token is "+=")

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  # Split on whitespace only if it exists in the text\n  # '-z' means 'everything\
    \ but newlines, tabs and spaces'\n  local string=$1 string=${string//[ -z] } #\
    \ Remove all whitespace in the text\n  local words result\n  # If no whitespace\
    \ exists, split on commas\n  if [[ ${string:(-1)} == '' ]]; then\n    string=${string//[,]}\n\
    \  else\n    string=${string//[^A-Za-z0-9]}\n  fi\n  # Get the number of words\
    \ in $string\n  words=$(echo \"$string\" | wc -w)\n  # If the number of words\
    \ is odd, add the letters 'a' and 'b' to the words and reorder the words so the\
    \ letters appear as\n  # a,b,c,d,e,f,g\n  if [[ ${words} -eq 1 ]]; then\n    words=$((\
    \ ${words} + 1 ))\n    string=\"$string,a,b,c,d,e,f,g\"\n    string=${string//,/}\n\
    \    words=$(echo \"$string\" | wc -w)\n  fi\n  echo \"$words\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=\"${1}\"\n    local IFS=$','\n    local count=\"$(echo \"${str}\"\
    \ | wc -c)\"\n    if [[ \"${count}\" -gt 0 ]]; then\n        IFS=$'\\n'\n    \
    \    local word_list=\"$(echo \"${str}\" | sed -E ':a;N;$!ba;s/([^,]+),/\\1\\\
    n/g' | sed -E 's/\"([^,]+)\"/\\1/' | sed -E 's/([^a-z]+)([a-z])/\\1 \\2/g' | sort\
    \ -u)\" #sort -u\n        echo \"${word_list}\"\n    else\n        echo \"${str}\"\
    \n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local str=$1\n  local spaces_only=\n  local commas_only=\n  local letters_with_odd_order=0\n\
    \  local odd_order_letters=\n  local word_count=0\n  local words=()\n  # Split\
    \ words on whitespaces\n  IFS=$'\\n' read -r -a array <<< \"$str\"\n  for word\
    \ in \"${array[@]}\"; do\n    if [[ \"$word\" == *\"[^[:space:]]\"* ]]; then\n\
    \      words=(\"${words[@]}\" \"'$word'\")\n    elif [[ \"$word\" == *\",\" ]];\
    \ then\n      commas_only=true\n    elif [[ \"$word\" == *\" \" ]]; then\n   \
    \   spaces_only=true\n    elif [[ \"$word\" == *[A-Za-z0-9]* ]]; then\n      if\
    \ [[ \"$word\" == \"$word\" ]]; then\n        letters_with_odd_order=$((letters_with_odd_order+1))\n\
    \      else\n        odd_order_letters=$((odd_order_letters+1))\n      fi\n  \
    \  else\n      word_count=$((word_count+1))\n      words=(\"${words[@]}\" \"'$word'\"\
    )\n    fi\n  done\n  # Return odd order letters if exists\n  if [[ \"$letters_with_odd_order\"\
    \ -ne 0 ]]; then\n    words=(\"${words[@]}\" \"'$odd_order_letters'\")\n  fi\n\
    \  # Return commas if exists\n  if [[ \"$commas_only\" == true ]]; then\n    words=(\"\
    ${words[@]}\" \"','\")\n  fi\n  # Return spaces if exists\n  if [[ \"$spaces_only\"\
    \ == true ]]; then\n    words=(\"${words[@]}\" \"' '\")\n  fi\n  echo -n \"${words[*]}\"\
    \n  echo \"${word_count}\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    # Replace multiple spaces with a single space\n    local string=\"${1//[[:space:]]+/}\"\
    \n    local counter\n    # Remove any quotes, if any\n    string=\"${string//\\\
    \"}\"\n    string=\"${string//\\//}\"\n    string=\"${string//'//}\"\n    # Remove\
    \ any characters not letters or digits\n    string=\"${string//[^[:alnum:][:digit:]]/}\"\
    \n    # If no spaces exist, return number of characters odd in an alphabet with\
    \ odd order\n    if [[ ! $string =~ \" \" ]]; then\n        counter=${string::-2}\n\
    \    else\n        counter=${string::-1}\n    fi\n    echo \"$counter\"\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqgnt0mrt.sh: line 21: unexpected EOF while looking for matching
    `''''

    /tmp/tmpqgnt0mrt.sh: line 50: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local output\n    output=$(echo \"$1\" | sed 's/,/ /g')\n    output=$(echo\
    \ \"$output\" | tr '[a-z]' '[A-Z]')\n    output=$(echo \"$output\" | wc -l)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local s=${1:?}\n    local i\n    local w\n\n    i=$(echo \"$s\" | wc\
    \ -l)\n    if [ ! $i ]; then\n        echo \"\"\n    else\n        while read\
    \ -r w; do\n            i=$(echo \"$s\" | wc -l)\n            if [[ $i -eq 0 ]];\
    \ then\n                echo \"\\\"${w//,/\\\"},\\\"\\\"\\\"\"\n            else\n\
    \                echo \"\\\"${w//,/\\\"},\"\n            fi\n        done < <(echo\
    \ \"$s\")\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local split_words=$1\n    local words=$(echo $split_words | awk -F, '{print\
    \ $1}')\n    local comma=$(echo $split_words | awk -F, '{print $2}')\n    local\
    \ letters=$(echo $split_words | awk -F, '{print $3}')\n    local space=$(echo\
    \ $split_words | awk -F, '{print $4}')\n    if [[ -z \"$words\" ]]; then\n   \
    \     words=$(echo $split_words | awk -F, '{print $5}')\n    fi\n    if [[ -z\
    \ \"$comma\" ]]; then\n        comma=$(echo $split_words | awk -F, '{print $6}')\n\
    \    fi\n    if [[ -z \"$letters\" ]]; then\n        letters=$(echo $split_words\
    \ | awk -F, '{print $7}')\n    fi\n    if [[ -z \"$space\" ]]; then\n        space=$(echo\
    \ $split_words | awk -F, '{print $8}')\n    fi\n    \n    local output\n    \n\
    \    if [[ ! -z \"$words\" ]]; then\n        if [[ -z \"$comma\" ]]; then\n  \
    \          output=$(echo $words | tr ' ' ,) # comma is not in split words\n  \
    \      else\n            output=$(echo $words | tr ',' ,) # comma is in split\
    \ words\n        fi\n    else\n        output=$(echo $letters | awk '{print length}')\
    \ - $(echo $letters | awk '{print $1}') # even number of letters\n    fi\n   \
    \ \n    if [[ ! -z \"$space\" ]]; then\n        output=$(echo $output + $(echo\
    \ $space | wc -c))\n    else\n        output=$(echo $output + $(echo $output |\
    \ awk -F, '{print $1}'))\n    fi\n    \n    # print output variable with quotes\
    \ around the value so awk doesn't replace them with spaces when it reads the list\n\
    \    echo \"'$output'\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local input_string=\"${1}\"\n    local result\n    local regex=\"^\\\
    s*\"\n    local space=\"\"\n    local comma=\"\"\n\n    # find all words\n   \
    \ local all_words\n    while IFS= read -r line; do\n        if [[ $line =~ $regex\
    \ ]]; then\n            if [[ ${line##*[![:space:]]} == $space ]]; then\n    \
    \            comma=\"${line##*[![:space:]]}\"\n            else\n            \
    \    space=\"${line##*[![:space:]]}\"\n                all_words=\"${all_words},\"\
    \n            fi\n        else\n            all_words=\"${all_words} \\\"${line}\\\
    \"\"\n        fi\n    done <<< \"${input_string}\" # redirect input string as\
    \ input to 'while' loop above\n\n    # remove trailing comma\n    sed -i \"s/,$//\"\
    \ \"${all_words}\"\n\n    # remove leading space\n    sed -i \"s/^[[:space:]]*//\"\
    \ \"${all_words}\"\n    \n    # remove all spaces, single spaces, and double quotes\
    \ surrounding each word\n    sed -i \"s/^[[:space:]]*\\\"//\" \"${all_words}\"\
    \n    sed -i \"s/\\\"[[:space:]]*\\$//\" \"${all_words}\"\n    sed -i \"s/^[[:space:]]*//\"\
    \ \"${all_words}\"\n\n    # remove leading space and double quotes\n    sed -i\
    \ \"s/^\\\"//\" \"${all_words}\"\n    sed -i \"s/\\\"$//\" \"${all_words}\"\n\
    \    \n    # replace all words surrounded by double quotes with single quotes\n\
    \    sed -i \"s/\\\"/''/g\" \"${all_words}\"\n    \n    # trim space\n    sed\
    \ -i \"s/^\\s*//\" \"${all_words}\"\n    sed -i \"s/\\s*$//\" \"${all_words}\"\
    \n\n    # remove trailing space\n    sed -i \"s/\\s*$//\" \"${all_words}\"\n\n\
    \    # remove all double quotes\n    sed -i \"s/\\\"//\" \"${all_words}\"\n\n\
    \    # replace all single quotes with double quotes\n    sed -i \"s/'/\\\"/g\"\
    \ \"${all_words}\"\n\n    # remove leading space and quotes\n    sed -i \"s/^\\\
    \"//\" \"${all_words}\"\n    sed -i \"s/\\\"$//\" \"${all_words}\"\n    \n   \
    \ # remove trailing quotes\n    sed -i \"s/\\\"$//\" \"${all_words}\"\n\n    #\
    \ remove all single quotes\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    sed: can''t read : No such file or directory

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local words=\"${1}\"\n  local space=\"$(echo \"${1}\" | sed -e 's/,/, /g'\
    \ | wc -c)\"\n  local wordcount=\"$(echo \"${1}\" | sed -e 's/,/, /g' | wc -l\
    \ | tr -d \" \")\"\n\n  local lowercase=\"$(echo \"${1}\" | tr -cd [a-z])\"\n\
    \  local uppercase=\"$(echo \"${1}\" | tr -cd [A-Z])\"\n  local lettercount=\"\
    $(echo \"${1}\" | tr -cd [[:alpha:]])\"\n\n  if (( \"${space}\" == \"0\" )); then\n\
    \    echo \"\\\"${words}\\\"\"\n  else\n    echo \"\\\"${words}\\\" \\\"${space}\\\
    \" \\\"${wordcount}\\\"\"\n  fi\n\n  if (( \"${lowercase}\" == \"0\" )); then\n\
    \    echo \"\\\"${lowercase}\\\"\"\n  else\n    echo \"\\\"${lowercase}\\\" \\\
    \"${lettercount}\\\"\"\n  fi\n\n  if (( \"${uppercase}\" == \"0\" )); then\n \
    \   echo \"\\\"${uppercase}\\\"\"\n  else\n    echo \"\\\"${uppercase}\\\" \\\"\
    ${lettercount}\\\"\"\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "tr: extra operand \u2018x\u2019\nOnly one string may be given when deleting\
    \ without squeezing repeats.\nTry 'tr --help' for more information.\ntr: extra\
    \ operand \u2018x\u2019\nOnly one string may be given when deleting without squeezing\
    \ repeats.\nTry 'tr --help' for more information.\n/tmp/tmpfw6tgzpx.sh: line 29:\
    \ ((: == 0 : syntax error: operand expected (error token is \"== 0 \")\n"
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local i output\n    local str=\"$1\"\n\n    # strip out any whitespace\n\
    \    local -a stripped=()\n    while IFS= read -r word; do\n        stripped+=(\"\
    ${word// }\")\n    done < <(echo \"${str}\" | sed 's/[[:space:]]+/ /g')\n\n  \
    \  # count the lowercase-only letters and divide by 2\n    output=$(echo \"${stripped}\"\
    \ | tr '[:lower:]' '[:lower:]' | wc -c)\n    ((output++))\n\n    echo \"${stripped[@]}\"\
    \n\n    if [[ ${output} -gt 1 ]]; then\n        echo \"${output}\"\n    else\n\
    \        echo \"${stripped}\"\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  string=$1\n  result=($string)\n\n  # Remove any leading and trailing whitespace\n\
    \  result=( \"${result[@]}\" )\n  while [[ ${#result[@]} -gt 0 ]]; do\n    string=${result[0]}\n\
    \    result=( \"${result[@]:1}\" )\n  done\n\n  # Remove any whitespace from the\
    \ start and end of the words\n  result=( \"${result[@]}\" )\n  while [[ ${#result[@]}\
    \ -gt 0 ]]; do\n    string=${result[0]}\n    result=( \"${result[@]:1}\" )\n \
    \ done\n\n  # Split on commas\n  result=( \"${result[@]}\" )\n  while [[ ${#result[@]}\
    \ -gt 0 ]]; do\n    string=${result[0]}\n    result=( \"${result[@]:1}\" )\n \
    \ done\n\n  # Remove any commas from the start and end of the words\n  result=(\
    \ \"${result[@]}\" )\n  while [[ ${#result[@]} -gt 0 ]]; do\n    string=${result[0]}\n\
    \    result=( \"${result[@]:1}\" )\n  done\n\n  # Remove any commas and lower-case\
    \ letters with odd order from the start and end of the words\n  result=( \"${result[@]}\"\
    \ )\n  while [[ ${#result[@]} -gt 0 ]]; do\n    string=${result[0]}\n    result=(\
    \ \"${result[@]:1}\" )\n  done\n\n  # Strip any whitespace from each word\n  result=(\
    \ \"${result[@]}\" )\n  while [[ ${#result[@]} -gt 0 ]]; do\n    string=${result[0]}\n\
    \    result=( \"${result[@]:1}\" )\n  done\n\n  # Return our final list of words\
    \ split on whitespace\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local str=\"$1\"\n  local num_spaces=$(echo \"$str\" | wc -w)\n  local\
    \ num_commas=$(echo \"$str\" | grep -o ',' | wc -w)\n  local num_letters=$(echo\
    \ \"$str\" | sed 's/[^a-zA-Z]//g' | wc -w)\n  \n  if [ \"$num_spaces\" -eq 0 ];\
    \ then\n    echo \"$num_letters\"\n  else\n    if [ \"$num_commas\" -eq 0 ]; then\n\
    \      echo \"$num_letters\"\n    else\n      echo \"$num_letters\"\n    fi\n\
    \  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=$1\n    local separator=$2\n    local output\n    local\
    \ counter\n\n    output=()\n    IFS=$separator\n    string=${string//[${separator}]/}\n\
    \    IFS=$saved_IFS\n    for counter in $(seq 0 $(echo $string | tr -cd \"$separator\"\
    \ | wc -c))\n    do\n        output[$((counter-1))]=${string:$counter:${#output[$((counter-1))]}}\n\
    \    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgtqzrajc.sh: line 26: $((counter-1))]: bad array subscript

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local IFS=$'\\n'\n    set $1 words=()\n    while read -r word; do\n \
    \       [[ $word == +([[:space:]])* ]] && words=(\"${words[@]}\" \"$word\") ||\
    \ words=(\"${words[@]}\" \"$(tr -cd '[:lower:]' <<< \"$word\")\")\n    done\n\
    \    IFS=$' \\t\\n'\n    echo \"${words[*]}\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplvhf521n.sh: line 16: syntax error near unexpected token `(''

    /tmp/tmplvhf521n.sh: line 16: `    set $1 words=()''

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=$1\n    # remove leading and trailing whitespace\n    str=$(sed\
    \ 's/^\\s*//' <<< \"$str\")\n    str=$(sed 's/\\s*$//' <<< \"$str\")\n    # split\
    \ the string on whitespace\n    IFS= read -r -a array <<< \"$str\"\n    # add\
    \ single quotes around each element of the array\n    mapfile -t array <<< \"\
    $array\"\n    # if the array is empty return the number of lower-case letters\
    \ with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ...\n    if [ ${#array[@]}\
    \ -eq 0 ] ; then\n        echo ${#array[@]}\n    else\n        echo ${array[@]}\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local WORDS_IN_QUOTES=$'\"'\n  local WORDS_IN_WHITESPACE=${1:-,}\n\n  IFS=${WORDS_IN_WHITESPACE}\
    \ read -r -a WORDS_IN_QUOTES <<< \"${WORDS_IN_QUOTES// /$1}\"\n  IFS=${WORDS_IN_WHITESPACE}\
    \ read -r -a WORDS_IN_QUOTES <<< \"${WORDS_IN_QUOTES[@]/#/$1}\"\n\n  local COUNTER=0\n\
    \  local COUNTER2=0\n  local SORTED\n  SORTED=$(IFS=$'\\n' echo \"${WORDS_IN_QUOTES[*]}\"\
    \ | sort -u | tr '\\n' '|' | sed 's/|$//')\n  for WORD in $SORTED; do\n    if\
    \ [[ \"${WORD}\" = \"$1\" ]]; then\n      ((COUNTER++))\n    else\n      if [[\
    \ \"${WORD}\" = \"$WORDS_IN_QUOTES[1]\" ]]; then\n        ((COUNTER2++))\n   \
    \   fi\n    fi\n  done\n  echo \"${COUNTER}\"\n  echo \"${COUNTER2}\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ -n \"$1\" ]]; then\n        local -n a=$1\n        local IFS='\
    \ '\n        local a\n        for a in ${a[@]}; do\n            echo \"$a\"\n\
    \        done\n        IFS=','\n        echo \"${#a[@]}\"\n    else\n        echo\
    \ \"0\"\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmu_py2fa.sh: line 16: local: `Hello world\!'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local line=$1\n    local words=()\n\n    # Split words by whitespace\n\
    \    local IFS=$'\\n'\n    local IFS=$'\\+'\n    for word in ${line//[[:space:][:punct:]]};\
    \ do\n        words+=( \"$word\" )\n    done\n\n    # Echo words with double quotes\
    \ around them\n    for word in \"${words[@]}\"; do\n        echo -n \"\\\"$word\\\
    \"\"\n    done\n\n    # Echo words with single quotes around them\n    for word\
    \ in \"${words[@]}\"; do\n        echo -n \"'$word'\"\n    done\n\n    # Print\
    \ number of words in alphabet with odd order letter\n    echo \"$((${#words[@]}/2))\"\
    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words=$1\n    local delimiter=${2:-,}\n    local count=0\n    local\
    \ lower=0\n    local last_lower=0\n\n    echo $words | tr ' ' '\\n' | while read\
    \ word\n    do\n        lower=${word:0:1}\n        echo $lower\n        if [ \"\
    $lower\" == \"$last_lower\" ]\n        then\n            echo $count\n       \
    \     count=$(( $count + 1 ))\n            lower=$(( $lower + 1 ))\n        else\n\
    \            last_lower=$lower\n            count=$(( $count + 1 ))\n        fi\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    # Declare the variable\n    local input\n    # Loop over each argument\n\
    \    for input in \"$@\"\n    do\n        # If the input does not contain a space\n\
    \        if [ \"$input\" != \" \" ]\n        then\n            IFS=$'\\n' read\
    \ -a array <<< \"$input\"\n            local output\n            # Loop over each\
    \ array element\n            for output in \"${array[@]}\"\n            do\n \
    \               # If there are multiple words in the element, split by spaces,\
    \ if there are not, split by commas\n                if [ \"$output\" != \"\"\
    \ ]\n                then\n                    IFS=$'\\n' read -a array <<< \"\
    $output\"\n                    local output\n                    # Loop over each\
    \ array element\n                    for output in \"${array[@]}\"\n         \
    \           do\n                        # If there are multiple words in the element,\
    \ split by spaces, if there are not, split by commas\n                       \
    \ if [ \"$output\" != \"\" ]\n                        then\n                 \
    \           IFS=$',' read -a array <<< \"$output\"\n                         \
    \   local output\n                            # Loop over each array element\n\
    \                            for output in \"${array[@]}\"\n                 \
    \           do\n                                # If the array element has only\
    \ one word, split on spaces\n                                if [ \"$output\"\
    \ != \"\" ]\n                                then\n                          \
    \          IFS=$' ' read -a array <<< \"$output\"\n                          \
    \          local output\n                                    # Loop over each\
    \ array element\n                                    for output in \"${array[@]}\"\
    \n                                    do\n                                   \
    \     # If the array element has only one word, split on spaces\n            \
    \                            if [ \"$output\" != \"\" ]\n                    \
    \                    then\n                                            IFS=$'\
    \ ' read -a array <<< \"$output\"\n                                          \
    \  local output\n                                            break\n         \
    \                               fi\n                                    done\n\
    \                                    # If there are multiple words in the element,\
    \ split on spaces\n                                    if [ \"$output\" != \"\"\
    \ ]\n                                    then\n                              \
    \          IFS=$'\\n' read -a array <<< \"$output\"\n                        \
    \                local output\n                                        # Loop\
    \ over each array element\n                                        for output\
    \ in \"${array[@]}\"\n                                        do\n           \
    \                                 # If the array element has only one word, split\
    \ on spaces\n                                            if [ \"$output\" != \"\
    \" ]\n                                            then\n                     \
    \                           IFS=$' ' read -a array <<< \"$output\"\n         \
    \                                       local output\n                       \
    \                         break\n                                            fi\n\
    \                                        done\n                              \
    \          # If there are multiple words in the element, split on spaces\n   \
    \                                     if [ \"$output\" != \"\" ]\n           \
    \                             then\n                                         \
    \   IFS=$',' read -a array <<< \"$output\"\n                                 \
    \           local output\n                                            break\n\
    \                                        fi\n                                \
    \    fi\n                                fi\n                            done\n\
    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfze6f0dr.sh: line 87: syntax error near unexpected token `}''

    /tmp/tmpfze6f0dr.sh: line 87: `}''

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words=\"$1\";\n    local comma=\",\"\n    local lower=\"a-z\"\n\
    \    local upper=\"A-Z\"\n    local count=0\n    local newwords=\"\"\n\n    echo\
    \ \"$words\" | while read line; do\n        words=\"${words},$line\"\n    done\n\
    \n    echo \"$words\" | grep -E -o \"$lower,$upper\" | sed -E 's/'\"$lower\"'/&\\\
    &/g;s/'\"$upper\"'/&\\&/g' | grep -E -o \"$lower,$upper\" | sed -E 's/'\"$lower\"\
    '/&\\&/g;s/'\"$upper\"'/&\\&/g'\n\n    local count=\"$( echo \"$words\" | grep\
    \ -E -o \"$lower,$upper\" | sed -E 's/'\"$lower\"'/&\\&/g;s/'\"$upper\"'/&\\&/g'\
    \ | grep -E -o \"$lower,$upper\" | sed -E 's/'\"$lower\"'/&\\&/g;s/'\"$upper\"\
    '/&\\&/g' | wc -l )\"\n\n    local newwords=\"$(echo \"$words\" | grep -E -o \"\
    $lower,$upper\" | sed -E 's/'\"$lower\"'/&\\&/g;s/'\"$upper\"'/&\\&/g' | grep\
    \ -E -o \"$lower,$upper\" | sed -E 's/'\"$lower\"'/&\\&/g;s/'\"$upper\"'/&\\&/g'\
    \ | sort | uniq -c | awk '{ print $$1 }' | head -n $count )\"\n\n    echo \"$newwords\"\
    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local result=()\n    local words=$1\n    local whitespace=$(echo \"${words}\"\
    \ | tr \" \" \"\\n\" | sort | uniq -d | wc -l)\n    local commas=$(echo \"${words}\"\
    \ | tr \",\" \"\\n\" | sort | uniq -d | wc -l)\n    local lowercase_letters=$(echo\
    \ \"${words}\" | tr \"a-z\" \"\\n\" | sort | uniq -d | wc -l)\n    if [[ ${words}\
    \ == *,* ]]; then\n        ((lowercase_letters-=commas))\n        words=$(echo\
    \ \"${words}\" | tr \" \" \"\\n\" | sort | uniq -d)\n    else\n        words=$(echo\
    \ \"${words}\" | tr \" \" \"\\n\" | sort | uniq -d)\n    fi\n    if [[ ${lowercase}\
    \ == ${lowercase_letters}* ]]; then\n        ((lowercase_letters-=whitespace))\n\
    \        lowercase=${lowercase#a}\n    fi\n    local split=`echo \"${words}\"\
    \ | cut -d\" \" -f1`\n    local count=0\n    local last=\n    for word in ${words};\
    \ do\n        if [[ ${split} == *,* ]]; then\n            if [[ \"${word}\" !=\
    \ \"${split}\" ]]; then\n                split=\"${word}\"\n                ((count+=lowercase_letters))\n\
    \            fi\n        fi\n        if [[ \"${split}\" = *\"${word}\"* ]]; then\n\
    \            ((count+=lowercase_letters))\n        fi\n        last=\"${word}\"\
    \n    done\n    local split_words=()\n    for (( i=0; i<${lowercase}; i++ ));\
    \ do\n        if [[ \"${split}\" = *[[:lower:]]\"${lowercase}${i}\"* ]]; then\n\
    \            ((count+=lowercase_letters))\n        fi\n        if [[ ${count}\
    \ == 0 ]]; then\n            split_words+=(${split})\n        fi\n    done\n \
    \   echo \"${split_words[@]}\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_3rruy_t.sh: line 46: ((: i<: syntax error: operand expected (error
    token is "<")

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  echo \"$1\" | grep -Po \"\\w+\" # print only words with word boundaries\n\
    \  echo \"$1\" | grep -Po \"\\W+\" # print only non-word boundaries\n  echo \"\
    $1\" | grep -Po \"\\b[A-Za-z]+\\b\" # print all lowercase letters\n  echo \"$1\"\
    \ | grep -Po \"\\b[[:lower:]]+\\b\" # print all lowercase letters\n  echo \"$1\"\
    \ | grep -Po \"\\b[A-Za-z]+\" # print all lowercase letters\n  echo \"$1\" | grep\
    \ -Po \"\\b[[:lower:]]+\" # print all lowercase letters\n  echo \"$1\" | grep\
    \ -Po \"\\b[[:alpha:]][[:alpha:]]+\\b\" # print all lowercase letters with odd\
    \ order in the alphabet\n  echo \"$1\" | grep -Po \"\\b[[:alpha:]]+\" # print\
    \ all lowercase letters with odd order in the alphabet\n}\n\ncandidate() {\n \
    \   split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local splits=\"$1\"\n    local word\n    local i\n    local count\n \
    \   local last\n    local words\n\n    # Empty string\n    if [ -z \"$splits\"\
    \ ]\n    then\n        return 0\n    fi\n\n    # Split on whitespace\n    words=(\"\
    ${splits//[[:space:]]/}\")\n\n    # Get number of lower-case letters\n    for\
    \ ((i=0; i<${#words[@]}; i++)); do\n        word=${words[i]}\n        count=$(printf\
    \ \"%s${word}\" | wc -c | tr -d ' ') 2> /dev/null | tr -d '[:space:]'\n      \
    \  words[i]=$count\n    done\n\n    # Get odds\n    count=0\n    for ((i=0; i<${#words[@]};\
    \ i++)); do\n        if [ \"${words[i]}\" -eq 1 ]\n        then\n            count=$(expr\
    \ $count + 1)\n        fi\n    done\n\n    # Add quotes\n    words=$(printf \"\
    %s\" ${words[@]} | sed -e 's/^/\"/g' -e 's/$/\\\",/g')\n\n    # Return array of\
    \ strings\n    echo \"${words[@]}\"\n\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpaby61qkt.sh: line 41: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local IFS=' '\n    local -a wordlist\n    local -i count\n    local -i\
    \ last_char\n    local word\n    local new_word\n\n    wordlist=$( echo $1 | tr\
    \ \",\" \" \")\n\n    count=0\n    last_char=$(echo $1 | cut -c1- | tr -d \"'\"\
    )\n\n    while [[ \"$last_char\" != \" \" ]]; do\n        count=$(( $count + 1\
    \ ))\n        last_char=$(echo $1 | cut -c1- | tr -d \"'\")\n    done\n\n    for\
    \ word in \"${wordlist[@]}\"; do\n        new_word=\"$word\"\n\n        echo \"\
    $new_word\"\n    done\n\n    echo $count\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_w747ocr.sh: line 25: Hello world\!: syntax error: invalid arithmetic
    operator (error token is "\!")

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local split=$1\n    local words=$(echo $split | sed \"s/ //g;s/,/ /g\"\
    )\n    local wordCount=$(($(echo ${words} | wc -c)))\n    if [[ ${words} =~ (^[^\
    \ ]+)[ ]+[^ ]+[ ]+[^ ]+[ ]+[^ ]+ ]]; then\n        echo \"${words}\"\n    elif\
    \ [[ ${words} =~ ^[ ]+$ ]]; then\n        echo \"\"\n    else\n        echo \"\
    $wordCount\"\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbdxb8zay.sh: line 18: syntax error in conditional expression

    /tmp/tmpbdxb8zay.sh: line 18: syntax error near `]+[^''

    /tmp/tmpbdxb8zay.sh: line 18: `    if [[ ${words} =~ (^[^ ]+)[ ]+[^ ]+[ ]+[^ ]+[
    ]+[^ ]+ ]]; then''

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local result=''\n  local n=''\n  local count=''\n  for i in $1; do\n  \
    \  if [[ \"$i\" =~ [^[:alnum:]] ]]; then\n      if [[ \"$count\" ]]; then\n  \
    \      echo -n \"$result\"\n      fi\n      result=\"$result$n\"\n      n=''\n\
    \      count=''\n    else\n      n=\"$n$i\"\n      count=\"$count$i\"\n    fi\n\
    \  done\n  echo -n \"$result\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local lowers=\"${1}\"\n    local words=\"\"\n    local word\n    local\
    \ i=0;\n    for word in ${lowers}; do\n        words=$words${word}\" \"\n    \
    \    ((i++))\n    done\n    if [[ \"$words\" == *\" \"* ]]; then\n        words=$(echo\
    \ \"$words\" | sed \"s/ /,/\")\n    fi\n    echo \"$words\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tlocal words=$1\n\techo $words |\n\t# split on commas if there are no whitespaces\
    \ in the word\n\ttr ' ' ',' |\n\t# split on whitespace if there are no commas\
    \ in the word\n\ttr ',' ' ' |\n\t# count the characters with odd order\n\ttr [a-z]\
    \ [a-z][a-z] |\n\t# return the count of words split on whitespace and commas\n\
    \twc -w |\n\t# return the count of words split on whitespace and commas\n\ttr\
    \ ',' ' '\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "tr: extra operand \u2018hi\u2019\nTry 'tr --help' for more information.\n"
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tlocal words=\"${1:-}\"\n\tlocal space=\"${2:- }\"\n\tlocal no_spaces=\"\
    ${3:- }\"\n\tlocal commas=\"${4:- }\"\n\n\tlocal word\n\tlocal i\n\tlocal wordlist\n\
    \n\tfor word in ${words//[![:space:]]/}; do\n\t\t[[ \"${word,,}\" == \"${words}\"\
    \ ]]\n\t\twordlist+=(\"${word//${space}/${no_spaces}}\")\n\tdone\n\n\tfor ((i=1;\
    \ i<${#wordlist[@]}; i++)); do\n\t\twordlist[i]=\"${wordlist[i]//${commas}/${commas},${commas}}\"\
    \n\tdone\n\n\twordlist=(\"${wordlist[@]}\")\n\n\tIFS=$'\\n'\n\techo \"${wordlist[*]}\"\
    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local input_words=$1\n    local input_words_tmp=$2\n    local num_words=$3\n\
    \    local max_num_words=$4\n    local max_num_words_tmp=$5\n    local num_words_tmp=$6\n\
    \    local max_num_words_tmp=$7\n    local num_letters=$8\n    local max_num_letters=$9\n\
    \    local max_num_letters_tmp=$10\n    local num_letters_tmp=$11\n    local max_num_letters_tmp=$12\n\
    \    local num_letters_tmp=$13\n    local max_num_letters_tmp=$14\n    local num_letters_tmp=$15\n\
    \    local max_num_letters_tmp=$16\n    local num_letters_tmp=$17\n    local max_num_letters_tmp=$18\n\
    \    local num_letters_tmp=$19\n    local max_num_letters_tmp=$20\n    local num_letters_tmp=$21\n\
    \    local max_num_letters_tmp=$22\n    local num_letters_tmp=$23\n    local max_num_letters_tmp=$24\n\
    \    local num_letters_tmp=$25\n    local max_num_letters_tmp=$26\n    local num_letters_tmp=$27\n\
    \    local max_num_letters_tmp=$28\n    local num_letters_tmp=$29\n    local max_num_letters_tmp=$30\n\
    \    local num_letters_tmp=$31\n    local max_num_letters_tmp=$32\n    local num_letters_tmp=$33\n\
    \    local max_num_letters_tmp=$34\n    local num_letters_tmp=$35\n    local max_num_letters_tmp=$36\n\
    \    local num_letters_tmp=$37\n    local max_num_letters_tmp=$38\n    local num_letters_tmp=$39\n\
    \    local max_num_letters_tmp=$40\n    local num_letters_tmp=$41\n    local max_num_letters_tmp=$42\n\
    \    local num_letters_tmp=$43\n    local max_num_letters_tmp=$44\n    local num_letters_tmp=$45\n\
    \    local max_num_letters_tmp=$46\n    local num_letters_tmp=$47\n    local max_num_letters_tmp=$48\n\
    \    local num_letters_tmp=$49\n    local max_num_letters_tmp=$50\n    local num_letters_tmp=$51\n\
    \    local max_num_letters_tmp=$52\n    local num_letters_tmp=$53\n    local max_num_letters_tmp=$54\n\
    \    local num_letters_tmp=$55\n\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=$1\n    if [[ $str == \"\" ]]; then\n        echo \"\\\"\\\
    $1\\\" is empty\"\n        return 1\n    fi\n    local i\n    local count=0\n\
    \    for ((i=0; i < ${#str}; i++)); do\n        if [[ ${str:$i:1} == ' ' ]]; then\n\
    \            count=$(( count + 1 ))\n        elif [[ ${str:$i:1} == ',' ]]; then\n\
    \            count=$(( count + 1 ))\n        else\n            if (( count % 2\
    \ )); then\n                count=$(( count + 1 ))\n            else\n       \
    \         count=$(( count + 1 ))\n            fi\n        fi\n    done\n    echo\
    \ \"$count\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local string=\"$1\"\n  local delimiters=\"$(echo $2 | tr \",\" \" \")\"\
    \n  # We can't use the builtin string split because that will split on commas\
    \ ',', but we still want to split on whitespace\n  # This gives us the number\
    \ of whitespaces found (which is the same as the number of commas, but we'll just\
    \ use\n  # the other one for the purposes of counting the odd-numbered letters).\n\
    \  local whitespaces_count=$(echo \"$string\" | tr \" \" \",\" | wc -c)\n  # The\
    \ loop below is basically the equivalent of \"for word in $string\", but it works\
    \ with the words that don't have\n  # whitespace in them\n  local word\n  for\
    \ word in $string; do\n    if [[ ! -z \"$delimiters\" ]]; then\n      word=\"\
    $(echo \"$word\" | tr \" \" \",\" | sed -e \"s/ $delimiters/,/g\")\"\n    fi\n\
    \    word=\"$(echo \"$word\" | tr -d \")\"\n    word=\"$(echo \"$word\" | tr -d\
    \ \")\"\n    word=\"$(echo \"$word\" | tr -d \")\"\n    word=\"$(echo \"$word\"\
    \ | tr -d \")\"\n    word=\"$(echo \"$word\" | tr -d \")\"\n    word=\"$(echo\
    \ \"$word\" | tr -d \")\"\n    word=\"$(echo \"$word\" | tr -d \")\"\n    word=\"\
    $(echo \"$word\" | tr -d \")\"\n    word=\"$(echo \"$word\" | tr -d \")\"\n  \
    \  word=\"$(echo \"$word\" | tr -d \")\"\n    word=\"$(echo \"$word\" | tr -d\
    \ \")\"\n    word=\"$(echo \"$word\" | tr -d \")\"\n    word=\"$(echo \"$word\"\
    \ | tr -d \")\"\n    word=\"$(echo \"$word\" | tr -d \")\"\n    word=\"$(echo\
    \ \"$word\" | tr -d \")\"\n    word=\"$(echo \"$word\" | tr -d \")\"\n    word=\"\
    $(echo \"$word\" | tr -d \")\"\n    word=\"$(echo \"$word\" | tr -d \")\"\n  \
    \  word=\"$(echo \"$word\" | tr -d \")\"\n    word=\"$(echo \"$word\" | tr -d\
    \ \")\"\n    word=\"$(echo \"$word\" | tr -d \")\"\n    word=\"$(echo \"$word\"\
    \ | tr -d \")\"\n    word=\"$(echo \"$word\" | tr -d \")\"\n    word=\"$(echo\
    \ \"$word\" | tr -d \")\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_b_guem6.sh: line 51: unexpected EOF while looking for matching
    `)''

    /tmp/tmp_b_guem6.sh: line 71: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local STRING=\"${1}\"\n  local SEP=\"\"\n  local WORD\n  local RESULT\n\
    \  local L\n  local W\n  local C\n  local LCHARS\n  local COUNT\n  local CPOS\n\
    \  RESULT=0\n  # We need commas to seperate words, so we check for the first letter\n\
    \  # We also need spaces to seperate words, so we check for the last letter\n\
    \  if [[ ${STRING:0:1} == \"\\\\\" ]]; then\n    echo \"ERROR: No whitespace allowed\
    \ inside quotes\"\n    return 1\n  fi\n  if [[ ${STRING:${#STRING}-1} == \"\\\\\
    \" ]]; then\n    echo \"ERROR: No whitespace allowed at the end\"\n    return\
    \ 1\n  fi\n  # Get the first character\n  CPOS=$(expr index \"$STRING\" \"\\\\\
    \")\n  LCHARS=$(expr length \"$STRING\")\n  W=$(expr substr $STRING \"$CPOS\"\
    \ \"${LCHARS}\")\n  echo \"${W}\"\n  WORD=\"\\\"$W\\\"\"\n  echo \"${WORD}\"\n\
    \  # Remove the first character\n  STRING=\"${STRING:$CPOS}\"\n  LCHARS=$(expr\
    \ length \"$STRING\")\n  # Get the last character\n  W=$(expr substr $STRING 1\
    \ \"${LCHARS}\")\n  echo \"${W}\"\n  WORD=\"${WORD},\\\"$W\\\"\"\n  echo \"${WORD}\"\
    \n  # Remove the final character\n  STRING=\"${STRING:${#STRING}}\"\n  LCHARS=$(expr\
    \ length \"$STRING\")\n  W=$(expr substr $STRING 0 \"${LCHARS}\")\n  echo \"${W}\"\
    \n  WORD=\"${WORD},\\\"$W\\\"\"\n  echo \"${WORD}\"\n  # Remove commas from the\
    \ beginning and end of the string\n  STRING=\"${STRING//,}\"\n  LCHARS=$(expr\
    \ length \"$STRING\")\n  W=$(expr substr $STRING 0 \"${LCHARS}\")\n  echo \"${W}\"\
    \n  WORD=\"${WORD},\\\"$W\\\"\"\n  echo \"${WORD}\"\n  # Remove spaces from the\
    \ beginning and end of the string\n  STRING=\"${STRING//\\ \"}\"\n  LCHARS=$(expr\
    \ length \"$STRING\")\n  W=$(expr substr $STRING 0 \"${LCHARS}\")\n  echo \"${W}\"\
    \n  WORD=\"${WORD},\\\"$W\\\"\"\n  echo \"${WORD}\"\n  # Split the string on spaces\n\
    \  RESULT=$(echo \"${WORD}\" | tr ' ' ',' | tr '\"' ' ')\n  echo \"${RESULT}\"\
    \n  RESULT=$(expr length \"$RESULT\")\n  \n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp23mcas39.sh: line 92: unexpected EOF while looking for matching
    `"''

    /tmp/tmp23mcas39.sh: line 96: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local lower=\"${1:0:1}\"\n    local uppercase=\"${1:1:1}\"\n    local\
    \ words=(${1//[[:space:]]/})\n    local whitespace=(${lower:0:1})\n    local comma=(${lower:1:1})\n\
    \    local nums=(${lowercase:0:1})\n    local letters=(${lowercase:1:1})\n\n \
    \   # No whitespaces exists in the text\n    if [[ \"${whitespace}\" == \"\" ]];\
    \ then\n        local i\n        for ((i=0; i<${#words[@]}; i++)); do\n      \
    \      words[i]=\"${words[i]//,/}\"\n        done\n\n        local j\n       \
    \ for ((j=0; j<${#words[@]}; j++)); do\n            words[j]=\"${words[j]//'/'}\"\
    \n        done\n\n        if [[ \"${words[0]}\" == \"\" ]]; then\n           \
    \ nums=\"${#nums}\"\n        fi\n\n        if [[ \"${words[1]}\" == \"\" ]]; then\n\
    \            letters=\"${#letters}\"\n        fi\n\n        if [[ \"${words[2]}\"\
    \ == \"\" ]]; then\n            comma=\"${#comma}\"\n        fi\n    fi\n\n  \
    \  # If the number of words was odd, the letter is capitalized, if the number\
    \ of words was even, the letter is\n    # not capitalized\n    if [[ \"${#words[@]}\"\
    \ -eq 0 ]]; then\n        local i\n        for ((i=0; i<${#lower[@]}; i++)); do\n\
    \            lower[i]=\"${lowercase[i]//[a-z]/A}\"\n        done\n\n        local\
    \ j\n        for ((j=0; j<${#lower[@]}; j++)); do\n            lower[j]=\"${lower[j]//[A-Z]/a}\"\
    \n        done\n\n        if [[ \"${lower[0]}\" == \"\" ]]; then\n           \
    \ nums=\"${#nums}\"\n        fi\n\n        if [[ \"${lower[1]}\" == \"\" ]]; then\n\
    \            letters=\"${#letters}\"\n        fi\n\n        if [[ \"${lower[2]}\"\
    \ == \"\" ]]; then\n            comma=\"${#comma}\"\n        fi\n    fi\n\n  \
    \  # If the number of words were odd, the letter is capitalized, if the number\
    \ of words were even, the letter is\n    # not capitalized\n    if [[ \"${#words[@]}\"\
    \ -eq 0 ]]; then\n        local i\n        for ((i=0; i<${#uppercase[@]}; i++));\
    \ do\n            uppercase[i]=\"${uppercase[i]//[[:alpha:]]/A}\"\n        done\n\
    \n        local j\n        for ((j=0; j<${#uppercase[@]}; j++)); do\n        \
    \    uppercase[j]=\"${uppercase[j]//[[:alpha:]]/a}\"\n        done\n\n       \
    \ if [[ \"${uppercase[0]}\" == \"\" \n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg57h1982.sh: line 87: syntax error in conditional expression

    /tmp/tmpg57h1982.sh: line 88: syntax error near `}''

    /tmp/tmpg57h1982.sh: line 88: `}''

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=$1\n\n    # return if string is not set\n    [ -z \"$string\"\
    \ ] && return\n\n    # return if string is empty\n    [ -z \"$string\" ] && echo\
    \ \"$string\" && return\n\n    # split string on whitespace\n    string=\"$(echo\
    \ $string | tr ' ' ',')\"\n\n    # return if string is empty\n    [ -z \"$string\"\
    \ ] && echo \"$string\" && return\n\n    # split string on commas if comma exists\
    \ in string\n    string=\"$(echo $string | tr ',' ' ')\"\n\n    # return if string\
    \ is empty\n    [ -z \"$string\" ] && echo \"$string\" && return\n\n    # split\
    \ string on commas if comma exists in string\n    string=\"$(echo $string | tr\
    \ ',' ' ')\"\n\n    # return if string is empty\n    [ -z \"$string\" ] && echo\
    \ \"$string\" && return\n\n    # return number of words divided by 2\n    echo\
    \ \"${#string} / 2\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local result\n    local count=0\n    local char=0\n\n    # First split\
    \ the string on whitespace\n    result=$(echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | sed 's/\\s/, /g')\n    # Then count the lower-case letters in each word\n\
    \    for word in $result; do\n        # Skip empty words\n        if [ \"$word\"\
    \ != \"\" ]; then\n            char=$(echo \"$word\" | tr '[:upper:]' '[:lower:]'\
    \ | wc -c)\n            if [ $char -lt 7 ]; then\n                count=$((count+char))\n\
    \            else\n                count=$((count+char/2))\n            fi\n \
    \       fi\n    done\n\n    # Output result\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=\"$1\"\n    local spaces=$(echo \"$str\" | sed \"s/[[:space:]]//g\"\
    )\n    local commas=$(echo \"$str\" | sed \"s/,/, /g\")\n    local lowers=$(echo\
    \ \"$str\" | sed \"s/[a-z]/[a-z] /g\")\n    local odd_words=\"$(echo \"$str\"\
    \ | sed \"s/[0-9]\\([a-z]\\)/$1/\" | sort | uniq -c | awk '{print $2}')\"\n\n\
    \    local len=\"$spaces\"\n    if [[ \"$spaces\" != *,* ]]; then\n        len=\"\
    $commas\"\n    fi\n    if [[ \"$lowers\" != *,* ]]; then\n        len=\"$odd_words\"\
    \n    fi\n    echo \"$len\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  echo \"$1\" |\n  tr ' ' '\\n' |\n  tr -s ',' '\\n' |\n  tr [a-z] [a-z]+$((${#1}+1))\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "tr: extra operand \u2018[a-z]+14\u2019\nTry 'tr --help' for more information.\n"
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local str=$1\n  echo \"$str\" | sed -r \"s/(^|[^\\\\])[\\\\s\\\\n]*/\\\
    1\\n/g\" | sed \"s/^/\\\"/\" > /tmp/words\n  echo $(wc -l /tmp/words | awk '{print\
    \ $1}')\n  cat /tmp/words | sed \"s/^/\\\"/\" > /tmp/words.txt\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local splitter=${1:,}\n    local text=$1\n    local result\n\n    for\
    \ word in $text; do\n        local splitter=$splitter\n        local word=$word\n\
    \        local word_count=$((${#word} / ${#splitter}))\n\n        for (( i=0;\
    \ i<${#word}; i++ )); do\n            if [ ${word:$i:1} == ${splitter} ]; then\n\
    \                result=\"${result},${word:$((i + 1))}\"\n                word_count=$((word_count\
    \ - 1))\n                if [ ${word_count} == \"0\" ]; then\n               \
    \     break\n                fi\n            fi\n        done\n\n        if [\
    \ ${word_count} == \"0\" ]; then\n            result=\"${result},${word}\"\n \
    \       fi\n    done\n\n    echo \"${result}\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps3kyjpfn.sh: line 15: 1: ,: syntax error: operand expected (error
    token is ",")

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local split_words\n    split_words=\"$1\"\n    shift\n\n    local c\n\
    \    for c in \"${split_words}\"\n    do\n        case \"${c}\" in\n        \"\
    \ \") ;;\n        \"\\\\\") ;;\n        \"\\\"\" ) ;;\n        \"'\")  ;;\n  \
    \      \"'(')\") ;;\n        \"'[\")  ;;\n        \"'{') ;;\n        \"'<\") \
    \ ;;\n        \"'>\") ;;\n        \"'|\") ;;\n        \"'!\")  ;;\n        \"\
    ')\") ;;\n        \"'$\") ;;\n        \"')(') ;;\n        \"')[\") ;;\n      \
    \  \"'){') ;;\n        \"')<\") ;;\n        \"'>\") ;;\n        \"')|\") ;;\n\
    \        \"')!\") ;;\n        \"') \") ;;\n        \"''\") ;;\n        \"'$\"\
    ) ;;\n        \"'(') ;;\n        \"'[') ;;\n        \"'{') ;;\n        \"'<\"\
    ) ;;\n        \"'>\") ;;\n        \"'|\") ;;\n        \"'!\") ;;\n        \"')\
    \ \") ;;\n        \"''\") ;;\n        \"'$\") ;;\n        \"'(') ;;\n        \"\
    '[') ;;\n        \"'{') ;;\n        \"'<\") ;;\n        \"'>\") ;;\n        \"\
    '|\") ;;\n        \"'!\") ;;\n        \"') \") ;;\n        \"''\") ;;\n      \
    \  \"'$\") ;;\n        \"'(') ;;\n        \"'[') ;;\n        \"'{') ;;\n     \
    \   \"'<\") ;;\n        \"'>\") ;;\n        \"'|\") ;;\n        \"'!\") ;;\n \
    \       \"') \") ;;\n        \"''\") ;;\n        \"'$\") ;;\n        \"'(') ;;\n\
    \        \"'[') ;;\n        \"'{') ;;\n        \"'<\") ;;\n        \"'>\") ;;\n\
    \        \"'|\") ;;\n        \"'!\") ;;\n        \"') \") ;;\n        \"''\")\
    \ ;;\n        \"'$\") ;;\n        \"'(') ;;\n        \"'[') ;;\n        \"'{')\
    \ ;;\n        \"'<\") ;;\n        \"'>\") ;;\n        \"'|\") ;;\n        \"'!\"\
    ) ;;\n        \"') \") ;;\n        \"''\") ;;\n        \"'$\") ;;\n        \"\
    '(') ;;\n        \"'[') ;;\n        \"'{') ;;\n        \"'<\") ;;\n        \"\
    '>\") ;;\n        \"'|\") ;;\n        \"'!\") ;;\n        \"') \") ;;\n      \
    \  \"''\") ;;\n        \"'$\") ;;\n        \"'\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo4i721vi.sh: line 31: syntax error near unexpected token `>''

    /tmp/tmpo4i721vi.sh: line 31: `        "''>") ;;''

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\twords=$1;\n\twords_split=$(echo $words | tr \" \" , );\n\twords_split=$(echo\
    \ $words_split | tr \",\" \" \");\n\twords_split=$(echo $words_split | tr \" \"\
    \ \" \");\n\twords_split=$(echo $words_split | tr \",\" \" \");\n\twords_split=$(echo\
    \ $words_split | tr \" \" \" \");\n\twords_split=$(echo $words_split | tr \",\"\
    \ \" \");\n\techo $words_split;\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local w\n\n    local str=\"$1\"\n    local spaces=\"\"\n    local commas=\"\
    \"\n    local lower=\"\"\n    local count=0\n    local lastchar=\"\"\n\n    for\
    \ w in \"$str\"\n    do\n        if [[ \"$w\" == ' ' ]]\n        then\n      \
    \      spaces=\"$spaces $w\"\n        elif [[ \"$w\" == ',' ]]\n        then\n\
    \            commas=\"$commas $w\"\n        elif [[ \"$w\" < \"a\" ]]\n      \
    \  then\n            lower=\"$lower $w\"\n        else\n            count=$((count+1))\n\
    \        fi\n    done\n\n    lastchar=\"$lower\"\n\n    if [ -z \"$spaces\" ]\n\
    \    then\n        spaces=\",\"\n    fi\n\n    if [ -z \"$commas\" ]\n    then\n\
    \        commas=\"$spaces\"\n    fi\n\n    echo -n \"$count\"\n    echo $lower\
    \ | sed -e 's/\\(.*\\)/\"\\1\"/g'\n    echo $lower | sed -e 's/\\(.*\\)/\"\\1\"\
    /g' | sed -e 's/\\(.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/\"\\1\"/g' | sed -e 's/\\\
    (.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/\"\\1\"\
    /g' | sed -e 's/\\(.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/\"\\1\"/g' | sed -e 's/\\\
    (.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/\"\\1\"/g'\n    echo $lower | sed -e 's/\\\
    (.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/\"\\1\"\
    /g' | sed -e 's/\\(.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/\"\\1\"/g' | sed -e 's/\\\
    (.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/\"\\1\"\
    /g' | sed -e 's/\\(.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/\"\\1\"/g' | sed -e 's/\\\
    (.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/\"\\1\"\
    /g' | sed -e 's/\\(.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/\"\\1\"/g' | sed -e 's/\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuvky3drx.sh: line 55: unexpected EOF while looking for matching
    `''''

    /tmp/tmpuvky3drx.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local split_command=$1\n  local input_words=$2\n  local output_words=$3\n\
    \n  local word_list=\"( $( echo $input_words | tr \" \" \",\" | sed -e \"s/,$//\"\
    \ -e \"s/^,//\" -e \"s/,$//\" -e \"s/ $//\" -e \"s/,$//\" -e \"s/,/\\\"\\\",\"\
    g\" ) )\";\n\n  local output_words_list=$( echo \"$output_words\" | tr \" \" \"\
    ,\" | sed -e \"s/^,//\" -e \"s/,$//\" -e \"s/,/\\\"\\\",\"g\" ); #remove last\
    \ comma\n  local output_words=$( echo \"$output_words_list\" | sed -e \"s/\\\"\
    //g\" ); #remove quotes from output_words\n\n  local word_count=$( echo \"$output_words_list\"\
    \ | sed -e \"s/\\\"//g\" ); #remove quotes from output_words\n  local output_words=$(\
    \ echo \"$word_count\" | sed -e \"s/^//\" ); #remove quotes from output_words\n\
    \  local output_words=$( echo \"$output_words\" | sed -e \"s/,//g\" ); #remove\
    \ commas from output_words\n  local output_words=$( echo \"$output_words\" | tr\
    \ -d \" \" ); #remove spaces from output_words\n\n  local split_words=$( echo\
    \ \"$output_words\" | $split_command | tr -d \" \" );\n\n  local total_words=$(\
    \ echo \"$output_words_list\" | sed -e \"s/\\\"//g\" ); #remove quotes from output_words\n\
    \  local total_words=$( echo \"$total_words\" | sed -e \"s/^//\" ); #remove quotes\
    \ from output_words\n  local total_words=$( echo \"$total_words\" | sed -e \"\
    s/,//g\" ); #remove commas from output_words\n  local total_words=$( echo \"$total_words\"\
    \ | tr -d \" \" ); #remove spaces from output_words\n\n  echo $split_words;\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8j_z7bo_.sh: line 52: unexpected EOF while looking for matching
    `"''

    /tmp/tmp8j_z7bo_.sh: line 56: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local IFS=$'\\n'\n    local str=\"$1\"\n    local out\n    local -a tmp\n\
    \    local length\n    local -a words\n    local i\n    local word\n    local\
    \ wordlength\n    local count\n    local -a chars\n    local char\n    local tmpcount\n\
    \    local tmpchar\n    local outchar\n    local charindex\n    local charlength\n\
    \    local len\n    local lastchar\n\n    # Replace each '\\' with '\\\\'\n  \
    \  tmp=\"${str//\\\\/\\\\}\"\n\n    # Remove each '\\\"'\n    IFS=$'\\\"'\n  \
    \  set -- $tmp\n    tmp=\"${!#}\"\n\n    # Count the number of ',' and replace\
    \ '\\\"' with '\\\\\\\"'\n    IFS=$'\\\\'\n    IFS=\",\" chars=(\"$tmp\") count=1\n\
    \    while [ $count -gt 0 ]\n    do\n        (( count-- ))\n        IFS=$'\\\\\
    '\n        IFS=\",\" chars=(\"${chars[*]}\" \"$tmp\")\n    done\n\n    # Return\
    \ number of characters, i.e. number of words split on whitespace, or (0) if no\
    \ whitespaces\n    # exist in $str\n    if [ $count -eq 0 ]\n    then\n      \
    \  return 0\n    fi\n\n    # Split on spaces, if whitespaces exist in $str\n \
    \   if [ -z \"$str\" ]\n    then\n        IFS=$' '\n        set -- $chars\n  \
    \  fi\n\n    # Add the '\"' to the beginning and end of each word as appropriate\n\
    \    for (( i=0; i < $count; i++ ))\n    do\n        wordlength=\"$((${#chars[$i]}))\"\
    \n        if [ $i -eq 0 ]\n        then\n            out=\"${words:$wordlength}\"\
    \n        else\n            out=\"${out},\\\"${words[$i]}\\\" \"\n        fi\n\
    \    done\n\n    # Remove each '\"' and replace with ','\n    out=\"${out//\\\"\
    /}\"\n    out=\"${out//,/,}\"\n\n    # Remove each '\\' and replace with ' ',\
    \ replace '\\\\' with '\\' and trim whitespace\n    out=\"${out//\\\\/}\"\n  \
    \  out=\"${out//\\\"/}\"\n    out=\"${out//,/, }\"\n    out=\"${out//\\//}\"\n\
    \    out=\"${out//$IFS}\"\n\n    # Remove whitespace between words\n    out=\"\
    ${out// }\"\n\n    # If the output string contains a '\\\"' then remove the '\\\
    \"' from the beginning\n    if [ \"${out:0:1}\" = \"\\\n}\n\ncandidate() {\n \
    \   split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps01a793f.sh: line 110: unexpected EOF while looking for matching
    `"''

    /tmp/tmps01a793f.sh: line 114: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local output=''\n    local words=''\n    local num_words=''\n    local\
    \ word=''\n    local whitespace=''\n    local comma=''\n    local lowercase_word=''\n\
    \    while [ \"$1\" != \"\" ]; do\n        words='$words,$1'\n        word=''\n\
    \        whitespace=''\n        comma=''\n        num_words=''\n        lowercase_word=''\n\
    \        while [ \"$1\" != \"\" ]; do\n            lowercase_word=$1\n       \
    \     lowercase_word=$(echo $lowercase_word | tr '[:upper:]' '[:lower:]')\n  \
    \          lowercase_word=$(echo $lowercase_word | tr '[:upper:]' '[:lower:]')\n\
    \            if [[ \"$1\" == *[[:space:]]* ]]; then\n                whitespace='$whitespace,\"\
    '$1'\"'\n            else\n                if [[ \"$1\" == *[[:comma:]]* ]]; then\n\
    \                    comma='$comma,\"'$1'\"'\n                else\n         \
    \           word='$word,\"'$lowercase_word'\"'\n                fi\n         \
    \   fi\n            shift\n        done\n        output=\"$output$whitespace\"\
    \n        output=\"$output$comma\"\n        output=\"$output$word\"\n        output=\"\
    $output$num_words\"\n        shift\n    done\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=$1\n\n    if [[ $string == *\"\\<\"* ]]; then\n        echo\
    \ \"ERROR: word list cannot contain \\< symbol.\"\n        exit 1\n    fi\n\n\
    \    if [[ $string == *\"\\>\"* ]]; then\n        echo \"ERROR: word list cannot\
    \ contain \\> symbol.\"\n        exit 1\n    fi\n\n    local regex=\"(${BASH_REMATCH[@]:1}|,)+\"\
    \n    local wordlist=($(regexp \"$string\" \"$string\" |\n        awk -F, '{gsub(\"\
    \ \", \"\\\\s\", $0); gsub(\" \", \"\\\\s\", $1); gsub(\" \", \"\\\\s\", $2);\
    \ gsub(\" \", \"\\\\s\", $3); gsub(\" \", \"\\\\s\", $4); gsub(\" \", \"\\\\s\"\
    , $5); gsub(\" \", \"\\\\s\", $6); gsub(\" \", \"\\\\s\", $7); gsub(\" \", \"\\\
    \\s\", $8); gsub(\" \", \"\\\\s\", $9); gsub(\" \", \"\\\\s\", $10); gsub(\" \"\
    , \"\\\\s\", $11); gsub(\" \", \"\\\\s\", $12); gsub(\" \", \"\\\\s\", $13); gsub(\"\
    \ \", \"\\\\s\", $14); gsub(\" \", \"\\\\s\", $15); gsub(\" \", \"\\\\s\", $16);\
    \ gsub(\" \", \"\\\\s\", $17); gsub(\" \", \"\\\\s\", $18); gsub(\" \", \"\\\\\
    s\", $19); gsub(\" \", \"\\\\s\", $20); gsub(\" \", \"\\\\s\", $21); gsub(\" \"\
    , \"\\\\s\", $22); gsub(\" \", \"\\\\s\", $23); gsub(\" \", \"\\\\s\", $24); gsub(\"\
    \ \", \"\\\\s\", $25); gsub(\" \", \"\\\\s\", $26); gsub(\" \", \"\\\\s\", $27);\
    \ gsub(\" \", \"\\\\s\", $28); gsub(\" \", \"\\\\s\", $29); gsub(\" \", \"\\\\\
    s\", $30); gsub(\" \", \"\\\\s\", $31); gsub(\" \", \"\\\\s\", $32); gsub(\" \"\
    , \"\\\\s\", $33); gsub(\" \", \"\\\\s\", $34); gsub(\" \", \"\\\\s\", $35); gsub(\"\
    \ \", \"\\\\s\", $36); gsub(\" \", \"\\\\s\", $37); gsub(\" \", \"\\\\s\", $38);\
    \ gsub(\" \", \"\\\\s\", $39); gsub(\" \", \"\\\\s\", $40); gsub(\" \", \"\\\\\
    s\", $41); gsub(\" \", \"\\\\s\", $42); gsub(\" \", \"\\\\s\", $43); gsub(\" \"\
    , \"\\\\s\", $44); gsub(\" \", \"\\\\\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7dyglzow.sh: line 29: unexpected EOF while looking for matching
    `''''

    /tmp/tmp7dyglzow.sh: line 49: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\techo \"$1\" | tr ' ' ','\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tlocal words=$1\n\t# split on whitespace\n\twords=${words//,/ }\n\tlocal\
    \ count=$words|wc -w\n\t# if there are no whitespaces split on commas\n\tif [\
    \ ! -z ${words} ]; then\n\t\twords=${words//[\\ ,]/ }\n\t\tlocal count=$words|wc\
    \ -w\n\tfi\n\tlocal count_odd=$(($count/2))\n\tif [[ $count_odd -eq 0 ]]; then\n\
    \t\twords=$(echo $words|tr \"[:upper:]\" \"[:lower:]\")\n\t\techo $words\n\telse\n\
    \t\techo $count_odd\n\tfi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_t11_mbj.sh: line 20: [: Hello: binary operator expected

    /tmp/tmp_t11_mbj.sh: line 24: /2: syntax error: operand expected (error token
    is "/2")

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=\"$1\"\n    local chars=''\n    local count=0\n    while read\
    \ line; do\n        ((count++))\n        case \"$line\" in\n            *[![:space:]]*)\
    \ # If there is a space or a non-space char\n                if [[ \"$chars\"\
    \ != \"\" ]]; then\n                    echo \"$chars\" >&2\n                fi\n\
    \                chars=\"${line//,/ }\"\n                continue\n          \
    \  ;;\n            *)\n                echo \"$line\" >&2\n                continue\n\
    \            ;;\n        esac\n    done < <(tr '[:upper:]' '[:lower:]' <<< \"\
    $str\")\n    if [[ \"$chars\" != \"\" ]]; then\n        echo \"$chars\" >&2\n\
    \    fi\n    echo \"$count\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'hello world!

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=$1\n    local i=${#string}\n    local list=\"\"\n    local\
    \ comma_count=0\n    local word_count=0\n    while (( i <= ${#string} )); do\n\
    \        if [[ \"$string\" =~ \\| ]]; then\n            comma_count=$(( $(( $comma_count\
    \ + 1 )) ))\n        else\n            if (( $comma_count )); then\n         \
    \       list+=\",\"\n            fi\n            list+=\"\\\"${string:i:1}\\\"\
    \"\n            (( word_count++ ))\n            (( i++ ))\n            comma_count=0\n\
    \        fi\n    done\n    if (( $word_count )); then\n        list+=\",\"\n \
    \   fi\n    list+='\"'\n    list+=\"${string:i:1}\\\"\"\n    list+=\"\\\"\"\n\
    \    echo \"$list\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=\"${1:-}\"\n    local delimiters=\" ,;\"\n\n    # $str is space-only\
    \ or comma-only so replace commas and return\n    echo \"${str//,/$'\\n'}\" |\
    \ grep -zo \"^$delimiters\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local str=$1\n  local spaces=$(echo $str | grep -i \" \" | wc -l)\n  if\
    \ [[ $spaces -gt 0 ]]; then\n    echo $str | grep -i \" \"\n  else\n    echo $str\
    \ | tr [a-z] [A-Z]\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "tr: extra operand \u2018[A-Z]\u2019\nTry 'tr --help' for more information.\n"
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words\n    words=\"$1\"\n    local count\n    count=\"0\"\n   \
    \ # If the string contains no spaces, return the string\n    if [[ ${words//[[:space:]]/}\
    \ ]]; then\n        echo \"$words\"\n        return\n    fi\n    if [[ \"$words\"\
    \ == *,* ]]; then\n        words=\"${words//,/ }\"\n        count=\"${words//[^a-z]/}\"\
    \n        words=\"${words//[a-z]/}\"\n        echo \"$words\"\n        return\n\
    \    fi\n    count=\"${words//[^a-z]/}\"\n    words=\"${words//[a-z]/}\"\n   \
    \ echo \"$words\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local split=$(echo \"$1\" | tr '[:upper:]' '[:lower:]' | sed -e 's/[[:space:]]//g'\
    \ | sed -e 's/,/, /g')\n    local splitCount=$(echo \"$split\" | tr '[:upper:]'\
    \ '[:lower:]' | wc -l)\n    local splitLetter=$(echo \"$split\" | wc -l | tr -d\
    \ ' ')\n    local splitUpper=$(echo \"$split\" | wc -l | tr -s ' ' | cut -d '\
    \ ' -f1)\n    local splitLower=$(echo \"$split\" | wc -l | tr -s ' ' | cut -d\
    \ ' ' -f1)\n\n    if [ -z \"$split\" ] ; then\n        local split=$splitUpper\n\
    \        splitCount=$splitUpper\n        splitLetter=$splitUpper\n        splitUpper=0\n\
    \        splitLower=0\n    fi\n\n    if [ $splitCount == 1 ]; then\n        local\
    \ split=\"$split\"\n        local splitCount=1\n        local splitLetter=1\n\
    \        local splitUpper=0\n        local splitLower=0\n    fi\n\n    local output\n\
    \    output=$split\n    local i\n    for ((i=1; i<=$splitCount; i++)); do\n  \
    \      output=\"${output},$splitLower${i}\"\n        splitLower=$((splitLower+i))\n\
    \    done\n\n    local output\n    output=\"${output},$splitUpper\"\n\n    for\
    \ ((i=$splitLower; i<=$splitUpper; i++)); do\n        output=\"${output},${i}\"\
    \n    done\n\n    if [ -z \"$splitLetter\" ] ; then\n        output=\"${output},${splitLetter}\"\
    \n    fi\n\n    echo \"$output\"\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words words number\n    IFS=\" \" read -r -a words <<< \"$1\"\n\
    \    number=\"${#words[@]}\"\n    if [[ -z \"$number\" ]]; then\n        words=\"\
    $1\"\n        number=1\n    fi\n    local chars\n    for ((i=1; i<=number; i+=2))\n\
    \    do\n        chars=\"$(printf \"$words[$i]\" | sed 's/\\ //g' | tr '[A-Z]'\
    \ '[a-z]' | wc -c; printf \"%d\")\"\n        if [[ \"$chars\" == $(printf \"$words[$i]\"\
    \ | tr '[A-Z]' '[a-z]' | wc -c) ]]\n        then\n            words[$i]=\"${words[$i]/\
    \ /,'}\"\n        else\n            words[$i]=\"${words[$i]/,'}\"\n        fi\n\
    \    done\n    echo \"${words[@]}\"\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\twords=\"\"\n\twordsplit=0\n\twordsplit=0\n\twordsplit=0\n\tfor i in $@\n\
    \tdo\n\t\twords=$words$i\" \"\n\t\twordsplit=$((wordsplit+1))\n\tdone\n\twords=$words\
    \ # remove extra space\n\tfor i in $words;\n\tdo\n\t\techo $i\n\tdone\n\techo\
    \ $wordsplit\n\twordsplit=$((wordsplit-1))\n\techo $wordsplit\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local string=\"$1\"\n  local commas_present=false\n  local letters_present=false\n\
    \  local letters_odd_present=false\n  local i=0\n  while [[ $i -lt ${#string}\
    \ ]]; do\n    local letter=\"${string[$i]}\"\n    case \"$letter\" in\n      \"\
    \ \") commas_present=true\n      ;;\n      \",\") commas_present=true\n      ;;\n\
    \      \"'\") letters_present=true\n      ;;\n      \"'\") letters_odd_present=true\n\
    \      ;;\n      \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"\
    k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"\
    x\" \"y\" \"z\")\n        letters_present=true\n        letters_odd_present=true\n\
    \        ;;\n      \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\
    \ \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\"\
    \ \"X\" \"Y\" \"Z\")\n        letters_present=true\n        letters_odd_present=true\n\
    \        ;;\n      \"0\") letters_present=true\n      ;;\n      \"0\") letters_odd_present=true\n\
    \      ;;\n      *) letters_present=true\n        letters_odd_present=true\n \
    \       ;;\n    esac\n    i=$((i+1))\n  done\n\n  if [[ \"$commas_present\" ==\
    \ \"true\" ]]; then\n    echo \"$string\"\n  else\n    echo -n \"$string\"\n \
    \   if [[ \"$letters_present\" == \"true\" ]]; then\n      echo \"$((${#string}\
    \ + 1))\"\n    elif [[ \"$letters_odd_present\" == \"true\" ]]; then\n      echo\
    \ \"${#string} + 1\"\n    else\n      echo \"$((${#string} + 1))\"\n    fi\n \
    \ fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0rzdqb3n.sh: line 31: syntax error near unexpected token `"b"''

    /tmp/tmp0rzdqb3n.sh: line 31: `      "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k"
    "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z")''

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local input=\"$1\"\n    local words=\"\"\n    local space=0\n    local\
    \ commas=0\n    local lower=0\n    local upper=0\n    local letters=0\n    local\
    \ digits=0\n    local quote=0\n\n    for word in $(echo $input | sed -e 's/^[\
    \ \\t]*//' -e '/^[ \\t]*$/d' -e 's/[,;]\\?//g' -e 's/\\!//g'); do\n        if\
    \ [ \"$word\" != \"\" ]; then\n            case \"$word\" in\n               \
    \ \"'\" ) quote=1;;\n                \"\\\\\" ) quote=1;;\n                \"\
    \ \" ) space=1;;\n                \",\" ) commas=1;;\n                \"-\" )\
    \ lower=1;;\n                \"_\" ) upper=1;;\n                \"a-z\") lower=1;;\n\
    \                \"A-Z\") upper=1;;\n                \"0-9\") digits=1;;\n   \
    \             \"[^a-zA-Z0-9]\") letters=1;;\n                * ) words=$words\
    \ \"$word\";;\n            esac\n        fi\n    done\n\n    if [ $letters -lt\
    \ $(( ${#input} - ${#words} )) ]; then\n        words=$words\n    elif [ $lower\
    \ -eq 1 ]; then\n        words=\"\\\"$words\\\"\"\n    elif [ $upper -eq 1 ];\
    \ then\n        words=\"$words\"\n    elif [ $commas -eq 1 ]; then\n        words=\"\
    \\\"$words\",\"\n    elif [ $quote = 1 ]; then\n        words=\"\\\"$words\\\"\
    \"\n    elif [ $digits -eq 1 ]; then\n        words=\"$words\"\n    fi\n\n   \
    \ echo $words\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6_5parvl.sh: line 73: unexpected EOF while looking for matching
    `"''

    /tmp/tmp6_5parvl.sh: line 77: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: -1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  IFS=',;' read -r -a arr $1 || return 1\n  declare -i cnt=0\n  for i in\
    \ \"${arr[@]}\"; do\n    [[ -n $i ]] || return 1\n    cnt=$((cnt+1))\n  done\n\
    \  echo \"$cnt\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=59 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=39 encoding='utf-8'>
  timestamp: 1660057067
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words=\"$1\"\n    # Trim whitespace around words\n    # https://unix.stackexchange.com/questions/42718/trim-whitespace-from-each-word-in-a-string-ignoring-commas-and-quotes-with-sed\n\
    \    words=${words//[[:space:]]+}\n    words=$(echo \"$words\" | sed 's/,/\" \"\
    /g')\n    words=$(echo \"$words\" | sed 's/\"/\" \" /g')\n    words=$(echo \"\
    $words\" | sed 's/\"//g')\n    echo \"$words\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    echo -n \"${1:-}\"\n    set -- $1 #save first arg to $1\n    local -a\
    \ args=()\n    local flag=false\n    while [[ $# -gt 0 ]]\n    do\n        local\
    \ -a tokens=()\n        local word=${!#1}\n        if [[ \"$flag\" == \"false\"\
    \ ]]\n        then\n            for (( i = 0; i < ${#word}; i++ ))\n         \
    \   do\n                if [[ \"$word\" =~ ^[a-zA-Z0-9]$ ]]\n                then\n\
    \                    if [[ \"$i\" != \"0\" ]]\n                    then\n    \
    \                    tokens[$(( i - 1))]=\"$word\"\n                    fi\n \
    \               else\n                    tokens[$(( i - 1))]=\"$word\"\n    \
    \                flag=true\n                fi\n            done\n        fi\n\
    \        if [[ \"$flag\" == \"true\" ]]\n        then\n            if [[ \"${tokens[*]}\"\
    \ =~ ^[a-zA-Z0-9]*$] ]]\n            then\n                flag=false\n      \
    \      else\n                args+=(\"${tokens[*]}\")\n            fi\n      \
    \  fi\n        shift\n    done\n    echo \"${args[*]}\"\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9olf1vqt.sh: line 22: word=${!#1}: bad substitution

    /tmp/tmp9olf1vqt.sh: line 22: word=${!#1}: bad substitution

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  # Split the input string on whitespace\n  local IFS=$'\\n' line\n  local\
    \ word\n  local count\n  local words\n\n  # Split on commas if there is commas\n\
    \  words=$( IFS=','; echo \"$1\" )\n\n  # Split on whitespace if there are no\
    \ commas\n  if [ $# -eq 0 ]; then\n    words=$( IFS=$'\\n'; echo \"$line\" )\n\
    \  fi\n\n  # Split on whitespace if there are no commas splitting on commas\n\
    \  if [ $# -eq 1 ]; then\n    words=$( IFS=$'\\n'; echo \"$line\" )\n  fi\n\n\
    \  # Split on whitespace if there are no commas splitting on commas\n  if [ $#\
    \ -eq 2 ]; then\n    words=$( IFS=$'\\n'; echo \"$line\" )\n  fi\n\n  # Split\
    \ on whitespace if there are no commas splitting on commas\n  if [ $# -eq 3 ];\
    \ then\n    words=$( IFS=$'\\n'; echo \"$line\" )\n  fi\n\n  # Split on whitespace\
    \ if there are no commas splitting on commas\n  if [ $# -eq 4 ]; then\n    words=$(\
    \ IFS=$'\\n'; echo \"$line\" )\n  fi\n\n  # Split on whitespace if there are no\
    \ commas splitting on commas\n  if [ $# -eq 5 ]; then\n    words=$( IFS=$'\\n';\
    \ echo \"$line\" )\n  fi\n\n  # Split on whitespace if there are no commas splitting\
    \ on commas\n  if [ $# -eq 6 ]; then\n    words=$( IFS=$'\\n'; echo \"$line\"\
    \ )\n  fi\n\n  # Split on whitespace if there are no commas splitting on commas\n\
    \  if [ $# -eq 7 ]; then\n    words=$( IFS=$'\\n'; echo \"$line\" )\n  fi\n\n\
    \  # Split on whitespace if there are no commas splitting on commas\n  if [ $#\
    \ -eq 8 ]; then\n    words=$( IFS=$'\\n'; echo \"$line\" )\n  fi\n\n  # Split\
    \ on whitespace if there are no commas splitting on commas\n  if [ $# -eq 9 ];\
    \ then\n    words=$( IFS=$'\\n'; echo \"$line\" )\n  fi\n\n  # Split on whitespace\
    \ if there are no commas splitting on commas\n  if [ $# -eq 10 ]; then\n    words=$(\
    \ IFS=$'\\n'; echo \"$line\" )\n  fi\n\n  # \n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local word_count=0\n    local words=$2\n    local space=${3:-,}\n   \
    \ local lower=${4:-$lower}\n    local letter=${5:-'a'} # default starting letter\n\
    \n    if [ -n \"$words\" ]; then\n        # Count words in list\n        word_count=$(wc\
    \ -w <<< \"$words\")\n        # Remove spaces\n        words=$words\n        #\
    \ Remove leading spaces from words\n        words=${words#* }\n        # Remove\
    \ trailing spaces from words\n        words=${words% *}\n        # Remove double\
    \ quotes\n        words=${words%\"*}\n\n        # Remove spaces from the start\n\
    \        words=${words#\"$space\"}\n\n        # Remove trailing spaces from words\n\
    \        words=${words%\"$space\"}\n\n        # Remove the '-' separator\n   \
    \     words=${words%'-'$space}\n\n        # Split on comma\n        words=${words%,*}\n\
    \    else\n        words=\"0\"\n    fi\n\n    echo \"$word_count\"\n    echo \"\
    $words\"\n\n    if [ -n \"$words\" ]; then\n        local count=0\n        local\
    \ i\n        for ((i = 0; i < ${#words}; i++)); do\n            if [[ $words[$i]\
    \ == ' ' ]]; then\n                (( count += 1 ))\n            else\n      \
    \          break\n            fi\n        done\n        echo \"$count\"\n    fi\n\
    \n    if [ -n \"$words\" ]; then\n        local count=0\n        local i\n   \
    \     for ((i = 0; i < ${#words}; i++)); do\n            if [[ $words[$i] == $letter\
    \ ]]; then\n                (( count += 1 ))\n            else\n             \
    \   break\n            fi\n        done\n        echo \"$count\"\n    fi\n\n \
    \   if [ -n \"$words\" ]; then\n        local count=0\n        local i\n     \
    \   for ((i = 0; i < ${#words}; i++)); do\n            if [[ $words[$i] == $lower\
    \ ]]; then\n                (( count += 1 ))\n            else\n             \
    \   break\n            fi\n        done\n        echo \"$count\"\n    fi\n\n \
    \   if [ -n \"$words\" ]; then\n        local count=0\n        local i\n     \
    \   for ((i = 0; i < ${#words}; i++)); do\n            if [[ $words[$i] == $letter\
    \ ]]; then\n                (( count += 1 ))\n            else\n             \
    \   break\n            fi\n        done\n        echo \"$count\"\n    fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_gnw_rau.sh: line 117: unexpected EOF while looking for matching
    `"''

    /tmp/tmp_gnw_rau.sh: line 121: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local string=\"$1\"\n  if [[ \"$string\" = \"$string\" ]]; then\n    echo\
    \ \"$string\"\n  else\n    local split=`echo $string | sed -e 's/[[:space:]]/\\\
    t/g' | sed -e 's/[[:blank:]]/\\\\n/g' | awk '{print \"\\\"\\\"\"$0}' | awk -F\
    \ \"\\\"\" '{print $2}' | cut -d \"\\\"\" -f 1 | sort | uniq`\n    local count=0\n\
    \    local letters=`echo $string | sed -e 's/[[:space:]]/\\t/g' | sed -e 's/[[:blank:]]/\\\
    \\n/g' | awk '{print \"\\\"\"$0\"'\"}' | awk -F \"\\\"\" '{print $1}' | sort |\
    \ uniq`\n    local newstring=\n    local last=\n    for letter in $letters\n \
    \   do\n      if [[ \"$split\" = \"$letter\" ]]; then\n        newstring=$newstring$letter\n\
    \      else\n        if [[ \"$letter\" = \"$last\" ]]; then\n          count=$(($count+1))\n\
    \        else\n          newstring=$newstring\"\\\"$letter\\\"\"\n          count=$(($count+1))\n\
    \        fi\n      fi\n      last=$letter\n    done\n    echo $newstring\n  fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: -1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  # Split $1 on whitespace\n  # If there is a white space in the text, split\
    \ on comma\n  # If there is a comma split the resulting on whitespace\n  local\
    \ i word\n  words=()\n\n  while read -r i; do\n    if [[ $i ]]; then\n      word=()\n\
    \      for (( i = 1; i < ${#i}; ++i )); do\n        word+=(\"${i}\")\n      done\n\
    \n      # First split the word on commas\n      if [[ ${#word[@]} -gt 0 ]]; then\n\
    \        words=(\"${words[@]}\" \"${word[@]}\")\n      fi\n\n      # If there\
    \ is no comma in the word split the word on whitespace\n      if [[ ${#word[@]}\
    \ -eq 0 ]]; then\n        words=(\"${words[@]}\" \"$i\")\n      fi\n    fi\n \
    \ done\n\n  echo \"${words[@]}\"\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=25 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660057067
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tlocal IFS=$1\n\tshift\n\tlocal words=$1\n\tlocal count=0\n\tlocal newwords=\n\
    \tlocal i=0\n\tlocal char\n\n\tfor char in $words; do\n\t\tif [[ \"$char\" ==\
    \ \"\\\\\" ]]; then\n\t\t\tnewwords=\"$newwords,$char\"\n\t\t\tcontinue\n\t\t\
    fi\n\t\tif [[ ${#newwords} == 0 ]]; then\n\t\t\tnewwords=\"$char\"\n\t\t\tcontinue\n\
    \t\tfi\n\t\tif [[ ${#newwords} == 1 ]]; then\n\t\t\tcount=$((count+1))\n\t\telse\n\
    \t\t\tcount=$((count+1))\n\t\t\tif [ $count -gt 2 ]; then\n\t\t\t\tcount=$((count+1))\n\
    \t\t\t\tnewwords=\"$newwords\"\n\t\t\t\tcontinue\n\t\t\tfi\n\t\tfi\n\tdone\n\n\
    \tif [[ ${#newwords} == 1 ]]; then\n\t\tcount=$((count+1))\n\tfi\n\n\tif [[ ${count}\
    \ -eq 1 ]]; then\n\t\techo \"$newwords\"\n\telse\n\t\techo \"$count\"\n\tfi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ \"$1\" =~ \"\\s(?=,|$)\" ]]; then\n    echo \"${1}\"\n  else\n  \
    \  echo \"${1// /,}\"\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local input=\"$1\"\n  if [[ \"$input\" =~ ([^,]+) ]]; then # contains comma\n\
    \    local items=$(echo \"$input\" | tr ',' ' ')\n    local output=\"${items/^/\
    \ }\"\n    local output2=\"$(echo \"$output\" | tr '[:upper:]' '[:lower:]')\"\n\
    \    local output3=\"$(echo \"$output\" | tr '[:upper:]' '[:alpha:]')\"\n    local\
    \ output4=\"$(echo \"$output2\" | tr '[:upper:]' '[:alpha:]')\"\n    local output5=\"\
    $(echo \"$output2\" | tr '[:lower:]' '[:alpha:]')\"\n    local output6=\"$(echo\
    \ \"$output2\" | tr '[:lower:]' '[:upper:]')\"\n    local output7=\"$(echo \"\
    $output3\" | tr '[:upper:]' '[:alpha:]')\"\n    local output8=\"$(echo \"$output3\"\
    \ | tr '[:lower:]' '[:alpha:]')\"\n    local output9=\"$(echo \"$output3\" | tr\
    \ '[:lower:]' '[:upper:]')\"\n    echo \"$output4,$output5,$output6,$output7,$output8,$output9\"\
    \n  else\n    echo \"$input\" | tr ' ' '\\n' | wc -c\n  fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'tr: when translating, the only character classes that may appear in

    string2 are ''upper'' and ''lower''

    tr: when translating, the only character classes that may appear in

    string2 are ''upper'' and ''lower''

    tr: when translating, the only character classes that may appear in

    string2 are ''upper'' and ''lower''

    tr: when translating, the only character classes that may appear in

    string2 are ''upper'' and ''lower''

    tr: when translating, the only character classes that may appear in

    string2 are ''upper'' and ''lower''

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local str=$1\n  local count=1\n  local word\n  local last_char\n\n  while\
    \ [[ \"$str\" != \"\" ]]; do\n    if [[ \"$str\" == \" \" ]]; then\n      # If\
    \ the current char is a space\n      word=\"'\\\"'\\\"'\"\n    else\n      # If\
    \ the current char is not a space\n      word=\"\\\"${str:$((count-1))}\\\"\"\n\
    \    fi\n    count=$((count+1))\n    last_char=$((str-1))\n    str=\"${str:$((last_char))}\"\
    \n    echo \"$word\"\n  done\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoc8j0pap.sh: line 29: Hello world\!: syntax error: invalid arithmetic
    operator (error token is "\!")

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local i words=\"\"\n    IFS=$'\\n'\n    for ((i=1; $i -lt $1;)); do\n\
    \        words=\"${words},${1%,*}\"\n        shift\n    done\n    IFS=$' '\n \
    \   echo \"${words##*,}\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp05k6mn_m.sh: line 17: ((: 1 -lt Hello world\!: syntax error: invalid
    arithmetic operator (error token is "\!")

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local -r words_count=\"${1:-}\"\n    local -r delimiter=\"${2:-,}\"\n\
    \n    local -r lower_case_words=()\n    local -r lower_case_words_count=()\n\n\
    \    for (( i=0; i<\"${words_count}\"; i++ )); do\n        lower_case_words+=($(echo\
    \ \"${1:$i:1}\" | tr \"[:upper:]\" \"[:lower:]\"))\n        lower_case_words_count+=($(echo\
    \ \"${lower_case_words[*]}\" | tr -cd \"$delimiter\"))\n    done\n\n    # echo\
    \ \"${lower_case_words[*]}\" # dbg\n    echo \"${lower_case_words[*]}\" | tr \"\
    \ \" \"\\n\" | sort -u | tr \"\\n\" \" \"\n    echo \"${lower_case_words[*]}\"\
    \ | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \"\n    echo \"${lower_case_words[*]}\"\
    \ | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \"\n    echo \"${lower_case_words[*]}\"\
    \ | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \"\n\n    if [[ ${#lower_case_words[*]}\
    \ != ${#lower_case_words_count[@]} ]]; then\n        echo \"${#lower_case_words[*]}\
    \ != ${#lower_case_words_count[@]}\"\n        echo \"${lower_case_words[*]}\"\n\
    \        echo \"${lower_case_words_count[@]}\"\n        echo \"${#lower_case_words[*]}\
    \ != ${#lower_case_words_count[@]}\"\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9hrixce1.sh: line 21: ((: i<Hello world\!: syntax error: invalid
    arithmetic operator (error token is "\!")

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local arg\n    # $1 is a string\n    local -n arr=(\"$1\")\n    local\
    \ -n arr_ref=(\"$1\")\n    # arr has one element\n    arr=(${arr[0]})\n    arr_ref=(${arr_ref[0]})\n\
    \    # empty string\n    [[ \"${arr[@]}\" ]] && arr=()\n    [[ \"${arr[@]}\" ]]\
    \ && arr_ref=()\n    # all whitespaces\n    [[ \"${arr[@]}\" == *\" \" ]] && arr=()\n\
    \    [[ \"${arr[@]}\" == *\" \" ]] && arr_ref=()\n    # all commas\n    [[ \"\
    ${arr[@]}\" == *\",\" ]] && arr=()\n    [[ \"${arr[@]}\" == *\",\" ]] && arr_ref=()\n\
    \    # all lower-case letters\n    [[ \"${arr[@]}\" == *[a-z]* ]] && arr=()\n\
    \    [[ \"${arr[@]}\" == *[a-z]* ]] && arr_ref=()\n    local n=0\n    # odd count\n\
    \    [[ \"${arr[@]}\" ]] && n=$(\n        IFS=,\n        echo \"${arr[@]}\" |\
    \ sort | uniq -c |\n            awk '{ print $2 }'\n        )\n    [[ \"${arr_ref[@]}\"\
    \ ]] && n=$(\n        IFS=,\n        echo \"${arr_ref[@]}\" | sort | uniq -c |\n\
    \            awk '{ print $2 }'\n        )\n    echo \"${n}\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1w9me2f4.sh: line 17: local: arr: reference variable cannot be
    an array

    /tmp/tmp1w9me2f4.sh: line 18: local: arr_ref: reference variable cannot be an
    array

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local output=\"$1\"\n  local word=\" \"\n  local count=\"1\"\n\n  while\
    \ [ \"$word\" != \"\" ]; do\n    local tmp_word=$(echo \"$word\" | tr '[A-Za-z]'\
    \ '[a-z]')\n    local tmp_count=$(echo \"$word\" | wc -l)\n    word=$(echo \"\
    $word\" | cut -d ' ' -f 1)\n    count=$((tmp_count+count)) # update count\n\n\
    \    if [ \"$word\" != \"\" ]; then # word not empty\n      output+=\"\\\"$word\\\
    \"\" # add quotes around word\n      word=\"\" # reset word\n    fi\n  done\n\n\
    \  echo $count # return count\n  echo \"$output\" # return output\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local IFS=,\n  local i\n  local words=''\n  local count\n  for (( i = 0;\
    \ i < ${#1}; i++ )); do\n    words+='\"'${1:i:1}'\"' # Quotes are necessary because\
    \ the word could contain commas and other non-word chars\n    if [ ${1:i:1} ==\
    \ ' ' ]; then\n      if [ \"$words\" != \"\" ]; then\n        words=''\n     \
    \ fi\n    elif [ ${1:i:1} == ',' ]; then\n      if [ \"$words\" != \"\" ]; then\n\
    \        count=\"$(( count + 1 ))\"\n      fi\n      words=''\n    fi\n  done\n\
    \  if [ \"$words\" != \"\" ]; then\n    count=\"$(( count + 1 ))\"\n  fi\n  echo\
    \ \"$count\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local IFS=\"$1\"\n    local i\n    local word\n    local count\n\n  \
    \  # remove spaces, quotes, tabs and newlines to simplify parsing\n    words=$(tr\
    \ -cd \" '\\t,\\n\\r\" <<< \"$1\")\n    count=0\n    for word in $words; do\n\
    \        if [ ${#word} -eq 0 ]; then continue; fi\n        if [[ ! ${word:0:1}\
    \ == \" \" ]]; then\n            count=$(( $count + ${#word:0:1} ))\n        else\n\
    \            count=$(( $count + ${#word} ))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local text\n    text=$1\n    if [[ ! \"$text\" ]]; then\n        echo\
    \ \"$text\" >&2\n        exit 1\n    fi\n    if [[ $(echo $text | grep -Eq '^[[:space:]]*$')\
    \ ]]; then\n        echo \"$text\" >&2\n        exit 1\n    fi\n    if [[ $(echo\
    \ $text | grep -Eq '^[[:space:]]*,$') ]]; then\n        echo \"$text\" >&2\n \
    \       exit 1\n    fi\n    if [[ $(echo $text | grep -Eq '^[[:alpha:]]') ]];\
    \ then\n        echo \"$text\" >&2\n        exit 1\n    fi\n\n    local length\n\
    \    length=$(echo $text | wc -c)\n    echo \"$length\" >&2\n    if [[ $(echo\
    \ $text | grep -Eq '^[[:space:]]*,$') ]]; then\n        echo \"$text\" >&2\n \
    \       exit 1\n    fi\n    echo $((length / 2)) | tr \",\" \" \" >&2\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '14

    7

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local w\n    local i\n    local len\n    local j\n    local words\n \
    \   local word\n    local count\n    local count2\n    local output\n    local\
    \ out\n    local str\n    local strlen\n    local char\n    local char2\n    local\
    \ char3\n    local output\n    local len\n    local str\n    local strlen\n  \
    \  local char\n    local char2\n    local char3\n    local str\n    local strlen\n\
    \    local char\n    local char2\n    local char3\n    local char\n    local char2\n\
    \    local char3\n    local char\n    local char2\n    local char3\n    local\
    \ char\n    local char2\n    local char3\n    local char\n    local char2\n  \
    \  local char3\n    local char\n    local char2\n    local char3\n    local char\n\
    \    local char2\n    local char3\n    local char\n    local char2\n    local\
    \ char3\n    local char\n    local char2\n    local char3\n    local char\n  \
    \  local char2\n    local char3\n    local char\n    local char2\n    local char3\n\
    \    local char\n    local char2\n    local char3\n    local char\n    local char2\n\
    \    local char3\n    local char\n    local char2\n    local char3\n    local\
    \ char\n    local char2\n    local char3\n    local char\n    local char2\n  \
    \  local char3\n    local char\n    local char2\n    local char3\n    local char\n\
    \    local char2\n    local char3\n    local char\n    local char2\n    local\
    \ char3\n    local char\n    local char2\n    local char3\n    local char\n  \
    \  local char2\n    local char3\n    local char\n    local char2\n    local char3\n\
    \    local char\n    local char2\n    local char3\n    local char\n    local char2\n\
    \    local char3\n    local char\n    local char2\n    local char3\n    local\
    \ char\n    local char2\n    local char3\n    local char\n    local char2\n  \
    \  local char3\n    local char\n    local char2\n    local char3\n    local char\n\
    \    local char2\n    local char3\n    local \n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local -r words=\"${1}\"\n\n    case \"${words}\" in\n        *[![:space:]]*)\
    \ echo \"${words}\"\n            ;;\n        *[[:space:]]*)\n            echo\
    \ \"${words//[^[:space:]]/},\"\n            ;;\n        *)\n            echo \"\
    ${words//[[:space:]]/,}\";\n            echo \"${words%%[![:space:]]*}\"\n   \
    \         ;;\n    esac\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local words=\"${1}\"\n  local word_count=\"${words//,/$'\\n'}\"\n  local\
    \ split=\"${word_count//$'\\n'/$'\\n'}\"\n  echo $split\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local -n arg1=$1\n    local IFS=$'\\n' # Don't change $IFS since it might\
    \ have already been changed\n    # $2 might be empty so we set $1\n    local WORDS_SPLIT=\"\
    $(echo $1 | tr '[A-Za-z]' '[a-z,A-Z,0-9,*,.,-]')\" # No commas\n    local WORDS_ARRAY=($WORDS_SPLIT)\n\
    \    local WORDS_LENGTH=${#WORDS_SPLIT}\n    local WORDS_LENGTH_TWO=${#WORDS_ARRAY[@]}\n\
    \    local WORD_NUMBER=0\n    local WORD_NUMBER_TWO=0\n    local WORD_STRING=\"\
    \"\n    local WORD_STRING_TWO=\"\"\n    local WORD_LIST=()\n    # Loop through\
    \ each word and build up a string with all words in the wordlist with commas\n\
    \    while (( WORD_NUMBER < WORDS_LENGTH )); do\n        WORD_LIST+=($(echo $1\
    \ | tr '[A-Za-z]' '[a-z,A-Z,0-9,*,.,-]' | sed \"s/ $WORDS_SPLIT /, /\"))\n   \
    \     WORD_NUMBER=$((WORD_NUMBER + 1))\n    done\n    # Now split that list on\
    \ commas\n    local WORDS_LIST=($(IFS=','; echo \"${WORD_LIST[*]}\" | tr '[:upper:]'\
    \ '[:lower:]'))\n    # If the number of words doesn't match the number of words\
    \ in the list we return 1\n    local WORD_NUMBER_COUNT=$(echo ${#WORDS_LIST[*]}\
    \ | tr '[:upper:]' '[:lower:]')\n    if [ ${WORD_NUMBER_COUNT} != ${WORDS_LENGTH_TWO}\
    \ ]; then\n        return 1\n    fi\n    # If the number of words in the list\
    \ isn't evenly divisible by 2\n    if [ \"${WORDS_LENGTH_TWO}\" -lt \"2\" ]; then\n\
    \        return 1\n    fi\n    local WORD_NUMBER_COUNT_TWO=$(echo ${#WORDS_LIST[@]}\
    \ | tr '[:upper:]' '[:lower:]')\n    # If the number of words in the list isn't\
    \ evenly divisible by 2\n    if [ \"${WORD_NUMBER_COUNT_TWO}\" -lt \"2\" ]; then\n\
    \        return 1\n    fi\n    # If the number of words in the list isn't evenly\
    \ divisible by 2\n    if [ \"${WORD_NUMBER_COUNT}\" -lt \"2\" ]; then\n      \
    \  return 1\n    fi\n    # If the number of words in the list isn't evenly divisible\
    \ by 2\n    if [ \"${WORD_NUMBER_COUNT}\" -lt \"2\" ]; then\n        return 1\n\
    \    fi\n    # Now loop through each word, appending the wordlist to WORD_STRING_TWO\n\
    \    while \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2ypdx96p.sh: line 58: syntax error near unexpected token `}''

    /tmp/tmp2ypdx96p.sh: line 58: `}''

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local text=\"$1\" \n    local words=\"$2\"\n\n    for word in $text;\
    \ do\n        echo \"$word\"\n    done\n\n    IFS=$'\\n' read -r -d '' -a words\
    \ < <(echo \"${words}\" | sed 's/,/ /g')\n    echo \"${#words[@]}\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local input=\"$1\"\n    local split_on=${2:-','}\n    local num_words=$(echo\
    \ $input | sed 's/,/ /g' | sed \"s/$split_on/ /g\" | wc -l)\n    if [ \"$num_words\"\
    \ -ne 0 ]; then\n      echo $input | sed 's/,/ /g' | sed \"s/$split_on/ /g\" |\
    \ sed \"s/^[ \\t]*//g\" | sed \"s/[ \\t]*$//g\" | sed \"s/[ \\t]*$/ /g\"\n   \
    \ else\n      echo \"0\"\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  echo \"$1\" | sed 's/,/ /g' | tr -cd '[:upper:]' | sort -u | wc -l\n}\n\
    \ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tlocal word=\"$1\"\n\n\tword=\"${word,,}\"\n\tword=\"${word:-,}\"\n\tword=\"\
    ${word:-}\"\n\n\tcase \"${word}\" in\n\t\t\"\") echo \"\\\"${word}\\\"\";;\n\t\
    \t*)\n\t\t\tIFS=\"[^a-zA-Z]\" read -a arr <<< \"$word\"\n\t\t\tlocal length\n\t\
    \t\tlength=${#arr[@]}\n\t\t\tif [ \"${#arr[@]}\" -eq 0 ]; then\n\t\t\t\techo \"\
    \\\"${word}\\\"\"\n\t\t\telse\n\t\t\t\techo \"${arr[*]:0:length/2}\" \"${arr[*]:((length\
    \ / 2))}\"\n\t\t\tfi;;\n\tesac\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local str=$1\n  local words=\"\"\n  local count\n  local i\n  for i in\
    \ $(seq 1 $((${#str}-1))); do\n    local char=${str:$i:1}\n    local char1=\"\
    ${char}\"\n    words=\"$words $char1\"\n    if [[ ${#words} = 0 ]]; then\n   \
    \   words=\"$count\"\n      count=0\n    else\n      count=$((count+1))\n    fi\n\
    \  done\n  if [[ ${#words} = 0 ]]; then\n    words=\"$count\"\n  fi\n  echo $words\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local IFS=$1; local -a arr=( );\n    IFS=, read -a arr <<< \"$1\";\n\
    \    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  echo $1\n  local i words count\n  for i in $(seq 1 $1)\n  do\n    words=$(echo\
    \ $1 | sed 's/,$//')\n    count=0\n    for j in $(echo $words | sed 's/ //g')\n\
    \    do\n      if [[ $j == *[a-zA-Z] ]]\n      then\n        count=$(( count +\
    \ 1 ))\n      else\n        words=$(echo $words | sed 's/$/ /')\n      fi\n  \
    \  done\n    if [[ \"$count\" -gt \"0\" ]]; then\n      words=$(echo $words |\
    \ sed 's/^/ ')\n    fi\n  done\n  echo $(echo $words | sed 's/ /\\n/g')\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "seq: invalid floating point argument: \u2018Hello\u2019\nTry 'seq --help'\
    \ for more information.\nseq: invalid floating point argument: \u2018Hello,world\\\
    \\!\u2019\nTry 'seq --help' for more information.\n"
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=\"$1\"\n    local -a array\n    local count\n    local splitchars=\n\
    \    for word in ${string//,/ }; do\n        local lowercase=0\n        for letter\
    \ in ${word}; do\n            if [[ ${lowercase} -lt 26 && $letter -eq $letter\
    \ ]]; then\n                lowercase=$((lowercase+1))\n            else\n   \
    \             lowercase=0\n            fi\n        done\n        splitchars=$splitchars\
    \ $((lowercase+1))\n    done\n    local maxsplit=$splitchars\n    local -a result\n\
    \    if [[ $splitchars -eq 1 ]]; then\n        result=(\"${string}\")\n    else\n\
    \        splitchars=$((splitchars-1))\n        maxsplit=$((maxsplit-1))\n    \
    \    result=()\n        for (( i=0;i<${maxsplit};i++));\n        do\n        \
    \    local splitchar\n            splitchar=$((splitchars+i))\n            result=(\"\
    ${result[@]}\" \"$string\"\n            \"${string//$splitchar/$splitchar}\")\n\
    \        done\n    fi\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaht_31_i.sh: line 28: 2: command not found

    /tmp/tmpaht_31_i.sh: line 22: [[: world\!: syntax error: invalid arithmetic operator
    (error token is "\!")

    /tmp/tmpaht_31_i.sh: line 28: 1: command not found

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tlocal words delimiter=$2\n\tlocal count=0\n\tlocal i=0 j=0\n\n\t[[ $(echo\
    \ $1 | egrep -o \"${delimiter}\") ]] || return 1\n\n\twords=$(echo $1 | egrep\
    \ -o \"${delimiter}\")\n\twhile read -r word; do\n\t\t((count++))\n\t\tif [[ \"\
    ${word}\" == *\"${delimiter}\"* ]]; then\n\t\t\t((i++))\n\t\t\t((j=0))\n\t\telif\
    \ [[ \"$word\" == *\"${delimiter}\"* ]]; then\n\t\t\t((j++))\n\t\telse\n\t\t\t\
    words=$(echo \"$words $word\")\n\t\tfi\n\tdone < <(echo \"$words\")\n\n\techo\
    \ \"$count\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: -1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local line=\"$1\"\n    local words=()\n\n    local i=0\n    while true;\
    \ do\n        if [[ \"$line\" =~ (^|[[:space:]])([^[:space:]]+)($|[[:space:]])\
    \ ]]; then\n            words[${#words[@]}]=\"\\\"${BASH_REMATCH[2]}\\\"\"\n \
    \           i=$((${i}+1))\n        else\n            words[${#words[@]}]=\"\\\"\
    $line\\\"\"\n            break\n        fi\n    done\n\n    echo ${#words[@]}\n\
    \    return ${words[@]}\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=9 encoding='utf-8'>
  timestamp: 1660057067
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local input=\"${1}\"\n    local word\n    local wordcount\n    local\
    \ quotes\n    local quotes_index\n    local quotes_word\n    local quotes_word_count\n\
    \    local separators\n    local separators_index\n    local separators_word\n\
    \    local separators_word_count\n    local lowercase\n    local lowercase_count\n\
    \    local count\n\n    if [ \"${#input}\" -eq 0 ]; then\n        echo \"\"\n\
    \        return\n    fi\n\n    quotes=\"${input%\"}\"\n    quotes_index=\"${#quotes}\"\
    \n\n    if [ \"${quotes_index}\" -eq 0 ]; then\n        echo \"1\"\n        return\n\
    \    fi\n\n    separators=\"${input#*\\}\"\n    separators_index=\"${#separators}\"\
    \n\n    if [ \"${separators_index}\" -eq 0 ]; then\n        echo \"1\"\n     \
    \   return\n    fi\n\n    lowercase=\"${input#?}\"\n    lowercase_count=\"${#lowercase}\"\
    \n\n    if [ \"${lowercase_count}\" -eq 0 ]; then\n        echo \"${lowercase}\"\
    \n        return\n    fi\n\n    wordcount=\"$(expr ${lowercase_count} - 1)\"\n\
    \    if [ ${lowercase:0:1} -eq ' ' ]; then\n        wordcount=\"$(expr ${wordcount}\
    \ - 1)\"\n    fi\n    if [ ${lowercase:0:1} -eq '(' -a ${lowercase:1:1} -eq ')'\
    \ ]; then\n        wordcount=\"$(expr ${wordcount} - 1)\"\n    fi\n    if [ ${lowercase:0:1}\
    \ -eq '[' -a ${lowercase:1:1} -eq ']' ]; then\n        wordcount=\"$(expr ${wordcount}\
    \ - 1)\"\n    fi\n    if [ ${lowercase:0:1} -eq '{' -a ${lowercase:1:1} -eq '}'\
    \ ]; then\n        wordcount=\"$(expr ${wordcount} - 1)\"\n    fi\n    if [ ${lowercase:0:1}\
    \ -eq '<' -a ${lowercase:1:1} -eq '>' ]; then\n        wordcount=\"$(expr ${wordcount}\
    \ - 1)\"\n    fi\n    if [ ${lowercase:0:1} -eq '/' -a ${lowercase:1:1} -eq '>'\
    \ ]; then\n        wordcount=\"$(expr ${wordcount} - 1)\"\n    fi\n    if [ ${lowercase:0:1}\
    \ -eq '|' -a ${lowercase:1:1} -eq '|' ]; then\n        wordcount=\"$(expr ${wordcount}\
    \ - 1)\"\n    fi\n\n    if [ \"${wordcount}\" -ge \"\n}\n\ncandidate() {\n   \
    \ split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\"\
    \ ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3f8ljdvh.sh: line 98: unexpected EOF while looking for matching
    `"''

    /tmp/tmp3f8ljdvh.sh: line 102: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  # Get string from command line\n  local input_str=$1\n\n  # Create an empty\
    \ list to store the words\n  local words=()\n\n  # Split words by whitespace\n\
    \  local IFS=$' \\t\\n'\n  local list_words=( $input_str \"${input_str// /\\\\\
    \ }\" )\n\n  # Add words to the list\n  list_words=( ${list_words[*]} ) # Remove\
    \ whitespaces and add to list\n  words=( \"${list_words[@]}\" )\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local STRING=\"$1\"\n    if [ -z \"$STRING\" ]; then return 1; fi\n \
    \   local IFS=' '\n    local -a words\n    IFS=,\n    read -ra words <<< \"$STRING\"\
    \n    local num_words=${#words[@]}\n    if [ $num_words -eq 0 ]; then\n      \
    \  echo $num_words\n    elif [ $num_words -eq 1 ]; then\n        echo $words[0]\n\
    \    elif [ $num_words -gt 1 ] && [ $num_words -le 25 ]; then\n        local letters=\"\
    abcdefghijklmnopqrstuvwxyz\"\n        if [ ${#words[@]} -lt 26 ]; then\n     \
    \       letters=$letters\n        else\n            local letters_length=$(echo\
    \ $letters | wc -w)\n            local letter_count=0\n            local word\n\
    \            for word in \"${words[@]}\"; do\n                local word_length=$(echo\
    \ $word | wc -w)\n                if [ $word_length -lt 26 ]; then\n         \
    \           letters=$letters\n                    break\n                fi\n\
    \                letter_count=$(( $letter_count + $word_length ))\n          \
    \  done\n            letters=$letters[$letter_count..$letters_length]\n      \
    \  fi\n        echo $letters\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local words=$1\n  local w\n  local x\n  local tmp\n  local len\n  local\
    \ sep\n  local tmplen\n  local tmpsep\n  local spaces\n\n  # Remove whitespace\
    \ from $words to allow for splitting\n  words=${words//[[:space:]]/}\n  words=${words//,/}\n\
    \n  # If there is no space, split on commas\n  if [ -z \"${words}\" ]; then\n\
    \    # Split on commas if no space\n    words=${words//,/}\n  fi\n\n  # Add quotes\
    \ to $words\n  words='\"$(echo \"${words}\" | sed \"s/'/'\\\\\\\\''/g\")\"'\n\n\
    \  # Count number of commas\n  words=\"${words//,/}\"\n\n  # Determine number\
    \ of spaces between commas\n  spaces=\"${words%%,*}\"\n  words=\"${words#*,}\"\
    \n\n  # Count number of spaces\n  words=\"${words%%,*}\"\n\n  # Determine number\
    \ of spaces between commas\n  spaces=\"${words%%,*}\"\n  words=\"${words#*,}\"\
    \n\n  echo \"$spaces\"\n  echo \"$words\"\n  echo \"$words\"\n  echo \"$words\"\
    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=\"$1\"\n    local tmp\n    tmp=\"$(echo $str | sed 's/^[ \\\
    t]*//' | sed 's/[ \\t]*$//' | sed 's/^[ \\t]*//' | sed 's/[ \\t]*$//' | sed 's/\\\
    (.\\)/\\1,/g' | sort -u | sed 's/,/\\n/g')\"\n    if [ -z \"$tmp\" ]; then\n \
    \       tmp=\"$(echo $str | sed 's/\\(.\\)/\\1,/g' | sort -u | wc -l)\"\n    fi\n\
    \    echo \"$tmp\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local output\n    output=$(echo $1 | sed 's/ /\",\"/g; s/,$//; s/,/ /g;\
    \ s/^,//; s/.$//; s/,$//; s/,/ /g')\n    echo ${output}\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local -i lowercase_letters=0\n    local -a words=()\n    local -i num_words=0\n\
    \    local -a word=\"\"\n    local -i i\n    local -r word\n    local -ra split=\"\
    \"\n\n    # split on whitespace\n    words=($(echo $1 | sed \"s/[[:space:]]+/\\\
    n/g\"))\n\n    # split on commas\n    IFS=, read -r -a words <<< \"$(echo $1 |\
    \ sed \"s/,/ /g\")\"\n\n    # loop over words and count uppercase letters with\
    \ odd order\n    for word in \"${words[@]}\"; do\n        lowercase_letters=$(echo\
    \ $word | tr '[:lower:]' '[:upper:]' | wc -l)\n        if (( ${lowercase_letters}\
    \ % 2 )); then\n            num_words=$(( num_words + 1 ))\n            word+=\"\
    \ $word\"\n        fi\n    done\n\n    # return number of words with odd number\
    \ of uppercase letters\n    echo \"$num_words\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoex4cj0q.sh: line 30: word: readonly variable

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    echo $1 | awk '{ for(i=1; i<=NF; i++) printf(\"\\\"%s\\\"\\n\", $i);\
    \ }'\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    IFS=' ' read -ra ary <<< \"$1\"\n    len=${#ary[@]}\n    if [ $len -lt\
    \ 2 ]\n    then\n        echo \"\"\n    else\n        echo \"${ary[*]:1}\"\n \
    \   fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    IFS=$',' read -a arr <<< \"$1\"\n    # Remove extra spaces to make output\
    \ more readable\n    arr=(${arr[@]// /})\n    local count=${#arr[@]}\n    local\
    \ len=${#arr[@]}\n    local a=0\n    while (( \"$a\" < \"$count\" )) ; do\n  \
    \      if [ ${arr[$a]} != \" \" -a ${arr[$a]} = \"\\\\\" ]; then\n           \
    \ arr[$a]=\"\\\"${arr[$a]}\\\"\"\n            a=$(( $a + 1 ))\n        else\n\
    \            a=$(( $a + 1 ))\n        fi\n    done\n    # Remove excess quotes\n\
    \    arr=(${arr[@]:0:$(( $len - 1 ))})\n    echo ${arr[@]}\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    words=$*\n    words=${words// /, }\n    words=${words% /}\n    words=$(echo\
    \ $words | tr \" \" \"\\n\" | sort -k 1n)\n    words=$(echo $words | tr \" \"\
    \ \"\\n\" | sort -k 2n)\n    words=$(echo $words | tr -d \"\\n\" | sort -k 1n)\n\
    \    words=$(echo $words | tr -d \"\\n\" | sort -k 2n)\n    echo \"$words\"\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local text=\"${1}\"\n    # Split the text on whitespace characters, commas\
    \ and lower-case letters\n    IFS=' ,;.' read -a words <<< \"$text\"\n\n    #\
    \ Count the number of \"words\"\n    local count=\"$(echo \"${#words[@]}\" | sed\
    \ -n 's/^\\([^,]*\\)[^ ]*\\([0-9]*\\)[^,]*,\\([0-9]*\\)[^,]*\\([0-9]*\\)[^,]*,\\\
    ([0-9]*\\)[^,]*,\\([0-9]*\\)[^,]*,\\([0-9]*\\)[^,]*,\\([0-9]*\\)[^,]*,\\([0-9]*\\\
    )[^,]*,\\([0-9]*\\)[^,]*,\\([0-9]*\\)[^,]*,\\([0-9]*\\)[^,]*,\\([0-9]*\\)[^,]*,\\\
    ([0-9]*\\)[^,]*,\\([0-9]*\\)[^,]*,\\([0-9]*\\)[^,]*\\)\\([0-9]*\\)$/\\1\\2\\3/p'\
    \ | sort -nr -k2 -t)\"\n\n    # Return array of words and count\n    echo \"${words[*]}\"\
    \n    echo \"$count\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: option requires an argument -- ''t''

    Try ''sort --help'' for more information.

    sed: -e expression #1, char 277: Unmatched ) or \)

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local i tmp result\n\n    if [ \"$#\" -ne 1 ] ; then\n        return\
    \ 0\n    fi\n\n    # Remove \" or '\n    i=$(expr \"$1\" : '.*[^\\\\'\"].*$')\n\
    \    result=\"\"\n    tmp_arr=()\n    while [ -n \"$i\" ]\n    do\n        tmp=\"\
    ${i:i:$#}\"\n        tmp_arr+=(\"$tmp\")\n        i=$(expr \"$i\" : \".*[^\\\\\
    '\"].{0,1}$\")\n    done\n    if [ \"$i\" != \"\" ] ; then\n        tmp_arr+=(\"\
    $i\")\n    fi\n\n    # Add '\"'\n    tmp_arr+=('\"')\n\n    # Add '\\'\n    tmp_arr+=('\\\
    '')\n\n    # Count lowercase\n    for i in \"${tmp_arr[@]}\"\n    do\n       \
    \ result=$(($result + $(echo $i | tr '[:upper:]' '[:lower:]')))\n    done\n\n\
    \    # Remove spaces\n    echo \"$result\" | sed 's/^ *//;s/ *$//'\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdk3l19lx.sh: line 64: unexpected EOF while looking for matching
    `"''

    /tmp/tmpdk3l19lx.sh: line 68: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local -i j=$(( $# % 2 ))\n  local -i k=$(( $# / 2 ))\n  local -i j1=$((\
    \ $j + 1 ))\n  local -i k0=$(( $k - 1 ))\n  local -i a\n\n  a=0\n  printf -v out\
    \ \"%s,\" \"$1\"\n  while [ $j -le $k -a $j1 -le $k0 ]; do\n    a=$((a+1))\n \
    \   printf -v out \"%s%s\" \"${out%,}\" \"${1:j:1}\"\n    printf -v out \"%s\"\
    \ \"$1\"\n    shift\n    shift\n    (( j1-- ))\n    (( j-- ))\n  done\n  printf\
    \ -v out \"%s\" \"$1\"\n  printf -v out \"%s\" \"$a\"\n  echo \"${out%%,*}\"\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local IFS=\n    local i\n    local words=()\n    local -a word\n    local\
    \ len=${#1}\n    for i in $(seq 0 $((${#1}-1)))\n    do\n        word=( ${1//,/$'\\\
    n'} )\n        for ((j=0;j<${#word[@]};j++))\n        do\n            words+=(${word[$j]})\n\
    \        done\n    done\n    local len=${#words[*]}\n    words=( ${words[*]} )\n\
    \    for i in $(seq 0 $((${#1}-1)))\n    do\n        word=( ${1//,/$'\\n'} )\n\
    \        for ((j=0;j<${#word[@]};j++))\n        do\n            words+=(${word[$j]})\n\
    \        done\n    done\n    local len=${#words[*]}\n    words=( ${words[*]} )\n\
    \    local len=${#words[*]}\n    words=( ${words[*]} )\n    local len=${#words[*]}\n\
    \    words=( ${words[*]} )\n    local len=${#words[*]}\n    words=( ${words[*]}\
    \ )\n    local len=${#words[*]}\n    words=( ${words[*]} )\n    local len=${#words[*]}\n\
    \    words=( ${words[*]} )\n    local len=${#words[*]}\n    words=( ${words[*]}\
    \ )\n    local len=${#words[*]}\n    words=( ${words[*]} )\n    local len=${#words[*]}\n\
    \    words=( ${words[*]} )\n    local len=${#words[*]}\n    words=( ${words[*]}\
    \ )\n    local len=${#words[*]}\n    words=( ${words[*]} )\n    local len=${#words[*]}\n\
    \    words=( ${words[*]} )\n    local len=${#words[*]}\n    words=( ${words[*]}\
    \ )\n    local len=${#words[*]}\n    words=( ${words[*]} )\n    local len=${#words[*]}\n\
    \    words=( ${words[*]} )\n    local len=${#words[*]}\n    words=( ${words[*]}\
    \ )\n    local len=${\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4bgwppqs.sh: line 90: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  words=$1\n  # Get rid of whitespace\n  words=${words// /}\n  # Split on\
    \ commas\n  words=${words//,/ }\n  # Count number of occurences of lower case\
    \ letters, odd order in the alphabet\n  echo $(( ${words//[^a-z]/} % 2 ))\n}\n\
    \ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\techo \"$1\" | sed -e 's/[[:space:]]+/ /g' | sed -e 's/[[:space:]]+,/ /g'\
    \ | sed -e 's/,[[:space:]]*/ /g' | sed -e 's/ //g' | tr -d ' '\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local input=$1\n    local output=''\n    local whitespaces=' '\n\n  \
    \  for letter in $input; do\n        if [[ \"$letter\" == *\"$whitespaces\"* ]];\
    \ then\n            output+=$letter\n        elif [[ \"$letter\" == *\",\" ]];\
    \ then\n            output+=$letter\n        elif [[ \"$letter\" == *\"$whitespaces\"\
    * ]]; then\n            output+=$letter\n        elif [[ \"$letter\" == *\",\"\
    * ]]; then\n            output+=$letter\n        elif [[ \"$letter\" == *\"$whitespaces\"\
    * ]]; then\n            output+=$letter\n        elif [[ \"$letter\" == *\",\"\
    * ]]; then\n            output+=$letter\n        else\n            output+=$letter\n\
    \        fi\n    done\n\n    if [[ \"$output\" == \"\" ]]; then\n        output=1\n\
    \    fi\n    echo \"$output\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    echo $1 | tr ' ' ',' | sort | uniq -c | tr '\\n' ' ' | tr ' ' ',' | sed\
    \ 's/,$//'\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local w\n  local count\n  local result\n  local quote\n  local sep\n  local\
    \ quote_len\n\n  # Initialize variables and arrays\n  w=\"$1\"\n  count=0\n  result=()\n\
    \  quote=''\n  sep=''\n  quote_len=0\n\n  # Loop through each character\n  for\
    \ (( c = 0; c < ${#w}; c++ )); do\n    # Increment count of quotes, spaces, lower\
    \ case letters, and commas found\n    count=$(expr $count + 1)\n    quote_len=$(expr\
    \ $quote_len + 1)\n    quote_len=$(expr $quote_len + $(expr ${w:$c} + 1))\n\n\
    \    # Handle quotes\n    if [[ $w == *\"$quote\"* ]]; then\n      # If we have\
    \ a quote, increment counter\n      count=$(( count + 1 ))\n      # Remove quote\n\
    \      w=${w:$(( $# + 1))}\n      # If quote_len is 0, exit the function\n   \
    \   if  [[ $quote_len == 0 ]]; then\n        echo 'Error: Invalid quotes in text'\n\
    \        exit 1\n      fi\n      # Remove the quote, add the quote\n      w=${w%\"\
    $quote\"}$quote\n      # Remove the quote_len characters from w\n      w=${w#\"\
    $quote\"}\n      # Add quote_len to count - this is how many quotes we found\n\
    \      count=$(( $count - $quote_len ))\n    else\n      # If not a quote, add\
    \ the character to w\n      w=${w%\"$sep\"}$sep$w\n    fi\n  done\n\n  # Remove\
    \ any leftovers after the last sep\n  w=${w%\"$sep\"}\n\n  echo \"${result[*]}\"\
    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u2018world\\\\!\u2019\nexpr: syntax\
    \ error: missing argument after \u2018+\u2019\n/tmp/tmpqqoo1nlo.sh: line 53: 2\
    \ -  : syntax error: operand expected (error token is \"-  \")\n"
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local text\n  local i\n  local word\n  local char_count\n  local words\n\
    \  local words_count\n  local words_in_text\n\n  text=$1\n  words_in_text=$(echo\
    \ $text | sed 's/^[ ]*//;s/[ ]*$//g;s/[[:space:]]\\+/ /g;s/^[[:lower:]]\\+/ /g;s/[[:upper:]]\\\
    +/ /g' | wc -w)\n\n  if [[ $words_in_text -eq 0 ]]; then\n    words=$(echo $text\
    \ | sed 's/[[:space:]]\\+/ /g' | wc -l)\n  else\n    words=$(echo $words_in_text\
    \ | bc)\n  fi\n\n  for (( i=0; i<=$(( $words-1); i++ )); do\n    word=$(echo $text\
    \ | sed 's/[[:space:]]\\+/ /g' | sed \"s/^$((i+1))//g;s/[[:space:]]\\+/ /g\" |\
    \ awk '{print $1}')\n    if [[ $word =~ $char ]]; then\n      char_count=$((char_count\
    \ + 1))\n    elif [[ $char_count -eq 0 ]]; then\n      char_count=1\n    fi\n\
    \  done\n\n  if [[ $char_count -eq 1 ]]; then\n    words=\"$words\"\n  else\n\
    \    words=$(echo $char $char_count $words)\n  fi\n\n  words=$(echo $words | sed\
    \ \"s/$char\\($((${#words}-1))\\)$char/\\1/g\")\n\n  if [[ $words ]]; then\n \
    \   echo \"$words\"\n  else\n    echo \"0\"\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkvk2l5ng.sh: line 32: syntax error near `;''

    /tmp/tmpkvk2l5ng.sh: line 32: `  for (( i=0; i<=$(( $words-1); i++ )); do''

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local STRING=$1\n    local WORD=\"$(echo \"$STRING\" | sed 's/,/ /g')\"\
    \n    local WORDCOUNT=\"${#WORD}\"\n    local WORDCOUNT2=\"${#WORD}\"\n    if\
    \ [ \"$WORDCOUNT\" == \"0\" ]\n        then\n            echo 1\n        elif\
    \ [ \"$WORDCOUNT\" -gt \"0\" ]\n        then\n            echo \"$WORD\"\n   \
    \     elif [ \"$WORDCOUNT\" -eq \"0\" ]\n        then\n            echo \"$WORDCOUNT\"\
    \n        elif [ \"$WORDCOUNT2\" -gt \"0\" ]\n        then\n            echo \"\
    $WORD\"\n        elif [ \"$WORDCOUNT2\" -eq \"0\" ]\n        then\n          \
    \  echo \"$WORDCOUNT\"\n        elif [ \"$WORDCOUNT2\" -gt \"0\" ]\n        then\n\
    \            echo \"$WORDCOUNT\"\n        else\n            echo \"$WORDCOUNT\"\
    \n        fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=$1\n    local word_splitter=$(IFS=$'\\n' echo \"$string\"\
    \ | tr ' ' '\\n' | grep -Eo '[^a-z]' | sort -u)\n    echo \"${word_splitter}\"\
    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    echo \"$1\" | sed 's/\\(^|[^[:alnum:]])\\([^[:alnum:]]*\\)\\([[:alnum:]][^[:alnum:]]*\\\
    )\\([[:alnum:]]\\)/\\1\\3\\4\\5\\2/' | \\\n        sed 's/\\(^|[^[:alnum:]])\\\
    ([^[:alnum:]]*\\)\\([[:alnum:]]\\)/\\1\\3\\2/' | \\\n        tr '[:upper:]' '[:lower:]'\
    \ | sort | uniq -c\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 91: Unmatched ( or \(

    sed: -e expression #1, char 59: Unmatched ( or \(

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: -1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=$1\n    local new_string=$2\n    local word\n    local num_comma=0\n\
    \    local num_commas=0\n    local num_spaces=0\n    local num_words=0\n    while\
    \ [[ $string ]]; do\n        word=\"${string#?}\"\n        string =\"${string%%${word}*}\"\
    \n        if [[ ${string} ]]; then\n            num_words=$((num_words+1))\n \
    \       fi\n        if [[ ${new_string} ]]; then\n            new_string=${new_string}$word$new_string\n\
    \        else\n            new_string=$word\n        fi\n    done\n    echo ${new_string}\n\
    \    return $((num_words))\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=45 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=22 encoding='utf-8'>
  timestamp: 1660057067
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local IFS=$'\\n'\n    local i=1\n    local l\n    local word\n    local\
    \ spaces\n    local comma\n    local lower\n    word=`echo $1 | awk -F '[[:space:]]+'\
    \ '{for(i=1;i<=NF;i++) print $i}'`\n    lower=`echo $word | awk '{print tolower($0)}'`\n\
    \    spaces=`echo $lower | grep -E '[[:space:]]'`\n    comma=`echo $lower | grep\
    \ -E '[,]'`\n    echo $spaces\n    echo $comma\n    echo $lower\n    echo $word\n\
    \    if [ $spaces -eq 0 ] && [ $comma -eq 0 ] && [ $lower -eq 0 ]; then\n    \
    \    echo $word\n        return 0\n    else\n        echo $word\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3nt3s1e2.sh: line 30: [: hello world\!: integer expression expected

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local text\n    text=$1\n    if [[ \"$text\" == *\"[[:space:]]\"* ]];\
    \ then\n        echo \"$text\"\n    elif [[ \"$text\" == *\"[[:alnum:]]\"* ]];\
    \ then\n        echo \"$text\"\n    elif [[ \"$text\" == *\"[[:lower:]]\"* ]];\
    \ then\n        echo \"$text\"\n    else\n        echo \"$text,${#text}\"\n  \
    \  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local WORD_STR=$1\n  echo \"$WORD_STR\" | awk '{ for(i=1;i<=NF;i++) print\
    \ $i }'\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local chars=\"\"\n    local words=\"\"\n    local numLetters=0\n\n  \
    \  while read -r char; do\n        numLetters=$((numLetters+1))\n        if [[\
    \ \"$char\" != \" \" && \"$char\" != \",\" ]]; then\n            words=\"$words\
    \ \\\"$char\\\"\"\n        fi\n    done <<< \"$1\"\n\n    if [[ \"$numLetters\"\
    \ -eq 26 ]]; then\n        # Split on commas ',' because there are 26 lower-case\
    \ letters\n        words=\"$words ,\"\n    elif [[ \"$numLetters\" -eq 36 ]];\
    \ then\n        # Split on whitespace ' ' because there are 36 lower-case letters\n\
    \        words=\"$words ,\"\n    elif [[ \"$numLetters\" -eq 50 ]]; then\n   \
    \     # Split on whitespace ' ' because there are 50 lower-case letters\n    \
    \    words=\"$words ,\"\n    fi\n\n    echo \"$words\"\n}\n\ncandidate() {\n \
    \   split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tlocal string=\"${1}\"\n\t# Remove all whitespace from string\n\tstring=${string//[[:space:]]/}\n\
    \t# Remove all commas from string\n\tstring=${string//,/}\n\t# If there are commas\
    \ remove all commas from string and return\n\tif [ -z \"$string\" ] ; then\n\t\
    \treturn 0\n\tfi\n\techo \"$string\"\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local chars=${1:-,}\n    local count=1\n    local str=\"\"\n    while\
    \ [ \"${chars}\" != \"\" ]; do\n        if [ \"$chars\" = \",\" ]; then\n    \
    \        if [ \"$str\" = \"\" ]; then\n                str=$count\n          \
    \  else\n                str=$((${str}+1))\n            fi\n        fi\n     \
    \   chars=${chars:1}\n        ((count++))\n    done\n    echo $str\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local words=$1\n  # Replace all characters with null\n  words=$(echo \"\
    $words\" | sed 's/[^a-zA-Z0-9]//g')\n  # If words contains only whitespaces, return\
    \ an empty string\n  # If words contains only commas, return words\n  # If words\
    \ contains only lower-case letters, return $(echo \"${words}\" | wc -w)\n  if\
    \ [[ $(echo \"$words\" | wc -w) -eq 0 ]]; then\n    return \"\"\n  elif [[ $(echo\
    \ \"$words\" | wc -w) -eq 1 ]]; then\n    return \"$words\"\n  elif [[ $(echo\
    \ \"$words\" | wc -w) -eq 2 ]]; then\n    return $(echo \"$words\" | sed 's/,/\
    \ /g')\n  else\n    return $(echo \"$words\" | sed 's/[bcdfghjklmnpqrstvwxyz]/\
    \ /g' | wc -l)\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpog_9yzo6.sh: line 24: return: Helloworld: numeric argument required

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local string=\"$1\"\n  local delimiters=${2:-,}\n  local lower=${3:-true}\n\
    \  local num=0\n  local output\n\n  # Remove quotes, if present\n  string=${string#\\\
    \"}\n  string=${string%\\\"}\n\n  # Remove delimiters\n  for delimiter in ${delimiters};\
    \ do\n    string=${string//${delimiter}}\n  done\n\n  # Sanitize string\n  string=$(echo\
    \ \"${string}\" | sed 's/[^a-zA-Z0-9,]//g')\n\n  # Split on whitespace\n  output=$(echo\
    \ \"${string}\" | sed 's/ /\\n/g')\n\n  # Add quotes to escaped word\n  output=$(echo\
    \ \"${output}\" | sed \"s/\\\\/\\\"/g\")\n\n  # Add quotes to escaped commas\n\
    \  output=$(echo \"${output}\" | sed \"s/,/\\\"\\\"\\\"/g\")\n\n  # Lowercase\
    \ the words\n  if [ \"${lower}\" = \"true\" ]; then\n    output=$(echo \"${output}\"\
    \ | sed 's/[a-z]\\([a-z]*\\)/\\L\\1/g')\n  fi\n\n  # If the last word is an odd\
    \ number the word count is one less so add an extra \"\n  if [[ \"${output}\"\
    \ == *[!a-z]* ]] && [ \"${output}\" != *\"\\\"\" ]; then\n    num=${#output}\n\
    \    output=$(echo \"${output}\" | sed \"s/\\\"\\\"\\$/\\\"${num}\\\"/\" )\n \
    \ fi\n  # Strip quotes from the result\n  output=$(echo \"${output}\" | sed 's/\\\
    \"\\\"\\\"/\\\"/g')\n  output=$(echo \"${output}\" | sed 's/\\\"$/\\\"/g')\n \
    \ output=$(echo \"${output}\" | sed 's/\\\"\\\"/\\\"/g')\n  output=$(echo \"${output}\"\
    \ | sed 's/,/\\\"/g')\n  output=$(echo \"${output}\" | sed 's/$/,/g')\n\n  # If\
    \ no whitespace was removed by the preceding commands, return the raw output\n\
    \  if [ \"x${output}\" = \"x\" ]; then\n    echo \"${output}\"\n  else\n    echo\
    \ \"${output}\"\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 7: unterminated `s'' command

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local IFS=$',' # set Internal Field Separator to a comma\n  local -n arr=$1\n\
    \  local len=0\n  local word=''\n  for w in \"${arr[@]}\"; do\n    if [[ -z \"\
    $word\" ]]; then\n      len=$(( $len + ${#w} ))\n      word=$w\n    else\n   \
    \   word=\"$word$IFS$w\"\n    fi\n  done\n  echo \"$len\"\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzlwkxjel.sh: line 16: local: `Hello world\!'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: -1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local -n arr=$1\n  local n\n  local c\n  local -a words=()\n  local count\n\
    \  read -r line\n  while read -r line; do\n    local word\n    while read -r word;\
    \ do\n      if [[ $word == \"\" ]]; then\n        break\n      fi\n      case\
    \ \"$word\" in\n        *' ') words=( \"${words[@]/#/\\\"$word\\\"}\" );;\n  \
    \      *,) words=( \"${words[@]/#/$word}\" );;\n        *) count=$(echo \"$word\"\
    \ | wc -c);;\n      esac\n    done <<< \"$line\"\n  done <<< \"$line\"\n  n=${#words[@]}\n\
    \  echo -n \"${words[@]}\" # print array elements\n  case $count in\n    0) echo\
    \ 1;;\n    1) echo 0;;\n    2) echo 1;;\n    3) echo 1;;\n    4) echo 1;;\n  \
    \  5) echo 0;;\n    6) echo 0;;\n  esac\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=43 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=26 encoding='utf-8'>
  timestamp: 1660057067
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local var=$1\n    local split_char=${2:-,}\n    local string=${var//[^A-Za-z0-9\
    \ $split_char]}\n    local word_list=($string)\n    local num_letters=0\n    for\
    \ i in $string\n    do\n        (( num_letters+=$i ))\n    done\n    echo $num_letters\n\
    \    echo ${word_list[@]} \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\techo \"$(echo \"${1}\" | sed -e 's/,/ /g' -e 's/ /\",\"/g')\" | wc -w\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  # Get a string of words that may contain whitespaces.\n  local str=$1\n\
    \  # Get a list of each word\n  local words=$(echo $str | tr \" \" \"\\n\" | sed\
    \ 's/^,//g')\n  # Get the number of words\n  local number_of_words=$(echo $str\
    \ | tr \" \" \"\\n\" | sed 's/^ *//g' | wc -l)\n  # If the number of words are\
    \ even, return all the words, otherwise return their count\n  if [[ $number_of_words\
    \ == 0 ]]; then\n    return $words\n  else\n    return $number_of_words\n  fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    echo \"$1\" | tr ' ' '\\t' | sed 's/\\t$//g'\n}\n\ncandidate() {\n  \
    \  split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\"\
    \ ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words=$1\n    IFS='' read -r -a words <<< \"$words\"\n    local\
    \ IFS_split=$IFS\n    IFS=$(echo -en \"\\n\\b\")\n    local count=0\n    local\
    \ last_word=''\n    local tmp=''\n    for word in \"${words[@]}\"; do\n      \
    \  if [[ \"$word\" == *\" \" ]]; then\n            IFS=\"$IFS_split\"\n      \
    \      tmp=$word\n            last_word=$word\n            count=0\n         \
    \   continue\n        fi\n        ((count++))\n    done\n    IFS=\"$IFS_split\"\
    \n    echo \"${count}\"\n    echo \"${last_word}\"\n    echo \"${tmp}\"\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    words=$(echo $1 | tr \",\" \"\\\\n\" | tr ' ' '_' | tr \":\" '\\')\n\
    \    lower=$(echo $1 | tr \" \" \"_\" | tr \":\" '\\')\n    echo $lower\n    count=0\n\
    \    for i in $lower; do\n        count=$(expr $count + 1)\n    done\n    echo\
    \ $count\n    echo $words\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'tr: warning: an unescaped backslash at end of string is not portable

    tr: warning: an unescaped backslash at end of string is not portable

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=\"$1\"\n    local word_count=0\n    local delimiter=\",\"\n\
    \n    # count the number of commas\n    local num_commas=${str//,/}\n    # remove\
    \ commas from str\n    str=${str//,/}\n\n    # count the number of uppercase letters\
    \ with odd order in the alphabet\n    local num_upper_odd_letters=0\n    # lower\
    \ case letters\n    local num_lower_odd_letters=0\n\n    local split_word=\"\"\
    \n    # iterate over each character in str\n    for (( i = 0; i < ${#str}; i++\
    \ ))\n    do\n        # if the character is an uppercase letter\n        if [[\
    \ ${str:$i:1} == [A-Z] ]]\n        then\n            # increment the number of\
    \ uppercase letters\n            ((num_upper_odd_letters++))\n        # if the\
    \ character is an lowercase letter\n        elif [[ ${str:$i:1} == [a-z] ]]\n\
    \        then\n            # increment the number of lowercase letters\n     \
    \       ((num_lower_odd_letters++))\n        fi\n    done\n\n    # if the number\
    \ of commas is odd and at least 2 uppercase letters,\n    # return all words,\
    \ otherwise return the number of lowercase letters with odd order\n    if [[ ${num_commas}\
    \ == ${num_upper_odd_letters}  &&  ${num_upper_odd_letters} > 0 ]]\n    then\n\
    \        # split on comma\n        split_word=${str//,/}\n    elif [[ ${num_lower_odd_letters}\
    \ == ${num_upper_odd_letters}  &&  ${num_upper_odd_letters} > 0 ]]\n    then\n\
    \        # split on whitespace\n        split_word=${str//\\s+/}\n    else\n \
    \       split_word=\"${num_lower_odd_letters}\"\n    fi\n    echo \"${split_word}\"\
    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words=$1\n    local comma=\"\"\n    local odd=\"\"\n    local even=\"\
    \"\n    local count=0\n\n    for ((i = 0; i <  ${#words}; i++)); do\n        local\
    \ ch=\"${words[i]}\"\n        # check if we have an odd number\n        if [[\
    \ ${#ch} -eq 1 ]] ; then\n            odd=\"${odd}${words[i]}\"\n        fi\n\
    \        # check if we have an even number\n        if [[ ${#ch} -eq 2 ]] ; then\n\
    \            if [[ \"${ch[1]}\" -eq \"${ch[1]}\" ]] ; then\n                even=\"\
    ${even}${ch[0]}\"\n            else\n                even=\"${even}${ch}\"\n \
    \           fi\n        else\n            # check if we have 2 chars or more\n\
    \            if [[ ${#ch} -gt 1 ]] ; then\n                count=$((${count}+${#ch}))\n\
    \            fi\n        fi\n    done\n\n    if [[ ${count} -gt 0 ]] ; then\n\
    \        comma=\",\"\n    fi\n    echo \"${even}\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [ -z \"$1\" ]; then echo \"$2\"; return 1; fi\n    local num_chars=$(wc\
    \ -c <<< \"$1\" | cut -c1|bc)\n    local num_blanks=$(wc -c <<< \"$1\" | sed 's/^[\
    \ \\t]*//;/^[ \\t]*$/d'|bc)\n    local num_words=$(echo \"$1\" | sed \"s/\\s/,/g\"\
    \ | tr \",\" \"\\n\" | wc -l)\n    local word_splitting=$(echo \"$1\" | sed \"\
    s/,/\\n/g\" | tr \"\\n\" \",\" | tr \"\\t\" \" \" | tr \"\\\\\" '\"')\n\n    if\
    \ [ $num_blanks -gt 0 ]; then\n        echo \"$word_splitting\" 1>&2\n       \
    \ return\n    fi\n\n    local lowercase_chars=$(echo \"$word_splitting\" | tr\
    \ \"\\n\" \",\" | tr \"\\t\" \" \" | tr \"\\\\\" 'a' | tr ',' \"\\n\" | wc -l)\n\
    \n    echo \"$word_splitting\" 1>&2\n\n    if [ $lowercase_chars -lt $num_chars\
    \ ]; then\n        local odd=1\n        for ((i=0; i<$num_chars; i+=2)); do\n\
    \            echo \"$word_splitting\" 1>&2\n            local odd=$(($odd+1))\n\
    \        done\n    else\n        local odd=1\n        for ((i=0; i<$num_chars;\
    \ i+=2)); do\n            echo \"$word_splitting\" 1>&2\n            local odd=$(($odd+1))\n\
    \        done\n        echo \"$num_words\" 1>&2\n    fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'tr: warning: an unescaped backslash at end of string is not portable

    Hello world"!,

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=$1\n    # return number of characters in the string\n  \
    \  local chars=${#string}\n    local words\n    \n    if [[ ${#string} -lt 3 ]];\
    \ then\n        words=($string)\n    elif [[ ${#string} -eq 3 ]]; then\n     \
    \   if [[ ${string:0:1} == \"-\" ]]; then\n            words=($string)\n     \
    \   else\n            # remove quotes\n            words=()\n            for ((i=0;\
    \ i<${#string}; i+=2)); do\n                words+=(\"\\\"${string:$i:2}\\\"\"\
    )\n            done\n        fi\n    else\n        # remove quotes\n        words=()\n\
    \        for ((i=0; i<${#string}; i+=2)); do\n            words+=(\"\\\"${string:$i:2}\\\
    \"\")\n        done\n    fi\n    \n    echo \"${words[@]}\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local IFS=\"$1\"\n    local STR\n    local LENGTH\n    local WORD_LIST\n\
    \    local LAST_QUOTE\n    local LENGTH_TAIL\n    local LENGTH_WORD\n    local\
    \ WORD_TYPE\n    local WORD_LIST_QUOTED\n    local WORD_LIST_QUOTED_LEN\n\n  \
    \  if [ \"$#\" -lt 1 ]; then\n        return 0\n    fi\n    STR=$1\n    # Remove\
    \ backslashes from quotes\n    STR=${STR//\\'/}\n    # Remove double quotes\n\
    \    STR=${STR//\\\"}\n    # Add quotes to each word\n    WORD_LIST=( $STR )\n\
    \    WORD_LIST_QUOTED=()\n    for LENGTH in \"${!WORD_LIST[@]}\"; do\n       \
    \ WORD_LIST_QUOTED+=( \"'${WORD_LIST[$LENGTH]}\" )\n    done\n    # Remove quotes\
    \ from quotes\n    WORD_LIST_QUOTED=( \"${WORD_LIST_QUOTED[@]//\\'/}\" )\n   \
    \ # Remove quotes from each word\n    WORD_LIST_QUOTED_LEN=0\n    for LENGTH in\
    \ \"${!WORD_LIST_QUOTED[@]}\"; do\n        WORD_LIST_QUOTED_LEN=$(( WORD_LIST_QUOTED_LEN\
    \ + 1 ))\n    done\n    # Remove quotes\n    WORD_LIST_QUOTED=( \"${WORD_LIST_QUOTED[@]//\\\
    \"/}\" )\n    # Remove quotes\n    WORD_LIST_QUOTED_LEN=\"$(( WORD_LIST_QUOTED_LEN\
    \ - 1 ))\"\n    # Remove trailing commas and quotes\n    WORD_LIST=( \"${WORD_LIST[@]%,*}\"\
    \ )\n    WORD_LIST=( \"${WORD_LIST[@]%'\\\"*}\" )\n    # Strip whitespace from\
    \ words\n    WORD_LIST=( \"${WORD_LIST[@]//[[:space:]]}\" )\n    # Add quotes\
    \ to each word\n    WORD_LIST=( \"${WORD_LIST[@]//\\'/}\" )\n    # Strip whitespace\
    \ from words\n    WORD_LIST=( \"${WORD_LIST[@]//[[:space:]]}\" )\n    # Strip\
    \ whitespace from words\n    WORD_LIST=( \"${WORD_LIST[@]//\\\"/}\" )\n    # Strip\
    \ whitespace from words\n    WORD_LIST=( \"${WORD_LIST[@]//,/}\" )\n    # Strip\
    \ whitespace from words\n    WORD_LIST=( \"${WORD_LIST[@]//\\001/}\" )\n    #\
    \ Remove quotes from quotes\n    WORD_LIST=( \"${WORD_LIST[@]//\\'/}\" )\n   \
    \ LENGTH_TAIL=\"${#WORD_LIST[@]}\"\n\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tlocal text\n\tlocal count\n\tlocal lowercase_letters\n\ttext=$1\n\tcount=$(tr\
    \ -cd '[:lower:]' <<< $text)\n\tlowercase_letters=$(( $(echo $count | bc) %26\
    \ ))\n\techo \"$lowercase_letters\"\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    # $1 is a string\n    if [[ -z \"$1\" ]]; then\n        return 1\n  \
    \  fi\n\n    local count=$((${#1}))\n    local str=$1\n\n    if [[ \"${str}\"\
    \ =~ ^[ \\t]*$ ]]; then\n        echo \"$1\"\n        return 0\n    fi\n\n   \
    \ local output\n    output=$(echo \"$1\" | sed -e 's/^[ \\t]*//' -e 's/[ \\t]*$//')\n\
    \    if [[ ! -z $output ]]; then\n        echo \"$output\"\n        return 0\n\
    \    fi\n\n    local output\n    output=$(echo \"$1\" | sed -e 's/^[ \\t]*//'\
    \ -e 's/[ \\t]*$//' | tr '[:upper:]' '[:lower:]')\n    if [[ ! -z $output ]];\
    \ then\n        echo \"$output\"\n        return 0\n    fi\n\n    local output\n\
    \    output=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n    if [[ ! -z $output\
    \ ]]; then\n        echo \"$output\"\n        return 0\n    fi\n\n    local output\n\
    \    output=$(echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:space:]' '\\n')\n\
    \    if [[ ! -z $output ]]; then\n        echo \"$output\"\n        return 0\n\
    \    fi\n\n    local output\n    output=$(echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:space:]' '\\n' | wc -w)\n    if [[ ! -z $output ]]; then\n        echo\
    \ \"$output\"\n        return 0\n    fi\n\n    echo \"0\"\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvnyu1cyz.sh: line 23: syntax error in conditional expression

    /tmp/tmpvnyu1cyz.sh: line 23: syntax error near `\t]*$''

    /tmp/tmpvnyu1cyz.sh: line 23: `    if [[ "${str}" =~ ^[ \t]*$ ]]; then''

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    words=$1\n    words_array=(${words//,/ })\n    for ((i=0; i < ${#words_array[@]};\
    \ i++)); do\n        words_array[$i]=${words_array[$i]//[^[:alpha:]]/ }\n    done\n\
    \    echo $#words_array[@]\n    for ((i=0; i < ${#words_array[@]}; i++)); do\n\
    \        word_chars=${words_array[$i]//[^[:alpha:]]/ }\n        echo \"$word_chars\"\
    \n    done\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local result=\"\"\n  local numLowers=0\n  local currWord=\"\"\n  local\
    \ currUpper=0\n  local currLower=0\n  local i\n  local lastChar\n  local isSpace\n\
    \  local thisWord\n  local newWord\n  local newWords\n  for ((i=1; i < $#; i++));\n\
    \  do\n    thisWord=\"$1\"\n    isSpace=\"${thisWord:$i:1}\"\n    if [ \"${isSpace}\"\
    \ == \"-\" ];\n    then\n      numLowers=0\n      currLower=0\n      currUpper=0\n\
    \    fi\n    lastChar=\"${thisWord:$((i+1))}\"\n    if [ \"$lastChar\" == \" \"\
    \ ];\n    then\n      currLower=$((currLower+1))\n      currUpper=$((currUpper+1))\n\
    \    fi\n    if [ \"$lastChar\" == \",\" ];\n    then\n      currUpper=$((currUpper+1))\n\
    \    fi\n    if [ \"$lastChar\" == \" \" ];\n    then\n      currLower=$((currLower+1))\n\
    \      currUpper=$((currUpper+1))\n    fi\n    if [ \"$lastChar\" == \"\\\\\"\
    \ ];\n    then\n      currUpper=$((currUpper+1))\n    fi\n    if [ \"$lastChar\"\
    \ == \",\" ];\n    then\n      numLowers=$((numLowers+1))\n    fi\n    if [ \"\
    $lastChar\" == \"!\" ];\n    then\n      currLower=$((currLower+1))\n      currUpper=$((currUpper+1))\n\
    \      currLower=$((currLower+1))\n      currUpper=$((currUpper+1))\n    fi\n\
    \    if [ \"$lastChar\" == \"-\" ];\n    then\n      currUpper=$((currUpper+1))\n\
    \    fi\n    if [ \"$lastChar\" == \"'\" ];\n    then\n      currUpper=$((currUpper+1))\n\
    \    fi\n    if [ \"$lastChar\" == \"_\" ];\n    then\n      currUpper=$((currUpper+1))\n\
    \    fi\n    if [ \"$lastChar\" == \" \" ];\n    then\n      numLowers=$((numLowers+1))\n\
    \    fi\n    if [ \"$lastChar\" == \"'\" ];\n    then\n      currUpper=$((currUpper+1))\n\
    \    fi\n    if [ \"$lastChar\" == \"_\" ];\n    then\n      currUpper=$((currUpper+1))\n\
    \    fi\n    if [ \"$lastChar\" == \" \" ];\n    then\n      numLowers=$((numLowers+1))\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4vadwbeb.sh: line 94: syntax error near unexpected token `}''

    /tmp/tmp4vadwbeb.sh: line 94: `}''

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: -1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    echo -n '$1' | sed -e 's/[\\\"]//g' -e 's/[\\,\\,\\s]+/,/g'\n    IFS='\
    \ ' read -a array <<< $(split_words '$1')\n    echo -n '$((${#array[@]}-1))'\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=48 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=36 encoding='utf-8'>
  timestamp: 1660057067
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local i words word\n  words=\"${1}\"\n  word=\"$(echo $words | sed 's/[\\\
    [\\]]/\\\\&/g')\"\n  words+=\"\\\" \"\n  words+=\"$(echo $word | grep -o '[a-z]\\\
    |[^a-z]\\|[a-z][^a-z]\\|[a-z]\\|')\"\n  words+=\"\\\" \"\n  words+=\"$(echo $word\
    \ | grep -o '[a-z]\\|[^a-z]\\|[a-z][^a-z]\\|[a-z]\\|[a-z]\\|[a-z]\\|')\"\n  words+=\"\
    \\\" \"\n  words+=\"$(echo $word | grep -o '[a-z]\\|[^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\\
    |[a-z][^a-z]\\|[a-z][^a-z]\\|')\"\n  words+=\"\\\" \"\n  words+=\"$(echo $word\
    \ | grep -o '[a-z]\\|[^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\\
    |[a-z][^a-z]\\|')\"\n  words+=\"\\\" \"\n  words+=\"$(echo $word | grep -o '[a-z]\\\
    |[^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\\
    |[a-z][^a-z]\\|')\"\n  words+=\"\\\" \"\n  words+=\"$(echo $word | grep -o '[a-z]\\\
    |[^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\\
    |[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\\
    |[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\\
    |[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z]\\\
    |[a-z][^a-z]\\|[a-z][^a-z]\\|[a-z][^a-z\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6940o6l1.sh: line 29: unexpected EOF while looking for matching
    `''''

    /tmp/tmp6940o6l1.sh: line 49: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [ -z \"$1\" ]; then\n        echo \"No text given!\"\n        exit\
    \ 1\n    fi\n    # remove quotes from the string\n    local string_without_quotes=$1\n\
    \    # remove commas and split on whitespace\n    local words=$(echo $string_without_quotes\
    \ | sed -e 's/[,]/ /g')\n    # remove quotes from the words\n    local words=$(echo\
    \ $words | sed -e 's/\"//g')\n    echo $words\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local -n words=\"${1}\"\n    local split_words=\"${2:,}\"\n    local\
    \ length=\"${#words}\"\n    if [ -z \"$split_words\" ]; then\n        local split=\"\
    ([^,]*)\"\n    else\n        local split=\"(${split_words})\"\n    fi\n\n    local\
    \ -a splitwords\n    if [ \"$length\" -eq 0 ]; then\n        splitwords=( )\n\
    \    elif [ \"$split\" == \"([^,]*)\" ]; then\n        splitwords=( \"${words//,/\
    \ }\" )\n    else\n        splitwords=( $(echo $words | sed -e 's/'${split}'/'\"\
    $split\"'/g') )\n    fi\n\n    echo \"${splitwords[@]}\"\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplkbes1uv.sh: line 15: local: `Hello world\!'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local results=\"\"\n    for word in $@; do\n        if [[ ${word} =~\
    \ ([^\\s\"]*) ]]; then\n            results+=$(echo \"${BASH_REMATCH[*]:1}\" |\
    \ tr ' ' '_' | tr ',' '-' | tr ':' '_' | tr '.' '-')\n        else\n         \
    \   results=$results$(bash -c \"echo \\\"$word\\\" | wc -c\")\n        fi\n  \
    \  done\n    echo \"${results}\"\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg63zkvlt.sh: line 39: unexpected EOF while looking for matching
    `"''

    /tmp/tmpg63zkvlt.sh: line 43: unexpected argument to conditional binary operator

    /tmp/tmpg63zkvlt.sh: line 43: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=\"$1\"\n    echo \"$str\" | sed -e 's/,/ /g' | sort -u\n}\n\
    \ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local IFS=$','\n    local lower=\"abcdefghijklmnopqrstuvwxyz\"\n    local\
    \ upper=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    local output=$(echo \"$1\" | sed -e\
    \ 's/[[:space:]]*$//' | sed -e 's/,/ /g')\n    local count=$(echo \"$output\"\
    \ | tr \"$lower\" \"$upper\" | wc -l)\n    echo $count\n}\n\ncandidate() {\n \
    \   split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local lower=\"${1}\"\n  local split\n  local count\n  lower=\"${lower//,/\\\
    \\,}\"\n  lower=\"${lower//\\//\\\\/}\"\n  lower=\"${lower//\\!/\\\\!}\"\n  lower=\"\
    ${lower//\\?/\\\\?}\"\n  lower=\"${lower//#/\\\\#}\"\n  lower=\"${lower//%/\\\\\
    %}\"\n  lower=\"${lower//&/\\\\&}\"\n  lower=\"${lower//%/\\\\%}\"\n  lower=\"\
    ${lower//(/\\\\(}\"\n  lower=\"${lower//)/\\\\)}\"\n  lower=\"${lower//\\`/\\\\\
    `}\"\n  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\?/\\\\?}\"\n  lower=\"\
    ${lower//\\!/\\\\!}\"\n  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\\
    */\\\\*}\"\n  lower=\"${lower//\\?/\\\\?}\"\n  lower=\"${lower//\\!/\\\\!}\"\n\
    \  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"\
    ${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\\
    */\\\\*}\"\n  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\*/\\\\*}\"\n\
    \  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"\
    ${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\\
    */\\\\*}\"\n  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\*/\\\\*}\"\n\
    \  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"\
    ${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\\
    */\\\\*}\"\n  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\*/\\\\*}\"\n\
    \  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"\
    ${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\*/\\\\*}\"\n  lower=\"${lower//\\\
    */\\\\*}\"\n  lower=\"${lower//\\*/\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0ovf1zgm.sh: line 28: unexpected EOF while looking for matching
    ``''

    /tmp/tmp0ovf1zgm.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    IFS=\" \"\n    read -ra WORDS <<< \"$1\"\n    echo \"${WORDS[*]}\"\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=\"$1\"\n    local chars=\"$2\"\n    local word_count=0\n  \
    \  local num_chars=0\n    local num_chars_odd_order=0\n    local splits=()\n \
    \   if [[ \"$chars\" == \"\" ]]; then\n        local letters=\"abcdefghijklmnopqrstuvwxyz\"\
    \n        for (( i=0; i<${#letters}; i++ )); do\n            if (( i % 2 == 1\
    \ )); then\n                num_chars_odd_order=$(( $num_chars_odd_order + ${#letters[i]}\
    \ ))\n            else\n                num_chars=$(( $num_chars + ${#letters[i]}\
    \ ))\n            fi\n        done\n        [[ \"$num_chars\" -ne $num_chars_odd_order\
    \ ]] || num_chars=$num_chars\n        num_chars=$(( $num_chars + 1 ))\n      \
    \  local i=$(( num_chars - 1 ))\n        while (( i >= 0 )); do\n            ((\
    \ num_chars_odd_order = $num_chars_odd_order + ${#letters[$(( num_chars - i))]}\
    \ ))\n            (( num_chars = $num_chars - 1 ))\n            (( i = $(( i -\
    \ 1 )) ))\n        done\n        num_chars=$(( $num_chars + 1 ))\n        num_chars_odd_order=$((\
    \ $num_chars_odd_order + ${#letters[$(( num_chars - 1))]} ))\n        [[ \"$num_chars\"\
    \ -ne $num_chars_odd_order ]] || num_chars=$num_chars\n    else\n        [[ \"\
    $chars\" == \" \" ]] || local letters=\"abcdefghijklmnopqrstuvwxyz,.\"\n     \
    \   local i=$(( ${#chars} - 1 ))\n        while (( i >= 0 )); do\n           \
    \ (( num_chars_odd_order = $num_chars_odd_order + ${#letters[$(( num_chars - i))]}\
    \ ))\n            (( num_chars = $num_chars - 1 ))\n            (( i = $(( i -\
    \ 1 )) ))\n        done\n        num_chars=$(( $num_chars + 1 ))\n        num_chars_odd_order=$((\
    \ $num_chars_odd_order + ${#letters[$(( num_chars - 1))]} ))\n        [[ \"$num_chars\"\
    \ -ne $num_chars_odd_order ]] || num_chars=$num_chars\n    fi\n    for (( i=0;\
    \ i < num_chars; \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbkeeet7x.sh: line 53: unexpected EOF while looking for matching
    `)''

    /tmp/tmpbkeeet7x.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local i w words count_a count_b count_c count_d count_e count_f count_g\
    \ count_h count_i count_j count_k count_l count_m count_n count_o count_p count_q\
    \ count_r count_s count_t count_u count_v count_w count_x count_y count_z\n  \
    \  local -a words\n    words=($1)\n    words_len=${#words[@]}\n\n    # No whitespace\
    \ exist, split on commas\n    if [ \"${#words[@]}\" -eq 1 ]; then\n        words=(\"\
    ${words[0]}\")\n    fi\n\n    # No commas exist, split on space\n    if [ \"${#words[@]}\"\
    \ -eq 1 ]; then\n        words=(\"${words[0]}\")\n    fi\n\n    # No commas or\
    \ spaces exist, split on commas\n    if [ \"${#words[@]}\" -eq 1 ]; then\n   \
    \     words=(\"${words[0]}\")\n    fi\n\n    # No commas or spaces exist, split\
    \ on spaces\n    if [ \"${#words[@]}\" -eq 1 ]; then\n        words=(\"${words[0]}\"\
    )\n    fi\n\n    # No whitespaces exist, split on spaces\n    if [ \"${#words[@]}\"\
    \ -eq 1 ]; then\n        words=(\"${words[0]}\")\n    fi\n\n    count_a=${#${words[0]}}\n\
    \n    # If the word is one character long print that letter only\n    if [[ \"\
    ${count_a}\" -eq 1 ]]; then\n        words=(\"${words[0]}\")\n        count_b=${#${words[0]}}\n\
    \        count_c=${#${words[1]}}\n        count_d=$((${count_b} + ${count_c}))\n\
    \        count_e=$((${count_b} + ${count_c} - 1))\n        count_f=$((${count_d}\
    \ + ${count_e}))\n        count_g=$((${count_f} + 1))\n        count_h=$((${count_g}\
    \ + 1))\n        count_i=$((${count_h} + 1))\n        count_j=$((${count_i} +\
    \ 1))\n        count_k=$((${count_j} + 1))\n        count_l=$((${count_k} + 1))\n\
    \        count_m=$((${count_l} + 1))\n        count_n=$((${count_m} + 1))\n  \
    \      count_o=$((${count_n} + 1))\n        count_p=$((${count_o} + 1))\n    \
    \    count_q=$((${count_p} + 1))\n        count_r=$((${\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppcjhy78v.sh: line 66: unexpected EOF while looking for matching
    `)''

    /tmp/tmppcjhy78v.sh: line 86: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local word_list\n  word_list=$1\n  local splitter\n\n  local space=' '\n\
    \  local comma=','\n  local quote=\"\\\"\"\n  local backtick=\"`\"\n  local separator=${1:-comma}\n\
    \n  if [[ ${word_list} == \"\" ]]; then\n    echo \"$1\"\n  else\n    local -a\
    \ words=( $(echo \"$word_list\" | sed -e \"s/$space/${quote}$space$quote/g\")\
    \ )\n    local i=0\n    while [ $i -lt ${#words[@]} ]; do\n      if [[ -n $(echo\
    \ \"$words[$i] | tr $space $comma | sort -u | wc -l)\n        && ${words[$i] |\
    \ tr $space $comma | sort -u | sed -e 's/$/,/'} = \"${words[$i] | tr $space $comma\
    \ | sort -u | sed -e 's/$/,/'}\" ]]; then\n        local j=i+1\n        while\
    \ [[ -n $(echo \"$words[$j] | tr $space $comma | sort -u | wc -l)\n          &&\
    \ ${words[$j] | tr $space $comma | sort -u | sed -e 's/$/,/'} = \"${words[$j]\
    \ | tr $space $comma | sort -u | sed -e 's/$/,/'}\" ]]; do\n          ((j++))\n\
    \        done\n        words[$i]=\"${words[$i]}${separator}\"${words[$j]}\"\n\
    \        ((i=j+1))\n      elif [[ -n $(echo \"$words[$i] | tr $space $comma |\
    \ sort -u | wc -l)\n        && ${words[$i] | tr $space $comma | sort -u | sed\
    \ -e 's/$/,/'} = \"${words[$i] | tr $space $comma | sort -u | sed -e 's/$/,/'}\"\
    \ ]]; then\n        words[$i]=\"${words[$i]}${separator}\"\n      elif [[ -n $(echo\
    \ \"$words[$i] | tr $space $comma | sort -u | wc -l)\n        && ${words[$i] |\
    \ tr $space $comma | sort -u | sed -e 's/$/,/'} = \"${words[$i] | tr $space $comma\
    \ | sort -u | sed -e 's/$/,/'}\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpobv8e43f.sh: line 22: unexpected EOF while looking for matching
    ``''

    /tmp/tmpobv8e43f.sh: line 64: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words=$1\n    local count=0\n    local chars=$(echo $words |tr\
    \ \",\" \" \")\n    local wordsArray=()\n    local i=0\n\n    while ((i < ${#chars}));\
    \ do\n        local char=$(echo $chars |awk -F\\\" '{print $1}')\n        local\
    \ word=$(echo $chars |awk -F\\\" '{print $2}')\n        wordsArray[$i]=\"${word//,/\
    \ }\"\n        ((i=$i+1))\n    done\n\n    local wordCount=$(echo $wordsArray\
    \ |wc -l)\n\n    if (($wordCount == 0)); then\n        echo \"${words}|${#wordsArray[@]}\"\
    \n    else\n        echo \"${wordsArray[@]}\"\n    fi\n}\n\ncandidate() {\n  \
    \  split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\"\
    \ ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $(echo $1 | tr ' ' '\\n' | wc -w | tr '\\n' ' ') -eq 0 ]] ; then\n\
    \        echo $1\n    else\n        echo $1 | tr ' ' '\\n' | grep -Eo '[a-z]+'\
    \ | sort -u | sort -r -k 1,1 | tr ' ' '\\n'\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local -n words=$1\n  local output=\"$2\"\n  local sep=$3\n  local len=$4\n\
    \  local count\n  for word in $(echo $words | sed \"s/ /$sep/g\" | sed \"s/$sep//g\"\
    ); do\n    count=$(echo $word | awk -F\"$sep\" '{print NF}')\n    if [ \"$count\"\
    \ == \"$len\" ]; then\n      output+=\"'$word'$sep\"\n    else\n      output+=\"\
    '$word',\"\n    fi\n  done\n  output=${output%,}\n  echo ${output::-}\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoyazm5jz.sh: line 15: local: `Hello world\!'': invalid variable
    name for name reference

    sed: -e expression #1, char 0: no previous regular expression

    /tmp/tmpoyazm5jz.sh: line 29: output: -: syntax error: operand expected (error
    token is "-")

    '
  stdout: ''
  timestamp: 1660057062
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=\"$1\"\n    local words_array=()\n    # remove spaces from\
    \ strings\n    string=${string//[[:space:]]/}\n    # split on comma by default\n\
    \    string=${string//,/}\n    # split on spaces and quotations\n    string=${string//\"\
    }\"}\n    # add quotes to words\n    string=${string//[[:alpha:]]/\\\\\\&}\n \
    \   string=${string//[[:alpha:]][[:alpha:]]/\\\\\\&}\n    string=${string//[[:alpha:]][[:alpha:]][[:alpha:]]/\\\
    \\\\&}\n    string=${string//[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]/\\\\\
    \\&}\n    string=${string//[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]/\\\
    \\\\&}\n    # split on comma\n    string=${string//[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]/\\\
    \\\\&}\n    string=${string//[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]/\\\
    \\\\&}\n    string=${string//[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]/\\\
    \\\\&}\n    string=${string//[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]/\\\
    \\\\&}\n    string=${string//[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]/\\\
    \\\\&}\n    string=${string//[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]/\\\
    \\\\&}\n    string=${string//[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]/\\\
    \\\\&}\n    string=${string//[[:alpha:]\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz760zay8.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    set -f\n    local word=$1\n    local comma=$(echo $word | tr -cd ',')\n\
    \    local space_and_comma=$(echo $word | tr -cd ' , ')\n    local spaces=$(echo\
    \ $word | wc -c)\n    local odd_letters=$(echo $word | wc -c | awk '{print $1}')\n\
    \    echo $space $comma $space_and_comma\n    echo \"$spaces\" \"$comma\" \"$space_and_comma\"\
    \ \"$odd_letters\"\n    set +f\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    echo -n \"$1\";\n    local IFS=\\\n        \" ,.-_$#;:$?!\";\n    local\
    \ IFS=\"[\\\"\\']\";\n    local count=0;\n    local lowercase_count=0;\n    local\
    \ evencase_count=0;\n    local odd_count=0;\n    local even=\"\";\n    local odd=\"\
    \";\n    local chars=\"\";\n    local split=\"\";\n\n    while read -r char; do\n\
    \        if (( odd_count > 0 && evencase_count > 0 && evencase_count > odd_count\
    \ )); then\n            split+=${char};\n            chars+=\"'${char}'\";\n \
    \       elif (( evencase_count > 0 && odd_count > 0 && evencase_count > odd_count\
    \ )); then\n            split+=${char};\n            chars+=\"${char}\";\n   \
    \     elif (( odd_count > 0 && evencase_count > 0 && odd_count > evencase_count\
    \ )); then\n            split+=${char};\n            chars+=\"'${char}\";\n  \
    \      elif (( odd_count > 0 && evencase_count > 0 && odd_count < evencase_count\
    \ )); then\n            split+=${char};\n            chars+=\"${char}\";\n   \
    \     elif (( odd_count < 0 && evencase_count > 0 && odd_count > evencase_count\
    \ )); then\n            split+=${char};\n            chars+=\"'${char}\";\n  \
    \      elif (( odd_count < 0 && evencase_count > 0 && odd_count < evencase_count\
    \ )); then\n            split+=${char};\n            chars+=\"${char}\";\n   \
    \     fi;\n\n        if (( odd_count > 0 && evencase_count > 0 && odd_count >\
    \ evencase_count && $char == \"\\$\\$\" && $count > 0 )); then\n            odd+=${char};\n\
    \            chars+=\"\\$\\$\\$\";\n        elif (( odd_count > 0 && evencase_count\
    \ > 0 && odd_count < evencase_count && $char == \"\\$\\$\" && $count > 0 )); then\n\
    \            odd+=${char};\n            chars+=\"\\$\\$\\$\";\n        fi;\n\n\
    \        if (( odd_count < 0 && evencase_count > 0 && odd_count > evencase_count\
    \ && $char == \"\\$\\$\" && $count > 0 )); then\n            odd+=${char};\n \
    \           chars+=\"\\$\\$\\$\";\n        elif (( odd_count < 0 && evencase_\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4rzpt68n.sh: line 60: unexpected EOF while looking for matching
    `)''

    /tmp/tmp4rzpt68n.sh: line 80: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tlocal string=${1:-}\n\t# Remove spaces from start and end of string\n\t\
    string=$(echo $string | sed \"s/^[[:space:]]*//;s/[[:space:]]*$//\")\n\t# Remove\
    \ multiple spaces next to each other and separate by commas\n\tstring=$(echo $string\
    \ | sed \"s/\\s+/, /g\")\n\t# Remove spaces in between words\n\tstring=$(echo\
    \ $string | sed \"s/, /, /g\")\n\t# Return all but the first character (the comma\
    \ separating the words)\n\tstring=$(echo $string | sed \"s/^,//g\")\n\treturn\
    \ \"${string::-1}\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvbo2_785.sh: line 24: return: Hello world\: numeric argument required

    '
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local var=$1 var2 var3\n    local i=0 j=0\n    local -a arr\n    local\
    \ num\n    while [[ $i -lt ${#var} ]]; do\n        var2=${var:i:1}\n        if\
    \ [[ \"$var2\" =~ ^[[:space:]] ]]; then\n            var2=\"${var2//,/}\"\n  \
    \          if [[ \"$var2\" =~ ^[[:lower:]] ]]; then\n                arr[$j]=\"\
    $var2\"\n                (( i++ ))\n                (( j++ ))\n            elif\
    \ (( num =~ 1 )); then\n                arr[$j]=\"${var2:0:1}\"\n            \
    \    (( i++ ))\n            else\n                arr[$j]=\"$num\"\n         \
    \       (( i++ ))\n                (( j++ ))\n                (( num++ ))\n  \
    \          fi\n        else\n            if (( num =~ 1 )); then\n           \
    \     arr[$j]=\"${var2:0:1}\"\n                (( i++ ))\n            else\n \
    \               arr[$j]=\"$num\"\n                (( i++ ))\n                ((\
    \ j++ ))\n                (( num++ ))\n            fi\n        fi\n    done\n\
    \    arr[$j]=\"${var:(( i + 1 ))}\"\n    echo \"${arr[@]}\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057062
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tlocal STRING=$1\n\tlocal WHITESPACE=' '\n\tlocal COMMAS=','\n\tlocal COUNT\n\
    \tlocal STRING_ESCAPED\n\tlocal STRING_ESCAPED_ESCAPED\n\tlocal RESULT\n\n\tCOUNT=0\n\
    \tSTRING_ESCAPED=$(echo \"$STRING\" | sed 's/\\//\\\\\\//g' | sed 's/\\ /\\\\\\\
    \ /g' | sed 's/,/\\\\\\\\,/g')\n\tSTRING_ESCAPED_ESCAPED=$(echo \"$STRING_ESCAPED\"\
    \ | sed 's/\\//\\\\\\//g' | sed 's/\\ /\\\\\\ /g' | sed 's/,/\\\\\\\\,/g')\n\t\
    RESULT=$(echo \"$STRING_ESCAPED_ESCAPED\" | tr -cd \"$WHITESPACE,\")\n\twhile\
    \ [ \"$RESULT\" ] ; do\n\t\t((COUNT++))\n\t\tRESULT=$(echo \"$RESULT\" | tr -cd\
    \ \"$COMMAS,\")\n\tdone\n\tRESULT=$(echo \"$COUNT\")\n\n\techo \"$RESULT\"\n}\n\
    \ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local i words n\n    words=($1)\n    n=$((${#words[@]}-1))\n    for ((i=0;i<$n;i+=2));\
    \ do words[$i]=\"'${words[$i]}'\"; done\n    echo \"${words[@]}\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tlocal string=\"$1\"\n\tlocal count\n\tlocal i\n\tcount=0\n\ti=1\n\twhile\
    \ [ $i -le ${#string} ]; do\n\t\tif [[ ${string:$i:1} == \" \" ]]; then\n\t\t\t\
    let count+=$((count+1))\n\t\t\tlet i=i+1\n\t\telse\n\t\t\tlet count+=1\n\t\t\t\
    let i=$i+1\n\t\tfi\n\tdone\n\tif [[ $count -eq 1 ]]; then\n\t\techo \"$string\"\
    \n\telse\n\t\techo \"$count\"\n\tfi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  # split $1 into words separated by spaces\n  # no words should be empty\
    \ strings\n  local words=${1%%,*}\n  local number_of_words=${#words}\n  local\
    \ split_words=()\n  local i\n\n  if [ \"$number_of_words\" -eq 0 ]; then\n   \
    \ return 0\n  fi\n\n  if [ \"$number_of_words\" -gt 1 ]; then\n    # if the number\
    \ of words is greater than 1 we assume there are spaces\n    for ((i = 0; i <=\
    \ number_of_words; i++))\n    do\n      split_words+=(${words#$((i+1))})\n   \
    \ done\n  else\n    # if the number of words is 1 we assume there are no spaces\n\
    \    for ((i = 0; i <= number_of_words; i++))\n    do\n      split_words+=(${words#$i})\n\
    \    done\n  fi\n  echo ${split_words[@]}\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local w=\"$1\"\n    local str=\"$2\"\n\n    local words=()\n    local\
    \ count=0\n    local tmp\n\n    [[ \"$w\" =~ \"[^[:space:]]\" ]]\n    [[ \"$w\"\
    \ =~ \"[[:space:]]\" ]]\n\n    [[ \"$str\" ]] || return 0\n    [[ \"$w\" =~ \"\
    [[:space:]]\" ]]\n    for w in ${w//,/ }; do\n        count=$(( count + $(echo\
    \ \"$w\" | wc -c) ))\n        tmp=\"${w%% *}\"\n        words+=(\"${tmp// / }\"\
    )\n        (( count-- ))\n    done\n\n    [[ \"$count\" == 0 ]] || return $count\n\
    \n    local count=0\n    for w in ${str//,/ }; do\n        count=$(( count + $(echo\
    \ \"$w\" | wc -c) ))\n        tmp=\"${w%% *}\"\n        words+=(\"${tmp// / }\"\
    )\n    done\n\n    [[ \"$count\" == 0 ]] || return $count\n\n    return $count\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tlocal chars=\" ,;'-()\"\n\tlocal words=$1;\n\tlocal words_array=()\n\t\
    local current_word=''\n\n\tfor char in ${words//,/ }; do\n\t\tif [[ $chars ==\
    \ *\" $char\"* ]]; then\n\t\t\twords_array=(\"$current_word\" \"${words_array[*]}\"\
    )\n\t\t\tcurrent_word=''\n\t\t\tcontinue\n\t\tfi\n\t\tcurrent_word=\"$current_word$char\"\
    \n\tdone\n\n\tif [[ $chars == *\" \"$* ]]; then\n\t\twords_array=(\"$current_word\"\
    \ \"${words_array[*]}\")\n\tfi\n\n\tprintf \"%q\" \"${words_array[*]}\"\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=$1\n    # Check if string is empty\n    [ ! -z \"$string\"\
    \ ] || return 1\n    # Split on whitespace\n    local list=\"${string// /, }\"\
    \n    # Remove commas from list\n    list=\"${list//,//}\"\n    # Check if list\
    \ is empty\n    [ -z \"$list\" ] || return 1\n    # Check if there are any commas\
    \ in the list\n    [ ${#list} -gt 0 ] || return 1\n    # Check if letters are\
    \ in odd-order \n    local len=$((${#list} / 2))\n    local odd=1\n    for ((\
    \ i = 0; i < ${#list}; i++ )); do\n        local letter=${list:$i:1}\n       \
    \ if [ \"${letter}a\" -eq \"${letter}\" ]; then\n            odd=$((odd+1))\n\
    \        fi\n    done\n    [ $odd -ne 1 ] || return 1\n    # Split on commas if\
    \ they exist\n    local comma=\"${list//,/, }\"\n    comma=\"${comma//,//}\"\n\
    \    # Remove commas from list\n    list=\"${comma// /, }\"\n    list=\"${list//,//}\"\
    \n    # Check if list is empty\n    [ -z \"$list\" ] || return 1\n    # Return\
    \ list\n    echo \"$list\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tlocal string=\"$1\"\n\t# if there is a space return a list of strings or\
    \ a single string\n\tif [ -n \"${string}\" ]; then\n\t\tif [ -n \"${string:2}\"\
    \ ] && [ \"$string\" != \"${string:2}\" ]; then\n\t\t\tIFS=' ' read -r -a array\
    \ <<< \"${string}\"\n\t\t\techo \"${array[@]}\"\n\t\telse\n\t\t\techo \"$string\"\
    \n\t\tfi\n\telse\n\t\techo \"0\"\n\tfi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local i\n    local input=\"${1:-$1}\"\n    local output=\"\"\n\n    if\
    \ [[ \"$input\" =~ ^[0-9]*$ ]]; then\n        output=$(printf \"%s\" \"${input}\"\
    )\n        return 0\n    fi\n\n    for i in {A..Z}; do\n        if [[ \"$input\"\
    \ == *${i}* ]]; then\n            output+=\"\\\"${i}\\\"\"\n        else\n   \
    \         output+=\",\"\n        fi\n    done\n    # output=$(printf \"%s\" \"\
    ${input//,/, }\")\n    output=$(printf \"%s\" \"${output//\"[[:space:]]/}\")\n\
    \    output=$(printf \"%s\" \"${output//\"$\"}\")\n    output=$(printf \"%s\"\
    \ \"${output//[[:space:]]/}\")\n    output=$(printf \"%s\" \"${output//,/, }\"\
    )\n    output=$(printf \"%s\" \"${output//\"$\"}\")\n    output=$(printf \"%s\"\
    \ \"${output//[[:space:]]/}\")\n    output=$(printf \"%s\" \"${output//,/, }\"\
    )\n    output=$(printf \"%s\" \"${output//\"$\"}\")\n    output=$(printf \"%s\"\
    \ \"${output//[[:space:]]/}\")\n    output=$(printf \"%s\" \"${output//,/, }\"\
    )\n    output=$(printf \"%s\" \"${output//\"$\"}\")\n    output=$(printf \"%s\"\
    \ \"${output//[[:space:]]/}\")\n    output=$(printf \"%s\" \"${output//,/, }\"\
    )\n    output=$(printf \"%s\" \"${output//\"$\"}\")\n    output=$(printf \"%s\"\
    \ \"${output//[[:space:]]/}\")\n    output=$(printf \"%s\" \"${output//,/, }\"\
    )\n    output=$(printf \"%s\" \"${output//\"$\"}\")\n    output=$(printf \"%s\"\
    \ \"${output//[[:space:]]/}\")\n    output=$(printf \"%s\" \"${output//,/, }\"\
    )\n    output=$(printf \"%s\" \"${output//\"$\"}\")\n    output=$(printf \"%s\"\
    \ \"${output//[[:space:]]/}\")\n    output=$(printf \"%s\" \"${output//,/, }\"\
    )\n    output=$(printf \"%s\" \"${output//\"$\"}\")\n    output=$(printf \"%s\"\
    \ \"${output//[[:space:]]/}\")\n    output=$(printf \"%s\" \"${output//,/, }\"\
    )\n    output=$(printf \"%s\" \"${output//\"$\"}\")\n    output=$(printf \"%s\"\
    \ \"${output//[[:space:]]/}\")\n    output=$(printf \"%s\" \"${output//,/, }\"\
    )\n    output=$(printf \"%s\" \"${output//\"$\"}\")\n    output=$(printf \"%s\"\
    \ \"${output//[[:space\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6io9rra9.sh: line 77: unexpected EOF while looking for matching
    `"''

    /tmp/tmp6io9rra9.sh: line 81: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057063
- exit_code: -1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local s=\"$1\";\n    local result=\"\";\n    local count=0\n    local\
    \ countmax=0;\n    while [[ $s ]]\n    do\n        local x=\"${s//,/$'\\n'}\"\n\
    \        local x=\"${x//$'\\n'/,}\"\n        local x=\"${x//\\\"/''}\"\n     \
    \   result+=\"$x\"\n        count=$(($count + 1))\n        countmax=$(($countmax\
    \ + 1))\n        s=\"${s%,}\"\n    done\n    echo \"$countmax\"\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=32 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=21 encoding='utf-8'>
  timestamp: 1660057068
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local -i words=$1\n    local -i separator=$2\n    local -a result=()\n\
    \    local -i length=0\n\n    if [[ ${#words} -gt 0 ]]; then\n        result=()\n\
    \        local -a word\n        local i=0 wordlen\n        for word in ${words//,/\
    \ }; do\n            wordlen=$(( ${#word} / 2 ))\n            if [[ ${wordlen}\
    \ -gt 0 ]]; then\n                result+=( \"${word:0:${wordlen}}\" )\n     \
    \           result+=( \"${word:${wordlen}}\" )\n            else\n           \
    \     result+=( \"${word}\" )\n            fi\n        done\n        length=$((\
    \ ${#result[@]} / 2 ))\n    fi\n    if [[ ${separator} != ' ' ]]; then\n     \
    \   result=( ${result[@]} $( echo \"${result[@]}\" | sed -r -e 's/^/'\"${separator}\"\
    '/g' ) )\n    fi\n    if [[ ${separator} != ',' ]]; then\n        length=$(( length\
    \ + 1 ))\n        result=( ${result[@]} $( echo \"${result[@]}\" | sed -r -e 's/^/'\"\
    ${separator}\"'/g' ) )\n    fi\n    if [[ ${#result[@]} -lt 2 ]]; then\n     \
    \   echo \"\\\"${words}\\\"\"\n    else\n        echo \"${result[@]}\"\n    fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppu0jkpd4.sh: line 15: local: Hello world\!: syntax error: invalid
    arithmetic operator (error token is "\!")

    '
  stdout: ''
  timestamp: 1660057063
- exit_code: -1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=${1}\n    local num_lower=0\n    local num_comma=0\n   \
    \ local num_other=0\n    local num_space_and_other=0\n    local num_space=0\n\
    \    local num_other_space_and_other=0\n    local num_space_and_comma=0\n\n  \
    \  while [ -n \"$string\" ]; do\n        case $string in\n            [a-zA-Z0-9_\\\
    [\\]]) num_lower=${num_lower} num_other=${num_other} num_space_and_other=${num_space_and_other}\n\
    \                            num_space=${num_space} num_other_space_and_other=${num_other_space_and_other}\
    \ num_space_and_comma=${num_space_and_comma}\n                            num_comma=${num_comma}\
    \ ;;\n            [a-zA-Z]) num_lower=${num_lower} num_other=${num_other} num_space_and_other=${num_space_and_other}\n\
    \                            num_space=${num_space} num_other_space_and_other=${num_other_space_and_other}\
    \ num_space_and_comma=${num_space_and_comma}\n                            num_comma=${num_comma}\
    \ ;;\n            *) num_lower=${num_lower} num_other=${num_other} num_space_and_other=${num_space_and_other}\n\
    \                            num_space=${num_space} num_other_space_and_other=${num_other_space_and_other}\
    \ num_space_and_comma=${num_space_and_comma}\n                            num_comma=${num_comma}\
    \ ;;\n        esac\n        shift 1\n    done\n    echo \"$num_lower,$num_other,$num_space_and_other,$num_space,$num_other_space_and_other,$num_space_and_comma\"\
    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=29 encoding='utf-8'>
  timestamp: 1660057068
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words \n    IFS=\"[,.!?]\" read -ra words <<< \"$1\" \n    for\
    \ word in \"${words[@]}\"; do\n        echo \"$word\"\n    done\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local STRING=$1\n  local SPLIT_CHARACTERS=$(split_characters \"$STRING\"\
    )\n  local WORDS_IN_STRING=$((${#SPLIT_CHARACTERS[*]} - 1))\n\n  local STRING_ARRAY=(${STRING//,/\
    \ })\n  local WORD_ARRAY=(${STRING_ARRAY[@]})\n\n  local NUM_OF_WORDS=$(array_length_with_char\
    \ \"${WORD_ARRAY[@]}\" \"$SPLIT_CHARACTERS\")\n  local ARRAY=(${WORD_ARRAY[@]:0:$WORDS_IN_STRING})\n\
    \  local WORD_ARRAY=(${ARRAY[@]})\n\n  for i in $(seq 0 $((${#WORD_ARRAY[@]} -\
    \ 1))); do\n    WORD_ARRAY[$i]=\"${WORD_ARRAY[$i]// /$SPLIT_CHARACTERS[i]}\"\n\
    \  done\n\n  echo \"${WORD_ARRAY[@]}\"\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmps4zo_bbu.sh: line 16: split_characters: command not found

    /tmp/tmps4zo_bbu.sh: line 22: array_length_with_char: command not found

    '
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    # Split words by comma\n    local IFS=\",\"\n    # Split words around\
    \ a space, quote if whitespaces exists in the text\n    local IFS=\" \"\n    local\
    \ -n lines=\"$(${BASH_SOURCE[0]##*/} $1)\"\n    # Store output in array\n    local\
    \ words=()\n    # Iterate through lines\n    for line; do\n        local word=\"\
    ${line//[$'\\n']}\"\n        words[${#words[@]}]=\"$word\"\n    done\n    # Remove\
    \ trailing whitespaces and quote words\n    local -n lines=\"$(${BASH_SOURCE[0]##*/}\
    \ \"${lines[@]}\")\"\n    echo \"${lines[*]//[[:space:]]/},\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxqrsvj7r.sh: line 19: tmpxqrsvj7r.sh: command not found

    /tmp/tmpxqrsvj7r.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpxqrsvj7r.sh: line 28: tmpxqrsvj7r.sh: command not found

    /tmp/tmpxqrsvj7r.sh: line 28: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=$1\n    local delimiters=,\n    local lowercase=0\n    for\
    \ delimiter in $delimiters; do\n        for (( i=0; i<${#string}; i++ )); do\n\
    \            case \"${string:$i:1}\" in\n                [a-z]) \\\n         \
    \           lowercase=$(( lowercase + 1 )) ;;\n                *) lowercase=0\
    \ ;;\n            esac\n        done\n    done\n    if [ $lowercase%2 -eq 0 ];\
    \ then\n        # even number of lowercase\n        echo \"$string\"\n    else\n\
    \        # odd number of lowercase\n        echo \"$string\"\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpq7bb7ney.sh: line 27: [: 0%2: integer expression expected

    /tmp/tmpq7bb7ney.sh: line 27: [: 0%2: integer expression expected

    '
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words result\n    words=$(echo $1 | sed 's/ /\",\"/g')\n    result=$(echo\
    \ $words | awk -F, '{ print NF, $1 }')\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string words result index\n\n    # split on spaces\n    words=$(fgrep\
    \ -w \"$1\" <<<\"$(echo \"$1\" | sed 's/[^a-zA-Z0-9_]/ /g')\")\n\n    # split\
    \ on commas if no spaces exist\n    if [ -z \"$words\" ]; then\n        words=$(fgrep\
    \ -w \"$1\" <<<\"$(echo \"$1\" | sed 's/[^a-zA-Z0-9_] /,/g')\")\n    fi\n\n  \
    \  # count characters in odd-order letters (except for 'a')\n    result=$(echo\
    \ $words |tr A-Z a-z |grep -o '[[:alpha:]]' | grep -o '^[[:alpha:]]' | wc -w)\n\
    \    index=$((${result:-0}-1))\n\n    if [ -z \"$words\" ]; then\n        result=$((${index:-0}+1))\n\
    \    fi\n\n    echo \"$result\"\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local words=$1\n  local comma=$(echo \"${words//,/$',$'}\" | tr -cd '[:alnum:]')\n\
    \  local spaces=$(echo \"${words//[[:space:]]/}\" | tr -cd '[:space:]')\n  local\
    \ low=$(echo \"${words//[[:lower:]]/}\" | tr -cd '[:lower:]')\n  local high=$(echo\
    \ \"${words//[[:upper:]]/}\" | tr -cd '[:upper:]')\n  local nospaces=$(echo \"\
    ${words//[^[:space:]]/}\" | tr -cd '[:space:]')\n  local lownospaces=$(echo \"\
    ${words//[^[:lower:]]/}\" | tr -cd '[:lower:]')\n  local highnospaces=$(echo \"\
    ${words//[^[:upper:]]/}\" | tr -cd '[:upper:]')\n  \n  local lower=$[${low}+1]\n\
    \  local higher=$[${high}+1]\n  \n  case \"${comma}\" in\n    $'\\r' |$'\\n'|$'\\\
    t') ;; # $'' to include \\r, \\n and \\t\n    *) ;;\n  esac\n\n  case \"${spaces}\"\
    \ in\n    $'\\r' |$'\\n'|$'\\t') ;; # $'' to include \\r, \\n and \\t\n    *)\
    \ ;;\n  esac\n  \n  case \"${low}\" in\n    $'\\r' |$'\\n'|$'\\t') ;; # $'' to\
    \ include \\r, \\n and \\t\n    *) ;;\n  esac\n\n  case \"${high}\" in\n    $'\\\
    r' |$'\\n'|$'\\t') ;; # $'' to include \\r, \\n and \\t\n    *) ;;\n  esac\n \
    \ \n  case \"${nospaces}\" in\n    $'\\r' |$'\\n'|$'\\t') ;; # $'' to include\
    \ \\r, \\n and \\t\n    *) ;;\n  esac\n  \n  case \"${lownospaces}\" in\n    $'\\\
    r' |$'\\n'|$'\\t') ;; # $'' to include \\r, \\n and \\t\n    *) ;;\n  esac\n \
    \ \n  case \"${highnospaces}\" in\n    $'\\r' |$'\\n'|$'\\t') ;; # $'' to include\
    \ \\r, \\n and \\t\n    *) ;;\n  esac\n  \n  local count=\"\"\n  \n\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local input=\"$1\"\n\n    if [ -z \"$input\" ] ; then\n        echo \"\
    Usage: $0 string\" >&2\n        return 1\n    fi\n\n    local input=($input)\n\
    \    local inputLen=${#input[@]}\n    if [ $inputLen -eq 0 ] ; then\n        echo\
    \ \"Usage: $0 string\" >&2\n        return 1\n    fi\n    local inputCount=1\n\
    \    local inputWord=\"${input[inputCount]}\"\n    local inputWordLen=${#inputWord}\n\
    \n    if [ $inputWordLen -eq 0 ] ; then\n        echo \"Usage: $0 string\" >&2\n\
    \        return 1\n    fi\n\n    if [ \"$inputWord\" == \"-\" ] ; then\n     \
    \   echo \"Usage: $0 string\" >&2\n        return 1\n    fi\n\n    if [ \"$inputWord\"\
    \ == \".\" ] ; then\n        echo \"Usage: $0 string\" >&2\n        return 1\n\
    \    fi\n\n    if [ \"$inputWord\" == \"+\" ] ; then\n        echo \"Usage: $0\
    \ string\" >&2\n        return 1\n    fi\n\n    if [ \"$inputWord\" == \"!\" ]\
    \ ; then\n        echo \"Usage: $0 string\" >&2\n        return 1\n    fi\n\n\
    \    if [ \"$inputWord\" == \"?\" ] ; then\n        echo \"Usage: $0 string\"\
    \ >&2\n        return 1\n    fi\n\n    if [ \"$inputWord\" == \"|\" ] ; then\n\
    \        echo \"Usage: $0 string\" >&2\n        return 1\n    fi\n\n    if [ \"\
    $inputWord\" == \"/\" ] ; then\n        echo \"Usage: $0 string\" >&2\n      \
    \  return 1\n    fi\n\n    if [ \"$inputWord\" == \"?\" ] ; then\n        echo\
    \ \"Usage: $0 string\" >&2\n        return 1\n    fi\n\n    if [ \"$inputWord\"\
    \ == \"\\\\\" ] ; then\n        echo \"Usage: $0 string\" >&2\n        return\
    \ 1\n    fi\n\n    if [ \"$inputWord\" == \"*\" ] ; then\n        echo \"Usage:\
    \ $0 string\" >&2\n        return 1\n    fi\n\n    if [ \"$inputWord\" == \"<\"\
    \ ] ; then\n        echo \"Usage: $0 string\" >&2\n        return 1\n    fi\n\n\
    \    if [ \"$inputWord\" == \">\" ] ; then\n        echo \"Usage: $0 string\"\
    \ >&2\n        return 1\n    fi\n\n    if [ \"$inputWord\" == \"$\" ] ; then\n\
    \        echo \"Usage: $0 string\" >&2\n        return 1\n    fi\n\n    if [ \"\
    $inputWord\" == \"{\" ] ; then\n        echo \"Usage: $0 string\" >&2\n      \
    \  return 1\n    fi\n\n    if [ \"$inputWord\" == \"}\" ] ; then\n        echo\
    \ \"Usage: $0 string\" >&2\n        return 1\n    fi\n\n    if [ \"$inputWord\"\
    \ == \"[\" ] ; \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp884_iweo.sh: line 113: syntax error near unexpected token `}''

    /tmp/tmp884_iweo.sh: line 113: `}''

    '
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local lowerWords=$1\n  local count\n  lowerWords=${lowerWords:,}\n\n  lowerWords=$(echo\
    \ $lowerWords | tr \"[:upper:]\" \"[:lower:]\")\n  lowerWords=$(echo $lowerWords\
    \ | tr \"[:alpha:]\" \"[:lower:]\")\n\n  count=$( echo $lowerWords | wc -w )\n\
    \n  lowerWords=${lowerWords%.*}\n\n  echo $count\n  echo $lowerWords\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq3h3q334.sh: line 17: lowerWords: ,: syntax error: operand expected
    (error token is ",")

    '
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tlocal words=$(echo \"$1\" | sed 's/,/\\n/g' | sed 's/^\\s*//' | sed 's/\\\
    s*$//')\n\t# if there are no whitespace characters we can just return the string\n\
    \t# if there are whitespace characters than we count the number of spaces we find\
    \ and add it to\n\t# the string\n\tif [[ $(echo $words | sed 's/^\\s\\+//;s/\\\
    s*$//') =~ ^ ]]; then\n\t\techo \"$words\"\n\telse\n\t\techo \"${#words}\"\n\t\
    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words=$1\n    if [[ $words == *\"\\'\"* ]]; then\n        echo\
    \ \"ERROR: Invalid words\"\n        exit 1\n    fi\n\n    local num_words=0\n\
    \    local word\n    local split_word\n    while read -r word; do\n        split_word=\"\
    \"\n        for((i=0; i < ${#word}; i++)); do\n            if [[ \"${word:$i:1}\"\
    \ == ' ' ]]; then\n                num_words=$((num_words + 1))\n            \
    \    split_word+=','\n            else\n                if [[ ${word:$i:1} -ge\
    \ 'a' && ${word:$i:1} -le 'z' ]]; then\n                    num_words=$((num_words\
    \ + 1))\n                    split_word+=\"\\\"${word:$i:1}\\\"\"\n          \
    \      else\n                    split_word+=\"\\\"${word:$i:1}\\\",\"\n     \
    \           fi\n            fi\n        done\n        if [[ ${#split_word} -eq\
    \ 0 ]]; then\n            num_words=$((num_words + 1))\n            split_word+=\"\
    \\\"${word:$((${#word}-1)):1}\\\"\"\n        fi\n        words=$words$split_word$'\\\
    n'\n    done < <(echo $words | sed 's/,$//')\n    echo \"$num_words\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp0mchqqj.sh: line 31: [[: \: syntax error: operand expected (error
    token is "\")

    /tmp/tmpp0mchqqj.sh: line 31: [[: !: syntax error: operand expected (error token
    is "!")

    '
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local result=$1;\n    local delimiters=\"${@:2}\"\n    local words=${result:0:-1}\n\
    \    local delimiter=${delimiters:1}\n    while IFS=$delimiter read -r word; do\n\
    \        [[ \"$word\" != \"\" ]] && result+=(\"$word\")\n    done <<< \"$words\"\
    \n    echo \"${#result}\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words=\"${1}\"\n    local space=\"${2}\"\n\n    case \"${spaces}\"\
    \ in\n        \"\")\n            spaces=\" \"\n            ;;\n        *)\n  \
    \          spaces=\"${spaces}\"\n            ;;\n    esac\n\n    local lowercase_letters='abcdefghijklmnopqrstuvwxyz'\n\
    \n    local i\n    local arr\n    local n\n\n    arr=$(IFS=$space\n    read -r\
    \ -a arr <<<\"$words\" <<<\"$lowercase_letters\")\n    n=\"${#arr[@]}\"\n\n  \
    \  local count=0\n\n    for (( i=0; i < $n; i++ )); do\n        if [[ \"${arr[$i]}\"\
    \ =~ [a-z] ]]; then\n            (( count++ ))\n        elif (( $count % 2 ));\
    \ then\n            arr[$i]=\"${arr[$i]}$space\"\n        fi\n    done\n\n   \
    \ arr=(${arr[@]:0:$((n - 1))})\n    arr+=(${arr[@]:$((n - 1))})\n\n    echo \"\
    ${arr[@]}\"\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local words=$1\n  local whitespace=\"[[:space:]]\"\n  local comma=\"[[:comm:]]\"\
    \n  local letters=\"[[:lower:]]\"\n  local count\n  # Remove non-word characters\
    \ from word\n  words=$(echo $words | sed 's/'\"$whitespace\"'//g')\n  # Count\
    \ number of lower case letters\n  count=$(echo $words |grep -Eo \"$letters\" |\
    \ wc -l)\n  if [[ -z $words ]]; then\n    echo \"$count\"\n  else\n    if [[ $count\
    \ -eq 0 ]]; then\n      echo \"0\"\n    else\n      echo \"$count\"\n    fi\n\
    \  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: -1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local IFS='[ -~]' line\n    local output\n    local count\n\n    if [\
    \ -z \"$1\" ]\n    then\n        return 1\n    fi\n\n    count=0\n    local results=()\n\
    \n    while IFS= read -r line\n    do\n        results+=(\"$line\")\n        ((\
    \ count++ ))\n    done\n\n    IFS=\"$IFS\"\n    local words=${results[@]}\n  \
    \  IFS=$SAVEIFS\n\n    echo \"${words[@]}\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=60 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=41 encoding='utf-8'>
  timestamp: 1660057068
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=$1\n    local words\n    local word\n    local count\n    words=()\n\
    \    count=0\n    while read -r word; do\n        if [ -z \"$word\" ]; then\n\
    \            break\n        fi\n        if [[ $word == *\"\\|\"* ]]; then\n  \
    \          if (( ${#word} % 2 )); then\n                words[${count}]=\"$word\"\
    \n                (( count += 1 ))\n            else\n                words[${count}]=\"\
    $word\"\n                break\n            fi\n        else\n            words[${count}]=\"\
    $word\"\n        fi\n    done <<< \"$str\"\n    words=(\"${words[@]:1}\")\n  \
    \  for word in \"${words[@]}\"; do\n        if [[ ${#word} -eq 0 ]]; then\n  \
    \          words=\"${words},$word\"\n            continue\n        fi\n      \
    \  if [[ $word == *\"\\\"\"* ]]; then\n            words=\"${words},$word\"\n\
    \            continue\n        fi\n    done\n    echo \"${words}\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n\tset +o posix\n\tlocal _args=( \"$1\" )\n\tlocal _first=\n\tlocal _first2=\n\
    \tlocal _split=\n\tlocal _split2=\n\tlocal _split_first=\n\tlocal _last=\n\tlocal\
    \ _last2=\n\tlocal _splitter=$'\\t'\n\n\t# Get last non-whitespace/comma character\n\
    \twhile IFS=$_splitter read -r -d '' _first; do\n\t\t_first=$((${_first:${#_first}-1:1}))\n\
    \t\t[ \"$_first\" != ' ' ] && break\n\t\t_split=\"$_split,${_first}\"\n\tdone\
    \ < <(printf '%s\\n' \"${_args[@]:-}\") || return 1\n\n\t# Get first non-whitespace/comma\
    \ character\n\twhile IFS=$_splitter read -r -d '' _split; do\n\t\t[ \"$_split\"\
    \ != ' ' ] && break\n\t\t[ \"$_split\" != \",\" ] && continue\n\t\t[ \"$_split2\"\
    \ != \",\" ] && break\n\t\t_split=\"$_split,$((${_split:${#_split}-1:1}))\"\n\t\
    \t_split2=${_split2:0:1}\n\tdone < <(printf '%s\\n' \"${_args[@]:-}\") || return\
    \ 1\n\n\t# Get first character after first non-whitespace/comma character\n\t\
    while IFS=$_splitter read -r -d '' _split_first; do\n\t\t[ \"$_split_first\" !=\
    \ ',' ] && break\n\t\t_split_first=$((${_split_first:1:1}))\n\t\t_first=$((${_split_first:0:1}))\n\
    \t\t[ \"$_first\" != ' ' ] && break\n\t\t_split=\"$_split,${_first}\"\n\t\t_split2=\"\
    $_split2,${_first}\"\n\tdone < <(printf '%s\\n' \"${_args[@]:-}\") || return 1\n\
    \n\t# Get last character after last non-whitespace/comma character\n\twhile IFS=$_splitter\
    \ read -r -d '' _last; do\n\t\t[ \"$_last\" != ',' ] && break\n\t\t_last=$((${_last:1:1}))\n\
    \t\t_last2=\"$_last2,${_last}\"\n\tdone < <(printf '%s\\n' \"${_args[@]:-}\")\
    \ || return 1\n\n\t# Get first character after first non-whitespace/comma character\n\
    \twhile IFS=$_splitter read -r -d '' _first2; do\n\t\t[ \"$_\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptt18_bcy.sh: line 77: unexpected EOF while looking for matching
    `"''

    /tmp/tmptt18_bcy.sh: line 81: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local WORD_DELIM=\" \"\n  local WORD_COUNT=0\n  local WORD\n\n  for WORD\
    \ in \"$1\"; do\n    [[ -z \"$WORD\" ]] && return \"$WORD_COUNT\"\n    WORD_COUNT=$((WORD_COUNT+1))\n\
    \  done\n  echo \"$WORD_COUNT\"\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words=\"$1\"\n    [[ \"$words\" =~ [[:space:]] ]] || words=\"$words,\"\
    \n    [[ \"$words\" =~ [[:space:]] ]] || words=\"$words,\"\n    [[ \"$words\"\
    \ =~ [[:space:]] ]] || words=\"$words,\"\n    [[ \"$words\" =~ [[:space:]] ]]\
    \ || words=\"$words,\"\n    [[ \"$words\" =~ [[:space:]] ]] || words=\"$words,\"\
    \n    [[ \"$words\" =~ [[:space:]] ]] || words=\"$words,\"\n    [[ \"$words\"\
    \ =~ [[:space:]] ]] || words=\"$words,\"\n    [[ \"$words\" =~ [[:space:]] ]]\
    \ || words=\"$words,\"\n    [[ \"$words\" =~ [[:space:]] ]] || words=\"$words,\"\
    \n    [[ \"$words\" =~ [[:space:]] ]] || words=\"$words,\"\n    [[ \"$words\"\
    \ =~ [[:space:]] ]] || words=\"$words,\"\n    [[ \"$words\" =~ [[:space:]] ]]\
    \ || words=\"$words,\"\n    [[ \"$words\" =~ [[:space:]] ]] || words=\"$words,\"\
    \n    [[ \"$words\" =~ [[:space:]] ]] || words=\"$words,\"\n    [[ \"$words\"\
    \ =~ [[:space:]] ]] || words=\"$words,\"\n    [[ \"$words\" =~ [[:space:]] ]]\
    \ || words=\"$words,\"\n    [[ \"$words\" =~ [[:space:]] ]] || words=\"$words,\"\
    \n    [[ \"$words\" =~ [[:space:]] ]] || words=\"$words,\"\n    [[ \"$words\"\
    \ =~ [[:space:]] ]] || words=\"$words,\"\n    [[ \"$words\" =~ [[:space:]] ]]\
    \ || words=\"$words,\"\n    [[ \"$words\" =~ [[:space:]] ]] || words=\"$words,\"\
    \n    [[ \"$words\" =~ [[:space:]] ]] || words=\"$words,\"\n    [[ \"$words\"\
    \ =~ [[:space:]] ]] || words=\"$words,\"\n    [[ \"$words\" =~ [[:space:]] ]]\
    \ || words=\"$words,\"\n    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  echo \"$1\" | tr -c '[:upper:]\\^,' '[:upper:]\\^'\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'tr: when translating with complemented character classes,

    string2 must map all characters in the domain to one

    '
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [ \"$#\" -lt 1 ]; then\n        echo \"No arguments passed\"\n   \
    \     return -1\n    fi\n\n    # Check if $1 is empty.\n    local var=$1\n   \
    \ if [ ${#var} -eq 0 ]; then\n        echo \"String is empty\"\n        return\
    \ -1\n    fi\n\n    # Check if $1 is empty or has spaces\n    if [ \"$var\" ==\
    \ \"\" ] || [[ ${#var} -eq 0 ]]; then\n        echo \"No whitespace exists in\
    \ the text\"\n        echo \"Splitting on commas\"\n        var=$(IFS=,; echo\
    \ \"$var\")\n        var=$(echo $var | tr ' ' '\\n' | sort | uniq | wc -l | tr\
    \ -d '\\n' | tr -d ' ')\n        echo \"Result is \\\"$var\\\"\"\n        return\
    \ 0\n    fi\n\n    local count=0\n    local var\n    local var2\n    local var3\n\
    \    local var4\n    local var5\n    local var6\n    local var7\n    local var8\n\
    \    local var9\n    local var10\n    local var11\n    local var12\n    local\
    \ var13\n    local var14\n    local var15\n    local var16\n    local var17\n\
    \    local var18\n    local var19\n    local var20\n    local var21\n    local\
    \ var22\n    local var23\n    local var24\n    local var25\n    local var26\n\
    \    local var27\n    local var28\n    local var29\n    local var30\n    local\
    \ var31\n    local var32\n    local var33\n    local var34\n    local var35\n\
    \    local var36\n    local var37\n    local var38\n    local var39\n    local\
    \ var40\n    local var41\n    local var42\n    local var43\n    local var44\n\
    \    local var45\n    local var46\n    local var47\n    local var48\n    local\
    \ var49\n    local var50\n    local var51\n    local var52\n    local var53\n\
    \    local var54\n    local var55\n    local var56\n    local var57\n    local\
    \ var58\n    local var59\n    local var60\n    local var61\n    local var62\n\
    \    local var63\n    local var64\n    local var65\n    local var66\n    local\
    \ var67\n    local var68\n    local var69\n    local var70\n\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=\"$1\"\n    local spaces=0 commas=0 spaces=0\n    for char\
    \ in \"${str//,/$'\\n'}\"; do\n        [[ $char == [[:space:]] ]] && spaces=$((spaces+1))\
    \ || spaces=0 && continue\n        (( spaces++ )) && continue\n        [[ $char\
    \ == [[:comma:]] ]] && commas=$((commas+1)) || commas=0 && continue\n        ((\
    \ commas++ )) && continue\n        break\n    done\n    echo $((commas%2+1)) &&\
    \ echo \"$commas\" || echo \"$spaces\"\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057063
