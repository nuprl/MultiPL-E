name: HumanEval_103_rounded_avg
language: sh
prompt: "#!/bin/bash\n# You are given two positive integers n and m, and your task\
  \ is to compute the\n# average of the integers from n through m (including n and\
  \ m). \n# Round the answer to the nearest integer and convert that to binary.\n\
  # If n is greater than m, return -1.\n# Example:\n# >>> $(rounded_avg \"1\" \"5\"\
  )\n# \"0b11\"\n# >>> $(rounded_avg \"7\" \"5\")\n# \"-1\"\n# >>> $(rounded_avg \"\
  10\" \"20\")\n# \"0b1111\"\n# >>> $(rounded_avg \"20\" \"33\")\n# \"0b11010\"\n\
  #\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n"
tests: "}\n\ncandidate() {\n    rounded_avg \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"1\" \"5\") = \"0b11\" ]]\n    [[ $(candidate \"7\" \"13\") =\
  \ \"0b1010\" ]]\n    [[ $(candidate \"964\" \"977\") = \"0b1111001010\" ]]\n   \
  \ [[ $(candidate \"996\" \"997\") = \"0b1111100100\" ]]\n    [[ $(candidate \"560\"\
  \ \"851\") = \"0b1011000010\" ]]\n    [[ $(candidate \"185\" \"546\") = \"0b101101110\"\
  \ ]]\n    [[ $(candidate \"362\" \"496\") = \"0b110101101\" ]]\n    [[ $(candidate\
  \ \"350\" \"902\") = \"0b1001110010\" ]]\n    [[ $(candidate \"197\" \"233\") =\
  \ \"0b11010111\" ]]\n    [[ $(candidate \"7\" \"5\") = \"-1\" ]]\n    [[ $(candidate\
  \ \"5\" \"1\") = \"-1\" ]]\n    [[ $(candidate \"5\" \"5\") = \"0b101\" ]]\n}\n\n\
  run_test"
completions: ["    local a b c d e\n    # a=$1; b=$2; c=3; d=5; e=10\n    echo $1\
    \ | awk '{\n        if($1<$2) \n            { for(i=1;i<=$2;i++) \n          \
    \      { printf \"0b%03o\\n\",($1<<$c|i)%2 }\n            } \n        else \n\
    \            { print -1\n            }\n        }'", "   local -r n=\"${1}\"\n\
    \   local -r m=\"${2}\"\n   local -r k=\"${n}+${m}+1\"\n   local -r h=\"${k}\"\
    \n   local -r c=\"${k%?}\"\n   printf \"%b\" \"$c\"", "  # First check if $2 >\
    \ $1 since if we have that case, the only possible \n  # return value is -1.\n\
    \  (( ${#1} > ${#2} )) && return -1\n\n  # Use $1 as the base of the conversion\
    \ so we round appropriately\n  base=$(echo \"$1\" | cut -b 1-${#1})\n\n  # Do\
    \ the math\n  echo \"$base$(($2/$base))\"", "    local n=$1\n    local m=$2\n\
    \    \n    if (( n < m )); then\n        echo \"-1\"\n        return\n    fi\n\
    \    \n    # n <= m\n    local sum=0\n    local avg=0\n    \n    for (( i=1; i<=$((\
    \ $(n-$m) + 1 )); i++ )); do\n        (( sum += i ))\n    done\n    (( avg = sum\
    \ / $(( $(n-$m) + 1 )) ))\n    \n    # print binary\n    printf \"0b%b\" $(( $(n-$m)\
    \ + $( echo $avg|bc|sed \"s/^0*//\" ) ))", "  local a b n m sum\n  a=$1\n  b=$2\n\
    \  n=$a\n  m=$b\n  while [ $n -gt $m ]\n  do\n    let \"n--\"\n    sum=$(( $sum\
    \ + $n ))\n  done\n  echo \"$sum/2 %b\" | bc", "    local n=$1 m=$2\n    local\
    \ sum=$((($(n))+$(m)))\n    if [ $((n)) -eq $(m) ]; then\n        echo 0\n   \
    \ elif [ $n -gt $(m) ]; then\n        echo \"-1\"\n    else\n        echo \"0b$((sum))\"\
    \n    fi", "    local n m sum\n    local answer\n    local remain\n    read n\
    \ m <<< \"$*\"\n    sum=$(( $n + $m ))\n    answer=$(( $sum / 2 ))\n    while\
    \ [ $answer -le $n ] || [ $answer -gt $m ]; do\n        remain=$(( $sum % 2 ))\n\
    \        sum=$(( $sum / 2 ))\n        answer=$(( $answer + $remain ))\n    done\n\
    \    echo \"$answer\"", "    local n m\n    n=${1//+([0-9])}\n    m=${2//+([0-9])}\n\
    \    \n    if [[ ${#n} -le ${#m} ]]; then\n        echo \"${n}\";\n        return\
    \ 0;\n    elif [[ ${#n} -gt ${#m} ]]; then\n        echo \"${m}\";\n        return\
    \ 0;\n    else\n        echo $(( (${n}-${m})/2 ));\n        echo $(( (${n}-${m})%2\
    \ ))\n    fi", "  local n m\n  n=$(echo $1 | cut -d'-' -f1)\n  m=$(echo $2 | cut\
    \ -d'-' -f1)\n  if [ $n -le $m ]; then\n    # Only 1 digit is left, so round\n\
    \    echo -n $(echo $n | bc)\n  else\n    # More than 1 digit is left, return\
    \ -1\n    echo -1\n  fi", "\tlet \"round = $1 - 1\"\n\tif [ \"$2\" -gt \"$1\"\
    \ ]; then\n\t\techo \"-1\"\n\telse\n\t\tlet \"round+=$2 - $1\"\n\t\tlet \"round=round%2\"\
    \n\t\tif [ \"$round\" -eq 0 ]; then\n\t\t\tlet \"round+=1\"\n\t\tfi\n\t\tlet \"\
    bits=$round + 1\"\n\t\tlet \"rem=bits-$((log($2) / log(2)))\"\n\t\tlet \"rem*=2\"\
    \n\t\tlet \"rem+=$(rem >= 1)\"\n\t\tlet \"rem*=8\"\n\t\tlet \"rem+=$(rem >= 4)\"\
    \n\t\tlet \"rem*=16\"\n\t\tlet \"rem+=$(rem >= 7)\"\n\t\tlet \"rem*=32\"\n\t\t\
    let \"rem+=$(rem >= 10)\"\n\t\tlet \"rem*=64\"\n\t\tlet \"rem+=$(rem >= 15)\"\n\
    \t\tlet \"rem*=128\"\n\t\tlet \"rem+=$(rem >= 20)\"\n\t\tlet \"rem*=256\"\n\t\t\
    let \"rem+=$(rem >= 25)\"\n\t\tlet \"rem*=512\"\n\t\tlet \"rem+=$(rem >= 30)\"\
    \n\t\tlet \"rem*=1024\"\n\t\tlet \"rem+=$(rem >= 35)\"\n\t\tlet \"rem*=2048\"\n\
    \t\tlet \"rem+=$(rem >= 40)\"\n\t\tlet \"rem*=4096\"\n\t\tlet \"rem+=$(rem >=\
    \ 45)\"\n\t\tlet \"rem*=8192\"\n\t\tlet \"rem+=$(rem >= 50)\"\n\t\tlet \"rem*=16384\"\
    \n\t\tlet \"rem+=$(rem >= 55)\"\n\t\tlet \"rem*=32768\"\n\t\tlet \"rem+=$(rem\
    \ >= 60)\"\n\t\tlet \"rem*=65536\"\n\t\tlet \"rem+=$(rem >= 65)\"\n\t\tlet \"\
    rem*=131072\"\n\t\tlet \"rem+=$(rem >= 70)\"\n\t\tlet \"rem*=262144\"\n\t\tlet\
    \ \"rem+=$(rem >= 75)\"\n\t\tlet \"rem*=524288\"\n\t\tlet \"rem+=$(rem >= 80)\"\
    \n\t\tlet \"rem* = 1048576\"\n\t\tlet \"rem+=$(rem >= 85)\"\n\t\tlet \"rem* =\
    \ 2097152\"\n\t\t", "  if [ $# -ne 2 ]; then\n    echo \"Usage: $(basename $0)\
    \ n m\"\n    exit 1\n  fi\n  \n  local n m\n  n=$(echo $1 | sed \"s/\\./0\\./g\"\
    \ | bc | sed \"s/0$/1/g\" | tr '[:upper:]' '[:lower:]' | cut -c1-6)\n  m=$(echo\
    \ $2 | sed \"s/\\./0\\./g\" | bc | sed \"s/0$/1/g\" | tr '[:upper:]' '[:lower:]'\
    \ | cut -c1-6)\n\n  # return -1 in case of n greater than m\n  [[ $n -gt $m ]]\
    \ || return -1\n\n  local s\n  s=$(printf \"%b\" $((10#$(printf \"%.$((6#${n}-1#${m}))\"\
    \ $((6#${n}-1#${m}))))) # calculate binary fraction of average\n  local i\n  i=$(echo\
    \ $s | sed \"s/0*$//g\") # strip leading 0s from decimal fraction\n  echo $((10#$((6#$i-1#$m)))\
    \ + 1)", "  local n=$1\n  local m=$2\n  local i=0\n  local sum=0\n  while [[ $n\
    \ -le $m ]] ; do\n    sum=$(($sum + $n))\n    i=$(($i + 1))\n    n=$(($n + 1))\n\
    \  done\n  echo \"$((($sum / $i) * 2))\" | bc -l", "    local n=$1 m=$2\n    local\
    \ n m sum\n    sum=0\n    \n    if [ $n -le $m ]\n    then\n        for i in $(seq\
    \ 1 $n)\n        do\n            sum=$(($sum + $i))\n        done\n        echo\
    \ $(($sum / $m))\n    else\n        echo \"-1\"\n    fi", "    local n=$1\n  \
    \  local m=$2\n    local sum=0\n    local i\n    local j\n    local k\n    # Handle\
    \ edge case\n    [ \"$n\" -gt \"$m\" ] && return -1\n    # Loop to handle each\
    \ digit in range from n to m\n    for (( i=n; i>=m; i-- )); do\n        # Handle\
    \ edge case where n is greater than or equal to m\n        if [ \"$i\" -gt \"\
    $m\" ]; then\n            j=$(( $i - $m ))\n            if [ \"$j\" -gt 0 ]; then\n\
    \                sum=$(( sum + $j % 2 ))\n            fi\n        fi\n       \
    \ # Loop to handle each digit in range from 0 to 9\n        for (( j=0; j<10;\
    \ j++ )); do\n            # Handle edge case where n is greater than or equal\
    \ to m\n            if [ \"$i\" -gt \"$m\" ]; then\n                k=$(( $i -\
    \ $m ))\n                if [ \"$k\" -gt 0 ]; then\n                    sum=$((\
    \ sum + $j + $k % 2 ))\n                fi\n            fi\n        done\n   \
    \ done\n    # Round the result to the nearest binary digit\n    rounded_sum=$((\
    \ $sum % 2 ))\n    rounded_sum=$(( $rounded_sum + $n % 2 ))\n    echo \"0b$rounded_sum\"",
  "    local i\n    local a b\n    local num\n\n    # remove leading zeros from decimal\
    \ part\n    a=$(echo \"$1\" | sed 's/^0*//')\n    b=$(echo \"$2\" | sed 's/^0*//')\n\
    \n    while [[ \"$a\" != \"$b\" ]]; do\n        a=$(( $a + 1 ))\n        b=$((\
    \ $b + 1 ))\n    done\n\n    echo \"$a\" | sed 's/^0*//'", "    local i n m sum\
    \ x\n    \n    # Convert to base 10 and round to nearest integer\n    x=$(( $1\
    \ * 10 ))\n    \n    # Calculate sum\n    sum=$(($n + $m ))\n    \n    # Handle\
    \ negative values\n    [ $x -lt 0 ] && x=0 \n    [ $sum -lt 0 ] && sum=0\n   \
    \ \n    # Handle values greater than m\n    [ $x -gt $m ] && x=$m\n    \n    #\
    \ Return 0 if m+n are equal\n    [ $x = $sum ] && return 0\n    \n    # Return\
    \ 1 if m < n, -1 if m > n\n    [ $x -lt $n ] && return 1\n    [ $x -gt $m ] &&\
    \ return -1", "    local n=$1; shift\n    local m=$1; shift\n    if [[ ${n} -le\
    \ ${m} ]]\n    then\n        echo \"${m}-${n}\"\n    elif [[ ${n} -ge ${m} ]]\n\
    \    then\n        echo \"-1\"\n    else\n        echo \"-1\"\n    fi", "  local\
    \ n m\n  n=$(to_decimal $1) m=$(to_decimal $2)\n  if ((n > m)); then return -1;\
    \ fi\n  if ((n == 0)); then return 0; fi\n  ((m=m-n+1))\n  local output=0\n  local\
    \ i \n  for ((i=m+1; i<=n; ++i)); do\n    output=$(($output + $i))\n  done\n \
    \ ((output=$((output+m+1)))); echo $output; ", "   local n=\"$1\"\n   local m=\"\
    $2\"\n   local ret=$(echo \"$n $m\" | awk '{printf \"%0*b\\n\", length($1), $1}')\n\
    \   local res=$(echo \"$n $m\" | awk '{printf \"0b%0*b\\n\", length($1), $1}')\n\
    \   echo \"$ret\"\n   echo \"$res\"\n   if [ \"$ret\" -gt \"$res\" ]; then\n \
    \     return -1\n   fi\n   return \"$res\"", "  local i j\n  i=$1\n  j=$2\n  \n\
    \  (( i )) && return $i\n  (( j )) && return $j\n  \n  (( i < j)) && return -1\n\
    \  \n  (( i > j)) && return $(( ( ( ( ( ( ( ( $(( j )) )) - ( $(( i )) )) + 1\
    \ ))) + 1))\n  \n  (( i > j)) && return $(( ( ( ( ( ( ( ( ( ( ( $(( j )) )) -\
    \ ( $(( i )) )) + 1 ))) + 1))\n  \n  (( i > j)) && return $(( ( ( ( ( ( ( ( (\
    \ ( ( $(( j )) )) - ( $(( i )) )) + 1 ))) + 1))\n  \n  (( i > j)) && return $((\
    \ ( ( ( ( ( ( ( ( ( ( $(( j )) )) - ( $(( i )) )) + 1 ))) + 1))\n  \n  (( i >\
    \ j)) && return $(( ( ( ( ( ( ( ( ( ( ( $(( j )) )) - ( $(( i )) )) + 1 ))) +\
    \ 1))", "    local n_arg=$1\n    local m_arg=$2\n    local sum=$(expr $n_arg +\
    \ $m_arg)\n    local sum2=0\n    local remainder=0\n    while [ $((sum%2)) -ne\
    \ 0 ]\n    do\n        remainder=$((sum%2))\n        sum=$((sum/2))\n        sum2=$((sum2+remainder))\n\
    \    done\n    echo \"$sum2\"", "    let \"sum=\"$(( \"$1\" ))\n    if [ \"$1\"\
    \ -gt \"$2\" ]\n    then\n        return -1\n    fi\n    let \"diff=\"$(( \"$1\"\
    \ - \"$2\" ))\n    let \"round=\"$(( ( $diff / 10 ) + 1 ))\"\n    \n    local\
    \ -n sum=$sum\n    local -n diff=$diff\n    local -n round=$round\n\n    local\
    \ tmp\n    local -n i=$round\n    sum=0\n    while [ \"$i\" -le \"$round\" ]\n\
    \    do\n        (( sum += $i ))\n        (( i += 1 ))\n    done\n\n    tmp=$(echo\
    \ \"$sum / $diff\" | bc)\n    echo \"0b${tmp:0:$(( ${#tmp} - 1 ))}\"", "   local\
    \ i\n   local n\n   local m\n   \n   # Check that the input arguments were passed\
    \ correctly.\n   if [ $# -eq 2 ] && [ \"$1\" -gt \"$2\" ] || [ $# -eq 1 ]\n  \
    \ then\n      echo \"Invalid parameter(s)\"\n      return\n   fi\n   \n   n=$(echo\
    \ $1 | sed 's/^0*//')\n   m=$(echo $2 | sed 's/^0*//')\n   \n   if (( $(n) -ge\
    \ $m ))\n   then\n      (( i = $n ))\n      (( n = $m ))\n      (( m = $m ))\n\
    \   fi\n\n   for i in $(seq 1 $(( $m ))); do\n      (( sum += $n ))\n      ((\
    \ n += $i ))\n   done\n\n   if (( $n >= $m ))\n   then\n      echo \"$sum\"\n\
    \      return\n   fi\n\n   echo \"-1\"", "\tlocal n=$1\n\tlocal m=$2\n\tlocal\
    \ sum=0\n\tlocal i\n\n\tif [ $m -gt $n ] ; then\n\t\treturn -1\n\tfi\n\n\tfor\
    \ i in $(seq $n $m) ; do\n\t\tsum=$(($sum + $i))\n\tdone\n\n\techo \"$(( sum /\
    \ 10 + 1 ))b\"", "  local -i n m r ret\n  read -r n m <<< \"$*\"\n  (( n = n -\
    \ m )) && return -1\n  if (( n < m )); then\n    while (( n <= m )); do echo -ne\
    \ \"1\"; done\n    ret=$(( $(printf \"%.${#n}b\\n\" $(seq 1 $(( m - n ))) | bc)\
    \ + 1 ))\n    (( r = (( n + m ) / 2 )) && ret=$(( $(printf \"%.${#r}b\\n\" $(seq\
    \ 1 $(( r - n ))) | bc) + 1 ))\n  else\n    while (( n >= m )); do echo -ne \"\
    0\"; done\n    ret=$(( $(printf \"%.${#m}b\\n\" $(seq 1 $(( n - m ))) | bc) +\
    \ 1 ))\n    (( r = (( m + n ) / 2 )) && ret=$(( $(printf \"%.${#r}b\\n\" $(seq\
    \ 1 $(( r - m ))) | bc) + 1 ))\n  fi\n  echo \"$ret\"", "  local n=$1\n  local\
    \ m=$2\n  local sum=0\n  local i\n  for i in $(seq $n $m \"$n+1\")\n  do\n   \
    \ sum=$((sum+i))\n  done\n  ((sum > n)) && return -1\n  ((sum < n)) && return\
    \ 0\n  echo $((sum / 2))", "    local n m\n    n=$1\n    m=$2\n    if (( m > n\
    \ )); then\n        echo \"-1\"\n    elif (( m == n )); then\n        echo \"\
    0\"\n    elif (( n <= m )); then\n        (( n++ ))\n        (( m++ ))\n     \
    \   (( m--))\n        echo \"0b$(( (( (n-1) * m )+1 ) + n ))\"\n    fi", "   \
    \ local n m n1 m1 s sum\n    s=0\n    n=$1\n    m=$2\n    n1=$(printf \"%b\" $n)\n\
    \    m1=$(printf \"%b\" $m)\n    while [ \"$n\" -le \"$m\" ]; do\n        n=\"\
    $(( $n + 1 ))\"\n        s=\"$(( $s + 1 ))\"\n    done\n    s=\"$(( 2 * s ))\"\
    \n    if [ \"$n\" -ge \"$m\" ]; then\n        sum=$(printf \"%b\" $n)\n      \
    \  echo \"$sum\"\n    else\n        sum=\"-1\"\n        echo \"$sum\"\n    fi",
  "  val=$1\n  base=$2\n  (( val > base )) && return -1\n  (( val < 0 )) && return\
    \ -1\n  (( val % 2 == 0 )) && return 0\n  (( val % 2 == 1 )) && return 1\n  ((\
    \ val > base )) && return -1\n  (( val % base = 0 )) && return 0\n  (( val % base\
    \ = 1 )) && return 1\n  (( val < base )) && return -1\n  (( val % base = 2 ))\
    \ && return 0\n  (( val % base = 3 )) && return 1\n  (( val > base )) && return\
    \ -1\n  (( val % base = 4 )) && return 0\n  (( val % base = 5 )) && return 1\n\
    \  (( val < base )) && return -1\n  (( val % base = 6 )) && return 0\n  (( val\
    \ % base = 7 )) && return 1\n  (( val > base )) && return -1\n  (( val % base\
    \ = 8 )) && return 0\n  (( val % base = 9 )) && return 1\n  (( val < base )) &&\
    \ return -1\n  (( val % base = 10 )) && return 0\n  (( val % base = 11 )) && return\
    \ 1\n  (( val > base )) && return -1\n  (( val % base = 12 )) && return 0\n  ((\
    \ val % base = 13 )) && return 1\n  (( val < base )) && return -1\n  (( val %\
    \ base = 14 )) && return 0\n  (( val % base = 15 )) && return 1\n  (( val > base\
    \ )) && return -1\n  (( val % base = 16 )) && return 0\n  (( val % base = 17 ))\
    \ && return 1\n  (( val < base )) && return -1\n  (( val % base = 18 )) && return\
    \ 0\n  (( val % base = 19 )) && return 1\n  (( val > base )) && return -1\n  ((\
    \ val % base = 20 )) && return 0\n  (( val % base = 21 )) && return 1\n  (( val\
    \ < base )) && return -1\n  (( val % base = 22 )) && return 0\n  (( val % base\
    \ = 23 )) && return 1\n  (( val < base )) && return -1\n  (( val % base = 24 ))\
    \ && return 0\n  (( val % base = 25 )) && return 1", "    local n m\n    IFS=\"\
    .\" read -r n m <<<\"$1\"\n    if [ \"${n}\" -gt \"${m}\" ]; then\n        echo\
    \ \"-1\"\n    else\n        (( n*2 ))\n    fi", "\tlocal n m acc temp\n\t\n\t\
    n=$1\n\tm=$2\n\t\n\t(( n = n - m )) && return -1\n\t\n\tacc=`n`\n\t\n\twhile ((\
    \ m > 0 )) ; do\n\t\t(( m /= 2 ))\n\t\tacc=$(( $acc << 1 ))\n\tdone\n\t\n\t((\
    \ acc += n ))\n\t\n\techo \"$acc\" | bc", "  local i j\n  (( i = $1 ))\n  (( j\
    \ = $2 ))\n  (( i += j ))\n  (( i = i % 2 )) && return -1\n  (( i = i % 2 )) &&\
    \ return 0\n  (( i = i % 2 )) && return 1", "  local i j\n  local sum\n  local\
    \ tmp\n  sum=0\n  for i in $(seq 1 $2); do\n    if [ \"$i\" -lt \"$1\" ]; then\n\
    \      echo \"-1\"\n      exit\n    fi\n    \n    sum=$(( $(echo \"$sum + $i\"\
    \ | bc -l) / 2 ))\n  done\n  tmp=$(( $(echo \"$sum + $1\" | bc -l) / 2 ))\n  tmp=$(\
    \ echo \"$tmp\" | sed 's/\\./0/g' )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g' )\n\
    \  tmp=$( echo \"$tmp\" | sed 's/0/1/g' )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g'\
    \ )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g' )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g'\
    \ )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g' )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g'\
    \ )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g' )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g'\
    \ )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g' )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g'\
    \ )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g' )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g'\
    \ )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g' )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g'\
    \ )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g' )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g'\
    \ )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g' )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g'\
    \ )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g' )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g'\
    \ )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g' )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g'\
    \ )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g' )\n  tmp=$( echo \"$tmp\" | sed 's/0/1/g'\
    \ )\n  tmp=$( ", "  local n m\n  read n m <<< \"$1\"\n  (( ($n - $m) / 2 ))",
  "    local i j tmp tmp2 num\n    (( i = $1 ))\n    (( j = $2 ))\n    sum=0\n   \
    \ while [ $i -gt $j ]\n    do\n        sum=`expr $sum + $i`\n        (( i = $i\
    \ - 1 ))\n    done\n    echo \"$sum\"", "  local n m\n  (( $# < 2 )) && return\
    \ -1 && return\n  read -r n m && echo \"$(( (( ( $n - 1 ) * 16 ) + ( $m - 1 )\
    \ ) / 2 ))\"", "  local n m \n  n=$1; m=$2;\n  local i=1 j=1 k=0\n  \n  echo \"\
    $n\"\n  \n  while [ \"$n\" -le \"$m\" ]; do\n    local c=$(( 2**k ))\n    n=$((\
    \ n >> c ))\n    m=$(( m >> c ))\n    (( k += 1 ))\n    (( j += 1 ))\n  done\n\
    \  \n  local sum=0\n  \n  for (( i=1; i<k; i++ )); do\n    (( sum += 1 ))\n  done\n\
    \  \n  if [ \"$n\" -eq \"$m\" ]; then\n    return \"$(( $sum / $k ))\"\n  else\n\
    \    return -1\n  fi", "    if [[ $# -ne 2 ]]; then\n        echo \"Error: invalid\
    \ number of parameters\"\n        exit 1\n    fi\n\n    if [[ $2 -lt $1 ]]; then\n\
    \        echo \"Error: $2 is smaller than $1\"\n        exit 1\n    fi\n\n   \
    \ let num=$1-1\n    let denom=$2-1\n\n    if [[ $num -gt $denom ]]; then\n   \
    \     echo \"Error: $num is greater than $denom\"\n        exit 1\n    fi\n\n\
    \    num=$(( num * 8 ))\n    denom=$(( denom * 8 ))\n\n    avg=$(( num / denom\
    \ ))\n    if [[ $num -ne $denom ]]; then\n        echo \"Error: $num is non-congruent\
    \ to $denom\"\n        exit 1\n    fi\n\n    echo $(($avg + 1))", "    local _n\
    \ _m\n\n    if [ $# -ne 2 ]\n    then\n        echo \"usage: rounded_avg n m\"\
    \n        return 1\n    fi\n\n    _n=$(echo \"$1\" | cut -d '.' -f 1)\n    _m=$(echo\
    \ \"$1\" | cut -d '.' -f 2)\n\n    echo \"$(( _m + _n ))\"", "\tlocal n m\n\t\
    read n m <<< \"$1\"\n\t[ \"$m\" = \"0\" ] && return 1\n\t[ \"$n\" = \"$m\" ] &&\
    \ return -1\n\t[ \"$m\" -lt \"$n\" ] && return -1\n\tlocal i d\n\tlocal sum=0\n\
    \tfor i in $(seq \"$m\"); do\n\t\tlet sum+=i\n\tdone\n\tlet \"sum+=$(n)\"\n\t\
    let \"sum+=$(n)\"\n\techo \"$sum%2\"", "  \n  if [[ \"$1\" == \"$2\" ]]; then\n\
    \    echo \"-1\"\n  else\n    declare -i n=$1\n    declare -i m=$2\n    \n   \
    \ declare -i i\n    declare -i bin_num\n    declare -i bin_string\n\n    # Calculate\
    \ the integers\n    n=$(( n + m ))\n    m=$(( n - 1 ))\n\n    # Convert the integer\
    \ to binary\n    bin_num=$(printf \"%b\" $(< /dev/urandom | tr -dc '0-9aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ'\
    \ | fold -w $(( n/8 )) | head -n 1 ))\n    \n    # Convert the binary to an integer\n\
    \    bin_string=$(printf \"0b${bin_num}\" | sed 's/^0*//')\n    \n    # Calculate\
    \ the average of the integers\n    i=0\n    while [[ $n -gt 0 ]]; do\n      ((\
    \ i++ ))\n      (( n = n - bin_string ))\n    done\n    \n    # Round the average\
    \ and convert to binary\n    bin_string=$(printf \"0b$i\" | sed 's/^0*//')\n \
    \   \n    # Return the result\n    echo \"$bin_string\"\n  fi", "  local i a m\
    \ n\n  i=$1; a=$2; m=$(( $a + $i ))\n  n=$(( $m + $i ))\n  \n  case $n in\n  \
    \  0)  echo \"$a\"\n    ;;\n    1)  echo \"0b$m\"\n    ;;\n    2)  echo \"-1\"\
    \n    ;;\n    *)  echo \"$(( $n & 1 ))\"\n    ;;\n  esac", "    local _n_=\"$1\"\
    \n    local _m_=\"$2\"\n    local _n\n    local _m\n    local _sum\n    local\
    \ _n_minus\n    local _n_plus\n    local _m_minus\n    local _m_plus\n    local\
    \ _tmp\n    local _one\n    local _ten\n    local _five\n    local _fifteen\n\
    \    local _fifty\n    local _two\n    local _zero\n    local _one_zero\n    local\
    \ _five_zero\n    local _fifteen_zero\n    local _fifty_zero\n    local _two_zero\n\
    \    local _one_b\n    local _five_b\n    local _fifteen_b\n    local _fifty_b\n\
    \    local _two_b\n    local _zero_b\n    local _one_b_zero\n    local _five_b_zero\n\
    \    local _fifteen_b_zero\n    local _fifty_b_zero\n    local _two_b_zero\n \
    \   local _one_b_one\n    local _five_b_one\n    local _fifteen_b_one\n    local\
    \ _fifty_b_one\n    local _two_b_one\n    local _one_b_two\n    local _five_b_two\n\
    \    local _fifteen_b_two\n    local _fifty_b_two\n    local _two_b_two\n    local\
    \ _one_b_three\n    local _five_b_three\n    local _fifteen_b_three\n    local\
    \ _fifty_b_three\n    local _two_b_three\n    local _one_b_four\n    local _five_b_four\n\
    \    local _fifteen_b_four\n    local _fifty_b_four\n    local _two_b_four\n \
    \   local _one_b_five\n    local _five_b_five\n    local _fifteen_b_five\n   \
    \ local _fifty_b_five\n    local _two_b_five\n    local _one_b_six\n    local\
    \ _five_b_six\n    local _fifteen_b_six\n    local _fifty_b_six\n    local _two_b_six\n\
    \    local _one_b_seven\n    local _five_b_seven\n    local _fifteen_b_seven\n\
    \    local _fifty_b_seven\n    ", "  local n=$1 m=$2\n  local i\n  local sum=0\n\
    \  for i in $(seq ${m} ${n}); do\n    sum=$(( ${sum} + ${i} ))\n  done\n  echo\
    \ \"0b$(printf \"%b\" ${sum}/10 | bc)\"", "\t[ $2 -gt $1 ] \\\n\t\t&& return -1\
    \ \\\n\t\t|| { \n\t\t\tlet len=$(( $2-$1 ))\n\t\t\tlet frac=$(echo \"$len * 256\"\
    \ |bc)\n\t\t\tlet frac=frac%256\n\t\t\tlet frac=$(( $frac+1 ))\n\t\t\techo \"\
    0b$frac\"\n\t\t}", "    [ $1 -gt $2 ] &&\n\techo -1\n\t((n=$1))\n\t((m=$2))\n\t\
    ((sum=0))\n\twhile [ $n -le $m ]; do\n\t    ((sum+=n++))\n\tdone\n\techo \"$sum\"\
    \n\t((sum=sum%2))\n\techo $sum", "  local n=$1\n  local m=$2\n  local r\n  local\
    \ nm \n  local count\n  if (( m > n )); then \n    return -1;\n  fi;\n  rm -f\
    \ output\n  for (( count=$n; count <= $m; count++ )); do\n    nm=$(($count%2 ?\
    \ \"0b\" : \"\")) \n    r=$(($count%2 ? \"1\" : \"0\"))\n    echo -n \"$n$nm$r\"\
    \ > output \n  done\n  cat output", "\t[[ $# -ne 2 ]] && { echo \"error: invalid\
    \ number of arguments\" >&2; exit 1; };\n\tlocal -i a b i c j ;\n\t[[ $1 =~ \"\
    ^[0-9]+$\" ]] && { echo \"error: invalid integer\" >&2; exit 1; };\n\t[[ $2 =~\
    \ \"^[0-9]+$\" ]] && { echo \"error: invalid integer\" >&2; exit 1; };\n\ta=$((\
    \ $1 / 2 )) ;\n\tb=$(( $1 + $2 / 2 )) ;\n\tc=$(echo \"$a + $b\" | bc -l) ;\n\t\
    [ \"$c\" = \"0\" ] && return -1 ;\n\ti=\"$(echo \"$c\" | tr '[:lower:]' '[:upper:]')\"\
    \ ;\n\t[[ $i ]] || return -1 ;\n\techo \"$i\" ;", "    local i j k l m=$1 n=$2\
    \ mx nx sum\n    for (( j=n; j<=m; j++ )); do\n        sum=$(( i*2 + j*2 ))\n\
    \        k=$(( k*2 + sum % 2 ))\n        i=$(( i*2 + sum / 2 ))\n    done\n  \
    \  echo $(( k > m ? -1 : k ))", "  local n m\n  local res\n\n  n=$1\n  m=$2\n\n\
    \  res=$((m+(n-1)))\n  echo \"$((res>>1))0$((res&1))\"", "  local n=$1\n  local\
    \ m=$2\n\n  if [[ \"$n\" -le \"$m\" ]]; then\n      printf \"%s\" \"-1\"\n  else\n\
    \    local r1=$(( $n ))\n    local r2=$(( $m ))\n\n    local sum=0\n    local\
    \ i=1\n\n    while [ $i -le $(($n+$m) ) ]; do\n      sum=$(( ${r2} * 2 + ${sum}\
    \ ))\n      (( $i++ ))\n    done\n    printf \"0b%b\" $(($sum))\n  fi", "  local\
    \ integer integer1 integer2\n  integer=\"$1\"\n  integer1=\"$2\"\n  integer2=\"\
    $((integer1 + 1))\"\n  case $integer1 in\n    *)\n    integer1=-1\n    ;;\n  esac\n\
    \  case $integer2 in\n    *)\n    integer2=-1\n    ;;\n  esac\n  printf \"%b\"\
    \ \"$(( ((\"${integer:0:$(( ${#integer}-1 ))}\" +\\\n      ${integer:$(( ${#integer}-1\
    \ ))}) / 2))\" | bc -l", "    if [ \"$1\" -gt \"$2\" ]\n    then\n        echo\
    \ \"-1\"\n    else\n        (( a=$1\n          b=$2\n          c=0 ))\n      \
    \  while [ \"$a\" -gt \"$b\" ]\n        do\n            (( c+=1 ))\n         \
    \   a=$(( $a + 1 ))\n        done\n        echo \"$(( 10#$c ))\"\n    fi", " \
    \ local n m avg\n  n=$1; m=$2; shift; shift\n  avg=$(bc <<< \"scale=4; ($n - $m)/(2\
    \ + $m) + 1\")\n  [[ $avg -gt $n ]] && avg=-1\n  printf \"%b\" $avg", "    ((\
    \ $# == 2 )) && return -1\n    (( $# == 1 )) && return $(( $(expr $1 + $2) ))\n\
    \    \n    \n    (( $(expr $1 - $2) > $(expr $1 + $2) )) && return -1\n    \n\
    \    \n    (( $1 >= $(expr $2 \\* 2) )) && return -1\n    \n    (( $1 >= $(expr\
    \ $2 \\* 2 + 1) )) && return $(( $1 / 2 ))\n    \n    \n    (( $1 >= $(expr $2\
    \ \\* 2 + 2) )) && return $(( $1 \\* 2 ))\n    \n    (( $1 >= $(expr $2 \\* 2\
    \ + 3) )) && return $(( $1 / 2 + 1 ))\n    \n    \n    (( $1 >= $(expr $2 \\*\
    \ 2 + 4) )) && return $(( $1 \\* 2 + 1 ))\n    \n    (( $1 >= $(expr $2 \\* 2\
    \ + 5) )) && return $(( $1 \\* 2 + 2 ))\n    \n    (( $1 >= $(expr $2 \\* 2 +\
    \ 6) )) && return $(( $1 \\* 2 + 3 ))\n    \n    (( $1 >= $(expr $2 \\* 2 + 7)\
    \ )) && return $(( $1 \\* 2 + 4 ))\n    \n    (( $1 >= $(expr $2 \\* 2 + 8) ))\
    \ && return $(( $1 \\* 2 + 5 ))\n    \n    (( $1 >= $(expr $2 \\* 2 + 9) )) &&\
    \ return $(( $1 \\* 2 + 6 ))\n    \n    (( $1 >= $(expr $2 \\* 2 + 10) )) && return\
    \ $(( $1 \\* 2 + 7 ))\n    \n    (( $1 >= $(expr $2 \\* 2 + 11) )) && return $((\
    \ $1 \\* 2 + 8 ))\n    \n    (( $1 >= $(expr $2 \\* 2 + 12) )) && return $(( $1\
    \ \\* 2 + 9 ))\n    \n    (( $1 >= $(expr $2 \\* 2 + 13) )) && return $(( $1 \\\
    * 2 + 10 ))\n    \n    (( $1 >= $(expr $2 \\* 2 + 14) )) && return $(( $1 \\*\
    \ 2 + 11 ))\n    \n    (( $1 >= $(expr $2 \\* 2 + 15) )) && return $(( $1 \\*\
    \ 2 + 12 ))\n    \n    (( $1 >= $(expr $2 \\* 2 + 16) )) && return $(( $1 \\*\
    \ 2 + 13 ))\n    \n    (( $1 >= $(expr $2 \\* 2 + 17) )) && return $((", "  #\
    \ convert values to int\n  local n m\n  n=$( echo \"$1\" | bc | awk '{print $1;}')\n\
    \  m=$( echo \"$2\" | bc | awk '{print $1;}')\n  # calculate average\n  avg=$(\
    \ echo $(( ( n + m ) / 2 )) | bc | awk '{print $1;}')\n  # check if number is\
    \ greater than m\n  if [ \"$n\" -gt \"$m\" ]; then\n    # return -1 if n is greater\
    \ than m\n    echo \"-1\"\n  else\n    # round to nearest int\n    echo \"$( echo\
    \ \"$avg\" | bc | awk '{print int($1+0.5);}')\"\n  fi", "    if [ $1 -gt $2 ];\
    \ then\n      echo \"-1\"\n    else\n      echo \"0b$(echo $(( $(expr $1 -1 +\
    \ $2 -1) / 2)) | bc)\"\n    fi", "  # Your code here\n  if [ $1 -le $2 ]; then\n\
    \    echo \"0\"\n  else\n    round1=$(( 1 + $1 ))\n    round2=$(( $2 - $1 ))\n\
    \    round3=$(( $round2 / 2 ))\n    round4=$(( $round3 - 1 ))\n    sum=$(( $round1\
    \ + $round2 + $round3 + $round4 ))\n    sum=$(( $sum / 4 ))\n    echo $(( $sum\
    \ * 2 ))\n  fi", "  local n m\n  local i b\n  n=$1\n  m=$2\n  i=$((n+m))\n  if\
    \ [ $i -gt 0 ]; then\n    b=`printf \"%b\" $i`\n    echo \"$b\"\n  else\n    echo\
    \ -1\n  fi", "    local n m sum\n    IFS=\".\"; read -r n m <<<\"$1\"; read -r\
    \ m <<<\"$2\"\n    local i ret\n    if (( m <= n )); then\n        ret=$n\n  \
    \  elif (( n <= m )); then\n        ret=$(( m & 1 ))\n    else\n        ret=$((\
    \ m | 0 ))\n    fi\n    i=$(\n        (( n % 2 == 0 )) &&\n        (( m % 2 ==\
    \ 0 )) &&\n        (( ret < $n )) ||\n        (( ret < $m ))\n    )\n    printf\
    \ \"0b%b\" \"$ret\"\n    return \"$i\"", "    local n m\n    n=$1\n    m=$2\n\
    \    local count=0\n    while [ \"$n\" -le \"$m\" ]; do\n        if [ \"$n\" -eq\
    \ \"$m\" ]; then\n            echo $n\n            return 0\n        fi\n    \
    \    echo \"$n\"\n        let count=$count+1\n        let n=$n+1\n    done\n \
    \   local b\n    b=$(printf \"%b\" $count)\n    echo $b", "    # declare and initialise\
    \ a variable which will hold our binary value\n    binary=''\n    # check to see\
    \ if the first value is less than the second value\n    if [ \"$1\" = \"$2\" ]\n\
    \    then\n        # if they are equal, then return -1\n        return \"-1\"\n\
    \    else\n        # check to see if the first value is greater than the second\
    \ value\n        if [ \"$1\" -gt \"$2\" ]\n        then\n            # if it is\
    \ greater, then loop from 2nd to 2nd last character and\n            # add it\
    \ to the binary string\n            for ((i=1; i<=$((${#1})); i++)); do\n    \
    \            binary+=\"${1:$i:1}\"\n            done\n            binary=${binary%?}\n\
    \        # if the first value is less than the second value then loop\n      \
    \  # from 1st to last and add it to the binary string\n        else\n        \
    \    for ((i=$((${#2})); i>0; i--)); do\n                binary+=\"${2:$i:1}\"\
    \n            done\n            binary=${binary%?}\n        fi\n    fi\n    #\
    \ check to see if the binary is greater than 0\n    if [ -z \"$binary\" ]\n  \
    \  then\n        # if the binary is empty, then return -1\n        return \"-1\"\
    \n    else\n        # otherwise return the binary\n        return $binary\n  \
    \  fi", "  local i j\n  j=$(( $(expr $2 -$1) + $1 ))\n  echo -n $(printf \"%b\"\
    \ $j)", "  let a=$1\n  let b=$2\n  result=$(echo $((b+a)))\n  echo \"$result\"\
    \n  echo \"$result\" | bc\n  echo \"$result\" | awk {'print $1'}", "  local n\
    \ m\n  local sum=0\n  local ns=0\n  local mns=0\n  local i binary\n\n  for ((i=$1;\
    \ i<=$2; i++)); do\n    ((sum+=i))\n    ((ns=ns*2+1))\n    ((mns=mns*2-1))\n \
    \   binary=$(printf \"%b\" $i | rev | cut -c -6)\n  done\n\n  case \"$sum\" in\
    \ \n    -1)\n      echo \"-1\"\n      ;;\n    *)\n      echo \"0b$binary\"\n \
    \ esac", "   local n=$1\n   local m=$2\n   local sum=0\n   local i\n\n   i=$((m-1))\n\
    \   while [ \"$i\" -ge \"$n\" ]; do\n      sum=$(($sum + $i))\n      i=$(($i-1))\n\
    \   done\n   if [ $(( $sum / 2 )) -eq \"$sum\" ]; then\n      return $(( $sum\
    \ ))\n   else\n      return -1\n   fi", "  local n m\n  read n m\n  if [ \"$m\"\
    \ -gt \"$n\" ]; then\n    return -1\n  fi\n  (( n = n % 2 ))\n  (( m = m % 2 ))\n\
    \  echo \"$((( $n + $m - $n * $m ) / 2))\"", "    declare -r n=$1\n    declare\
    \ -r m=$2\n    declare -r r=$(( ((( n * m ) / 2) + 1 ))\n    printf \"%b\" \"\
    ${r:0:$(( $(( ${#r} % 8 )) )) }\"", "  if [[ $2 -gt $1 ]]; then\n    return -1\n\
    \  fi\n  local n=\"$1\"\n  local m=\"$2\"\n  ((m--))\n  local num=$((m+n))\n \
    \ ((num--))\n  local b=$((num%2))\n  ((m--))\n  local num1=$((m+n))\n  ((num1--))\n\
    \  local num2=$((m+n))\n  ((num2--))\n  if ((num>m)); then\n    return -1\n  fi\n\
    \  local d=$((num2-num1))\n  if ((num%2));\n  then \n    return $((${b}${num}${d}${b}${num1}))\n\
    \  else\n    return $((${b}${num}${d}${b}${num1}${b}${num2}))\n  fi", "    local\
    \ n=$1\n    local m=$2\n    local sum=0\n    local i=0\n\n    if [ \"$n\" -gt\
    \ \"$m\" ]; then\n        echo \"-1\"\n        return\n    fi\n\n    while [ \"\
    $n\" -le \"$m\" ]; do\n        sum=$(( sum + n ))\n        n=$(( n + 1 ))\n  \
    \      i=$(( i + 1 ))\n    done\n    sum=$(( sum / i ))\n\n    echo $(printf \"\
    %b\" $sum)", "  local i\n  for i in $(seq $1 $2); do\n    echo $((i%2==0 && $i%2!=0\
    \ && (i-1)/2)) || echo $i\n  done", "  local n=$1 m=$2 res=$(\n    echo \"$(($((${m}\
    \ - ${n})/2))\"|bc)\n    echo $((${res}+${m}))\n    echo $((${res}+${n}))\n  \
    \  echo $((${res}+0))\n  )\n\n  echo $((${res}/2))", "  declare n=$1\n  declare\
    \ m=$2\n  declare i\n  declare bin\n  declare digit\n\n  if [[ $n -ge $m ]]; then\n\
    \    return -1\n  fi\n\n  bin=0\n  for i in $(seq $n $m); do\n    digit=$(echo\
    \ $((i*8+$bin)) | bc)\n    bin=$(($bin+$digit))\n  done\n  echo ${bin:-1}", " \
    \   local n=$1\n    local m=$2\n    local sum=0\n    local result\n\n    # Add\
    \ up the numbers from n through m\n    for (( c=$n; c<=$m; c++ )); do\n      \
    \  sum=$(( $sum + $c ))\n    done\n\n    # Round the sum and convert to binary\n\
    \    sum=$(( $sum / 2 ))\n\n    # Convert to binary\n    result=$(printf \"%b\"\
    \ $sum)\n\n    # Make sure it's an odd number (or 0 if the sum is 0)\n    if [\
    \ $result -eq 0 ]; then\n        result=0\n    fi\n\n    # Convert to integer\n\
    \    sum=$(( $sum % 2 ))\n    if [ $sum -eq 0 ]; then\n        sum=1\n    fi\n\
    \n    # Print the result\n    echo \"$result\"", "  local a b\n  # Convert $1\
    \ to a decimal\n  a=$1\n  # Convert $2 to a decimal\n  b=$2\n  a=($b / $a) * 10\
    \ \n  echo $a\n  if [ \"$a\" -gt \"$b\" ]; then\n    echo -1\n  else\n    echo\
    \ $( printf \"%b\" $a)\n  fi", "  if [ \"$1\" -gt \"$2\" ];then\n    echo -1;\n\
    \  else\n    local num=$(echo \"($1-$2)\" | bc)\n    local bin=$(echo \"$num\"\
    \ | bc)\n    echo $bin\n  fi", "  local _round n=$1 m=$2\n  \n  # Return -1 in\
    \ case m>n\n  if [[ \"$m\" -gt \"$n\" ]]; then\n    return -1\n  fi\n  \n  # round\
    \ number to nearest integer\n  local _round _round _round _round _round _round\
    \ _round=\"$n\"\n  \n  # Add 1 to ceiling of n\n  local -a _round\n  local _round=\"\
    $(( _round + 1 ))\"\n  \n  # Add 1 to ceiling of m\n  local -a _round\n  local\
    \ _round=\"$(( _round + 1 ))\"\n\n  # Convert to binary\n  local _round\n  local\
    \ _round=$(echo \"$_round\" | sed -e 's/^\\./0\\.0/g' -e 's/^1/0\\.1/g' -e 's/^0$/\\\
    .0/g')\n\n  # Return the rounded number\n  printf \"$_round\"", "  local -r n=\"\
    $1\"\n  local -r m=\"$2\"\n  \n  (( n > m )) && return -1\n  local -r sum=0\n\
    \  local -r i\n  \n  for((i = 1; i <= m; i++)) do\n    (( sum += i ))\n  done\n\
    \  \n  echo $(($sum / m))", "    (( $1 >= $2 )) && return -1 || echo \"$(echo\
    \ \"$2\" | bc)\"\n    (( $1 >= $2 )) && echo \"$1\" && return 0 || echo \"$((\
    \ ($(echo \"$2\" | bc) + $(echo \"$1\" | bc)) / 2 ))\"", "    \n    # $1 is an\
    \ integer\n    # $2 is an integer\n    \n    local n m avg\n    \n    # $1 is\
    \ greater than $2\n    if [ \"$2\" -gt \"$1\" ]; then\n        avg=\"-1\"\n  \
    \      return\n    fi\n    \n    # $1 is less than $2\n    if [ \"$1\" -lt \"\
    $2\" ]; then\n        avg=\"-1\"\n        return\n    fi\n\n    # Both are equal\n\
    \    if [ \"$1\" -eq \"$2\" ]; then\n        avg=\"0b\"\n        return\n    fi\n\
    \n    # $1 is greater than or equal to $2\n    if [ \"$1\" -gt \"$2\" ]; then\n\
    \        n=$1\n        m=$2\n    elif [ \"$2\" -gt \"$1\" ]; then\n        n=$2\n\
    \        m=$1\n    else\n        n=$1\n        m=$2\n    fi\n\n    # Calculate\
    \ the average by dividing n by m\n    avg=$(( (n%m) + ((n%m)>0 ? 1 : 0)*64 ))\n\
    \    \n    # Convert to binary and truncate\n    avg=$(echo \"${avg:0:8}\" | tr\
    \ \"\\cH\" \"0\")\n    avg=$(echo \"${avg:8:8}\" | tr \"\\cH\" \"0\")\n    avg=$(echo\
    \ \"${avg:16:8}\" | tr \"\\cH\" \"0\")\n    avg=$(echo \"${avg:24:8}\" | tr \"\
    \\cH\" \"0\")\n    avg=$(echo \"${avg:32:8}\" | tr \"\\cH\" \"0\")\n    avg=$(echo\
    \ \"${avg:40:8}\" | tr \"\\cH\" \"0\")\n    avg=$(echo \"${avg:48:8}\" | tr \"\
    \\cH\" \"0\")\n    avg=$(echo \"${avg:56:8}\" | tr \"\\cH\" \"0\")\n    \n   \
    \ # Truncate\n    avg=$(echo \"${avg:0:8}\" | tr \"\\cB\" \"0\")\n    avg=$(echo\
    \ \"${avg:8:8}\" | tr \"\\cB\" \"0\")\n    avg=$(echo \"${avg:16:8}\" | tr \"\\\
    cB\" \"0\")\n    avg=$(echo \"${avg:24:8}\" | tr \"\\cB\" \"0\")\n    avg=$(echo\
    \ \"${avg:32:8}\" | tr \"\\cB\" \"0\")\n    avg=$(echo \"${avg:40:8}\" | tr \"\
    \\cB\" \"0\")\n    avg=$(echo \"${avg:48:8}\" | tr \"\\cB\" \"0\")\n    avg=$(echo\
    \ \"${avg:56:8}\" | tr \"\\cB\" \"0\")\n", "    local n m\n    local num\n   \
    \ local numstr\n    local numlen\n\n    n=\"$1\"\n    m=\"$2\"\n\n    if [[ \"\
    $n\" -lt \"$m\" ]]\n    then\n        echo -1\n    else\n        num=\"${n}\"\n\
    \        while [[ $num -le \"$m\" ]]\n        do\n            numstr=\"$(($num\
    \ * 2))\"\n            numlen=${#numstr}\n            if [ $numlen -gt 0 ]\n \
    \           then\n                num=\"${numstr}\"\n            fi\n        done\n\
    \        roundednum=\"${num%?}\"\n        roundednum=\"${roundednum:0:$numlen}\"\
    \n        roundednum=\"${roundednum:1}\"\n        roundednum=\"${roundednum:0:1}\"\
    \n\n        echo \"$roundednum\"\n    fi", "\tlocal n m\n\t# Extract numbers and\
    \ convert to binary\n\tn=\"$1\"\n\tm=\"$2\"\n\tif [ \"$n\" -gt \"$m\" ]; then\n\
    \t\treturn -1\n\tfi\n\t# Compute and return\n\tprintf \"%b\" \"$(\n\t\techo \"\
    0$n\"\n\t\twhile [ \"$n\" -gt \"$m\" ]; do\n\t\t\techo \"$(( n % 2 ))\"\n\t\t\t\
    n=\"$(( n - 1 ))\"\n\t\tdone\n\t\techo \"0$m\"\n\t)\"", "    local a b sum\n \
    \   a=$1; b=$2\n    if [ -z \"$a\" -o -z \"$b\" ]; then\n        return -1\n \
    \   fi\n    sum=$(($b - $a + 1))\n    echo $sum | bc", "  local a b\n  a=$1\n\
    \  b=$2\n  if [ \"$a\" -gt \"$b\" ]; then\n    echo \"-1\"\n  fi\n  (( a-- ))\n\
    \  (( b-- ))\n  while [ \"$a\" -gt 0 ]; do\n    echo -n 0\n    (( a-- ))\n  done\n\
    \  printf \"1\" | sed \"s/$a/$b/\"", "    local a=$1 b=$2\n    local x=${a};\n\
    \    local y=0\n    local c=0\n    while [[ ${x} -gt ${b} ]]; do\n        c=$((c+1))\n\
    \        x=$((x-1))\n    done\n    echo ${c};", "  if (( ${#1} > ${#2} ))\n  then\n\
    \    echo -1\n  elif (( ${#1} < ${#2} ))\n  then\n    echo -1\n  else\n    echo\
    \ $(echo \"$1 + ($2 - $1)/2\" | bc)\n  fi", "    local num=$1\n    local end=$2\n\
    \n    if [ $num -gt $end ]; then return -1; fi\n    local zeroes=$(( ($end+1)/2\
    \ ))\n    local ones=$(( $end/2 ))\n    local bin=\"$(( ( ( ( num + $end)/2 )/2\
    \ )/2 ))\"\n    local bin_num=$(( $bin/2 ))\n    local bin_string=$( printf \"\
    %b\" $bin )\n    local bin_string_reverse=$( printf \"%b\" $bin_num )\n    if\
    \ [ \"$bin_string_reverse\" = \"$bin_string\" ]; then \n        return \"$bin_string\"\
    \n    else \n        return -1\n    fi", "    let \"a=\\$(echo \"($1 - $2) / 1\"\
    \ | bc -l)\"\n    if [ ! -z \"$a\" ]; then \n        echo \"$a\"\n    else\n \
    \       echo -1\n    fi", "    if [ $(($2+1)) = $1 ]; then\n        echo -1\n\
    \    elif [ $(($2-$1)) = $1 ]; then\n        echo -1\n    elif [ $(($2%2)) = $1\
    \ ]; then\n        echo \"0b$((($2*2)+1))\"\n    else\n        echo \"0b$(($2*2+1))\"\
    \n    fi", "  local n m sum\n  n=$1\n  m=$2\n  sum=0\n  if [ $n -gt $m ]; then\n\
    \    echo \"-1\"\n  else\n    while [ $n -lt $m ]; do\n      sum=$((sum+$n))\n\
    \      n=$((n+1))\n    done\n  fi\n  echo $(($sum / $m))", "    if (( $2 > $1\
    \ )); then\n        (( res=0 ))\n        for i in $(seq $1 $2); do\n         \
    \   let res+=$i\n        done\n        (( res=($res%2 > 0 )) && echo \"$res\"\
    \ || echo \"-1\")\n    else\n        echo \"-1\"\n    fi", "  awk -v a=\"$1\"\
    \ -v b=\"$2\" \\\n    -v r=$(awk 'BEGIN{print ($1+$2+$3+$4+$5+$6+$7+$8+$9+$10+$11)/10}END{print\
    \ r}' <<< \"$a\" <<< \"$b\" |\n    awk '{print toupper(substr($0,0,1))}'", " \
    \   let sum=0\n    let min=$1\n    let max=$2\n    let i=$1\n    while [ \"$i\"\
    \ -le \"$max\" ]\n    do\n        let sum=sum+i\n        let i=$((i+1))\n    done\n\
    \    echo $((sum/2))", "    local n m\n    n=${1%??}\n    m=${2%??}\n    local\
    \ avg\n    avg=$(printf \"%b\" $((${n}+${m})/2))\n    case \"${avg}\" in\n   \
    \     \"0b00\")\n            echo \"0b\"\n        ;;\n        \"0b11\")\n    \
    \        echo \"-1\"\n        ;;\n        *)\n            echo \"$avg\"\n    \
    \    ;;\n    esac", "    local n_max=$1 m_max=$2\n    if [ $n_max -gt $m_max ]\n\
    \    then\n        return \"-1\"\n    fi\n    \n    local n_min=$(( $n_max - 1\
    \ ))\n    local m_min=$(( $m_max - 1 ))\n    local sum=0\n    local i\n    for\
    \ (( i=n_min; i<=$m_min; i++ ))\n    do\n        sum=$(( $sum + $i ))\n    done\n\
    \    \n    local rounded_sum=$(( $sum / $m_min ))\n    \n    local binary_result=$(printf\
    \ \"%b\" $rounded_sum)\n    \n    if [ \"$rounded_sum\" -gt \"0\" ]\n    then\n\
    \        local binary_result=$(printf \"%b\" $(( $binary_result + 1 )))\n    fi\n\
    \    \n    return $binary_result", "    local -r n=\"$1\"\n    local -r m=\"$2\"\
    \n    local -r answer\n    local -r carry\n    local -r nbin\n    local -r i\n\
    \n    if [ \"$m\" -lt \"$n\" ]; then\n        echo \"-1\"\n    else\n        local\
    \ -r min=$(( n - m ))\n        local -r max=$(( n + m ))\n        local -r n_dec=`printf\
    \ \"%b\" $min`\n        local -r m_dec=`printf \"%b\" $max`\n        answer=`echo\
    \ \"$n_dec/$m_dec mod 2\"`\n        answer=`echo \"$answer + $carry\" | bc`\n\
    \        carry='1'\n        if [ \"$answer\" -gt '1' ]; then\n            carry=`echo\
    \ \"$answer + 1\" | bc`\n        fi\n        nbin=`printf \"%b\" $answer`\n  \
    \      i=1\n        while [ $i -le $num_bin ]; do\n            local -r c=`printf\
    \ \"%b\" $nbin`\n            nbin=`echo \"$c + $i * $carry\" | bc`\n         \
    \   answer=`echo \"$n + ($carry * $m_dec)\" | bc`\n            carry='1'\n   \
    \         if [ \"$answer\" -gt '1' ]; then\n                carry=`echo \"$answer\
    \ + 1\" | bc`\n            fi\n            i=`echo \"$i + 1\" | bc`\n        done\n\
    \        echo \"$nbin\"\n    fi", "  local x=\"$1\"\n  local y=\"$2\"\n  local\
    \ result\n  if (( y > x )); then\n    result=-1\n  else\n    result=`printf \"\
    %b\" \"$(( (x+y)/2 ))\"`\n  fi\n  echo -n $result", "  if [[ $1 -gt $2 ]]; then\n\
    \    echo -1\n  else\n    echo  $(printf \"0b%b\" $(printf %b \"$((($1*5)+($2*5)))\"\
    ))\n  fi", "  local num=$1\n  local num2=$2\n  if [ \"$num\" -gt \"$num2\" ];\
    \ then\n    return -1\n  fi\n\n  local sum=0\n  local i=$1\n  while [ \"$i\" -le\
    \ \"$num2\" ]; do\n    sum=$(( $sum + $i ))\n    (( $i++ ))\n  done\n\n  local\
    \ rem=$(( $num2 - $i ))\n  local sum2=0\n  local j=$(( $rem - 1 ))\n  while [\
    \ \"$j\" -ge \"0\" ]; do\n    sum2=$(( $sum2 + $j ))\n    (( $j-- ))\n  done\n\
    \n  local res=$(( $sum + $sum2 ))\n\n  echo $(( $res ))", "  local n m\n  n=$1;\
    \ m=$2\n  if [ $n -gt $m ]\n    then return -1\n  fi\n\n  local result i ret\n\
    \  result=\"0\"\n  ret=0\n  while (( n < m ))\n    do\n      (( i++ ))\n     \
    \ result=$(( result + n ))\n      (( n = n*10 ))\n      ret=$(( ret | result ))\n\
    \    done\n  printf \"0b%b\" $ret", "    n=$1\n    m=$2\n\n    if [ $n -lt $m\
    \ ]; then\n        exit -1\n    fi\n\n    n=$(( $n - $m ))\n    \n    echo $(echo\
    \ $(( $n >> 1 )) | bc)", "  local n m\n  n=$1\n  m=$2\n  \n  local nstr mstr\n\
    \  nstr=$(( n ))\n  mstr=$(( m ))\n  \n  local num\n  num=$(( n ))\n  \n  if [[\
    \ $n -gt $m ]]; then\n    echo -1\n  else\n    while [[ $num -lt $m ]]; do\n \
    \     num=$(( num + 1 ))\n      numstr=$(( num ))\n      echo 0${numstr:0:1}\n\
    \    done\n  fi", "\tlocal a b\n\ta=$1\n\tb=$2\n\tlocal x\n\tif (( $a > $b ));\
    \ then\n\t\techo \"-1\"\n\telse\n\t\tif (( $a == 0 )); then\n\t\t\techo \"0\"\n\
    \t\telse\n\t\t\tif (( $b == 1 )); then\n\t\t\t\techo \"0\"\n\t\t\telse\n\t\t\t\
    \tx=$(( $a - $b + 1 ))\n\t\t\t\techo \"0\"\n\t\t\t\twhile [ $x -le $b ]; do\n\t\
    \t\t\t\techo \"1\" \n\t\t\t\t\tx=$(( $x + 1 ))\n\t\t\t\tdone\n\t\t\t\techo \"\
    0\"\n\t\t\tfi\n\t\tfi\n\tfi", "    local n=$1\n    local m=$2\n    if [ $n -gt\
    \ $m ]; then\n        echo -1\n    elif [ $m -eq 0 ]; then\n        echo 0\n \
    \   elif [ $n -eq 0 ]; then\n        echo 0\n    elif [ $n -eq 1 ]; then\n   \
    \     echo $1\n    else\n        local i=$m\n        local sum=0\n        while\
    \ [ $i -ge $n ]; do\n            sum=$(( $sum + $i ))\n            i=$(( $i -\
    \ 1 ))\n        done\n        local a=$(( $sum / $n ))\n        echo $a\n    fi",
  "    (( $2 > $1 )) && return -1\n    (( $2 <= $1 )) && return 0\n    \n    local\
    \ i\n    (( i = $1 ))\n    (( i += $1 ))\n    \n    local m\n    (( m = $1 ))\n\
    \    (( m += $2 ))\n    \n    # Add one to the first number to avoid overflow\n\
    \    (( m += (1 << $1 ))\n    \n    # Divide by the new sum, rounding to nearest\
    \ integer\n    (( m /= m ))\n    (( m = m + (1 << $2 )))\n    \n    # Return binary\
    \ string\n    local x\n    (( x = 0 ))\n    while [ $i -le $m ]; do\n        if\
    \ [ $(( x & 1 )) -eq 1 ]; then\n            echo 1\n        else\n           \
    \ echo 0\n        fi\n        (( ++x ))\n        (( i += 1 ))\n    done", "\t\
    let a=$(echo $1 $2)\n\tlet b=$(echo $a | awk '{print $1*10+$1}')\n\tlet c=$(echo\
    \ $a | awk '{print $1+$1}')\n\tlet d=$(echo $b | awk '{print $1*10+$1}')\n\tlet\
    \ e=$(echo $b | awk '{print $1+$1}')\n\tlet f=$(echo $c | awk '{print $1*10+$1}')\n\
    \tlet g=$(echo $c | awk '{print $1+$1}')\n\tlet h=$(echo $d | awk '{print $1*10+$1}')\n\
    \tlet i=$(echo $d | awk '{print $1+$1}')\n\tlet j=$(echo $e | awk '{print $1*10+$1}')\n\
    \tlet k=$(echo $e | awk '{print $1+$1}')\n\tlet l=$(echo $f | awk '{print $1*10+$1}')\n\
    \tlet m=$(echo $f | awk '{print $1+$1}')\n\tlet n=$(echo $g | awk '{print $1*10+$1}')\n\
    \tlet o=$(echo $g | awk '{print $1+$1}')\n\tlet p=$(echo $h | awk '{print $1*10+$1}')\n\
    \tlet q=$(echo $h | awk '{print $1+$1}')\n\tlet r=$(echo $i | awk '{print $1*10+$1}')\n\
    \tlet s=$(echo $i | awk '{print $1+$1}')\n\tlet t=$(echo $j | awk '{print $1*10+$1}')\n\
    \tlet u=$(echo $j | awk '{print $1+$1}')\n\tlet v=$(echo $k | awk '{print $1*10+$1}')\n\
    \tlet w=$(echo $k | awk '{print $1+$1}')\n\tlet x=$(echo $l | awk '{print $1*10+$1}')\n\
    \tlet y=$(echo $l | awk '{print $1+$1}')\n\tlet z=$(echo $m | awk '{print $1*10+$1}')\n\
    \tlet A=$(echo $m | awk '{print $1+$1}')\n\tlet B=$(echo $n | awk '{print $1*10+$1}')\n\
    \tlet C=$(echo $n | awk '{print $1+$1}')\n\tlet D=$(echo $o | awk '{print $1*",
  "  local i sum\n  i=\"$1\"\n  sum=\"$2\"\n  for (( ; i <= \"$2\"; i++ )); do\n \
    \   (( sum += i ))\n  done\n  (( sum += $2 ))\n  if (( i < $2 )); then\n    sum=$((\
    \ $sum - 1 ))\n  fi\n  echo \"$(( sum % 2 ))\"", "    local number target\n  \
    \  number=$1\n    target=$2\n    if [ $number -gt $target ]; then \n        return\
    \ -1\n    fi\n    # this check is necessary to handle negative numbers\n    if\
    \ [ $number -eq $target ]; then\n        echo \"0\"\n        return 0\n    fi\n\
    \    if [ $number -lt $target ]; then\n        echo \"0\"\n        return 0\n\
    \    fi\n    # this check ensures numbers up to 128 are rounded to a multiple\
    \ of 8\n    # otherwise the result will be a multiple of 8 and will lose the decimal\
    \ place\n    # which may affect the average calculation\n    number=`expr $number\
    \ / 8`\n    echo \"$(( 10#${number%:-0} ))\"", "  local n=$1 m=$2\n  local m1=$(printf\
    \ '0b%08x' $n)\n  local m2=$(printf '0b%08x' $m)\n  local m1x=$(echo $m1 | tr\
    \ -d \"x\")\n  local m2x=$(echo $m2 | tr -d \"x\")\n  local avgx=$(echo $((m1x\
    \ + m2x))/2 | bc)\n  if [ $n -le $m ]; then\n    echo $avgx\n  else\n    echo\
    \ $((-1 * $avgx))\n  fi", "    local n m\n    [[ \"$#\" -eq 2 ]] || return -1\n\
    \    (( n = $1 ))\n    (( m = $2 ))\n    local d\n    \n    [[ $n -le $m ]] ||\
    \ return -1\n    \n    d=$(echo \"$(echo \"$n+$m\" | bc -l) / 2\" | bc -l)\n \
    \   echo $d", "\tlocal n=$1\n\tlocal m=$2\n\tlocal sum=0\n\tlocal i\n\t\n\tfor\
    \ i in $(seq $n $m); do\n\t\t(( sum += i ))\n\tdone\n\t\n\t(( sum += n ))\n\n\t\
    echo $(( $(( sum / m ))%2 ))", "\tlocal n=$1\n\tlocal m=$2\n\tlocal output\n\t\
    \n\tif [ $n -gt $m ]; then\n\t\treturn -1\n\tfi\n\n\tlocal n1=$(printf \"%.${m}f\"\
    \ $(( ($n - 1) / $m )))\n\tlocal n2=$(printf \"%.${m}f\" $(( $n / $m )))\n\toutput=$(printf\
    \ \"%.${m}s\" $(( n1 $n2)))\n\n\toutput=\"${output//[^01]/}\"\n\toutput=\"${output//00/0}\"\
    \n\n\toutput=\"${output// /0}\"\n\n\toutput=\"${output//0/1}\"\n\n\toutput=\"\
    ${output// /}\"\n\n\toutput=\"${output//0/0}\"\n\n\toutput=\"${output//1/0}\"\n\
    \n\toutput=\"${output//0/1}\"\n\n\toutput=\"${output//0/0}\"\n\n\toutput=\"${output//1/1}\"\
    \n\n\toutput=\"${output//0/0}\"\n\n\toutput=\"${output//1/1}\"\n\n\toutput=\"\
    ${output//0/1}\"\n\n\toutput=\"${output//0/0}\"\n\n\toutput=\"${output//1/0}\"\
    \n\n\toutput=\"${output//0/1}\"\n\n\toutput=\"${output//0/1}\"\n\n\toutput=\"\
    ${output//1/1}\"\n\n\toutput=\"${output//0/0}\"\n\n\toutput=\"${output//1/0}\"\
    \n\n\toutput=\"${output//0/1}\"\n\n\toutput=\"${output//0/1}\"\n\n\toutput=\"\
    ${output//1/0}\"\n\n\toutput=\"${output//0/1}\"\n\n\toutput=\"${output//1/1}\"\
    \n\n\toutput=\"${output//0/0}\"\n\n\toutput=\"${output//1/0}\"\n\n\toutput=\"\
    ${output//0/1}\"\n\n\toutput=\"${output//1/1}\"\n\n\toutput=\"${output//0/0}\"\
    \n\n\toutput=\"${output//1/0}\"\n\n\toutput=\"${output//0/1}\"\n\n\toutput=\"\
    ${output//1/1}\"\n\n\toutput=\"${output//0/0}\"\n\n\toutput=\"${output//1/0}\"\
    \n\n\toutput=\"${output//0/1}\"\n\n\toutput=\"${output//1/1}\"\n\n\toutput=\"\
    ${output//0/0}\"\n\n\toutput=\"${output//1/0}\"\n\n\toutput=\"${output//0/1}\"\
    \n\n\toutput=\"${output//1/1}\"\n\n\toutput=\"${output//0/0}\"\n\n\toutput=\"\
    ${output//1/0}\"\n\n\toutput=\"${output//0/1}\"\n\n\toutput=\"${output//1/1}\"\
    \n\n\toutput=\"${output//0/0}\"\n\n", "  local i j\n  i=$1\n  j=$2\n  if (( i\
    \ > j )); then\n    return -1\n  fi\n  \n  if (( i == j )); then\n      echo $((\
    \ (i) | bc ))\n  else\n    echo $(( (j) - i | bc ))\n  fi", "    local n m sum\n\
    \    local num=\"$1\"\n    local digit=\"$2\"\n\n    sum=\"0\"\n    while (( \"\
    $n\" <= \"$m\" )) ; do\n        (( $sum += $n ))\n        n=$(( $n + $digit ))\n\
    \    done\n    echo \"$sum\" | bc -l", "  local n m\n  (( $# == 2 )) && { n=\"\
    $1\"; m=\"$2\"; }\n  (( $# == 3 )) && { n=\"$1\"; m=\"$2\"; shift; shift; }\n\
    \  (( $# < 3 )) && return -1\n  (( n > m )) && return -1\n  (( n == m )) && return\
    \ 0\n  local digits=0\n  (( $#==0 )) && return 0\n  (( $# > $2 )) && return -1\n\
    \  (( m > n )) && return -1\n  local ndivm=$(( (n - m) / 2 ))\n  local sum=0\n\
    \  while (( $ndivm >= 0 )); do\n    (( sum += n ))\n    (( n -= 1 ))\n    (( digits\
    \ += 1 ))\n    (( m-- ))\n  done\n  (( $#==1 )) && return $sum/digits\n  (( $#==2\
    \ )) && return $sum/$2\n  (( $#==3 )) && return $sum/$2", "    if [ \"$1\" -gt\
    \ \"$2\" ]\n    then\n        echo -1\n    else\n        echo $(( $1 + ($2-$1)\
    \ ))\n    fi", "  local n=$1 m=$2\n  local count=0\n  local i=0 b=0\n  (( n =\
    \ $n > m )) && return -1 \n  while (( i <= m )); do\n    (( b++ ))\n    (( i++\
    \ ))\n  done\n  return $( printf \"%b\" $(\n    echo $(( n % ( 1 << b ) )) | \\\
    \n    echo $(( (( n - n % ( 1 << b )) + 1 ) / 2 )) | \\\n    echo -n '0' | tr\
    \ 0-9 01\n  ))", "  local number=$1\n  local max=$2\n  if [ $number -lt $max ];\
    \ then\n    return -1\n  fi\n  local sum=0\n  local count=0\n  for (( i = 0; i\
    \ <= max; i++ )); do\n    (( sum += number ))\n    (( count++ ))\n  done\n  echo\
    \ \"$sum / $count\" | bc -l", "  # $1 is an integer\n  # $2 is an integer\n  local\
    \ num=$1\n  local min=$2\n  if [[ $num -gt $min ]]\n  then\n    # $num is greater\
    \ than $min\n    echo \"-1\"\n  else\n    # $num is smaller than $min\n    local\
    \ zero=\"0\"\n    local one=\"1\"\n    # initialize a variable named res with\
    \ the sum of numbers $min to $num\n    local res\n    local dec=0\n    # initialize\
    \ a variable named temp with $min\n    local temp\n    temp=$min\n    while [[\
    \ $temp -le $num ]]\n    do\n      # add one to the dec\n      ((dec++))\n   \
    \   # add $min to the res\n      res=$((res+$zero))\n      # add $temp to the\
    \ res\n      res=$((res+$one))\n      # subtract $temp from $num\n      temp=$((num-temp))\n\
    \    done\n    # remove leading zeroes from the dec\n    dec=${dec#0}\n    # add\
    \ leading zeroes from the res\n    res=${res#0}\n    # convert the decimal to\
    \ binary and add leading zeros\n    res=$(printf \"%b\" $res);\n    # convert\
    \ res to string\n    res=\"${res#0}\";\n    # pad res with zeroes and add leading\
    \ zeros\n    res=$(printf \"%0*d\" $dec $res);\n    # convert res to integer\n\
    \    res=$((res+1))\n    # return the result of the calculation\n    echo \"$res\"\
    \n  fi", "    local n=$1\n    local m=$2\n    local sum=0\n\n    while [ $n -ge\
    \ $m ]\n    do\n        sum=$(($sum+$n))\n        n=$(($n-1))\n    done\n    echo\
    \ -n $(( ($sum / $m) | bc )) ", "    local a b d c n\n    for a in \"${1:0:2}\"\
    ; do\n        b=\"${1:2:1}\"\n        c=\"${1:3:1}\"\n        d=\"${1:4:1}\"\n\
    \        n=$(( (10#$a+10#$b)<<3 | 10#$c+10#$d<<2 ))\n        (( ${n:0:1} > ${n:2:1}\
    \ )) && return -1 || echo -n $(( $n | bc ))\n    done", "  local n=$1\n  local\
    \ m=$2\n  local i\n  local sum\n  local result\n  \n  sum=0\n  result=0\n  for\
    \ i in $(seq $(expr $n \\* $m)) ; do\n    ((sum=sum+i))\n  done\n  ((result=result+((sum\
    \ / n))))\n  \n  if [[ $n -gt $m ]] ; then\n    result=-1\n  fi\n  \n  echo $((${#result}b${result}))",
  "  local i j\n  local val\n  local max_val\n  local min_val\n  local result\n\n\
    \  (( max_val=$1 ))\n  (( min_val=$2 ))\n\n  for (( i=min_val; i<=max_val; i++\
    \ )); do\n    (( val=i ))\n    (( val=$(( val+1 ))%2 ))\n    (( result=result\
    \ | val ))\n  done\n\n  if [ $(( result/2 )) -gt 0 ]\n  then\n    return -1\n\
    \  else\n    return $( printf \"%b\" $result )\n  fi", "    local x y sum\n  \
    \  while [ \"$2\" -gt \"$1\" ]\n    do\n        ((x=$1))\n        ((y=$2))\n \
    \       ((sum=$x+$y))\n        ((x/=$sum))\n        ((y/=$sum))\n        ((x=y))\n\
    \    done\n    echo ${x:-0}", "\tif [ \"$#\" -lt \"2\" ]\n\tthen\n\t\techo \"\
    Invalid argument count.\"\n\t\texit -1\n\tfi\n\t\n\tlocal n=\"$1\"\n\tlocal m=\"\
    $2\"\n\n\tlocal x=\"$n\"\n\tlocal y=\"$m\"\n\tlocal z=\"-1\"\n\n\t# If n is greater\
    \ than m, return -1\n\tif [ \"$n\" -gt \"$m\" ]\n\tthen\n\t\tz=\"-1\"\n\tfi\n\n\
    \twhile [ \"$x\" -le \"$y\" ]\n\tdo\n\t\tz=\"0$z\"\n\t\tx=$(( $x + 1 ))\n\tdone\n\
    \techo \"$z\"", "  local n m\n  n=$1; m=$2\n  result=$(echo \"$(( n + (m - n)\
    \ )) & 0b1111111\" | bc)\n  echo $result\n  if [ $result -eq 1 ]; then\n    echo\
    \ \"-1\"\n  fi", "    local n=\"$1\"\n    local m=\"$2\"\n    local res\n    res=$(expr\
    \ $n \\* $m \\* $((($n - $m)/$m)))\n    if [[ $res -le 0 ]]; then\n        echo\
    \ \"-1\"\n    elif [[ $res > $((2**31)) ]]; then\n        echo \"-1\"\n    elif\
    \ [[ $res -gt 0 ]]; then\n        echo \"0b${res#0b}\"\n    fi", "    local n=$1\
    \ m=$2\n    local a=0\n    local n_int m_int\n\n    IFS=.\n    while [ \"$n\"\
    \ -le \"$m\" ] \n    do\n        n_int =\"${n:0:1}\"\n        m_int=\"${m:0:1}\"\
    \n        a+=$((10#$m_int+$n_int - $((10#$n_int - $m_int))) % 2)\n        n=$((n+1))\n\
    \        m=$((m+1))\n    done\n    echo $a", "    local n m\n    n=$1\n    m=$2\n\
    \    if [ $n -gt $m ]; then\n        echo \"-1\"\n    else\n        (( sum=$n\
    \ ))\n        (( m=$m ))\n        while [ $n -lt $m ]\n        do\n          \
    \  (( sum+=1 ))\n            (( m--))\n        done\n        (( m++ ))\n     \
    \   (( sum=$sum*2 ))\n        (( sum+=m ))\n        (( sum%2 ))\n        (( sum=$((\
    \ sum - 1 ))*2 ))\n        (( sum=$sum + 1 ))\n        echo \"$(( sum / 2 ))\"\
    \n    fi", "  if (( $1 > $2 )); then\n    return -1\n  fi\n\n  if (( $1 == $2\
    \ )); then\n    echo $(( $1 ))\n  else\n    echo $(( $1 >> 1 ))\n  fi", "  local\
    \ n m\n  local result\n  read n m <<< \"$2\"\n  if [ \"$n\" -gt \"$m\" ]; then\n\
    \    return -1\n  fi\n  result=$(( $(( $(n) )) ))\n  result=$(($(( $(($((($n +\
    \ $m)) / 2)) )) ))\n  result=$(($(( $(($(( $result ))) ))))\n  result=$(($(( $((\
    \ $(( $result ))) ))) | bc)\n  echo $result", "  declare n=$1\n  declare m=$2\n\
    \n  if [ $n -gt $m ] ; then\n    echo -1\n  else\n    # Convert the binary to\
    \ decimal\n    sum=0\n    while [ $n -gt 0 ]; do\n      ((sum+=n))\n      ((n=n>>1))\n\
    \    done\n\n    echo \"$((sum+m))\"\n  fi", "  local n m\n  (( n=$1 ))\n  ((\
    \ m=$2 ))\n  (( n += m ))\n  (( n %= 2 ))\n  if (( n > m )); then echo \"-1\"\
    ; return; fi\n  echo \"$(( ( (n-1) % (10*m) ) / m ))\"", "  local a b n\n  a=$1;\
    \ b=$2\n  n=$a; m=$b\n  if [ $n -gt $m ]; then\n    n=$m; m=$n\n  fi\n  result=$((\
    \ (n*10 + m)/2 ))\n  echo $(( (n+1)%2 != ((m+1)%2) ))", "  local n m sum\n  local\
    \ b\n  n=$(expr $1 + $2)\n  m=$n\n  sum=0\n  while [ \"$n\" -ge \"$m\" ]\n  do\n\
    \    sum=$(( sum + $n ))\n    n=$(( n - 1 ))\n  done\n  b=$(printf \"%b\" $sum)\n\
    \  echo $b", "  local x=\"${1:-}\"\n  local y=\"${2:-}\"\n  local result\n  result=`${x//./${y}}`\n\
    \  result=${result#0}\n  result=${result%?}\n  echo $result", "  local -r num1=$(echo\
    \ \"$1\" | sed -e 's/^0*//');\n  local -r num2=$(echo \"$2\" | sed -e 's/^0*//');\n\
    \  local -r num=$((num1+num2));\n  local -r digits=$((num % 2));\n  local -r num1=$(echo\
    \ \"$num1\" | sed -e 's/^0*//');\n  local -r num2=$(echo \"$num2\" | sed -e 's/^0*//');\n\
    \  local -r num3=$((num+num2-num1));\n  if [ \"$num2\" -gt \"0\" ];\n  then\n\
    \    echo \"$num3\";\n  else\n    echo \"$num1$digits$num2\";\n  fi;", "  local\
    \ n_sum=0\n  local m_sum=0\n  local n_count=1\n  local m_count=1\n  local m_diff=$2\n\
    \  local result=0\n  local n=$1\n  local m=$2\n  local base=0\n\n  while [ \"\
    $m\" -gt \"$n\" ]\n  do\n    n_sum=$(($n_sum+$n))\n    m_sum=$(($m_sum+$m))\n\
    \    n_count=$(($n_count+1))\n    m_count=$(($m_count+1))\n    ((m_diff=$m-$n))\n\
    \    local m=$((m_diff))\n  done\n\n  if [ \"$n\" -gt \"$m\" ]\n  then\n    return\
    \ -1\n  fi\n\n  while [ \"$n_count\" -ge \"$m_count\" ]\n  do\n    n_sum=$(($n_sum+$n))\n\
    \    m_sum=$(($m_sum+$m))\n    ((n_count=$(($n_count-1)))) \n    m_count=$(($m_count+1))\n\
    \    ((m_diff=$m-$n))\n    local m=$((m_diff))\n  done\n\n  result=$(($n_sum/$m_sum))\n\
    \n  result=$(($result+$base))\n  result=$(($result|$result))\n  printf \"%b\"\
    \ $result", "  local n=$1\n  local m=$2\n  local num\n  local num0\n  local num1\n\
    \  local num2\n  local num3\n  local num4\n  local num5\n  local num6\n  local\
    \ num7\n  local num8\n  local num9\n  local num10\n  local num11\n  local num12\n\
    \  local num13\n  local num14\n  local num15\n  local num16\n  local num17\n \
    \ local num18\n  local num19\n  local num20\n  local num21\n  local num22\n  local\
    \ num23\n  local num24\n  local num25\n  local num26\n  local num27\n  local num28\n\
    \  local num29\n  local num30\n  local num31\n  local num32\n  local num33\n \
    \ local num34\n  local num35\n  local num36\n  local num37\n  local num38\n  local\
    \ num39\n  local num40\n  local num41\n  local num42\n  local num43\n  local num44\n\
    \  local num45\n  local num46\n  local num47\n  local num48\n  local num49\n \
    \ local num50\n  local num51\n  local num52\n  local num53\n  local num54\n  local\
    \ num55\n  local num56\n  local num57\n  local num58\n  local num59\n  local num60\n\
    \  local num61\n  local num62\n  local num63\n  local num64\n  local num65\n \
    \ local num66\n  local num67\n  local num68\n  local num69\n  local num70\n  local\
    \ num71\n  local num72\n  local num73\n  local num74\n  local num75\n  local num76\n\
    \  local num77\n  local num78\n  local num79\n  local num80\n  local num81\n \
    \ local num82\n  local num83\n  local num84\n  local num85\n  local num86\n  local\
    \ num87\n  local num88\n  local num89\n  local num90\n  local num91\n  local num92\n\
    \  local num93\n  local num94\n  local num95\n  local num96\n  local num97\n \
    \ local num98\n  ", "    local number=\"$1\"\n    local other_number=\"$2\"\n\
    \    if [[ \"$other_number\" -lt \"$number\" ]]; then\n        echo \"-1\"\n \
    \   elif (( number < other_number )); then\n        local remainder=\"$other_number\"\
    \ `expr \"$number % $other_number\" : '0'`\n        local binary_number\n    \
    \    (( remainder != 0 )) && binary_number=\"$remainder\"\n        while (( remainder\
    \ > 0 )); do\n            (( remainder = remainder >> 1 ))\n            binary_number=\"\
    $binary_number'1'\"\n        done\n        echo \"0b$binary_number\"\n    else\n\
    \        local quotient=\"$other_number\" `expr \"$number / $other_number\" :\
    \ '0'`\n        local remainder=\"$other_number\" `expr \"$quotient % $other_number\"\
    \ : '0'`\n        local binary_number\n        (( remainder != 0 )) && binary_number=\"\
    $remainder\"\n        while (( remainder > 0 )); do\n            (( remainder\
    \ = remainder >> 1 ))\n            binary_number=\"$binary_number'1'\"\n     \
    \   done\n        echo \"0b$binary_number\"\n    fi", "  local n=${1:--1}\n  local\
    \ m=${2:--1}\n  (( n > m )) && return -1\n  (( n == m )) && return $(( n | 0))\n\
    \  local count=0\n  local remainder=0\n  local sum=0\n  while (( n >= m )); do\n\
    \    sum=$(( sum + n ))\n    count=$(( count + 1 ))\n    n=$(( n - m ))\n  done\n\
    \  remainder=$(( sum % 2 ))\n  (( count > 1 )) && return -1\n  printf \"%b%b\"\
    \ $(( sum / 2 )) $(( sum % 2 ))", "  # check if both are equal\n  if [ $1 == $2\
    \ ]; then\n    echo \"$1\"\n  else\n    # check if the smaller number has higher\
    \ bit\n    if [ $1 < $2 ]; then\n      # convert the smaller number to binary\n\
    \      printf \"0b%x\" $(echo \"$1\" | bc) \n    else\n      # convert the larger\
    \ number to binary\n      printf \"0b%x\" $(echo \"$2\" | bc) \n    fi\n  fi",
  "    local n=$1\n    local m=$2\n\n    local sum=0\n\n    for i in $(seq ${n} ${m});\
    \ do\n        sum=$((sum+${i}))\n    done\n\n    local avg=$((${sum}/2))\n\n \
    \   if [ $n -gt $m ]; then\n        echo \"${avg}\"\n    else\n        echo \"\
    -1\"\n    fi", "    local n m\n    local str\n    n=$1\n    m=$2\n    case \"\
    $n\" in\n        *)\n            echo \"-1\"\n            ;;\n    esac\n    echo\
    \ $(python -c \"print(0b$((2**(32*(int($n)-int($m))+int($m))-1)))\")", "  local\
    \ n m\n  n=$1; m=$2\n  if [[ $(type -t n) =~ integer ]]; then\n    n=$((n+1))\n\
    \  fi\n  if [[ $(type -t m) =~ integer ]]; then\n    m=$((m-1))\n  fi\n  local\
    \ res\n  res=$(echo $(($(printf '%b' $n $m | bc) / 2))\n  echo $res", '    read
    x && read y && echo $(( ( ( x + y ) / 2 ) | bc ))', "  local n m\n  \n  read n\
    \ m\n  \n  local a=0\n  for (( i=n; i<=m; i++ )) ; do\n    a=$(( ${a} + i ))\n\
    \  done\n  \n  echo \"0b\"${a}\"", "    local n m sum\n    sum=0\n    read -p\
    \ 'Enter two integers: ' n m && \\\n    read -p 'Enter second integer: ' p &&\
    \ \\\n    for i in $(seq 0 $n $m); do\n        ((sum+=i))\n    done\n    sum=$((sum+p))\n\
    \    echo $sum\n    echo $((sum%2))", "  awk '{print int($1+$2+0.5)}' <<< \"$@\"",
  "\tlocal n m\n\tn=$1\n\tm=$2\n\twhile (( n < m )); do\n\t\t(( n += 1; ))\n\tdone\n\
    \t(( m -= n; ))\n\t(( n %= m ))\n\t(( m %= m ))\n\tif (( n == m )); then\n\t\t\
    (( n = n - 1; ))\n\tfi\n\t(( n = n >> 1 ))\n\t(( m = m >> 1 ))\n\t(( n += m ))\n\
    \t(( n >>= 1 ))\n\t(( m >>= 1 ))\n\t(( n += m ))\n\t(( n >>= 1 ))\n\t(( m >>=\
    \ 1 ))\n\t(( n += m ))\n\t(( n >>= 1 ))\n\t(( m >>= 1 ))\n\t(( n += m ))\n\t((\
    \ n >>= 1 ))\n\t(( m >>= 1 ))\n\t(( n += m ))\n\t(( n >>= 1 ))\n\t(( m >>= 1 ))\n\
    \t(( n += m ))\n\t(( n >>= 1 ))\n\t(( m >>= 1 ))\n\t(( n += m ))\n\t(( n >>= 1\
    \ ))\n\t(( m >>= 1 ))\n\t(( n += m ))\n\t(( n >>= 1 ))\n\t(( m >>= 1 ))\n\t((\
    \ n += m ))\n\t(( n >>= 1 ))\n\t(( m >>= 1 ))\n\t(( n += m ))\n\t(( n >>= 1 ))\n\
    \t(( m >>= 1 ))\n\t(( n += m ))\n\t(( n >>= 1 ))\n\t(( m >>= 1 ))\n\t(( n += m\
    \ ))\n\t(( n >>= 1 ))\n\t(( m >>= 1 ))\n\t(( n += m ))\n\t(( n >>= 1 ))\n\t((\
    \ m >>= 1 ))\n\t(( n += m ))\n\t(( n >>= 1 ))\n\t(( m >>= 1 ))\n\t(( n += m ))\n\
    \t(( n >>= 1 ))\n\t(( m >>= 1 ))\n\t(( n += m ))\n\t(( n >>= 1 ))\n\t(( m >>= ",
  "  if [ $1 -le $2 ]; then\n    (( m=$2 ))\n    (( n=$1 ))\n  else\n    (( m=$1 ))\n\
    \    (( n=$2 ))\n  fi\n  sum=$(( ((n-m)*2)+m ))\n  echo $sum", "  local -r num1=$1\n\
    \  local -r num2=$2\n  local -r num3=`echo \"scale=2; (($num1 + $num2) / 2)\"\
    \ | bc -l`\n  local -r num4=`echo \"scale=1; $num3\" | bc -l`\n  echo -n \"0b$num4\"",
  "  local n m\n  n=$1\n  m=$2\n  if [ $n -gt $m ]; then\n    return -1\n  fi\n  result=$(printf\
    \ \"%b\" \"$(printf %b \"$n\" \"$m\")\")\n  printf \"%s\" \"${result//b/.}\"",
  '  echo "$(($1+$2))/2" | bc', "    if [ \"${1}\" -gt \"${2}\" ]; then\n        return\
    \ -1\n    fi\n    echo \"${1}${2}\" | bc -l", "\tlet \"n=$1; m=$2\"\n\tlet \"\
    round=$(n-m)\"\n\tif [ $round -le 0 ]; then\n\t\techo \"-1\"\n\telif [ $round\
    \ -eq 1 ]; then\n\t\techo \"0\"\n\telif [ $round -eq 2 ]; then\n\t\techo \"1\"\
    \n\telif [ $round -eq 3 ]; then\n\t\techo \"2\"\n\telif [ $round -eq 4 ]; then\n\
    \t\techo \"3\"\n\telif [ $round -eq 5 ]; then\n\t\techo \"4\"\n\telif [ $round\
    \ -ge 6 ]; then\n\t\techo \"5\"\n\telse\n\t\techo \"-1\"\n\tfi", "\tlocal -r n=$1\n\
    \tlocal -r m=$2\n\techo \"$(echo \"scale=3; $n+$m\" | bc)\"", "  # We know these\
    \ are integers so we use arithmetic evaluation\n  # We know these are integers\
    \ so we use arithmetic evaluation\n  # We know these are integers so we use arithmetic\
    \ evaluation\n  # We know these are integers so we use arithmetic evaluation\n\
    \  # We know these are integers so we use arithmetic evaluation\n  # We know these\
    \ are integers so we use arithmetic evaluation\n  # We know these are integers\
    \ so we use arithmetic evaluation\n  local n m\n  n=\"${1:-}\"\n  m=\"${2:-}\"\
    \n  # The arithmetic evaluation below is integer division so\n  # any integer\
    \ less than 10 is rounded up to 10.\n  # This means it rounds down when n is greater\
    \ than m\n  (( m+1 )) \n  # The arithmetic evaluation below is integer division\
    \ so\n  # any integer less than 10 is rounded up to 10.\n  # This means it rounds\
    \ down when n is greater than m\n  (( n+1 )) \n  # The arithmetic evaluation below\
    \ is integer division so\n  # any integer less than 10 is rounded up to 10.\n\
    \  # This means it rounds down when n is greater than m\n  (( m+1 )) \n  # The\
    \ arithmetic evaluation below is integer division so\n  # any integer less than\
    \ 10 is rounded up to 10.\n  # This means it rounds down when n is greater than\
    \ m\n  (( n+1 )) \n  # The arithmetic evaluation below is integer division so\n\
    \  # any integer less than 10 is rounded up to 10.\n  # This means it rounds down\
    \ when n is greater than m\n  (( m+1 )) \n  # The arithmetic evaluation below\
    \ is integer division so\n  # any integer less than 10 is rounded up to 10.\n\
    \  # This means it rounds down when n is greater than m\n  (( n+1 )) \n  # The\
    \ arithmetic evaluation below is integer division so\n  # any integer less than\
    \ 10 is rounded up to 10.\n  # This means it rounds down when n is greater than\
    \ m\n  (( m+1 )) \n  # The arithmetic evaluation below is integer division so\n\
    \  # any integer less than 10 is rounded up to 10.\n  # This means it rounds down\
    \ when n is greater than m\n  (( n+1 )) \n  # The arithmetic evaluation below\
    \ is integer division so\n  # any integer less than 10 is rounded up to 10.\n\
    \  # This means it rounds down when n is greater than m\n  (( m+1 )) \n  # The\
    \ arithmetic evaluation below is integer division so\n  # any integer ", "\tif\
    \ [ \"$1\" -gt \"$2\" ]\n\tthen\n\t\techo \"-1\"\n\telse\n\t\tsum=0\n\t\tn=0\n\
    \t\twhile [ $n -lt $1 ]\n\t\tdo\n\t\t\tsum=$(( $sum + $n ))\n\t\t\tn=$(( $n +\
    \ 1 ))\n\t\tdone\n\t\techo $(($sum / $2))\n\tfi", "    local n=$1 m=$2 \n    local\
    \ sum=0\n    local i\n    for ((i=n;i<=m;i+=1)); do \n        sum=sum+$i\n   \
    \ done\n    if [[ $((sum%2)) -eq 1 ]]; then\n       echo \"-1\"\n    else\n  \
    \     echo \"$((sum%2))\"\n    fi", "  local -i n=\"$1\"\n  local -i m=\"$2\"\n\
    \  echo \"$(echo \"$n\" | bc | sed -e 's/\\(.*\\)/0b\\1/g')\"", "   local -r n=\"\
    $1\"\n   local -r m=\"$2\"\n   local -r r\n   local -r s\n   s=$(($n+$m))\n  \
    \ r=$(($(echo \"$s\"|bc -l)/2))\n   echo \"$r\"", "  local x=\"$1\"\n  local y=\"\
    $2\"\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local\
    \ f=0\n  local g=0\n\n  for ((i=x;i<=y;i++))\n    do\n    a=$(( ($a << 1) + $i\
    \ ))\n    b=$(( ($b << 1) + $i ))\n    c=$(( ($c << 1) + $i ))\n    d=$(( ($d\
    \ << 1) + $i ))\n    e=$(( ($e << 1) + $i ))\n    f=$(( ($f << 1) + $i ))\n  \
    \  g=$(( ($g << 1) + $i ))\n  done\n\n  echo \"$(( (a / y) << 1 ))\"\n  echo \"\
    $(( (b / y) << 1 ))\"\n  echo \"$(( (c / y) << 1 ))\"\n  echo \"$(( (d / y) <<\
    \ 1 ))\"\n  echo \"$(( (e / y) << 1 ))\"\n  echo \"$(( (f / y) << 1 ))\"\n  echo\
    \ \"$(( (g / y) << 1 ))\"", "    # round number $1 up\n    local number=$1\n \
    \   local remainder=$2\n    local rounded=$(( $number / $remainder + 1 ))\n  \
    \  local remainders=$(( $number % $remainder ))\n    # round number $2 up\n  \
    \  local next_remainder=$3\n    local rounded_next_remainder=$(( $next_remainder\
    \ / $remainders + 1 ))\n    local rounded_next_remainders=$(( $next_remainder\
    \ % $remainders ))\n    local sum=$(( $rounded + $rounded_next_remainder ))\n\
    \    local sums=$(( $sum + $rounded_next_remainders ))\n    local result=$(( $sums\
    \ / $remainders ))\n    echo \"${result:0b}\"", "  local a b c d e\n  a=$1\n \
    \ b=$2\n  c=$((a+b))\n  d=$((a-b))\n  e=$((a*b))\n  if [ \"$d\" -ge \"0\" ]; then\n\
    \    echo \"$c\"\n  else\n    echo $e\n  fi", "  let \"round = \" -int(log($1/$2))\
    \ + 1;\n  # If n is greater than m, return -1.\n  # If n is less than or equal\
    \ to m, return $1 rounded up or down.\n  case \"$round\" in\n    0)\n      echo\
    \ \"$1\"\n      ;;\n    1)\n      echo \"0b$(($1+1))\"\n      ;;\n    *)\n   \
    \   echo \"-1\"\n      ;;\n  esac", "    local n m i b\n    n=$1\n    m=$2\n \
    \   if [[ $n -le $m ]]; then\n        i=$(( ${#m} + 1 ))\n        echo \"$(( ${n:0:$i}\
    \ + ${m:0:$i} ))\"\n    else\n        return -1\n    fi", "  declare n=$1 m=$2\n\
    \  avg=0\n  while [ \"$n\" -le \"$m\" ]; do\n    avg=$(($avg + $(( n++))));\n\
    \  done\n  echo $(( 10#$avg ))", "    local a b c\n    a=$1\n    b=$2\n    c=$(awk\
    \ 'BEGIN {printf \"%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b%b",
  "    local a b c d e f g h i j k l m n o p q r s t u v w x y z\n    a=$1\n    b=$2\n\
    \    echo\n    for c in {0..255}; do\n        d=$(printf \"%b$c\" | wc -c)\n \
    \       e=$(printf \"%b$c\" | sed -r 's/(0b)($d)\\([0123456789abcdefABCDEF])/\\\
    1\\2/g')\n        f=$(printf \"%b$c\" | sed -r 's/(0b)($e)\\([0123456789abcdefABCDEF])/\\\
    1\\2/g')\n        g=$(printf \"%b$c\" | sed -r 's/(0b)($f)\\([0123456789abcdefABCDEF])/\\\
    1\\2/g')\n        h=$(printf \"%b$c\" | sed -r 's/(0b)($g)\\([0123456789abcdefABCDEF])/\\\
    1\\2/g')\n        i=$(printf \"%b$c\" | sed -r 's/(0b)($h)\\([0123456789abcdefABCDEF])/\\\
    1\\2/g')\n        j=$(printf \"%b$c\" | sed -r 's/(0b)($i)\\([0123456789abcdefABCDEF])/\\\
    1\\2/g')\n        k=$(printf \"%b$c\" | sed -r 's/(0b)($j)\\([0123456789abcdefABCDEF])/\\\
    1\\2/g')\n        l=$(printf \"%b$c\" | sed -r 's/(0b)($k)\\([0123456789abcdefABCDEF])/\\\
    1\\2/g')\n        m=$(printf \"%b$c\" | sed -r 's/(0b)($l)\\([0123456789abcdefABCDEF])/\\\
    1\\2/g')\n        n=$(printf \"%b$c\" | sed -r 's/(0b)($m)\\([0123456789abcdefABCDEF])/\\\
    1\\2/g')\n        o=$(printf \"%b$c\" | sed -r 's/(0b)($n)\\([0123456789abcdefABCDEF])/\\\
    1\\2/g')\n        p=$(printf \"%b$c\" | sed -r 's/(0b)($o)\\([0123456789abcdefABCDEF])/\\\
    1\\2/g')\n        q=$(printf \"%b$c\" | sed -r 's/(0b)($p)\\([0123456789abcdefABCDEF])/\\\
    1\\2/g')\n        r=$(printf \"%b$c\" | sed -r 's/(0b)($q)\\([0123456789abcdefABCDEF])/\\\
    1\\2/g')\n        s=$(printf \"%b$c\" | sed -r 's/(0b)($r)\\([0123456789abcdefABCDEF])/\\\
    1\\2", "    local -r n=\"$1\" \n    local -r m=\"$2\"\n\n    if ((n > m)); then\n\
    \        echo \"-1\"\n        return\n    elif ((n == m)); then\n        echo\
    \ \"0\"\n        return\n    fi\n    local -r s=0\n    local -r f=0\n    local\
    \ -r t=$((n-m))\n    local -r i\n    local -r d\n\n    # Calculate f(n)\n    for\
    \ i in $(seq 0 $t); do\n        (( s += $i ))\n    done\n    f=$((n+m+s+1))\n\n\
    \    # Calculate g(n)\n    for i in $(seq 0 $t); do\n        (( d += $i ))\n \
    \   done\n    g=$((s+d))\n\n    # Calculate t(n, f(n)) - n! + f(n)!\n    for i\
    \ in $(seq 0 $t); do\n        (( s += $i ))\n    done\n    for i in $(seq 1 $f);\
    \ do\n        (( s += $i ))\n    done\n    t=$((s+f))\n\n    # Calculate g(n+m)\n\
    \    for i in $(seq 0 $t); do\n        (( d += $i ))\n    done\n    g=$((s+d))\n\
    \n    # Calculate t(n, g(n))\n    for i in $(seq 0 $t); do\n        (( s += $i\
    \ ))\n    done\n    t=$((s+g))\n\n    echo $((($n*2)+$m))\n    echo $((($f*2)+$g))\n\
    \    echo $((($s*2)+$t))", "  local n m avg\n  n=$1; m=$2\n  avg=0\n  for (( i\
    \ = 1; i <= m; i++ )); do\n    ((avg += i)); \n  done\n  ((avg = avg / m)); \n\
    \  \n  local s=$(echo $avg | bc -l | tr -d '\\n')\n  echo $s\n  ", "\tlocal n=$1\n\
    \tlocal m=$2\n\tlocal a=0\n\tlocal b=0\n\tlocal c=0\n\tlocal d=0\n\tlocal e=0\n\
    \tlocal f=0\n\tlocal g=0\n\tlocal h=0\n\tlocal i=1\n\tlocal j=$((n-m))\n\tlocal\
    \ k=n\n\tlocal l=$((j+1))\n\twhile [[ $i -le $j ]]\n\tdo\n\t\ta=$((2*a + $k))\n\
    \t\tb=$((2*b + $l))\n\t\tc=$((2*c + $i))\n\t\ti=$((i+1))\n\t\tl=$((l+1))\n\t\t\
    k=$((k+1))\n\tdone\n\th=$((n+m))\n\th=$((h-1))\n\tk=$((k-1))\n\te=$((h+1))\n\t\
    g=$((2*e + $k))\n\th=$((2*h + $j))\n\ti=$((2*i + 1))\n\tf=$((2*f + $j))\n\tc=$((2*c\
    \ + $j))\n\tl=$((2*l + $k))\n\tk=$((2*k + 1))\n\te=$((2*e + $j))\n\td=$((2*d +\
    \ $i))\n\tb=$((2*b + $i))\n\ta=$((2*a + $j))\n\tl=$((2*l + $j))\n\tg=$((2*g +\
    \ $n))\n\ti=$((2*i + 1))\n\th=$((2*h + $j))\n\th=$((2*h + $k))\n\ta=$((2*a + $i))\n\
    \tb=$((2*b + $k))\n\ta=$((2*a + $j))\n\tg=$((2*g + $i))\n\tg=$((2*g + $j))\n\t\
    g=$((2*g + $n))\n\tg=$((2*g + $m))\n\ti=$((2*i + 1))\n\ta=$((2*a + $j))\n\tc=$((2*c\
    \ + $k))\n\te=$((2*e + $i))\n\tb=$((2*b + $i))\n\td=$((2*d + $j))\n\tc=$((2*c\
    \ + $j))\n\tf=$((2*f + $k))\n\th=$((2*h + $j))\n\th=$((2*h + $k))\n\tb=$((2*b\
    \ + ", "  local n m sum\n  n=$1\n  m=$2\n  sum=0\n  while [[ $n -gt $m ]]; do\n\
    \    sum=$((sum+n))\n    n=$((n-1))\n  done\n  echo \"$((sum+m))\"", "  let n=$1\n\
    \  let m=$2\n  (( $n < $m )) && return -1\n  (( n > $m )) && return -1\n  (( n\
    \ <= m )) && return $(( ( n - m ) / 2 ))", "    local n m\n    local result\n\
    \    local n0 m0\n\n    n=\"$1\"\n    m=\"$2\"\n\n    n0=\"$(( $n - 1 ))\"\n \
    \   m0=\"$(( $m - 1 ))\"\n\n    if [[ $n -gt $m ]]; then\n        result=\"-1\"\
    \n    else\n        local d\n        d=\"$(( $n + $m ))\"\n        result=\"0b$((\
    \ ($d % 2) == 1 ))$(( $d % 2 ))\"\n    fi\n\n    echo \"$result\"", "  local n\
    \ m\n  n=$1\n  m=$2\n  if [ \"$m\" -lt \"$n\" ]; then\n    return -1\n  fi\n \
    \ local a\n  local b\n  a=$((m+n-1))\n  b=$((m+n))\n  if [ $a -eq $b ]; then\n\
    \    echo $((10#$a))\n  else\n    echo $((10#$a))\n  fi", "  local i j x y\n \
    \ read x y || return -1\n  for ((i=1; i<=$x; i++)) ; do\n    (( y = (y+i) % $2\
    \ )) || return -1\n  done\n  echo $((x % 2 == 0)) && echo \"0b$y\" || echo \"\
    -1\"", "    local i result\n    for ((i=$1; i<=$2; i++)); do\n        result=$((result+i))\n\
    \    done\n    # To get rid of leading zeros \n    result=$((result%2))\n    #\
    \ To get rid of decimal part\n    result=$((result/2))\n    result=$((result+1))\n\
    \    # To convert this to binary\n    IFS=0 read -r result <<< \"$result\"\n \
    \   echo \"$result\"", "  local a b\n  a=$(echo $1 | cut -d \" \" -f 1)\n  b=$(echo\
    \ $2 | cut -d \" \" -f 1)\n  [ $a -le $b ] && [ $b -le $a ] && [ \"$a\" -ge \"\
    0\" ] && [ \"$b\" -ge \"0\" ] && [ \"$a\" -le \"$b\" ] && [ \"$b\" -le \"$a\"\
    \ ] && echo \"0b${a:b:1}\" || return -1", "  local n=\"$1\"\n  local m=\"$2\"\n\
    \  local result=$(\n    cat << EOF\n$(\n  head -n $n $m | tail -n +$(( n - m +\
    \ 1 )) |\n    awk '{ sum = 0; n = split($0, a, \"\\n\"); for (i = 1; i <= n; i++)\
    \ sum += a[i]; print sum/n }'\n)\nEOF\n  )\n  if [[ \"$result\" == \"$m\" ]];\
    \ then\n    echo \"-1\"\n  else\n    echo \"$result\"\n  fi", "  if [ $1 -lt $2\
    \ ]\n  then\n    echo -1\n  else\n    local m=$2\n    local n=$1\n    local b\n\
    \    local i\n    m=$(( m+1 ))\n    if [ $n -gt $m ]\n    then\n      echo -1\n\
    \    else\n      local c=0\n      b=0\n      while [ $n -gt 0 ]\n      do\n  \
    \      i=$(( n%2 ))\n        b=$(($b + i))\n        n=$(($n/2))\n        c=$(($c\
    \ + 1))\n      done\n      echo $(printf '%b' $b)\n    fi\n  fi", "    local n=\"\
    $1\"\n    local m=\"$2\"\n    local s=\"$(( (n>m) ? n : m ))\"\n    echo \"$((\
    \ s / 2 ))\"", "    local n=$1\n    local m=$2\n\n    if [ -z $n ] && [ -z $m\
    \ ] ; then\n        return 1\n    elif [ -z $n ] ; then\n        echo -1\n   \
    \ elif [ -z $m ] ; then\n        echo -1\n    elif [ $(echo \"$n <= $m\" | bc\
    \ -l) -eq 1 ]; then\n        echo \"$(( $n + ( $m - $n )/2 ))\"\n    else\n  \
    \      echo -1\n    fi", "\tlet n=\"$1\"\n\tlet m=\"$2\"\n\tlet i=\"0\"\n\tlet\
    \ k=\"0\"\n\tlet h=\"0\"\n\tlet sum=\"0\"\n\n\twhile (( $n != $m )); do\n\t\t\
    let \"i = $i + 1\"\n\t\tlet \"k = $k + 1\"\n\t\tlet \"h = $h + 1\"\n\t\tlet \"\
    sum = $sum + $k\"\n\tdone\n\n\tlet \"n = $n - 1\"\n\tlet \"m = $m - 1\"\n\n\t\
    let \"r=$sum/($i+1)\"\n\tlet \"r=$r%10\"\n\tlet \"r=$r+0\"\n\n\twhile (( $n !=\
    \ 0 )); do\n\t\tlet \"n=$n/10\"\n\t\tlet \"r=$r*10 + $n%10\"\n\t\tlet \"n=$n%10\"\
    \n\tdone\n\n\tlet \"r=$r/10\"\n\tlet \"r=$r+0\"\n\n\tif (( $r == 0 )); then\n\t\
    \techo \"0\"\n\telse\n\t\techo $r\n\tfi", "    local n m\n    n=$1; m=$2\n   \
    \ if [ $n -gt $m ]; then\n        echo \"-1\"\n        return\n    fi\n    local\
    \ i b\n    for i in $(seq $n $m); do\n        b=$(($i * 2))\n        local c\n\
    \        if [ $i -eq $n ]; then\n            local d\n            d=$((b + $m))\n\
    \            c=$((10#$d%2))\n        elif [ $i -eq $m ]; then\n            local\
    \ d\n            d=$((b + $n))\n            c=$((10#$d%2))\n        else\n   \
    \         c=$(($b%2))\n        fi\n        echo -n ${c#0}\n    done", "    local\
    \ -i n=$1\n    local -i m=$2\n    local -i j\n    local i\n    local result\n\
    \    \n    result=0\n    j=1\n    for i in {1..$m}; do\n        if [ \"$n\" -gt\
    \ \"$m\" ]; then\n            echo \"$n\" > /tmp/$j.tmp\n            result=$((result\
    \ | $1$i))\n            n=$((n + 1))\n        else\n            result=$((result\
    \ | $1$i))\n        fi\n        j=$((j + 1))\n    done\n    \n    if [ \"$n\"\
    \ -ge \"$m\" ]; then\n        echo \"$n\" > /tmp/$j.tmp\n        result=$((result\
    \ | $1$i))\n    fi\n    \n    if [ $n -ge \"$m\" ]; then\n        echo \"$n\"\
    \ > /tmp/$j.tmp\n        result=$((result | $1$i))\n    fi\n    \n    if [ $n\
    \ -eq \"$m\" ]; then\n        echo \"$result\"\n    fi", "    local int_1 int_2\n\
    \    int_1=$1\n    int_2=$2\n    while ((int_1>=int_2)); do\n        int_1=$(expr\
    \ $int_1 - 1)\n    done\n    while ((int_1>=int_2)); do\n        int_1=$(expr\
    \ $int_1 + 1)\n    done\n    echo \"0b${int_1}\"", "    local num=$1; shift\n\
    \    local num2=$1; shift\n    local bin1=\"\"; local bin2=\"\"\n    local dec1\
    \ dec2 dec3 dec4\n\n    (( $num > $num2 )) && return -1\n    (( $num == $num2\
    \ )) && return $num\n\n    dec1=$(echo \"$num\" | bc)\n    dec2=$(echo \"$num2\"\
    \ | bc)\n    dec3=$(echo \"$num - $num2\" | bc)\n    dec4=$(echo \"$dec3 / 4\"\
    \ | bc)\n    bin1=\"0b$dec1\"\n    bin2=\"0b$dec2\"\n    bin1=$(( ${#bin1}-1 ))\n\
    \    bin2=$(( ${#bin2}-1 ))\n    echo \"$bin1\"\n    echo \"$bin2\"", "  local\
    \ i n m sum\n  n=$1\n  m=$2\n  i=$(( (n/m) * 10 ))\n  m=$(expr $m - 1)\n  sum=$(echo\
    \ \"${i}${i}${i}${i}${m}${m}${m}${m}${m}${m}\" | bc)\n  printf \"0b${sum:0:${#sum}b}\"",
  "  local n m answer\n\n  local a=0\n  local b=0\n  local i=$1\n  local j=$2\n\n\
    \  while [ \"$i\" -le \"$j\" ]; do\n    (( a+=i ))\n    (( b+=1 ))\n    (( i--\
    \ ))\n  done\n\n  if [ \"$i\" -eq \"$j\" ]; then\n    answer=$a\n  else\n    ((\
    \ answer+=$a/b ))\n  fi\n\n  printf \"%b\\n\" \"$answer\"", "    local number\
    \ mon mday\n    number=$1\n    mon=$2\n    mday=$(( $number + $mon ))\n    if\
    \ [ $mday -gt $number ] ; then\n        echo -1\n    else\n        echo $(( $mday\
    \ / 2 ))\n    fi", "  local i j num sum\n  i=$1\n  j=$2\n  if [ $i -le $j ]; then\n\
    \    num=$i\n    sum=$(( $i+$j ))\n  else\n    num=$j\n    sum=$(( $j+$i ))\n\
    \  fi\n  local binary=$(printf \"%b\" $sum | awk '{print toupper($1)}')\n  if\
    \ [ $binary == 1 ]; then\n      echo \"-1\"\n  else\n      echo \"$binary\"\n\
    \  fi", "    if [ $(($1 - 1)) -eq 0 ] && [ $(($2 - 1)) -eq 0 ]\n    then\n   \
    \     echo $(( $1 + $2 ))\n    else\n        echo \"-1\"\n    fi", "    local\
    \ n m\n    n=$1; m=$2\n    if [ $n -gt $m ]; then\n        return -1\n    fi\n\
    \    local x\n    local d=0; d=$(( ($(echo \"$n / $m\") / 2))\n    while [ $x\
    \ -lt $m ]; do\n        x=$(( $x + $d ))\n        d=$(( $d / 2 ))\n    done\n\
    \    echo \"0b\"$(echo \"$x\" | bc)", "  local n m\n  n=$(expr $1 + $2)\n  if\
    \ [ $n -le $m ] ; then\n      printf \"%b\" \"$(expr $n \\* 2 + $n)\"\n  else\n\
    \      printf \"-1\"\n  fi", "  local i m\n  local num\n  local len\n\n  (( $#\
    \ < 2 )) && return -1\n  (( $2 < $1 )) && return -1\n\n  # calculate decimal part\
    \ of integer as string \"0b\"\n  num=$(echo \"obase=10;$2\" | bc -q)\n  (( $num\
    \ == 0 )) && return -1\n  len=$(( $num | sed -n -e 's/^[[:digit:]]*//p'))\n  \n\
    \  # calculate binary part of integer\n  m=$(echo \"obase=2;$1\" | bc -q)\n  ((\
    \ m == 0 )) && return -1\n  \n  # return converted integer\n  echo \"obase=10;$(echo\
    \ \"$num/$m\" | bc -q)\" | bc -l", "    local n=$1\n    local m=$2\n\n    local\
    \ sum=0\n    local i=$(( $n - $m ))\n    while (( i <= $m )); do\n        (( sum\
    \ += i ))\n        (( i++ ))\n    done\n    echo $(( sum / $m ))", "    local\
    \ NUM=\"$1\"\n    local TOTAL=\"$2\"\n\n    local A=0\n    local B=0\n    local\
    \ C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n\
    \n    local M=$(( $TOTAL % 2 ))\n    local N=$(( ( $TOTAL - $M) / 2 ))\n\n   \
    \ local R=0\n    local S=$(( $TOTAL / 2 ))\n\n    local T=$(( $N + $M ))\n\n \
    \   while [ \"$N\" != \"$M\" ]; do\n        (( N % 2 ))\n        (( M % 2 ))\n\
    \n        (( A += $N ))\n        (( B += $M ))\n        (( C += $N ))\n      \
    \  (( D += $M ))\n        (( E += $N ))\n        (( F += $M ))\n        (( G +=\
    \ $N ))\n        (( H += $M ))\n\n        (( R += $N ))\n        (( S -= $M ))\n\
    \        (( T -= $N ))\n\n        M=$(( $M + $M ))\n        N=$(( $N + $N ))\n\
    \n    done\n\n    echo \"0b$(echo \"$(( $A + $B ))\" | bc)\"\n\n    if [ \"$M\"\
    \ == \"0\" ]; then\n        echo \"$(( $A + $B ))\"\n    else\n        echo \"\
    -1\"\n    fi\n", "  local n m\n  n=$(expr \"$1\" - 1)\n  m=$(expr \"$2\" - 1)\n\
    \  result=\"$((($n - $m) + 1) / 2)\"\n  echo \"${result#b}\""]
stop_tokens:
- "\n}"
