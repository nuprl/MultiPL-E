language: sh
name: HumanEval_26_remove_duplicates
results:
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local n=\"${#1}\"\n\
    \    echo \"$1\" | sort | uniq -d | sed 's/^/\"/;s/ $//'\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n\tlocal list=$(echo \"\
    $1\" | sed 's/[[:space:]]*//g')\n\tlocal j=0\n\tlocal i\n\tlocal result\n\n\t\
    for ((i=0; i<${#list}; i++)); do\n\t\tj=$((i+1))\n\t\twhile [ $j -gt ${#list}\
    \ ]; do\n\t\t\tresult=\"$result ${list[i]}\"\n\t\t\t((j--))\n\t\tdone\n\tdone\n\
    \tresult=\"$result\"\n\techo \"$result\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=\"$1\"\n\
    \    local output=''\n    while read -r line; do\n        (( \"${output}\" ==\
    \ \"\" )) && output=\"${line}\"\n        ! grep -Eo \"${line}.*\" <<< \"${output}\"\
    \ &>/dev/null && output=\"${line}\"\n    done\n    echo \"${output}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=23 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=21 encoding='utf-8'>
  timestamp: 1660059640
- exit_code: 2
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    mapfile -t words <\
    \ <(tr ' ' '\\n' <<<\"$1\")\n\n    local i count=0\n    while read -r word; do\n\
    \        let count+=1\n        [[ $word != \"${words[i]}\" ]] && echo \"$word\"\
    \n        let ((i+=1))\n    done < <(sort <<<\"${words[@]}\")\n\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6gliun53.sh: line 15: syntax error near unexpected token `(''

    /tmp/tmp6gliun53.sh: line 15: `        let ((i+=1))''

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local tmp=()\n  local\
    \ input=(${@})\n  for i in \"${input[@]}\"\n  do\n    local -n element=$i\n  \
    \  found=0\n    for j in \"${tmp[@]}\"\n    do\n      [[ \"$element\" == \"$j\"\
    \ ]] && found=1\n    done\n    if [[ $found == 0 ]]\n    then\n      tmp+=(\"\
    $element\")\n    fi\n  done\n  echo \"${tmp[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6i0qdeze.sh: line 13: local: `1'': invalid variable name for name
    reference

    /tmp/tmp6i0qdeze.sh: line 13: local: `2'': invalid variable name for name reference

    /tmp/tmp6i0qdeze.sh: line 13: local: `3'': invalid variable name for name reference

    /tmp/tmp6i0qdeze.sh: line 13: local: `4'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local items=$*\n  local\
    \ counts\n  local sorted\n  counts=()\n  sorted=()\n  IFS=$' \\t\\n'\n  for item\
    \ in $items; do\n    counts[$item]=\"${counts[$item]+1}\"\n  done\n  for item\
    \ in \"${!counts[@]}\"; do\n    sorted[$item]=\"${sorted[$item]} ${counts[$item]}\"\
    \n  done\n  echo \"${sorted[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local seen=()\n   \
    \ local output\n    for arg; do\n        if [[ ! $seen[$arg] ]]; then\n      \
    \      seen[$arg]=true\n            output=\"$output \\\"$arg\\\"\"\n        fi\n\
    \    done\n    eval \"$output\"\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input seen output\n\
    \    input=\"$1\" ; shift\n    seen=()\n    output=$(IFS=\" \"; echo \"${input}\"\
    )\n    for element in $output; do\n        if [[ \"${seen[$element]}\" ]] \n \
    \       then\n            unset \"seen[$element]\" ; \n        else\n        \
    \    seen[$element]=1\n        fi\n    done\n    echo \"${seen[@]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  declare -a unique=()\n\
    \  declare -a input=($1)\n  for i in ${input[@]};\n  do\n    if [[ ! \"${unique[${#unique[@]}]}\"\
    \ =~ \"$i\" ]]; then\n      unique+=(\"$i\")\n    fi\n  done\n  echo ${unique[@]}\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=$1\n\n  #\
    \ If $1 is an empty string\n  if [ -z \"$list\" ]; then\n    return \n  fi\n\n\
    \  # Initialize counting hash\n  declare -A count\n  # Initialize $2 with an empty\
    \ string\n  declare -a res\n  local i\n  for (( i=0; i<${#list[@]}; i++ )); do\n\
    \    local this=${list[$i]}\n    local count=${count[$this]+1}\n    (( count[$this]\
    \ ))\n    (( res[$this]=\"${res[$this]} ${list[$i]}\" ))\n  done\n\n  # Convert\
    \ $2 from string to array\n  local res2=( ${!res[@]} )\n  # Loop through $2 removing\
    \ duplicates\n  for (( i=0; i<${#res2[@]}; i++ )); do\n    local this=${res2[$i]}\n\
    \    (( ${count[$this]} ))\n    (( ${count[$this]} > 1 )) && res2[$i]=\"\"\n \
    \ done\n  # Convert $2 from array to string\n  res2=( \"${res2[@]}\" )\n  # Return\
    \ $2\n  echo ${res2[@]}\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprrcqx5lz.sh: line 25: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -n arr=$1\n \
    \   local output\n    local i count=${#arr[*]}\n\n    for i in \"${!arr[@]}\"\
    ; do\n        if (( ${count:=$(( ${count} - 1 ))} > 0 )); then\n            output+=(\"\
    ${arr[i]}\")\n        fi\n    done\n\n    echo -n \"${output[*]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprke9z7vg.sh: line 9: local: `'': not a valid identifier

    /tmp/tmprke9z7vg.sh: line 9: local: `1 2 3 4'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n\tlocal xs=\"$1\"\n\tlocal\
    \ seen=()\n\tlocal output\n\tfor x; do\n\t\tif test -z \"$seen[$x]\" ; then\n\t\
    \t\tseen[$x]=1\n\t\t\toutput=\"$x\"\n\t\telse\n\t\t\toutput=$(echo \"$x\" | sed\
    \ 's/[0-9]*$/'\"$x\"'/g')\n\t\tfi\n\tdone\n\techo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=$1\n  local\
    \ unique=()\n  local i=0\n  while (( i < ${#list} )); do\n    (( i++ ))\n    local\
    \ j=$((i + 1))\n    (( j ))\n    if [[ ${unique[i]} != ${list[i]} ]]; then\n \
    \     unique=(${unique[@]/#${list[i]}})\n    fi\n  done\n  printf '\"%s\"' \"\
    ${unique[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  awk '!seen[$0]++' \"\
    $1\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=13 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660059640
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n\tlocal input=\"${1}\"\n\
    \tlocal output\n\tread -a output <<< \"$input\"\n\tfor i in \"${!output[@]}\"\
    ; do\n\t\t[[ \"${output[i]}\" != \"$i\" ]] || continue\n\t\toutput[i]=\"\"\n\t\
    done\n\techo \"${output[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    set -a\n    set +a\n\
    \    IFS=$'\\n' sorted=( $(sort -n <<< $1) )\n    set -b\n    set +b\n    shift\n\
    \    # Remove duplicates and store in new array\n    for element in \"${sorted[@]}\"\
    ; do\n        (( count[$element]++ )) || continue\n        if (( count[$element]\
    \ == 1 )); then\n            unset \"count[$element]\"\n            unset \"sorted[$element]\"\
    \n        else\n            unset count[$element]\n            unset sorted[$element]\n\
    \        fi\n    done\n    set -c\n    set +c\n    echo \"${sorted[@]}\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5dxn_kmk.sh: line 26: set: -c: invalid option

    set: usage: set [-abefhkmnptuvxBCHP] [-o option-name] [--] [arg ...]

    /tmp/tmp5dxn_kmk.sh: line 27: set: +c: invalid option

    set: usage: set [-abefhkmnptuvxBCHP] [-o option-name] [--] [arg ...]

    /tmp/tmp5dxn_kmk.sh: line 17: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=\"$1\"\n \
    \ local output\n  # echo \"list --> $list\"\n  list=$(echo \"$list\" | sed 's/\
    \ /,/g')\n  # echo \"list --> ${list}\"\n  output=\"\"\n  for el in ${list}; do\n\
    \    # echo \"el --> $el\"\n    if [[ \" $output \" != *\"$el\"* ]]; then\n  \
    \    # echo \"output --> $output\"\n      output=\"$output $el\"\n      # echo\
    \ \"output --> ${output}\"\n    fi\n  done\n  # echo \"output --> $output\"\n\
    \  echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local x\n\n  if [[ -z\
    \ \"$1\" ]]; then\n    echo \"No arguments provided\"\n    exit 1\n  fi\n\n  x=($(echo\
    \ \"$1\" | tr \" \" \"\\n\" | sort -n | uniq))\n  echo \"${x[*]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo \"${@:2}\"  |\
    \ sort | uniq -d\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n\tlocal sorted_list=$(echo\
    \ \"$1\" | tr ' ' '\\n' | sort -u)\n\techo \"$(echo \"$sorted_list\" | uniq -d)\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    set -euo pipefail\n\
    \    IFS=$'\\n' read -r -a array <<<\"$1\"\n    echo \"${array[@]}\" | sort |\
    \ uniq -u\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -n arr=$1 prev\
    \ i j\n    local -a seen\n    local -a tmp\n\n    # Convert input to array\n \
    \   IFS=$'\\t' read -r -a arr <<<\"$1\"\n\n    for i in \"${!arr[@]}\"; do\n \
    \       if [ \"$seen[$i]\" != \"$i\" ]; then\n            seen[$i]=\"$i\"\n  \
    \          tmp=($i)\n        fi\n    done\n\n    for j in \"${!seen[@]}\"; do\n\
    \        if [[ \"${arr[j]}\" == \"${arr[i]}\" ]]; then\n            unset arr[j]\n\
    \        fi\n    done\n\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmps8m7aeq5.sh: line 9: local: `'': not a valid identifier

    /tmp/tmps8m7aeq5.sh: line 9: local: `1 2 3 4'': invalid variable name for name
    reference

    /tmp/tmps8m7aeq5.sh: line 16: `0'': not a valid identifier

    /tmp/tmps8m7aeq5.sh: line 9: local: `1 2 3 2 4 3 5'': invalid variable name for
    name reference

    /tmp/tmps8m7aeq5.sh: line 16: `0'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    IFS=$'\\n'\n    set\
    \ -- $1\n    seen=()\n    output=()\n    while [ -n \"$1\" ]; do\n        if [\
    \ -z \"$seen[$1]\" ]; then\n            output+=(\"$1\")\n            seen[$1]=1\n\
    \        else\n            # Count number of occurrences of $1 and skip $1 if\
    \ it appears more than once\n            (( seen[$1]++ ))\n        fi\n      \
    \  shift\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw12ukwkl.sh: line 19: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    mapfile -t -t < <(printf\
    \ '%s\\0' \"$1\") | sort -z | uniq -z -d\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=$1\n   \
    \ local output\n    local index\n    local elem\n\n    output=$(echo ${list} |\
    \ tr ' ' '\\n' | sort -u)\n    index=1\n    while IFS= read -r elem; do\n    \
    \    [[ \"${elem}\" == \"${output}\" ]] && output=\"$( expr ${index} + 1 )\\n${output}\"\
    \n        [[ \"${elem}\" == \"${list}\" ]] && list=\"$( expr ${index} - 1 )\\\
    n${list}\"\n    done < <(echo \"${list}\")\n    echo \"${output}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo $(echo $1 | tr\
    \ ' ' '\\n' | sort | uniq | tr '\\n' ' ')\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=$1\n   \
    \ # shellcheck disable=SC2086\n    local uniques=$(sort | uniq -d)\n    # shellcheck\
    \ disable=SC2086\n    local count=$(sort ${list} | uniq -c | awk '{print $1}')\n\
    \    [[ -z ${uniques} ]] || [[ -z ${list} ]] || [[ -z ${count} ]] || {\n     \
    \   echo \"Error: list was ${list}, but only uniques were ${uniques}, count was\
    \ ${count}\"\n        exit 1\n    }\n    printf '%s\\n' \"${uniques[@]}\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=36 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=18 encoding='utf-8'>
  timestamp: 1660059640
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=$1\n  local\
    \ tmp\n\n  tmp=\"$(mktemp)\"\n  echo \"${list}\" | sort | uniq > \"${tmp}\"\n\
    \  while read -r item; do\n    list=\"${list}\" \"$item\"\n  done < \"${tmp}\"\
    \n\n  rm \"${tmp}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjjr13_ra.sh: line 15: : command not found

    /tmp/tmpjjr13_ra.sh: line 15: 1 2 3 4: command not found

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local seen=()\n  local\
    \ element\n  for element; do\n    seen+=(\"$element\")\n  done\n  printf \"%s\"\
    \ \"${seen[@]}\" | sort -u\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=\"$1\"\n \
    \ # Avoid using map() which is not available in zsh.\n  local tmp\n  local output\n\
    \  tmp=()\n  output=$(printf '%s\\n' \"$list\" | sort -u)\n  printf '%s\\n' \"\
    $output\"\n  printf '\\n'\n  for e in $output; do\n    tmp+=(\"$e\")\n  done\n\
    \  echo \"${tmp[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local tmpfile=`mktemp`\n\
    \    local IFS=' '\n    sort -u $1 >$tmpfile\n    # remove original and sort temp\
    \ file\n    rm $1 >/dev/null 2>&1\n    mv $tmpfile $1\n    return 0\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=38 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=27 encoding='utf-8'>
  timestamp: 1660059640
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local IFS=$1; local\
    \ x\n    local output; output=''\n    for x in $*; do\n        (( ${#output} >\
    \ 0 )) || output=\"$output $x\"\n    done\n    IFS=$' \\t\\n'; echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  # Convert input to a\
    \ regular list (split on spaces)\n  IFS=' ' read -ra list <<< \"$1\"\n  # Count\
    \ how many times each element appears\n  local count\n  local index\n  for i in\
    \ \"${list[@]}\"; do\n    count=\"${count[$i]-}\" || [[ $i ]]\n  done\n  # Output\
    \ elements that appear just once\n  printf '%s\\n' \"${!count[@]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # Using \"$@\" allows\
    \ spaces in the list\n    local string=\"$1\"\n    local output\n\n    while IFS=\
    \ read -r -d '' entry; do\n        if [[ \"${string}\" =~ $entry ]]; then\n  \
    \          string=${string/$entry}\n        fi\n    done < <(echo \"$string\"\
    )\n    echo \"$string\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n\
    \    local output\n    output=$(echo \"$list\" | tr ' ' '\\n' | sort -u)\n   \
    \ # echo \"${output}\"\n    echo \"${output}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local a\n    local\
    \ b\n    local count\n    local result\n    local i\n    local j\n    for a in\
    \ \"$@\"; do\n        count=0\n        for b in \"${a[@]}\"; do\n            ((\
    \ ++count ))\n            if [[ \"$b\" == \"$b\" ]] && [[ $count -gt 1 ]]; then\n\
    \                continue 2\n            fi\n        done\n        result+=( \"\
    $a\" )\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=\"$1\"\n \
    \ local last\n\n  # Sort the input first\n  sort <<< \"$list\"\n\n  # The output\
    \ is just a space-separated list of unique elements\n  while read -r item; do\n\
    \    [ \"$last\" != \"$item\" ] && printf '%s\\n' \"$item\"\n    last=\"$item\"\
    \n  done <<< \"$list\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo $1 |\n       \
    \ awk '{\n            seen=seen[$1]\n            if(!seen){\n                counts[$1]=1\n\
    \            }else{\n                delete seen[$1]\n                counts[$1]++\n\
    \            }\n            for (i in seen) {\n                print i\n     \
    \       }\n        }'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:2: (FILENAME=- FNR=1) fatal: attempt to use array `seen''
    in a scalar context

    awk: cmd. line:2: (FILENAME=- FNR=1) fatal: attempt to use array `seen'' in a
    scalar context

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    IFS=\" \" read -r -a\
    \ array <<< \"$1\"\n    IFS=\" \" read -r -a uniques <<< \"${array[@]}\"\n   \
    \ for i in \"${uniques[@]}\"; do\n        [[ $array != *\"$i\"* ]] && array+=(\"\
    $i\")\n    done\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo -n $1\n  for i in\
    \ $(seq 1 $((${#1}-1)))\n  do\n    found=0\n    flag=0\n    for j in $(seq 1 $((${#1}-1)))\n\
    \    do\n      if [ \"$i\" == \"$j\" ]; then\n        found=1\n        break\n\
    \      fi\n    done\n    if [ \"$found\" == \"0\" ]; then\n      echo $i\n   \
    \ fi\n  done\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local L=$1\n    local\
    \ REMOVE_DUPS=false\n    local IFS=$'\\n'\n    # loop through each number in the\
    \ list\n    for i in $L; do\n        # get the count of this number in the list\n\
    \        COUNT=`echo $L | tr \" \" \"\\n\" | grep $i | wc -l`\n        # if we\
    \ have a count of 1, then remove this number\n        if [ \"$COUNT\" -eq 1 ];\
    \ then\n            # strip the quotes out of the string\n            STR=$(\"\
    $1\" | sed \"s/^\\\"//\" | sed \"s/\\\"$//\")\n            REMOVE_DUPS=true\n\
    \            # remove this number from the list\n            echo $STR | tr \"\
    \ \" \"\\n\"\n        fi\n    done\n    if [ \"$REMOVE_DUPS\" = true ]; then\n\
    \        echo $L\n    else\n        echo \"$L\"\n    fi\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n\techo \"$1\" | sort |\
    \ uniq -d\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local output\n    local\
    \ -a elements\n    local -i index\n    elements=( \"$1\" )\n    shift\n    for\
    \ index in \"${!elements[@]}\"; do\n        if [[ ${elements[$index]} != ${elements[$((index+1))]}\
    \ ]]; then\n            output+=(${elements[$index]})\n        fi\n    done\n\
    \    echo \"${output[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo \"$1\" | sort -u\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo -n $1 | sed -e\
    \ 's/ /\\n/g' | sort | uniq\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -n arr=$1\n \
    \   local new_arr\n    new_arr=( )\n    for elt in \"${arr[@]}\"; do\n       \
    \ [[ ! ${new_arr+_} =~ .*\\[${elt}\\] ]] && new_arr+=(\"${elt}\")\n    done\n\
    \    printf '%s\\n' \"${new_arr[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph0slv8e7.sh: line 9: local: `'': not a valid identifier

    /tmp/tmph0slv8e7.sh: line 9: local: `1 2 3 4'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local i\n    IFS='\
    \ ' read -r -a array <<< \"$1\"\n    \n    for i in \"${array[@]}\"\n    do\n\
    \        local j\n        for j in \"${!array[@]}\"\n        do\n            if\
    \ [ \"$i\" = \"$j\" ]\n            then\n                unset \"array[$j]\"\n\
    \            fi\n        done\n    done\n    echo \"${array[@]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  # If only one argument\
    \ provided, it is the list of integers to remove.\n  local list_to_check=\"$1\"\
    \n  if [ \"$#\" -eq \"1\" ]; then\n    echo \"$list_to_check\" | tr \" \" \"\\\
    n\"\n  else\n    local sorted_list=$(sort -u <<< \"$list_to_check\")\n    local\
    \ duplicate_elements=$(sort <<< \"$sorted_list\" | uniq -u)\n    echo $duplicate_elements\n\
    \  fi\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=\"${1}\"\
    \n    local output=\"\"\n    declare -a seen=()\n    while IFS= read -r -d ' '\
    \ elem; do\n        if [[ \"${seen[elem]}\" ]]; then\n            continue\n \
    \       fi\n        output=\"${output} ${elem}\"\n        seen[elem]=1\n    done\
    \ <<< \"$input\"\n    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -n arr=\"$1\"\
    \n    local -a seen\n    local i\n\n    for (( i=0; i < ${#arr[@]}; i++ )); do\n\
    \        if (( ${seen[$arr[i]]} != 1 )); then\n            arr+=(\"$arr[i]\")\n\
    \        fi\n        seen[$arr[i]]=1\n    done\n\n    arr=(\"${arr[@]:1}\")\n\
    \    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvxbuhokc.sh: line 9: local: `'': not a valid identifier

    /tmp/tmpvxbuhokc.sh: line 9: local: `1 2 3 4'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    sort -u <<< \"$1\"\
    \ | tr ' ' '\\n'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo \"$1\" |\n    tr\
    \ -s ' ' \"\\n\" |\n    sort -u |\n    tr -s ' ' \"\\n\"\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input_array=\"\
    $1\"\n    local output=\"\"\n    local i=0 j=0\n    while [ \"${input_array[i]}\"\
    \ != \"\" ]; do\n        ((i++))\n        if [ \"${input_array[j]}\" != \"${input_array[i]}\"\
    \ ]; then\n            output=\"${output}${input_array[j]}\"\n            ((j++))\n\
    \        fi\n    done\n    if [ ${#output} -gt 0 ]; then\n        echo \"${output}\"\
    \n    else\n        echo \"$1\"\n    fi\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo $(grep -E -v '^(\\\
    s*\\S*)(\\s*\\S*)(?=.*\\1)' <<< \"$1\")\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=\"$1\"\
    \ output\n    input=\"${input// /$'\\n'}\"\n    IFS=$'\\n' read -r -d '' -a output\
    \ < <(sort -u <<<\"$input\")\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  awk '\n    BEGIN{FS=\"\
    [ \\t]+\"} \n    {\n      seen[gensub(/\\\"/,\"\\\\\"\",1,$1)] \n      if (seen[gensub(/\\\
    \"/,\"\\\\\"\",1,$1)]>1)\n        print $0\n    }\n  ' $1\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "awk: cmd. line:4: warning: regexp escape sequence `\\\"' is not a known\
    \ regexp operator\nawk: cmd. line:4:       seen[gensub(/\\\"/,\"\\\\\"\",1,$1)]\
    \ \nawk: cmd. line:4:                            ^ unterminated string\nawk: cmd.\
    \ line:4:       seen[gensub(/\\\"/,\"\\\\\"\",1,$1)] \nawk: cmd. line:4:     \
    \                       ^ syntax error\nawk: cmd. line:4: warning: regexp escape\
    \ sequence `\\\"' is not a known regexp operator\nawk: cmd. line:4:       seen[gensub(/\\\
    \"/,\"\\\\\"\",1,$1)] \nawk: cmd. line:4:                            ^ unterminated\
    \ string\nawk: cmd. line:4:       seen[gensub(/\\\"/,\"\\\\\"\",1,$1)] \nawk:\
    \ cmd. line:4:                            ^ syntax error\n"
  stdout: ''
  timestamp: 1660059635
- exit_code: 2
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=\"$1\"\n \
    \ # echo \"list: [$list]\"\n  IFS=\" \" read -r -a ary <<< \"$list\"\n  # echo\
    \ \"ary: [${ary[@]}]\"\n  # echo \"len: [${#ary[@]}]\"\n  local last_index count\n\
    \  # echo \"ary[0]: [${ary[0]}]\"\n  last_index=${#ary[@]}\n  count=${#ary[@]}\n\
    \  # echo \"last_index: [$last_index]\"\n  # echo \"count: [$count]\"\n  while\
    \ [[ $count -gt 0 ]]\n  do\n    # echo \"count: [$count]\"\n    # echo \"ary[$last_index-1]:\
    \ [${ary[$last_index-1]}]\"\n    # echo \"ary[$last_index-2]: [${ary[$last_index-2]}]\"\
    \n    # echo \"ary[$last_index-3]: [${ary[$last_index-3]}]\"\n    # echo \"ary[$last_index-4]:\
    \ [${ary[$last_index-4]}]\"\n    # echo \"ary[$last_index-5]: [${ary[$last_index-5]}]\"\
    \n    # echo \"ary[$last_index-6]: [${ary[$last_index-6]}]\"\n    # echo \"ary[$last_index-7]:\
    \ [${ary[$last_index-7]}]\"\n    # echo \"ary[$last_index-8]: [${ary[$last_index-8]}]\"\
    \n    # echo \"ary[$last_index-9]: [${ary[$last_index-9]}]\"\n    # echo \"ary[$last_index-10]:\
    \ [${ary[$last_index-10]}]\"\n    # echo \"ary[$last_index-11]: [${ary[$last_index-11]}]\"\
    \n    # echo \"ary[$last_index-12]: [${ary[$last_index-12]}]\"\n    # echo \"\
    ary[$last_index-13]: [${ary[$last_index-13]}]\"\n    # echo \"ary[$last_index-14]:\
    \ [${ary[$last_index-14]}]\"\n    # echo \"ary[$last_index-15]: [${ary[$last_index-15]}]\"\
    \n    # echo \"ary[$last_index-16]: [${ary[$last_index-16]}]\"\n    # echo \"\
    ary[$last_index-17]: [${ary[$last_index-17]}]\"\n    # echo \"ary[$last_index-18]:\
    \ [${ary[$last_index-18]}]\"\n    # echo \"ary[$last_index-19]: [${ary[$last_index-19]}]\"\
    \n    # echo \"ary[$last_index-20]: [${ary[$last_index-20]}]\"\n    # echo \"\
    ary[$last_index-21]: [${\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm8bqp309.sh: line 44: syntax error near unexpected token `}''

    /tmp/tmpm8bqp309.sh: line 44: `}''

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local item\n    local\
    \ unique=()\n\n    for item in $@; do\n        if ((${#unique[*]} > 0)); then\n\
    \            unique[$((${#unique[*]} - 1))]=\"$item\"\n        else\n        \
    \    unique+=(\"$item\")\n        fi\n    done\n\n    IFS=' '\n    echo \"${unique[*]}\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo \"$1\" | tr \"\
    \ \" \"\\n\" | sort | uniq -d | tr \"\\n\" \" \"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n\tlocal list=\"$1\"\n\n\
    \tfor i in $(seq 1 \"${#list[@]}\"); do\n\t\titem=\"${list[$i]}\"\n\t\tif ! [[\
    \ ${list[i]} =~ $item ]]; then\n\t\t\tlist=\"${list} ${list[$i]}\"\n\t\tfi\n\t\
    done\n\n\techo \"${list}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # https://stackoverflow.com/questions/34108639/how-to-remove-duplicates-from-list-with-shell-command\n\
    \    # $1 is a space-separated list\n    local list=\"$1\";\n    local seen=();\n\
    \    local i=0;\n\n    # Sort by first field, and remove duplicate items.\n  \
    \  for item in $list; do\n        if ! seen[$item] ; then\n            seen[$item]=1;\n\
    \            echo \"$item\";\n        fi;\n    done\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4wh_7hl1.sh: line 17: seen[1]: command not found

    /tmp/tmp4wh_7hl1.sh: line 17: seen[2]: command not found

    /tmp/tmp4wh_7hl1.sh: line 17: seen[3]: command not found

    /tmp/tmp4wh_7hl1.sh: line 17: seen[4]: command not found

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local x\n    read -a\
    \ array <<< \"$1\"\n    for x in \"${array[@]:1}\"\n    do\n        if [[ \"$x\"\
    \ =~ $x ]]\n        then\n            array=(\"${array[@]}\" \"$x\")\n       \
    \ fi\n    done\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    set -- $1 || return\
    \ 1\n\n    local i=0;\n    local str=\"\";\n    while [ $# -gt 0 ]; do\n     \
    \   local j=$((i+1));\n        if [ $i -gt 1 ]; then\n            str=\"${str}\
    \ $1\"\n        fi\n        if [ $i -eq 1 ]; then\n            str=\"${str} $1\"\
    \n        else\n            str=\"${str} $j\"\n        fi\n        i=$j\n    done\n\
    \    echo ${str% *}\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=44 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=42 encoding='utf-8'>
  timestamp: 1660059641
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input_array output_array\n\
    \    # Strip off any leading/trailing quotes so we can split on space\n    read\
    \ -d \"\" -r input_array <<< \"$1\"\n    IFS=' ' read -r -a output_array <<< \"\
    ${input_array[@]}\" | sort -u\n    echo \"${output_array[@]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    set -- $1 $2\n    local\
    \ sorted=( $(printf \"%s\\n\" \"${@:3}\" | sort -n) )\n    printf '%s\\n' \"${sorted[@]}\"\
    \ | uniq\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input_array=$1\n\
    \n    local temp\n    local index\n    local count\n    local output\n\n    #\
    \ remove duplicate elements\n    count=\"${#input_array}\"\n    index=0\n    output=()\n\
    \n    while [ $index -le $count ]; do\n        temp=\"${input_array[$index]}\"\
    \n        for (( j=0; j < $count; j++ )); do\n            if [ \"${input_array[$j+1]}\"\
    \ == \"${temp}\" ]; then\n                input_array=\"$input_array[@]:$j+2\"\
    \n                break\n            fi\n        done\n        output+=(\\\"${temp}\\\
    \")\n        index=$(( $index + 1 ))\n    done\n\n    echo \"${output[@]}\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n\tlocal str=\"$1\"\n\t\
    local -a arr=( )\n\tfor str in $( echo \"$str\" | tr \" \" \"\\n\" ); do\n\t\t\
    arr+=( \"$str\" )\n\tdone\n\techo \"${arr[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo \"$1\" | tr \" \"\
    \ \"\\n\" | sort | uniq -u\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  x=''\n  local i c\n \
    \ [[ \"$1\" = *\" \"$* ]] || printf \"%s\\n\" \"$1\" >&2\n  for ((i=0;i<${#1};\
    \ i++)); do\n    if [[ \"${x}\" != \"${1}:${i}\" ]]; then\n      x=\"${1}:${i}\"\
    \n      printf \"%s\\n\" \"$x\"\n    fi\n  done\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '

    1 2 3 4

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=( \"${@}\"\
    \ )\n    local seen=()\n    local output\n    output=$(IFS=' ' echo \"${list[*]}\"\
    )\n    IFS=$'\\n' seen=($(echo \"${output}\" | tr ' ' '\\n' | sort -u))\n    IFS=$'\\\
    n' output=($(echo \"${output}\" | tr ' ' '\\n' | grep -vE '^\\s*\"$'\"${seen[@]}\"\
    '\\s*$'))\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: 2: No such file or directory

    grep: 3: No such file or directory

    grep: 4\s*$: No such file or directory

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=\"$1\"\n\
    \    local output=$(echo $input | tr ' ' '\\n' | sort | uniq -d | tr '\\n' ' ')\n\
    \    echo $output\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n\
    \    local result\n    IFS=$'\\n' read -r -a array <<< \"$list\"\n    list=\"\
    ${array[*]}\"\n\n    IFS=\" $\" read -r -a array <<< \"$list\"\n    list=\"${array[@]}\"\
    \n\n    for element in ${list}; do\n        if [[ \"$result\" != \"$element\"\
    \ ]] && [[ ! -z \"$result\" ]]; then\n            result+=\" $element\"\n    \
    \    else\n            result=\"$element\"\n        fi\n    done\n\n    echo \"\
    $result\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local a=(\"$@\")\n\
    \    local i seen=()\n    printf -v seen '%(%s)' '${a[*]}'\n    for i in $(seq\
    \ 1 ${#a[@]})\n    do\n        if [[ \" ${seen[*]} \" =~ \" ${a[$i]} \" ]]; then\n\
    \            echo -n \"$a[$i]\"\n        else\n            seen+=(\"${a[$i]}\"\
    )\n        fi\n    done\n    printf '%s\\n' \"${seen[@]}\"\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "/tmp/tmp14671ll0.sh: line 11: printf: warning: `\0': invalid time format\
    \ specification\n"
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    sed -e 's/[[:space:]]*//g'\
    \ \"$1\" |\n        awk '\n            { if (seen[$0]) next }\n            { seen[$0]\
    \ = 1; }\n            END { print }\n        '\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: can''t read : No such file or directory

    sed: can''t read 1 2 3 4: No such file or directory

    '
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    IFS=$'\\n'\n    arr=($(sort\
    \ <<< \"$1\"))\n    arr=(${arr[@]:1}) # remove leading comma\n    arr=(${arr[@]/#/})\
    \ # remove leading quote\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    sed -e \"/^$1/!d\"\
    \ $1\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=40 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=28 encoding='utf-8'>
  timestamp: 1660059640
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local input=\"$1\"\n\
    \  local temp\n  local output\n  temp=$(echo \"$input\" |tr -s ' ' | tr ' ' '\\\
    n' | sort | uniq -u) ; output=\"$temp\"\n  echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo -n \"$(echo -n\
    \ $1 | tr \" \" \",\" | sort -u | tr -d \",\")\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local s=$1\n\n    echo\
    \ \"$s\" | sort | uniq -u\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    set -euxo pipefail\n\
    \    # $1: space-separated list\n    local list=\"$1\"\n    # $2: list to remove\
    \ from $list\n    local to_remove=\"$2\"\n    local duplicates=\"\"\n    IFS='\
    \ ' read -r -a array <<< \"$to_remove\"\n    for element in \"${array[@]}\"; do\n\
    \        local elements=($list)\n        local index=0\n        for element in\
    \ \"${elements[@]}\"; do\n            if [[ \"$element\" == \"$element\" ]]; then\n\
    \                ((index++))\n            else\n                if [[ \"$index\"\
    \ -gt 0 ]]; then\n                    duplicates=\"$duplicates $element\"\n  \
    \              fi\n            fi\n        done\n    done\n    set +euxo pipefail\n\
    \    echo \"${list[@]/$duplicates/}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '++ local list=

    /tmp/tmpcs2u1xij.sh: line 13: $2: unbound variable

    ++ local ''list=1 2 3 4''

    /tmp/tmpcs2u1xij.sh: line 13: $2: unbound variable

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n   set -- \"$1\"\n   shift\n\
    \   local i=0 count=0 prev=\"\"\n   while (( \"$#\" )); do\n      if [ \"$prev\"\
    \ != \"$1\" ]; then \n         count=$(( count+1 ))\n         prev=\"$1\"\n  \
    \    else\n         if [ \"$i\" -eq \"$count\" ]; then \n            # Remove\
    \ item\n            set -- \"$@\" \"$1\" \"$2\"\n            shift\n         \
    \   count=$(( count-1 ))\n         else\n            # Add item\n            set\
    \ -- \"$@\" \"$1\"\n         fi\n      fi\n      (( i++ ))\n   done\n   echo \"\
    $*\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=( $1 )\n\
    \    local count=0;\n    local result=()\n    for val in \"${list[@]}\"; do\n\
    \        (( count++ )) && result+=( \"${val}\" )\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=\"$1\"\n\
    \    local output=''\n    local i\n    for i in $input; do\n        case \"$output\"\
    \ in\n            '') output=\"$i\" ;;\n            *)\n                if [ \"\
    $output\" = \"$i\" ]; then\n                    output=\"${output} $i\"\n    \
    \            else\n                    output=\"$output, $i\"\n              \
    \  fi\n                ;;\n        esac\n    done\n    echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local string=$1 count=0\n\
    \    IFS=\" \" read -r -a array <<<\"$string\"\n    mapfile -t out < <(echo \"\
    ${array[@]}\" | sort -u)\n    IFS=\"$IFS_ORIG\"\n    echo \"${out[@]}\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo \"$1\" | tr ' '\
    \ \"$\" | sed 's/ /\\n/g' | sort | uniq -u\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local LIST=\"$1\"\n\
    \    local LIST_TMP\n    LIST_TMP=$LIST\n    local IFS=' '\n    # Strip whitespace\
    \ and quotes from input list.\n    LIST_TMP=${LIST_TMP//[[:space:]]/}\n    LIST_TMP=${LIST_TMP//\"\
    \\`\"/}\n    LIST_TMP=${LIST_TMP//'\\\"'/}\n    LIST_TMP=${LIST_TMP//$'\\n'/}\n\
    \    echo \"$LIST_TMP\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list\n    list=\"\
    ${1}\"\n\n    # Remove duplicates from each element in the list.\n    # e.g. [2\
    \ 3 2 4 1 4 2 3] --> [2 3 4 1 4 2 3]\n    echo \"${list}\" | sort -u | tr -d '\
    \ '\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\" counts=\"\
    $2\"\n    local output=\"\"\n    counts=$(echo \"$counts\" | tr '[:upper:]' '[:lower:]')\n\
    \    # Loop through lines of input\n    for word in $list; do\n        # Skip\
    \ first word\n        if [ -n \"$output\" ]; then\n            counts=$(echo \"\
    $counts\" | sed -n -e \"/^$word/p\" -e \"/$word$/p\")\n        fi\n    done\n\
    \    echo \"$counts\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo \"$1\" | sed 's/\
    \ /\" \"/g' | sort | uniq -u\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo \"$1\" | sed -e\
    \ \"s/ [^ ]*//g\" | sort | uniq -d\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n\
    \    local -a sorted_list=();\n    local item\n    for item in $list; do\n   \
    \     if [[ ${sorted_list[@]} =~ $item ]]; then\n            sorted_list+=(\"\
    $item\")\n        fi\n    done\n    sorted_list=($(remove_duplicate_items $sorted_list))\n\
    \    echo -n \"$sorted_list\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3a0xc5d2.sh: line 17: remove_duplicate_items: command not found

    /tmp/tmp3a0xc5d2.sh: line 17: remove_duplicate_items: command not found

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local a=()\n    local\
    \ IFS=' ' read -r -a a <<< \"$1\"\n    local output\n    output=$(IFS=, printf\
    \ '\"%s\" \\\\\\n' \"${a[@]}\" | sort | uniq)\n    eval \"$(printf \"echo '%s\\\
    ';\" \"$output\")\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoydzxrgi.sh: line 10: local: `-r'': not a valid identifier

    /tmp/tmpoydzxrgi.sh: line 10: local: `-a'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list_=$1\n  \
    \  local newlist_\n    local newlist_i\n    local i\n    local count\n    local\
    \ count_\n    for newlist_ in $(echo ${list_} | sed -e 's/ /\",\"/g')\n    do\n\
    \        count=0\n        count_=0\n        newlist_i=\"${newlist_}\"\n      \
    \  for ((i=1;i<${#newlist_i};i++))\n        do\n            if [[ ${newlist_i}\
    \ == ${newlist_i}[${i}] ]]\n            then\n                count_=$((${count_}+1))\n\
    \            else\n                if [[ ${count_} -gt 1 ]]\n                then\n\
    \                    newlist_i=${newlist_i:0:${i}}\n                    count_=$((${count_}-${i}))\n\
    \                    count=$((${count}+1))\n                else\n           \
    \         newlist_i=${newlist_i}\n                    count=$((${count}+1))\n\
    \                fi\n            fi\n        done\n        if [[ ${count} -gt\
    \ 1 ]]\n        then\n            echo ${newlist_i}\n        else\n          \
    \  echo ${newlist_}\n        fi\n    done\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n\
    \    shift\n    IFS=$'\\n' read -r -d '' -a array <<<\"$list\"\n    local element\n\
    \    local counter\n    local output\n    for (( counter=0; counter<${#array[@]};\
    \  counter+=1 )); do\n        element=${array[counter]}\n        output+=(\"$element\"\
    )\n        local tmp=()\n        for (( counter2=0; counter2<${#output[@]};  counter2+=1\
    \ )); do\n            if [ \"$element\" = \"${output[counter2]}\" ]; then\n  \
    \              # duplicate detected: replace with ${array[counter]}\n        \
    \        output[counter]=\"${array[counter]}\"\n            else\n           \
    \     tmp+=(\"${output[counter]}\")\n            fi\n        done\n        array=(\"\
    ${tmp[@]}\")\n    done\n    IFS=$'\\n' printf '%s\\n' \"${array[@]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local sorted_list\n\
    \    local unique_array\n\n    sorted_list=($(printf \"%s\\n\" \"$@\" | sort -u))\n\
    \n    unique_array=()\n    for element in \"${sorted_list[@]}\"; do\n        if\
    \ [[ \" ${unique_array[@]} \" =~ \" $element \" ]]; then\n            # element\
    \ has already been seen\n            continue\n        fi\n        unique_array+=(\
    \ \"$element\" )\n    done\n\n    printf \"%s\\n\" \"${unique_array[@]}\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  awk '{\n     for (i=1;\
    \ i<=NF; i++) {\n        arr[$i]\n     }\n     for (i in arr) {\n        count[arr[i]]\n\
    \     }\n     for (i in count) {\n        if (count[i] > 1) {\n           delete\
    \ arr[i]\n        }\n     }\n     for (i in arr) {\n        print arr[i]\n   \
    \  }\n  }'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=45 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=22 encoding='utf-8'>
  timestamp: 1660059641
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local a=()\n    local\
    \ L\n    read -a L <<< \"$1\"\n    for ((i=0; i<${#L[@]}; i++))\n    do\n    \
    \    if [[ \"${L[i]}\" == \"${L[i+1]}\" ]]\n        then\n            a+=( \"\
    ${L[i]}\" )\n        else\n            a+=( \"$L[i]\" )\n        fi\n    done\n\
    \    echo \"${a[*]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n\
    \    list=${list// /$'\\n'}\n    local output\n    IFS=$'\\n' output=($(sort -n\
    \ -k1,1 -k2,2n \"$list\"))\n    IFS=$'\\n' printf '%s\\n' \"${output[@]}\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: '''': No such file or directory

    sort: cannot read: ''1''$''\n''''2''$''\n''''3''$''\n''''4'': No such file or
    directory

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local i\n    local\
    \ s=${1:-}\n    local d\n    # $IFS holds the delimiter between items\n    IFS='\
    \ ' read -r -a d <<< \"$s\"\n    # $d now contains all unique items\n    # ${#d[@]}\
    \ is the number of items in d\n    # and ${#d[@]} is the number of unique items\n\
    \    # $* is the remaining elements, which are unique items\n    # ${#d[@]} -eq\
    \ ${#d[@]} is true when the unique items appear\n    # in the order they were\
    \ in the input\n    \n    # $* -eq 0 means the list is empty\n    if [ \"${#d[@]}\"\
    \ -eq 0 ]\n    then\n        echo \"\"\n        return\n    fi\n    \n    # $IFS\
    \ holds the delimiter between items\n    IFS=' ' read -r -a c <<< \"$*\"\n   \
    \ # $c now contains all unique items\n    # ${#c[@]} is the number of items in\
    \ c\n    # ${#c[@]} is the number of unique items\n    # $* is the remaining elements,\
    \ which are unique items\n    # ${#c[@]} -eq ${#c[@]} is true when the unique\
    \ items appear\n    # in the order they were in the input\n    \n    # $* -eq\
    \ 0 means the list is empty\n    if [ \"${#c[@]}\" -eq 0 ]\n    then\n       \
    \ echo \"\"\n        return\n    fi\n    \n    # $d is an array of elements from\
    \ input\n    # $c is an array of elements from input\n    \n    # loop through\
    \ every item in input (except the last one)\n    for i in \"${!d[@]}\"; do\n \
    \       # check if this item is in c already (it may not\n        # because of\
    \ the way the array was constructed)\n        if [ \"${c[$i]}\" ]; then\n    \
    \        # this item is in c, so remove it\n            unset \"c[$i]\"\n    \
    \    # this item is in d, so add it to the output\n        else\n            echo\
    \ \"\\\"${d[i]}\\\"\"\n        fi\n    done\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local input_list=$(remove_duplicates\
    \ \"$1\" | tr '\\n' ' ')\n  echo \"${input_list}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=37 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660059641
- exit_code: 2
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=\"$1\"\n\
    \    local tmp\n    # Trim whitespace and quotes from the list to make a string\
    \ we can use as an array.\n    # Since arrays must be passed with double-quotes,\
    \ we need to trim the\n    # leading quote on each line\n    for tmp in ${input#*^};\
    \ do\n        # Since arrays must be passed with double-quotes, we need to trim\
    \ the\n        # trailing quote on each line\n        tmp=\"${tmp%$'\\r'}\"\n\
    \        # Trim leading spaces and quotes\n        tmp=\"${tmp#'*'\\''}\"\n  \
    \      # Trim trailing spaces and quotes\n        tmp=\"${tmp%'\\r'}\"\n     \
    \   # Remove duplicates\n        set -- \"${tmp[@]}\" # Remove duplicate elements\n\
    \    done\n    echo \"${@}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuhjv1qft.sh: line 21: unexpected EOF while looking for matching
    `''''

    /tmp/tmpuhjv1qft.sh: line 40: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n\
    \n    # remove double quotes\n    list=\"$(echo \"$list\" | tr '\" \"' '\"' |\
    \ tr -d '\"')\"\n\n    # sort and uniq\n    list=\"$(echo \"$list\" | sort | uniq)\"\
    \n\n    # put back in quotes\n    list=\"$(echo \"$list\" | tr -d '\" \"' | tr\
    \ '\" \"' '\"')\"\n\n    echo \"$list\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local -n arr=$1\n  local\
    \ -a seen=()\n  local elem seen_p\n  for elem in ${arr[@]}; do\n    seen_p=\"\
    ${seen[@]}\"\n    for seen_elem in ${seen_p[@]}; do\n      if [[ \"${elem}\" =\
    \ \"${seen_elem}\" ]]; then\n        seen_p=()\n      else\n        seen_p+=(\"\
    ${seen_elem}\")\n      fi\n    done\n    seen=(\"${seen_p[@]}\")\n  done\n  echo\
    \ \"${seen[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpwp1odpkh.sh: line 9: local: `'': not a valid identifier

    /tmp/tmpwp1odpkh.sh: line 9: local: `1 2 3 4'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local str=$1\n    local\
    \ newstr\n    local laststr\n    local laststrcount\n    local lastintcount\n\
    \    local lastint\n    local intcount\n    local int\n    local count\n    local\
    \ skip\n    for str in $str; do\n        count=0\n        skip=true\n        newstr=\n\
    \        for str in $str; do\n            if [ $skip = true ]; then\n        \
    \        skip=false\n                newstr=\"${newstr} $str\"\n            fi\n\
    \            count=$((count+1))\n            if [ $count -gt 1 ]; then\n     \
    \           skip=true\n            fi\n        done\n        newstr=\"${newstr}\
    \ $str\"\n        laststr=${newstr#* }\n        laststrcount=${#laststr}\n   \
    \     lastintcount=$((laststrcount-1))\n        lastint=${laststr% *}\n      \
    \  if [ $laststrcount -gt 1 ]; then\n            newstr=\"${laststr} $newstr\"\
    \n        fi\n        if [ $laststrcount -eq 0 ]; then\n            newstr=\n\
    \        elif [ $lastintcount -eq 0 ]; then\n            newstr=${newstr#* }\n\
    \        fi\n        echo ${newstr//[[:space:]] }\n    done\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=$1\n\n \
    \   echo \"${list// /}\" | sed -E -e \"s/(.*) (\\1)*/\\1/g\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=\"$1\"\
    \ || return\n    local output seen=()\n    echo \"$input\" | while read -a line;\
    \ do\n        local items=()\n        for ((i=0; i<${#line[@]}; i++)); do\n  \
    \          if [[ ${seen[i]} == \"\" ]]; then\n                items+=(\"${line[i]}\"\
    )\n                seen[i]=\"1\"\n            fi\n        done\n        echo \"\
    ${items[@]}\"\n    done\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local str=\"$1\"\n\
    \    local uniques\n    local tmp\n\n    local i=0 j=0 k=0 l=0\n    local output\n\
    \    local tmp\n\n    echo \"$str\" | sed 's/ /\\n/g' | while read LINE; do\n\
    \        ((++i))\n        if [[ $i == 1 ]] ; then\n            uniques=\"$LINE\"\
    \n        else\n            uniques=\"$uniques $LINE\"\n        fi\n    done\n\
    \n    echo \"$uniques\" | sed 's/\\n/ /g'\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local array uniques\n\
    \    local i i_list\n\n    # split the list into an array and remove duplicates\n\
    \    array=( $(echo \"$1\" | tr \" \" \"\\n\" | sort -u ) )\n    uniques=( ${array[*]}\
    \ )\n    for ((i = 0; i < ${#uniques[@]}; i++)); do\n        i_list =\"${i_list},${i}\"\
    \n    done\n\n    # remove the commas from the list and replace with spaces\n\
    \    eval \"echo \\\"${uniques[*]// /,}\\\"\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuxj6knff.sh: line 16: i_list: command not found

    /tmp/tmpuxj6knff.sh: line 16: i_list: command not found

    /tmp/tmpuxj6knff.sh: line 16: i_list: command not found

    /tmp/tmpuxj6knff.sh: line 16: i_list: command not found

    /tmp/tmpuxj6knff.sh: line 16: i_list: command not found

    /tmp/tmpuxj6knff.sh: line 16: i_list: command not found

    /tmp/tmpuxj6knff.sh: line 16: i_list: command not found

    /tmp/tmpuxj6knff.sh: line 16: i_list: command not found

    /tmp/tmpuxj6knff.sh: line 16: i_list: command not found

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n\tlocal array=( ${1//[[:space:]]/}\
    \ )\n\tunset output\n\tseen=()\n\tfor element in \"${array[@]}\"; do\n\t\tif [[\
    \ -z \"${seen[$element]}\" ]]; then\n\t\t\toutput+=(\"$element\")\n\t\telse\n\t\
    \t\tseen[$element]=1\n\t\tfi\n\tdone\n\tprintf \"%s\\n\" \"${output[@]}\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n\tlocal IFS=' '\n\tawk\
    \ '!a[$1]++' \"$1\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=47 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=43 encoding='utf-8'>
  timestamp: 1660059641
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  # Ensure the input is\
    \ space-separated list.\n  local input_list=$1\n  local unique_list\n  local unique_list_index\n\
    \n  # Use a hash to prevent duplicates.\n  local hashed_input\n  local hashed_input_index\n\
    \n  for hashed_input in $(echo $input_list | tr ' ' '\\n' | sort -u); do\n   \
    \ hashed_input_index=\"${hashed_input:0:1}\"\n    # Check to see if this element\
    \ has already been encountered.\n    unique_list_index=0\n    unique_list=\"\"\
    \n    while [[ $unique_list_index -lt ${#unique_list} ]] && \\\n      [[ -n ${unique_list[$unique_list_index]}\
    \ ]] && \\\n      (( \"${hashed_input_index}\" == \"${unique_list[$unique_list_index]}\"\
    \ )); do\n      (( unique_list_index++ ))\n    done\n    # Append if unique.\n\
    \    if [[ ${unique_list[$unique_list_index]} ]]; then\n      unique_list+=\"\
    \ $hashed_input\"\n    fi\n  done\n  # Re-sort unique_list.\n  printf \"%s\\n\"\
    \ \"${unique_list[@]}\" | sort -u\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local seen=() # keep\
    \ track of which items we've seen\n    local output\n    local IFS=\"$1\"\n  \
    \  for input in \"$@\"; do\n        if [[ \" $seen \" =~ \" $input \" ]]; then\n\
    \            continue\n        fi\n        seen=\" $seen $input\"\n        output+=(\"\
    $input\")\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n\tlocal IFS=$'\\t' arr=($1)\
    \ ; # Split input by tabs\n\tseen=()                                  # Init seen\
    \ as empty array\n\tfor i in \"${arr[@]}\"; do                       # Loop over\
    \ all elements\n\t\tif [[ ! $seen =~ \" $i \" ]]; then         # If the current\
    \ element is not in the seen array, \n\t\t\tseen+=( \" $i \" )               \
    \       # add it to the seen array\n\t\tfi\n\tdone\n\techo $seen[@]          \
    \                  # Return sorted list\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local i\n    local\
    \ seen=\n    for i in $1 \n    do\n        seen=(\"${seen[@]}\" $i)\n    done\n\
    \    echo \"${seen[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -a list=\"$1\"\
    ; shift\n    local seen=()\n    while [[ $list ]]; do\n        if ! [[ ${seen[${#seen[@]}\
    \ + 1]} =~ \" $list \" ]];then\n            seen+=(\"$list\")\n        fi\n  \
    \      list=\"${list[@]}\"\n    done\n    local list\n}\n\ncandidate() {\n   \
    \ remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=41 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=25 encoding='utf-8'>
  timestamp: 1660059641
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local set unset duplicates\n\
    \  IFS=$'\\n' read -a list <<< \"$1\"\n  duplicates=()\n  for element in \"${list[@]}\"\
    ; do\n    [ -z \"$set\" ] || [[ \"$set\" == *\"$element\"* ]] || unset=\"$unset$element\"\
    \n    set -- \"$set\" \"$element\"\n  done\n  echo \"$unset\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local arr=$1\n    local\
    \ -a new_arr\n    local i\n    new_arr=()\n    for i in \"${arr[@]}\"; do\n  \
    \      if [[ ${new_arr[$i]} == \"\" ]]; then\n            new_arr[$i]=$i\n   \
    \     else\n            local j\n            for j in \"${!new_arr[@]}\"; do\n\
    \                if [[ ${new_arr[$j]} != $i ]]; then\n                    new_arr[$i]=${new_arr[$i]}\
    \ $j\n                fi\n            done\n        fi\n    done\n    new_arr=(${new_arr[@]})\n\
    \    printf \"%s\" \"${new_arr[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmw1g9zcd.sh: line 14: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  # shellcheck disable=SC2086\n\
    \  echo \"$1\" | sort -u | xargs\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=$1\n   \
    \ # Sort list so we can keep order of elements as in the input\n    sort <<< \"\
    $list\" | uniq -d\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo \"$1\" | tr '\
    \ ' '\\n' | sort | uniq -u\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input\n    local\
    \ output\n    input=$1\n    output=$(printf \"%s\" \"$1\" | sort -u)\n    output=${output//$'\\\
    n'/}\n    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo \"$1\" | tr \" \"\
    \ \"\\n\" | sort | uniq -u\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059635
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  # Avoid empty inputs.\n\
    \  [[ -z \"$1\" ]] && return 1\n  local i found out duplicates\n  IFS=$'\\n' read\
    \ -r -a duplicates <<< \"$1\"\n  for (( i=0; i < ${#duplicates[@]}; i++ )); do\n\
    \    found=0\n    out=()\n    for (( d=0; d < ${#duplicates[@]}; d++ )); do\n\
    \      [[ \"$duplicates[$i]\" == \"${duplicates[$d]}\" && \"$i\" != \"$d\" ]]\
    \ || continue\n      found=1\n      out+=(\"${duplicates[$i]}\")\n      i=$((i+1))\n\
    \      break\n    done\n    [[ $found -eq 0 ]] && continue\n    out+=(\"${duplicates[$i]}\"\
    )\n    found=0\n    for (( d=0; d < ${#duplicates[@]}; d++ )); do\n      [[ \"\
    $duplicates[$i]\" == \"${duplicates[$d]}\" && \"$i\" != \"$d\" ]] || continue\n\
    \      found=1\n      out+=(\"${duplicates[$i]}\")\n      i=$((i+1))\n      break\n\
    \    done\n    [[ $found -eq 0 ]] && return 1\n    IFS=$' ' read -r -a out <<<\
    \ \"${out[*]}\"\n    out=( \"${out[@]}\" )\n    printf '%s\\n' \"${out[@]}\"\n\
    \  done\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local x=\"${1}\"\n\
    \    shift\n\n    echo $x | tr ' ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -a list=( \"\
    $1\" )\n    # Remove all elements that occur more than once\n    while [[ ${#list[@]}\
    \ -gt 0 ]]; do\n        local -a unique=()\n        for e in \"${list[@]}\"; do\n\
    \            [[ \"${unique[@]}\" =~ \" ${e} \" ]]\n            unique+=( \"$e\"\
    \ )\n        done\n        list=(${unique[@]})\n    done\n    echo \"${list[@]}\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=67 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=65 encoding='utf-8'>
  timestamp: 1660059641
- exit_code: 2
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local tmpfile templine\
    \ tmplist\n  tmplist=\"($@)\"\n  IFS=$'\\n' read -a tmplist <<<\"$tmplist\"\n\
    \  for tmpfile in $tmplist; do\n    while IFS= read -r templine; do\n      [[\
    \ \"$tmpline\" != *\"$templine\"* ]] &&\n        ((tmpline+=\" $templine\")\n\
    \        echo $tmpline > \"$tmpfile\"\n    done < <(sort --unique \"$tmpfile\"\
    )\n  done\n  rm -f \"$tmpfile\"\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp49clc5xx.sh: line 17: syntax error near unexpected token `done''

    /tmp/tmp49clc5xx.sh: line 17: `    done < <(sort --unique "$tmpfile")''

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    set -- $1 $( IFS=$'\\\
    n'; echo \"$1\" | tr ' ' '\\n' | sort -u -n -r )\n    echo -n \"$1\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list_string=$1\n\
    \    echo \"$list_string\" | awk -F' ' '{\n        hash[$1]++\n        for (i\
    \ in hash) {\n            if (hash[i] > 1) {\n                delete hash[i]\n\
    \            }\n        }\n    }1' | tr -d '\"'\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local array=( \"$1\"\
    \ )\n  local seen=( $array )\n  local result=()\n  local i\n\n  for ((i=0; i <\
    \ ${#array[@]}; i++)); do\n    local j\n    for ((j=0; j < ${#seen[@]}; j++));\
    \ do\n      if [[ ${seen[j]} -eq $array[i] ]]; then\n        local k\n       \
    \ for k in ${seen[@]:k}; do\n          seen[k]=\n        done\n        seen[((k+j))]=\n\
    \      else\n        result+=(\"${array[i]}\")\n        break\n      fi\n    done\n\
    \  done\n\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphogrjwbo.sh: line 17: [[: 1 2 3 4[i]: syntax error in expression
    (error token is "2 3 4[i]")

    /tmp/tmphogrjwbo.sh: line 17: [[: 1 2 3 2 4 3 5[i]: syntax error in expression
    (error token is "2 3 2 4 3 5[i]")

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=\"$1\"\n \
    \ echo \"$list\" | tr \" \" \"\\n\" | sort | uniq -u\n}\n\ncandidate() {\n   \
    \ remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  awk '!x[$0]++'\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=51 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660059641
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local tmp=${1//[[:space:]]}\n\
    \    local count=0\n    local unique=()\n\n    while read -r line; do\n      \
    \  ((count++))\n        unique+=(\"$line\")\n    done <<< \"$tmp\"\n    echo \"\
    ${unique[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n\tlocal list seen=()\n\t\
    for element in \"${@}\"; do\n\t\tfor i in \"${!seen[@]}\"; do\n\t\t\tif [[ $i\
    \ == $element ]]; then\n\t\t\t\tseen[i]=\"-$element\"\n\t\t\t\tbreak\n\t\t\tfi\n\
    \t\tdone\n\t\tlist+=(\"$element\")\n\tdone\n\techo \"${list[*]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n\
    \    local temp=()\n    for i in $list; do\n        if [[ \"${temp+=(\"$i\")}\"\
    \ != \"$list\" ]]; then\n            temp+=(\"$i\")\n        fi\n    done\n  \
    \  echo \"${temp[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -n list=$1; shift\n\
    \    local unique=()\n    for item in $list; do\n        [[ ${unique[$item]} ]]\
    \ || unique+=( \"$item\" )\n    done\n    printf '%s\\n' \"${unique[@]}\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp08xugaq2.sh: line 9: local: `'': not a valid identifier

    /tmp/tmp08xugaq2.sh: line 9: local: `1 2 3 4'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local in_list=$(echo\
    \ \"$1\" | tr '[:lower:]' '[:upper:]')\n  local in_list_sorted=$(echo \"$in_list\"\
    \ | sort | tr '[:upper:]' '[:lower:]' | uniq -d)\n  local out_list=$(echo \"$in_list\"\
    \ | tr ' ' '\\n' | grep -v \"$in_list_sorted\" | tr '[:upper:]' '[:lower:]')\n\
    \  echo \"$out_list\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo $1 | tr \" \"\
    \ \"\\n\" | sort -u | grep -v '^$'\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n\
    \    local tmp=()\n    local count=0\n    for item in $list; do\n        if [[\
    \ \" ${tmp[@]} \" =~ \" $item \" ]]; then\n            ((count++))\n        else\n\
    \            tmp+=($item)\n        fi\n    done\n    # trim leading space\n  \
    \  tmp=( \"${tmp[@]}\" )\n    if (( count > 0 )); then\n        tmp=( \"${tmp[@]:1}\"\
    \ )\n    fi\n    echo \"${tmp[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    IFS=$'\n    '\n   \
    \ set $( IFS=$'\\n'; echo \"$1\" | tr ' ' '\\n' | sort -u )\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local IFS=\"$1\"\n\
    \    sort -n --unique --field-separator=\" \" \"$@\" |\n    tr -d '[:space:]'\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: '''': No such file or directory

    sort: cannot read: ''1 2 3 4'': No such file or directory

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local i\n    local\
    \ result\n    local input\n    IFS=$' \\t\\n'\n    input=\"$1\"\n    echo \"$input\"\
    \ | sort -u | while read i ; do\n        result=\"$result \\\"$i\\\"\"\n    done\n\
    \    echo \"$result\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local input=\"$1\"\n\
    \  local unique_input=()\n  while read -r line; do\n    # Each line contains a\
    \ number in double quotes, so we use read -r\n    # to read in the value as a\
    \ single string instead of a string.\n    unique_input+=(\"$line\")\n  done <<<\
    \ \"$input\"\n\n  printf '%s\\n' \"${unique_input[@]}\" | sort -u | tr '\\n' '\
    \ '\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local _out\n\n    _out=\"\
    $(printf \"%s\\n\" \"$1\" | sort -u | tr -d '\\n')\"\n\n    printf '[\"%s\"]'\
    \ \"$_out\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local array element\n\
    \  array=( $1 )\n  for i in ${!array[@]}; do\n    element=${array[$i]}\n    for\
    \ j in ${!array[@]}; do\n      if [[ $i -lt $j ]]; then\n        array[$i]=${array[$j]}\n\
    \        array[$j]=$element\n        break\n      fi\n    done\n  done\n  echo\
    \ ${array[@]}\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local tmp=()\n    local\
    \ IFS=\"$1\"\n    local i\n\n    local seen=()\n    for i; do\n        if ! [[\
    \ ${seen[$i]} ]]; then\n            tmp=(\"${tmp[@]}\" \"$i\")\n            seen[$i]=1\n\
    \        fi\n    done\n\n    # reverse the order\n    local tmp2=()\n    for i\
    \ in \"${tmp[@]}\"; do\n        tmp2=(\"${tmp2}\" \"$i\")\n    done\n\n    echo\
    \ \"${tmp2[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=${1:-}\n\
    \    local output=''\n    for i in $input; do\n        if [[ -z \"$output\" ]];\
    \ then\n            [[ \"$i\" == \"$output\" ]] && continue\n            output=\"\
    $output\"$' '\"$i\"\n        else\n            output=\"$output\"$' '\"$i\"' '\n\
    \        fi\n    done\n    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local IFS=\"$1\"\n\
    \    local -a array=()\n    local i\n    for (( i=0; i < ${#1[@]}; ++i )); do\n\
    \        array+=(\"$(( ${array[i]} + 1 ))\")\n    done\n    IFS=\"\n\" set --\
    \ \"${array[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqykxkubt.sh: line 12: i < ${#1[@]}: bad substitution

    /tmp/tmpqykxkubt.sh: line 12: i < ${#1[@]}: bad substitution

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n\tlocal tmp=\"\"\n\tlocal\
    \ array=$1\n\tlocal count=0\n\tfor word in $array; do\n\t\t((count++))\n\t\tif\
    \ [[ \"$word\" != \"$tmp\" ]] && [[ \"$count\" -gt 1 ]]; then\n\t\t\ttmp=\"$word\"\
    \n\t\tfi\n\tdone\n\techo $tmp\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=\"$1\"\n\
    \n    local output=\"\"\n    local i=0 j=0\n    for element in ${input}; do\n\
    \        (( j++ ))\n        if [ \"$output\" != \"\" ]; then\n            local\
    \ last_element=$(cut -d\\\" -f1 <<< ${output})\n            local last_element_num=$(cut\
    \ -d\\\" -f2 <<< ${output})\n            if [ \"$last_element\" == \"$element\"\
    \ ] || [ \"$last_element_num\" == \"$j\" ]; then\n                # Keep the order\n\
    \                echo \"$output\"\n                i=0\n                output=\"\
    \"\n            else\n                output += \"$element \"\n            fi\n\
    \        else\n            output += \"$element \"\n        fi\n    done\n   \
    \ echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3vhop0pm.sh: line 27: output: command not found

    /tmp/tmp3vhop0pm.sh: line 27: output: command not found

    /tmp/tmp3vhop0pm.sh: line 27: output: command not found

    /tmp/tmp3vhop0pm.sh: line 27: output: command not found

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=( $( IFS=$'\\\
    n'; echo \"${1}\" | tr '[:upper:]' '[:lower:]' ) )\n    local -a output\n    local\
    \ i duplicate\n    for ((i=0; i<${#list[@]}; i++)); do\n        duplicate=0\n\
    \        for ((j=i+1; j<${#list[@]}; j++)); do\n            if [[ ${list[i]} ==\
    \ ${list[j]} ]]; then\n                duplicate=1\n            fi\n        done\n\
    \        if [[ $duplicate != 0 ]]; then\n            output+=( ${list[i]} )\n\
    \        fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local uniques\n   \
    \ local uniques_count=0 \n\n    uniques=( $(echo \"$1\" | tr \" \" \"\\n\" ) )\n\
    \    for val in \"${uniques[@]}\"; do\n        if [ $uniques_count = \"${#uniques[@]}\"\
    \ ]; then\n            uniques+=( \"$val\" )\n            break\n        fi\n\
    \        if [ ! -z \"${uniques[$uniques_count + 1]}\" ]; then\n            if\
    \ [ \"$val\" == \"${uniques[$uniques_count + 1]}\" ]; then\n                uniques+=(\
    \ \"${uniques[$uniques_count]}\" \"$val\" )\n                uniques_count=$((\
    \ uniques_count + 1 ))\n            else\n                uniques+=( \"$val\"\
    \ )\n            fi\n        fi\n    done\n    echo \"${uniques[@]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -a list; local\
    \ line; local newlist; local -a visited=(); local -a unique; local -a count; local\
    \ i\n\n    # Convert list to array\n    IFS=$'\\n'\n    list=( \"${@}\" )\n\n\
    \    # Sort list to simplify removing duplicates\n    for ((i=0; i<${#list[*]};\
    \ i++)); do\n        unique[$i]=${list[i]}\n    done\n    IFS=\n    for ((i=0;\
    \ i<${#unique[*]}; i++)); do\n        visited[$i]=false\n    done\n\n    # Remove\
    \ duplicates in list\n    for ((i=0; i<${#list[*]}; i++)); do\n        while [\
    \ \"$visited[$i]\" == false ]; do\n            ((i++))\n            if [ \"$i\"\
    \ == \"${#list[*]}\" ]; then\n                break\n            fi\n        \
    \    if [ \"$visited[$i]\" == true ]; then\n                continue\n       \
    \     fi\n            if [ \"$unique[$i]\" == \"${list[i]}\" ]; then\n       \
    \         unique[$i]=\n                visited[$i]=\n            fi\n        done\n\
    \        if [ \"$visited[$i]\" == false ]; then\n            newlist+=( \"$unique[$i]\"\
    \ )\n        fi\n    done\n\n    # Convert list to space-separated list\n    IFS='\
    \ ' read -a newlist <<<\"${newlist[@]}\"\n    echo \"${newlist[@]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo $1 | tr ' ' '\\\
    n' | sort | uniq -d\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n\
    \    # Convert to an array.\n    local -a values\n    IFS=\" \" read -r -a values\
    \ <<< \"$list\"\n    # Count the number of occurrences of each value.\n    local\
    \ count\n    count=()\n    for value in \"${values[@]}\"; do\n        ((count[$value]+=1))\n\
    \    done\n    # Sort the counted values so the order is preserved.\n    for value\
    \ in \"${!count[@]}\"; do\n        local countValue=\"$value\"\n        ((countValue))\n\
    \    done\n    local lastValue\n    for value in \"${values[@]}\"; do\n      \
    \  if ((count[$value]>1)); then\n            # Keep the order of the sorted elements.\n\
    \            countValue=\"$value\"\n        fi\n    done\n    # Unsort the countValues,\
    \ appending them to the sorted values.\n    for value in \"${!count[@]}\"; do\n\
    \        countValue=\"$value\"\n        ((countValue))\n    done\n    # Convert\
    \ back to a space-separated list.\n    local -a values\n    for value in \"${countValues[@]}\"\
    ; do\n        values+=(\"$value\")\n    done\n    # Remove all elements that occur\
    \ more than once.\n    echo \"${values[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n\tlocal list=\"$1\"\n\t\
    local newlist=''\n\tfor item in $list; do\n\t\tnewlist+=\"\\\"$item\\\" \" \n\t\
    done\n\techo \"$newlist\" | sed 's/ //g' | sort -u | tr -d ' '\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local _mylist_=$1\n\
    \    _mylist_=\"${_mylist_// /, }\"\n    _mylist_=\"${_mylist_%?}\"\n    echo\
    \ \"${_mylist_}\" | sort -u | tr -d '\"'\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=\"$1\"\n\
    \    local output=\"$2\"\n\n    local i\n    local seen\n\n    for i do\n    \
    \    if [ \"$i\" = \"$output\" ]; then continue; fi\n\n        seen=\"false\"\n\
    \        for j in $output ; do\n            if [ \"$i\" = \"$j\" ]; then seen=\"\
    true\"; break; fi\n        done\n\n        if [ \"$seen\" = \"true\" ]; then continue;\
    \ fi\n\n        output+=\" $i\"\n    done\n\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo \"${@}\" | tr\
    \ \" \" \"\\n\" | sort | uniq -d\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list_in=\"$1\"\n\
    \  local list_out=\"$2\"\n\n  echo \"${list_in}\" | tr ' ' '\\n' | sort | uniq\
    \ -u \\\n    >\"${list_out}\" 2>/dev/null || true\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzqbgs33p.sh: line 12: : No such file or directory

    /tmp/tmpzqbgs33p.sh: line 12: : No such file or directory

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    IFS=$'\\n'\n    set\
    \ -A list\n    list=($(sort -n $1))\n    list=(${list[@]#\"${list[0]}\"})\n  \
    \  IFS=' '\n    echo \"${list[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=56 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=52 encoding='utf-8'>
  timestamp: 1660059641
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo -n ${1} | sed\
    \ 's/ /\\n/g' | sort | uniq -d | sed 's/$/\\\\n/g'\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local var\n    local\
    \ i\n    local last\n    local output\n    local -a uniques\n    local seen\n\n\
    \    # $1: List of integers\n    for var in \"$1\"\n    do\n        seen=\n  \
    \      for (( i=1; i<${#var}; i++ ))\n        do\n            [[ \"${uniques[$i]}\"\
    \ == \"\" ]] &&\n                seen=$(( seen + 1 ))\n            uniques[$i]=$((\
    \ uniques[$i] - 1 ))\n        done\n        if (( seen == 1 ))\n        then\n\
    \            output+=(\"$var\")\n        else\n            uniques[${#uniques[@]}]=$((\
    \ unique + 1 ))\n        fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local lines=$(echo $1\
    \ | sed 's/^ *//g' | sed 's/ *$//g' | sed \"s/ /\\n/g\")\n  lines=$(echo $lines\
    \ | sed 's/^ *//g' | sed 's/ *$//g' | sed \"s/ /\\n/g\")\n  echo $lines\n  while\
    \ read line; do\n    # Remove duplicates\n    echo -n \"${line// /}\"\n  done\
    \ < <(echo $lines | sort -u)\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local set results i\
    \ item\n    for i in $*; do\n        if ! [[ $i =~ (^|[[:space:]])${i}($|[[:space:]])\
    \ ]]; then\n            set -- \"$item\" \"$i\"\n        fi\n    done < <(sort\
    \ -u)\n    set -- \"${set[@]}\"\n    for result in $*; do\n        echo \"$result\"\
    \n    done\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=24 encoding='utf-8'>
  timestamp: 1660059641
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -n a=$1\n   \
    \ local i seen[$i]\n    declare -i j\n    for (( i=0; i<${#a[@]}; i++ )); do\n\
    \        for (( j=0; j<${#seen[@]}; j++ )); do\n            [[ \"$a\" != \"${seen[$j]}\"\
    \ && \"$a\" != \"${a[$i]}\" ]] &&\n            seen[$j]=\"$a\" &&\n          \
    \  a=\"${a[$j]}\";\n        done\n    done\n    echo $a\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyj90x1g9.sh: line 9: local: `'': not a valid identifier

    /tmp/tmpyj90x1g9.sh: line 10: local: `seen[]'': not a valid identifier

    /tmp/tmpyj90x1g9.sh: line 9: local: `1 2 3 4'': invalid variable name for name
    reference

    /tmp/tmpyj90x1g9.sh: line 10: local: `seen[]'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    set -- $1 \n    local\
    \ items=()\n    local seen=()\n    for item in \"${@:2}\"; do\n        if ! [[\
    \ -v ${seen[$item]} ]]; then\n            seen[$item]=1\n            items+=(\"\
    $item\")\n        fi\n    done\n    echo \"${items[*]}\"\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local seen=() out\n\
    \    while IFS= read -r; do\n        if [[ \" ${seen[@]} \" =~ \" ${REPLY} \"\
    \ ]]; then\n            continue\n        fi\n        seen+=(\"$REPLY\")\n   \
    \     out+=(\"$REPLY\")\n    done <<<\"$1\"\n    echo \"${out[@]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local sorted_list=$(echo\
    \ $1 | tr \" \" \"\\n\")\n    local all_duplicates=()\n    local unique_lists=()\n\
    \    for element in $sorted_list; do\n        if [[ \"${all_duplicates[@]}\" =~\
    \ \" $element \" ]];then\n            unique_lists+=(\"$element\")\n        else\n\
    \            all_duplicates+=(\" $element \")\n        fi\n    done\n    echo\
    \ \"${unique_lists[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local i\n  local seen=()\n\
    \  for i in \"$1\"; do\n    if [[ -z ${seen[i]} ]]; then\n      seen[i]=1;\n \
    \     echo \"$i\"\n    fi\n  done\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnqf_77q7.sh: line 12: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  declare -a unsorted=(\
    \ \"$@\" )\n  declare -a sorted=()\n  declare -i last=-1\n  declare -i i\n  while\
    \ IFS=\" \" read -r value ; do\n    (( last++ ))\n    if [[ $last -eq $value ]]\
    \ ; then\n      # already seen this element\n      continue\n    fi\n    sorted+=(\
    \ \"${sorted[@]}\" \"$value\" )\n  done < <( printf \"%s\\n\" \"${unsorted[@]}\"\
    \ | sort -u )\n  printf '%s\\n' \"${sorted[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps8khvytn.sh: line 15: [[: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")

    /tmp/tmps8khvytn.sh: line 15: [[: 1 2 3 2 4 3 5: syntax error in expression (error
    token is "2 3 2 4 3 5")

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local array=$1\n  local\
    \ unique_arr=()\n  local unique_count=0\n  for i in ${array[@]}; do\n    if [[\
    \ ${unique_count} -eq 0 ]]; then\n      unique_arr+=(\"$i\")\n      unique_count=1\n\
    \    else\n      local j=`expr $unique_count - 1`\n      local temp=${unique_arr[j]}\n\
    \      unique_arr[j]=$i\n      unique_count=$(( $unique_count + 1 ))\n      unique_arr+=(\"\
    $temp\")\n    fi\n  done\n  echo ${unique_arr[@]}\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local L\n    local\
    \ i ii ix x\n    L=\"${1// /$'\\n\"'}\"\n    i=1\n    while [[ $L =~ ^[0-9]*$([^0-9]*)\
    \ ]]; do\n        x=\"$L\"\n        i=$(($i+1))\n        (( i++ ))\n        ((\
    \ ii=$ix ))\n        (( ix++ ))\n        L=\"${x// /$'\\n\"'}\"\n    done\n  \
    \  echo \"${L//$'\\n'/ }\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=48 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=9 encoding='utf-8'>
  timestamp: 1660059641
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local i seen=()\n \
    \   local tmp\n\n    for i in \"$1\" ; do\n        if [[ -v seen ]] ; then\n \
    \           seen+=(\"$i\")\n        else\n            seen=(\"$i\")\n        fi\n\
    \    done\n\n    for (( i=1; i<${#seen[@]}; i++ )); do\n        tmp=\"${seen[$i]}\"\
    \n        unset seen[$i]\n        seen+=(\"$tmp\")\n    done\n\n    echo \"${seen[@]}\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n\
    \    shift\n    local tmpfile=$(tempfile)\n    local outfile=${1:-/dev/null}\n\
    \    local tmplist\n    while read -r listelem; do\n        if [[ \"$listelem\"\
    \ != \"$list\" ]]; then\n            if [[ -z \"$tmplist\" ]]; then\n        \
    \        tmplist=\"$listelem\"\n            else\n                tmplist=\"$tmplist\
    \ $listelem\"\n            fi\n        else\n            echo \"$tmplist\" > \"\
    $tmpfile\"\n            echo \"$listelem\" >> \"$tmpfile\"\n            list=\"\
    $tmplist\"\n        fi\n    done < \"$list\"\n    echo \"$list\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp41ddxurx.sh: line 8: : No such file or directory

    /tmp/tmp41ddxurx.sh: line 8: 1 2 3 4: No such file or directory

    /tmp/tmp41ddxurx.sh: line 8: 1 2 3 2 4 3 5: No such file or directory

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # echo \"$1 ${1[*]}\"\
    ;\n    local var=\"\\${${1^^}}\"\n    # echo \"$var\";\n    local str=\n    local\
    \ i=1\n    # echo \"$var\"\n    while [ \"$i\" -le ${#var} ]\n    do\n       \
    \ str=\"${str} ${var[$i]}\"\n        i=$(( i + 1 ))\n    done\n    # echo \"$str\"\
    \n    str=\"${str^^}\"\n    # echo \"$str\"\n    # echo \"$str\"\n    eval \"\
    $str\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 2
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local in=${1// /$'\\\
    n'}\n  local in=\"${in//[[:blank:]]*\\[/$'\\n[']}\"\n  local in=\"${in//[[:blank:]]*\\\
    ]/$'}'\n  echo \"$in\" | sort -u\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwqd3b77t.sh: line 23: unexpected EOF while looking for matching
    `"''

    /tmp/tmpwqd3b77t.sh: line 27: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n\tlocal list=\"$1\"\n\t\
    shift\n\tlocal newlist=\"\"\n\n\t# Escape double quotes since we will use them\
    \ in the output\n\tlist=\"$( echo \"$list\" | sed 's/\"/\\\\\"/g' )\"\n\n\t# Remove\
    \ duplicate elements\n\tset $list\n\twhile [ ${#1} -gt 0 ]; do\n\t\tlocal element=\"\
    $1\"\n\t\tshift\n\t\tif [ \"$(grep -Fxq \"$element\" <<< \"$newlist\")\" ]\n\t\
    \tthen\n\t\t\tcontinue\n\t\telse\n\t\t\tnewlist=\"$newlist $element\"\n\t\tfi\n\
    \tdone\n\n\t# Return result with original order of elements\n\techo \"$newlist\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=$1\n  local\
    \ new_list=''\n\n  local item\n  for item in $list; do\n    local index=0\n  \
    \  while [ $index != 0 ]; do\n      if [ \"$new_list\" == \"$item\" ]; then\n\
    \        index=$((index+1))\n      else\n        new_list=\"$new_list $item\"\n\
    \        index=0\n      fi\n    done\n  done\n\n  echo \"$new_list\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=$(echo \"\
    $1\" | sed -e 's/ /\" \" ') \\\n           | sed -e 's/ \" /\"/g'\n    local res\n\
    \    local i\n    for (( i=1; i <= ${#list[@]} ; i++ )); do\n        local j\n\
    \        for (( j=0 ; j < (( ${#list[@]} - i )) ; j++ )); do\n            if [[\
    \ \"${list[$j+i]}\" == \"${list[$j]}\" ]]; then\n                (( i == j+1 ))\
    \ && continue\n            else\n                break\n            fi\n     \
    \   done\n        if (( j == ${#list[@]} )) ; then\n            res=\"${res} ${list[$i]}\"\
    \n        fi\n    done\n    echo \"$res\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 8: unterminated `s'' command

    sed: -e expression #1, char 8: unterminated `s'' command

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -a seen=()\n\
    \    local -a result=()\n    local i=0\n    while read -r number; do\n       \
    \ [[ ${seen[i]} ]] || result+=(\"$number\")\n        ((i++))\n    done <<< \"\
    $1\"\n    echo \"${result[*]}\"\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local tmp=${1// /}\n\
    \    echo -n \"${tmp// /}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    set -- \"${@/#/\\\"\
    \\$1\\\"}\"\n    local output seen\n    output=$(echo \"${@}\" | tr \" \" \"\\\
    n\" | sort -u | grep -v \"^$\")\n    seen=${output// }\n    echo \"$seen\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local new_list new_set\
    \ i o\n    IFS=$'\\n' read -a new_list <<< \"$1\"\n    new_set=()\n    for i in\
    \ \"${new_list[@]}\"; do\n        if [[ -n \"${new_set[$i]}\" ]]; then\n     \
    \       echo \"$i: duplicate\"\n        else\n            new_set[$i]=1\n    \
    \    fi\n    done\n    for o in \"${!new_set[@]}\"; do\n        new_list[o]=\"\
    \"\n    done\n    echo \"${new_list[*]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvtuct0nz.sh: line 13: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n\
    \    local output\n\n    declare -A seen\n    IFS=$'\\n' read -r -a lines <<<\"\
    $list\"\n    output=()\n    for line in \"${lines[@]}\"; do\n        key=$line\n\
    \        ((seen[$key]++))\n    done\n    for key in \"${!seen[@]}\"; do\n    \
    \    line+=($key)\n    done\n    echo \"${lines[@]}\"\n}\n\ncandidate() {\n  \
    \  remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local arr i ret\n\n\
    \    arr=$1\n\n    if [[ -z \"${arr}\" ]]; then\n        return 1\n    fi\n  \
    \  IFS=' ' read -a arr <<< \"$arr\"\n    IFS=' ' read -a ret <<< \"${arr[*]}\"\
    \n\n    # Remove duplicates\n    for ((i=${#arr[*]} - 1; ; i--)); do\n       \
    \ if [[ \"${arr[i]}\" == \"${arr[i+1]}\" ]]; then\n            arr[i]=''\n   \
    \     fi\n    done\n\n    arr=( \"${arr[@]}\" )\n\n    # Append back\n    for\
    \ ((i=${#arr[*]} - 1; ; i--)); do\n        if [[ -z \"${arr[i]}\" ]]; then\n \
    \           break\n        fi\n        arr[i]=\"$arr[i+1]\"\n    done\n\n    IFS='\
    \ ' read -a ret <<< \"${arr[@]}\"\n    echo \"${ret[@]}\"\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7uj_ehj7.sh: line 21: arr: bad array subscript

    /tmp/tmp7uj_ehj7.sh: line 21: arr: bad array subscript

    /tmp/tmp7uj_ehj7.sh: line 21: arr: bad array subscript

    /tmp/tmp7uj_ehj7.sh: line 22: arr[i]: bad array subscript

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local input=${1:-$*}\n\
    \  local output\n  output=$(echo \"${input}\" | tr ' ' '\\n' | sort | uniq -d)\n\
    \  echo ${output}\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    set -A counts {}\n\
    \    for element in $1;\n    do\n        (( ${counts[$element]} )) && printf -v\
    \ element '\"%s\"' \"$element\" || printf -v element '\\''\"$element\"'\\'''\n\
    \        (( ${counts[$element]+=1 }))\n    done\n    printf '%s\\n' \"${!counts[@]}\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe1eu2ov0.sh: line 9: set: -A: invalid option

    set: usage: set [-abefhkmnptuvxBCHP] [-o option-name] [--] [arg ...]

    /tmp/tmpe1eu2ov0.sh: line 9: set: -A: invalid option

    set: usage: set [-abefhkmnptuvxBCHP] [-o option-name] [--] [arg ...]

    /tmp/tmpe1eu2ov0.sh: line 13: "$element"'': syntax error: operand expected (error
    token is ""$element"''")

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  sed -n '\n    /^\"\\\
    $/ !{ \n      h; n; s/\\n/ /g; \n      p; d; }; s/^ *//; s/ *$//'\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=63 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=60 encoding='utf-8'>
  timestamp: 1660059641
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=\"$1\"\n\
    \    local output=\"$(mktemp -t --suffix=.list -- <<< \"${input}\")\"\n    local\
    \ elements=()\n    while IFS= read -r line; do\n        elements+=(\"$line\")\n\
    \    done < \"$output\"\n    sort -u \"$output\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list_str=\"$1\"\
    \n    local tmpstr=\"\"\n    local tmpstr1=\"\"\n    local tmpstr2=\"\"\n    local\
    \ output\n\n    # Trim quotes\n    list_str=$(echo \"${list_str}\" | sed -e 's/\"\
    //g')\n    IFS=' ' read -r -a tmparr <<< \"${list_str}\"\n\n    for i in \"${!tmparr[@]}\"\
    ; do\n        if [[ \"${tmparr[$i]}\" != \"${tmparr[$(( i + 1 ))]}\" ]]; then\n\
    \            if [[ \"${tmpstr}\" != \"\" ]]; then\n                output=\"${output}\
    \ ${tmpstr}\"\n                tmpstr=\"\"\n            fi\n            tmpstr=\"\
    ${tmparr[$i]}\"\n        fi\n    done\n    if [[ \"${tmpstr}\" != \"\" ]]; then\n\
    \        output=\"${output} ${tmpstr}\"\n    fi\n    echo \"${output}\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    sort -u | sed 's/ /\"\
    \ \"/g' | sed 's/\"/ /g'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=57 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=39 encoding='utf-8'>
  timestamp: 1660059641
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local seen=()\n   \
    \ local unseen=${1// /-}\n    local output=''\n\n    for item in ${unseen}; do\n\
    \        if [ ${seen[$item]} ]; then\n            output=\"${output} '${item}'\"\
    \n        else\n            seen[$item]=true\n        fi\n    done\n\n    echo\
    \ \"${output}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmptyw9augf.sh: line 14: seen: bad array subscript

    /tmp/tmptyw9augf.sh: line 17: seen[$item]: bad array subscript

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local IFS=\"$1\"; shift\n\
    \    set -- \"$@\" # to work around Bash 4.3 not having \"$@\" as an array\n \
    \   declare -A seen=()\n    local output\n    for item; do\n        if [[ ${seen[$item]}\
    \ ]]; then\n            output+=\"$item\"\n        else\n            seen[$item]=1\n\
    \        fi\n    done\n    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # $1 is expected to\
    \ be a space-separated list\n    local sorted_list sorted_list2\n    sorted_list=\"\
    $(IFS=\" \" ; echo \"$1\")\"\n    sorted_list2=\"$(sort <<<\"$sorted_list\")\"\
    \n    sed -e \"s/^/\\\"/\" -e \"s/ $//\" <<<\"$sorted_list2\" > \"$sorted_list2.sort\"\
    \n    sort -n \"$sorted_list2.sort\" > \"$sorted_list2.sort.dedup\"\n    echo\
    \ \"$sorted_list2.sort.dedup\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=\"$1\"\n \
    \ # If the input is not already a list, make it a list.\n  if [[ -z \"$list\"\
    \ ]]; then\n    list=\"$(echo $list | xargs)\"\n  fi\n  # Strip whitespace\n \
    \ list=\"$(echo $list | tr -d '[:space:]')\"\n  # Sort list into order and remove\
    \ duplicates.\n  echo \"$list\" | sort | uniq -d\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n\
    \    local uniques=\"$(\n        echo \"$list\"\n        | awk '{for (i=1;i<=NF;i++)\
    \ if (seen[$i]++) printf \"%s%s\", $i, (i==NF ? ORS : OFS)}'\n    )\"\n    echo\
    \ \"$uniques\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpyfnqu124.sh: command substitution: line 16: syntax error near unexpected
    token `|''

    /tmp/tmpyfnqu124.sh: command substitution: line 16: `        | awk ''{for (i=1;i<=NF;i++)
    if (seen[$i]++) printf "%s%s", $i, (i==NF ? ORS : OFS)}''''

    /tmp/tmpyfnqu124.sh: command substitution: line 16: syntax error near unexpected
    token `|''

    /tmp/tmpyfnqu124.sh: command substitution: line 16: `        | awk ''{for (i=1;i<=NF;i++)
    if (seen[$i]++) printf "%s%s", $i, (i==NF ? ORS : OFS)}''''

    '
  stdout: ''
  timestamp: 1660059636
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n\
    \    list=$(echo \"${list}\" | tr \" \" \"\\n\")\n    echo \"${list}\" | sort\
    \ -u | xargs -d '\\n' echo\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    set -- $( IFS=' ' $1\
    \ )\n    local output\n    output=$( sort -u )\n    echo -n \"$( IFS=' ' $output\
    \ )\"\n    tail -n +2 $1 | xargs echo -n\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=26 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=53 encoding='utf-8'>
  timestamp: 1660059641
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=$1 result=()\n\
    \  for element in $list; do\n    if [[ ${result[*]} != *\"\\\"$element\\\"\"*\
    \ ]]; then\n      result+=(\"\\\"$element\\\"\")\n    fi\n  done\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059636
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    sort -u | sed 's/\"\
    $//g'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=50 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=5 encoding='utf-8'>
  timestamp: 1660059641
