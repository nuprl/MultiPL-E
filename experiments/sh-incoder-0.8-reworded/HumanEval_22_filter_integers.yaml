name: HumanEval_22_filter_integers
language: sh
prompt: "#!/bin/bash\n# Filter given list of any shthon values only for integers\n\
  # >>> $(filter_integers \"a 3.14 5\")\n# ['\"5\"']\n# >>> $(filter_integers \"1\
  \ 2 3 abc  \")\n# ['\"1\"', '\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\n\
  filter_integers() {\n"
tests: "}\n\ncandidate() {\n    filter_integers \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"4   23.2 9 adasd\") =\
  \ \"4 9\" ]]\n    [[ $(candidate \"3 c 3 3 a b\") = \"3 3 3\" ]]\n}\n\nrun_test"
completions: ["    local list_str=\"$1\"\n    local int_str\n    local i n\n\n   \
    \ int_str=\"[]\"\n    n=$(echo \"$list_str\" | grep -E \"^[0-9]+$\")\n\n    for\
    \ ((i=0; i<$n; i++)); do\n        int_str=\"$int_str '${list_str#*[^0-9]}'\"\n\
    \        list_str=\"${list_str##*[^0-9]}\"\n    done\n\n    echo \"$int_str\"",
  "\tlocal IFS= read -r -a values <<< \"$1\"\n\tlocal IFS= read -r -a filtered <<<\
    \ \"$(for v in \"${values[@]}\"; do echo $(( ${v#*=}+0 )); done )\"\n\tIFS= echo\
    \ \"${filtered[@]}\"", "    local _ret=0\n    local _pos1=$(( ${#1} + 1 ))\n \
    \   local _spaces1=$(( ${#1} - _pos1 ))\n    local _pos2=$(( ${#2} + 1 ))\n  \
    \  local _spaces2=$(( ${#2} - _pos2 ))\n    local _pos3=$(( ${#3} + 1 ))\n   \
    \ local _spaces3=$(( ${#3} - _pos3 ))\n    while :\n    do\n        _pos1=$((\
    \ _pos1 + 1 ))\n        _spaces1=$(( _spaces1 - 1 ))\n        _pos2=$(( _pos2\
    \ + 1 ))\n        _spaces2=$(( _spaces2 - 1 ))\n        _pos3=$(( _pos3 + 1 ))\n\
    \        _spaces3=$(( _spaces3 - 1 ))\n        if [ ${#1[$_pos1]} -eq 0 ]; then\n\
    \            _pos1=$_pos1\n            _spaces1=$_spaces1\n            _pos2=$_pos2\n\
    \            _spaces2=$_spaces2\n            _pos3=$_pos3\n            _spaces3=$_spaces3\n\
    \            break\n        fi\n        if [ ${#2[$_pos1]} -eq 0 ]; then\n   \
    \         _pos2=$_pos1\n            _spaces2=$_spaces1\n            _pos3=$_pos2\n\
    \            _spaces3=$_spaces2\n            break\n        fi\n        if [ ${#3[$_pos1]}\
    \ -eq 0 ]; then\n            _pos3=$_pos1\n            _spaces3=$_spaces1\n  \
    \          break\n        fi\n        if [ ${#1[$_pos1]} -gt 1 ] || [ ${#2[$_pos1]}\
    \ -gt 1 ] || [ ${#3[$_pos1]} -gt 1 ]; then\n            if [ ${#1[$_pos1]} -gt\
    \ 1 ] && [ ${#2[$_pos1]} -gt 1 ] && [ ${#3[$_pos1]} -gt 1 ]; then\n          \
    \      eval \"$1=(\\\"${1[$_pos1]}\\\" \\\"${2[$_pos1]}\\\" \\\"${3[$_pos1]}\\\
    \")\"\n            elif [ ${#1[$_pos1]} -gt 1 ] && [ ${#2[$_pos1]} -gt 1 ]; then\n\
    \                eval \"$1=(\\\"${1[$_pos1]}\\\" \\\"${2[$_pos1]}\\\")\"\n   \
    \         elif [ ${#1[$_pos1]} -g", "  eval \"$(sed 's/ /\\n/g' <<< \"$1\")\"\n\
    \  unset IFS\n  local i=0\n  while read -r val; do\n    case \"$val\" in\n   \
    \   *[0-9]* )\n        echo $val\n        ;;\n    esac\n  done <<< \"${@:2}\"",
  "    local i res\n    for i; do\n        [[ $i =~ ^[[:digit:]]+$ ]] || continue\n\
    \        res=$i\n    done\n    echo \"$res\"", "    local list=\"$1\"\n    local\
    \ filtered=''\n    for item in $list; do\n        if [ \"$item\" -gt 0 ]; then\n\
    \            if [ \"$item\" -lt 100 ]; then\n                filtered=\"$filtered$item\
    \ \"\n            fi\n        fi\n    done\n    echo $filtered", '  echo "$(echo
    "$1" | grep -E "^[0-9]+$")"', "    echo \"$1\" | sed -e 's/^\\s*\\(\\s*[0-9]*\\\
    )\\s*$/\\1/'", "    local x=\"$1\"\n    [[ $1 =~ ([0-9]+\\.?[0-9]+|[0-9]+) ]]\
    \ || return $x\n    echo $x", "    IFS=$'\\n' read -r -a a <<< \"$1\"\n    IFS='\
    \ ' read -a b <<< \"$1\"\n    IFS=' ' read -a c <<< \"$1\"\n    IFS='.' read -r\
    \ -a d <<< \"$1\"\n    IFS=' ' read -a e <<< \"$1\"\n    echo \"$a[@]\" | grep\
    \ -Ev '^-?[0-9]+$' | sed 's/\"$//g' | sort -n | uniq", "    local values=$(echo\
    \ \"$1\" | tr -cd ' -' );\n    local integers=$(echo $values | sed -r 's/[^0-9]+/\\\
    n/g' | tr -d '\\n');\n    local integers_only=$(echo $integers | tr -cd '\\n'\
    \ );\n    echo \"$integers_only\";", "    local -n args=$1\n    local IFS=' '\n\
    \    local IFS_NEW=${IFS}\n    IFS=${IFS_NEW}\n    local -a a\n    for a in \"\
    ${args[@]}\"; do\n        [[ \"$a\" =~ ^[0-9]+$ ]] || args+=(\"$a\")\n    done\n\
    \    IFS=${IFS_OLD}\n    echo -n \"${args[*]}\"", '   grep "^[[:space:]]*[0-9]+$"
    $1', "  # $2 is the list of strings we filter\n  for item in $(echo $1 | sed 's/\
    \ /\",\"/g'); do\n    # $item is a space-separated string containing one integer\n\
    \    if [[ $item =~ ^[0-9]+$ ]]; then\n      # echo \"$item\" is an integer -\
    \ add it to the list\n      echo $item\n    fi\n  done", "  local -a values=(\
    \ \"${1##*:}\" )\n  local -a ints=()\n\n  for value in \"${values[@]}\"; do\n\
    \    [ -z \"${value}\" ] || [[ \"$value\" = *[!0-9]* ]] || continue\n    ints+=(\
    \ \"$value\" )\n  done\n\n  echo \"${ints[*]}\"", "    # Remove blanks before\
    \ sorting\n    local list_with_numbers\n    list_with_numbers=$( sed \"s/^ *//;\
    \ s/ *$//\" <<<\"$1\" )\n    # Sort and remove blanks\n    list_with_numbers=$(\
    \ sort | sed \"s/^ *//; s/ *$//\" <<<\"$list_with_numbers\" )\n    # Remove blanks\n\
    \    list_with_numbers=$( echo \"$list_with_numbers\" | sed \"s/^ *//; s/ *$//\"\
    \ )\n    echo \"$list_with_numbers\"", "    local IFS=\"$1\"\n    shift\n    echo\
    \ \"$@\" | sed -e 's/^ *//' -e 's/ *$//' | grep -Eoe '[0-9]\\+' -e '[0-9]*' |\
    \ sort -u", "    local _IFS=\" [[:space:]]\" _list_ _out_\n    _list_=\"$1\";\n\
    \    _IFS=\"[^ ]\"\n    _out_=$(eval \"printf '%s,' ${_list_//,/ }\");\n    printf\
    \ '%s\\n' \"${_out_%,}\"", "    local IFS=$1\n    shift\n    IFS=' '\n    echo\
    \ \"$*\"", "  local IFS=$'\\t' item\n  for x in $@; do\n    item=\"$(echo $x |\
    \ tr '\\t' ' ' | sed 's/^ *//' | sed 's/ *$//')\"\n    item=\"$(echo $item | sed\
    \ 's/^ //' | sed 's/ *$//')\"\n    echo $item\n  done", "  local values=$1\n \
    \ local integer number\n  local result=()\n\n  for integer in \"${values//[!0-9]/\
    \ }\"; do\n    number=\"$(echo \"$integer\" | grep -o '[0-9]')\"\n    if [ -z\
    \ \"$number\" ]; then\n      result+=(\"$integer\")\n    else\n      result+=(\"\
    \\\"$number\\\"\")\n    fi\n  done\n  echo ${result[*]}", "  local string=\"$1\"\
    \n  local integers=()\n  local results=()\n  local count=0\n  local integer=\"\
    \"\n  local digit=\"\"\n  local escaped_character=\"\"\n  local escaped_digit=\"\
    \"\n  local escaped_space=\"\"\n  local escaped_comma=\"\"\n\n  for char in ${string//[!a-zA-Z0-9.,]+/\
    \ }; do\n    if [[ \"$char\" == \"$escaped_character\" ]]; then\n      integers[$count]=\"\
    $integer\"\n      count=$(( $count + 1 ))\n      integer=\"\"\n      escaped_character=\"\
    \"\n      escaped_digit=\"\"\n      escaped_space=\"\"\n      escaped_comma=\"\
    \"\n    elif [[ \"$char\" == \"$escaped_digit\" ]]; then\n      integers[$count]=\"\
    $integer\"\n      count=$(( $count + 1 ))\n      integer=\"\"\n      escaped_character=\"\
    \"\n      escaped_digit=\"\"\n      escaped_space=\"\"\n      escaped_comma=\"\
    \"\n    elif [[ \"$char\" == \"$escaped_space\" ]]; then\n      integers[$count]=\"\
    $integer\"\n      count=$(( $count + 1 ))\n      integer=\"\"\n      escaped_character=\"\
    \"\n      escaped_digit=\"\"\n      escaped_space=\"\"\n      escaped_comma=\"\
    \"\n    elif [[ \"$char\" == \"$escaped_comma\" ]]; then\n      integers[$count]=\"\
    $integer\"\n      count=$(( $count + 1 ))\n      integer=\"\"\n      escaped_character=\"\
    \"\n      escaped_digit=\"\"\n      escaped_space=\"\"\n      escaped_comma=\"\
    \"\n    else\n      integer+=\"$char\"\n      escaped_character+=\"\\\\$char\"\
    \n    fi\n  done\n  integers[$count]=\"$integer\"\n  results=($(\n    IFS='\n\
    \    '\n    mapfile -t integers < <(\n      printf '%s\\n' \"${integers[@]}\"\n\
    \    )\n  ))\n  IFS=$' \\t\\n'\n  return \"${results[@]}\"", "    local IFS=$1\n\
    \    local i\n\n    local output\n    output=()\n    for ((i=1; i<=${#1}; i++))\n\
    \    do\n        # convert string to integer and check if it is an int\n     \
    \   output+=($(if [[ \"${1}\" =~ (^|\\s)([[:digit:]]+)($|\\s)[[:space:]]+$ ]];\
    \ then echo \"${BASH_REMATCH[1]}\"; else echo \"\"; fi))\n    done\n    echo \"\
    ${output[@]}\"", "  local integers=$1\n\n  integers=$(echo $integers | tr -d '\
    \ \\t\\n')\n  integers=$(echo $integers | awk '{print $1}')\n\n  # Filter out\
    \ non-integers\n  integers=$(echo $integers | grep -Ev '^-?[0-9]+\\.?[0-9]*$'\
    \ | sed 's/^[+-]//g')\n\n  # Filter out -ve\n  integers=$(echo $integers | grep\
    \ -vE '^-?[0-9]+\\.?[0-9]*$')\n\n  # Convert float to int\n  integers=$(echo $integers\
    \ | tr -cd '[:digit:]')\n\n  echo $integers", "  declare -a vals\n  IFS=' ' read\
    \ -ra vals <<< \"$1\"\n  vals=( $(compgen -A integer -- \"${vals[@]}\") )\n  printf\
    \ '[%s]' \"${vals[@]}\"", "\tlocal item=$1\n\tlocal list=$(echo \"$1\" | tr '\
    \ ' ',')\n\techo \"${list}\" | grep -E '^[0-9]+'", "    local i output\n    IFS=\"\
    \ \" read -a array <<< \"$1\"\n    output=()\n    for i in \"${array[@]}\"; do\n\
    \        [[ ${i} =~ ^[0-9]+$ ]] && output+=(\"${i}\")\n    done\n    echo \"${output[@]}\"",
  "  declare -i n\n  declare -i ndigits\n  declare -i min\n  declare -i max\n  declare\
    \ -i maxlen\n\n  ndigits=${#1}\n  min=0\n  max=$(( ${ndigits} - 1 ))\n  if [ $ndigits\
    \ -gt 0 ]; then\n    while [ $(( ndigits-- )) -gt 0 ]; do\n      max=$(( max-1\
    \ ))\n    done\n  fi\n\n  maxlen=$(( ${#max} + 1 ))\n  eval \"echo \\${$1[$((\
    \ min - 2 ))]:$(( max - 1 )):$maxlen}\"", "  local x\n  x=$1\n  shift\n  echo\
    \ \"$x\" | sed -e 's/^ *//g' -e 's/ *$//g' | grep -Eo '^[0-9]+$'", "    local\
    \ items=$1\n    local quoted=$(echo \"$items\" | sed -e 's/ /\" \" /g')\n    local\
    \ string=$(echo \"$quoted\" | sed -e 's/ /\" \"/g')\n    local integers=($(echo\
    \ \"$string\" | sed -e 's/\"//g' | grep \"^[0-9]*$\" | xargs))\n    echo \"$integers\"",
  "  local values=$@\n  local output\n  for value in $values; do\n    if [[ $value\
    \ =~ ^[0-9]+$ ]]; then\n      # Found a string, report the whole string\n    \
    \  output=\"$value\"\n      break\n    fi\n  done\n  echo $output", "  local input=$1\n\
    \  shift\n  local filtered=\n  local numbers=()\n  local output=\"$1\"\n  local\
    \ sep=$(IFS=)\n\n  local filter_int filter in\n  for filter in ${sep}\n  do\n\
    \    filter_int=\"^([1-9][0-9]*|0)$filter\"\n  done | while read -r filter; do\n\
    \    in=$filter\n    case \"${input:${#in}}\"\n      in\n      \"${sep}\") ;;\n\
    \      *) ;;\n    esac\n    if [[ ${input:${#in}} = ${filter_int} ]]; then\n \
    \     numbers+=(${input})\n      input=${input:3}\n    fi\n  done\n\n  if [[ ${#numbers[@]}\
    \ -eq 0 ]]; then\n    filtered=()\n  else\n    filtered=(\"${input[@]}\")\n  fi\n\
    \n  if [[ ${#filtered[@]} -eq 0 ]]; then\n    echo \"$output\"\n  else\n    echo\
    \ \"${filtered[@]}\"\n  fi", "    local values=$1\n    local integer_regex='^[0-9]+$'\n\
    \    local integer_list=$2\n\n    integer_list=${integer_list//,/ }\n\n    while\
    \ read -r line ; do\n        integer_list+=( \"$line\" )\n    done < <(find .\
    \ -type f -regex \"$integer_regex\" -print0)\n\n    # Return only integer values\
    \ in list\n    local filtered_list=''\n\n    for value in ${integer_list[@]};\
    \ do\n        if [[ \"${value}\" =~ ${integer_regex} ]]; then\n            filtered_list+=(\
    \ \"${value}\" )\n        fi\n    done\n\n    echo $filtered_list", "    # First\
    \ filter all non-numeric values\n    local output\n    output=$( echo \"$1\" |\
    \ tr ' ' '\\n' | sed -e \"s/^[^0-9]*//;s/[^0-9]*$//;s/ /\\n/g\" )\n    # Now filter\
    \ only integers\n    local output\n    output=$( echo \"$output\" | grep -Ev \"\
    ^0\\|^1\\|^\\.\\|^\\.\\.\\|^\\.\\.\\.\\|^\\.\\.\\.\\.\\|^\\.\\.\\.\\.\\.\\.\\\
    .\\.\\.\\.\\|^\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\|^\\.\\.\\.\\.\\.\\.\\.\\\
    .\\.\\.\\.\\.\\|^\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\|^\\.\\.\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\|^\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\|^\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\|^\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\\.\\|^\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\\
    .\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.", "  IFS=' '\n  for i in $*; do\n\
    \    if [[ $i =~ ^-?[0-9]+$ ]]; then\n      echo \"$i\"\n    fi\n  done", "  \
    \  local args=(\"$@\")\n    IFS=\" \" read -r -a array <<<\"$1\"\n\n    declare\
    \ -a out\n    for var in \"${array[@]}\"; do\n        [[ -n ${var// /.} ]] ||\
    \ continue\n        if [[ $var =~ ^-?[0-9]+$ ]]; then\n            IFS='.' read\
    \ -r -a arr <<< \"$var\"\n            arr=( \"${arr[@]}\" )\n            out+=(\
    \ \"$var\" )\n        fi\n    done\n\n    for var in \"${out[@]}\"; do\n     \
    \   echo \"$var\"\n    done", "    IFS=' ' read -r -a list <<< \"$1\"\n    IFS='\
    \ ' read -r -a filteredList <<< \"\"\n    for val in \"${list[@]}\"; do\n    \
    \    if [[ $val =~ ^[0-9]+$ ]]; then\n            filteredList+=(\"$val\")\n \
    \       fi\n    done\n    IFS=' ' echo \"${filteredList[@]}\"", "\tlocal arg=\"\
    $1\"\n\tshift\n\tlocal quoted=\"$1\"\n\tshift\n\tlocal result=()\n\tlocal i\n\n\
    \twhile [ \"$i\" -lt \"$quoted\" ]; do\n\t\t[ \"${arg:$i:1}\" -eq \"-\" ] && break\n\
    \t\t[ \"${arg:$i:1}\" -ge '0' ] && break\n\t\tresult+=(\"$i\")\n\t\t(( ++i ))\n\
    \tdone\n\techo \"${result[@]}\"", "  local s=$1\n  local integers=()\n  for var\
    \ in $s; do\n    integers+=($(echo $var | sed -e 's/^ *//g' -e 's/ *$//g'))\n\
    \  done\n  echo \"${integers[*]}\"", "    local IFS=$1\n    local list=\"$2\"\n\
    \n    local new_list=''\n    local i=${#list[@]}\n    local element\n\n    while\
    \ (( i > 0 )); do\n        if [[ ${list[--i]} == [0-9]* ]]; then\n           \
    \ new_list=\"$new_list \\\"${list[--i]}\\\" \"\n        fi\n    done\n    # remove\
    \ last space from list\n    new_list=\"${new_list%?}\"\n    echo $new_list", " \
    \  cat <<EOF\n$(cat - | tr -s ' ' | cut -d' ' -f2 | sed -e 's/[[:space:]]*$//g')\n\
    EOF", "    local output=\"$1\"\n    local input=\"$2\"\n    local result\n   \
    \ IFS=\"  \" read -ra numbers <<< \"$input\"\n    for number in \"${numbers[@]}\"\
    ; do\n        if [[ \"$number\" =~ ^-?[0-9]+$ ]]; then\n            result=()\n\
    \            for number in \"${numbers[@]}\"; do\n                if [[ \"$number\"\
    \ =~ ^-?[0-9]+$ ]]; then\n                    result+=(\"$number\")\n        \
    \        fi\n            done\n            break\n        fi\n    done\n    echo\
    \ \"${result[@]}\"", "  local list=\"$1\"\n\n  local filtered\n\n  for val in\
    \ $list; do\n    if [[ $val =~ ^-?[0-9]+$ ]]; then\n      filtered=\"$filtered\
    \ \\\"$val\\\" \"\n    fi\n  done\n\n  echo \"$filtered\"", "    local list=\"\
    $1\"\n    local filtered=()\n    for item in $list; do\n        if [ \"$item\"\
    \ == \"0\" ]; then\n            continue\n        fi\n        # strip quotes,\
    \ remove spaces\n        item=$(echo \"$item\" | sed 's/^\"//' | sed 's/\"$//'\
    \ | sed 's/  */ /g' | tr -d ' ')\n        # grep returns 0 even if it doesn't\
    \ find the value\n        if ! [[ $item =~ ^[0-9]+$ ]]; then\n            continue\n\
    \        fi\n        filtered+=($item)\n    done\n    echo \"${filtered[@]}\"",
  "    local values=$1\n    local int_regex=\"^[0-9]+$\"\n    local ints=()\n    local\
    \ val\n    for val in ${values//' '/ }; do\n        if [ ${val} =~ $int_regex\
    \ ]; then\n            ints+=(\\\"${val}\\\")\n        fi\n    done\n    echo\
    \ ${ints[*]}", "  local numbers=$1\n  local string=\"\"\n  local outstring=\"\"\
    \n  local integers=()\n  local numstring=\"\"\n  local num=\"\"\n  local numfound=0\n\
    \  local nospace\n\n  nospace=$(echo $numbers | grep '^[[:space:]]*$')\n  if [[\
    \ $nospace ]]; then\n    echo \"ERROR: non-numbers in numbers argument\"\n   \
    \ return 1\n  fi\n  # remove all spaces from numbers string\n  string=$(echo $numbers\
    \ |  sed 's/[[:space:]]\\+/ /g')\n  # remove all whitespaces at beginning\n  string=$(echo\
    \ $string | sed 's/^[[:space:]]\\+//g')\n  # remove all whitespaces at end\n \
    \ string=$(echo $string | sed 's/[[:space:]]\\+$//g')\n  for string in $string;\
    \ do\n    # find first integer found\n    numfound=0\n    numstring=$(echo $string\
    \ | grep \"^[0-9]*\")\n    numfound=$(echo $numstring | wc -l )\n    if [[ $numfound\
    \ -eq 0 ]]; then\n      integers+=($string)\n    fi\n  done\n  if [[ ${#integers[*]}\
    \ -eq 0 ]]; then\n    return 0\n  else\n    outstring=$(IFS=,; echo \"${integers[*]}\"\
    )\n  fi\n  return $outstring", "    local vals=$1\n    vals=\"$(echo $vals | sed\
    \ 's/ /\",\"/g')\"\n    local s=0\n    local i=0\n    for val in $vals; do\n \
    \       if [[ ${val} == \"-\" ]]; then\n            ((s=s-1))\n            continue\n\
    \        fi\n        if [[ ${val} =~ ([0-9]+) ]]; then\n            ((s=s+1))\n\
    \        fi\n    done\n    local output\n    if [[ $s -gt 0 ]]; then\n       \
    \ output=\"[$(echo $vals | sed -E 's/[0-9]+/&\",\"/g')]\"\n    else\n        output=\"\
    $vals\"\n    fi\n    echo \"$output\"", "    echo $(grep -o '^[0-9]+$' <<< \"\
    $1\")", "  local IFS=$1\n  shift\n  echo \"$(echo \"$@\" | grep \"^[0-9]+\")\"",
  "\tlocal list=\"$1\"\n\tlocal integers\n\tintegers=\"$( IFS=$'\\n' read -r -a integers\
    \ <<< \"$list\")\"\n\tintegers=( $(for integer in \"${integers[@]}\"; do echo\
    \ \"\\\"$integer\\\"\"; done) )\n\tintegers=( $(echo \"${integers[*]}\" | sed\
    \ -e \"s/ /\\n/g\" ) )\n\tintegers=( $(echo \"${integers[*]}\" | sed -e \"s/ /\\\
    \\n/g\" ) )\n\tintegers=( $(echo \"${integers[*]}\" | sed -e \"s/ /\\\\\\n/g\"\
    \ ) )\n\tintegers=( $(echo \"${integers[*]}\" | sed -e \"s/ /\\\\\\\\\\n/g\" )\
    \ )\n\tintegers=( $(echo \"${integers[*]}\" | sed -e \"s/ /\\\\'/g\" ) )\n\tintegers=(\
    \ $(echo \"${integers[*]}\" | sed -e \"s/ /\\\\\\\"/g\" ) )\n\tintegers=( $(echo\
    \ \"${integers[*]}\" | sed -e \"s/ /\\\\\\\\'/g\" ) )\n\tintegers=( $(echo \"\
    ${integers[*]}\" | sed -e \"s/ /\\\\\\\"/g\" ) )\n\tintegers=( $(echo \"${integers[*]}\"\
    \ | sed -e \"s/ /\\\\\\\\\\\"/g\" ) )\n\tintegers=( $(echo \"${integers[*]}\"\
    \ | sed -e \"s/ /\\\\\\\\\\\\'/g\" ) )\n\tintegers=( $(echo \"${integers[*]}\"\
    \ | sed -e \"s/ /\\\\\\\\\\\\'/g\" ) )\n\tintegers=( $(echo \"${integers[*]}\"\
    \ | sed -e \"s/ /\\\\\\\\\\\"/g\" ) )\n\tintegers=( $(echo \"${integers[*]}\"\
    \ | sed -e \"s/ /\\\\\\\\\\\\\\\"/g\" ) )\n\tintegers=( $(echo \"${integers[*]}\"\
    \ | sed -e \"s/ /\\\\\\\\\\\\\\\\'/g\" ) )\n\tintegers=( $(echo \"${integers[*]}\"\
    \ | sed -e \"s/ /\\\\\\\\\\\\\\\\\\\"/g\" ) )\n\tintegers=( $(echo \"${integers[*]}\"\
    \ | sed -e \"s/ /\\\\\\\\\\\\\\\\\\\\'/g\" ) )\n\tintegers=( $(echo \"${integers[*]}\"\
    \ | sed -e \"s/ /\\\\\\\\\\\\\\\\\\\\\\\\'/g\" ) )\n\tintegers=( $(echo \"${integers[*]}\"\
    \ | sed -e \"s/ /", "    sed -e 's/[^0-9]//g' -e 's/ /\\n/g' $1 > $2", "    local\
    \ tmp=$(\"$@\" | (grep -v '^[^0-9]*$') | tr '[:blank:]' ' ' | tr -d '[[:blank:]]')\n\
    \    if [ -n \"$tmp\" ]; then\n        echo \"\\\"$tmp\\\"\"\n    else\n     \
    \   echo \"[]\"\n    fi", "    IFS='[ -\\*]' read -r -a array <<< \"$1\"\n   \
    \ local result\n    for element in \"${array[@]}\"; do\n        # Strip quotes\n\
    \        if [ \"$(echo \"$element\" | awk '{print $1}')\" = \"'\" -o \"$(echo\
    \ \"$element\" | awk '{print $1}')\" = \"\\\"\"]; then\n            result+=($(echo\
    \ \"$element\" | awk '{gsub(\"\\\"\", \"\"); print}'|sed -e 's/^\"//' -e 's/\"\
    $//'))\n        else\n            result+=($element)\n        fi\n    done\n \
    \   echo \"${result[@]}\"", "    local list item\n    local result\n    for item\
    \ in $1; do\n        if [[ \"$item\" =~ ^[0-9]+$ ]]; then\n            result=\"\
    $result'\"$item\"' \"\n        fi\n    done\n    echo $result", "  local IFS=,\n\
    \  for arg; do\n    if [[ \"$arg\" =~ ^[0-9]+$ ]]; then\n      echo \"$arg\"\n\
    \    fi\n  done", "    local IFS=$'\\t' arr=($1)\n    for element in \"${arr[@]}\"\
    ; do\n        if ! [[ \"${element}\"  =~ ^[0-9]+$ ]]; then\n            echo \"\
    '${element}'\" >> \"${script_dir}/error.log\"\n        fi\n    done\n    echo\
    \ \"${arr[@]}\"", "  echo \"$1\" | xargs -l sh -c 'echo \"$1\" | grep -E \"[^0-9]+\"\
    ' -", "  local integers=\"$1\";\n  local filtered=\"$(echo \"$integers\" | sed\
    \ 's/[^-0-9.]//g')\";\n  echo \"$filtered\";", "  local filter\n  for filter in\
    \ ${1} ; do\n    echo \"${filter}\" >> \"${SRCDIR}/.filter_integers\"\n  done",
  "  local arg=$1\n  local i=1\n  local result=()\n  # while [ $i -lt $# ]\n  # do\n\
    \  while [[ \"$i\" -lt \"$#\" ]]; do\n    case \"$arg\" in\n      *[0-9]*) result+=(\"\
    $arg\");;\n    esac\n    i=$((i+1))\n    arg=$((i+1))\n  done\n  echo ${result[@]}",
  "  local IFS= read -r -a array <<< \"$1\"\n  local -r array2=(${array[@]})\n  for\
    \ element in \"${array2[@]}\"; do\n    [[ \"$element\" =~ ^[0-9]+$ ]] || return\
    \ 1\n  done\n  unset IFS", "    local filter=\"$1\"\n    local integers\n    integers=$(echo\
    \ \"$filter\" | sed 's/^ *//;s/ *$//')\n    local filtered\n    for integer in\
    \ $integers; do\n        filtered=$(echo $integer | grep -E \"^[0-9]+$\" || true)\n\
    \    done\n    echo $filtered", "    local arg\n    for arg; do\n        local\
    \ filtered\n        filtered=$(echo $arg | sed 's/\\([0-9]*\\)/\"&\"/g')\n   \
    \     if [ \"$(echo $arg | grep -c \"^$filtered$\")\" -eq 0 ]; then\n        \
    \    echo $filtered\n        fi\n    done", "  local IFS=' '\n  local filtered=()\n\
    \  local _\n  for _; do\n    # remove any whitespace\n    # remove any '\n   \
    \ # remove any backslashes\n    # remove any commas\n    IFS=$'\\t' read -r -a\
    \ list <<< \"$(echo -e \"${1//,/} | tr '\\\\' '\\n' | grep -o '[[:digit:]]*')\"\
    \n    if [ \"${#list}\" -eq 0 ]; then\n      continue\n    fi\n    # filter out\
    \ empty integers\n    if [ \"${list[0]}\" -eq \"\" ]; then\n      continue\n \
    \   fi\n    # filter out non-integers\n    if [ \"${list[0]}\" -ge 1 ]; then\n\
    \      continue\n    fi\n    # add filtered list to filtered array\n    filtered+=(\"\
    ${list[@]}\")\n  done\n  echo \"${filtered[@]}\"", "    IFS=' ' read -a array\
    \ <<< \"$1\"\n    local integer output\n\n    for integer in \"${array[@]}\";\
    \ do\n        output=$(echo \"$integer\" | sed -e 's/^[ ]*//g' -e 's/^ *//g' -e\
    \ '/^ *$/ d' -e 's/[^ 0-9]//g')\n        echo \"\\\"$output\\\"\"\n    done",
  "    # echo \"$1 -> $2\"\n    local list=\"$1\"\n    local integers=\"$2\"\n   \
    \ local filtered=''\n    IFS=' ' read -r -a array <<< \"$integers\"\n\n    for\
    \ val in \"${array[@]}\"; do\n        [[ \"${val}\" =~ ^[0-9]+$ ]] && filtered+=\"\
    ${val} \"\n    done\n\n    echo \"${filtered::-2}\"", "    local s=$1\n    echo\
    \ \"$s\" | sed -E 's/ ([0-9]+)/g' | sed -E 's/^([0-9]+) /\\1/g'", "    local val\n\
    \    local out\n\n    val=$1\n    out=\"$(echo \"$1\" | sed -e 's/ //g')\"\n \
    \   # echo to silence 'echo is not a function' error\n    echo \"$out\" | grep\
    \ -vE '^$' | sed -e 's/^[0-9]*//g' > \"$val\"\n    echo \"$out\"", '    local
    IFS="$1"; shift; eval "[[ \"$*\" =~ ^[0-9]+$ ]]"', "    local output=\"\"\n  \
    \  local input=$1\n    local IFS=' '\n    local IFS1=$'\\n'\n    for element in\
    \ $input; do\n        case \"$element\" in\n        *[!0-9]*|*\"\")\n        \
    \    output=\"$output\"\"$element\"\n            ;;\n        *)\n            output=\"\
    $output\"\"'$element'\"\n            ;;\n        esac\n    done\n    IFS=$IFS1\n\
    \    echo $output", "  IFS=$'\\n' read -r -a array <<< \"$1\"\n  for item in \"\
    ${array[@]}\"; do\n    if [[ \"$item\" =~ ^[0-9]+$ ]]; then\n      printf '%s\\\
    n' \"$item\"\n    fi\n  done", "    IFS=$'\\n' read -r -d '' -a integers <<< \"\
    $1\"\n    integers=($(printf '%s\\n' \"${integers[@]}\" | sort -n))\n    echo\
    \ -n \"${integers[@]}\"", "\tlocal val\n\tval=$( echo \"$1\" | tr -s ' ' | cut\
    \ -d ' ' -f 1 | sed -e 's/^ *//g' -e 's/ *$//g')\n\tval=$( echo \"$val\" | sed\
    \ -e 's/^ *//g' -e 's/ *$//g' | sed 's/[[:digit:]]/\\\"&\\\"/g' )\n\techo \"$val\"",
  "  local values=$1\n  local integers=()\n  local i ilist\n  for ilist in $values;\
    \ do\n    integers+=(\"$ilist\")\n  done\n  for ((i = 0; i $((${#integers[*]}));\
    \ i++)); do\n    local item=${integers[i]}\n    integers[i]=\n      ${item// /}\n\
    \  done\n  echo \"${integers[*]}\"", "  local tmp\n  tmp=$(echo \"$1\" | sed -e\
    \ 's/[^0-9]*//g' | tr -d '[:space:]')\n  echo \"'${tmp}'\"", "    local integers_regex='^[0-9]+$'\n\
    \    local items=$1\n\n    IFS=\" \"\n    for I in $items; do\n        if [[ !\
    \ $I =~ $integers_regex ]]; then\n            echo -n \"$I\"\n        else\n \
    \           echo $I\n        fi\n    done", "    local IFS=' ' lst tmp\n    local\
    \ tmp\n    IFS=$'\\n' lst=\"$1\"\n    for tmp in $lst; do\n        case \"$tmp\"\
    \ in\n            '') continue;;\n            -*) continue;;\n            *) continue;;\n\
    \        esac\n    done\n    echo \"$lst\"", "  local list_string integer ret\n\
    \  list_string=\"${1}\"\n  # if list is not an array\n  if [ -z \"${list_string}\"\
    \ ] || [ \"x${list_string}\" == \"x\" ]; then\n    echo \"$list_string\"\n   \
    \ return 0\n  fi\n  local _IFS\n  _IFS=$'\\n'\n  integer=$(echo \"${list_string}\"\
    \ | grep -Eo '[[:digit:]]')\n  if [ \"${integer}\" ]; then\n    ret=\"[\"\n  \
    \  for i in ${integer}; do\n      ret=\"${ret}${i}\"\n      ret=\"${ret},\"\n\
    \    done\n    ret=\"${ret}\"]\"\n  fi\n  echo \"$ret\"\n  return 0", "  local\
    \ list=\"$1\"\n  shift || return 0\n  local ints\n  [[ -n $list ]] || return 0\n\
    \  list=\"$(echo -e \"${list}\" | sed \"s/[[:space:]]*//g\")\"\n  echo \"$list\"\
    \ | grep -q \"^[0-9]+$\" || return 0\n  [[ -n $list ]] || return 0\n  while IFS=\
    \ read -r line; do\n    ints=\"${ints} $line\"\n  done < <(echo -e \"${list}\"\
    \ | sed \"s/^[[:space:]]*//g;s/[[:space:]]*$//g;/^[[:space:]]*$/d\")\n  echo \"\
    $ints\"", "  local list=\"$1\"\n  echo \"${list// /|}\"", "    local result=\n\
    \    for arg; do\n        if [[ ${arg} =~ ^[0-9]+$ ]]; then\n            result+=${arg}\n\
    \        fi\n    done\n    echo \"${result}\"", "  echo \"$1\" | sed 's/\\([0-9]*\\\
    )//g'", "  local numbers=$1\n\n  echo $numbers\n  # Split the input into words\
    \ before trying to convert to integer.\n  IFS=' ' read -r -a numbers <<< \"$numbers\"\
    \n\n  local filtered=()\n  local number\n  for number in \"${numbers[@]}\"; do\n\
    \    # Ignore empty strings and non-numeric values, and filter out non-numbers.\n\
    \    [[ \"${number}\" =~ ^-?[0-9]+$ ]] || continue\n    filtered+=( \"${number}\"\
    \ )\n  done\n\n  echo \"${filtered[@]}\"", "    local -n input=$1\n    local output=''\n\
    \    local num\n    for num in $input; do\n        if [ -z \"$num\" ]; then\n\
    \            continue\n        fi\n        if [[ \"$num\" =~ ^[0-9]+$ ]]; then\n\
    \            output=\"$output $num\"\n        fi\n    done\n    echo $output",
  "    local _list=\"$1\"\n    shift\n    local _out='\"'\n    local _flag=0\n   \
    \ for _item in $_list; do\n        _flag=0\n        _item=\"$(_item | tr -d '\
    \ ')\"\n        if [[ \"$_item\" =~ ^[0-9]+ ]]; then\n            _item=\"'$(_item)'\"\
    \n            _flag=1\n        fi\n        if [[ \"$_flag\" -eq 0 ]]; then\n \
    \           _item=\"'$_item'\"\n            _flag=1\n        fi\n        if [[\
    \ \"$_flag\" -eq 0 ]]; then\n            _item=\"'$_list'\"\n            _flag=1\n\
    \        fi\n        _out=\"${_out}${_item}\"\n    done\n    _out=\"${_out}'\"\
    \n    echo \"${_out}\"", "    local LIST=\"$1\"\n    local INTEGERS_ONLY=\"\"\n\
    \n    IFS=' ' read -a LIST <<<\"$LIST\"\n    INTEGERS_ONLY=$(IFS=\"$IFS_ORIG\"\
    \ tr -d '[:space:]' <<<\"$(printf '%s\\0' \"${LIST[@]}\" | grep -Po '^[0-9]+$')\"\
    )\n\n    echo $INTEGERS_ONLY", "  IFS=$'\\n'\n  for value in $*\n  do\n    # Remove\
    \ quotation marks around strings\n    [[ $value == *\\\"* ]] && value=${value//\\\
    \"}\n    [[ $value == *\\'* ]] && value=${value//\\'}\n    if [[ $value == *[!0-9]*$\
    \ ]]; then\n      printf '%s\\n' \"$value\"\n    fi\n  done", "  local int_list=\"\
    $1\"\n  # echo \"$int_list\"\n  # echo \"${int_list##*[!0-9]}\" >> /tmp/list.log\n\
    \  int_list=$(echo \"$int_list\" | sed 's/^ *//g' | sed 's/ *$//g')\n  int_list=$(echo\
    \ \"$int_list\" | sed 's/^ //g' | sed 's/ //g')\n  # echo \"$int_list\"\n  # echo\
    \ \"${int_list##*[!0-9]}\" >> /tmp/list.log\n  int_list=$(echo \"$int_list\" |\
    \ sed 's/^ *//g' | sed 's/ *$//g')\n  int_list=$(echo \"$int_list\" | sed 's/^\
    \ //g' | sed 's/ //g')\n  # echo \"$int_list\"\n  # echo \"${int_list##*[!0-9]}\"\
    \ >> /tmp/list.log\n  int_list=$(echo \"$int_list\" | sed 's/^ *//g' | sed 's/\
    \ *$//g')\n  int_list=$(echo \"$int_list\" | sed 's/^ //g' | sed 's/ //g')\n \
    \ # echo \"$int_list\"\n  # echo \"${int_list##*[!0-9]}\" >> /tmp/list.log\n \
    \ int_list=$(echo \"$int_list\" | sed 's/^ *//g' | sed 's/ *$//g')\n  int_list=$(echo\
    \ \"$int_list\" | sed 's/^ //g' | sed 's/ //g')\n  # echo \"$int_list\"\n  # echo\
    \ \"${int_list##*[!0-9]}\" >> /tmp/list.log\n  int_list=$(echo \"$int_list\" |\
    \ sed 's/^ *//g' | sed 's/ *$//g')\n  int_list=$(echo \"$int_list\" | sed 's/^\
    \ //g' | sed 's/ //g')\n  # echo \"$int_list\"\n  # echo \"${int_list##*[!0-9]}\"\
    \ >> /tmp/list.log\n  int_list=$(echo \"$int_list\" | sed 's/^ *//g' | sed 's/\
    \ *$//g')\n  int_list=$(echo \"$int_list\" | sed 's/^ //g' | sed 's/ //g')\n \
    \ # echo \"$int_list\"\n  # echo \"${int_list##*[!0-9]}\" >> /tmp/list.log\n \
    \ int_list=$(echo \"$int_list\" | sed 's/^ *//g' | sed 's/ *$//g')\n  int_list=$(echo\
    \ \"$int_list\" | sed '", "\tlocal IFS=$1\n\tshift\n\tlocal IFS_COMPAT=$IFS\n\t\
    IFS=\" $IFS\"\n\tlocal IFS_COMPAT_IFS=$IFS_COMPAT\n\tIFS_COMPAT=\" $IFS_COMPAT\"\
    \n\tIFS_COMPAT_IFS=\" $IFS_COMPAT_IFS\"\n\tlocal IFS_COMPAT_IFS_COMPAT=$IFS_COMPAT_IFS\n\
    \tIFS_COMPAT_IFS_COMPAT=\" $IFS_COMPAT_IFS_COMPAT\"\n\tlocal IFS_COMPAT_IFS_COMPAT_IFS=$IFS_COMPAT_IFS_COMPAT\n\
    \tIFS_COMPAT_IFS_COMPAT_IFS=\" $IFS_COMPAT_IFS_COMPAT_IFS\"\n\tlocal IFS_COMPAT_IFS_COMPAT_IFS_COMPAT=$IFS_COMPAT_IFS_COMPAT_IFS\n\
    \tIFS_COMPAT_IFS_COMPAT_IFS_COMPAT=\" $IFS_COMPAT_IFS_COMPAT_IFS_COMPAT\"\n\t\
    local IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS=$IFS_COMPAT_IFS_COMPAT_IFS_COMPAT\n\
    \tIFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS=\" $IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS\"\
    \n\tIFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT=$IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS\n\
    \tIFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS=\" $IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS\"\
    \n\tIFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT=$IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS\n\
    \tIFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS=\" $IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS\n\
    \tIFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT=$IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS\n\
    \tIFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS_COMPAT_IFS", "  local i val\n\
    \  while read -r val; do\n    IFS=' ' read -ra vals <<<\"$val\"\n    for val in\
    \ \"${vals[@]}\"; do\n      if [[ ! $val =~ ^[+-]?[0-9]+$ ]]; then\n        echo\
    \ \"$val\" >&2\n      fi\n    done\n  done < \"$1\"", "    local input=$1\n  \
    \  local integers=()\n    local output=''\n    local word\n    for word in $input;\
    \ do\n        if [[ \"$word\" =~ ^[0-9]+$ ]]; then\n            integers+=($word)\n\
    \        else\n            output+=\"$word\"\n        fi\n    done\n    echo \"\
    ${integers[*]}\"", "  local vals=$(echo \"$1\" | sed 's/ /\" \"/g' | sed 's/\"\
    //g' | sed 's/^/[/g')\n  echo \"$vals\" | sed 's/]/]]/g' | awk '{print $1\",\"\
    $3}' |\n      tr -d '[:space:]'", "    IFS=\" \" read -r -a array <<< \"$1\"\n\
    \    integers=()\n    for element in \"${array[@]}\"; do\n        if [ \"${element%%.*}\"\
    \ = \"${element}\" ]; then integers+=(${element}); fi\n    done\n    echo \"${integers[@]}\"",
  "    local filteredlist=$1\n    shift\n    for var in $filteredlist; do\n      \
    \  # filter out only integers\n        if [[ $var =~ ^-?[0-9]+$ ]]; then\n   \
    \         echo $var\n        fi\n    done", "  IFS=$' \\t\\n'\n  declare -a list=(\
    \ $1 )\n  declare -i len=0\n  for i in ${list[*]}; do\n    len=$((len+$(expr length\
    \ \"$i\")))\n  done\n  (( $len == ${#list[*]} ))", "    IFS=\" \"\n    echo $1\
    \ | sed 's/^ *//;s/ *$//;s/ *$/ /g;s/ *$/ /;s/^ *//'", "    local values=$1\n\
    \    local numbers=$(filter_values \"$values\" '[0-9]')\n    echo \"$numbers\"",
  "    IFS=' ' read -a a <<< \"$1\"\n    integers=()\n    for num in \"${a[@]}\";\
    \ do\n        [ -z \"$num\" ] && continue\n        integers+=(\"$num\")\n    done\n\
    \    echo \"${integers[*]}\"", "  local list_str=$1\n  local integer_list\n  integer_list=$(echo\
    \ $list_str | sed 's/ /\\n/g' | grep -E '[0-9]+')\n  echo \"$integer_list\"",
  "    local i\n    for i in $*; do\n        if ! [[ \"$i\" =~ ^[0-9]+$ ]]; then\n\
    \            echo \"'$i' is not an integer\" >&2\n        fi\n    done", "   \
    \ IFS=$1\n    shift\n    echo \"$*\"", "  local integers=$1\n  local integers_regex='^[0-9]+$'\n\
    \  integers=$(echo $integers | tr ' ' '\\n' | grep $integers_regex)\n  echo \"\
    $integers\"", "\tlocal x=\"$1\"\n\tx=\"${x// /\\,}\"\n\tx=\"${x// /-}\"\n\tx=\"\
    ${x//-/}\"\n\tx=\"${x//[^0-9]/}\"\n\tx=\"${x% *}\"\n\tx=\"${x%.*}\"\n\techo \"\
    $x\"", "    local list=\"$1\"\n    local integers=()\n    while IFS= read -r -d\
    \ '' elem; do\n      case \"$elem\" in\n        [0-9]* ) integers+=\"$elem\";\
    \ continue;;\n      esac\n    done <<< \"$list\"\n    echo -n \"[${integers[@]}]\"",
  "    local _filter_list\n    _filter_list=\"$(echo \"$1\" | tr \" \" \"\\n\")\"\n\
    \    local _ret=\"\"\n    local _item\n\n    for _item in ${_filter_list}; do\n\
    \        # Check if item is numeric\n        if [ \"${_item:0:1}\" -eq \"-\" ]\
    \ || [ \"${_item:0:1}\" -eq \"+\" ] ; then\n            _ret=\"$_ret\" \"${_item}\"\
    \n        fi\n    done\n    echo \"${_ret}\"", "\tlocal var=\"$1\"\n\tlocal integers=\"\
    \"\n\n\t# $1 is a space-separated list\n\tshift\n\tfor integer in \"$@\" ; do\n\
    \t\tintegers+=\"'\"$integer\"'\"\n\tdone\n\t# echo $integers >&2 | tee\n\t# echo\
    \ $integers >&1 | tee\n\teval \"$var=$integers\"\n\tunset -v integers", "    echo\
    \ -n \"[\"\n    IFS=' ' read -ra fields <<< \"$1\"\n    for field in \"${fields[@]}\"\
    ; do\n        if [[ ${field} =~ ^[0-9]+$ ]]; then\n            echo \"${field}\"\
    \n        else\n            echo \"${field}\"\n        fi\n    done\n    echo\
    \ \"]\"", "  local values=$1\n  local integers=()\n  for value in $values; do\n\
    \    integers[]=\"$(python -c \"import sys; return list(map(int, sys.argv[1:]))\"\
    )\"\n  done\n  python -c \"import sys;  sys.stdout.write(str(list(map(int, sys.argv[1:]))))\"",
  "  local list=\"$1\"\n  local int_list=\"\"\n  for e in $list; do\n    [[ $e =~\
    \ ^[[:space:]]+$ ]] || continue\n    int_list=\"$int_list \\\"$e\\\"\"\n  done\n\
    \  eval \"$int_list\"", "    local IFS=$1\n    shift\n    local arg\n    for arg;\
    \ do\n        echo $arg | sed 's/\\([0-9]*\\)/\"&\"/g'\n    done", "  eval $(echo\
    \ \"$1\" | sed 's/ /\\n/g' | awk '{\n    for(i=1; i<=NF; i++) {\n      if($i ~\
    \ /^[0-9]+$/) {\n        print \"\\\"\"$i\"\\\"\"\n      }\n    }\n  }')", " \
    \   local values=$(echo \"$1\" | sed \"s/^[ \\t]*//g\")\n    # sed -E \"s/[0-9]+//g\"\
    \ removes any digits including spaces \n    # and also removes empty lines. \n\
    \    # -n adds line numbers to stdout and -v adds line numbers to stderr\n   \
    \ # -r prevents sed from treating \\s as a special character\n    local filtered_values\n\
    \    filtered_values=\"$( sed -E \"s/[0-9]+//g\" -n -v -r \"$values\")\"\n   \
    \ echo \"$filtered_values\"", "    local i x\n    local res=\"$1\"\n    shift\n\
    \    while [[ $# -gt 0 ]]; do\n        x=\"$1\"\n        shift\n        case \"\
    $x\" in\n            -*) ;;\n            0) continue;;\n            *) res=\"\
    $res\"'$x';;\n        esac\n    done\n    echo $res", "    # Remove blanks\n \
    \   echo -n \"${1//[[:space:]]}\"\n\n    # Loop through and remove non integers\n\
    \    for integer in \"${1//[[:space:]]}\"; do\n        if [[ ! \"$integer\" =~\
    \ ^[0-9]+$ ]]; then\n            # echo -n only prints text to stdout\n      \
    \      echo -n \"${integer//[[:space:]]}\"\n        fi\n    done", "  local int_list=\"\
    $1\"\n  local int_pattern=\"^[0-9]+$\"\n  local int_list_without_quotes=$(echo\
    \ \"$int_list\" | sed -e \"s/^'\\(.*\\)'.*$/\\1/\")\n  echo \"'$int_list_without_quotes'\
    \ \" | grep -P \"$int_pattern\"", "  local list=\"$1\"\n  list=\"$(echo \"$list\"\
    \ | sed -e 's/[[:blank:]]+//g')\"\n  # return list of unique integers\n  echo\
    \ \"$list\" | sort -u | sed -e 's/^ *//' -e 's/ *$//'", "  local integers\n  integers=()\n\
    \  for integer in $( echo \"$1\" | tr ' ' '\\n' | grep '^[+-]?[0-9]+$' ); do\n\
    \    integers+=(\"$integer\")\n  done\n  echo \"${integers[*]}\"", "    local\
    \ item=$1\n    local integers=()\n    integers=(\"$item\" <<< \"$integers\")\n\
    \    integers=(\"$integers\" | tr \" \" \"\\n\")\n    integers=(\"$integers\"\
    \ | sed -e 's/^[0-9]*//g')\n    integers=(\"$integers\" | sed -e 's/^[0-9]*$//g')\n\
    \    integers=(\"$integers\" | sed -e 's/^[0-9]$//g')\n    integers=(\"$integers\"\
    \ | sed -e 's/^[0-9]\\*[0-9]*$//g')\n    integers=(\"$integers\" | sed -e 's/^[0-9]\\\
    *$//g')\n    integers=(\"$integers\" | sed -e 's/^[0-9]\\?[0-9]*$//g')\n    integers=(\"\
    $integers\" | sed -e 's/^[0-9]\\?$//g')\n    integers=(\"$integers\" | sed -e\
    \ 's/^[0-9]*[0-9]*[0-9]*$//g')\n    integers=(\"$integers\" | sed -e 's/^[0-9]*[0-9]$//g')\n\
    \    integers=(\"$integers\" | sed -e 's/^[0-9]*\\*$//g')\n    integers=(\"$integers\"\
    \ | sed -e 's/^[0-9]*[0-9]\\?$//g')\n    integers=(\"$integers\" | sed -e 's/^[0-9]*[0-9]\\\
    ?[0-9]*$//g')\n    integers=(\"$integers\" | sed -e 's/^[0-9]*[0-9]*[0-9]*[0-9]*$//g')\n\
    \    integers=(\"$integers\" | sed -e 's/^[0-9]*[0-9]*[0-9]*[0-9]$//g')\n    integers=(\"\
    $integers\" | sed -e 's/^[0-9]*[0-9]*[0-9]*\\*$//g')\n    integers=(\"$integers\"\
    \ | sed -e 's/^[0-9]*[0-9]*[0-9]*[0-9]\\?$//g')\n    integers=(\"$integers\" |\
    \ sed -e 's/^[0-9]*[0-9]*[0-9]*[0-9]\\?[0-9]*$//g')\n    integers=(\"$integers\"\
    \ | sed -e 's/^[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*$//g')\n    integers=(\"$integers\"\
    \ | sed -e 's/^[0-9]*[0-9]*[0-9]*[0-9]*[0-9]$//g')\n    integers=(\"$integers\"\
    \ | sed -e 's/^", "    local result=0\n    local string=$1\n    local ints=$2\n\
    \n    while [[ $string =~ (^|\\s+)(-?[0-9]+)( |$) ]]\n    do\n        local i=${BASH_REMATCH[2]}\n\
    \        local j=${BASH_REMATCH[4]}\n        [ $((i+j)) -gt $result ]&&( result=$((i+j))\
    \ )\n        string=${BASH_REMATCH[5]}\n    done\n\n    echo $ints\n    echo $result",
  "\tlocal result=()\n\tfor each in $1; do\n\t\tif [[ $each =~ ^[0-9]+$ ]]; then\n\
    \t\t\tresult+=(\"$each\")\n\t\tfi\n\tdone\n\techo \"${result[@]}\"", "  local\
    \ integers=\"$1\"\n  echo \"$integers\" | sed -r \"s/([^0-9]+)/\\\"&\\\"/g\"",
  "  # shellcheck disable=SC1090\n  shopt -s xpg_echo\n  IFS=$'\\t' set -- $1 #shellcheck\
    \ disable=SC2086\n  local filtered=()\n  for var in \"$@\"; do\n    if [[ $var\
    \ =~ ^[[:digit:]]+$ || $var =~ ^[[:digit:]]+\\.[[:digit:]]+$ && $var -lt 1000\
    \ ]]; then\n      filtered+=(\"$var\")\n    fi\n  done\n  echo \"${filtered[@]}\"",
  "  local values=\"$(echo $1 | sed -e 's/^\\s*//' -e 's/\\s*$//')\"\n  IFS=' ' read\
    \ -r -a values <<< \"$values\"\n  printf '%s\\n' \"${values[@]}\" | grep -E '^[0-9]*$'",
  "    echo $1 | tr ' ' ','", "    local list=\"$1\"\n    shift\n    echo \"$list\"\
    \ | grep -E \"^[0-9]+$\"", "  local s=$1\n  local i=0\n  while [[ $i -lt ${#s}\
    \ ]]; do\n    local c=${s:$i:1}\n    if [[ $c =~ ^[0-9]+$ ]]; then\n      echo\
    \ \"$s\"\n      break\n    fi\n    i=$((i+1))\n  done", "    local items=$1\n\
    \    IFS=\" \" read -r -a numbers <<< \"$items\"\n    IFS=\n    echo \"${numbers[*]}\"",
  "    local args=( \"$@\" )\n    local IFS=\"$1\"\n    local filtered=\"\"\n    while\
    \ IFS= read -r item; do\n        if [[ \"$item\" =~ ^[0-9]+$ ]]; then\n      \
    \      filtered=\"$filtered \\\"$item\\\"\"\n        fi\n    done <<< \"${args[@]}\"\
    \n    echo \"${filtered%?}\"", "  local string=$1\n  local integers=$2\n  echo\
    \ \"${integers}\" | grep -E \"^-?[0-9]+$\" #| grep -vE '^-[0-9]+$'", "    local\
    \ list=\"$1\"\n    shift\n    local result=()\n    for x in \"$list\"; do\n  \
    \      case \"$x\" in\n            -*) continue ;;\n            *) result+=(\"\
    \\\"$x\\\"\") ;;\n        esac\n    done\n    echo \"${result[*]}\"", "  local\
    \ IFS=' ' result='' nums=$1\n  while IFS=$'\\t' read -ra num; do\n    case \"\
    ${num}\" in\n      \"${nums[@]}\" ) result=$result$num;;\n    esac\n  done\n \
    \ echo ${result}", "    # Sort out arguments\n    local lst_in_quotes=\"${1}\"\
    \n\n    # Split into words and filter only integers\n    local lst=(${lst_in_quotes//$'\
    \ \\t\\n'/})\n    local int_lst\n    for int_str in \"${lst[@]}\"; do\n      \
    \  [[ \"$int_str\" =~ ^[0-9]+$ ]]\n    done\n\n    # Filter result\n    printf\
    \ '%s\\n' \"${lst[@]}\"", "        local filter=$1\n        local values=$2\n\
    \        local ints=()\n        for val in $values; do\n                if [[\
    \ $val =~ ^[0-9]+$ ]]; then\n                        ints+=(\"$val\")\n      \
    \          fi\n        done\n        echo \"$ints\"", "    local IFS=\"[[:space:]]\"\
    \ #replace 'IFS' variable with 'IFS' variable with internal field separator\n\
    \    local numbers=()\n    local ret=''\n    for v in $@; do\n        if [[ $v\
    \ =~ ^[0-9]+$ ]]; then\n            numbers+=(\"$v\")\n        else\n        \
    \    ret+=(\"$v\")\n        fi\n    done\n    printf -v ret '%s' \"${numbers[@]}\"\
    \ #use printf to join array elements\n    printf '%s\\n' \"${ret[@]}\"", "  local\
    \ s=$1\n  local result\n  IFS=' '\n  result=$(echo \"$s\" | grep -v \"^[-+0-9eE]+$\"\
    \ |\n             grep -v \"^[-+0-9eE]*$\" |\n             sed 's/^[-+0-9eE]*\\\
    ([-+0-9eE]*\\)$/\\1/'|\n             sed \"s/^-[[:digit:]]\\+$//\")\n  echo \"\
    $result\"", "    local array=(\"$@\")\n    local string\n    local integer count\
    \ integers integer\n    string=\"${array[0]}\"\n\n    integers=()\n    for integer\
    \ in ${array[@]:1}; do\n      integer+=\" $integer\"\n    done\n    integer=${integer/#/\
    \ }\n    integer=${integer/, /}\n\n    integers=$(echo $integer | tr ' ' ',')\n\
    \    count=${#integers}\n\n    for (( index=0; index<$count; index+=1 )); do\n\
    \      if [[ $integers == *\"${integers[index]}\"* ]]; then\n          echo \"\
    $integer\"\n      fi\n    done", "  local filter_string=\"$1\"\n  local filtered=\"\
    \"\n  local i\n\n  IFS=\" \" read -r -a array <<<\"$filter_string\"\n  for i \
    \ in \"${!array[@]}\"; do\n    if [[ \"$array[$i]\" =~ ^[0-9]+$ ]]; then\n   \
    \   filtered=\"$filtered$i\"\n    fi\n  done\n  eval \"$filtered\"", "  echo $1\
    \ | awk '{for(i=1;i<=NF;i++) if($i!~/[[:space:]0-9]/) print $i}'", "    IFS='\
    \ '\n    set -- $@\n    set -- \"${@//[0-9]/}\"\n    set -- \"${@/#[0-9]/}\"\n\
    \    printf '\"%s\"\\n' \"$@\"", '  grep -Eo "[0-9]+"', "  IFS=$'\\n' read -r\
    \ -a array <<< \"$1\"\n  output=''\n  for element in \"${array[@]}\"; do\n   \
    \ if [[ $element =~ ^[0-9]+$ ]]; then\n      output+=\"$element\"\n    fi\n  done\n\
    \  echo \"$output\"", "  declare -a int_list=$1\n  int_list=(${int_list[@]//[^0-9]/})\n\
    \  int_list=($(echo \"${int_list[@]}\" | tr \" \" \"\\n\"))\n  int_list=($(echo\
    \ \"${int_list[@]}\" | tr \"\\n\" \" \"))\n  int_list=($(echo \"${int_list[@]}\"\
    \ | tr \" \" \" \"))\n  echo \"${int_list[@]}\"", "    # Escape the argument with\
    \ double quotes\n    IFS=$'\\n' read -r -d '' _array <<< \"$1\"\n    _array=(\
    \ \"$_array\" )\n    echo \"${_array[@]}\" | grep -E -o \"^[0-9]+$\"", "    local\
    \ _IFS=\"$IFS\"\n    IFS=\" \"\n    local filtered\n    for value in \"$@\"; do\n\
    \        if [[ \"$value\" =~ ^-?[0-9]+$ ]]; then\n            filtered+=(\"$value\"\
    )\n        fi\n    done\n    IFS=\"$_IFS\"\n    echo \"${filtered[@]}\"", "  \
    \  local string=$1 integer list\n    IFS=' ' read -a list <<< \"$string\"\n  \
    \  list=($(IFS=,; echo \"${list[@]}\" | sed 's/ //g'))\n    integer=\"\"\n   \
    \ for element in \"${list[@]}\"; do\n        if [[ \"$element\" =~ ^[0-9]+$ ]];\
    \ then\n            integer+=\"$element \"\n        fi\n    done\n    echo \"\
    $integer\"", "    IFS=' ' read -r -a array <<< \"$1\"\n    echo -n \"[\"\n   \
    \ declare -i i\n    for ((i=0; i<${#array[@]}; i++))\n    do\n      if [[ ${array[i]}\
    \ =~ ^[0-9]+$ ]]; then\n        if [[ $i -eq 0 ]]\n        then\n          echo\
    \ -n \"${array[i]}\"\n        else\n          echo -n \", ${array[i]}\"\n    \
    \    fi\n      fi\n    done\n    echo \"]\"", "    local integers=$(echo \"$1\"\
    \ | sed 's/[^0-9]//g;s/ //g;s/ [0-9]* //g;s/ [0-9]*$//g')\n    echo \"$integers\"",
  "    local items=$1\n    local output=''\n    for item in $items; do\n        if\
    \ [[ ${item} =~ ^[0-9]+$ ]]; then\n            output+=\"'$item'\"\n        fi\n\
    \    done\n    eval \"$output\"", "  local list=\"$1\"\n  shift\n\n  local integers=()\n\
    \  local integer\n  integer=\"(-)?[0-9]+\"\n  for item in ${list}; do\n    if\
    \ [[ ${item} =~ $integer ]]; then\n      integers+=(\"${item}\")\n    fi\n  done\n\
    \n  echo \"${integers[@]}\"", "    local l\n    l=\"'${1}'\"\n    # l=\"'$1'\"\
    \n    l=$(echo \"$l\" | sed -e 's/ //g')\n    l=$(echo \"$l\" | sed -e 's/ .*//g')\n\
    \    l=$(echo \"$l\" | sed -e 's/^[ ]*//g')\n    l=$(echo \"$l\" | sed -e 's/[\
    \ ]*$//g')\n    l=$(echo \"$l\" | sed -e 's/^[^0-9]*//g')\n    l=$(echo \"$l\"\
    \ | sed -e 's/[^0-9]*$//g')\n    l=$(echo \"$l\" | sed -e 's/^[ ]*//g')\n    l=$(echo\
    \ \"$l\" | sed -e 's/[ ]*$//g')\n    l=$(echo \"$l\" | sed -e 's/^[^0-9]*//g')\n\
    \    l=$(echo \"$l\" | sed -e 's/[^0-9]*$//g')\n    l=$(echo \"$l\" | sed -e 's/^[\
    \ ]*//g')\n    l=$(echo \"$l\" | sed -e 's/[ ]*$//g')\n    l=$(echo \"$l\" | sed\
    \ -e 's/^[^0-9]*//g')\n    l=$(echo \"$l\" | sed -e 's/[^0-9]*$//g')\n    l=$(echo\
    \ \"$l\" | sed -e 's/^[ ]*//g')\n    l=$(echo \"$l\" | sed -e 's/[ ]*$//g')\n\
    \    l=$(echo \"$l\" | sed -e 's/^[^0-9]*//g')\n    l=$(echo \"$l\" | sed -e 's/[^0-9]*$//g')\n\
    \    l=$(echo \"$l\" | sed -e 's/^[ ]*//g')\n    l=$(echo \"$l\" | sed -e 's/[\
    \ ]*$//g')\n    l=$(echo \"$l\" | sed -e 's/^[^0-9]*//g')\n    l=$(echo \"$l\"\
    \ | sed -e 's/[^0-9]*$//g')\n    l=$(echo \"$l\" | sed -e 's/^[ ]*//g')\n    l=$(echo\
    \ \"$l\" | sed -e 's/[ ]*$//g')\n    l=$(echo \"$l\" | sed -e 's/^[^0-9]*//g')\n\
    \    l=$(echo \"$l\" | sed -e 's/[^0-9]*$//g')\n    l=$(echo \"$l\" | sed -e 's/^[\
    \ ]*//g')\n    l=$(echo \"$l\" | sed -e 's/[ ]*$//g')\n    l=$(echo \"$l\" | sed\
    \ -e ", "    local L=${1#*}\n    local I\n    local S\n    local I1=0\n    local\
    \ I2=0\n    local I3=0\n    while IFS= read -r I; do\n        [[ ${I} =~ ^[0-9]+$\
    \ ]] && continue\n        ((I1+=1))\n        [[ ${I} =~ ^[0-9]+(\\.[0-9]+)?$ ]]\
    \ && continue\n        ((I2+=1))\n        [[ ${I} =~ ^[0-9]+([eE][-+]?[0-9]+)?$\
    \ ]] && continue\n        ((I3+=1))\n    done < <(printf '%s\\n' \"${L}\" | sort)\n\
    \    local R\n    R=''\n    for (( I=0; I<${I3}; I++ )); do\n        ((I2+=1))\n\
    \        [[ ${I} -eq ${I1} ]] && R=\"${R}${S} \" || R=\"${R}${I}\"\n        [[\
    \ ${I2} -eq ${I1} ]] && R=\"${R}${S} \" || R=\"${R}${R}\"\n        [[ ${I} -eq\
    \ ${I2} ]] && S=\" \"\n    done\n    echo \"${R%${R#*}}\"", "    set $1\n    declare\
    \ -a res=()\n    # Split $1 on spaces, remove empty elements and rebuild list\
    \ to pass to grep\n    for str in $( IFS=\" \"; echo \"${1//[![:space:]]}\" );\
    \ do res+=(\"$str\"); done\n    # Filter non-integers and return filtered list\n\
    \    echo $( echo \"${res[@]}\" | grep -Ev \"^[0-9]$\" )", "    set -- $(sed -e\
    \ 's/^[ \\t]*//' <<< $1)\n    local list=$1\n    local integers=()\n    for i\
    \ in $list; do\n        [[ -z $i ]] && continue\n        integers+=($i)\n    done\n\
    \    echo \"$integers\"", "    local IFS=$'\\n'\n    local i integer\n    integer=$(echo\
    \ \"$1\" | sed 's/[[:blank:]]*$//g')\n    integer=$(echo \"$integer\" | grep -E\
    \ '^-?[0-9]+$' 2> /dev/null)\n    integer=$(echo \"$integer\" | grep -E '^-[0-9]+$'\
    \ 2> /dev/null)\n    integer=$(echo \"$integer\" | grep -E '^[0-9]+$' 2> /dev/null)\n\
    \    integer=$(echo \"$integer\" | sed 's/^-*//g')\n    integer=$(echo \"$integer\"\
    \ | sed 's/-$//g')\n    integer=$(echo \"$integer\" | sed 's/^[0-9]+//g')\n  \
    \  integer=$(echo \"$integer\" | sed 's/^-[0-9]+//g')\n    integer=$(echo \"$integer\"\
    \ | sed 's/^-$//g')\n    integer=$(echo \"$integer\" | sed 's/^[+-]?[0-9]+$//g')\n\
    \    integer=$(echo \"$integer\" | sed 's/^[+-]?[0-9]+\\.[0-9]+$//g')\n    integer=$(echo\
    \ \"$integer\" | sed 's/^[+-]?[0-9]+\\.[0-9]$//g')\n    integer=$(echo \"$integer\"\
    \ | sed 's/^[+-]?[0-9]+\\.$//g')\n    integer=$(echo \"$integer\" | sed 's/^[+-]?[0-9]$//g')\n\
    \    integer=$(echo \"$integer\" | sed 's/^[+-]?[0-9]\\.[0-9]+$//g')\n    integer=$(echo\
    \ \"$integer\" | sed 's/^[+-]?[0-9]\\.[0-9]$//g')\n    integer=$(echo \"$integer\"\
    \ | sed 's/^[+-]?[0-9]\\.$//g')\n    integer=$(echo \"$integer\" | sed 's/^[+-]?[0-9]\\\
    +$//g')\n    integer=$(echo \"$integer\" | sed 's/^[+-]?[0-9]\\+\\.[0-9]+$//g')\n\
    \    integer=$(echo \"$integer\" | sed 's/^[+-]?[0-9]\\+\\.[0-9]$//g')\n    integer=$(echo\
    \ \"$integer\" | sed 's/^[+-]?[0-9]\\+\\.$//g')\n    integer=$(echo \"$integer\"\
    \ | sed 's/^[+-]?[0-9]\\+\\+$//g')\n    integer=$(echo \"$integer\" | sed 's/^[+-]?[0-9]\\\
    +\\+\\.[0-9]+$//g')\n    integer=$(echo \"$integer\" | sed 's/^[+-]?[0-9]\\+\\\
    +\\.[0-9]$//g')\n    integer=$(echo \"$integer\" | sed 's/", "    local -a list=(\
    \ )\n    for value in \"$@\" ; do\n        [[ ! \"$value\" =~ ^-?[0-9]+$ ]] &&\
    \ list+=( \"${value}\" )\n    done\n    IFS=' '\n    echo \"${list[*]}\"", " \
    \ local list=\"$1\"\n  shift\n  local result=()\n  for v in \"${list[@]}\"; do\n\
    \    if [ -z \"$v\" ] ; then\n      continue\n    fi\n    # shellcheck disable=SC2016\n\
    \    if [[ \"$v\" =~ ^[0-9]*$ ]]; then\n      result+=(\"$v\")\n    fi\n  done\n\
    \  echo \"${result[@]}\"", "  local items=$1\n  shift\n  local integers=$1\n \
    \ shift\n  local output=\"\"\n\n  for item in $items; do\n    integer =$(filter_integer\
    \ \"$item\")\n    if [[ \"$integer\" == \"\" ]]; then\n      integer =$( echo\
    \ $item | cut -d \" \" -f1 )\n    fi\n    if [[ \"$integer\" == \"\" ]]; then\n\
    \      integer =1\n    fi\n\n    if [[ \"$integer\" -gt 0 ]]; then\n      if [[\
    \ \"$output\" != \"\" ]]; then\n        echo \"$output $integer\"\n      fi\n\
    \      output=$( echo \"$integer\" )\n    fi\n  done\n  echo \"$output\"", "\t\
    local vals=$1\n\tvals=${vals//[^0-9]/}\n\tvals=${vals//[[:blank:]]/}\n\tvals=${vals//$'\\\
    n'/}\n\tvals=${vals/$'\\r'/}\n\tvals=${vals/$'\\\\'/}\n\tvals=${vals/$'\\t'/}\n\
    \tvals=${vals/$'\\n'/}\n\tvals=${vals/$'\\r'/}\n\tvals=${vals/$'\\\\'/}\n\tvals=${vals/$'\\\
    t'/}\n\tvals=${vals/$'\\n'/}\n\tvals=${vals/$'\\r'/}\n\tvals=${vals/$'\\\\'/}\n\
    \tvals=${vals/$'\\t'/}\n\tvals=${vals/$'\\n'/}\n\tvals=${vals/$'\\r'/}\n\tvals=${vals/$'\\\
    \\'/}\n\tvals=${vals/$'\\t'/}\n\tvals=${vals/$'\\n'/}\n\techo \"${vals}\"", " \
    \   IFS=' ' read -r -a array <<< \"$1\"\n    array=($(echo \"${array[@]}\" | sed\
    \ 's/^ *//;s/ *$//'))\n    for integer in \"${array[@]}\"; do\n        if [[ !\
    \ \"$integer\" =~ ^[0-9]+$ ]]; then\n            echo \"$integer\"\n        fi\n\
    \    done", "  local v=$1\n  local vals=$(echo \"$v\" | tr \" \" \"\\n\")\n  local\
    \ result=\n  while read line; do\n    if [[ -z \"$result\" ]]; then\n      IFS=\"\
    [[:space:]]\" read -a vals1 <<<\"$vals\"\n      if [[ \"${vals1[*]}\" = \"$line\"\
    \ ]]; then\n        continue\n      fi\n    fi\n    if [[ \"${vals[*]}\" =~ ^[0-9]+$\
    \ ]]; then\n      result+=\" $line\"\n    fi\n  done <<< \"$vals\"\n  echo \"\
    $result\"", "    local _args=(\"$@\")\n\n    # Filter empty values\n    _args=$(echo\
    \ \"${_args[@]}\" | grep -v \"^$\" | sed 's/ .*//')\n\n    _args=$(echo \"${_args[@]}\"\
    \ | grep \"^[[:digit:]]\\+$\")\n    echo \"${_args[@]}\"", "    local result=$1\n\
    \    local i\n    local num\n\n    for i; do\n        case \"$i\" in\n       \
    \     *[!0-9]*)\n                # No number was found, return empty list\n  \
    \              ;;\n            *)\n                # Found a valid number, save\
    \ in result list\n                if [ -z \"$result\" ]; then\n              \
    \      result=\"$i\"\n                else\n                    result=\"$result$i\"\
    \n                fi\n                ;;\n        esac\n    done\n    echo \"\
    $result\"", "    local IFS=$1\n    shift\n    echo \"$1\" | sed \"s/ [^0-9]//g\"\
    \ | grep -Ev \"^\\s*$\" |\n        sed \"s/^\\s*//\"", "    local values=$1\n\
    \    local integers=$(echo $values | grep -P '^[0-9]+$')\n    echo $integers",
  "    local IFS=$1\n    shift\n    local output\n    output=()\n    for a in \"$@\"\
    \ ; do\n        if [[ $a =~ ^[0-9]+$ ]]; then\n            output+=(\"$a\")\n\
    \        fi\n    done\n    echo \"${output[@]}\"", "\tlocal IFS=\"\n\"\n\tlocal\
    \ filtered=()\n\tlocal str=$1\n\tlocal i last\n\tfor (( i=1; i<${#str}; i++ ));\
    \ do\n\t\tlast=${str}\n\t\tstr=${str#*$last}\n\t\t[ -z \"$str\" ] && return $filtered\n\
    \tdone\n\tIFS=$IFS\n\tfor (( i=1; i<${#str}; i++ )); do\n\t\t[[ ${str} == $((\
    \ ${str} * 2 )) ]] && filtered+=(\"$(( ${str} + 1 ))\")\n\tdone\n\tIFS=$IFS\n\t\
    printf \"%s\\n\" \"${filtered[@]}\"", "  IFS='' read -r -a array <<< \"$1\"\n\
    \  integers=()\n  for i in \"${array[@]}\"; do\n    if [[ ${i} =~ ^[0-9]+$ ]];\
    \ then\n      integers+=($i)\n    fi\n  done\n  echo \"${integers[@]}\"", "  \
    \  local output\n    output=$(IFS='\n'\nfor value in $1;\ndo\n    value=${value//\
    \ /$IFS}\n    value=${value//[^0-9]}\n    output=${output}$value\ndone\nIFS='\n\
    '\necho ${output}\n)", "  local list=\"$1\"\n  local integers=\"$2\"\n  while\
    \ read -r line; do\n    integers=$(echo \"$integers\" | grep -F -e \"${line}\"\
    \ | cut -d \" \" -f 1)\n  done < <(echo \"$list\")\n  echo \"$integers\"", " \
    \   local result=''\n    for item in \"$1\"; do\n        if [[ $(echo \"$item\"\
    \ | sed 's/[^0-9]/\\n/g') =~ ^[0-9]+$ ]]; then\n            result+=\" $item\"\
    \n        fi\n    done\n    echo \"$result\"", "  local _list\n  _list=$1\n  local\
    \ _ret\n  while read line; do\n    case \"$line\" in\n      *[!0-9]*)\n      \
    \  _list=\"${_list} \\\"$line\\\"\"\n        ;;\n    esac\n  done <<< \"$_list\"\
    \n  if [ -z \"$_list\" ]; then\n    _ret=\n  else\n    _list=\"${_list} \\\"$_list\\\
    \"\"\n    _ret=$(echo \"$_list\" | grep -Po \"[0-9]+\")\n  fi\n  echo \"${_ret}\"",
  "    local IFS=$1\n    local array=( $2 )\n    local result=()\n    for item in\
    \ ${array[@]}; do\n        if [[ $item =~ ^[0-9]+$ ]]; then\n            echo\
    \ \"$item\"\n            \n        else\n            result+=(\"$item\")\n   \
    \     fi\n    done\n    echo \"${result[*]}\"", "  local _args=( \"$@\" )\n  local\
    \ _ret=()\n  declare -a _array=( $(IFS=$'\\n'; echo \"${_args[@]}\") )\n  # echo\
    \ \"${_args[@]}\"\n  for ((i=0; i < ${#_array[@]}; i++)); do\n    declare -i _int=\"\
    ${_array[i]}\"\n    if [ \"$_int\" -gt 0 ]; then\n      _ret+=($_int)\n    fi\n\
    \  done\n  echo \"${_ret[@]}\"", "    local result\n    result=$(printf '%s\\\
    n' \"$@\" | sed -e 's/^ *//' -e 's/ *$//' -e 's/[ ]*[[:blank:]]*//g')\n    echo\
    \ \"$result\"", "  local value=\"${1}\"; shift\n  local integer values=(\"$@\"\
    )\n  local result=()\n  local match\n\n  for integer in \"${values[@]}\"; do\n\
    \    [[ \"$integer\" =~ ^[0-9]+$ ]] || continue\n    match=true\n    for value\
    \ in \"${values[@]}\"; do\n      if [[ \"$value\" = '\"' ]] || [[ \"$value\" =\
    \ '\"' ]]; then\n        value=$(echo \"$value\" | sed -e 's/^\"//' -e 's/\"$//')\n\
    \      fi\n      if [[ \"$integer\" == \"$value\" ]]; then\n        value=$(echo\
    \ \"$value\" | sed -e 's/^\"//' -e 's/\"$//')\n        ((match == false)) && break\n\
    \      fi\n    done\n    ((match == true)) && result+=($integer)\n  done\n\n \
    \ echo \"${result[@]}\"", "    local IFS=' '\n    local LIST\n    LIST=\"$1\"\n\
    \    shift 1\n    echo \"[$(echo \"$LIST\" | tr ' ' '\\n'  | grep -P '^[0-9]+$')\"",
  "  local var\n  local ret\n  local count\n  var=\"$1\"\n  count=0\n  # convert back\
    \ to array for $IFS\n  IFS=\n  for var in ${var//,/ }; do\n    count=$(( count\
    \ + 1 ))\n  done\n  IFS=' '\n  for var in ${var//,/ }; do\n    if [[ ${var} =~\
    \ ^[0-9]+$ ]]; then\n      ret=$ret\"'${var}'\"\n      count=$(( count - 1 ))\n\
    \      if [ $count -eq 0 ]; then\n        ret=$ret\n        break\n      fi\n\
    \    fi\n  done\n  IFS=$ORIGIFS\n  echo ${ret[@]}", "    local vals=\"$1\"\n \
    \   local ints=\"$2\"\n\n    local ret=\"\"\n    for val in $vals; do\n      \
    \  if ! [[ $val =~ ^[[:digit:]]+$ ]]; then\n            echo \"$val is not an\
    \ integer\" >&2\n        else\n            echo \"$val\" >&2\n        fi\n   \
    \ done", "    local string=$1\n    integers=()\n    while IFS= read -r -n1 string;\
    \ do\n        integers+=($string)\n    done < <(echo \"$string\" | grep -Eo '^[0-9]+')\n\
    \    echo \"${integers[@]}\"", "    local IFS=$1 IFS=\" \"\n    mapfile -t ary\
    \ < <(printf '%s\\n' \"$2\")\n    for v in \"${ary[@]}\"; do\n        if [ \"\
    ${#v}\" -eq \"1\" ]; then\n            echo \"$v\"\n        elif [ -n \"${v}\"\
    \ ] && [[ \"${v}\" =~ ^[0-9]+$ ]]; then\n            echo \"\\\"$v\\\"\"\n   \
    \     fi\n    done", "    local values=$1\n    shift\n    echo $(for value in\
    \ $values; do\n        [[ $value =~ ^[0-9]+$ ]] && echo \"$value\"\n    done)",
  "    IFS=' ' read -a array <<< \"$1\"\n    local i result=()\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i =~ ^[0-9]+$ ]]; then\n            result+=(\"$i\")\n  \
    \      fi\n    done\n    echo \"${result[@]}\"", "        local IFS= read -r -a\
    \ array <<< \"${1:-}\"\n        local result integer\n        for integer in \"\
    ${array[@]}\"; do\n                [[ \"$integer\" =~ ^[0-9]+$ ]] && echo \"$integer\"\
    \n        done", "    local l\n    local str\n    local int\n    local ret\n \
    \   str=\"$1\"\n    IFS=\" \" read -r -a ints <<< \"$str\"\n    for l in \"${ints[@]}\"\
    ; do\n        int=\"${l}\"\n        case \"$int\" in\n            -)\n       \
    \         int=\"\"\n                break\n                ;;\n            *)\n\
    \                if [ -n \"$int\" ]; then\n                    ret+=\"$int\"\n\
    \                fi\n        done\n    echo \"$ret\"", "  local list=\"$1\"\n\n\
    \  echo \"${list}\" | grep \"^[0-9]\" # Filter out any non-integers", "    local\
    \ IFS=' ' arr=$1\n    arr=($(echo $arr | tr \" \" \"\\n\"))\n    for num in ${arr[@]};\
    \ do\n        echo \"$num\"\n    done", "    local list=$1\n    local filter=$2\n\
    \    local output\n    # Filter out \"empty\" values returned by grep\n    list=$(echo\
    \ \"$list\" | grep -v \"^$\")\n    list=$(echo \"$list\" | grep -v \"^$\")\n \
    \   output=$(echo \"$list\" | grep -E -o \"$filter\")\n    output=$(echo \"$output\"\
    \ | tr -d '\\[\".,;:{}()]')\n    echo \"$output\"", "    local -r list=$1\n  \
    \  local -r exp=\"${2//[^0-9]/}\"\n    echo \"$list\" | tr ' ' '\\n' | grep -E\
    \ \"^[[:space:]]*${exp}$\" | tr ' ' '\\n'", "    local i\n    local x\n    local\
    \ y\n    local f\n    x=\"$1\"\n    # Avoid empty string\n    [[ \"$x\" =~ ^$#\
    \ ]] || return 1\n    # Filter empty values\n    [[ -z \"$x\" ]] || return 1\n\
    \    # Filter only integers\n    for ((i = 0; i < ${#x}; i++)); do\n        x=\"\
    ${x${x:$i:1}}\"\n        [[ \"$x\" =~ ^[0-9]+$ ]] || return 1\n    done\n    #\
    \ Return results\n    if [ \"$y\" ]; then\n        echo \"$y\"\n    else\n   \
    \     echo \"\"\n    fi", "    local IFS=$'\n    '\n    local integers\n    integers=\"\
    $(echo \"$1\" | sed 's/ [^0-9]*//g' | sed 's/^[0-9]*//g')\"\n    echo \"$integers\"",
  "    local item=\"$1\"\n    local filter=\"$2\"\n    IFS=$' '\n    set -- $filter\n\
    \    local result=()\n    while (( \"$#\" )); do\n        item=\"$item$1\"\n \
    \       (( ${#result} > 0 )) && result+=($item)\n        shift\n    done\n   \
    \ echo \"$result\"", "    local list=\"$1\"\n    local ret=()\n    for val in\
    \ $list; do\n        local val=\"${val//[!0-9]/}\"\n        if [[ $val == *\"\
    [^0-9]\"* ]]; then\n            echo \"'$val' does not contain any numbers\"\n\
    \        else\n            local i=-1\n            for i in $(seq 1 $((${#val}-1)))\n\
    \            do\n                ret[$i]=${val:$i:1}\n            done\n     \
    \   fi\n    done\n    echo \"${ret[@]}\"", "    local string=$1\n    local integers=()\n\
    \    local results=()\n    local space number\n\n    while IFS= read -r -n1 char;\
    \ do\n        case \"$char\" in\n            [0-9])\n                integers+=(\"\
    $char\")\n                ;;\n            *)\n                # We strip off trailing\
    \ whitespace from the value\n                space=\"${char%[[:space:]]*}\"\n\
    \                number=\"${char##*[[:space:]]}\"\n                integers+=($number)\n\
    \n                # Strip off the leading whitespace from the key\n          \
    \      space=\"${space%[[:space:]]*}\"\n\n                results+=(\"$space\"\
    )\n                ;;\n        esac\n    done < <(echo \"$string\")\n    echo\
    \ \"${results[@]}\"", "    local list=\"$1\"\n    local string=\"\"\n    for element\
    \ in $(echo $list | sed \"s/^ *//\" | sed \"s/ *$//\"); do\n        # echo $element\
    \ | grep -E \"^[0-9]+$\" > /dev/null\n        # echo $element | grep -E \"^[0-9]+$\"\
    \ >/dev/null\n        if [[ \"$element\" =~ ^[0-9]+$ ]]; then\n            string+=\"\
    $element\"\n        fi\n    done\n    echo \"$string\"", "    local LIST=\"$1\"\
    \n    local NUMBER\n    local VAL\n    local RESULT\n    NUMBER=$(\"${LIST}\"\
    \ | tr '[:lower:]' '[:upper:]')\n    for VAL in \"${LIST}\" ; do\n\t[[ \"$VAL\"\
    \ =~ ^[0-9]+$ ]] || RESULT=\"$RESULT$VAL \"\n    done\n    echo ${RESULT%?}",
  "    IFS=' ' read -r -a array <<< \"$1\"\n    numbers=()\n    for element in \"\
    ${array[@]}\"\n    do\n        if [ \"$element\" -eq \"$element\" -o \"$element\"\
    \ -gt \"$element\" -o \"$element\" -lt \"$element\" ]\n        then\n        \
    \    numbers+=(\"$element\")\n        fi\n    done\n    IFS=$'\\n'\n    echo \"\
    ${numbers[*]}\"", "    echo $1 | tr \" \" \",\" | sed 's/\"//g'", "  local integers_pattern=$1\n\
    \n  local result\n  result=$(echo ${integers_pattern} | sed -e 's/\\s*,\\s*|\\\
    s+/ /g')\n  # Filter out non-integers from the list\n  result=$(echo ${result}\
    \ | sed -e 's/[^0-9]//g')\n  result=$(echo ${result} | sed -e 's/^\\s*//g' -e\
    \ 's/\\s*$//g')\n  result=$(echo ${result} | tr '[:upper:]' '[:lower:]')\n\n \
    \ echo \"\\\"${result}\\\"\"", "  IFS=' ' read -r -a array <<< \"$1\"\n  local\
    \ result\n  result=()\n  local i\n  for i do\n    case \"$i\" in\n      *[!0-9]*\
    \ )\n        echo \"'$i' is unfiltered integer\" >&2\n        ;;\n      * )\n\
    \        result+=(\"$i\")\n        ;;\n    esac\n  done\n  IFS=' '\n  echo \"\
    ${result[@]}\"", "    echo $1 | sed -e 's/^\\([0-9]*\\).*/\"\\1\"/'"]
stop_tokens:
- "\n}"
