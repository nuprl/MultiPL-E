language: sh
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    set -- $1 # split input on white-space (spaces, tabs,\
    \ newlines)\n    local max=0\n    local items=\"\"\n    for ((i=1; i<=$#; i++))\
    \ do\n        local chars=$(echo \"$1\" | tr ' ' '\\n' | sort -u)\n        local\
    \ count=0\n        local item\n        for char in $chars ; do\n            if\
    \ [[ $char == $items[$count] ]] ; then\n                ((count++))\n        \
    \    else\n                if ((count > max)) ; then\n                    max=$count\n\
    \                    item=$char\n                fi\n                items=$item\n\
    \                count=1\n            fi\n        done\n    done\n    echo \"\
    $item\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local nunique=0\n    local n=0\n    local word\n   \
    \ for word in $*; do\n        nunique=$(uniq -cs <<<\"$word\" | awk '{ print $2\
    \ }')\n        if (( nunique > n )); then\n            word=$word\n          \
    \  n=$nunique\n        fi\n    done\n    echo $word\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'uniq: option requires an argument -- ''s''

    Try ''uniq --help'' for more information.

    uniq: option requires an argument -- ''s''

    Try ''uniq --help'' for more information.

    uniq: option requires an argument -- ''s''

    Try ''uniq --help'' for more information.

    uniq: option requires an argument -- ''s''

    Try ''uniq --help'' for more information.

    uniq: option requires an argument -- ''s''

    Try ''uniq --help'' for more information.

    uniq: option requires an argument -- ''s''

    Try ''uniq --help'' for more information.

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max=''\n  local count=''\n  local strings=''\n \
    \ local unq=''\n  local i=0\n  while read -r string; do\n    strings=$strings$string$'\\\
    n'\n    ((i++))\n  done <<< \"$1\"\n\n  # remove leading and trailing spaces from\
    \ strings\n  strings=\"${strings#*[[:space:]]}\"\n  strings=\"${strings%[[:space:]]}\"\
    \n\n  # split strings by space\n  IFS=$'\\n' read -r -a strings <<< \"$strings\"\
    \n\n  unq=$(echo \"$strings\" | tr ' ' '\\n' | sort | uniq -c)\n  unq=\"${unq[@]}\"\
    \n  max=$(echo \"${unq[@]}\" | sort | tail -1 | sort -n | head -n 1)\n  max=\"\
    ${max%?}\"\n  echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=\"$1\"\n    local maxcount=0\n    local\
    \ maxword\n\n    for word in $words; do\n        word=${word//[![:alnum:]]/}\n\
    \        local count=\"${#word}\"\n        if [ $count -gt $maxcount ]; then\n\
    \            maxcount=$count\n            maxword=$word\n        fi\n    done\n\
    \n    echo $maxword\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -n words=\"$1\";\n    local len=${#words[@]};\n\
    \    local word;\n    local uniq;\n    local max;\n    local i;\n\n    # initialize\
    \ max\n    max=$(echo \"$len\" | bc);\n\n    # loop through words\n    for ((i=0;\
    \ i<len; i++)); do\n        # split word to get count\n        word=$(echo \"\
    $words[i]\" | sed -e 's/^\"//' -e 's/\"$//');\n        uniq=$(echo \"$word\" |\
    \ tr ' ' '\\n' | sort | uniq | wc -l);\n\n        # compare with max\n       \
    \ if (( uniq > max )); then\n            word=$words[i];\n            max=uniq;\n\
    \        fi;\n    done\n    echo $word;\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp65iikwm1.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # Write your code here\n  local list=\"$1\"\n  local max=0\n\
    \  local maxword=\"\"\n  for w in \"$list\"; do\n    local charcount=$(echo \"\
    $w\" | awk '{print length($0)}')\n    if [ $charcount -gt $max ]; then\n     \
    \ max=$charcount\n      maxword=$w\n    fi\n  done\n  echo $maxword\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -a words=($1)\n    local max=1\n    local idx=1\n\
    \    local chars=0\n    # split into word and characters\n    for w in \"${words[@]}\"\
    ; do\n        local wc=$( wc -c <<< \"$w\" )\n        # if the number of chars\
    \ is greater than the maximum\n        # then the word has greatest number of\
    \ unique characters\n        if [ \"$wc\" -gt \"$max\" ]; then\n            max=$wc\n\
    \            idx=$idx\n        fi\n        chars=$(($chars+$wc))\n    done\n \
    \   # return word\n    echo \"${words[$idx]}\";\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local var=\"$1\"\n    # Strip leading and trailing spaces,\
    \ if any\n    var=\"${var## }\"\n    var=\"${var%% }\"\n    # Replace multiple\
    \ spaces with single space\n    var=\"${var// /}\"\n    # Remove all leading and\
    \ trailing spaces\n    var=\"${var}\"\n    # Remove all white spaces and tabs\n\
    \    var=\"${var// }\"\n    # Remove leading and trailing white spaces and tabs\n\
    \    var=\"${var}\"\n    # Replace multiple whitespace with single whitespace\n\
    \    var=\"${var// }\"\n    # Remove all leading and trailing white spaces and\
    \ tabs\n    var=\"${var}\"\n    # Remove all whitespace\n    var=\"${var// }\"\
    \n    # Count unique characters\n    var=\"${var##*([[:space:]])}\"\n    var=\"\
    ${var%%([[:space:]])*}\"\n    echo \"$var\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words count\n    IFS=$'\\n' words=( \"$1\" ) count=0\n\
    \n    for word in \"${words[@]}\"; do\n        (( ++count ))\n    done\n\n   \
    \ local max_count=${words[*]}\n    for word in ${words[@]};do\n        if [ \"\
    $max_count\" -eq \"$count\" ]; then\n            echo $word\n        elif [ \"\
    $max_count\" -gt \"$count\" ]; then\n            echo $word\n        fi\n    done\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_vbnr2th.sh: line 24: [: name of string: integer expression expected

    /tmp/tmp_vbnr2th.sh: line 26: [: name of string: integer expression expected

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local sorted_list=$1\n  local count=0\n  local max_element\n\
    \  local max_count=0\n  local sorted_element_count\n  local max_element\n  local\
    \ max_count=0\n  local index\n\n  while read -r element; do\n    sorted_element_count=$(echo\
    \ \"$sorted_list\" | grep -c \"$element\")\n    count=$(( $count + $sorted_element_count\
    \ ))\n  done <<< \"$sorted_list\"\n\n  sorted_list=$( echo \"$sorted_list\" |\
    \ sort -u )\n  while read -r element; do\n    sorted_element_count=$(echo \"$sorted_list\"\
    \ | grep -c \"$element\")\n    count=$(( $count + $sorted_element_count ))\n \
    \ done <<< \"$sorted_list\"\n\n  if [ \"$count\" -gt \"$max_count\" ]; then\n\
    \    max_count=$count\n    max_element=$sorted_list\n  fi\n\n  echo \"$max_element\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local maxcount count\n    maxcount=$(echo\
    \ \"$list\" | cut -d\" \" -f1 | sort | uniq -c | sort -rn | head -1)\n    count=$((maxcount+1))\n\
    \    echo \"${list[$((maxcount-1))]}\" | cut -c1- | sort -n | head -1\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyc5_w9ej.sh: line 18: 1 name: syntax error in expression (error
    token is "name")

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -n arr=(\"${1:-}\")\n\n    local -n count=\"${arr[@]}\"\
    \ count\n\n    for word in ${arr[@]}; do\n        count=${#word}\n        if ((count\
    \ > max)); then\n            max=count\n            best_word=${word}\n      \
    \  fi\n    done\n\n    printf \"%s\\n\" \"${arr[@]}\" | tr -s ' ' | awk -v max=\"\
    $max\" '{\n       s=\"\";\n       for (i=1; i <= NF; i++) {\n          s += $i\n\
    \       }\n       print s\n    }' | sort -nk1 | head -1\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwweh2ruw.sh: line 15: local: arr: reference variable cannot be
    an array

    /tmp/tmpwweh2ruw.sh: line 17: local: `name of string'': invalid variable name
    for name reference

    /tmp/tmpwweh2ruw.sh: line 20: `4'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local MAX_LEN\n    local MAX_VAL\n    local LIST=\"\
    $1\"\n    local CHAR_LIST\n    local VAL\n    local COUNT\n\n    MAX_LEN=0\n \
    \   MAX_VAL=\"\"\n    VAL=`head -n 1 <<< $LIST`\n    COUNT=`echo \"$VAL\" | wc\
    \ -l | cut -d' ' -f1`\n    if [ \"$COUNT\" -gt \"$MAX_LEN\" ]; then\n        MAX_LEN=$COUNT\n\
    \        MAX_VAL=$VAL\n    elif [ \"$COUNT\" == \"$MAX_LEN\" ]; then\n       \
    \ MAX_VAL=$VAL\n    fi\n\n    for VAL in $LIST; do\n        COUNT=`echo \"$VAL\"\
    \ | wc -l | cut -d' ' -f1`\n        if [ \"$COUNT\" -gt \"$MAX_LEN\" ]; then\n\
    \            CHAR_LIST=$(echo \"$VAL\" | tr -s \" \")\n            CHAR_LIST=\"\
    `echo \"$CHAR_LIST\" | sed 's/ /\\\\ /g'`\"\n            VAL=\"`echo \"$VAL\"\
    \ | sed 's/ /\\\\ /g'`\"\n            COUNT=`echo \"$VAL\" | wc -l | cut -d' '\
    \ -f1`\n            if [ \"$COUNT\" -gt \"$MAX_LEN\" ]; then\n               \
    \ MAX_LEN=$COUNT\n                MAX_VAL=$VAL\n                MAX_VAL_CHARS=$CHAR_LIST\n\
    \            fi\n        elif [ \"$COUNT\" == \"$MAX_LEN\" ]; then\n         \
    \   CHAR_LIST=$(echo \"$VAL\" | tr -s \" \")\n            CHAR_LIST=\"`echo \"\
    $CHAR_LIST\" | sed 's/ /\\\\ /g'`\"\n            VAL=\"`echo \"$VAL\" | sed 's/\
    \ /\\\\ /g'`\"\n            MAX_VAL=$VAL\n            MAX_VAL_CHARS=$CHAR_LIST\n\
    \        fi\n    done\n    echo $MAX_VAL\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local word_list=\"$1\"\n  local max_unique_chars=0\n \
    \ local word_with_max_unique_chars=\"\"\n\n  local max_unique_char_array=()\n\
    \  local unique_chars\n\n  for word in ${word_list}; do\n    unique_chars=$(echo\
    \ \"${word}\" | tr \" \" \"_\" | sort | uniq -c)\n\n    if [[ ${unique_chars}\
    \ -gt ${max_unique_chars} ]]; then\n      max_unique_chars=${unique_chars}\n \
    \     word_with_max_unique_chars=${word}\n    fi\n\n    unique_chars=()\n\n  done\n\
    \n  echo \"${word_with_max_unique_chars}\"\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy4ve7vld.sh: line 25: [[: 1 name: syntax error in expression (error
    token is "name")

    /tmp/tmpy4ve7vld.sh: line 25: [[: 1 of: syntax error in expression (error token
    is "of")

    /tmp/tmpy4ve7vld.sh: line 25: [[: 1 string: syntax error in expression (error
    token is "string")

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_unique=0\n    local max_word=\"\"\n    local\
    \ tmp_word=\"\"\n    local count=0\n    local unique_char=\"\"\n\n    while read\
    \ -r line; do\n        if [ -z \"$max_word\" ]; then\n            tmp_word=\"\
    $line\"\n        else\n            for (( c=0; c<$count; c++ )); do\n        \
    \        if [ \"$max_word\" == \"$tmp_word\" ]; then\n                    unique_char=\"\
    $max_unique\"\n                    break\n                fi\n               \
    \ if [ \"$line\" = \"$tmp_word\" ]; then\n                    unique_char=\"$c\"\
    \n                    break\n                fi\n            done\n          \
    \  if [ \"$unique_char\" -eq \"$max_unique\" ]; then\n                max_word=\"\
    $line\"\n            elif [ \"$unique_char\" -lt \"$max_unique\" ]; then\n   \
    \             max_word=\"$max_word\"\n                tmp_word=\"$line\"\n   \
    \         fi\n        fi\n        let \"count++\"\n    done <<< \"$1\"\n\n   \
    \ echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local string_list=\"$1\";\n  local max_chars=0;\n  local\
    \ max_string=\"\";\n  local max_string_len=0;\n  while read line; do\n    local\
    \ string_len_current=${#line};\n    if [ \"$string_len_current\" -gt \"$max_string_len\"\
    \ ]; then\n      max_string_len=\"$string_len_current\";\n      max_chars=0;\n\
    \      max_string=\"\";\n    fi\n\n    local substring=\"${line}\";\n    for ((\
    \ i=0; i<${#substring}; i++ )); do\n      local char=\"${substring:$i:1}\";\n\
    \      if [ ${#max_string} == \"0\" ]; then\n        max_chars=0;\n        max_string=\"\
    ${substring:$i:1}\";\n      else\n        max_chars=$(( ${#max_string} + ${#char}\
    \ ));\n        if [ \"$max_chars\" -gt \"$max_chars\" ]; then\n          max_string=\"\
    ${substring:$i:1}\";\n        fi\n      fi\n    done\n  done\n  echo \"$max_string\"\
    ;\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam\
    \ game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n\
    \    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this\
    \ game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\"\
    ) = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n\
    \    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\"\
    ) = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=19 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660058493
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local count\n    local max\n    local tmp\n    local\
    \ len\n\n    count=0\n    max=1\n    tmp=${1//[[:space:]]/}\n    len=${#tmp}\n\
    \    while [ $count -lt $len ]; do\n        count=$(( $count + 1 ))\n        tmp=${1//[[:space:]]/}\n\
    \        len=$(( $len - 1 ))\n        if [[ $tmp -eq $max ]]; then\n         \
    \   max=${1//[[:space:]]/}\n        else\n            tmp=${1//[[:space:]]/}\n\
    \            len=$(( $len - 1 ))\n            if [[ $tmp -gt $max ]]; then\n \
    \               max=${1//[[:space:]]/}\n            fi\n        fi\n    done\n\
    \    echo $max\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list maxcount maxstr\n    list=${1// /}  # replace\
    \ spaces with newlines so split works on lines\n    maxcount=0\n    maxstr=\"\"\
    \n\n    for word in $list; do\n        count=$(echo \"$word\" | tr -cd \"${IFS}\"\
    \ | sort | uniq -c | \\\n                 sort -rn | head -1)\n        if [ \"\
    $count\" -gt \"$maxcount\" ]; then\n            maxcount=$count\n            maxstr=$word\n\
    \        fi\n    done\n\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  sort -u | head -n 1;\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=28 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=9 encoding='utf-8'>
  timestamp: 1660058493
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n\tlocal tmp\n\ttmp=$(echo \"$1\" | awk '{\n\t\tfor(i=2;\
    \ i<=NF; i++){\n\t\t\tarr[$i]++\n\t\t}\n\t\tn = NF\n\t\tdelete arr\n\t\tfor(i=1;\
    \ i<=n; i++){\n\t\t\tfor(j=1; j<=arr[i]; j++){\n\t\t\t\tif(arr[j] > arr[i-j]){\n\
    \t\t\t\t\tarr[j] = arr[i]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(i=1; i<=n; i++){\n\
    \t\t\tif(arr[i] != 1){\n\t\t\t\treturn $i\n\t\t\t}\n\t\t}\n\t}')\n\techo \"$tmp\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "awk: cmd. line:16: \t\t\t\treturn $i\nawk: cmd. line:16: \t\t\t\t^ `return'\
    \ used outside function context\n"
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local input_list=\"$1\"\n    local len=0\n    local\
    \ max_c=0\n    local max_str=''\n\n    while read -r word; do\n        ((len++))\n\
    \        [[ \"$word\" =~ ^([[:alpha:]]+) ]] || continue\n        local c=${#word}\n\
    \        if (( c>max_c )); then\n            max_str=\"${word}\"\n           \
    \ max_c=$c\n        fi\n    done <<< \"$input_list\"\n\n    local sorted_list=(${!max_c})\n\
    \    local idx=${#sorted_list[@]}\n    if [ \"$idx\" -gt 0 ]; then\n        echo\
    \ \"${sorted_list[1]}\"\n    else\n        echo \"${max_str}\"\n    fi\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local IFS='' maxlen=0\n    for i in $1 \n    do\n  \
    \      local words=( $(echo $i | sed 's/ /\\n/g' | sort | uniq | wc -l) )\n  \
    \      local max=$(( ${#words[@]} > maxlen )) \n        maxlen=$(( ${#words[@]}\
    \ )) \n        if [ $max = 0 ]; then\n            echo \"$i\"\n        elif [\
    \ $max -gt 0 ]; then\n            echo \"$i\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words result\n  words=$@\n  words=$(echo \"$words\"\
    \ | tr \" \" \"\\n\")\n  result=$(echo \"$words\" | sort | uniq -c | sort -rnk\
    \ 1 | head -1)\n  echo \"$result\"\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local sorted_list=$(echo $1 | sort -u)\n    local len=0\n\
    \    while read -r line; do\n        len=$(echo $line | wc -c)\n        local\
    \ count=0\n        for word in $sorted_list; do\n            (( count+=(${line:$len}\
    \ == ${word:0:$len} ))) 2>/dev/null\n        done\n        if (( $count > 1 ));\
    \ then\n            echo \"$line\"\n            break\n        fi\n    done <\
    \ <(echo \"$sorted_list\" | sort)\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local sorted_list\n    local max=\"\"\n    local count=0\n\
    \    local word\n    for word in $1;\n    do\n        count=0\n        sorted_list=$(\
    \ echo $word | sort -k 1 -n )\n        for unique_char in $sorted_list\n     \
    \   do\n            (( count=count+1 ))\n        done\n        if [ \"$count\"\
    \ -gt \"$max\" ]\n        then\n            max=$count\n        fi\n    done\n\
    \    echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqqce718h.sh: line 27: [: : integer expression expected

    /tmp/tmpqqce718h.sh: line 27: [: : integer expression expected

    /tmp/tmpqqce718h.sh: line 27: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words count=0 max=0\n    IFS=' ' read -r -a words\
    \ <<< \"$1\"\n\n    for word in \"${words[@]}\"; do\n        (( count++ ))\n \
    \       [[ $max < ${#word} ]] && max=${#word}\n    done\n\n    if [[ $max -gt\
    \ 0 ]]; then\n        echo \"${words[$(( ${#words[@]} - 1 ))]}\"\n    else\n \
    \       echo \"${words[0]}\"\n    fi\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n\tlocal -n l=$1\n\tlocal max=0\n\tlocal maxstr\n\tfor str\
    \ in \"${l[@]}\"; do\n\t\tlocal n=0\n\t\tfor c in \"${str//[!A-Za-z]}\"; do\n\t\
    \t\t((n++))\n\t\tdone\n\t\tif (( n > ( ${max} + ${#str} ))); then\n\t\t\tmax=${n}\n\
    \t\t\tmaxstr=\"${str}\"\n\t\tfi\n\tdone\n\techo $maxstr\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqcmk9n4c.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list_ref=$1\n    local count=0\n    local max_element=-1\n\
    \    local max_count=0\n    local temp=()\n    local element\n\n    for element\
    \ in $list_ref; do\n        if [ \"$count\" -gt \"$max_count\" ]; then\n     \
    \       count=0;\n            temp=()\n        fi\n        count=$(( $count +\
    \ 1 ))\n        local element2=$(wc -c <<< \"$element\")\n        if [ \"$max_count\"\
    \ -eq \"0\" ]; then\n            max_count=$element2\n            max_element=$element\n\
    \        else\n            if [ \"$element2\" -gt \"$max_count\" ]; then\n   \
    \             max_count=$element2\n                max_element=$element\n    \
    \        fi\n        fi\n        temp+=($element)\n    done\n\n    echo ${temp[$max_count]}\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    echo \"$1\" | sort | uniq -c | sort -n -k 1 -r | head\
    \ -n 1\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local nmax=0\n  local max\n  local word\n  local words=()\n\
    \n  for word in $@; do\n    [[ -z ${words} ]] || words=$words $word\n  done\n\n\
    \  nmax=$(echo \"${#words}\" | uniq -c)\n  if [[ ${nmax} -gt 0 ]]; then\n    word=\n\
    \    for word in ${words[@]}; do\n      if [[ -z ${max} || ${#word} -gt ${max}\
    \ ]]; then\n        max=$word\n      fi\n    done\n  fi\n  echo \"${max}\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphlfuf4nc.sh: line 25: [[: 1 0: syntax error in expression (error
    token is "0")

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local IFS=$1\n    local unique_count\n    local max_count=${2:-0}\n\
    \    local word\n    local words_with_unique_characters=()\n\n    for word in\
    \ $@; do\n        # Count the unique characters for this word.\n        unique_count=$(echo\
    \ $word | tr ' ' '\\n' | sort | uniq -c | \\\n            awk '{print $2 $1}'\
    \ | sort -nr | head -n 1)\n\n        # If the number of unique characters is greater\
    \ than our maximum,\n        # then keep it.\n        if (( ${unique_count:-0}\
    \ > max_count )); then\n            max_count=$unique_count\n            words_with_unique_characters=\"\
    $word\"\n        fi\n    done\n\n    echo \"$words_with_unique_characters\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_count best_word x\n  x=$1\n  max_count=0\n \
    \ best_word=\"\"\n  for word in $x; do\n    word_count=$(echo $word | tr \" \"\
    \ \"_\" | sed \"s/_$//g\" | sed \"s/_//g\" | wc -c)\n    if [ $word_count -gt\
    \ $max_count ]; then\n      best_word=$word\n      max_count=$word_count\n   \
    \ fi\n  done\n  echo $best_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n local word=\"\"\n local max_chars=0\n local i=$#\n while\
    \ [ $i -gt 0 ]; do\n  word=${1[i]}\n  max_chars=$(wc -w <<< \"$word\" | cut -d\\\
    \  -f 1)\n  i--\n done\n if [ \"$max_chars\" -eq 0 ]; then\n  echo -n $word\n\
    \ else\n  i=1\n  while [ $i -le $# ]; do\n   word=${1[i]}\n   if [ $max_chars\
    \ -eq $(wc -w <<< \"$word\" | cut -d\\  -f 1) ]; then\n    if [ \"${1[i-1]}\"\
    \ != \"${word}\" ]; then\n     echo -n \"$word\"\n     break\n    fi\n    ((i++))\n\
    \   else\n    if [ \"$word\" != \"${1[i-1]}\" ]; then\n     echo -n \"$word\"\n\
    \    fi\n    ((i++))\n   fi\n  done\n fi\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0igby27v.sh: line 19: ${1[i]}: bad substitution

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local i\n    local max\n    local len\n    len=${#1}\n\
    \    for ((i=0;i<len;++i)); do\n        local j\n        for ((j=0;j<i;++j));\
    \ do\n            [[ \"$1\" =~ \"$2([^[:space:]]|$)\" ]]\n            [[ \"$1\"\
    \ =~ \"$2$\" ]]\n        done\n        [[ \"$1\" =~ \"$2([^[:space:]]|$)\" ]]\n\
    \        [[ \"$1\" =~ \"$2$\" ]]\n        [[ \"$2\" == \"$max\" ]]\n        [[\
    \ \"$1\" =~ \"$2$\" ]]\n        [[ \"$2\" == \"$max\" ]]\n        [[ \"$2\" ==\
    \ \"$max\" ]]\n        [[ \"$2\" == \"$max\" ]]\n        [[ \"$2\" == \"$max\"\
    \ ]]\n    done\n    echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list_length=\"${#1}\"\n    if [ ${list_length}\
    \ -eq 0 ] ; then\n        echo \"No words to search\"\n    else\n        local\
    \ list_sorted=(${1//\" \"/})\n        local list_word_count=$(sort ${list_sorted[@]}\
    \ |uniq -c |sort -nr|head -n 1)\n        local list_word=${list_word_count//[[:space:]]}\n\
    \        echo \"${list_word}\"\n    fi\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: nameofstring: No such file or directory

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local line\n    local len\n    local words\n    local\
    \ max\n    local count\n    local word\n    local counts\n    local index\n  \
    \  words=($1)\n    len=$(echo \"${#words[@]}\" | bc)\n    max=0\n    count=0\n\
    \    counts=()\n    for ((i = 0; i < ${len}; i++)); do\n        word=$(echo \"\
    ${words[i]}\" | sed 's/ //g')\n        word=\"${word//./}\"\n        count=${#word}\n\
    \        if [ \"$count\" -gt \"$max\" ]; then\n            max=$count\n      \
    \  fi\n        counts[$i]=$count\n    done\n    for ((i = 0; i < ${len}; i++));\
    \ do\n        if [[ ${counts[$i]} -gt \"$max\" ]]; then\n            index=$(echo\
    \ $i | bc)\n            word=${words[$index]}\n        fi\n    done\n    echo\
    \ \"${word}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -a strings=($1);\n    local max=0;\n    local\
    \ max_string=\"\";\n    for string in \"${strings[@]}\"; do\n        (( max+=${#string}\
    \ ));\n        if (( max > ${#max_string} )); then\n            max_string=\"\
    ${string}\"\n        fi\n    done\n    echo \"$max_string\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n\techo $1 | sed -e 's/ /\\n/g' | sort -n | uniq -c | sort\
    \ -n | head -n 1\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local sorted_list\n  local sorted_list_len\n  local max_num\n\
    \  local max_num_len\n  sorted_list=( $1 )\n  sorted_list_len=${#sorted_list[@]}\n\
    \  max_num=\"\"\n  max_num_len=0\n  for i in $(seq 0 $((${sorted_list_len}-1))\
    \ ); do\n    if [[ \"${sorted_list[$i]}\" == *\"$((${sorted_list_len} - 1))\"\
    * ]]; then\n      max_num=$((${sorted_list_len} - 1))\n      break\n    fi\n \
    \   num_unique=$(echo \"${sorted_list[$i]}\" | sort | uniq -c | wc -l )\n    if\
    \ [[ ${num_unique} -gt ${max_num_len} ]]; then\n      max_num=${sorted_list[$i]}\n\
    \      max_num_len=${num_unique}\n    fi\n  done\n  echo \"$max_num\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    echo \"${1}\" | \\\n    sort | \\\n    uniq -c | \\\n\
    \    sort -n | \\\n    head -1\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local input=${1}\n    local max_element=0\n    local\
    \ max_element=${#input[@]}\n    local element\n    for element in ${input[@]};\
    \ do\n        local char_count=$( wc -w <<<\"$element\" )\n        if (( char_count\
    \ > max_element )); then\n            max_element=char_count\n            max_element=${element}\n\
    \        fi\n    done\n    echo \"$max_element\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local charlist=(${1//[![:space:]]/ })\n  local maxcount=$(echo\
    \ \"${charlist[*]}\" | uniq -u | wc -l)\n  local maxstr=${charlist[$maxcount]}\n\
    \  for (( i=1; i<${#charlist[*]}; i++ )); do\n    local currcount=$(echo \"${charlist[$i]}\"\
    \ | uniq -u | wc -l)\n    local currstr=${charlist[$i]}\n    if [ $currcount -ge\
    \ $maxcount ]; then\n      maxcount=$currcount\n      maxstr=$currstr\n    fi\n\
    \  done\n  echo \"$maxstr\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local word=$1\n\n    for w in $word; do\n        local\
    \ count=0\n        for c in $w; do\n            (( count++ ))\n        done\n\
    \        if (( count > ${#w} )); then\n            word=$w\n        fi\n    done\n\
    \    echo $word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_char=0\n    local current_word=\"\
    \"\n    local current_count=0\n\n    # loop over the words\n    for w in $words;\
    \ do\n        # Count unique characters\n        current_count=0\n        for\
    \ c in $w; do\n            ((current_count += $current_word))\n        done\n\
    \        # If the current count is greater than the current maximum, then\n  \
    \      # update it\n        if (( current_count > max_char )); then\n        \
    \    max_char=$current_count\n            current_word=$w\n        fi\n    done\n\
    \    echo \"$max_char\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2egbkn4c.sh: line 25: ((: current_count += : syntax error: operand
    expected (error token is "+= ")

    /tmp/tmp2egbkn4c.sh: line 25: ((: current_count += : syntax error: operand expected
    (error token is "+= ")

    /tmp/tmp2egbkn4c.sh: line 25: ((: current_count += : syntax error: operand expected
    (error token is "+= ")

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words count\n  local max_count max_word\n\n  words=(\
    \ $1 )\n  count=0\n  max_count=0\n  max_word=\" \"\n\n  local i j k\n\n  for ((i=0;\
    \ i<${#words[@]}; i++)); do\n    ((count=${#words[@]}))\n    for ((j=i; j<${#words[@]};\
    \ j++)); do\n      if [[ ${words[$j]} != ${words[$i]} ]]; then\n        ((count--))\n\
    \      fi\n    done\n    if [[ ${count} -gt ${max_count} ]]; then\n      max_word=\"\
    ${words[$i]}\"\n      max_count=\"${count}\"\n    fi\n  done\n\n  echo $max_word\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$*\n    local max_word=''\n    local max_count=0\n\
    \    local word\n\n    for word in $words; do\n        count=$((${#word} + 1))\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_word=$word\n  \
    \          max_count=$count\n        fi\n    done\n\n    echo \"${max_word}\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local maxlen=0\n  local maxword=\"\"\n  local i\n\n  for\
    \ ((i=1;i<=$#;i++)); do\n    local word=${1:$i}\n    local len=${#word}\n    if\
    \ (( len > maxlen )) ; then\n      maxlen=$len\n      maxword=$word\n    fi\n\
    \  done\n  echo $maxword\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local word=$(echo $words | tr '\
    \ ' ',' | tr ',' '\\n' | sort -u | sed \"s/,$//g\")\n    echo $(echo $word | tr\
    \ ' ' '\\n' | tr ',' '\\n')\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max=${1:?Missing arguments}\n    local word=${2?Missing\
    \ arguments}\n    local count\n    local counts\n    local unique_chars\n    local\
    \ words\n\n    # Split the list by spaces so we have each word\n    words=$( echo\
    \ \"$word\" | tr ' ' '\\n' | sort )\n    # Initialize an associative array where\
    \ we store the frequencies of unique characters\n    counts=$( declare -A counts=()\
    \ )\n    # Loop through the words in the list\n    for word in $words; do\n  \
    \      count=$( echo \"$word\" | tr ' ' '\\n' | sort | uniq | wc -l )\n      \
    \  # Store the number of unique characters in the word in the dictionary\n   \
    \     counts[$word]=$count\n        # Update the max value with the number of\
    \ unique characters\n        max=$(( ${max:-0} < $count ? $count : ${max:-0} ))\n\
    \    done\n    # Sort dictionary by value\n    local sorted\n    for word in \"\
    ${!counts[@]}\"; do\n        sorted=$word\n        break\n    done\n    # Return\
    \ the word with maximum number of unique characters\n    echo \"$sorted\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0d5g430m.sh: line 16: 2: Missing arguments

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local MAX_LENGTH=-1\n  local STRINGS=( $1 )\n\n  for STRING\
    \ in \"${STRINGS[@]}\"; do\n    LEN=${#STRING}\n    if [[ $LEN -gt $MAX_LENGTH\
    \ ]]; then\n      MAX_LENGTH=$LEN\n    fi\n  done\n\n  echo \"${STRINGS[*]}\"\
    \ | sort | uniq -c | sort -n -k1 | head -1\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n\n    local counts=()\n    local max_char=0\n\
    \    local max_word=\"\"\n    for word in $words; do\n        local word_count=`echo\
    \ $word | wc -c`\n        counts[$word_count]=$word\n        if [ $word_count\
    \ -gt $max_char ]; then\n            max_char=$word_count\n            max_word=$word\n\
    \        fi\n    done\n\n    local count=`echo $max_char`\n    while [ $count\
    \ -le 1 ]; do\n        count=$(( $count - 1 ))\n        local max=`echo $counts\
    \ | sort -nr | head -1`\n        if [ \"$max\" != \"\" ]; then\n            count=$((\
    \ $count + 1 ))\n        fi\n    done\n\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local IFS=$'\\n'\n  local uniques\n  local word\n\n  IFS=\"\
    \ \" read -a words <<< \"$1\"\n  uniques=$(comm -13 ${words[@]} <(printf '%s\\\
    n' \"${words[@]}\" | sort | uniq))\n  word=\"${words[${uniques}]}\"\n  echo \"\
    $word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: "comm: extra operand \u2018string\u2019\nTry 'comm --help' for more information.\n"
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local IFS=\" \" arr=($1)\n    local len=${#arr[@]}\n\
    \    local max=${#arr[@]}\n    for i in $(seq 0 $((${#arr[@]} - 1))); do\n   \
    \     local icount=${arr[i]//[^a-zA-Z0-9]} # count unique chars\n        if [\
    \ $((${#icount})) > $max ]; then\n            max=${icount}\n        fi\n    done\n\
    \    echo \"${arr[$((${#arr[@]}-1))]}\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpydaqmbde.sh: line 19: 0

    1

    2: syntax error in expression (error token is "1

    2")

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local unique_count=0\n  local unique_word=\n  local max_unique_count=0\
    \ max_unique_word=\n\n  for word in \"$1\"; do\n    [[ -z \"$unique_word\" ]]\
    \ && unique_word=\"$word\"\n    [[ -z \"$unique_count\" ]] && unique_count=`echo\
    \ $word | cut -c -$max_unique_count | wc -c`\n    (( $unique_count > max_unique_count\
    \ )) && max_unique_count=$unique_count max_unique_word=\"$unique_word\"\n  done\n\
    \n  echo \"$max_unique_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local MAX_WORD=\"\"\n  local WORDS=( $1 )\n  local CHARS=\"\
    \"\n  local MAX_LEN=0\n\n  local i\n  for i in \"${!WORDS[@]}\"; do\n    CHARS+=\"\
    \ $( echo \"${WORDS[i]}\" | tr [:upper:] [:lower:] | sort | uniq | wc -l )\"\n\
    \    WORD_LEN=\"${#WORDS[i]}\"\n    if [[ \"$WORD_LEN\" -gt \"$MAX_LEN\" ]]; then\n\
    \      MAX_LEN=\"$WORD_LEN\"\n      MAX_WORD=\"${WORDS[i]}\"\n    fi\n  done\n\
    \  echo \"${MAX_WORD}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    sort -u | uniq -c | sort -n | head -1\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=24 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=18 encoding='utf-8'>
  timestamp: 1660058493
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local num_unique=0\n    local num_chars=0\n    local\
    \ num_words=0\n    local max_num_unique=0\n    local max_num_chars=0\n    local\
    \ max_num_words=0\n    local max_word_length=0\n    local max_word\n    local\
    \ word\n\n    # loop over each string\n    for word in ${1//,/ }; do\n       \
    \ # find out the number of unique characters in this string\n        num_chars=$(echo\
    \ \"$word\" | wc -c)\n        if [[ $num_chars -eq 0 ]]; then\n            num_words=$((num_words+1))\n\
    \        else\n            num_unique=$(echo \"$word\" | sort | uniq -c)\n   \
    \         if [[ $num_unique -gt $max_num_unique ]]; then\n                max_num_unique=$num_unique\n\
    \                max_num_chars=$num_chars\n                max_num_words=$((num_words+1))\n\
    \                max_word_length=$(echo \"$word\" | wc -c)\n                max_word=$word\n\
    \            fi\n        fi\n    done\n\n    if [[ $num_words -gt 0 ]]; then\n\
    \        # find the word with maximum number of unique characters\n        if\
    \ [[ $max_num_unique -lt $max_num_chars ]]; then\n            # case 1: max_num_unique\
    \ < max_num_chars\n            return $max_word\n        else\n            # case\
    \ 2: max_num_unique > max_num_chars\n            return $(find_max \"$max_word\"\
    )\n        fi\n    else\n        # case 3: num_words = 0\n        return $max_word\n\
    \    fi\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_f7kbkud.sh: line 33: [[: 1 name: syntax error in expression (error
    token is "name")

    /tmp/tmp_f7kbkud.sh: line 33: [[: 1 of: syntax error in expression (error token
    is "of")

    /tmp/tmp_f7kbkud.sh: line 33: [[: 1 string: syntax error in expression (error
    token is "string")

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -n max=$1 chars counts\n  local -r word=$2\n  max+=(\"\
    ${word:0:12}\")\n  for chars in $(echo \"${word}\" | awk '{for (i=1;i<=NF;i++)\
    \ max[i] += length($i); } END { for (w in max) print max[w] }')\n  do\n    ((counts[$chars]))\n\
    \    ((counts[$chars])+1)\n  done\n  local -n maxlen=${max[@]}\n  local count\n\
    \  for count in ${!counts[@]}\n  do\n    if [ \"$count\" -gt \"$maxlen\" ]\n \
    \   then\n      maxlen=$count\n      max=\"${max[$count]}\"\n    fi\n  done\n\
    \  echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvo2ooq2t.sh: line 21: syntax error near unexpected token `+1''

    /tmp/tmpvo2ooq2t.sh: line 21: `    ((counts[$chars])+1)''

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local sorted_list=$( printf \"%s\\n\" \"$1\" | sort\
    \ -n | uniq -c | sort -n -r | head -1 )\n    local max=0\n    for value in $sorted_list;\
    \ do\n        if [ $max -eq 0 ]; then\n            max=$value\n        elif [\
    \ $max -gt $value ]; then\n            max=$value\n        fi\n    done\n    echo\
    \ \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpav2p6ijs.sh: line 20: [: name: integer expression expected

    /tmp/tmpav2p6ijs.sh: line 20: [: of: integer expression expected

    /tmp/tmpav2p6ijs.sh: line 20: [: string: integer expression expected

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"${1:-}\"\n    local count\n    local max\n\
    \    local string\n    local num\n\n    if [ -z \"$list\" ]\n    then\n      \
    \  return 1\n    fi\n\n    list=$(echo \"$list\" | tr ' ' ',')\n\n    for string\
    \ in $list\n    do\n        count=$(echo \"$string\" | tr ' ' ',' | uniq -c  |\
    \ wc -c)\n        if [ \"$count\" -eq \"$MAX_COUNT\" ]\n        then\n       \
    \     string=\"$string\"\n        else\n            if [ \"$count\" -gt \"$MAX_COUNT\"\
    \ ]\n            then\n                string=\"$string\"\n            fi\n  \
    \      fi\n        num=$(echo \"$string\" | tr ' ' ',' | sort -n | uniq -c  |\
    \ tail -n1 | cut -d ',' -f 1)\n        if [ \"$num\" -gt \"$MAX_CHARS\" ]\n  \
    \      then\n            if [ \"$string\" != \"$num\" ]\n            then\n  \
    \              string=\"$num\"\n            fi\n        fi\n    done\n\n    echo\
    \ \"$string\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpb2e98ijz.sh: line 31: [: : integer expression expected

    /tmp/tmpb2e98ijz.sh: line 35: [: : integer expression expected

    /tmp/tmpb2e98ijz.sh: line 41: [:       1 name: integer expression expected

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # Initialize a variable to store the max number of unique\
    \ characters\n  local max_c=0\n  # Initialize a variable which stores the current\
    \ string that has max\n  # number of unique characters\n  local current_str=\"\
    \"\n  # Loop through each argument passed into the function\n  for (( i = 0; i\
    \ < ${#1}; i++ )); do\n    # Initialize a variable which stores the number of\
    \ unique characters in\n    # the current argument\n    local c=0\n    # Initialize\
    \ a variable which stores the number of times the current argument\n    # occurs\
    \ in the list\n    local j=0\n    # Loop through each character in the current\
    \ argument\n    for (( j=0; j < ${#1}; j++ )); do\n      # Increment the number\
    \ of unique characters in the current argument\n      # by the character in the\
    \ current argument\n      c=$(( ${#1}[j] - ${#1}[j-1] ))\n      # If this is greater\
    \ than the maximum number of unique characters, update the\n      # maximum number\
    \ of unique characters\n      if (( c > max_c )); then\n        max_c=$c\n   \
    \     current_str=\"${1}[${i}]\"\n      fi\n    done\n  done\n  # Return the result\
    \ of the function\n  echo \"${current_str}\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6y8ji_j9.sh: line 32: 14[j] - 14[j-1] : syntax error: invalid arithmetic
    operator (error token is "[j] - 14[j-1] ")

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1 output\n    local max_chars=0\n    local\
    \ max_word=\"\"\n\n    for word in $words\n    do\n        local unique_chars=$(\
    \ echo \"$word\" | tr \" \" \"\\n\" | sort -u | wc -l )\n        if (( $unique_chars\
    \ > $max_chars ))\n        then\n            max_chars=$unique_chars\n       \
    \     max_word=$word\n        fi\n    done\n\n    echo \"$max_word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max_value\n    local max_string\n\
    \    local unique_char_count\n    local current_value\n    local index\n\n   \
    \ unique_char_count=0\n    current_value=\"$1\"\n    max_value=${#current_value}\n\
    \n    for index in \"${!list}\"; do\n        local string=${list[\"$index\"]}\n\
    \        local len=${#string}\n        ((unique_char_count += len))\n        if\
    \ [ \"$unique_char_count\" -gt \"$max_value\" ]; then\n            max_value=$unique_char_count\n\
    \            max_string=\"${string}\"\n        fi\n    done\n\n    echo \"$max_string\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp89_6l537.sh: line 26: name of string: invalid variable name

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local word_array=\"$1\"\n    local max_length=0\n  \
    \  local max_word=\"\"\n    local word_count=0\n\n    for word in $word_array;\
    \ do\n        word_count=$(echo \"$word\" | wc -w)\n        word_length=$((${#word}-1))\n\
    \        word_array=()\n        if [ $word_count -gt $max_length ]; then\n   \
    \         max_word=$word\n            max_length=$word_count\n        elif [ $word_count\
    \ -eq $max_length ]; then\n            max_word=\"$max_word $word\"\n        fi\n\
    \    done\n\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=\"$1\"\n    local maxlen=0\n    local word\n\
    \    local maxword\n    local maxindex=0\n    local count\n\n    while read word;\
    \ do\n        ((count=${#word}))\n        if ((count > maxlen)) {\n          \
    \  maxword=\"${word}\"\n            maxlen=${count}\n        }\n    done <<< \"\
    ${words}\"\n\n    if [[ ${maxlen} -eq 0 ]]; then\n        echo \"$maxword\"\n\
    \    elif [[ ${#maxword} -gt 1 ]]; then\n        echo \"${maxword}\"\n    elif\
    \ [[ ${#maxword} -eq 1 ]]; then\n        echo \"${maxword}\"\n    fi\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqq4g8eyt.sh: line 24: syntax error near unexpected token `{''

    /tmp/tmpqq4g8eyt.sh: line 24: `        if ((count > maxlen)) {''

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -n list=$1\n  local unique_chars=0\n  local longest_string=\"\
    ${list[0]}\"\n\n  for item in ${list[@]} do\n    local unique_chars_temp=$(echo\
    \ \"$item\" | tr \" \" \"\\n\" | sort | uniq -c | wc -l)\n    if [[ \"$unique_chars_temp\"\
    \ -gt \"$unique_chars\" ]]; then\n      unique_chars=$unique_chars_temp\n    \
    \  longest_string=$item\n    fi\n  done\n  echo \"$longest_string\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe9w0yhd2.sh: line 20: syntax error near unexpected token `local''

    /tmp/tmpe9w0yhd2.sh: line 20: `    local unique_chars_temp=$(echo "$item" | tr
    " " "\n" | sort | uniq -c | wc -l)''

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local string=$1\n  local count\n  local temp\n  local\
    \ max\n  local temp_count\n  count=0\n  max=$((0))\n  temp=$((0))\n  temp_count=$((0))\n\
    \  while read -r line; do\n    if [ $temp_count -gt $count ]; then\n      if [\
    \ $temp_count -gt $max ]; then\n        max=temp_count\n        max=$(echo $line\
    \ | tr ' ' '_' | sort | uniq -c)\n      fi\n      temp_count=$((count))\n    fi\n\
    \    count=$((count + 1))\n    temp=$((temp + 1))\n  done <<< \"$string\"\n  echo\
    \ \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -n list=( \"${@}\" )\n  local max=( $(sort <<< \"\
    ${list[@]}\" | uniq -u) )\n  local i=0\n  local -a sorted_list=()\n  while [ ${#max[@]}\
    \ -gt 0 ]; do\n    (( ${i}++ ))\n    local max=${max[0]}\n    local idx=0\n  \
    \  for (( i=0; i<${#list[@]}; i++ )); do\n      if [[ ${list[$i]} != ${max} ]];\
    \ then\n        continue\n      fi\n      (( j++ ))\n      local j=${i}\n    \
    \  if (( j == i )); then\n        sorted_list+=(\"${list[$i]}\")\n      else\n\
    \        sorted_list+=(\"${list[$i]}\" \"${list[$j]}\" \"${list[$j]}\")\n    \
    \  fi\n    done\n  done\n  local -n sorted=( $(sort <<< \"${sorted_list[@]}\"\
    \ | uniq -u) )\n  local max=${sorted[0]}\n  local max_idx=0\n  for (( i=0; $i\
    \ < ${#sorted_list[@]}; i++ )); do\n    local idx=${i}\n    if [[ ${sorted_list[$i]}\
    \ != ${max} ]]; then\n      continue\n    fi\n    (( j++ ))\n    local j=${i}\n\
    \    if [[ ${sorted_list[$i]} != ${sorted[$i]} ]]; then\n      continue\n    fi\n\
    \    local diff=$(echo \"${sorted_list[$i]}\" | \\\n                 awk '{print\
    \ (NR-1)\"-\"$1}' | sed 's/^-//' | sort -nr)\n    if [[ ${diff} -gt ${max} ]];\
    \ then\n      max=${sorted_list[$i]}\n      max_idx=${idx}\n    fi\n  done\n \
    \ printf '%s\\n' \"${sorted_list[$max_idx]}\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=50 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660058493
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=$1\n  local maximum=$(echo $list | awk '{max=0;\
    \ for (i=1; i<=NF; i++) if ($i > max) max = $i; print $1}')\n  local count=0\n\
    \  local word=\"\"\n  for i in $list; do\n    count=$(echo $list | awk '{if ($i\
    \ == max) count++} END{print count}')\n    if [ \"$maximum\" != \"$maximum\" ]\
    \ && [ \"$count\" -eq \"$count\" ]; then word=$i; fi\n  done\n  echo \"$word\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -n max=$1\n    local max=$(echo ${max} | sed -e\
    \ \"s/\\[\\([0-9]\\+\\)-\\([0-9]\\+\\)\\].*/\\1 \\2/\")\n    for i in $(seq 1\
    \ ${#max[@]}); do\n        local maxchar=$(echo \"${max[$i]}\" | tr a-z A-Z)\n\
    \        local maxcharcount=$(cat /dev/null <<< \"$maxchar\" | wc -l)\n      \
    \  local maxcount=0\n        for j in $(seq 1 ${#max[@]}); do\n            local\
    \ maxchar=$(echo \"${max[$j]}\" | tr a-z A-Z)\n            local maxcharcount=$(cat\
    \ /dev/null <<< \"$maxchar\" | wc -l)\n            if [[ ${maxcharcount} -gt ${maxcount}\
    \ ]]; then\n                max=$max\n                maxcount=\"${maxcharcount}\"\
    \n                maxchar=\"${maxchar}\"\n            fi\n        done\n    done\n\
    \    echo ${max[@]}\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpak4776zg.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local MAX_CHARACTERS=$1\n    local WORD\n    local COUNT=0\n\
    \    local MAX_CHARACTERS_STRING\n\n    for WORD in $@; do\n        ((COUNT++))\n\
    \        MAX_CHARACTERS_STRING=\"${MAX_CHARACTERS_STRING} ${#WORD}\"\n    done\n\
    \n    if [[ -z $MAX_CHARACTERS_STRING ]]; then\n        echo \"$1\"\n        return\n\
    \    fi\n\n    local UNIQUE_CHARACTERS=0\n    local UNIQUE_CHARACTERS_STRING=\"\
    \"\n    local i\n    local j\n    for ((i=1; i<${#MAX_CHARACTERS_STRING}; i++));\
    \ do\n        local COUNT=`expr $COUNT \\* ${#MAX_CHARACTERS_STRING}`\n      \
    \  local C=\"${MAX_CHARACTERS_STRING:$i:1}\"\n        if [[ \"$C\" = \"$MAX_CHARACTERS\"\
    \ ]]; then\n            ((UNIQUE_CHARACTERS++))\n            UNIQUE_CHARACTERS_STRING=\"\
    ${UNIQUE_CHARACTERS_STRING} $C\"\n        fi\n    done\n\n    if [[ -z $UNIQUE_CHARACTERS_STRING\
    \ ]]; then\n        echo \"$1\"\n        return\n    fi\n\n    for ((i=0; i<${#UNIQUE_CHARACTERS_STRING};\
    \ i++)); do\n        local C=\"${UNIQUE_CHARACTERS_STRING:$i:1}\"\n        if\
    \ [[ \"$C\" != \"a\" && \"$C\" != \"b\" && \"$C\" != \"c\" && \"$C\" != \"d\"\
    \ ]]; then\n            ((i--))\n            break\n        fi\n    done\n\n \
    \   echo \"$UNIQUE_CHARACTERS_STRING\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    declare -i max_count max_string cur_count cur_string\
    \ c\n    max_count=0\n    cur_string=\n    cur_count=0\n    for c in $1 ; do\n\
    \        if [ $cur_count -eq $max_count ] ; then\n            if [ $cur_count\
    \ -lt $max_count ] ; then\n                cur_count=$max_count\n            \
    \    cur_string=$1\n            else\n                cur_count=$max_count\n \
    \               cur_string=$1\n            fi\n        else\n            cur_count=$[$cur_count+1]\n\
    \        fi\n    done\n    echo \"$cur_string\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp15y1gqb3.sh: line 26: name of string: syntax error in expression
    (error token is "of string")

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local input\n    local count\n    local unique\n   \
    \ local max\n    local count2\n    local max2\n\n    input=\"$1\"\n    count=$(echo\
    \ \"$input\" | tr \" \" \"\\n\" | sort | uniq | wc -l)\n    unique=$(echo \"$input\"\
    \ | tr \" \" \"\\n\" | sort | uniq -u)\n    max=$count\n    max2=$count2\n\n \
    \   while [ \"$max\" -le \"$max2\" ]; do\n        count2=$count\n        echo\
    \ \"$max\"\n        input=\"$input$max\"\n        count=$(echo \"$input\" | tr\
    \ \" \" \"\\n\" | sort | uniq | wc -l)\n        unique=$(echo \"$input\" | tr\
    \ \" \" \"\\n\" | sort | uniq -u)\n        max=$(expr $max + 1)\n        max2=$(expr\
    \ $max2 + 1)\n    done\n\n    echo \"$max\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd7eggxib.sh: line 28: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words count str\n    local maxcount maxstr\n \
    \   IFS=$'\\n' read -r -d '' -a words <<<\"$1\"\n    local count\n    for str\
    \ in \"${words[@]}\"; do\n        if [[ ${#str} -gt 0 ]]; then\n            count=0\n\
    \            for c in $str; do\n                if [[ ${count} -eq 0 ]]; then\n\
    \                    count=1\n                elif [[ ${count} -gt ${maxcount}\
    \ ]]; then\n                    maxcount=\"${count}\"\n                    maxstr=\"\
    ${str}\"\n                fi\n            done\n        fi\n    done\n    echo\
    \ \"$maxstr\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local string=\"$1\"\n  local len=0\n  local max_char=\n\
    \  while [[ $string ]]; do\n    len=\"${#string}\"\n    if [[ ${#max_char} -eq\
    \ 0 && $len ]]; then\n      max_char=${string:0:1}\n    fi\n    string=\"${string#*:}\"\
    \n  done\n  echo $max_char\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=23 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=14 encoding='utf-8'>
  timestamp: 1660058493
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # We want to sort the list first, so we sort the characters\
    \ in each\n  # string and then concatenate them.\n  local sorted=\"$(\n    sort\
    \ -z \\\n      <(printf '%s\\n' \"$1\") \\\n    | tr -d '\\n'\n  )\"\n  echo \"\
    ${sorted::-1}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpulknjlr8.sh: line 21: warning: command substitution: ignored null
    byte in input

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( $@ )\n    local max_unique=0\n    local\
    \ cur_unique=0\n    for word in \"${words[@]}\"; do\n        cur_unique=$(echo\
    \ $word | cut -c1- | uniq -c | wc -c)\n        if [ $cur_unique -gt $max_unique\
    \ ]; then\n            max_unique=$cur_unique\n        fi\n    done\n    echo\
    \ $words[$max_unique]\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=$(echo $1 |sed -r 's/^\\s*//' | sed -r 's/\\\
    s*$//');\n    local chars=$(echo $list | tr ' ' '+');\n    local max=0;\n    local\
    \ max_str=\"\";\n    local count=0;\n    local count_str=\"\";\n    local first_char=\"\
    \";\n    local last_char=\"\";\n    local i='';\n    local max='';\n    for i\
    \ in ${chars}; do\n        ((count++));\n        if [[ ${count} -gt ${max} ]];\
    \ then\n            char=${i};\n            ((count=count-1));\n        fi;\n\
    \    done;\n    for i in ${chars}; do\n        count_str+=${i};\n    done;\n \
    \   for i in ${list}; do\n        char=${i};\n        if [[ ${count_str} =~ $char\
    \ ]]; then\n            first_char=\"${char}\";\n        fi;\n    done;\n    for\
    \ i in ${list}; do\n        last_char=\"${char}\";\n    done;\n    if [[ ${count}\
    \ -gt ${max} ]]; then\n        max=count;\n        max_str=\"${first_char}${last_char}\"\
    ;\n    fi;\n    echo ${max_str};\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=()\n  local counts=()\n\n  local max=0\n \
    \ local max_word=''\n\n  for word in $1; do\n    local count=0\n    for char in\
    \ $word; do\n      ((counts[$char]++))\n      if ((counts[$char] > counts[$count]));\
    \ then\n        ((counts[$char] = counts[$count]))\n        words[$count]=$word\n\
    \      fi\n      ((count++))\n    done\n    ((counts[$word]++))\n    if ((counts[$word]\
    \ > max)); then\n      max=$counts[$word]\n      max_word=$word\n    fi\n  done\n\
    \n  echo ${max_word}\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptkbzj0v0.sh: line 32: ((: 2[name]: syntax error: invalid arithmetic
    operator (error token is "[name]")

    /tmp/tmptkbzj0v0.sh: line 32: ((: 2[name]: syntax error: invalid arithmetic operator
    (error token is "[name]")

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list\n    list=( \"${@}\" )\n    local maxlen=\"\
    ${#list[0]}\"\n    local result\n    for (( i = 1; i < ${#list[@]}; i++ )); do\n\
    \        local nchars=0\n        local maxchars=\"${list[i]}\"\n        for ((\
    \ j = 1; j < ${#maxchars}; j++ )); do\n            [[ \"${maxchars:j:1}\" == \"\
    ${maxchars:j:1}\" ]]\n            nchars=$(( nchars + 1 ))\n            maxchars=$((\
    \ ${maxchars:0:j}${maxchars:j:1} ))\n        done\n        if (( nchars > maxlen\
    \ ));\n        then\n            maxlen=\"${nchars}\"\n            result=\"${maxchars}\"\
    \n        fi\n    done\n    echo \"${result}\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list n\n  local i\n  list=$1\n  n=$(echo ${#list}\
    \ | cut -d' ' -f1)\n  for i in $(seq 0 $((n - 1))); do\n    local j\n    local\
    \ a\n    local k\n    a=$(echo ${list} | cut -d' ' -f$i)\n    for j in $(seq 1\
    \ $((n - i + 1)); do\n      k=$(echo ${list} | cut -d' ' -f$j | cut -d' ' -f1)\n\
    \      if [[ ${a} -eq ${k} ]]; then\n        break\n      fi\n    done\n    if\
    \ [[ ${j} == $((n - i + 1)) ]]; then\n      echo ${list}\n      return\n    fi\n\
    \  done\n  echo ${list}\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3g6egl0n.sh: line 24: unexpected EOF while looking for matching
    `)''

    /tmp/tmp3g6egl0n.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max_count=0\n  local max_string=\"\
    \"\n  while IFS=\" \" read -r word ; do\n    count=${#word}\n    if [ \"$count\"\
    \ -gt \"$max_count\" ]; then\n      max_count=$count\n      max_string=\"$word\"\
    \n    fi\n  done < <(echo \"$words\" | tr \" \" \"\\n\") # split words\n  echo\
    \ \"$max_string\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local arg=( \"${!1}\" )\n    local max_char=0\n    local\
    \ word_with_max_char=\"null\"\n    local curr_word=\"\"\n\n    for word in \"\
    ${arg[@]}\"; do\n        local unique_chars=$(echo \"$word\" | tr \" \" \"\\n\"\
    \ | sort | uniq -c)\n        curr_word=\"${word}\"\n        if [[ \"$unique_chars\"\
    \ -gt \"$max_char\" ]]; then\n            max_char=$unique_chars\n           \
    \ word_with_max_char=\"${curr_word}\"\n        fi\n    done\n\n    echo $word_with_max_char\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmqdmwbr8.sh: line 15: name of string: invalid variable name

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words maxcount\n  words=($1)\n  maxcount=0\n  for\
    \ word in \"${words[@]}\"; do\n    ((maxcount+=(${#word})))\n  done\n  local maxword\n\
    \  maxword=$(sort -nr <<<\"$(printf \"%${maxcount}s\" \"${words[*]}\")\")\n  echo\
    \ \"$maxword\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -n _find_max=$1\n  local max=${#_find_max[@]}\n\
    \  local i\n  local c\n\n  for ((i=1; i<=$max; i++)); do\n    c=0\n    for word\
    \ in ${_find_max[@]}; do\n      [[ \"${word}\" != \"${_find_max[$c]}\" ]] || c=`expr\
    \ ${c} + 1`\n    done\n    [[ \"${_find_max[$c]}\" != \"$1\" ]] && _find_max[$c]=\"\
    $1\"\n  done\n\n  echo \"${_find_max[@]}\"\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpf_b2ii7p.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  declare -i maxlen=0\n  declare -i maxindex=0\n  local\
    \ item\n  while read -r; do\n    # ignore lines which begin with #\n    [[ $REPLY\
    \ =~ ^\\#* ]] || break\n    item=\"${REPLY}\"\n    len=${#item}\n    if [[ $maxlen\
    \ < $len ]]; then\n      maxlen=$len\n      maxindex=$REPLY\n    fi\n  done <\
    \ <(echo \"$1\")\n  echo \"${item}${maxindex}\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmb79z04e.sh: line 25: name of string: syntax error in expression
    (error token is "of string")

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local string=\"$1\"\n  local words=()\n\n  for i in $string;\
    \ do\n    words+=(\"$i\")\n  done\n\n  local max=\"${#words[@]}\"\n  if [[ $max\
    \ -eq 1 ]]; then\n    echo \"${words[0]}\"\n  else\n    local counter=0\n    for\
    \ word in ${words[*]}; do\n      ((counter++))\n      if [[ \"$counter\" -gt \"\
    $max\" ]]; then\n        echo \"$word\"\n        break\n      fi\n    done\n \
    \ fi\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name\
    \ enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=()\n    local max=0\n    local temp\n  \
    \  local length\n    # Loop through all the arguments\n    for arg in \"$@\";\
    \ do\n        # Break up each argument into words\n        IFS=' ' read -a words\
    \ <<< \"$arg\"\n        length=${#words[@]}\n        # Loop through all the words\
    \ of the argument\n        for ((i=1; i<=$length; i++)); do\n            # Keep\
    \ track of the longest word so far\n            if ((length>max)); then\n    \
    \            max=$length\n                temp=${words[i]}\n            fi\n \
    \       done\n        # Store the current word for comparing\n        words+=(\"\
    $temp\")\n    done\n    # Return the word with the maximum number of unique characters\n\
    \    echo \"${words[$max]}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_unique=-1\n    local word\n    local i\n \
    \   local count\n    for (( i=0; i<${#1}; i++ )); do\n        word=\"${1}[$i]\"\
    \n        count=$(echo \"$word\" | tr '[a-z]' '[A-Z]' | tr -cd '[:alnum:]' | wc\
    \ -c)\n        if [ \"$count\" -gt \"$max_unique\" ]; then\n            max_unique=\"\
    $count\"\n        fi\n    done\n    echo $max_unique\n}\n\ncandidate() {\n   \
    \ find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( $1 )\n    local max_count=\n    local\
    \ max_word=\n    for i in \"${!words[@]}\"; do\n        local count=0\n      \
    \  for word in \"${words[@]}\"; do\n            (( count += ${#word} ))\n    \
    \    done\n        if [[ $count -gt $max_count ]]; then\n            max_word=$i\n\
    \        fi\n    done\n    printf \"%s\\n\" \"${words[$max_word]}\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$1\n  local max=0\n  local maxstr\n  local\
    \ count\n\n  for word in ${words[*]}; do\n    count=0\n    maxstr=\"\"\n    for\
    \ char in $word; do\n      if [ $count -gt $max ]; then\n        count=$max\n\
    \        maxstr=$word\n      fi\n      ((count++))\n    done\n    echo \"$maxstr\"\
    \n  done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n local string=\"$1\"\n local max=0\n local count=0\n while\
    \ read word; do\n    if [[ \"$max\" -lt \"$(echo \"$count\" | bc|cut -f1)\" ]];\
    \ then\n       max=\"$(echo \"$count\" | bc|cut -f1)\"\n       count=\"1\"\n \
    \      string=\"$word\"\n    elif [[ $(echo \"$count\" | bc|cut -f1) -lt \"$(echo\
    \ \"$max\" | bc|cut -f1)\" ]]; then\n       max=\"$(echo \"$max\" | bc|cut -f1)\"\
    \n       count=\"1\"\n       string=\"$word\"\n    fi\n done <<< \"$string\"\n\
    \ echo \"$string\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local string=\"$1\"\n    local chars=()\n    local max=0\n\
    \    for word in $string; do\n        local num=0\n        for c in $word; do\n\
    \            ((num++))\n        done\n        if [ $num -gt $max ]; then\n   \
    \         chars=\"$chars $word\"\n            max=num\n        fi\n    done\n\
    \    echo \"$chars\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9un5abvq.sh: line 23: [: num: integer expression expected

    /tmp/tmp9un5abvq.sh: line 23: [: num: integer expression expected

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -n list=${1}\n  local max=0\n  local i\n  for ((\
    \ i=0; i<${#list[@]} ; i++)); do\n    local c=$(echo \"${list[$i]}\" | wc -c)\n\
    \    if [[ $c -gt $max ]]; then\n      max=$c\n    fi\n  done\n  for (( i=0; i<${#list[@]}\
    \ ; i++)); do\n    if [[ ${list[$i]} =~ $max ]]; then\n      echo \"${list[$i]}\"\
    \n      break\n    fi\n  done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvwqm80jd.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list max_count max_value i\n    list=$1\n    set\
    \ -- \"${list[@]}\"\n\n    max_count=0\n    max_value=\"\"\n\n    for i in \"\
    $@\"; do\n        (( ${#list} > 0 )) && break\n        local j\n        for j\
    \ in \"$@\"; do\n            [[ $i == $j ]] || continue\n            (( ${#list}\
    \ > 0 )) && break\n            list=\"$list $j\"\n        done\n\n        # $list\
    \ is non-empty now and $i is not in the list\n        (( ${#list} > 0 )) || continue\n\
    \        (( ${#list} > max_count )) || max_count=${#list}\n        max_value=$i\n\
    \    done\n\n    echo \"$max_value\"\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n\tmapfile -t words < <(printf \"%s\\n\" \"${@// /$1}\")\n\
    \tlocal len\n\tlocal i\n\tlocal len1\n\tlocal len2\n\tlocal max\n\tlen1=${#words[@]}\n\
    \tfor ((i=0; i < ${len1}; i++)); do\n\t\tlen2=${#words[i]}\n\t\tif (( len2 > len\
    \ )); then\n\t\t\tmax=\"${words[i]}\"\n\t\t\tlen=${len2}\n\t\tfi\n\tdone\n\techo\
    \ \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local n=0\n    local max=\"\"\n    local max_count=0\n\
    \    local maxn=$1\n    for word in $1 ; do\n        local count=$( echo \"$word\"\
    \ | sed -n \"s/^\\(${word}\\).*/\\1/p\" | sort | uniq | wc -l )\n        (( max_count++\
    \ ))\n        if [ \"$max_count\" -gt \"$count\" ] ; then\n            max_count=$count\n\
    \            max=$word\n        fi\n        (( n++ ))\n    done\n    echo \"$max\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local maxchars line\n    maxchars=0\n    local count\n\
    \    for line in \"$1\"; do\n        ((count++))\n        if (( count > maxchars\
    \ )) ; then\n            maxchars=count\n        fi\n    done\n    echo \"${line}\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n local words=$1\n local max=0\n local max_word\n local count=0\n\
    \ while read -r word; do\n   [[ $word =~ ^[[:alpha:]]+$ ]] || continue\n   [[\
    \ $max -le $((${#word})) ]] || continue\n   [[ $count -gt 0 ]] || printf \"%s\\\
    n\" \"$word\"\n   let max+=1\n   [[ $max -eq $1 ]] && { max_word=$word; break;\
    \ }\n   let count+=1\n done <<< \"$words\"\n [[ $max_word == \"\" ]] && return\
    \ 0\n printf \"%s\\n\" \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local word=\"${1}\"\n  local count=0\n  local max=\"\"\
    \n  local words=\"\"\n  while [[ \"$word\" != \"\" ]]; do\n    words=$( echo \"\
    $word\" | awk -F' ' '{ print $1 }' )\n    for word in $words; do\n      (( count++\
    \ ))\n      if [[ \"$max\" == \"\" ]]; then\n        max=$word\n      elif [[\
    \ \"$max\" != \"$word\" ]]; then\n        (( count-- ))\n        max=$word\n \
    \     fi\n    done\n    word=${word%?}\n  done\n  echo $max\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=1 first_word\n  local -a wordlist=($1)\n\
    \  for word in \"${wordlist[@]}\"; do\n    [[ \"${#words[@]}\" -ge \"${max_word}\"\
    \ ]] || break\n    if [[ $word != $first_word ]]; then\n      max_word=\"${#words[@]}\"\
    \n      first_word=$word\n    fi\n  done\n  echo ${words[*]}\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # get the number of unique characters\n    local num_unique=$(echo\
    \ \"$1\" | cut -d ' ' -f 1 | sort -n | uniq | wc -c)\n    if [ $num_unique -gt\
    \ 0 ]; then\n        # get the word with the maximum number of unique characters\n\
    \        local max_unique=$(echo \"$1\" | cut -d ' ' -f 1 | sort -n | uniq -c\
    \ | sort -n | tail -n 1)\n        echo \"${1}\" | cut -d ' ' -f 1 | sort -n |\
    \ uniq -c | sort -n | head -n $max_unique\n    else\n        echo \"$1\"\n   \
    \ fi\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name\
    \ enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'head: cannot open ''name'' for reading: No such file or directory

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local IFS=' '\n  local words=( $1 )\n  local word_count\n\
    \  local word_count_max\n  local best_word\n\n  word_count=$(( ${#words[@]} -\
    \ 1 ))\n  word_count_max=$(( ${#words[@]} - 1 ))\n\n  while [[ $word_count -ge\
    \ 1 ]]; do\n    local i=0\n    for word in \"${words[@]}\"; do\n      if (( ${#words[@]}\
    \ - 1 ) = 0 ); then\n        echo \"$word\"\n        return\n      fi\n      local\
    \ count=0\n      for c in \"$word\"; do\n        (( count++ ))\n      done\n \
    \     if [[ $count -gt $word_count_max ]]; then\n        word_count_max=$count\n\
    \        best_word=$word\n      fi\n    done\n    words=( ${words[@]:1:$word_count}\
    \ )\n    word_count=$(( ${#words[@]} - 1 ))\n  done\n\n  echo \"$best_word\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp81n66_e4.sh: line 27: syntax error near unexpected token `=''

    /tmp/tmp81n66_e4.sh: line 27: `      if (( ${#words[@]} - 1 ) = 0 ); then''

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local max_count=-1\n    local\
    \ max_word=\"\"\n    # Split each string into words and find unique characters.\n\
    \    for word in ${list} ; do\n        local count=\"$(echo \"$word\" | sed 's/[^a-z]//g'\
    \ | uniq | wc -c)\"\n        if [ \"$count\" -gt \"$max_count\" ] ; then\n   \
    \         max_count=\"$count\"\n            max_word=\"$word\"\n        fi\n \
    \   done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local LIST=\"$1\"\n  local LENGTH=$(echo \"${LIST}\" |\
    \ wc -w)\n  local LENGTH_MIN=$(echo \"${LIST}\" | wc -l | cut -d \" \" -f1)\n\
    \  local LENGTH_MAX=$(echo \"${LIST}\" | wc -l | cut -d \" \" -f2)\n\n  for LINE\
    \ in \"${LIST}\"; do\n    local LENGTH_LINE=$(echo \"${LINE}\" | wc -w)\n    if\
    \ [[ ${LENGTH_LINE} -eq ${LENGTH_MAX} ]]; then\n      echo \"${LINE}\"\n     \
    \ break\n    elif [[ ${LENGTH_LINE} -eq ${LENGTH_MIN} ]]; then\n      if [[ ${LENGTH_LINE}\
    \ -gt ${LENGTH_MAX} ]]; then\n        echo \"${LINE}\"\n      fi\n      break\n\
    \    elif [[ ${LENGTH_LINE} -lt ${LENGTH_MIN} ]]; then\n      echo \"${LINE}\"\
    \n    fi\n  done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words \n  words=( $(echo ${1} | tr \" \" \"\\n\"\
    \ ) )\n  local max\n  max=0\n  for word in \"${words[@]}\"; do\n    if [ ${#word}\
    \ -gt ${max} ]; then\n      max=${#word}\n    fi\n  done\n  local i\n  for word\
    \ in \"${words[@]}\"; do\n    echo ${word}\n  done\n  if [ ${max} -gt 0 ]; then\n\
    \    echo ${words[${max}]}\n  fi\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local string=\"$1\"\n    local count=0\n    local max=\"\
    -\"\n    local output\n    # Looping through the words contained in $string\n\
    \    while read -r word; do\n        # Increasing the count and checking if the\
    \ number of unique characters\n        # in $word is greater than the previous\
    \ value. If yes, update the max\n        # variable with the current word.\n \
    \       ((count++))\n        if [[ $count -gt $max ]]; then\n            max=$count\n\
    \            output=$word\n        fi\n    done <<< \"$string\"\n\n    echo \"\
    $output\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcivwmnbn.sh: line 25: [[: -: syntax error: operand expected (error
    token is "-")

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=( \"$1\" )\n  local unique_count\n  local\
    \ max_word\n  local max_word_index\n  local i\n  local word\n\n  unique_count=\n\
    \  for word in \"${words[@]}\"; do\n    [[ -z \"$unique_count\" ]] && unique_count=0\n\
    \    ((unique_count+=${#word}))\n  done\n\n  if [[ \"$unique_count\" -gt 0 ]];\
    \ then\n    max_word=\n    max_word_index=\n    for (( i=0; i<${#words[@]} ));\
    \ do\n      if [[ \"$unique_count\" -gt $max_count ]]; then\n        max_word=\"\
    ${words[$i]}\"\n        max_word_index=$i\n      fi\n      ((unique_count-=1))\n\
    \    done\n  fi\n\n  echo \"${words[$max_word_index]}\"\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1rlryg97.sh: line 31: syntax error: arithmetic expression required

    /tmp/tmp1rlryg97.sh: line 31: syntax error: `(( i=0; i<${#words[@]} ))''

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n    local -a output\n    local max\n\
    \    local i\n    local -n maxlen=$maxlen\n    local -a seen\n\n    # Find max\
    \ length of unique chars\n    maxlen=0\n    for i in $list; do\n        local\
    \ len=${#i}\n        if [[ $len > maxlen ]]; then\n            maxlen=$len\n \
    \       fi\n    done\n\n    # Build output array\n    for i in $list; do\n   \
    \     local j=0\n        while (( j++ < maxlen )) && (( ${#seen[$j]} == 0 ));\n\
    \        seen[$j]=$i\n        local out\n        out=$i\n        if (( j == maxlen\
    \ ));\n        then\n            out+='$'\n        else\n            out+=\"${seen[$j]:0:$maxlen}\"\
    \n        fi\n        output+=( $out )\n    done\n\n    # Sort output\n    local\
    \ -n count\n    local count\n    count=0\n    for i in ${output[@]}; do\n    \
    \    if [[ \"$i\" == \"$output[-1]\" ]]; then\n            count=$(( count + 1\
    \ ))\n        fi\n    done\n    for i in ${!output[@]}; do\n        local tmp=${output[$i]}\n\
    \        local tmp2\n        if (( count > 1 ));\n        then\n            tmp2=$(sort\
    \ -n <<< \"$tmp\")\n        else\n            tmp2=${tmp}\n        fi\n      \
    \  output[$i]=${output[$i - 1]}\n        output[$i - 1]=$tmp2\n    done\n\n  \
    \  local ret\n    ret=$(printf '%s\\n' \"${output[@]}\")\n    echo ${ret:-$maxlen}\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpunz7p6i_.sh: line 45: syntax error near unexpected token `done''

    /tmp/tmpunz7p6i_.sh: line 45: `    done''

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local strlist=\"$1\"\n    # Count unique characters\n\
    \    local num_unique=\n    strlist=$(echo \"${strlist}\" | tr \" \" \"\\n\")\n\
    \    strlist=$(echo \"${strlist}\" | sort -u)\n    while read -r line || [[ -n\
    \ \"$line\" ]]; do\n        num_unique=$(echo \"${num_unique}\" | awk '{s+=$1}\
    \ END {print s}')\n    done <<< \"${strlist}\"\n    # Print the string with max\
    \ unique characters\n    local max_unique\n    if [[ -z \"$num_unique\" ]]; then\n\
    \        max_unique=\"${strlist}\"\n    elif [[ \"$num_unique\" -gt \"$max_unique\"\
    \ ]]; then\n        max_unique=\"$num_unique\"\n    else\n        local max_idx=0\n\
    \        local max_word\n        for ((idx=0; idx<${#strlist[*]}; idx++)); do\n\
    \            if [[ \"$num_unique\" -eq \"$max_unique\" ]]; then\n            \
    \    max_idx=$idx\n                break\n            fi\n            if [[ \"\
    $num_unique\" -gt \"$max_unique\" ]]; then\n                local max_word=\"\
    ${strlist[$idx]}\"\n            fi\n        done\n        max_unique=\"${max_word}\"\
    \n    fi\n    echo \"${max_unique}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n\tlocal -n list=\\$1\n\tlocal -A maxes=()\n\tlocal -A firsts=()\n\
    \n\tlocal item\n\tfor item in \"${list[@]}\"; do\n\t\tlocal count=${#item}\n\t\
    \tif [[ ${maxes[$item]} -eq 0 ]]; then\n\t\t\tmaxes[$item]=$count\n\t\t\tfirsts[$item]=$item\n\
    \t\telse\n\t\t\tlocal last=${maxes[$item]}\n\t\t\twhile (( $count > $last ));\
    \ do\n\t\t\t\tlocal last=${maxes[${last}..$item}]\n\t\t\t\t(( last++ ))\n\t\t\t\
    done\n\t\t\tmaxes[$item]=$last\n\t\t\tfirsts[$item]=$firsts[${last}..$item]\n\t\
    \tfi\n\tdone\n\n\tlocal ret=${firsts[$1]}\n\techo ${ret}\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuwy4cdmu.sh: line 15: local: `$1'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # For each string in the list\n  local word\n  for word\
    \ in $1; do\n    # We will keep track of the number of unique characters\n   \
    \ local count\n    # We will store the string with the maximum number of unique\
    \ characters\n    local max\n    # If the current word has a length of more than\
    \ 1 character, then we\n    # will assume it is multi-word and therefore we must\
    \ split it into multiple words\n    # and store each word in the list\n    if\
    \ [[ \"${#word}\" -gt 1 ]]; then\n      local arr=()\n      # Iterate through\
    \ the list of words\n      for word in $word; do\n        # We will count the\
    \ number of unique characters\n        count=$(echo \"${word}\" | tr ' ' '\\n'\
    \ | sort | uniq | wc -c)\n        # If the current count is greater than the current\
    \ maximum, then store the\n        # current maximum and the current word in the\
    \ list\n        if [[ \"${count}\" -gt \"${max}\" ]]; then\n          max=\"${count}\"\
    \n          arr=(\"${arr[@]}\" \"$word\")\n        fi\n      done\n      # If\
    \ the current word is of the same length as the maximum count and\n      # contains\
    \ the maximum number of unique characters, we print it\n      if [[ \"${#arr[@]}\"\
    \ -gt 0 && \"${count}\" == \"${max}\" ]]; then\n        echo ${arr[@]}\n     \
    \ fi\n      # Otherwise, if the current word is of the same length as the maximum\n\
    \      # count, then we assume that it is the maximum count and store the word\n\
    \      # in the list\n      elif [[ \"${#arr[@]}\" -gt 0 && \"${count}\" == \"\
    ${max}\" ]]; then\n        echo \"$word\"\n      fi\n      # Otherwise, we will\
    \ assume that the current word is of the same length\n      # as the maximum count,\
    \ and we store the current word in the list\n      else\n        arr=(\"${arr[@]}\"\
    \ \"$word\")\n      fi\n    # Otherwise, we are dealing with a single word\n \
    \   else\n      count=$(echo \"${word}\" | tr ' ' '\\n' | sort | uniq | wc -c)\n\
    \      max=\"${count}\"\n      arr=(\"${arr[@]}\" \"$word\")\n      if [[ \"${count}\"\
    \ -gt \"${max}\" ]]; then\n        max=\"${count}\"\n        arr=(\"${arr[@]}\"\
    )\n      fi\n    fi\n  done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7fn7gysw.sh: line 51: syntax error near unexpected token `else''

    /tmp/tmp7fn7gysw.sh: line 51: `      else''

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local maxlen=0\n  local maxword=\"\"\n  local maxcount=0\n\
    \  local wordlist=\"$*\"\n  IFS=' ' read -r -a arr <<< \"$wordlist\"\n  for word\
    \ in \"${arr[@]}\"; do\n    count=$(echo \"$word\" | awk '{print length($0)}')\n\
    \    [[ \"$maxcount\" -eq \"$count\" ]] && continue\n    [[ \"$maxcount\" -eq\
    \ 0 ]] && maxcount=$count\n    [[ \"$maxlen\" -eq \"$count\" ]] && maxlen=$count\n\
    \    [[ \"$maxword\" == \"\" ]] && maxword=$word\n  done\n  echo \"$maxword\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=\"${1}\"\n  local max\n  local count\n  max=$(sort\
    \ -u <<< \"${words}\")\n  count=$(echo \"${words}\" | grep -o \"${max}\" | wc\
    \ -c)\n  echo \"${max}\" if [ \"${count}\" -gt 1 ];\n  echo \"${words}\" if [\
    \ \"${count}\" -eq 1 ];\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    echo \"$1\"\n    local max num_chars\n    read -a words\
    \ <<< \"$1\"\n    for word in \"${words[@]}\"; do\n        word_array=($word)\n\
    \        ((num_chars=${#word_array[@]}))\n        if ((num_chars > max)) {\n \
    \           max=num_chars\n            final_word=\"$word\"\n        fi\n    done\n\
    \    echo \"$final_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp14b1undf.sh: line 21: syntax error near unexpected token `{''

    /tmp/tmp14b1undf.sh: line 21: `        if ((num_chars > max)) {''

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n   local chars=$1;\n   local maxcount=1;\n   local maxchars=${chars:0:12}\n\
    \   for word in ${chars:12}; do\n      local count=$(printf '%s\\n' \"${word}\"\
    \ | tr \" \" \"\\n\" | sort | uniq -c | wc -l | \\\n           sort -rn | head\
    \ -n 1)\n      (( maxcount<count )) || {\n         maxcount=count;\n         maxchars=${word:0:12}\n\
    \      }\n   done\n   echo \"$maxchars\"\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local result\n    local\
    \ chars=\" $(printf '[%s%s]\\0' \"$@\" ; printf '\\0' \"$@\")\"\n    local -a\
    \ count\n    count=($(\n         local -a count\n         sort -gru | uniq -c\
    \ | sort -nr | sed 's/^[ ]*//;s/^ *//;s/ *$//'\n    ))\n    for word in \"${words[@]}\"\
    ; do\n        result=\"$word\"\n        for c in $chars; do\n            (( \"\
    ${count[$c]}\" > ${#result} )) && result=$c\n        done\n    done\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=29 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660058493
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -a words=(\"${1}\" \"$@\")\n  local max=0\n  local\
    \ word\n  for i in \"${words[@]}\"; do\n    word=\"$(echo \"${i}\" | tr ' ' '\\\
    n' | sort | uniq -c | sort -n | tail -n 1)\"\n    if [[ ${#word} == ${max} ]];\
    \ then\n      max=${#word}\n      word=${i}\n    else\n      break\n    fi\n \
    \ done\n  echo \"${word}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local n=0\n    local max=0\n    local arg\n    local\
    \ i maxlen str\n    local c\n\n    for arg in \"$@\"; do\n        local len=${#arg}\n\
    \        if [ $len -gt $n ]; then\n            ((max=$len))\n            ((n=max))\n\
    \        elif [ $len -eq $n ]; then\n            if [[ $arg =~ (^.^$)$ ]]; then\n\
    \                if [ $((n+1)) -eq $n ]; then\n                    max=$n\n  \
    \                  str=$arg\n                fi\n            else\n          \
    \      ((n+=1))\n            fi\n        fi\n    done\n\n    echo \"$str\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list_a=$1\n    local max=0\n    local word=${list_a:0:1}\n\
    \    for i in $list_a; do\n        # count characters in each string\n       \
    \ len=${#i}\n        if [ $len -gt $max ]; then\n            max=$len\n      \
    \      word=$i\n        fi\n    done\n    echo \"$word\"\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=($@)\n    local max=\"\"\n    local maxcount=0\n\
    \    local wordcount=0\n    for word in ${words[@]}; do\n        wordcount=$((${#max}+${#word}))\n\
    \        if (( wordcount > maxcount )); then\n            wordcount=$((${#max}+1))\n\
    \            max=$word\n            maxcount=$wordcount\n        elif (( wordcount\
    \ == maxcount )); then\n            max+=\" ${word}\"\n        fi\n    done\n\
    \    echo ${max}\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n\tlocal arg_list=$1\n\n\tlocal max_count=0\n\tlocal word_with_max_count\n\
    \tlocal i\n\tfor i in $(echo $arg_list | tr \" \" \"\\n\"); do\n\t\tword_with_max_count=$(echo\
    \ $i | sort -u | wc -l | xargs)\n\t\t[ ${#word_with_max_count} -gt ${max_count}\
    \ ] && max_count=${#word_with_max_count}\n\tdone\n\n\techo \"${word_with_max_count}\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local var=\"$1\"\n    local max=1\n    local i=2\n \
    \   while [ \"$var\" != \"\" ]; do\n        local count=\"${#var}\"\n        local\
    \ maxcount=\"${#max}\"\n        (( (max<maxcount) || (maxcount==max) )) && max=\"\
    $var\"\n        var=\"${var:$i:1}\"\n        (( (i==count) || (count==i)) )) &&\
    \ break\n        i=$((i+1))\n    done\n    echo \"$max\"\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3d8t__fn.sh: line 23: syntax error near unexpected token `)''

    /tmp/tmp3d8t__fn.sh: line 23: `        (( (i==count) || (count==i)) )) && break''

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=( $1 )\n  local max=0\n  local maxword\n \
    \ local maxwordnum\n\n  echo \"$words\"\n  for word in \"${words[@]}\"\n  do\n\
    \    wordnum=$(echo \"${word}\" | uniq | wc -c)\n    if [ \"$maxwordnum\" -lt\
    \ \"$wordnum\" ]\n    then\n      maxwordnum=\"$wordnum\"\n      maxword=\"$word\"\
    \n    fi\n  done\n  echo \"$maxword\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcagfttdq.sh: line 24: [: : integer expression expected

    /tmp/tmpcagfttdq.sh: line 24: [: : integer expression expected

    /tmp/tmpcagfttdq.sh: line 24: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local string=$1\n  local unique=''\n  local count=0\n\
    \  while read string; do\n    local count=0\n    local letters=$string\n    while\
    \ [ \"${#letters}\" -gt 0 ]; do\n      local letter=$(echo ${letters} | cut -d\"\
    \ \" -f1)\n      local length=${#letter}\n      if [ ${count} -gt 0 ]; then\n\
    \        unique+=$letter\n        count=$((count+length))\n      else\n      \
    \  unique+=$letter\n      fi\n      letters=${letters:$length:1}\n    done\n \
    \   unique+=\"${string:$count}\"\n  done < <(printf \"%s\" \"$string\" | sort\
    \ -u)\n  echo $unique\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=55 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=49 encoding='utf-8'>
  timestamp: 1660058493
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # Count number of unique characters in each string\n \
    \ declare -A map\n  map=()\n  for word in $1; do\n    map[\"${word,,}\"]=${map[${word,,}]+1}\n\
    \  done\n  # Sort by key, then reverse alphabetically\n  local -n list=map\n \
    \ IFS=$'\\n'; list=( ${list[*]} ); unset IFS\n  local max=\"${list[0]}\"\n  local\
    \ key\n  for key in ${!list[@]}; do\n    [[ ${list[$key]} -gt $max ]] && max=\"\
    ${list[$key]}\"\n  done\n  echo \"$max\"\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplmmrtaec.sh: line 23: map: ${list[*]}: must use subscript when
    assigning associative array

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words\n  local max=0\n  local word\n  words=( $1\
    \ )\n  for word in ${words[@]}; do\n    ((max+=(${#words[@]}))) || continue\n\
    \    [[ ${#words[*]} -gt $max ]] && max=${#words[@]}\n  done\n  echo \"$words[$max]\"\
    \ # return the word with maximum count\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n   max=$(($#))\n   for word in \"$@\"; do\n      echo $word\
    \ | cut -s -d \" \" | sort | uniq -c | sort -n | tail -n 1 | awk '{print $1}'\n\
    \   done\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'cut: you must specify a list of bytes, characters, or fields

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # sort -k 3 -nr\n  # sort -k3 -n\n  # sort -nr\n  # sort\
    \ -n \n  # sort -r\n  # sort -nr\n  # sort -rn\n  # sort -rn \n  echo \"$1\" |\
    \ sort -k 3 -nr | head -1 | tr \" \" \"\\n\" | grep -v \"^$\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local IFS=' '\n  local max_count max_str strs=(\"${@}\"\
    )\n  local unique_count\n  max_count=0\n  while read -ra str; do\n    unique_count=0\n\
    \    for str in \"${strs[@]}\"; do\n      if [ \"$unique_count\" -gt \"$max_count\"\
    \ ]; then\n        max_count=\"$unique_count\"\n        max_str=\"$str\"\n   \
    \   fi\n      unique_count=$(( unique_count + ${#str} ))\n    done\n  done < <(echo\
    \ \"${strs[@]}\" | sort -u)\n  echo \"$max_str\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local lines=($(echo \"${1}\" | tr \" \" \"\\n\"))\n\
    \    local lengths=($(echo \"${#lines[@]}\" | tr \" \" \"\\n\"))\n    local max_value=0\n\
    \    local max_idx=0\n    for idx in \"${!lengths[@]}\"; do\n        if [[ ${lengths[$idx]}\
    \ -gt $max_value ]]; then\n            max_value=${lengths[$idx]}\n          \
    \  max_idx=$idx\n        fi\n    done\n    echo \"${lines[$max_idx]}\"\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local IFS=' '\n  local max_unique\n  local str\n  local\
    \ i\n\n  max_unique=0\n  str=\"\"\n  for (( i = 0; i < $#; i++ )); do\n    str=\"\
    $str $1\"\n  done\n  echo \"$str\" | sort | uniq -c | sort -nr | head -1 | awk\
    \ '{print $1}'\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_string=\"\"\n    local\
    \ count=0\n\n    echo ${1} | tr ' ' '\\n'\n    echo ${1} | awk '{\n        if\
    \ (length($0)>count)\n        {\n            max_string=$0;\n            max_count=length;\n\
    \        }\n        count++\n    }'\n\n    echo \"${max_string}\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here.\n    local count=0\n    local\
    \ max=0\n    local maxstr=\"\"\n    for i in $*; do\n        let count=$count+1\n\
    \        if [ $count -gt $max ]; then\n            count=0\n            max=$count\n\
    \            maxstr=$i\n        fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -n list=$(shift \"$@\")\n    local word\n    local\
    \ cnt\n    local len\n    local max\n\n    len=0\n    max=\"-\"\n    cnt=0\n \
    \   word=${list[0]}\n\n    for i in \"${list[@]}\"; do\n        ((cnt++))\n  \
    \      len=$((${#word} + ${#i}))\n        word=\"${word} ${i}\"\n    done\n\n\
    \    if [[ ${cnt} -gt 0 ]]; then\n        max=${word}\n    fi\n\n    echo ${max}\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8swr5r_a.sh: line 15: shift: name of string: numeric argument required

    /tmp/tmp8swr5r_a.sh: line 15: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local word_list=\"$1\"\n    local num_unique_chars=0\n\
    \    local max_word=\"\"\n    local cur_word=\"\"\n    local cur_length=0\n  \
    \  local cur_word_length=0\n    local cur_max_char_length=0\n    local cur_max_char_length_index=0\n\
    \n    while read -r word; do\n        cur_word=$word\n        cur_length=${#cur_word}\n\
    \        cur_word_length=${#cur_word}\n        cur_max_char_length=${#cur_word}\n\
    \        cur_max_char_length_index=${#cur_max_char_length}\n        # Loop through\
    \ the whole list to get the max word length and\n        # character length.\n\
    \        for index in $(seq 0 $((${#word_list}-1))); do\n            word=${word_list[index]}\n\
    \            word_length=${#word}\n            char_length=${#cur_max_char_length}\n\
    \            char_length_index=${#char_length}\n            diff=$(expr $word_length\
    \ - $char_length)\n            if [ $diff -eq 0 ]; then\n                diff=$((char_length_index-1))\n\
    \            fi\n            char_length=$((char_length+diff))\n            word_length=${#word}\n\
    \            if [ $word_length -ne $cur_length ]; then\n                cur_length=$word_length\n\
    \            fi\n            if [ $char_length -ne $cur_max_char_length ]; then\n\
    \                cur_max_char_length=$char_length\n                cur_max_char_length_index=$index\n\
    \            fi\n        done\n        if [ $cur_max_char_length -eq $cur_length\
    \ ]; then\n            cur_length=$cur_word_length\n            cur_max_char_length=$cur_max_char_length_index\n\
    \        fi\n        if [ $cur_max_char_length -gt $num_unique_chars ]; then\n\
    \            num_unique_chars=$cur_max_char_length\n            max_word=$cur_word\n\
    \        fi\n    done <<< \"$word_list\"\n    echo \"$max_word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=$( echo \"$1\" | sed -e 's/ /\\n/g' -e 's/^/#/g'\
    \ -e 's/$/\\n/g' ); \n  local unique_chars=$(\n  sort -u <<<\"$words\" | \n  tr\
    \ '\\n' '|' \n  cut -d '|' -f 1 | \n  paste -s -d '|'\n  ); \n  local most_common=\"\
    $(echo \"$unique_chars\" | sort -n | tail -n 1)\"; \n  local most_common_count=$(echo\
    \ \"$unique_chars\" | sort -n | wc -l); \n  echo \"$most_common\"\n  if [ \"$most_common_count\"\
    \ -gt 1 ]; then\n    echo \"$most_common\"\n  fi\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=41 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=34 encoding='utf-8'>
  timestamp: 1660058493
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -n list=$1\n  local max=0\n  local -a words=()\n\
    \  while (( $# )); do\n    local word=$1\n    shift\n    words[${#words[*]}]=${word}\n\
    \    (( ${#words[*]} > max )) && max=${#words[*]}\n  done\n\n  (( ${#words[*]}\
    \ <= max )) && return 1\n  (( ${#words[*]} > max )) && return 2\n  local -n i=0\n\
    \  local max=\"\"\n  for i in \"${!words[@]}\"; do\n    (( ${#words[i]} <= max\
    \ )) && max=${words[i]}\n  done\n  [[ ${#max} -gt 0 ]] || return 3\n\n  local\
    \ first\n  first=${words[$(( ${#words[*]} - 1))]}\n  shift\n  [[ $1 =~ ${words[$((\
    \ ${#words[*]} - 1))]} ]] && first=\"$1\"\n  shift\n  [[ $1 =~ ${words[$(( ${#words[*]}\
    \ - 1))]} ]] && first=\"$1\"\n  shift\n  [[ $1 =~ ${words[$(( ${#words[*]} - 1))]}\
    \ ]] && first=\"$1\"\n  shift\n  [[ $1 =~ ${words[$(( ${#words[*]} - 1))]} ]]\
    \ && first=\"$1\"\n  shift\n  [[ $1 =~ ${words[$(( ${#words[*]} - 1))]} ]] &&\
    \ first=\"$1\"\n  shift\n  [[ $1 =~ ${words[$(( ${#words[*]} - 1))]} ]] && first=\"\
    $1\"\n  shift\n  [[ $1 =~ ${words[$(( ${#words[*]} - 1))]} ]] && first=\"$1\"\n\
    \  shift\n  [[ $1 =~ ${words[$(( ${#words[*]} - 1))]} ]] && first=\"$1\"\n  shift\n\
    \  [[ $1 =~ ${words[$(( ${#words[*]} - 1))]} ]] && first=\"$1\"\n  shift\n  [[\
    \ $1 =~ ${words[$(( ${#words[*]} - 1))]} ]] && first=\"$1\"\n  shift\n  [[ $1\
    \ =~ ${words[$(( ${#words[*]} - 1))\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdp28aau_.sh: line 57: syntax error in conditional expression

    /tmp/tmpdp28aau_.sh: line 60: syntax error near `candidate(''

    /tmp/tmpdp28aau_.sh: line 60: `candidate() {''

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n        sort -u | uniq -c | sort -nr | head -1\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=58 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=30 encoding='utf-8'>
  timestamp: 1660058493
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -n arr=$1\n    local max=\"${arr[-1]}\"\n    local\
    \ len=\"${#arr[@]}\"\n\n    for ((i = 0; i < len; ++i)); do\n        local c=\"\
    ${arr[i]}\"\n        [[ \"${max}\" == \"$c\" ]] && continue\n        [[ \"${#c}\"\
    \ -gt \"$max\" ]] \\\n            && continue\n        max=\"${c}\"\n    done\n\
    \n    echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp695nph9b.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    /tmp/tmp695nph9b.sh: line 16: arr: bad array subscript

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    declare -i max=0\n    declare -i count=-1\n\n    local\
    \ input=\"$1\"\n    local word\n\n    while [[ $input ]]; do\n        (( count++\
    \ ))\n        word=\"${input// / }\"\n        if [[ -z \"$word\" ]]; then\n  \
    \          word=\"<blank>\"\n        fi\n        if [[ ${#word} -gt $max ]]; then\n\
    \            max=${#word}\n        fi\n        input=\"${input#$word}\"\n    done\n\
    \    echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n   local words max count\n   IFS=' ' read -a words <<<\"\
    $1\"\n   max=${words[0]}\n   count=0\n   for word in \"${words[@]:1}\"\n   do\n\
    \      if [[ ${word} =~ (.)\\1+$ ]]; then\n         count=$((count+1))\n     \
    \    max=${word}\n      else\n         if [[ ${word} =~ (.*)\\1$ ]]; then\n  \
    \          if ((count > 0)); then\n               count=$((count-1))\n       \
    \        max=${word}\n            else\n               max=${word}\n         \
    \   fi\n         else\n            if ((count > 0)); then\n               count=$((count-1))\n\
    \            else\n               max=${word}\n            fi\n         fi\n \
    \     fi\n   done\n   echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local x\n    local maxlen=0\n    for x in \"${@}\";\
    \ do\n        # Count how many times the longest prefix matches\n        local\
    \ count=0\n        for y in \"${!x}\"; do\n            local len=\"${#x}\"\n \
    \           len=$((len-${#y}))\n            if (( len > maxlen )) ; then\n   \
    \             maxlen=$len\n                x=${y}\n            fi\n        done\n\
    \    done\n    echo \"$x\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp07k5hdo7.sh: line 20: name of string: invalid variable name

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local wordList=\"$1\"\n    local maxCount=0\n    local\
    \ maxWord=\"-1\"\n    local wordListLength=$(wc -l <<< \"$wordList\")\n    local\
    \ count=0\n    local index=0\n    while [ $index -lt $wordListLength ]; do\n \
    \       local word=$(echo $wordList | cut -d \" \" -f $index)\n        count=$((\
    \ $(echo $word | tr '[:upper:]' '[:lower:]' | \\\n                sed -e 's/[^a-z]//g'\
    \ | tr '[:upper:]' '[:lower:]' | \\\n                sort | uniq -c | sort -n\
    \ | head -1 | wc -l ) + count ))\n        (( count==maxCount )) && break\n   \
    \     (( count<maxCount )) && maxCount=$count\n        if [ $count -gt $maxCount\
    \ ]; then\n            maxWord=$word\n            maxCount=$count\n        fi\n\
    \        (( index++ ))\n    done\n    echo $maxWord\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local unique_counts=\n  local max_count=0\n  local word=\"\
    ${1}\"\n  # Remove spaces and leading zeros. If there is a leading zero, ignore\
    \ it.\n  word=\"${word// }\"\n  word=\"${word//0}\"\n  while read -r word; do\n\
    \    ((unique_counts+=${#word}))\n    ((unique_counts--))\n    ((max_count++))\n\
    \  done < <(echo \"$word\" | sort -k 1 -t)\n  if ((unique_counts > max_count));\n\
    \  then\n    echo \"$word\"\n  else\n    find_max \"${word// }\"\n  fi\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=27 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=16 encoding='utf-8'>
  timestamp: 1660058493
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local -n arr=$1\n    local max=$2\n    local tmp\n \
    \   local count\n    local idx\n    local ret\n\n    for idx in \"${!arr[@]}\"\
    ; do\n        arr+=($idx)\n        count=$[${#arr[@]} - 1]\n        if [[ ${count}\
    \ -eq 0 ]]; then\n            break\n        fi\n        local tmp=$idx\n    \
    \    for (( idx = idx + 1; idx < ${#arr[@]} && idx <= $count; idx++ )); do\n \
    \           if [[ ${arr[idx]} > ${arr[idx]} ]]; then\n                tmp=${arr[idx]}\
    \ \n            fi\n        done\n        if [[ ${arr[$idx]} > ${arr[$idx]} ]];\
    \ then\n            ret=${arr[$idx]} \n        fi\n    done\n    printf \"%s\\\
    n\" $ret\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpnm4d7lhr.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local MAX_LENGTH=100\n  local WORD=()\n  local WORDS=()\n\
    \  local COUNT=0\n  local MAX=$(sort | uniq -c | sort -nr | head -1 | cut -d\"\
    \ \" -f2-)\n  local OPT=$1\n  local OPT_SEP=\" \"\n  if [[ \"$OPT\" == *\"-\"\
    * ]]; then\n    OPT=\"${OPT%-*}\"\n    OPT_SEP=\"-\"\n  fi\n\n  if [[ -z \"$MAX\"\
    \ ]]; then\n    echo \"Error: maximum word length is undefined\" >&2\n    return\
    \ 1\n  fi\n\n  while read -r WORD; do\n    WORD+=(\"$WORD\")\n    if [[ ${#WORD[@]}\
    \ -gt $MAX_LENGTH ]]; then\n      WORDS+=(\"${WORD[@]}\")\n      COUNT+=1\n  \
    \  fi\n  done < <(tr -cd \"$OPT_SEP\" \"$OPT\")\n\n  if [[ ${COUNT} -gt 1 ]];\
    \ then\n    echo \"${WORDS[@]}\"\n  else\n    echo \"$MAX\"\n  fi\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=51 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=44 encoding='utf-8'>
  timestamp: 1660058493
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local array=\"$1\"\n    local max_unique=0\n    local\
    \ max_element=\"\"\n\n    for element in $array; do\n        local unique_count=$(echo\
    \ \"$element\" | awk '{ print length($0) }')\n        if (( unique_count > max_unique\
    \ )); then\n            max_unique=$unique_count\n            max_element=$element\n\
    \        fi\n    done\n    echo \"$max_element\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local sorted_words=( $( sort -u $1 ) )\n  local max_count=(\
    \ $(\n    LANG=C tr -cd '[:alnum:]' <<<\"$sorted_words\" | sort -r -n | tail -n\
    \ 1 \\\n  ) )\n  local max_word=${sorted_words[$max_count]}\n  local max_index=${#sorted_words[@]}\n\
    \  for (( index=0; index<${max_index}; index++ )); do\n    if [[ ${sorted_words[$index]}\
    \ != $max_word ]]; then\n      max_count=$(( max_count - 1 ))\n      max_word=${sorted_words[$max_count]}\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: name: No such file or directory

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list count\n    local max_count max_string\n \
    \   list=( $1 )\n    count=$( (IFS=, re; echo ${#list[@]} | sort -u | tr -d '\\\
    n') )\n    if [ $count -gt $max_count ]; then\n        max_count=$count\n    \
    \    max_string=${list[0]}\n    fi\n    shift\n    find_max \"$@\"\n    echo \"\
    $max_string\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=67 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=65 encoding='utf-8'>
  timestamp: 1660058493
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=( \"$@\" )\n  local maxlen=0\n  local maxword\n\
    \  local count\n  local i\n  for i in \"${!list[@]}\"; do\n    count=$(echo \"\
    ${list[$i]}\" | tr \" \" \"\\n\" | sort | uniq -c | tail -1)\n    if [[ ${count}\
    \ -gt $maxlen ]]; then\n      maxlen=${count}\n      maxword=${list[$i]}\n   \
    \ fi\n  done\n  echo $maxword\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph7cncfje.sh: line 22: [[: 1 string: syntax error in expression
    (error token is "string")

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"${1}\"\n\n  local max_count=0\n  local max_word=\"\
    \"\n  local max_word_len=0\n\n  for word in ${list}; do\n    local count=0\n \
    \   for c in ${word}; do\n      ((count++))\n    done\n    if (( ${count} > max_count\
    \ )); then\n      max_count=\"${count}\"\n      max_word=\"${word}\"\n      max_word_len=\"\
    ${#word}\"\n    fi\n  done\n\n  echo \"${max_word}\"\n}\n\ncandidate() {\n   \
    \ find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local line\n    local max\n    max=0\n    for line;\
    \ do\n        len=$((${#line} + 1))\n        if [[ ${#line} == 0 || $len -gt $max\
    \ ]]; then\n            max=$len\n        fi\n    done\n    echo \"${line}\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -n array=$1\n  local -n output\n  local -n max\n\
    \n  max=0\n  output=\"\"\n  for word in ${array[@]}; do\n    (( ${#word} > max\
    \ )) && max=${#word}\n  done\n  unset word max\n\n  for word in ${array[@]}; do\n\
    \    (( ${#word} <= max )) && output+=\" $word\"\n  done\n  echo \"$output\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6q2jvyvv.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    /tmp/tmp6q2jvyvv.sh: line 19: `0'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local string=$1\n  string=${string//[^a-zA-Z0-9 ]} # remove\
    \ non-word characters\n  string=${string// }              # remove consecutive\
    \ spaces\n  string=${string//-}               # remove hyphens\n  string=${string//\
    \ /-}               # replace spaces with hyphens\n  string=${string//--}    \
    \           # replace double hyphens with single\n  string=${string// --}    \
    \           # replace single hyphens with double\n  string=${string/--/-}    \
    \           # replace double hyphens with single\n  string=${string/-/ }     \
    \          # replace hyphens with spaces\n  string=${string//}               \
    \  # remove extra spaces\n  string=${string//}                 # remove extra\
    \ spaces\n  string=${string// /}               # replace consecutive spaces with\
    \ space\n  string=${string/ /-}               # replace consecutive spaces with\
    \ space\n  string=${string//\\\\}               # remove backslashes\n  string=${string//}\
    \                 # remove backslashes\n  string=${string//\\}               \
    \ # remove backslashes\n  string=${string//\\\\}               # remove backslashes\n\
    \  string=${string//\\\\}               # remove backslashes\n  string=${string//}\
    \                 # remove backslashes\n  string=${string//\\\\}             \
    \  # remove backslashes\n  string=${string//\\\\}               # remove backslashes\n\
    \  string=${string//\\\\}               # remove backslashes\n  string=${string//\\\
    \\}               # remove backslashes\n  string=${string//\\\\}             \
    \  # remove backslashes\n  string=${string//\\\\}               # remove backslashes\n\
    \  string=${string//\\\\}               # remove backslashes\n  string=${string//\\\
    \\}               # remove backslashes\n  string=${string//\\\\}             \
    \  # remove backslashes\n  string=${string//\\\\}               # remove backslashes\n\
    \  string=${string//\\\\}               # remove backslashes\n  string=${string//\\\
    \\}               # remove backslashes\n  string=${string//\\\\}             \
    \  # remove backslashes\n  string=${string//\\\\}               # remove backslashes\n\
    \  string=${string//\\\\}               # remove backslashes\n  string=${string//\\\
    \\}               # remove backslashes\n  string=${string//\\\\}             \
    \  # remove backslashes\n  string=${string//\\\\}               # remove \n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpndj2jy62.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=\"${1}\"\n  local max_chars=\"${2:-1}\"\n\
    \  local max_char_count=0\n  local max_word\n\n  for word in ${words}; do\n  \
    \  char_count=$((${#word} + 1))\n    word_count=$((${#word} + 1))\n    if [ ${word_count}\
    \ -gt ${max_chars} ]; then\n      max_chars=\"${word_count}\"\n      max_char_count=\"\
    ${char_count}\"\n      max_word=\"${word}\"\n    fi\n  done\n  if [ ${max_chars}\
    \ -gt ${max_char_count} ]; then\n    return 0\n  else\n    return ${max_word}\n\
    \  fi\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name\
    \ enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp87zvsnes.sh: line 32: return: string: numeric argument required

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local word_count\n    local word_list\n    word_count=$(\
    \ sort -u $1 )\n    for word in $word_count; do\n        local count\n       \
    \ count=$( echo \"$word_count\" | grep $word | wc -l )\n        if [ \"$count\"\
    \ -gt \"1\" ]; then\n            word_list=\"$word_list $word\"\n        fi\n\
    \    done\n    echo \"$word_list\"\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: name: No such file or directory

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=$1\n    local max_len=0\n    local max_word=\"\
    \"\n    local count=0\n    for word in $words\n    do\n        word=${word#*}\n\
    \        word=${word%:}\n        word=${word%,}\n        word=${word%'}'}\n  \
    \      word=${word%''}\n        word=${word%$'\\n'}\n        word=${word//,/}\n\
    \        count=`echo $word | wc -w`\n        len=`echo $word | wc -c`\n      \
    \  if (( (count > max_len) )); then\n            max_word=$word\n            max_len=$len\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_number=0\n  local max_word=\"\"\n  local i=$((${#1}-1))\n\
    \  while [ \"$i\" -gt 0 ]; do\n    local word=${1:$i}\n    local count=$(echo\
    \ $word | tr ' ' '\\n' | sort | uniq | wc -l | tr -d ' ')\n    if [ \"$count\"\
    \ -gt \"$max_number\" ]\n    then\n      max_number=$count\n      max_word=$word\n\
    \    fi\n    ((i--))\n  done\n  echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_len=$1\n    local word\n    local count\n\
    \    local count1\n    local max_word\n    local max_count\n    local max_count1\n\
    \n    max_len=${#max_len}\n    max_word=\"*\"\n    max_count=0\n    max_count1=-1\n\
    \n    echo $max_len >&2\n\n    for word in ${*}; do\n        count=$(echo $word\
    \ | wc -w)\n        count1=$(echo $word | wc -c | awk '{print $1}')\n        if\
    \ ((count1 > max_count1)); then\n            max_count1=count1\n            max_word=${word}\n\
    \        elif ((count > max_count)); then\n            max_count=count\n     \
    \       max_word=${word}\n        fi\n    done\n\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '14

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list_=$1\n  local max=$(sort -k 1 <<< $list_ | uniq\
    \ -c | sort -k 2 | tail -n 1)\n  echo $max\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=( \"$1\" )\n  # Split words at spaces and\
    \ get array length\n  local word_count=$(wc -w <<< \"${words[*]}\")\n  # Store\
    \ unique characters in an array\n  local unique_chars=( $(uniq -c <<< \"${words[*]}\"\
    ) )\n  # Remove repeated elements\n  local unique_chars_unique=()\n  for i in\
    \ \"${unique_chars[@]}\"; do\n    [[ -n ${unique_chars_unique[${#unique_chars_unique[*]}\
    \ + 1]} ]] || unique_chars_unique+=( \"$i\" )\n  done\n  # Sort in lexicographical\
    \ order\n  echo \"${unique_chars_unique[@]}\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058488
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list maxlen=0\n  for word in $1; do\n    local numuniq=0\n\
    \    for char in $word; do\n      [[ -n ${list[$numuniq]} ]] || { numuniq=$((numuniq+1))\
    \ ; list[$numuniq]=$word }\n    done\n    [[ -n ${list[$numuniq]} ]] || { echo\
    \ \"$word: no unique characters\" ; break }\n    (( ${#list[$numuniq]} > maxlen\
    \ )) || maxlen=${#list[$numuniq]}\n  done\n  echo \"${list[$maxlen]}\"\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqyshavd4.sh: line 20: syntax error near unexpected token `done''

    /tmp/tmpqyshavd4.sh: line 20: `    done''

    '
  stdout: ''
  timestamp: 1660058488
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list_name=$1\n    local list_arr=($(echo $list_name\
    \ | tr ' ' '\\n'))\n    local max_size=-1\n    local max_len\n\n    local max_word\n\
    \    local max_word_len\n    local max_word_num\n\n    for elem in ${list_arr[@]};\
    \ do\n        word_len=$(echo \"$elem\" | wc -c)\n        if [ \"$word_len\" -gt\
    \ \"$max_size\" ]; then\n            max_size=$word_len\n            max_len=$elem\n\
    \        fi\n\n        word_num=0\n        word_arr=($(echo \"$elem\" | tr ' '\
    \ '\\n'))\n        for((i=0;i<${#elem[@]};i++));do\n            if  [[ ${word_arr[i]}\
    \ == *\"-\"* ]]; then\n                word_arr[i]=${word_arr[i]#-*}\n       \
    \         word_num=$((word_num+1))\n            fi\n\n            word_num=$((word_num+1))\n\
    \        done\n\n        if [ \"$word_num\" -gt \"$max_word_num\" ]; then\n  \
    \          max_word_num=$word_num\n            max_word_len=$elem\n        fi\n\
    \    done\n\n    echo \"$max_len\"\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmchqm92w.sh: line 42: [: : integer expression expected

    /tmp/tmpmchqm92w.sh: line 42: [: : integer expression expected

    /tmp/tmpmchqm92w.sh: line 42: [: : integer expression expected

    /tmp/tmpmchqm92w.sh: line 42: [: : integer expression expected

    /tmp/tmpmchqm92w.sh: line 42: [: : integer expression expected

    /tmp/tmpmchqm92w.sh: line 42: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max=0\n    local index\n    local str\n    for\
    \ index in $1 \n    do\n        local str=\"$index\"\n        while echo \"$str\"\
    \ | grep -q ' '\n        do \n            str=\"${str// /}\"\n        done\n \
    \       if [[ $max -lt $(echo \"$str\" | uniq | wc -l) ]]\n        then\n    \
    \        max=$(echo \"$str\" | uniq | wc -l)\n        fi\n    done\n    echo \"\
    $1\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name\
    \ enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local unique_chars\n    local len\n    local word\n\n\
    \    unique_chars=$(sort -u -k2 <<< \"$1\")\n    len=${#unique_chars}\n    if\
    \ [ -z \"$len\" ]; then\n        echo \"$1\"\n    else\n        word=${unique_chars:0:len}\n\
    \        echo \"$word\"\n    fi\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    echo \"$1\" | sort -u | sed -e 's/^ *//' -e 's/ *$//'\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local strings=$1\n    local max=0\n    local i\n   \
    \ local count\n    local c\n    while IFS= read -r line || [[ -n \"$line\" ]];\
    \ do\n        ((count++))\n        for i in $(echo $string | sed \"s/ /\\n/g\"\
    ); do\n            ((count--))\n            c=$(echo \"$line\" | cut -d\" \" -f1|\
    \ tr -d \" \")\n            if (( count <= 0 )); then\n                if [[ $i\
    \ == $c ]]; then\n                    ((max++))\n                fi\n        \
    \    else\n                if [[ $i == $c ]]; then\n                    ((max))\n\
    \                    break\n                fi\n            fi\n        done\n\
    \    done\n    echo \"$strings\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=61 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=59 encoding='utf-8'>
  timestamp: 1660058494
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=(\"$@\")\n  local max=\"\"\n  local i=0\n\
    \  while true; do\n    ((i++))\n    max=\"$max$((${words[i]}+1))\"\n    if ((\
    \ i > (${#words[@]})) ); then\n      break\n    fi\n  done\n  echo \"$max\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphsb9m1gx.sh: line 21: syntax error near unexpected token `(''

    /tmp/tmphsb9m1gx.sh: line 21: `( i > (${#words[@]})) ''

    '
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  declare -A count\n  local max_key\n  local -a words\n\
    \  IFS=$'\\n' words=(\"$@\")\n  max_key=${words[0]}\n  for word in \"${words[@]:1}\"\
    \n  do\n    count[$word]=$((count[$word]||0)+1)\n    if [[ \"$max_key\" -gt \"\
    $word\" ]]; then\n      max_key=$word\n    fi\n  done\n  printf '%s' \"${!count[@]}\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local words=\"${1// /@}\"\n  local max=\"\" count word\n\
    \  for word in $words; do\n    count=$(echo \"$word\" | tr -cd '[:digit:]')\n\
    \    if [[ \"$max\" == \"\" || $count -gt $((max+1)) ]]; then\n      max=$count\n\
    \      maxstr=$word\n    fi\n  done\n  echo ${maxstr}\n}\n\ncandidate() {\n  \
    \  find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words\n    local max_count\n    local max_word\n\
    \n    IFS=$' \\t\\n'\n    words=\"${1//[![:space:]]}\"\n    max_count=0\n    max_word=\"\
    \"\n\n    for word in $words; do\n        count=$(echo \"$word\" | wc -c)\n  \
    \      if [ $count -gt $max_count ]; then\n            max_word=$word\n      \
    \      max_count=$count\n        fi\n    done\n\n    echo \"$max_word\"\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local tmp=$1\n    local length=${#tmp}\n    local max=$(tail\
    \ -n 1 <<< \"$(echo \"${tmp}\" | sort | uniq -c | sort -nr | head -1)\")\n   \
    \ while [ $((length-1)) -gt 0 ]; do\n        local tmp2=${tmp}\n        local\
    \ length2=${#tmp2}\n        local max2=$(tail -n 1 <<< \"$(echo \"${tmp2}\" |\
    \ sort | uniq -c | sort -nr | head -1)\")\n        if [[ $max == $max2 ]]; then\n\
    \            tmp=${tmp:0:$length}${max2}${tmp:$((length2+1))}\n        else\n\
    \            tmp=${tmp:0:$length}${max}${tmp:$((length2+1))}\n        fi\n   \
    \     ((length--))\n    done\n    echo \"${tmp}\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # Store the list's words in an array for sorting.\n  local\
    \ list=($1)\n  # Sort the list based on word length in ascending order\n  list=(\
    \ $(echo \"${list[@]}\" | sort -k 2 --field-separator=\" \" \\\n    | tr -d \"\
    \\n\") )\n  # Iterate through the sorted list and count the characters\n  local\
    \ max\n  local count\n  local word\n  max=\"${list[0]}\"\n  count=\"${#max}\"\n\
    \  for word in \"${list[@]:1}\"; do\n    if [ \"${count}\" -gt \"${#word}\" ];\
    \ then\n      max=\"${word}\"\n      count=\"${#word}\"\n    fi\n  done\n  echo\
    \ \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n   local unique_chars=$2\n   local arg\n   local max_chars\n\
    \   local argcount\n   local i\n   local word\n\n   local strings=( $1 )\n   local\
    \ counts=()\n\n   for arg in \"${strings[@]}\"; do\n      counts[$arg]=${counts[$arg]}\
    \ || $(( ${#arg} + 1 ))\n   done\n\n   max_chars=${counts[$1]}\n   for (( i =\
    \ 1; i < ${#counts[@]}; i++ )); do\n      if [[ \"${counts[$i]}\" -gt \"$max_chars\"\
    \ ]]; then\n         max_chars=${counts[$i]}\n         arg=$i\n      fi\n   done\n\
    \n   word=${strings[$arg]}\n   printf '%s' \"$word\"\n}\n\ncandidate() {\n   \
    \ find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph8vmnz2b.sh: line 29: name of string: syntax error in expression
    (error token is "of string")

    '
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n\tlocal max_word=$1; shift\n\tlocal tmp=\n\tfor word in\
    \ \"$@\"; do\n\t\techo \"$word\" | tr -cd \"$\" | sort | uniq -c | sort -rn |\
    \ tail -1 | tr -d ' '\n\t\tif [ \"$?\" -eq \"1\" ]; then\n\t\t\tcontinue\n\t\t\
    fi\n\t\tlocal tmp=$word\n\tdone\n\techo \"$max_word\"\n}\n\ncandidate() {\n  \
    \  find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_char=0\n  local cur_char=0\n  local i\n  local\
    \ word\n  for word in $*; do\n    cur_char=$(echo \"$word\" | wc -c)\n    if [[\
    \ $cur_char -gt $max_char ]]; then\n      max_char=$cur_char\n      word=$word\n\
    \    fi\n  done\n  echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local -n words=\"$1\"\n  local -n uniq=\"$(echo \"$words\"\
    \ | uniq | wc -l | tr -d '[:space:]')\"\n  local -n max=\"$(echo \"$words\" |\
    \ sort -n | tail -n 1)\"\n  local -n pos=\"$(echo \"$words\" | grep -Fx \"$max\"\
    )\"\n\n  if [[ -n \"$uniq\" ]]; then\n    echo \"$max\"\n  else\n    echo \"$pos\"\
    \n  fi\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmppvaemcqe.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    /tmp/tmppvaemcqe.sh: line 16: local: `1'': invalid variable name for name reference

    /tmp/tmppvaemcqe.sh: line 17: local: `'': not a valid identifier

    /tmp/tmppvaemcqe.sh: line 18: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max=0\n  local maxstr=\"\"\n\
    \  local maxstrcount=0\n  local maxnumchars=0\n  local maxnumcharsstr=\"\"\n \
    \ local maxnumcharsstrcount=0\n  for word in $list; do\n    # ignore empty words\n\
    \    if [ -z \"$word\" ]; then\n      continue\n    fi\n\n    # count chars of\
    \ each string\n    numchars=$(echo \"$word\" | wc -c)\n    \n    # compare words\
    \ with max number of characters\n    if [ \"$numchars\" -gt \"$maxnumchars\" ];\
    \ then\n      maxnumchars=\"$numchars\"\n      maxstrcount=$numchars\n      maxstr=\"\
    $word\"\n      # ignore strings too long\n      if [ \"$numchars\" -lt \"$maxnumcharsstrcount\"\
    \ ]; then\n        maxnumcharsstrcount=\"$numchars\"\n        maxnumcharsstr=\"\
    $word\"\n      fi\n    fi\n  done\n  echo \"$maxstr\"\n}\n\ncandidate() {\n  \
    \  find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words num_unique_chars max_unique_chars\n    IFS='\
    \ ' read -a words <<< \"$1\"\n    num_unique_chars=$(echo \"${#words[@]}\" | tr\
    \ \" \" \"\\n\" | sort | uniq | wc -l)\n    if [ $num_unique_chars -gt $max_unique_chars\
    \ ]; then\n        max_unique_chars=$num_unique_chars\n        max_word=$(echo\
    \ \"${words[@]}\" | tr \" \" \"\\n\" | sort | uniq | head -1)\n    else\n    \
    \    max_word=$(echo \"${words[@]}\" | tr \" \" \"\\n\" | sort | uniq | head -n\
    \ 1)\n    fi\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2gj85gm3.sh: line 18: [: 1: unary operator expected

    '
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words max\n    words=$(echo \"$1\" | tr 'a-z'\
    \ 'A-Z')\n    max=$(echo \"$words\" | tr ' ' '_' | sort -u_ | tr ' ' '-')\n  \
    \  echo \"${max%%-*}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: invalid option -- ''_''

    Try ''sort --help'' for more information.

    '
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local word\n    local max\n    local word_count=0 #\
    \ Count the number of characters in word\n    for word in $1; do\n        word_count=0\n\
    \        for char in $word; do\n            word_count=$((word_count+1))\n   \
    \     done\n        if [ \"$word_count\" -gt $max ]; then\n            max=$word_count\n\
    \        fi\n    done\n    echo \"$max\"\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0ucvqkhd.sh: line 23: [: 1: unary operator expected

    /tmp/tmp0ucvqkhd.sh: line 23: [: 1: unary operator expected

    /tmp/tmp0ucvqkhd.sh: line 23: [: 1: unary operator expected

    '
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n        local -n result=$1\n        local charcount=${#result[@]}\n\
    \        local max=0\n        local i\n\n        for ((i=0; i<${charcount}; i++));\
    \ do\n                if [[ ${result[i]} -gt ${max} ]]; then\n               \
    \         max=${result[i]}\n                fi\n        done\n        if [[ ${max}\
    \ -gt ${#result[@]} ]]; then\n                echo \"${result[*]}\"\n        else\n\
    \                echo \"${result[0]}\"\n        fi\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppt4canth.sh: line 15: local: `name of string'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660058489
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # Your code goes here.\n  local temp\n  local max\n  max=$(sort\
    \ | uniq | wc -c)\n  if [ \"$max\" == \"1\" ]; then\n    return $1\n  fi\n  temp=$(sort\
    \ | uniq | head -$max)\n  local l=$(echo \"$temp\" | wc -l)\n  if [ $l -eq 1 ];\
    \ then\n    return $1\n  fi\n  echo \"$temp\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=60 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=3 encoding='utf-8'>
  timestamp: 1660058494
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=\"$1\"\n    local max=0\n    local max_word=\"\
    \"\n    local counter=1\n    local tmpstr\n\n    for str in $words; do\n     \
    \   tmpstr=$(echo $str | sed -e 's/^[^a-zA-Z]*//' -e 's/^[ \\t]*//')\n       \
    \ if [[ -z \"$tmpstr\" ]]; then\n            continue\n        fi\n        counter=0\n\
    \        local len\n        len=$( echo $tmpstr | wc -c)\n        while [[ $counter\
    \ -lt $len ]]; do\n            counter=$(( counter + 1 ))\n            len=$((\
    \ len + 1 ))\n        done\n        if [[ $counter -gt $max ]]; then\n       \
    \     max=$counter\n            max_word=$tmpstr\n        fi\n    done\n    echo\
    \ $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=70 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=4 encoding='utf-8'>
  timestamp: 1660058494
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local string=\"$1\"\n    local unique_count=0\n    local\
    \ max_char=\"\"\n\n    IFS=' ' read -a array <<< \"$string\"\n\n    for string\
    \ in \"${array[@]}\"\n    do\n        ((unique_count+=${#string}))\n        if\
    \ [[ $unique_count -gt $max_char ]]\n        then\n            max_char=$unique_count\n\
    \        fi\n    done\n\n    echo $max_char\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n  local max_count\n  local max_len\n\
    \  local i\n  local word\n\n  max_count=0\n  max_len=0\n\n  for word in $list;\
    \ do\n    local count=0\n    for (( i=0; i<${#word}; i++ )); do\n      if [[ $word\
    \ == \"${word:$i:1}\" ]]; then\n        count=$(( count+1 ))\n      else\n   \
    \     break\n      fi\n    done\n    if [[ $count -gt $max_count ]]; then\n  \
    \    max_count=$count\n      max_len=${#word}\n    fi\n  done\n\n  echo \"${word:0:$max_len}\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local list=\"$1\"\n\n  # sort to put longest first\n \
    \ list=$(echo \"$list\" | sort -g)\n\n  local maxnum=0\n  local maxword=\"\"\n\
    \n  for word in $list; do\n    local curnum=\"$(echo \"$word\" | awk '{print length($0)}')\"\
    \n    if (( $curnum > $maxnum )); then\n      maxnum=$curnum\n      maxword=\"\
    $word\"\n    fi\n  done\n\n  echo \"$maxword\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    declare -A count\n    declare max=\"\"\n    declare\
    \ n=0\n    read -ra array <<< \"$1\"\n\n    for word in \"${array[@]}\"\n    do\n\
    \        ((n++))\n        count[$word]=$((count[$word]+1))\n        if [[ ${count[$word]}\
    \ -gt $n ]]\n        then\n            max=${word}\n        fi\n    done\n\n \
    \   echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local word\n  local count=0\n  local max=0\n  local words=()\n\
    \n  for word in \"$1\"; do\n    words=\"${words} ${word}\"\n  done\n\n  for word\
    \ in \"${words[@]}\"; do\n    count=$(( $count + ${#word} ))\n  done\n\n  max=$((\
    \ $count > $max ? $count : $max ))\n  echo ${words[$max]}\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"$1\"\n\n    local word_count\n    word_count=$(echo\
    \ \"$list\" | tr '\\n' ' ' | wc -l)\n    echo \"${list}\" | sort | uniq | wc -l\
    \ | awk '{ if ($1 == 0) { print $2 }}'\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local tmp=()\n    local nchars=0\n    local char_count=0\n\
    \    local tmpstr=''\n    local max=0\n    local max_i=0\n    for (( i=0 ; i<${#1[@]}\
    \ ; i++ )); do\n        tmpstr=${1[i]}\n        tmp=( ${tmp[@]} $tmpstr )\n  \
    \      char_count=$(cat $1 | wc -c)\n        for (( j=0 ; j<${#tmp[@]} ; j++ ));\
    \ do\n            nchars=$(( ${#tmp[@]} * ${#tmpstr[@]} / char_count ))\n    \
    \        if [ $nchars -gt $max ]; then\n                max=$nchars\n        \
    \        max_i=$i\n            fi\n        done\n    done\n    echo \"${tmp[max_i]}\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3wwmt1mq.sh: line 25: i<${#1[@]} : bad substitution

    '
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list=\"${1}\"\n    local tmp\n\n    local length\n\
    \    local count\n    local min\n    local max\n\n    local element\n\n    for\
    \ element in ${list}; do\n        length=$(echo \"${element}\" | wc -c)\n    \
    \    count=0\n        min=0\n        max=0\n        for tmp in ${list}; do\n \
    \           if [[ ${tmp} == ${element} ]]; then\n                ((count=count+1))\n\
    \                if [[ ${count} -gt ${max} ]]; then\n                    max=count\n\
    \                fi\n            fi\n        done\n        if [[ ${length} -gt\
    \ ${max} ]]; then\n            max=length\n        fi\n        if [[ ${length}\
    \ -lt ${min} ]]; then\n            min=length\n        fi\n    done\n\n    echo\
    \ ${list}[${min}:${max}]\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local line\n  local unique_chars\n  local max_unique_chars\n\
    \  local max_count\n\n  local words=$1\n\n  unique_chars=$( echo \"$words\" |\
    \ sort -u | wc -l )\n  max_unique_chars=$( echo \"$words\" | sort -u | tail -n\
    \ +2 | head -n -1 | wc -l )\n  max_count=$( echo \"$words\" | sort -u | tail -n\
    \ +2 | head -n -1 | tr -d -c '[:digit:]' )\n\n  if [ \"$max_unique_chars\" -gt\
    \ \"$unique_chars\" ]; then\n    word=$( echo \"$words\" | sort -u | tail -n +2\
    \ | head -n -1 )\n  else\n    word=$( echo \"$words\" | sort -u | head -n -1 )\n\
    \  fi\n\n  echo \"$word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local words=( \"$@\" )\n    local word\n    local maxcount=-1\n\
    \    local count\n    local unique\n    for word in \"${words[@]}\"; do\n    \
    \    count=0\n        unique=0\n        for c in $word; do\n            ((count\
    \ += ${#c}))\n            if ((count > maxcount)); then\n                maxcount=$count\n\
    \                unique=$c\n            fi\n        done\n    done\n    echo \"\
    $unique\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local input=\"$1\"\n    local max_count=0\n    local\
    \ max_string=\"\"\n    local index=1\n    while [[ $index -lt ${#input} ]]; do\n\
    \        local count=0\n        local string=\"\"\n        for element in ${input};\
    \ do\n            count=$((count + ${#element}))\n            string=\"${element}\
    \ \"\n        done\n        if [[ $count -gt $max_count ]]; then\n           \
    \ max_count=$count\n            max_string=$string\n        fi\n        index=$((index\
    \ + 1))\n    done\n    echo \"$max_string\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local word_list=($1)\n    # Count the number of unique\
    \ characters\n    local max_chars=0\n    local word_count=0\n    for word in \"\
    ${word_list[@]}\"; do\n        ((word_count++))\n        [[ $(echo $word | tr\
    \ \" \" \"_\") =~ [^[:alnum:]] ]] || continue\n        [[ $(echo $word | tr \"\
    \ \" \"_\") != $(echo $word | tr \" \" \"_\") ]] || continue\n        ((max_chars=$(expr\
    \ ${#word} + 1))\n        [[ $max_chars -le $word_count ]] || continue\n     \
    \   echo \"$word\"\n        break\n    done\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd_jhaun7.sh: line 27: syntax error near unexpected token `done''

    /tmp/tmpd_jhaun7.sh: line 27: `    done''

    '
  stdout: ''
  timestamp: 1660058489
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local MAX_CHARS=100\n  local -a words\n  local -a uniq\n\
    \  local i=0 word\n  words=(${@})\n  uniq=(${words[@]})\n\n  local count=0\n \
    \ local num_uniq=0\n\n  while [[ ${#words[*]} -gt 0 ]] ; do\n    count=0\n   \
    \ word=\"${uniq[i]}\"\n\n    while [[ ${#uniq[*]} -gt ${count} ]] ; do\n     \
    \ ((count++))\n      uniq[count]=\"${uniq[count-1]}\"\n    done\n\n    if [[ ${#uniq[*]}\
    \ -gt ${num_uniq} ]]; then\n      num_uniq=${#uniq[*]}\n    fi\n    uniq[i]=\"\
    \"\n\n    ((i++))\n  done\n\n  local j=0\n  while [[ ${#uniq[*]} -gt 0 ]] ; do\n\
    \    uniq[j]=${uniq[0]}\n    ((j++))\n    ((j--))\n  done\n\n  local max_word\n\
    \  local max_count\n\n  for ((i=0; i < ${#uniq[@]}; i++)); do\n    ((count=0))\n\
    \    while [[ ${#uniq[*]} -gt ${count} ]] ; do\n      ((count++))\n      uniq[count]=\"\
    ${uniq[count-1]}\"\n    done\n\n    if [[ ${count} -gt ${max_count} ]]; then\n\
    \      max_count=${count}\n      max_word=${uniq[i]}\n    fi\n    uniq[i]=\"\"\
    \n  done\n\n  echo \"${max_word}\"\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=37 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=26 encoding='utf-8'>
  timestamp: 1660058494
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    declare -i cnt=0\n    declare -i max_len=0\n    declare\
    \ -i max_len_idx=-1\n    declare -i num_unique=0\n    while read -r line; do\n\
    \t[[ ${line} != *\" \" ]] && echo \"${line}\" && cnt+=1 || cnt=1\n        (( cnt\
    \ == 1 )) && continue\n\t[[ ${line} =~ ^[0-9]*$ ]] && echo \"${line}\" && num_unique+=1\
    \ || num_unique=1\n\t(( num_unique > max_len )) && max_len=num_unique && max_len_idx=$((\
    \ ${#line} + 1 ))\n    done < <(echo \"${1}\" | sort -u | tr \"\\n\" \" \")\n\
    \    echo \"${1}\" | cut -d' ' -f${max_len_idx}\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058489
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local list_to_find \"${@:2}\"\n    local length \"${#list_to_find[@]}\"\
    \n    local unique_chars 0\n    local unique_chars_list \"\"\n    local max_unique_chars\
    \ 0\n    local max_unique_chars_string \"\"\n    local max_unique_chars_string\
    \ \"\"\n    local max_unique_char_index -1\n\n    IFS=\" \" read -r -a unique_chars\
    \ <<< \"${list_to_find[@]}\"\n\n    for (( i = 0; i < ${#unique_chars[@]}; i++\
    \ )); do\n      unique_chars_list+=\"${unique_chars[i]}\"\n    done\n\n    unique_chars_count=\"\
    ${#unique_chars[@]}\"\n\n    for (( i = 0; i < ${#list_to_find[@]}; i++ )); do\n\
    \      unique_chars_list_to_find=\"${list_to_find[i]}\"\n      unique_chars_list_length=\"\
    ${#unique_chars_list_to_find}\"\n\n      unique_chars_list_to_find+=\" \"\n  \
    \    unique_chars_list_to_find+=\"${list_to_find[i]}\"\n      unique_chars_list_to_find+=\"\
    \ \"\n\n      unique_chars_list_to_find+=\"${list_to_find[i]}\"\n\n      unique_chars_list_to_find+=\"\
    \ \"\n      unique_chars_list_to_find+=\"${list_to_find[i]}\"\n\n      unique_chars_count=\"\
    ${#unique_chars[@]}\"\n\n      if (( unique_chars_list_length < unique_chars_count\
    \ )); then\n        unique_chars_list=\"\"\n      fi\n\n      for (( j = 0; j\
    \ < unique_chars_list_length; j ++)); do\n        unique_chars_list+=\"${unique_chars_list_to_find[j]}\"\
    \n      done\n\n      unique_chars_list+=\" \"\n\n      for (( j = 0; j < unique_chars_list_length;\
    \ j ++)); do\n        if [[ ${unique_chars_list[j]} == *\" \"* ]]; then\n    \
    \      unique_chars_list=${unique_chars_list#*${unique_chars_list[j]}}\n     \
    \     unique_chars_list=${unique_chars_list%${unique_chars_list[j]}}\n       \
    \ else\n          unique_chars_list+=\"${unique_chars_list_to_find[j]}\"\n   \
    \     fi\n      done\n\n      unique_chars_list+=\" \"\n\n      unique_chars_list_length=\"\
    ${#unique_chars_list}\"\n      if (( unique_chars_list_length > unique_chars_count\
    \ )); then\n        unique_chars_count=\"${unique_chars_list_length}\"\n     \
    \   max_unique_chars_string=\"${unique_chars_list}\"\n      fi\n    done\n\n \
    \   for (( i = 0; i < ${#list_to_find[@]}; i++ )); do\n      unique_chars_list_to_find=\"\
    ${list_to_find[i]}\"\n      unique_chars_list_length\n}\n\ncandidate() {\n   \
    \ find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplvse6suf.sh: line 78: syntax error near unexpected token `}''

    /tmp/tmplvse6suf.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1660058489
