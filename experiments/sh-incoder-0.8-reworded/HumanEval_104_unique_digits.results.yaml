language: sh
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ list=\"$1\";\n\t# remove quote\n\tlist=\"${list//\\\"/}\";\n\t# sort list\n\t\
    list=\"$(echo -e \"$list\" | sort | uniq | sort -n)\";\n\t# remove double quote\n\
    \tlist=\"${list//\\\"/}\";\n\techo \"${list}\";\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ elements=$1\n  local unique_list\n\n  unique_list=()\n  for element in $elements\n\
    \  do\n    if [ $(echo $element | sed 's/\\([0-9]*\\)$/\\1/') -eq 0 ]\n    then\n\
    \      unique_list+=( $element )\n    fi\n  done\n\n  unique_list | sort -u\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpha0b18ha.sh: line 25: unique_list: command not found

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  awk\
    \ '{print $1}' $1 | sort | uniq -u | awk '{print $1}'\n}\n\ncandidate() {\n  \
    \  unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: fatal: cannot open file `15'' for reading (No such file or directory)

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local i=1\n    local list=(\"$@\")\n    local output=$(echo \"${list[*]}\" |\
    \ tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    # replace all space separated\
    \ items with newline separated \n    # items and sort uniquely.\n    for i in\
    \ ${output}; do\n        echo \"$i\"\n    done\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local i a b dic digits result\n    IFS=$'\\n' a=( $1 )\n    for((i=0; i < ${#a[@]};\
    \ ++i)); do\n        dic=()\n        b=0\n        for((j=0; j<10; ++j)); do\n\
    \            if((${a[i]}+j) % 2 == 0) {\n                b=1\n               \
    \ break\n            }\n        done\n        if(b) dic=( \"${dic[@]}\" \"${a[i]}\"\
    \ )\n    done\n    result=( \"${dic[@]}\" )\n    IFS=$' \\t\\n'\n    IFS=$'\\\
    n'\n    IFS=$'\\t\\n'\n    echo ${result[@]}\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi_yh5dxn.sh: line 19: syntax error near unexpected token `%''

    /tmp/tmpi_yh5dxn.sh: line 19: `            if((${a[i]}+j) % 2 == 0) {''

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ declare -a x=(\"${@}\" | sed 's/ //g')\n    local -a d\n    d=($(x=( \"${x[@]}\"\
    \ ; echo \"${x}\" | sed 's/^/1/;s/ /2/' | tr 2 1 )))\n    echo ${d[@]}\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp98wy06yd.sh: line 13: syntax error near unexpected token `|''

    /tmp/tmp98wy06yd.sh: line 13: `    declare -a x=("${@}" | sed ''s/ //g'')''

    /tmp/tmp98wy06yd.sh: line 14: local: can only be used in a function

    /tmp/tmp98wy06yd.sh: command substitution: line 16: syntax error near unexpected
    token `;''

    /tmp/tmp98wy06yd.sh: command substitution: line 16: `x=( "${x[@]}" ; echo "${x}"
    | sed ''s/^/1/;s/ /2/'' | tr 2 1 ))''

    /tmp/tmp98wy06yd.sh: line 17: syntax error near unexpected token `}''

    /tmp/tmp98wy06yd.sh: line 17: `}''

    '
  stdout: '

    '
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x \n    x=\"${@/#/\\\"}\"\n    local output\n    output=$(echo \"$x\"\
    \ | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=\"$1\"\n  for x in $(echo $x | tr ' ' '\\n'); do\n    if [[ $(echo $x | grep\
    \ -E '^[0-9]+$' | wc -l) == 0 ]]; then\n      echo \"$x\"\n    fi\n  done\n}\n\
    \ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x\n  x=${1//,/ }\n  for i in $x; do\n    [[ $i =~ ^[0-9]+$ ]] && echo $i\n \
    \ done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local -r x=\"$1\"\n    local -a ret=()\n    local a\n    local i\n\n    for\
    \ a in ${x}; do\n\ti=\"$(awk '{print int($1/10) * 10 + int($1%10)}' <<< \"$a\"\
    )\"\n\tif (( $(echo \"$i / 2 | bc\" |bc -l) )); then\n\t    ret+=(\"$a\" \"$i\"\
    )\n\tfi\n    done\n    IFS=' ' printf '\"%s\" {%s}' \"${ret[@]}\" | sort | uniq\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: illegal character: |

    (standard_in) 1: syntax error

    (standard_in) 1: illegal character: |

    (standard_in) 1: syntax error

    (standard_in) 1: illegal character: |

    (standard_in) 1: syntax error

    (standard_in) 1: illegal character: |

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ x=$1\n    y=()\n    IFS=' ' read -r -a y <<< \"$x\"\n    for i in \"${y[@]}\"\
    ; do\n        if [[ \"$i\" =~ (^[02468][02468])$ ]]; then\n            continue\n\
    \        fi\n        y+=($i)\n    done\n    IFS=$'\\n'\n    echo $y\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  x=(${1//[[:blank:]]/})\n\
    \  y=(${x//[[:digit:]]/})\n  printf '%s\\n' \"${y[@]}\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\techo\
    \ $1 | sed \"s/ //g\" | sed \"s/\\(^[0-9]*\\)\\([0-9]*\\)$/\\1\\n\\2/g\" | sort\
    \ | uniq | sed \"s/$/\\1/\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 7: invalid reference \1 on `s'' command''s
    RHS

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local tmp=$1\n    local ret=()\n    while read -r tmp; do\n        [ \"${tmp%?}\"\
    \ -eq 0 ] &&\n            ((${#tmp}<2)) ||\n            ( test ${#ret[*]} -eq\
    \ 0 && printf \"%s\" \"${tmp}\" &&\n            (( ${#tmp} % 2 == 0 )) ||\n  \
    \          printf \"%s \" \"${tmp}\" >> ${ret[@]} &&\n            (( ${#tmp} %\
    \ 2 == 0 )) ||\n            ((ret[${#ret[*]}-1]+=(\"${tmp}\")));\n    done <<<\
    \ \"$(echo \"${tmp}\" | tr ' ' ',')\"\n    echo \"${ret[@]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp99fertl.sh: line 23: syntax error near unexpected token `done''

    /tmp/tmpp99fertl.sh: line 23: `    done <<< "$(echo "${tmp}" | tr '' '' '','')"''

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=\"$1\"\n  local a=\"\"\n  local b\n  local tmp\n  \n  for b in ${x}; do\n\
    \    [[ $b -gt 0 ]] || continue\n    \n    tmp=$(echo \"$b/10\" | bc -l)\n   \
    \ [[ \"$tmp\" -eq \"1\" ]] && continue\n    \n    a=\"${a}\\\"$b\\\"\"\n  done\n\
    \  \n  echo \"${a}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpipfms8gv.sh: line 22: [[: 1.50000000000000000000: syntax error:
    invalid arithmetic operator (error token is ".50000000000000000000")

    /tmp/tmpipfms8gv.sh: line 22: [[: 3.30000000000000000000: syntax error: invalid
    arithmetic operator (error token is ".30000000000000000000")

    /tmp/tmpipfms8gv.sh: line 22: [[: 142.20000000000000000000: syntax error: invalid
    arithmetic operator (error token is ".20000000000000000000")

    /tmp/tmpipfms8gv.sh: line 22: [[: .10000000000000000000: syntax error: operand
    expected (error token is ".10000000000000000000")

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=$1\n    local ans=\"\"\n    local tmp=\"\"\n    for k in $(seq ${#x});\
    \ do \n        tmp=${x%$k}\n        if [ ${tmp:0:1} = 0 ]; then\n            if\
    \ [ -z \"${ans##*${tmp}}\" ]; then\n                ans=\"${ans}$k\"\n       \
    \     else\n                ans=\"${ans},$k\"\n            fi\n        fi\n  \
    \  done\n    echo \"${ans}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    # Make sure it's all digits, even those with quotes\n  \
    \  x=\"$(echo \"${x}\" | sed \"s/\\([0-9]*\\)\\([0-9]*\\)\\([0-9]*\\)/\\1 \\2\
    \ \\3/\")\"\n    # Filter out all even digits\n    x=\"$(echo \"${x}\" | sed \"\
    s/\\([0-9]*\\)\\([0-9]*\\)\\([0-9]*\\)/\\1 \\2 \\3/\")\"\n    # Return all that\
    \ aren't even\n    echo \"$x\" | sed -e 's/\\([^ ]*\\)\\([^ ]*\\)\\([^ ]*\\)/\\\
    1\\2\\3/'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ set -- $1\n    mapfile -t x < <(sort <<<\"${@}\" | uniq -d)\n    printf '%s\\\
    n' \"${x[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x\n    x=$1\n    local y\n    y=\"\"\n    while read x; do\n        y=$y\"\
    $x\"\n    done < <(echo \"$x\" | tr \" \" \"\\n\")\n    echo $y\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  x=$@\n\
    \  y=${x//[! 0-9]}\n  y=${y//[!0-9]}\n  y=${y//[^0-9]}\n  y=${y// }\n  y=${y///\
    \ }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y//% }\n  y=${y//\
    \ }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y//\
    \ }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y//\
    \ }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y//\
    \ }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y//\
    \ }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y//\
    \ }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y//\
    \ }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y//\
    \ }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y//\
    \ }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y//\
    \ }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y// }\n  y=${y//\
    \ }\n\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ a n p1 p2 p3 r\n  a=$1\n  n=$#\n  r=$n\n  p1=1\n  p2=1\n  while [ $n -gt 0 ]\n\
    \  do\n    p3=$(( $p2 ))\n    while [ $p2 -le $n ]\n    do\n      if [ $p3 -eq\
    \ 0 ]\n      then\n        p3=$(( $p2 + 1 ))\n      fi\n      p2=$(( $p2 + 1 ))\n\
    \    done\n    if [ $p2 -eq $n ]\n    then\n      p1=$(expr $p1 + 1)\n      p2=1\n\
    \      p3=1\n    fi\n    if [ $p2 -gt $n ]\n    then\n      p2=$(( $n - $p2 ))\n\
    \      p3=$(( $p2 - 1 ))\n    fi\n    if [ $p2 -lt $n ]\n    then\n      if [\
    \ $p1 -eq 0 ]\n      then\n        p2=$(( $n - 1 ))\n      fi\n      if [ $p3\
    \ -eq 0 ]\n      then\n        p3=$(( $n - 1 ))\n      fi\n      r=$(( $r + 1\
    \ ))\n      a=$(expr $a $p2)\n      a=$(expr $a $p3)\n      a=$(expr $a $p1)\n\
    \      p1=$(expr $p1 + 1)\n      p2=$(expr $p2 + 1)\n      p3=$(expr $p3 + 1)\n\
    \    fi\n  done\n  echo $r\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=36 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=34 encoding='utf-8'>
  timestamp: 1660057355
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x\n    local sorted\n    local newlist\n\n    sorted=$(echo $1 | sort\
    \ -n -r | cut -d ' ' -f 2-)\n    for x in $sorted; do\n        if [[ $x != *[!0]*\
    \ ]]; then\n            newlist=\"${newlist} $x\"\n        fi\n    done\n\n  \
    \  echo $newlist\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x\n  local -i ret\n\n  ret=()\n  local -r x=$1\n\n  for ((i=0; i < ${#x[@]};\
    \ i++)); do\n    local j\n    for ((j=0; j < ${#x[i]}; j++)); do\n      local\
    \ k\n      for ((k=0; k < ${#ret[@]}; k++)); do\n        if (( ${x[i]}:${j}:${k}\
    \ > ${ret[k]}:${ret[k+1]} )) ; then\n          ((ret[k+1]+=1))\n          ret[k]=${x[i]}${j}\n\
    \        fi\n      done\n    done\n  done\n\n  IFS=' ' read -r -a ret <<< \"${ret[@]}\"\
    \n  IFS=' '\n  echo \"${ret[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ items=$1\n  local output\n  local i\n  local num\n  output=''\n  for (( i=0;\
    \ i < ${#items} && output==\"\"; i++ )); do\n    num=$(echo \"${items[i]}\" |\
    \ sed \"s/^\\([0-9]*\\)$/\\\\\\1/g\")\n    if [[ ${#num} -eq 2 ]]; then\n    \
    \  if [[ ${num:0:1} = 0 ]]; then\n        output=\"${output}${num}\"\n      fi\n\
    \    fi\n  done\n  echo \"${output}\" | sort | uniq -d\n}\n\ncandidate() {\n \
    \   unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwbovwfnf.sh: line 18: ((: i < 12 && output==: syntax error: operand
    expected (error token is "==")

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    local output\n    # convert string to array\n    x=($x)\n\
    \    # find unique digits\n    local digits=$( echo \"${x}\" | tr -cd 0-9 )\n\
    \    # remove all but unique digits\n    digits=$(echo \"${x}\" | tr \" \" \"\\\
    n\" | grep -Fvf <(echo \"${digits}\") )\n    # sort array in increasing order\n\
    \    local sorted_digits=$( IFS=\"\\n\" sort -n -k1,1 <<< \"${digits}\" )\n  \
    \  # remove leading zeros from sorted digit\n    sorted_digits=$(echo \"${sorted_digits}\"\
    \ | sed -E 's/^(0+)/\\1/')\n    echo \"${sorted_digits[*]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local digits=$(echo $1 | sed 's/ //g')\n    local num=$(echo $1 | awk '{print\
    \ $1}')\n    local i=0\n\n    for digit in $digits; do\n        if [ $((i%2))\
    \ -eq 0 ]; then\n            if [ $((num % $digit)) -eq 0 ]; then\n          \
    \      echo $digit\n            fi\n        fi\n        i=$((i+1))\n    done\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x result\n  x=\"$1\"\n  result=()\n  for i in $x; do\n    if [[ ! $i =~ ^[0-9]+$\
    \ ]]; then\n      result+=(\"$i\")\n    fi\n  done\n  echo \"${result[@]}\" |\
    \ sort | uniq\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local list_str=$1\n    local digits=$(echo $list_str | sed 's/ //g')\n    local\
    \ res\n    local temp\n    for index in $(seq 0 $((${#digits}-1))); do\n     \
    \   temp=$(echo \"${digits}\" | cut -d $((index+1)) -f1)\n        if [[ ${temp:0:1}\
    \ = \"0\" ]]; then\n            res=\"${res} ${temp}\"\n        fi\n    done\n\
    \    echo $res\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ x=\"$1\"\n\tlocal i\n\tlocal y\n\tlocal tmp\n\tlocal count=0\n\t\n\tfor i in\
    \ $x; do\n\t\ttmp=\"\\\"$i\\\"\"\n\t\tif [ -z \"$y\" ]; then\n\t\t\ty=$tmp\n\t\
    \telif [ \"$i\" -gt \"$y\" ]; then\n\t\t\ty=$tmp\n\t\tfi\n\t\t(( count++ ))\n\t\
    done\n\t\n\t[ \"$count\" -eq 0 ] && return\n\t\n\tfor i in $x; do\n\t\ttmp=\"\\\
    \"$i\\\"\"\n\t\tif [ \"$tmp\" != \"$y\" ] && [ \"$tmp\" != \"$y\" ] 2>/dev/null;\
    \ then\n\t\t\techo $y\n\t\t\ty=$tmp\n\t\tfi\n\t\t(( count-- ))\n\tdone\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9evo_u5_.sh: line 23: [: "15": integer expression expected

    /tmp/tmp9evo_u5_.sh: line 23: [: "15": integer expression expected

    /tmp/tmp9evo_u5_.sh: line 23: [: "15": integer expression expected

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=$1\n    local result=()\n\n    for (( i=1; i<${#x}; ++i )); do\n   \
    \     local digit=${x:$i:1}\n\n        if [[ ${digit:0:1} == \"0\" ]]; then\n\
    \            result+=(\"${x:$i:1}\")\n        fi\n    done\n\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=${1//$'\\t'};\n  local ans=()\n  for ((i=0;i<${#x};i++))\n  do\n    if [[\
    \ ${x[i]} =~ ^[0-9]+$ ]] \\\n     && [[ ${x[i]} =~ ^[0-9]+$ ]]\n     && [[ ${x[i]}\
    \ =~ ^[0-9]+$ ]]; then\n      ans+=($x[i])\n    fi\n  done\n  echo ${ans[*]} |\
    \ sort -nr | head -1\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzl9xegge.sh: line 19: syntax error near unexpected token `&&''

    /tmp/tmpzl9xegge.sh: line 19: `     && [[ ${x[i]} =~ ^[0-9]+$ ]]; then''

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ IFS=$'\\n' read -a array <<< \"$1\"\n    local i\n    local str\n    local arraylen\n\
    \    arraylen=${#array[@]}\n    for ((i=0; i<$arraylen; i++)); do\n        str=\"\
    ${array[i]}\"\n        [[ \"$str\" =~ ^[0-9]+ ]] || continue\n        array[$i]=$(echo\
    \ \"$str\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    done\n    IFS=$'\
    \ \\t\\n'\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local num_str=$1\n    local unique_list=\"$(sed -n \"s/^$num_str \\(.*\\)\\\
    (.*\\)\\(.*\\)\\(.*\\)/\\2,\\3/p\" | sort | uniq)\"\n    echo $unique_list\n}\n\
    \ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=18 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=15 encoding='utf-8'>
  timestamp: 1660057355
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=\"$1\"\n  local output\n  output=$(xargs -n 1 -I@ echo \"@\" | sort | awk\
    \ '{ print $1 }' | sort --unique --numeric-sort )\n  echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=35 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=11 encoding='utf-8'>
  timestamp: 1660057355
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ x=\"$(eval \"echo \\\"$1\\\";\")\"\n\tsort | uniq -u | xargs -n1 echo \n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=30 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660057355
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ -n arr=$1; shift\n\tlocal d\n\tlocal i\n\n\tfor i in ${arr[@]}; do\n\t\tif [\
    \ -z \"$d\" ]; then\n\t\t\td=\"${i%????}\"\n\t\telse\n\t\t\t[ \"${i##*$d}\" ]\n\
    \t\tfi\n\tdone\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3ryqgbjr.sh: line 13: local: `15 33 1422 1'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local i j k l m n tmp x\n    x=${1//[!0-9]/}\n    k=${#x}\n    for ((i = 0;\
    \ i < k; i++)); do\n        local tmp=${x#* }\n        n=${tmp#* }\n        j=$((i+1))\n\
    \        [[ \"${tmp: -1}\" == \"$x\" ]] && j=$((k-1))\n        m=$((j-1))\n  \
    \      for ((j = m; j >= 0; j--)); do\n            [[ \"${x[j]: -1}\" == \"$x\"\
    \ ]] && break\n        done\n        [[ \"$j\" == \"0\" ]] && break\n        l=${x[j]}\n\
    \        m=$((j-1))\n        for ((j = m; j >= 0; j--)); do\n            [[ \"\
    ${x[j]: -1}\" == \"$l\" ]] && break\n        done\n        if [ \"$j\" == \"0\"\
    \ ]; then\n            if [[ $l == $n ]]; then\n                x=$x$'\"'\"$l\"\
    '\"'\n            else\n                x=$x$'\"'\"$n\"'\"'\n            fi\n\
    \        fi\n    done\n    echo \"$x\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcucpl5zs.sh: line 26: x: bad array subscript

    /tmp/tmpcucpl5zs.sh: line 26: x: bad array subscript

    /tmp/tmpcucpl5zs.sh: line 26: x: bad array subscript

    /tmp/tmpcucpl5zs.sh: line 26: x: bad array subscript

    /tmp/tmpcucpl5zs.sh: line 26: x: bad array subscript

    /tmp/tmpcucpl5zs.sh: line 26: x: bad array subscript

    /tmp/tmpcucpl5zs.sh: line 26: x: bad array subscript

    /tmp/tmpcucpl5zs.sh: line 26: x: bad array subscript

    /tmp/tmpcucpl5zs.sh: line 26: x: bad array subscript

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local IFS=' ' map=( $1 )\n    local mapLen=${#map[@]}\n    local list\n    local\
    \ result\n\n    list=()\n    for i in \"${map[@]}\"; do\n        [[ ${i} -eq 0\
    \ ]] && continue\n        [[ ${map[i]} -eq 0 ]] && continue\n        list=( \"\
    ${list[@]}\" \"$i\" )\n    done\n\n    for (( i=0; i<mapLen; i++ )); do\n    \
    \    map[i]=\"${map[i]#*0}\"\n    done\n    mapLen=${#map[@]}\n    echo \"${list[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=$1\n  x=${x//[[:space:]]/}\n  x=${x//[[:digit:]]/}\n  x=${x//[[:lower:]]/}\n\
    \  x=${x//[[:upper:]]/}\n  x=($x)\n  declare -A count\n  for i in ${x[@]};\n \
    \ do\n    ((${count[$i]}++))\n  done\n  unset i\n  for i in ${!count[@]};\n  do\n\
    \    if [ ${count[$i]} -eq 0 ];\n    then\n      echo ${i}\n    fi\n  done\n}\n\
    \ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x\n    x=$1\n    local tmp\n    tmp=\"$(sort <<< $x | uniq -u)\"\n   \
    \ tmp=\"$(echo $tmp | sed 's/ //g' | sed 's/^/\"/' | sed 's/$/\"/' | sort -n |\
    \ sed 's/ //g')\"\n    echo \"$tmp\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local numbers=$1\n    local output=$(echo $numbers |  sed 's/ /\\n/g' | xargs\
    \ -n 1 echo | sort -nr -k1,1 )\n    echo \"$output\"\n}\n\ncandidate() {\n   \
    \ unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local n\n    # parse each argument into a list of numbers\n    local -r x=(\
    \ $@ )\n    # empty out current list\n    local -r list=':'\n    local tmp\n \
    \   # loop through arguments\n    for (( n=0; n < ${#x[@]} && n <= ${#list}; n++\
    \ )); do\n        # parse current argument into number\n        tmp=${x[n]}\n\
    \        # remove double quotes around the number\n        local -r tmp2=${tmp//\\\
    \"/}\n        # loop through each number\n        for (( i=0; i<${#tmp2}; i++\
    \ )); do\n            # check if current number is even\n            if [ $((\
    \ ${tmp2:$i:1} % 2 )) -ne 0 ]; then\n                # append the number to the\
    \ list\n                list=\"$list ${x[n]}\"\n            fi\n        done\n\
    \    done\n    # remove last space for consistency\n    local -r list2=\"${list%%\
    \ *}\"\n    # sort list in increasing order\n    local -r list3=\"${list2//$'\\\
    n'/}:*\"\n    # return sorted list\n    echo \"$list3\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpii3_jsyw.sh: line 30: list: readonly variable

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tx=\"\
    $1\"\n\t# We just loop through each character and \n\t# check if it is even number\n\
    \tfor ((i=0; i < ${#x}; i++))\n\tdo\n\t\tif [[ $(echo \"$x\" | grep -c \"^$i$\"\
    ) -ne 0 ]]\n\t\tthen\n\t\t\techo \"$x\"\n\t\t\treturn\n\t\tfi\n\tdone\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ IFS=' ' read -ra array <<< \"$1\"\n    local unique\n    local j=0\n    local\
    \ i=0\n    for ((i=0; i < ${#array[@]}; i++)); do\n        unique=false\n    \
    \    for ((j=0; j < ${#array[@]}; j++)); do\n            case \"${array[j]}\"\
    \ in\n                $((${array[j]}/2)) ) unique=true;;\n            esac\n \
    \       done\n        if $unique; then\n            unique=false\n           \
    \ break\n        fi\n    done\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  IFS=\"\
    \ \" read -ra array <<< \"$1\"\n  local num_not_even=0\n  local index=0\n  local\
    \ i=0\n\n  while (( i < ${#array[@]} )) ; do\n    if [[ ${array[$i]} =~ [0-9]\
    \ ]] ; then\n      (( num_not_even += 1 ))\n      index=$i\n    fi\n    (( i++\
    \ ))\n  done\n\n  unset array[$index]\n  echo \"${array[@]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ tmp x\n\tx=\"${1// }\" # replace all spaces with a single space\n\tx=${x// }\
    \ # replace all spaces with a single space\n\tx=\"'$x'\"\n\techo \"$x\" | sort\
    \ -n # sort the list numerically\n\tx=$( echo \"$x\" | sed 's/\"'\"'\"//g' ) #\
    \ remove all double quotes\n\tx=\"'$x'\"\n\techo \"$x\" | sort -n # sort the list\
    \ numerically\n\tx=$( echo \"$x\" | sed 's/^/'\"$x\"'/g' ) # add single quotes\
    \ to the start \n\techo \"$x\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr4a1vmay.sh: line 21: unexpected EOF while looking for matching
    `''''

    /tmp/tmpr4a1vmay.sh: line 38: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=\"$1\"\n  local g\n  local h\n  local output\n  local k\n  g=$(echo $x | grep\
    \ -o '^[0-9]*$')\n  output=$x\n  for x in ${g}\n  do\n    h=$(echo $x | sed 's/\\\
    (.\\)\\(.*\\)/\\1/g')\n    k=$h\n    if [[ -z \"$h\" ]]\n    then\n      k=$h\n\
    \    else\n      if [[ $k != $h ]]\n      then\n        k=$h\n      fi\n    fi\n\
    \    if [[ \"$k\" == \"$x\" ]]\n    then\n      output=$(echo $output | sed 's/[0-9]//g')\n\
    \    fi\n  done\n  echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \     IFS=$'\\n'\n        set -- $(( $(echo \"$1\" | sed 's/ /\\n/g') ))\n   \
    \     [[ ! $1 ]] && echo \"$1\" | sed 's/ /\\n/g'\n        local IFS\n       \
    \ echo \"${@%\"$IFS\"}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv8wdmicm.sh: line 14: 15

    33

    1422

    1 : syntax error in expression (error token is "33

    1422

    1 ")

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local tmp arr\n    arr=$1\n    for tmp in ${arr[@]}; do\n        local digit=$((${tmp}%10))\n\
    \        if [ $digit = 0 ]; then\n            arr=()\n            break\n    \
    \    fi\n        arr+=$tmp\n    done\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x y d i output\n    IFS=' ' read -ra x <<< \"$1\"\n    local len=${#x[0]}\n\
    \    output=()\n    for ((i=0; i < len; ++i)); do\n        y=${x[i]}\n       \
    \ d=0\n        for ((j=0; j < i; ++j)); do\n            ((d+=${y}+${x[j]}))\n\
    \        done\n        echo $d | grep -q '^0\\?$'\n        if [ $? -eq 0 ]; then\
    \ \n            output+=( \"${y}\" )\n        fi\n    done\n    IFS=' ' printf\
    \ '%s\\n' \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local numbers_array sorted_numbers_array index_to_remove x\n\n    IFS=' ' read\
    \ -a numbers_array <<< \"$1\"\n    sorted_numbers_array=( ${numbers_array[@]}\
    \ )\n    \n    for index_to_remove=(${#sorted_numbers_array[@]} - 1); \n     \
    \   do \n            if [ ${sorted_numbers_array[$index_to_remove]} -gt 0 ]; then\n\
    \                sorted_numbers_array[$index_to_remove]=$((${sorted_numbers_array[$index_to_remove]}\
    \ - 1))\n            fi\n        done\n    \n    sorted_numbers_array=( ${sorted_numbers_array[@]}\
    \ )\n    \n    for index_to_remove=(${#sorted_numbers_array[@]} - 1); \n     \
    \   do \n            if [ ${sorted_numbers_array[$index_to_remove]} -eq 0 ]; then\n\
    \                sorted_numbers_array[$index_to_remove]=$((${sorted_numbers_array[$index_to_remove]}\
    \ + 1))\n            fi\n        done\n    \n    sorted_numbers_array=( ${sorted_numbers_array[@]}\
    \ )\n    \n    for x in \"${sorted_numbers_array[@]}\"; do\n        if [ ${x}\
    \ -ne 0 ]; then\n            echo \"\\\"${x}\\\"\"\n        fi\n    done\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxb2sce54.sh: line 18: syntax error near unexpected token `(''

    /tmp/tmpxb2sce54.sh: line 18: `    for index_to_remove=(${#sorted_numbers_array[@]}
    - 1); ''

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ x=\"$1\"\n\tlocal tmp\n\tx=\"$(echo \"$x\" | sed -e 's/[^0-9]//g' -e 's/ //g')\"\
    \n\t\n\tfor x in $x; do\n\t\ttmp=\"$(echo $x | cut -d'\"' -f 1)\"\n\t\t[ \"$(echo\
    \ $tmp | egrep -o \"^$x\")\" ] \\\n\t\t\t&& echo \"$tmp\" \\\n\t\t\t&& rm \"$tmp\"\
    \n\tdone\n\treturn 0\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'rm: cannot remove ''153314221'': No such file or directory

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local input=\"$1\"\n\n    local list=($(echo $input | tr \" \" \"\\n\"))\n\n\
    \    local tmp\n    local tmp1\n    local digit\n    local output\n    local index\n\
    \n    # initialize \"tmp\" with first element from the list\n    tmp=${list[0]}\n\
    \n    # remove the first element from the list \"list\"\n    list=(${list[@]:1})\n\
    \n    # loop through the list, removing each element\n    # from list \"list\"\
    \ that is not divisible by \"tmp\"\n    for (( i=0; i<${#list[@]}; i++ )); do\n\
    \        tmp1=${list[$i]}\n        if [[ $(( ${tmp} % $tmp1 )) == 0 ]]; then\n\
    \            list=(${list[@]:$i})\n        fi\n    done\n\n    # loop through\
    \ the list \"list\" and\n    # append the elements to a new list \"output\"\n\
    \    for (( i=0; i<${#list[@]}; i++ )); do\n        digit=${list[$i]}\n      \
    \  output=($(echo $output \"\\n$digit\"))\n    done\n\n    # remove the first\
    \ and last element from list \"list\"\n    list=(${list[@]:1:${#list[@]}-1})\n\
    \n    # sort list \"list\" in increasing order\n    list=$(echo $list | tr \"\
    \ \" \"\\n\" | sort -n -s)\n\n    # return the list \"output\"\n    echo $output\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    local output\n    output=()\n    while read -r line; do\n\
    \        [ \"$line\" = \"$x\" ] && continue\n        [ \"$line\" ] && ((output\
    \ += $line))\n    done\n    sort -u <<< \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=51 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=44 encoding='utf-8'>
  timestamp: 1660057355
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\" \n    local sorted_list\n    sorted_list=\"\"\n    while read\
    \ x; do\n        local y=\"${x//[!0-9]}\"\n        [[ \"$y\" == \"$x\" ]] && continue\n\
    \        [[ \"$sorted_list\" == \"\" ]] && sorted_list=\"$y\"\n        sorted_list=\"\
    $sorted_list \\\"$y\\\"\"\n    done < <(sort -n -k 1 <<< \"$x\")\n    echo $sorted_list\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ x\n\tx=\"$(echo \"$1\" | sed 's/ /\\n/g' | sort -u)\" \n\tx=\"${x%\\\"}\"\n\t\
    echo \"$x\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x y\n    for x in \"$@\" ; do\n        y=$x\n        echo \"$y\" | awk\
    \ -F'[0-9]' '{print $1}' | sort -u | grep -v ^$ | tr '\\n' ' '\n    done\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n local\
    \ x=\"$1\"\n local y \n x=($x)\n y=(0)\n for ((i=0; i<${#x[@]}; i++)); do \n \
    \  if [[ $((x[i] % 10)) -gt 0 ]]; then\n     y+=(\"${x[i]}\")\n   fi\n done\n\
    \ sort -nr -k 1 <<< \"$y\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local i x \n    for x in \"$@\"; do\n        if [ $(echo \"$x | awk '{print\
    \ $1}'\" | sort | uniq | wc -l ) -gt 0 ]; then\n            echo \"$x\"\n    \
    \        break\n        fi\n    done\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x\n    local i\n\n    x=$( sed -e 's/^\"//' -e 's/\"$//' <<< \"$1\" |\
    \ tr -d ' ' )\n    i=$( echo \"${#x}\" | cut -d \" \" -f 1 )\n    echo \"${x}\"\
    \ | tr \" \" \"\\n\" | sed -n \"s/^[[:digit:]]*[[:digit:]]*\\([[:digit:]]\\)/\\\
    1/p\" | sed -e \"s/^[[:digit:]]*[[:digit:]]*\\([[:digit:]]\\)/\\1/p\"\n    i=0\n\
    \    while [ $i -lt $i ]; do\n        x=\"${x//[!0-9]*}\"\n        i=$(( i + 1\
    \ ))\n    done\n    echo \"${x}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local sorted_list list_with_digits unique_digits new_list\n    local _list_with_digits\n\
    \    list_with_digits=($1)\n    _list_with_digits=$list_with_digits\n    sorted_list=${list_with_digits[@]}\n\
    \    unique_digits=$(echo $sorted_list | tr ' ' '\\n' | sort | uniq | tr '\\n'\
    \ ' ')\n    new_list=${unique_digits[@]}\n    # remove quotes\n    for number\
    \ in ${new_list[@]}; do\n        number=\"$(echo $number | sed 's/\"//g')\"\n\
    \        echo ${number}\n    done\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x\n  x=\"$1\"\n  echo \"${x}\" | awk '{\n        for (i = 1; i <= NF; i++) {\n\
    \            if ($i !~ /^0/) {\n                print $i\n            }\n    \
    \    }\n  }' | sort -n -k 1,1 -k 2,2 -k 3,3 -k 4,4 -k 5,5 -k 6,6 -k 7,7 -k 8,8\
    \ -k 9,9 -k 10,10\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ IFS=\" \"\n  read -a array <<<\"$1\"\n  local sorted_array\n  for element in\
    \ \"${array[@]}\"; do\n    [ \"$element\" != \"${element##* }\" ] \\\n      &&\
    \ [ -n \"${element##* }\" ] \\\n      && [ \"${element##* }\" -eq \"${element##*\
    \ }\" ] \\\n      && ((sorted_array=sorted_array+\" ${element}\") || sorted_array=sorted_array+${element})\n\
    \  done\n  [ -n \"${sorted_array}\" ] \\\n    && echo \"${sorted_array}\" | sort\
    \ -u | tr '[:upper:]' '[:lower:]'\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n\n    echo \"${x}\" | tr \" \" \"\\n\"  | sort | uniq -u  \n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local digits=\"$1\"\n    echo \"$digits\" | tr ' ' '\\n' | sort -r | uniq -u\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ n=$1\n  # If first arg is not a list, treat it as single arg\n  if [[ ! ${n}\
    \ == \"${n#*[ }\" ]] ; then\n    n=\"$(echo \"$n\" | tr '[:digit:]' '[:digit:]')\"\
    \n  fi\n  local result\n  local count\n  local digits\n\n  result=\"()\"\n  count=0\n\
    \  digits=0\n  for i in $(seq $n); do\n    while [[ \"$i\" =~ [^0-9]* ]]; do\n\
    \      # Remove the leading number\n      digits=${i#*[}\n      # Find the first\
    \ even digit\n      count=$((count+digits))\n      ((i++))\n    done\n    if [[\
    \ \"$count\" -eq \"$digits\" ]]; then\n      result+=(\"$i\")\n      count=0\n\
    \      digits=0\n    fi\n  done\n  # If last number is odd, append it to the result\n\
    \  if [[ \"$count\" -eq \"$digits\" ]]; then\n    if [[ \"$i\" =~ [^0-9]* ]];\
    \ then\n      result+=(\"$i\")\n    fi\n  fi\n  echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "seq: extra operand \u20181\u2019\nTry 'seq --help' for more information.\n"
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local digits=$1\n    echo $(($digits|grep -Ev '^0'|sort -n -k1))\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgz3inn2j.sh: line 14: 15 33 1422 1|grep -Ev ''^0''|sort -n -k1:
    syntax error in expression (error token is "33 1422 1|grep -Ev ''^0''|sort -n
    -k1")

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x\n    local y=()\n    local z\n    while read x; do\n        y=(\"${y[@]}\"\
    \ \"$x\")\n    done\n    for z in \"${y[@]}\"; do\n        if [[ \"$z\" =~ [0-9]$\
    \ ]]; then\n            local d=\"${z#*$}\"\n            local a\n           \
    \ if [[ \"$d\" =~ [13579]$ ]]; then\n                a=true\n            else\n\
    \                a=\"false\"\n            fi\n            local j=0\n        \
    \    for (( j=0; j<${#y[@]}; j++ )); do\n                if [[ \"${y[$j]}\" ==\
    \ \"$d\" ]]; then\n                    break\n                fi\n           \
    \ done\n            if [[ \"$j\" -eq 0 ]]; then\n                printf \"\\\"\
    $d\\\"\\n\"\n            fi\n        fi\n    done\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=65 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660057355
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  x=\"\
    $1\"\n\n  x=($x)\n  y=(${x})\n\n  unique_digits=()\n  for ((i=0; i<${#y[@]}; i++));\
    \ do\n    digit=${y[$i]}\n    if [ \"${digit:0:1}\" != \"$digit\" ]; then\n  \
    \    unique_digits+=(\"$digit\")\n    fi\n  done\n  echo \"${unique_digits[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local digits=$1;\n    local digits_count=0;\n    local digits_sorted=();\n\n\
    \    for digits in $digits\n    do\n        digits_count=$((${#digits}+${#digits_sorted[@]}))\n\
    \        digits_sorted=(\"${digits_sorted[@]}\" $digits)\n    done\n    local\
    \ digits_count_tmp=$((${#digits_sorted[@]}-1))\n\n    for ((i=${digits_count_tmp};\
    \ i<${#digits_sorted[@]}; i++ ))\n    do\n        digits_sorted=(\"${digits_sorted[@]}\"\
    \ 0)\n    done\n\n    local digits_unique=()\n    for digits in $digits_sorted\n\
    \    do\n        if ((${#digits} % 2 == 0))\n        then\n            digits_unique=(\"\
    ${digits_unique[@]}\" $digits)\n        fi\n    done\n    echo \"${digits_unique[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=60 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=54 encoding='utf-8'>
  timestamp: 1660057355
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    local res\n    local last\n    local tmp\n    local n\n\
    \    for n in $x; do\n        tmp=\"$(echo $n | awk '{print $1$2}')\"\n      \
    \  if [[ \"$tmp\" =~ ^[0-9][0-9]*$ ]]; then\n            last=\"$tmp\"\n     \
    \   elif [[ \"$tmp\" =~ ^[0-9][0-9]*$ && $last -lt $tmp ]]; then\n           \
    \ last=\"$tmp\"\n        elif [[ \"$tmp\" =~ ^[0-9][0-9]*$ && $last -gt $tmp ]];\
    \ then\n            if ! [[ \" ${res[@]} \" =~ \" $n \" ]]; then\n           \
    \     res=\"$res $n\"\n            fi\n        fi\n    done\n    echo \"$res\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x f\n    x=\"${1// /$1}\"\n    x=\"${x// /}\"\n    x=\"${x// /}\"\n  \
    \  x=\"${x// /}\"\n    x=\"${x// /}\"\n    \n    local j=1\n    local k=2\n  \
    \  local l\n    for ((i=0; i < ${#x}; i++)); do\n        x=\"${x// /}\"\n    \
    \    ((k+=1));\n        ((j+=1));\n        if [[ \"${x}\" != \"${x%?}\" ]]; then\n\
    \            l=$((j*k))\n        fi\n    done\n    echo $l\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ x=\"$1\"\n    local i b\n    \n    # Remove spaces from x\n    x=\"${x// }\"\
    \n    \n    # Remove extra spaces\n    x=\"${x% }\"\n    \n    # Remove leading\
    \ spaces.\n    x=\"${x#* }\"\n    \n    # Remove trailing spaces.\n    x=\"${x%%\
    \ *}\"\n    \n    # Remove duplicates.\n    x=\"${x#?}\"\n    \n    # Remove double\
    \ quotes\n    x=\"${x#\\\"\"\"}\"\n    \n    # Remove leading zeroes\n    x=\"\
    ${x#^0}\"\n    \n    # Remove non-numeric characters and print sorted list.\n\
    \    while IFS= read -r b; do\n        if [[ ! \"$b\" =~ ^[0-9]+$ ]]; then\n \
    \           echo \"$b\"\n        fi\n    done < <(printf \"%s\\n\" \"$x\" | sort\
    \ -nr | sed \"s/^0*//;s/^[^0-9]*\\([0-9][0-9]*\\)$/\\1/\")\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ string=$1 \n  local digits=$(echo $string | awk '{for(i=1;i<=NF;i++) if($i~/\\\
    d/) {print $i}}')\n  echo $string | awk '{for(i=1;i<=NF;i++) {if($i !~ /^'$digits''$/){print\
    \ $i}}}'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmposxogz63.sh: line 15: syntax error near unexpected token `)''

    /tmp/tmposxogz63.sh: line 15: `  echo $string | awk ''{for(i=1;i<=NF;i++) {if($i
    !~ /^''$digits''''$/){print $i}}}''''

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\" y\n    local z\n    if [ -z \"$x\" ] ; then\n        return 0\n\
    \    fi\n    IFS=\"\n\" read -r -a z <<< \"$x\"\n    IFS=\"\n\" read -r -a y <<<\
    \ \"$y\"\n    local a\n    local b\n    local c\n    local d\n    local e\n  \
    \  local f\n    local g\n    local h\n    for ((i = 0; i < ${#z[@]}; i++)); do\n\
    \        ((a++))\n        b=${z[i]}\n        if [[ \"$b\" == [0-9][0-9]* ]]; then\n\
    \            c=${b%??}\n            d=${b#$c}\n            if [[ \"$c\" == [0-9][0-9]*\
    \ ]]; then\n                g=\"${d#$c}\"\n                echo -n \"$g,\"\n \
    \           elif [[ \"$d\" == [0-9][0-9]* ]]; then\n                g=\"${d#$c}\"\
    \n                echo -n \"$g,\"\n            else\n                h=\"${d#$c}\"\
    \n                echo -n \"$h,\"\n            fi\n        else\n            if\
    \ [[ \"$b\" == [0-9][0-9]* ]]; then\n                g=\"$b\"\n              \
    \  echo -n \"$g,\"\n            else\n                h=\"$b\"\n             \
    \   echo -n \"$h,\"\n            fi\n        fi\n    done\n    IFS=,\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    if [ -z \"$x\" ] ; then\n        echo \"$x: Empty input\"\
    \ >&2\n        return 1\n    fi\n    local n=0\n    for i in $(echo \"$x\" | tr\
    \ \" \" \"\\n\" | sort | uniq | tr \"\\n\" \" \") ; do\n        case \"$i\" in\n\
    \            *\"#\"* ) continue ;;\n            *) (( n++ )) ; done\n    if [\
    \ $n -gt 0 ] ; then \n        echo \"$x\"\n    else\n        echo \"$x\"\n   \
    \ fi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyj2sll_a.sh: line 22: syntax error near unexpected token `done''

    /tmp/tmpyj2sll_a.sh: line 22: `            *) (( n++ )) ; done''

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \     local digits=\"\"\n        local x=\"${1:-}\"\n        local count\n   \
    \     while IFS= read -r x; do\n                digits+=\"\\\"$x\\\"\"\n     \
    \   done\n\n        IFS=' ' read -ra arr <<< \"$digits\"\n\n        # Store the\
    \ unique digits into a list\n        # ${#arr[@]} is the number of elements in\
    \ arr\n        unique_digits_list=()\n        unique_digits_list=( \"${arr[@]}\"\
    \ )\n        unique_digits_list=( \"${unique_digits_list[@]}\" )\n        unique_digits_list=(\
    \ \"${unique_digits_list[@]}\" )\n        unique_digits_list=( \"${unique_digits_list[@]}\"\
    \ )\n\n        # Sort the unique digits array\n        unique_digits_list=($(sort\
    \ <<<\"${unique_digits_list[@]}\"))\n\n        # Now convert it to a string\n\
    \        unique_digits_string=\"$(IFS=' ' read -ra arr <<< \"${unique_digits_list[*]}\"\
    )\"\n        unique_digits_string=\"${unique_digits_string[*]}\"\n        unique_digits_string=\"\
    ${unique_digits_string//\\\"/}\"\n\n        echo \"$unique_digits_string\"\n}\n\
    \ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=29 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=16 encoding='utf-8'>
  timestamp: 1660057355
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\" awk '{for (i=1; i<=NF; i++) \n                             {\
    \ if ($i%2==0) print $i }}' <<< \"$x\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "/tmp/tmp0f_a18tr.sh: line 13: local: `{for (i=1; i<=NF; i++) \n       \
    \                      { if ($i%2==0) print $i }}': not a valid identifier\n"
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    local output\n    local i\n    local found\n    # Loop over\
    \ each digit\n    for (( i=0; i < ${#x}; i++ )); do\n        found=false\n   \
    \     local j\n        # Loop over each digit in each index\n        for (( j=0;\
    \ j < ${#x}; j++ )); do\n            # Check if the current digit and the previous\
    \ one are even digits\n            if (( ${x[i]} == ${x[j]} && ( ${x[i]} % 2 ==\
    \ 0 ) )) ; then\n                found=true\n                break\n         \
    \   fi\n        done\n        # Skip this index if it hasn't any even digit\n\
    \        if ${found} ; then\n            continue\n        fi\n        # Append\
    \ the index to the output list\n        output=\"$output $i\"\n    done\n    echo\
    \ \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy11bq6f0.sh: line 24: ((: 15 33 1422 1 == 15 33 1422 1 && ( 15
    33 1422 1 % 2 == 0 ) : syntax error in expression (error token is "33 1422 1 ==
    15 33 1422 1 && ( 15 33 1422 1 % 2 == 0 ) ")

    /tmp/tmpy11bq6f0.sh: line 24: ((: 15 33 1422 1 ==  && ( 15 33 1422 1 % 2 == 0
    ) : syntax error in expression (error token is "33 1422 1 ==  && ( 15 33 1422
    1 % 2 == 0 ) ")

    /tmp/tmpy11bq6f0.sh: line 24: ((: 15 33 1422 1 ==  && ( 15 33 1422 1 % 2 == 0
    ) : syntax error in expression (error token is "33 1422 1 ==  && ( 15 33 1422
    1 % 2 == 0 ) ")

    /tmp/tmpy11bq6f0.sh: line 24: ((: 15 33 1422 1 ==  && ( 15 33 1422 1 % 2 == 0
    ) : syntax error in expression (error token is "33 1422 1 ==  && ( 15 33 1422
    1 % 2 == 0 ) ")

    /tmp/tmpy11bq6f0.sh: line 24: ((: 15 33 1422 1 ==  && ( 15 33 1422 1 % 2 == 0
    ) : syntax error in expression (error token is "33 1422 1 ==  && ( 15 33 1422
    1 % 2 == 0 ) ")

    /tmp/tmpy11bq6f0.sh: line 24: ((: 15 33 1422 1 ==  && ( 15 33 1422 1 % 2 == 0
    ) : syntax error in expression (error token is "33 1422 1 ==  && ( 15 33 1422
    1 % 2 == 0 ) ")

    /tmp/tmpy11bq6f0.sh: line 24: ((: 15 33 1422 1 ==  && ( 15 33 1422 1 % 2 == 0
    ) : syntax error in expression (error token is "33 1422 1 ==  && ( 15 33 1422
    1 % 2 == 0 ) ")

    /tmp/tmpy11bq6f0.sh: line 24: ((: 15 33 1422 1 ==  && ( 15 33 1422 1 % 2 == 0
    ) : syntax error in expression (error token is "33 1422 1 ==  && ( 15 33 1422
    1 % 2 == 0 ) ")

    /tmp/tmpy11bq6f0.sh: line 24: ((: 15 33 1422 1 ==  && ( 15 33 1422 1 % 2 == 0
    ) : syntax error in expression (error token is "33 1422 1 ==  && ( 15 33 1422
    1 % 2 == 0 ) ")

    /tmp/tmpy11bq6f0.sh: line 24: ((: 15 33 1422 1 ==  && ( 15 33 1422 1 % 2 == 0
    ) : syntax error in expression (error token is "33 1422 1 ==  && ( 15 33 1422
    1 % 2 == 0 ) ")

    /tmp/tmpy11bq6f0.sh: line 24: ((: 15 33 1422 1 ==  && ( 15 33 1422 1 % 2 == 0
    ) : syntax error in expression (error token is "33 1422 1 ==  && ( 15 33 1422
    1 % 2 == 0 ) ")

    /tmp/tmpy11bq6f0.sh: line 24: ((: 15 33 1422 1 ==  && ( 15 33 1422 1 % 2 == 0
    ) : syntax error in expression (error token is "33 142'
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local arr=$1\n    local arr1\n    local x\n    local i\n    for x in $arr; do\n\
    \        if [[ $x =~ [0-9]+ ]]; then\n            arr1=$(echo $x | sed 's/\\([0-9]\\\
    )$/\\1/')\n            if [[ ! ${arr1[*]} =~ [0-9]\\* ]]; then\n             \
    \   arr1=$(echo $x | sed 's/[0-9]*$//')\n                if [[ ${arr1} =~ [0-9]+\
    \ ]]; then\n                    arr1=$(echo $arr1 | sed 's/\\(.*\\)[0-9]\\+/\\\
    1/')\n                    if [[ ${arr1} =~ [0-9]\\+ ]]; then\n               \
    \         arr1=$(echo $arr1 | sed 's/[0-9]*$//')\n                        if [[\
    \ ! ${arr1[*]} =~ [0-9]\\* ]]; then\n                            arr1=${arr1}\n\
    \                        fi\n                    fi\n                fi\n    \
    \        fi\n        fi\n        if [[ $arr1 == [0-9]\\* ]]; then\n          \
    \  arr1=$(echo $arr1 | sed 's/[0-9]*$//')\n            if [[ ! ${arr1[*]} =~ [0-9]\\\
    * ]]; then\n                arr1=${arr1}\n            fi\n        fi\n       \
    \ arr1=\"${arr1}\"\n        arr=$(echo $arr | sed \"s/$arr1/\\e[0m\\e[0;31m\\\
    e[1m$arr1\\e[0m\\e[0;33m\\e[1;30m/g\")\n    done\n    echo $arr\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ awk '{print $1}' $1\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: fatal: cannot open file `15'' for reading (No such file or directory)

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"${1//[!0-9]/}\"\n    sort -n -k 1 <<< \"$x\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ l=$1 \n  local l2=${l//[[:blank:]]/}\n  local l3=${l2//[^[:digit:]]/}\n  local\
    \ l4=( ${l3//[^[:digit:]]/} )\n  local l5=${l4//[[:digit:]]/}\n  local l6=${l5//[^[:digit:]]/}\n\
    \  local l7=${l6//[[:digit:]]/}\n  local l8=( ${l7//[^[:digit:]]/} )\n  local\
    \ l9=${l8//[[:digit:]]/}\n  local l10=${l9//[^[:digit:]]/}\n  local l11=${l10//[[:digit:]]/}\n\
    \  local l12=( ${l11//[^[:digit:]]/} )\n  local l13=${l12//[[:digit:]]/}\n  local\
    \ l14=${l13//[^[:digit:]]/}\n  local l15=${l14//[[:digit:]]/}\n  local l16=${l15//[^[:digit:]]/}\n\
    \  local l17=${l16//[[:digit:]]/}\n  local l18=( ${l17//[^[:digit:]]/} )\n  local\
    \ l19=${l18//[[:digit:]]/}\n  local l20=${l19//[^[:digit:]]/}\n  local l21=${l20//[[:digit:]]/}\n\
    \  local l22=( ${l21//[^[:digit:]]/} )\n  local l23=${l22//[[:digit:]]/}\n  local\
    \ l24=${l23//[^[:digit:]]/}\n  local l25=${l24//[[:digit:]]/}\n  local l26=${l25//[^[:digit:]]/}\n\
    \  local l27=${l26//[[:digit:]]/}\n  local l28=( ${l27//[^[:digit:]]/} )\n  local\
    \ l29=${l28//[[:digit:]]/}\n  local l30=${l29//[^[:digit:]]/}\n  local l31=${l30//[[:digit:]]/}\n\
    \  local l32=( ${l31//[^[:digit:]]/\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr3mblctt.sh: line 47: syntax error near unexpected token `(''

    /tmp/tmpr3mblctt.sh: line 47: `candidate() {''

    /tmp/tmpr3mblctt.sh: line 48: unique_digits: command not found

    /tmp/tmpr3mblctt.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmpr3mblctt.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ xs digits unique_digits\n  IFS=$'\\n' xs=($(echo \"$1\")); unique_digits=()\n\
    \  for (( i=0; i < ${#xs[@]}; i++ )); do\n    digits=$(echo \"${xs[i]}\" | awk\
    \ '{ print $0 }')\n    if [ -z ${unique_digits[*]} ]; then\n      unique_digits+=(\"\
    ${digits}\")\n    elif [[ $(echo \"${unique_digits[*]} ${digits}\" | sort -u |\
    \ wc -l) -eq 1 ]]; then\n      unique_digits+=(\"${digits}\")\n    fi\n  done\n\
    \  echo \"${unique_digits[*]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=\"$1\"\n  local output\n  local i\n  local found\n\n  for (( i=1; i<${#x};\
    \ i++ )); do\n    found=0\n    local val=${x:$i:1}\n    while [[ ${#val}%2 ==\
    \ 0 ]]; do\n      found=1\n      val=\"${val//[^0-9]}\"\n    done\n    if [[ $found\
    \ -eq 1 ]]; then\n      output=\"$output '$val'\"\n    fi\n  done\n  sort -u <<<\
    \ \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local num_str=$1\n    local num_arr=( $(echo $num_str | sed 's/ /\" \"/g') )\n\
    \    local num_len=${#num_arr[*]}\n    local i=0\n    local num_count=0\n\n  \
    \  while [ $i -lt $num_len ]; do\n        if [ $(( num_arr[$i] % 2 )) == 0 ];\
    \ then\n            num_count=$(($num_count+1))\n        fi\n        i=$((i+1))\n\
    \    done\n\n    if [ $num_count -eq 0 ]; then\n        echo \"[]\"\n    else\n\
    \        echo \"$(IFS=,; echo \"${num_arr[*]}\")\"\n    fi\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm9xga1qz.sh: line 20: 15": syntax error: invalid arithmetic operator
    (error token is """)

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ list_int=\"${1}\"\n\tlist_int=\"$(echo -e \"${list_int}\" | tr -s ' ')\"\n\t\
    unique_digits=\"$(echo -e \"${list_int}\" | sed 's/ .*//' | sort -u | sed 's/\
    \ *$//')\"\n\techo -e \"${unique_digits}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x\n  local ret=0\n  \n  for x; do\n    echo $x | grep -o '\\<\\(\\<\\).*\\>\\\
    >'\n    if [[ $? -eq 0 ]]; then\n      ret=$((ret+1))\n    fi\n  done\n  \n  if\
    \ [ $ret -eq 0 ]; then\n    return 0\n  else\n    echo $ret\n  fi\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ digits=$1\n  local sorted=$(sort -n <<< \"${digits}\")\n  local non_digits=()\n\
    \  for idx in $( seq 0 $(( $#sorted - 1 ))); do\n    local elem=${sorted[$idx]}\n\
    \    local digit=${elem:0:1}\n    [[ ${digit} != [0-9 ] ]] || continue\n    non_digits+=(\"\
    ${elem}\")\n  done\n  printf '%s\\n' \"${non_digits[@]}\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5qr_icnl.sh: line 19: syntax error in conditional expression

    /tmp/tmp5qr_icnl.sh: line 19: syntax error near `]''

    /tmp/tmp5qr_icnl.sh: line 19: `    [[ ${digit} != [0-9 ] ]] || continue''

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local list=$(echo $1 | sed 's/ /\\n/g');\n    local unique=();\n    for n in\
    \ ${list}; do\n        [[ ${unique[$n]} == 1 ]] && continue\n        [[ $(echo\
    \ \"${list} | grep ${n}\" | wc -l) -eq 0 ]] && unique[$n]=\"$n\"\n    done\n \
    \   echo $(echo \"${unique[*]}\" | sed 's/\"//g;s/ //g;s/^/\"/;s/$/\"/')\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=\"$1\"\n  local i\n\n  x=( $x )\n\n  for i in \"${x[@]}\"; do\n    while ((\
    \ ${#i} > 0 )); do\n      [ ${i:0:1} -eq 0 ] && break\n      i=${i%?}\n    done\n\
    \    [[ $i ]] && printf '%s\\n' \"$i\"\n  done\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x xs output\n    x=$(echo \"$1\" | sed 's/ //g')\n    xs=$(echo \"$x\"\
    \ | tr ' ' ',')\n    for x in $xs; do\n        output=$(echo \"$x\" | sed 's/[0-9]*$//g')\n\
    \        echo \"$output\"\n    done\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ IFS=$'\\n' read -a x <<< \"$1\"\n\n    local i j x y result\n    for ((i=0;\
    \ i<${#x[@]}; i++)); do\n        j=i\n        while ((j<${#x[@]}) && ($((${x[j]}%2))\
    \ != 0)); do\n            j=$((j+1))\n        done\n        if ((j != i)); then\n\
    \            result=\"${x[i]}\"\n            for ((j=i+1; j<${#x[@]}; j++)); do\n\
    \                x=( \"${x[@]:j:1}\" )\n            done\n            ((i--))\n\
    \        fi\n    done\n\n    echo \"${result}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ line\n\tlocal num_list\n\tlocal result_list\n\tlocal num_sum\n\tlocal num_count\n\
    \tlocal num_sum_tmp\n\n\tnum_list=$1\n\tnum_sum_tmp=0\n\tnum_count=1\n\tresult_list=$(echo\
    \ \"$num_list\" | sed 's/[^0-9]//g')\n\n\tfor line in $(echo \"$num_list\" | sed\
    \ 's/ //g'); do\n\t\tnum_sum_tmp=$((num_sum_tmp + $line));\n\tdone\n\n\twhile\
    \ [[ $num_sum_tmp -ne 0 ]]; do\n\t\tif ((num_count % 2 == 0)); then\n\t\t\tresult_list=\"\
    $line \"\n\t\t\tnum_count=$((num_count + 1));\n\t\telse\n\t\t\tnum_sum=$num_sum_tmp\n\
    \t\t\tnum_sum_tmp=0\n\t\tfi\n\tdone\n\n\techo \"$result_list\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x\n    local output\n\n    x=$1\n    output=()\n    for (( i=0; i<${#x};\
    \ i++ )); do\n        digit=${x:$i:1}\n        if (( ${#digit} == 2 )); then\n\
    \            if (( $( echo $digit | tr \" \" \"\\n\" | grep -c \"[0-9]\" ) ==\
    \ 0 ))\n            then\n                output+=(\"\\\"${digit}\\\"\")\n   \
    \         fi\n        fi\n    done\n\n    # sort the output in ascending order\n\
    \    sort -n ${output[@]}\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=55 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=4 encoding='utf-8'>
  timestamp: 1660057355
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    local IFS=' ' x=($x) # IFS=$'\\n'\n    local -n array=unique_digits\
    \ # declare -n array=unique_digits\n    for y in \"${array[@]}\"; do # $y is an\
    \ array element.\n        local z=\"$y\"\n        local n=0\n        while [[\
    \ $z /= [0-9] ]]; do # $z has digit.\n            ((n+=1))\n            z=\"$((z%10))\"\
    \n        done\n        if [[ $n -eq 0 ]]; then # $z is not even-numbered.\n \
    \           echo \"$z\"\n        fi\n    done\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps1wrj8s2.sh: line 19: conditional binary operator expected

    /tmp/tmps1wrj8s2.sh: line 19: syntax error near `/=''

    /tmp/tmps1wrj8s2.sh: line 19: `        while [[ $z /= [0-9] ]]; do # $z has digit.''

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x\n    local ret\n    IFS=$'\\n' x=\"$1\"\n    local tmp\n\n    for ((\
    \ i=0; i < ${#x}; i++ ))\n    do\n        tmp=${x:$i:1}\n        [ -z \"${tmp##[!0-9]}\"\
    \ ] && ret=\"$ret$tmp\"\n    done\n\n    IFS=$' \\n' echo \"$ret\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=\"$1\"\n  local d\n  \n  # remove space\n  x=\"$(echo \"$x\" | sed -e 's/^\
    \ *//' -e 's/ *$//')\"\n  \n  # generate an array\n  IFS=\"[0-9]\" read -d ''\
    \ -a arr <<< \"$x\"\n  \n  # sort array\n  IFS=: -d <<< \"$(sort <<<\"${arr[*]}\"\
    \ | tr '[:upper:]' '[:lower:]')\"\n\n  # remove elements that have at least one\
    \ digit\n  for i in \"${arr[@]}\"; do\n    if [ \"$i\" = \"$(echo \"$i\" | sed\
    \ -e 's/^ *//' -e 's/ *$//')\" ]; then\n      arr[i]=\"\"\n    fi\n  done\n\n\
    \  # trim whitespace\n  local i\n  for i in \"${arr[@]}\"; do\n    if [ -z \"\
    $i\" ]; then\n      arr[i]=\"\"\n    fi\n  done\n\n  # convert array to string\n\
    \  x=\"${arr[*]}\"\n\n  # sort array\n  IFS=: -d <<< \"$(sort <<<\"${arr[*]}\"\
    \ | tr '[:upper:]' '[:lower:]')\"\n\n  # remove elements that have no digit\n\
    \  for i in \"${arr[@]}\"; do\n    if [ \"$i\" = \"$(echo \"$i\" | sed -e 's/^\
    \ *//' -e 's/ *$//')\" ]; then\n      arr[i]=\"\"\n    fi\n  done\n\n  # convert\
    \ array to string\n  x=\"${arr[*]}\"\n\n  # remove elements that have no digit\n\
    \  for i in \"${arr[@]}\"; do\n    if [ \"$i\" = \"$(echo \"$i\" | sed -e 's/^\
    \ *//' -e 's/ *$//')\" ]; then\n      arr[i]=\"\"\n    fi\n  done\n\n  # convert\
    \ array to string\n  x=\"${arr[*]}\"\n\n  # remove elements that have no digit\n\
    \  for i in \"${arr[@]}\"; do\n    if [ \"$i\" = \"$(echo \"$i\" | sed -e 's/^\
    \ *//' -e 's/ *$//')\" ]; then\n      arr[i]=\"\"\n    fi\n  done\n\n  # convert\
    \ array to string\n  x=\"${arr[*]}\"\n\n  # remove elements that have no digit\n\
    \  for i in \"${arr[@]}\"; do\n    if [ \"$i\" = \"$(echo \"$i\" | sed -e 's/^\
    \ *//' -e 's/ *$//')\" ]; then\n      arr[i]=\"\"\n    fi\n  done\n\n  # convert\
    \ array to string\n  x=\"${arr[*]}\"\n\n\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3wgshfbc.sh: line 23: -d: command not found

    /tmp/tmp3wgshfbc.sh: line 44: -d: command not found

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local tmp=()\n    local x d\n    for x in \"${@}\"; do\n        d=$(xargs -I\
    \ {} sh -c 'echo {} | grep -E -o \"^[^0-9]\\+\"' -- \"$x\")\n        d=\"${d//[!0-9]}\"\
    \n        tmp+=(\"$d\")\n    done\n    echo \"${tmp[@]}\" | sort -u\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=38 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=14 encoding='utf-8'>
  timestamp: 1660057355
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local number=$1\n    local output\n    local i\n    local digits\n    local\
    \ found\n\n    output=()\n    digits=$(echo $number | sed \"s/ //g\")\n    for\
    \ ((i=0;i<${#digits}+1;i++)); do\n        found=0\n        for ((j=0;j<${#digits}-i+1;j++));\
    \ do\n            if [[ ${digits:j:1} = 0 ]]; then\n                found=1\n\
    \                break\n            fi\n        done\n        if [ ${found} -eq\
    \ 0 ]; then\n            output+=( $(echo \"${digits:i:1}\") )\n        fi\n \
    \   done\n    # output+=$number\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    local z\n    local ret\n\n    local first\n    local last\n\
    \n    # Sort first\n    local sorted_x\n    sorted_x=( $(echo \"${x}\" | tr '\
    \ ' '\\n' | sort -n | sed -E 's/^\\s*[[:digit:]]+\\s*/\"&\"/g') )\n\n    # Find\
    \ first and last occurrences\n    first=${sorted_x[0]}\n    last=${sorted_x[-1]}\n\
    \    ret=( $(echo \"${sorted_x}\" | sed -E 's/^.*[[:digit:]]\\([0-9][0-9]*\\)$/\\\
    1/') )\n\n    # Iterate through rest\n    for (( i=1; i<=${#sorted_x[@]}; i++\
    \ )); do\n        if [ ${sorted_x[i]} != ${first} ]; then\n            if [ -z\
    \ \"${sorted_x[i - 1]}\" ]; then\n                ret+=(${sorted_x[i]})\n    \
    \        else\n                ret+=(${sorted_x[i - 1]} ${sorted_x[i]})\n    \
    \        fi\n        fi\n    done\n\n    # Sort returned list\n    local sorted\n\
    \    sorted=( $(printf \"%s\\n\" \"${ret[@]}\" | sort -n | sed -E 's/^\\s*[[:digit:]]+\\\
    s*/\"&\"/g') )\n\n    # Remove duplicate entries.\n    local last\n    last=${sorted[-1]}\n\
    \    local i\n    for i in $(seq 0 ${#sorted[@]}); do\n        if [ \"${sorted[i]}\"\
    \ != \"${last}\" ]; then\n            sorted+=(${sorted[i]})\n        fi\n   \
    \ done\n\n    # Remove quotes\n    sorted=$(IFS=' '; echo \"${sorted[*]}\")\n\n\
    \    echo \"${sorted[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 36: invalid reference \1 on `s'' command''s
    RHS

    /tmp/tmp199zaanz.sh: line 31: [: !=: unary operator expected

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local numbers=$1\n    local result\n    \n    for number in $numbers; do\n \
    \       if [[ $number =~ ^[0-9]+$ ]]; then\n            if (( $number % 2 ));\
    \ then\n                number=$(( $number / 2 ))\n                \n        \
    \        if [[ -z ${result[$number]} ]]; then\n                    result[$number]=${numbers[@]}\n\
    \                else\n                    result[$number]=${result[$number]}\"\
    \ \"${numbers[@]}\n                fi\n            else\n                number=$((\
    \ $number * 10 ))\n                \n                if [[ -z ${result[$number]}\
    \ ]]; then\n                    result[$number]=${numbers[@]}\n              \
    \  else\n                    result[$number]=${result[$number]}\" \"${numbers[@]}\n\
    \                fi\n            fi\n        fi\n    done\n    \n    sorted_result=()\n\
    \    for number in \"${!result[@]}\"; do\n        sorted_result+=(\"${result[$number]}\"\
    )\n    done\n    \n    echo ${sorted_result[@]}\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ digits=$1\n\tlocal output\n\tlocal i\n\n\tfor i in $digits; do\n\t\tlocal test=$(echo\
    \ $i | sed 's/[^0-9]//g')\n\n\t\tif [[ \"$test\" == 0 ]]; then\n\t\t\toutput+=\"\
    $i\"\n\t\tfi\n\tdone\n\n\techo $output\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    local out\n    local i\n    out=( )\n    \n    for x in\
    \ $x; do\n        i=$(( $x / 10 ))\n        if [ \"$i\" -gt 0 ]; then\n      \
    \      if [ \"$i\" -eq 0 ]; then\n                out=( \"${out[@]}\" \"$x\" )\n\
    \            else\n                out=( \"${out[@]}\" \"$i\" )\n            fi\n\
    \        fi\n        shift\n    done\n    \n    for x in $x; do\n        i=$((\
    \ $x % 10 ))\n        if [ \"$i\" -ne 0 ]; then\n            if [ \"$i\" -eq 0\
    \ ]; then\n                out=( \"${out[@]}\" \"$x\" )\n            else\n  \
    \              out=( \"${out[@]}\" \"$i\" )\n            fi\n        fi\n    \
    \    shift\n    done\n    \n    IFS=\" \"\n    echo \"${out[@]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x\n    x=$1\n    shift\n    IFS=' ' read -ra y <<< \"$x\"\n    local -n\
    \ array=( )\n    for x in \"${y[@]}\"; do\n        [[ \"$x\" =~ ^[0-6]$ ]] &&\
    \ array+=( \"${x}\" )\n    done\n    sort <<<\"${array[@]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpob_righp.sh: line 17: local: array: reference variable cannot be
    an array

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x tmp\n    local -i count j\n    \n    x=\"${1}\"\n    \n    count=0\n\
    \    \n    while (( count<${#x} ));\n    do\n        tmp=\"${x}\"\n        \n\
    \        j=0\n        while (( ${#tmp}==0 ));\n        do\n            tmp=\"\
    ${tmp} ${x}\"\n            (( j++ ))\n        done\n        \n        tmp=${tmp%\
    \ $j}\n        tmp=${tmp//$count}\n        \n        (( count++ ))\n        \n\
    \        printf -v tmp \"%q\" \"$tmp\"\n        \n        echo \"$tmp\"\n    done\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local str=\"$1\";\n    local result=\"\";\n    local digits=${str:(-1)};\n \
    \   local count=\"${#digits}\";\n\n    # skip leading space\n    read -ra arr\
    \ <<< ${digits};\n    while [ \"${#arr[@]}\" -gt 0 ]; do\n        if [ ${arr[0]}\
    \ -eq 0 ]; then arr=( \"${arr[@]:1}\" ); fi\n        result+=\"\\\"${arr[0]}\\\
    \" \";\n        arr=( \"${arr[@]:1}\" ); \n        ((count--)); \n    done;\n\
    \    echo \"$result\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tx=$1\n\
    \techo \"$x\" | tr '[:digit:]' '[:digit:]' '[:lower:]' | sort | uniq -d | sed\
    \ 's/[0-9]//g'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "tr: extra operand \u2018[:lower:]\u2019\nTry 'tr --help' for more information.\n"
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ x=$1\n    y=()\n    for i in $x; do\n        y=(\"$y\" $i)\n    done\n    y=(\
    \ \"${y[@]}\" )\n    y=( \"${y[@]##-}\" )\n    y=( \"${y[@]##+}\" )\n    y=( \"\
    ${y[@]##0,}\" )\n    y=( \"${y[@]##,}\" )\n    y=( \"${y[@]##/}\" )\n    y=( \"\
    ${y[@]##\\}\" )\n    y=( \"${y[@]##,}\" )\n    y=( \"${y[@]##-}\" )\n    y=( \"\
    ${y[@]##.}\" )\n    y=( \"${y[@]##,}\" )\n    y=( \"${y[@]##-}\" )\n    y=( \"\
    ${y[@]##,}\" )\n    y=( \"${y[@]##-}\" )\n    y=( \"${y[@]##,}\" )\n    y=( \"\
    ${y[@]##-}\" )\n    y=( \"${y[@]##,}\" )\n    y=( \"${y[@]##-}\" )\n    y=( \"\
    ${y[@]##,}\" )\n    y=( \"${y[@]##-}\" )\n    y=( \"${y[@]##,}\" )\n    y=( \"\
    ${y[@]##-}\" )\n    y=( \"${y[@]##,}\" )\n    y=( \"${y[@]##-}\" )\n    y=( \"\
    ${y[@]##,}\" )\n    y=( \"${y[@]##-}\" )\n    y=( \"${y[@]##,}\" )\n    y=( \"\
    ${y[@]##-}\" )\n    y=( \"${y[@]##,}\" )\n    y=( \"${y[@]##-}\" )\n    y=( \"\
    ${y[@]##,}\" )\n    y=( \"${y[@]##-}\" )\n    y=( \"${y[@]##,}\" )\n    y=( \"\
    ${y[@]##-}\" )\n    y=( \"${y[@]##,}\" )\n    y=( \"${y[@]##-}\" )\n    y=( \"\
    ${y[@]##,}\" )\n    y=( \"${y[@]##-}\" )\n    y=( \"${y[@]##,}\" )\n    y=( \"\
    ${y[@]##-}\" )\n    y=( \"${y[@]##\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwqzm37am.sh: line 70: unexpected EOF while looking for matching
    `"''

    /tmp/tmpwqzm37am.sh: line 74: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  #\
    \ Convert to array\n  mapfile -t input < <(echo $1 |tr \" \" \"\\n\")\n\n  # Sort\
    \ the array\n  mapfile -t input < <(sort -n <<< \"${input[*]}\")\n\n  # Filter\
    \ out all odd values\n  output=($(IFS=$'\\n'; echo \"${input[@]}\" | grep -v '^[0-9]$'))\n\
    \n  echo ${output[*]}\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=\"$1\"\n  local res\n  local digit\n\n  res=()\n  for digits in $x; do\n \
    \   if ! echo $digits | grep -E '^[0-9]*$' >/dev/null; then\n      res=( \"${res[@]}\"\
    \ \"$digits\" )\n    fi\n  done\n\n  printf '%s\\n' \"${res[@]}\" | sort -n\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local input\n    local output\n    local x\n    local length\n    local i\n\
    \    local j\n    local result\n\n    input=$1\n    length=${#input}\n    x=()\n\
    \    for (( i = 0; i < length; i++ )); do\n        x[$i]=${input$i:i:1}\n    done\n\
    \    y=()\n    for (( j = 0; j < length; j++ )); do\n        y=${x}\n        for\
    \ i in \"${!x}\"; do\n            [[ (${y} == ${x#$i}) && (!${x#$i}) ]] && y=${x#$i}\n\
    \        done\n        result+=(\"${y}\")\n    done\n    echo ${result[@]}\n}\n\
    \ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjp39wd5z.sh: line 25: ${input$i:i:1}: bad substitution

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  echo\
    \ \"$1\" | tr ' ' '+' | sort -u | tr ' ' '+'\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local list=$1\n    local res\n    local i\n    local cnt\n\n    # remove all\
    \ non-digits\n    list=$(echo $list | tr ' ' ' ')\n\n    # remove all empty strings\n\
    \    list=$(echo $list | tr ' ' ' ')\n    list=$(echo $list | tr '\\n' ' ')\n\n\
    \    # remove all duplicates\n    list=$(echo $list | tr ' ' ' ')\n    list=$(echo\
    \ $list | tr ' ' '')\n    list=\"$list\"\n\n    cnt=$(echo $list | wc -l)\n  \
    \  for ((i = 1; i <= $cnt; i=i+1)); do\n        res=`echo $list | sed \"s/^$i\
    \ //g\"`\n        if [[ -z $res ]]; then\n            res=''\n        fi\n   \
    \     if [[ -z $res ]]; then\n            break\n        fi\n    done\n    echo\
    \ $res\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'tr: when not truncating set1, string2 must be non-empty

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x tmp out\n    IFS=' ' read -r -a x <<< \"$1\"\n    out=()\n    for xx\
    \ in \"${x[@]}\"; do\n        tmp=()\n        for x in \"${xx[@]}\"; do\n    \
    \        tmp+=(\"$x\")\n        done\n        if [[ ${#tmp[@]} = 0 ]]; then\n\
    \            out+=(\"$xx\")\n        fi\n    done\n    sort -u <<< \"${out[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=\"$1\"\n  shift\n  local i=0\n  \n  while [ $x ]; do\n    (( i++ ))\n    local\
    \ y=\"${x:$i:1}\"\n    x=\"${x:$(($i - 1))}\"\n    if [[ \"$y\" =~ [0-9] ]]; then\n\
    \      echo \"$y\"\n    fi\n  done\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9m58lfln.sh: line 17: [: too many arguments

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x i=0 ret=()\n    for x in $*; do\n        if [ -z \"$x\" ]; then continue;\
    \ fi\n        if [ $x -eq 0 ]; then\n            continue\n        fi\n      \
    \  if [ $x -lt 10 ]; then\n            x=$((10#$x))\n            i=$(( $i + 1\
    \ ))\n        else\n            i=$(($i - 1 ))\n        fi\n        ret[$i]=\"\
    $x\"\n    done\n    sort -u <<< \"${ret[*]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpikucdeq5.sh: line 25: ret[$i]: bad array subscript

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=\"${1:?No integers specified}\"\n  echo \"${x// / }\" \"${x// /| }\" \"${x//\
    \ /| }\" | sort -n\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ x\n\tx=\"$1\"\n\tx=\"$x\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"\
    ${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\
    \n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\
    \n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\
    \n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\
    \n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\
    \n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\
    \n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\
    \n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\
    \n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\
    \n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\
    \n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx=\"${x//[!0-9]}\"\n\tx\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp00avbgx1.sh: line 61: x: command not found

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local str=$1\n    local list\n    local res\n    list=$(echo $str | tr \" \"\
    \ \"\\n\")\n    # res is space-separated list\n    res=\"\"\n    for elem in $list;\
    \ do\n        # elem is string\n        # elem[0] contains digit\n        # elem[1]\
    \ contains digit\n        if [ $elem[0] == $elem[1] ]; then\n            res=\"\
    $res \\\"$elem\\\" \"\n        fi\n    done\n    echo $res\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x\n  x=\"${1}\"\n  local count=0\n  for x in $x; do\n    local digit=${x//./}\n\
    \    if [ \"$digit\" != $(( 10#$digit )) ]; then \n      ((count++))\n    fi\n\
    \  done\n  if [ \"$count\" -eq 0 ]; then \n    return 0\n  else\n    if [ \"$count\"\
    \ -eq 1 ]; then \n      return $1\n    else\n      local temp\n      for x in\
    \ $x; do\n        local digit=${x//./}\n        if [ \"$digit\" != $(( 10#$digit\
    \ )) ]; then \n          break\n        fi\n      done\n      temp=\"${x%${x%%[!0-9]}}\"\
    \n      if [ \"$temp\" != \"\" ]; then \n        echo \"${temp}\"\n      fi\n\
    \    fi\n  fi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\techo\
    \ \"$1\" | tr ' ' ',' | sort | uniq -c | sort -n\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=\"$1\"\n  for x in ${x//[0-9]/ }; do \n    [[ \"$x\" =~ ^\\([0-9]\\).*\\1$\
    \     ]] || echo -n \"$x\"; \n  done\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=($@);\n  local n=$#;\n  local temp;\n\n  for i in $(seq 0 $((n-1)));\n  do\n\
    \    temp=\"$(expr $temp+1 \\* $n )\"\n    if [ $(expr \\( ${x[$i]} \\) % 2 \\\
    ) -gt 0 ]\n    then\n      temp=\"${x[$i]}${temp}\"\n    fi\n  done\n  temp=\"\
    ${x[$n]}\"\n  printf \"%s\\n\" \"${temp}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwxbmlbmi.sh: line 20: unexpected EOF while looking for matching
    `)''

    /tmp/tmpwxbmlbmi.sh: line 42: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local digits_set=$1\n    local digits_array=()\n    local digits=()\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local len=${#digits_set}\n    local digit\n\
    \    local digits_array_len=${#digits_array[@]}\n    local temp_array=()\n\n \
    \   IFS=$'\\n'\n\n    while [[ $i -lt $len ]]; do\n        digit=${digits_set[$i]}\n\
    \        (( j+=digit ))\n        digits_array+=( \"$j\" )\n        if [[ $j -eq\
    \ 0 ]]; then\n            (( i++))\n            j=0\n        fi\n    done\n\n\
    \    for (( i=$i; $i -lt $len; i++ )); do\n        (( k+=digits_array[$i] ))\n\
    \        if [[ $k -lt 10 ]]; then\n            temp_array+=( \"$k\" )\n      \
    \  else\n            digits_set+=($(${digits[@]}))\n            digits+=($temp_array)\n\
    \            temp_array=()\n            k=0\n            digits_set=()\n     \
    \   fi\n    done\n\n    echo $( ${digits[@]} )\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdfum_9vs.sh: line 28: ((: 15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    /tmp/tmpdfum_9vs.sh: line 36: ((: 12 -lt 12: syntax error in expression (error
    token is "12")

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x\n    local out\n    local inx\n    local digit\n    local i\n    local\
    \ n\n    local m\n\n    # Strip out any double quotes\n    x=\"${1//\\\"}\"\n\
    \    # Split string into numbers\n    read -ra x <<< \"$x\"\n    # Remove all\
    \ even digits\n    for ((i = 0; i < ${#x[@]}; i++)); do\n        if (( (( ${x[i]}\
    \ % 2 )) == 0 )) {\n            unset x[i]\n        }\n    done\n    # Convert\
    \ array into string\n    x=\"${x[@]}\"\n    # Sort the array\n    IFS=$'\\n' read\
    \ -d '' -ra x <<< \"$x\"\n    # Remove all double quotes\n    x=\"${x//\\\"}\"\
    \n    # Convert string into array\n    read -ra x <<< \"$x\"\n    # Return sorted\
    \ list\n    printf '%s\\n' \"${x[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8qv7dsp0.sh: line 27: syntax error near unexpected token `{''

    /tmp/tmp8qv7dsp0.sh: line 27: `        if (( (( ${x[i]} % 2 )) == 0 )) {''

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  x=($1)\n\
    \  declare -a a\n  for x in \"${x[@]}\" ; do\n    read -u 3 -r x\n    if [ \"\
    $x\" -eq \"$x\" ] 2>/dev/null ; then\n      a+=(\"$x\")\n    fi\n  done\n  echo\
    \ \"${a[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd0f1w_k1.sh: line 16: read: 3: invalid file descriptor: Bad file
    descriptor

    /tmp/tmpd0f1w_k1.sh: line 16: read: 3: invalid file descriptor: Bad file descriptor

    /tmp/tmpd0f1w_k1.sh: line 16: read: 3: invalid file descriptor: Bad file descriptor

    /tmp/tmpd0f1w_k1.sh: line 16: read: 3: invalid file descriptor: Bad file descriptor

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ declare -a x=(\"$@\")\n    declare -i count=0\n    declare -a output\n    output=()\n\
    \    for ((i=0; i<${#x[*]}; i++)); do\n        case \"${x[i]}\" in\n         \
    \   *[!0-9]*) continue ;;\n            *) output+=(\"$x[i]\") ;;\n        esac\n\
    \    done\n    count=\"${#output[@]}\"\n    for ((i=0; i<${#output[@]}; i++));\
    \ do\n        case \"${output[i]}\" in\n            *[!0-9]*) continue ;;\n  \
    \          *) ((count--)) && break ;;\n        esac\n    done\n    for ((i=0;\
    \ i<${#output[@]}; i++)); do\n        case \"${output[i]}\" in\n            *[!0-9]*)\
    \ continue ;;\n            *) ((count++)) && break ;;\n        esac\n    done\n\
    \    count=$(expr $count + ${#output[@]})\n    for ((i=1; i<${count}; i++)); do\n\
    \        if [[ ${output[i-1]} -eq ${output[i]} ]]; then\n            declare -a\
    \ temp\n            temp=()\n            for ((j=i; j<${#output[@]}; j++)); do\n\
    \                temp+=(\"${output[j]}\")\n            done\n            declare\
    \ -a temp2\n            temp2=(\"${temp[*]}\")\n            declare -a temp3\n\
    \            temp3=($(sort <<<\"${temp[*]}\" | uniq))\n            declare -a\
    \ temp4\n            temp4=($(sort <<<\"${temp3[*]}\" | uniq))\n            declare\
    \ -a temp5\n            temp5=(\"${temp4[*]}\")\n            for ((j=0; j<${#temp5[@]};\
    \ j++)); do\n                if [[ ${output[j+i]} -eq ${temp5[j]} ]]; then\n \
    \                   temp+=(\"${temp5[j]}\")\n                fi\n            done\n\
    \            for ((j=0; j<${#temp[@]}; j++)); do\n                output+=(\"\
    ${temp[j]}\")\n            done\n        fi\n    done\n    echo \"${output[*]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ IFS=' ' read -r -a array <<< \"$1\"\n    local sorted_array\n    sorted_array=()\n\
    \    local i\n    for i in \"${array[@]}\"; do\n        if [[ ${#i} -eq 0 ]];\
    \ then\n            array=()\n            continue\n        fi\n        if [[\
    \ ${#i} -eq 1 ]]; then\n            if [[ ${array[$((${#i}-1))]} = 0 ]]; then\n\
    \                array=()\n                continue\n            fi\n        fi\n\
    \        local count\n        for count in \"${array[@]}\"; do\n            if\
    \ [[ \"$i\" < \"$count\" ]]; then\n                break\n            fi\n   \
    \     done\n        if [[ $count -eq 0 ]]; then\n            array=()\n      \
    \      continue\n        fi\n        array=(\"${array[@]:0:$((${#array[@]}-1))}\"\
    )\n    done\n    IFS=' ' read -r -a array <<< \"$array\"\n    local sorted_array\n\
    \    sorted_array=()\n    for i in \"${array[@]}\"; do\n        if [[ ${#i} -eq\
    \ 0 ]]; then\n            sorted_array=()\n            continue\n        fi\n\
    \        local count\n        for count in \"${sorted_array[@]}\"; do\n      \
    \      if [[ \"$i\" < \"$count\" ]]; then\n                break\n           \
    \ fi\n        done\n        if [[ $count -eq 0 ]]; then\n            sorted_array=(\"\
    $i\")\n            continue\n        fi\n        sorted_array=(\"${sorted_array[@]:0:$((${#sorted_array[@]}-1))}\"\
    )\n    done\n    echo \"${sorted_array[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x\n  for x; do\n    local x_noeven\n    for x_noeven; do\n      if [[ $(echo\
    \ \"$x_noeven\" | grep \"^\\($x\\)\\$\") == \"$x_noeven\" ]]; then\n        continue\
    \ 2\n      fi\n    done\n    echo $x\n  done\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    local ret=()\n    for (( i = 0; i < ${#x}; i++ )); do\n\
    \        if [[ ${x:$i:1} == [0-9] ]]; then\n            local a=${x:$i:1}\n  \
    \          if [[ ${a} == *\"0\"* ]]; then\n                ret+=(\"$a\")\n   \
    \         fi\n        fi\n    done\n    echo \"${ret[@]}\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  x=\"\
    $1\" \n  y=$(echo $x | tr \"\\01\" \"\\0\")\n  x=($(echo $y | tr \" \" \"\\0\"\
    ))\n  y=${x[2]}\n  y=${y// }\n  y=${y//\\0 }\n  echo $(echo $y | sort -u)\n}\n\
    \ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp50xm_pb3.sh: line 15: warning: command substitution: ignored null
    byte in input

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local arr=($1)\n    local outarr=()\n    local i=0\n    while [ $i -lt ${#arr[@]}\
    \ ]; do\n        local cur=${arr[$i]}\n        if [[ \"$cur\" =~ ^[0-3] ]]; then\n\
    \            if [[ \"$outarr\" =~ $cur ]]; then\n                echo \"$cur\"\
    \n                echo \"$outarr\"\n                exit\n            fi\n   \
    \         outarr=(${outarr[@]} \"$cur\")\n        fi\n        i=$((i+1))\n   \
    \ done\n    echo \"$outarr\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local IFS=' '\n    # echo $@\n    set -- $@\n    local i=0 ret='\"'\n    while\
    \ [ $# -gt 0 ]\n    do\n        (( i++ ))\n        if [[ $((${!i} / 10)) -eq 0\
    \ ]]\n        then\n            if [[ ${!i} -le $((${!i} / 2)) ]]\n          \
    \  then\n                ret=\"${ret}${!i}\"\n            fi\n        fi\n   \
    \     (( ${#ret} += 2 ))\n        shift\n    done\n    echo \"$ret\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuav6fryv.sh: line 27: ((: 1 += 2 : attempted assignment to non-variable
    (error token is "+= 2 ")

    /tmp/tmpuav6fryv.sh: line 27: ((: 1 += 2 : attempted assignment to non-variable
    (error token is "+= 2 ")

    /tmp/tmpuav6fryv.sh: line 20: / 10: syntax error: operand expected (error token
    is "/ 10")

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\" sorted=() digits=() count=0 \n    for ((i=0; i < $x; ++i)); do\
    \ \n        digits[$i]=$(echo \"$i\" | cut -d \" \" -f 1)\n    done | sort -n\
    \ | uniq -u | while read -r digit; do \n        count=$(echo \"$digits\" | wc\
    \ -l)\n        sorted+=(\"$digit\")\n        ((count--)) && echo \"$digit\"\n\
    \    done\n    echo \"${sorted[@]}\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpva99ejjo.sh: line 14: ((: i < 15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  declare\
    \ -a digits=($(echo \"$1\" |tr \" \" \"\\n\"))\n  echo \"${digits[@]}\" |sort\
    \ -n\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    local d\n    local -a res\n    declare -i i\n    IFS=' '\
    \ read -r -a x <<< \"$x\"\n    for d in \"${x[@]}\"; do\n        d=\"$(echo \"\
    $d\" | sed 's/\\./\\\\./g')\"\n        if (( $(echo \"$d % 2\" | bc -l) == 0 ));\
    \ then\n            res+=(\"$d\")\n        fi\n    done\n    echo \"${res[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   local\
    \ a b_str b_num\n   local num_str=\"$1\"\n   local num_str2 num_str3 num_str4\
    \ num_str5 num_str6 num_str7 num_str8 num_str9 num_str10\n   local str_array=(\
    \ $(echo \"$num_str\" |sed -r \"s/[^0-9]//g\") )\n   local num_str=$(echo \"${#str_array[@]}\"\
    )\n   local num_str2=$((num_str % 2))\n   local num_str3=$((num_str / 2))\n  \
    \ local num_str4=$((num_str / 3))\n   local num_str5=$((num_str / 5))\n   local\
    \ num_str6=$((num_str / 6))\n   local num_str7=$((num_str / 7))\n   local num_str8=$((num_str\
    \ / 8))\n   local num_str9=$((num_str / 9))\n   local num_str10=$((num_str / 10))\n\
    \   local num_array=( $(echo \"$num_str2\" |sed -r \"s/[^0-9]//g\") )\n   local\
    \ num_array1=( $(echo \"$num_str3\" |sed -r \"s/[^0-9]//g\") )\n   local num_array2=(\
    \ $(echo \"$num_str4\" |sed -r \"s/[^0-9]//g\") )\n   local num_array3=( $(echo\
    \ \"$num_str5\" |sed -r \"s/[^0-9]//g\") )\n   local num_array4=( $(echo \"$num_str6\"\
    \ |sed -r \"s/[^0-9]//g\") )\n   local num_array5=( $(echo \"$num_str7\" |sed\
    \ -r \"s/[^0-9]//g\") )\n   local num_array6=( $(echo \"$num_str8\" |sed -r \"\
    s/[^0-9]//g\") )\n   local num_array7=( $(echo \"$num_str9\" |sed -r \"s/[^0-9]//g\"\
    ) )\n   local num_array8=( $(echo \"$num_str10\" |sed -r \"s/[^0-9]//g\") )\n\
    \   local num_array_count=((${#num_array[@]}))\n   local num_array_count_2=((${#num_array1[@]}))\n\
    \   local num_array_count_3=((${#num_array2[@]}))\n   local num_array_count_4=((${#num_array3[@]}))\n\
    \   local num_array_count_5=((${#num_array4[@]}))\n   local \n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4emy_uim.sh: line 36: syntax error near unexpected token `(''

    /tmp/tmp4emy_uim.sh: line 36: `   local num_array_count=((${#num_array[@]}))''

    /tmp/tmp4emy_uim.sh: line 37: syntax error near unexpected token `(''

    /tmp/tmp4emy_uim.sh: line 37: `   local num_array_count_2=((${#num_array1[@]}))''

    /tmp/tmp4emy_uim.sh: line 38: syntax error near unexpected token `(''

    /tmp/tmp4emy_uim.sh: line 38: `   local num_array_count_3=((${#num_array2[@]}))''

    /tmp/tmp4emy_uim.sh: line 39: syntax error near unexpected token `(''

    /tmp/tmp4emy_uim.sh: line 39: `   local num_array_count_4=((${#num_array3[@]}))''

    /tmp/tmp4emy_uim.sh: line 40: syntax error near unexpected token `(''

    /tmp/tmp4emy_uim.sh: line 40: `   local num_array_count_5=((${#num_array4[@]}))''

    /tmp/tmp4emy_uim.sh: line 41: local: can only be used in a function

    /tmp/tmp4emy_uim.sh: line 42: syntax error near unexpected token `}''

    /tmp/tmp4emy_uim.sh: line 42: `}''

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local digits=\"$1\"\n    local unique_digits=\n    for i in $(seq ${#digits});\
    \ do\n        local idigit=$((${digits[$i]}+0))\n        if [ $idigit -eq 0 ];\
    \ then\n            # $i is 0 digit\n            if [ \"$i\" -gt \"$(( ${#digits}\
    \ - 1 ))\" ]; then\n                unique_digits=\"$unique_digits \"\n      \
    \      fi\n        else\n            # $i is digit \n            if [ $(echo \"\
    ${digits[$i]}\" | grep -E '^[0-9]*$') ]; then\n                unique_digits=\"\
    $unique_digits ${digits[$i]}\"\n            else\n                # $i is non-digit\
    \ \n                unique_digits=\"$unique_digits \"\n            fi\n      \
    \  fi\n    done\n    echo \"$unique_digits\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    local output\n    IFS=' ' read -r -a array <<< \"$x\"\n\
    \    \n    for i in \"${array[@]}\"; do\n        if [[ $i =~ ^[0-9]+$ ]]; then\n\
    \            if [[ $((${#i}%2)) -ne 0 ]]; then\n                output+=\"${i}\"\
    \n            fi\n        fi\n    done\n\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ str=\"$1\"\n  local digits=$str\n  echo \"$digits\" | tr ' ' '\\n' | sort -u\
    \ | tr '\\n' ' '\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # Your code here\n\tset -- $1\n\tlocal uniques\n\tlocal digits\n\tlocal result\n\
    \tlocal tmp\n\n\t# Get unique digits \n\tuniques=( $(printf \"%s\\n\" ${@} | cut\
    \ -d \" \" -f 1 | sort | uniq) )\n\n\t# Get digits\n\tdigits=( $(printf \"%s\\\
    n\" ${@} | cut -d \" \" -f 2 | sort | uniq) )\n\n\t# Filter out unique digits\
    \ that are even\n\tresult=()\n\tfor idx in ${uniques[@]}\n\tdo\n\t\ttmp=0\n\t\t\
    for d in ${digits[@]}\n\t\tdo\n\t\t\tif [ ${idx} -eq ${d} ] && [ ${idx} -ne ${tmp}\
    \ ]; then\n\t\t\t\ttmp=${idx}\n\t\t\tfi\n\t\tdone\n\t\tresult+=( \"${tmp}\" )\n\
    \tdone\n\t\n\t# sort in increasing order\n\tresult=( \"${result[@]}\" )\n\tresult=(\
    \ \"${result[@]}\" )\n\tresult=( \"${result[@]}\" )\n\tresult=( \"${result[@]}\"\
    \ )\n\tresult=( \"${result[@]}\" )\n\tresult=( \"${result[@]}\" )\n\tresult=(\
    \ \"${result[@]}\" )\n\tresult=( \"${result[@]}\" )\n\tresult=( \"${result[@]}\"\
    \ )\n\tresult=( \"${result[@]}\" )\n\tresult=( \"${result[@]}\" )\n\tresult=(\
    \ \"${result[@]}\" )\n\tresult=( \"${result[@]}\" )\n\tresult=( \"${result[@]}\"\
    \ )\n\tresult=( \"${result[@]}\" )\n\tresult=( \"${result[@]}\" )\n\tresult=(\
    \ \"${result[@]}\" )\n\tresult=( \"${result[@]}\" )\n\tresult=( \"${result[@]}\"\
    \ )\n\tresult=( \"${result[@]}\" )\n\tresult=( \"${result[@]}\" )\n\tresult=(\
    \ \"${result[@]}\" )\n\tresult=( \"${result[@]}\" )\n\tresult=( \"${result[@]}\"\
    \ )\n\tresult=( \"${result[@]}\" )\n\tresult=( \"${result[@]}\" )\n\tresult=(\
    \ \"${result[@]}\" )\n\tresult=( \"${result[@]}\" )\n\tresult=( \"${result[@]}\"\
    \ )\n\tresult=( \"${result[@]}\" )\n\tresult=( \"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyc9xhzdp.sh: line 83: unexpected EOF while looking for matching
    `"''

    /tmp/tmpyc9xhzdp.sh: line 87: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   local\
    \ x=\"$1\"\n   local tmp=\"\"\n   local tmp1=$(echo $x | sed 's/ //g')\n   for\
    \ i in $(seq $((${#tmp1}-1)))\n   do\n      tmp1=$(echo $tmp1 | sed \"s/${tmp1}$i//g\"\
    )\n      if [[ $tmp1 == \"\" ]] ; then\n         tmp=\" $tmp\"\n      fi\n   done\n\
    \   echo ${tmp}\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x y tmp digits ret\n    IFS=$'\\n' read -d '' -ra tmp <<< \"$1\"\n   \
    \ digits=()\n    for x in \"${tmp[@]}\"; do\n        (( ${#x} % 2 == 0 )) && digits+=(\"\
    $x\")\n    done\n    for y in \"${digits[@]}\"; do\n        [[ -z \"${digits[@]}\"\
    \ ]] && ret+=(\"$y\") || ret+=(\"\\\"$y\\\"\")\n    done\n    echo \"${ret[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local digits=$1\n    local sorted_digits=()\n    for element in $digits; do\n\
    \        local element=$(echo \"$element\" | tr -d '\"')\n        local element=${element//[!0-9]/}\n\
    \        if [ \"$element\" -ne \"0\" ]; then\n            sorted_digits+=( \"\
    $element\" )\n        fi\n    done\n    sorted_digits=$(sort <<<\"$sorted_digits\"\
    )\n    echo \"$sorted_digits\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=($1)\n    local c=0\n    local y=\n    for ((i=0; i<${#x[@]}; i++));\
    \ do\n        ((c+=${x[i]}))\n        if [[ ${c} =~ [0-9]$ ]]; then\n        \
    \    y+=${x[i]}\n        fi\n    done\n    sort -u --field-separator ' ' <<< ${y}\
    \ \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local list_=\"$1\"\n    local numbers_\n    numbers_=$(echo $list_ | tr ' '\
    \ '\\n' | sort -n | uniq -d)\n    # Return an empty list\n    echo $numbers_ |\
    \ grep -v '^$'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local numbers=$1\n    IFS=' ' read -r -a array <<< \"$numbers\"\n    local unique=''\n\
    \    local array=(\"${array[@]}\")\n    local last\n    local count\n    local\
    \ digit\n    local digits\n    local len\n    local last\n    local i\n    local\
    \ j\n    local num\n    local key\n    \n    for ((i=0; i<${#array[@]}; i++));\
    \ do\n        num=\"${array[i]}\"\n        digits=${#num}\n        last=\"${num%??}\"\
    \n        if [ -z \"$unique\" ] || [ \"${last:0:1}\" == \"-\" ]; then\n      \
    \      count=0\n        else\n            count=$(echo \"$last / 10\" | bc)\n\
    \        fi\n        if [ \"$count\" -eq 0 ]; then\n            unique=\"${last}\"\
    \n        elif [ \"$count\" -gt 0 ]; then\n            unique=\"${unique}${last}${count}\"\
    \n        else\n            if [ \"$unique\" -ne \"$last\" ]; then\n         \
    \       unique=\"$unique,\"\n            fi\n        fi\n    done\n    echo \"\
    $unique\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  #\
    \ Convert $1 to a string\n  x=\"${1// /\\\\ }\"\n  x=\"${x% }\"\n\n  # Remove\
    \ all spaces and enclosing quotes\n  x=\"$(echo \"$x\" | sed -e \"s/^[ ]*//g\"\
    \ -e \"s/[ ]*$//g\")\"\n  \n  # Convert the list to a sorted list\n  x=\"${x//\
    \ / }\"\n  x=\"${x% }\"\n\n  # Remove all spaces and enclosing quotes\n  x=\"\
    $(echo \"$x\" | sed -e \"s/^[ ]*//g\" -e \"s/[ ]*$//g\")\"\n\n  # Print the sorted\
    \ list\n  echo \"$x\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local tmp=()\n    local i\n    for i in  $(echo $1 | awk '{print $1}') ; do\n\
    \        local j\n        for j in $(echo $i | awk '{print $1}') ; do\n      \
    \      [[ \"$i\" != \"$j\" ]] && tmp+=( \"$j\" )\n        done\n    done\n   \
    \ sort <<< \"${tmp[@]}\" | uniq -d\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local n=$1 ret=()\n    for ((i=0; i<n; i++))\n    do\n        local j=$(( i\
    \ * 10 + 1 ))\n        if [[ ${j:0:1} != ${j:0:1} ]] ; then\n            ret+=(\"\
    ${j:0:1}\")\n        fi\n    done\n    IFS=' '; set -- ${ret[@]}; unset IFS\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp659atoxm.sh: line 14: ((: 15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ num_str=$1\n  local i=0 j=0\n  local sorted_num_str=()\n  \n  for ((i=0; i <\
    \ ${#num_str}; i++)); do\n    local digit=${num_str::$i:1}\n    local digits=$((\
    \ 10#$digit ))\n    local digit_str=\"${digits:0:1}${digits:1:1}\"\n    \n   \
    \ if (( $j == 0 )); then\n      sorted_num_str+=(\"$digit_str\")\n    else\n \
    \     if [ \"$digit_str\" != \"0\" ]; then\n        sorted_num_str+=(\"$digit_str\"\
    )\n      fi\n    fi\n    \n    ((j+=1))\n  done\n  \n  local sorted_num_str_length=${#sorted_num_str[@]}\n\
    \  for ((i=sorted_num_str_length; i > 0; i--)); do\n    grep -qw \"^${sorted_num_str[i-1]}$\"\
    \ <<< \"$sorted_num_str\" || true\n  done\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf023f8bs.sh: line 18: num_str: 0:1: syntax error in expression
    (error token is ":1")

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=$1\n\n    # $x could contain spaces.\n    # $x could contain quotes.\n\
    \    # $x could contain \"\n    local x_array=($x)\n\n    local uniques=()\n \
    \   local uniques_count=${#x_array[@]}\n    for (( i=0; i < ${uniques_count};\
    \ i++ ))\n    do\n        # Don't compare the first item\n        if [[ ${x_array[$i]}\
    \ =~ ^[0-9]+$ ]]\n        then\n            # Don't add if already in the array\n\
    \            if [[ ${uniques[*]} =~ (^$x_array[$i]$) ]]\n            then\n  \
    \              # already in the array\n                uniques=$uniques\n    \
    \            break\n            fi\n\n            # Add if not already in the\
    \ array\n            if [[ ${uniques[*]} =~ (^[^0-9]+$) ]]\n            then\n\
    \                uniques+=(\"${x_array[$i]}\")\n            fi\n        fi\n \
    \   done\n\n    # uniques could be empty list. Let's return empty list\n    if\
    \ [[ -z ${uniques} ]]\n    then\n        uniques=()\n    fi\n\n    echo \"${uniques[*]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ numbers=$1\n  local digits=()\n  \n  for number in $numbers; do\n    digits+=($(echo\
    \ $number | sed 's/\\([0-9]*\\)/ \\1/'))\n  done\n  \n  echo \"${digits[@]}\"\
    \ | sort -n -g | uniq\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: options ''-gn'' are incompatible

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local input_list=\"$1\"\n    local output_list=\"\"\n    local input_number\n\
    \    local input_number_without_digit\n    local digit\n\n    for input_number\
    \ in $input_list; do\n        input_number_without_digit=${input_number//[!0-9]/}\n\
    \        digit=$(echo \"$input_number_without_digit\" | wc -c)\n        if [ \"\
    $digit\" -eq 0 ]; then\n            output_list=\"$output_list \\\"$input_number\\\
    \" \"\n        fi\n    done\n    echo \"$output_list\"\n}\n\ncandidate() {\n \
    \   unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tIFS='\
    \ ' read -r -a array <<< \"$1\"\n\tfor i in \"${array[@]}\"; do\n\t\techo $i |\
    \ grep -o '[012345678]'\n\tdone | sort | uniq\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=$1 \n  local y\n  while read -d '' y; do \n    [[ $y =~ ^\\([0-9]\\) ]] &&\
    \ { \n      printf \"\\\"$y\\\" \"\n      x=\"${x#*$y}\"\n    } \n  done < <(echo\
    \ $x | grep -o \"[0-9]*\")\n  [[ $x ]] && printf \"\\\"$x\\\"\\n\" || echo \"\
    []\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local i x\n    local output\n    # Split $1 into an array with multiple values\n\
    \    IFS=' ' read -r -a array <<< \"$1\"\n    # Initialize output array\n    output=()\n\
    \    # Sort the array\n    for ((i=0; i<${#array[@]}; i++)); do\n        x=${array[$i]}\n\
    \        if [ $x -eq $((x|0)) ]; then\n            output+=(\"$x\")\n        fi\n\
    \    done\n    echo \"${output[@]}\" | sort -n\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ x=$1\n    x=$(echo $x | tr -s ' ' ',' | cut -d ',' -f 1 | sort | uniq | tr '\\\
    n' ' ')\n    x=$(echo $x | cut -d ' ' -f 1)\n    echo $x\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local IFS=\" \"\n    local i\n    local output\n    for i; do\n        if [[\
    \ $i =~ ^\\D*$ ]]; then\n            shift\n            output=\"$output $i\"\n\
    \        fi\n    done\n    IFS=\n    echo \"$output\"\n}\n\ncandidate() {\n  \
    \  unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ arr=( $1 )\n\tarr=( \"${arr[@]}\" )\n\techo \"${arr[@]}\"\n\t# convert to sortable\
    \ and remove duplicates\n\tarr=( $(sort \"${arr[@]}\") )\n\t# find all elements\
    \ with non-digit\n\tarr=( $(echo \"${arr[@]}\" | grep -v \"[0-9]\") )\n\t# filter\n\
    \tarr=( $(echo \"${arr[@]}\" | grep -v \"^-$\") )\n\techo \"${arr[@]}\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: 15: No such file or directory

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local input=$1\n    local i=0\n    local output=\"\"\n    while [ $i -lt ${#input}\
    \ ]; do\n        local digit=${input:$i:1}\n        digit=$(expr $digit \\% 2)\n\
    \        if [ ${digit} -eq 0 ]; then\n            output+=\"\\\"${input:$i:1}\\\
    \" \";\n        fi\n        i=$((i+1))\n    done\n    echo ${output:0:${#output}}\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20182\u2019\n/tmp/tmpvzxtbnhh.sh:\
    \ line 19: [: -eq: unary operator expected\nexpr: syntax error: unexpected argument\
    \ \u20182\u2019\n/tmp/tmpvzxtbnhh.sh: line 19: [: -eq: unary operator expected\n\
    expr: syntax error: unexpected argument \u20182\u2019\n/tmp/tmpvzxtbnhh.sh: line\
    \ 19: [: -eq: unary operator expected\n"
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local _IFS=\"$IFS\"\n    IFS=\" \" # set IFS to \" \" to get rid of spaces in\
    \ the numbers\n    local x\n\n    local -n num=()\n    x=\"${1// /+}\"\n    num=(\
    \ $x )\n    IFS=\"$_IFS\"\n    local out\n    out=()\n    for ((i=0; i < ${#num[@]};\
    \ i+=2))\n    do\n      if [[ ${num[$i]} == 0 ]]; then\n        out+=(\"$num[$i]\"\
    )\n      fi\n    done\n    echo \"${out[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_o50r9yw.sh: line 17: local: num: reference variable cannot be
    an array

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ echo \"$1\" | tr ' ' \"\\n\" | sort | uniq | sed -e 's/^[0-9]*//'\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ LIST=\"$1\"\n\tlocal TEMP_LIST=\"\"\n\tlocal NUM=\n\tlocal RESULT=\n\twhile\
    \ read LINE; do\n\t\tNUM=\"$(echo \"$LINE\" | awk '{print $1}')\"\n\t\tif [ \"\
    $NUM\" != \"\" ]; then\n\t\t\tRESULT=\"${RESULT} ${NUM}\"\n\t\tfi\n\tdone <<<\
    \ \"$LIST\"\n\tRESULT=$(echo \"$RESULT\" | sort -u | tr -s ' ' | cut -d ' ' -f\
    \ 2-)\n\teval \"$RESULT\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzy8qw95e.sh: line 24: 15: command not found

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    local result\n\n    # split string to array\n    IFS=' '\
    \ read -ra arr <<< \"$x\"\n\n    # sort the array\n    IFS=: sort -u \"${arr[@]}\"\
    \n\n    # convert back to string\n    result=\"$(IFS=: printf \"%s\\n\" \"${arr[@]}\"\
    )\"\n\n    echo \"$result\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: 15: No such file or directory

    '
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local items=$1 \n    local output=\"\" \n    local count=0 \n    local i=0\n\
    \    local last=\"\" \n    for x in $items;do\n        if (( $i%2 == 0 )); then\n\
    \            output+=$last\n        fi\n        last=\"$x\" \n        ((count++))\n\
    \    done\n    output+=$last\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tset\
    \ -- \"$1\"\n\tset -- \"$@\" # remove empty elements\n\t\n\tlocal x\n\t\n\twhile\
    \ [ $# -gt 0 ]; do\n\t\tx=\"$1\"\n\t\t[[ $x =~ [0-9][0-9]*$ ]] && echo $x | grep\
    \ -q \"$x\" && echo \"$x\" && shift\n\tdone\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ x=$(echo $1 | tr ' ' '\\n' | sort -nr | tr '\\n' ' ')\n    echo $x | cut -d\
    \ ' ' -f2 | sort | uniq -d\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local list_elements=($*)\n    local output\n    output=()\n    for i in \"${list_elements[@]}\"\
    ; do\n        local digit=$((${i}%10))\n        if [[ \"${digit}\" -eq 0 ]]; then\n\
    \            local unique=${i}\n        else\n            local unique=${i}\n\
    \            output+=($unique)\n        fi\n    done\n    local sorted_list=$(printf\
    \ \"%s\\n\" \"${output[@]}\" | sort -u)\n    echo \"$sorted_list\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ i a j\n\ta=$@\n\ti=0\n\tfor j in $a; do\n\t\t(( i++ ))\n\t\tif [ $(echo \"$j\"\
    \ | bc | grep -w \"^$i\" | wc -l) -eq 0 ]; then\n\t\t\techo $j\n\t\t\tbreak\n\t\
    \tfi\n\tdone\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local xs sorted_list\n    xs=\"$1\"\n    sorted_list=$(for num in $xs; do\n\
    \            echo \"$num\" | grep -E \"^\\d\" | wc -l\n        done)\n    echo\
    \ \"${sorted_list[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \     local xs ys n i a tmp \n        xs=$1 \n        ys=()\n        n=0 \n  \
    \      while [[ xs != *[!0-9] ]]; do \n                ys+=($n); n=$((n+1)) \n\
    \        done\n        for ((i=0; i<n; i++ )); do \n                tmp=${ys[i]}\n\
    \                ys[i]=${ys[(i+1)]}\n                ys[(i+1)]=$tmp\n        done\n\
    \        echo \"${ys[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local arr=( $1 )\n    for ((i=0;i<${#arr[@]};i++))\n    do\n        arr[$i]=$(grep\
    \ -E '^[0-9]+$' <<< ${arr[$i]} | sed 's/[0-9][0-9]*//g')\n    done\n    echo ${arr[@]}\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057350
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ x=\"$1\"\n\n\tfor x in $x; do\n\t\t[[ \"$x\" =~ ^[[:digit:]]+$ ]] && echo \"\
    $x\" || :\n\tdone\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057351
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local list=`echo $1 | sed \"s/ /\\\\\\\\x\\\\\\\\x/g\"`\n    local ret=()\n\
    \    local i tmp\n    i=0\n    while [ $i -lt ${#list[*]} ]; do\n        tmp=${list[i]}\n\
    \        if [[ \"${tmp: -1}\" =~ .* \\<[02468]$ ]]; then\n            ret[$i]=${tmp}\n\
    \        fi\n        i=$((i+1))\n    done\n    echo \"${ret[@]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjvbh_gd9.sh: line 19: syntax error in conditional expression

    /tmp/tmpjvbh_gd9.sh: line 19: syntax error near `\<[02468]$''

    /tmp/tmpjvbh_gd9.sh: line 19: `        if [[ "${tmp: -1}" =~ .* \<[02468]$ ]];
    then''

    '
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    local ret=()\n    for x in \"$x\"\n    do\n        local\
    \ y=$(printf \"%04x\" $x)\n        local z=\"${y#?}\"\n        local a=\"${z%%[0-9]*}\"\
    \n        local b=\"${z##*[0-9]}\"\n        if [[ \"$a\" == \"$b\" ]]\n      \
    \  then\n            continue\n        else\n            ret=\"$ret\" \"$x\"\n\
    \        fi\n    done\n    echo \"${ret[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local -n x=\"$1\"\n    [[ ${#x[@]} -eq 0 ]] && return 1\n    local -n res\n\
    \    local -i j=0\n    for ((j=0; j<${#x[@]}; j++)); do\n        [[ ${x[j]} -eq\
    \ 0 ]] && continue 2\n        [[ ${x[j]} -eq 1 ]] && continue\n        res+=(\"\
    ${x[j]}\")\n    done\n    [[ -n \"${res[*]}\" ]] || return 0\n    for ((j=$((j+1));\
    \ j<${#x[@]}; j++)); do\n        [[ \"${res[j]}\" == \"${res[j-1]}\" ]] || return\
    \ 1\n    done\n    res=(\"${res[@]:1}\")\n    for ((j=$((j+1)); j<${#res[@]};\
    \ j++)); do\n        [[ ${res[j]} -eq 0 ]] && res[j]=\"\"\n    done\n    echo\
    \ \"${res[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbmphwh_e.sh: line 13: local: `15 33 1422 1'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ x=\"$1\"\n\tlocal i\n\tlocal j\n\tlocal l\n\tlocal result\n\n\t# sort string\n\
    \tx=\"$(sort -z -n <<< \"${x}\")\"\n\n\t# find unique digits\n\tfor ((i=1; i<=${#x};\
    \ i++)); do\n\t\tj=$(expr \"$i\" : '.*\\(.*\\)$')\n\t\tl=$(echo \"${x}${j:i}\"\
    \ | grep -o '[0-9]*')\n\t\tif [ -z \"${l}\" ]; then\n\t\t\tresult=\"${result}\
    \ ${j:i}\"\n\t\tfi\n\tdone\n\n\techo \"${result}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_c8a1cjd.sh: line 20: warning: command substitution: ignored null
    byte in input

    '
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   local\
    \ x\n   x=\"$1\"\n   x=\"${x// /$'\\n'}\"\n   x=\"${x//[0-9]/}'\\n'}\"\n   x=\"\
    ${x//$'\\n'/ }\"\n   echo \"$x\"\n   echo \"$x\" | tr \" \" \"\\n\" | sort -u\
    \ \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  x=($1)\n\
    \  result=()\n  for i in \"${x[@]}\"; do\n    digit=\"${i#*[!0-9]}\"\n    [[ \"\
    ${digit}\" == \"0\" ]] && continue\n    [[ \"${result}\" =~ \"${digit}\" ]] &&\
    \ continue\n    result+=( \"$i\" )\n  done\n  echo \"${result[@]}\" \n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057351
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ x=($@)\n\tlocal res=($@)\n\tlocal i j\n\tlocal val\n\tfor (( i = 0 ; i < ${#res[@]}\
    \ ; i++ )); do\n\t\tval=\"${x[i]}\"\n\t\tj=0\n\t\twhile [[ $j < (${#val}) && ${val}\
    \ != 0 ]]; do\n\t\t\t(( val=${val} % 10 ))\n\t\t\t(( j++ ))\n\t\tdone\n\t\tif\
    \ (( $j == 0 )); then\n\t\t\tres[i]=$val\n\t\tfi\n\tdone\n\techo \"${res[@]}\"\
    \ | sort -u\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmpsb3qzxia.sh: line 20: unexpected argument `(' to conditional binary\
    \ operator\n/tmp/tmpsb3qzxia.sh: line 20: syntax error near `($'\n/tmp/tmpsb3qzxia.sh:\
    \ line 20: `\t\twhile [[ $j < (${#val}) && ${val} != 0 ]]; do'\n"
  stdout: ''
  timestamp: 1660057351
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=($1);\n    local y=${x[0]};\n    local even=0;\n    for y in ${x[@]};\n\
    \    do\n        if [[ ${y} =~ ^[0-9]+$ ]];\n        then\n            even+=0;\n\
    \        fi\n    done\n    for y in ${x[@]};\n    do\n        if [[ ${y} =~ ^[0-9]+$\
    \ ]];\n        then\n            if [[ ${y} % 2 -eq 0 ]];\n            then\n\
    \                even+=0;\n            fi\n        fi\n    done\n    for y in\
    \ ${x[@]};\n    do\n        if [[ ${y} =~ ^[0-9]+$ ]];\n        then\n       \
    \     if [[ ${y} -eq ${even} ]];\n            then\n                even+=1;\n\
    \            fi\n        fi\n    done\n    for y in ${x[@]};\n    do\n       \
    \ if [[ ${y} =~ ^[0-9]+$ ]];\n        then\n            if [[ ${y} -ne ${even}\
    \ ]];\n            then\n                echo \"$y\";\n            fi\n      \
    \  fi\n    done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp_v04wte.sh: line 27: conditional binary operator expected

    /tmp/tmpp_v04wte.sh: line 27: syntax error near `%''

    /tmp/tmpp_v04wte.sh: line 27: `            if [[ ${y} % 2 -eq 0 ]];''

    '
  stdout: ''
  timestamp: 1660057351
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ numbers=$1\n\t# echo \"Numbers:${numbers}\";\n\twhile read -r line; do\n\t\t\
    nums=$(echo \"${line}\" | sed 's/\\([0-9]*\\)//g')\n\t\t# echo \"Nums:${nums}\"\
    ;\n\t\tnums=$(echo \"${nums}\" | tr ' ' ',')\n\t\t# echo \"Nums:${nums}\";\n\t\
    \tnums=$(echo \"${nums}\" | sed 's/,//g')\n\t\t# echo \"Nums:${nums}\";\n\t\t\
    nums=$(echo \"${nums}\" | sed 's/\"//g')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo\
    \ \"${nums}\" | sed 's/#//g')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo \"\
    ${nums}\" | sed 's/]//g')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo \"${nums}\"\
    \ | sed 's/^//g')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo \"${nums}\" |\
    \ sed 's/,//g')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo \"${nums}\" | sed\
    \ 's/^,//g')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo \"${nums}\" | sed\
    \ 's/,$//g')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo \"${nums}\" | sed\
    \ 's/^,$//g')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo \"${nums}\" | tr\
    \ -s ' ' ',')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo \"${nums}\" | tr\
    \ -s ' ' ',')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo \"${nums}\" | tr\
    \ -s ' ' ',')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo \"${nums}\" | tr\
    \ -s ' ' ',')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo \"${nums}\" | tr\
    \ -s ' ' ',')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo \"${nums}\" | tr\
    \ -s ' ' ',')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo \"${nums}\" | tr\
    \ -s ' ' ',')\n\t\t# echo \"Nums:${nums}\";\n\t\tnums=$(echo \"${nums}\" | tr\
    \ -s ' ' ',\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkrp3j__7.sh: line 52: unexpected EOF while looking for matching
    `''''

    /tmp/tmpkrp3j__7.sh: line 68: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057351
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local array=($*)\n    local ret=()\n    for (( i=0; i<${#array[@]}; i++ ));\
    \ do\n        local j=1\n        while (( ${array[$i]} > 0 )); do\n          \
    \  array[$i]=$(( ${array[$i]} % 10 ))\n            j=$(( ${j} * 10 ))\n      \
    \  done\n        if (( ${array[$i]} > 0 )); then\n            ret+=(\"$(( ${array[$i]}\
    \ ))\")\n        fi\n    done\n    for (( i=0; i<${#ret[@]}; i++ )); do\n    \
    \    if (( ${ret[$i]} > 0 )); then\n            ret[$i]=$(( ${ret[$i]} ))\n  \
    \      fi\n    done\n    for (( i=0; i<${#ret[@]}; i++ )); do\n        if (( ${ret[$i]}\
    \ > 0 )); then\n            ret[$i]=$(( ${ret[$i]} ))\n        fi\n    done\n\
    \    sort -u <<< \"${ret[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=57 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=37 encoding='utf-8'>
  timestamp: 1660057356
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    local i=0 ret=()\n    for v in $x; do\n        [[ $v =~\
    \ ^[0-9]$ ]] || continue\n        let \"i++\"\n        [[ ! -z \"${ret[$i]}\"\
    \ ]] || { ret[$i]=\"$v\" } # if not exist, add it to the array\n    done\n   \
    \ IFS=' ' read -ra ret <<< \"${ret[*]}\"\n    echo \"${ret[@]}\" # return all\
    \ elements that not have '0'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz5q9h48p.sh: line 19: syntax error near unexpected token `done''

    /tmp/tmpz5q9h48p.sh: line 19: `    done''

    '
  stdout: ''
  timestamp: 1660057351
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ xs=\"$1\" nl nl2 xx xx2 i\n  nl=$(xs=\"$xs\" xs=\"$xs\" xs=\"$xs\" xs=\"$xs\"\
    \ xs=\"$xs\" xs=\"$xs\" xs=\"$xs\" xs=\"$xs\" xs=\"$xs\" xs=\"$xs\")\n  nl2=$(xs=\"\
    $nl\" xs=\"$nl\" xs=\"$nl\" xs=\"$nl\" xs=\"$nl\" xs=\"$nl\" xs=\"$nl\" xs=\"\
    $nl\" xs=\"$nl\" xs=\"$nl\" xs=\"$nl\" xs=\"$nl\")\n  while IFS= read -r -d $'\\\
    0' xx || [[ -n \"$xx\" ]]; do\n    xx2=$(xs=\"$xx\" xs=\"$xx\" xs=\"$xx\" xs=\"\
    $xx\" xs=\"$xx\" xs=\"$xx\" xs=\"$xx\" xs=\"$xx\" xs=\"$xx\" xs=\"$xx\" xs=\"\
    $xx\" xs=\"$xx\")\n    xx2=$(xs=\"$xx2\" xs=\"$xx2\" xs=\"$xx2\" xs=\"$xx2\" xs=\"\
    $xx2\" xs=\"$xx2\" xs=\"$xx2\" xs=\"$xx2\" xs=\"$xx2\" xs=\"$xx2\" xs=\"$xx2\"\
    \ xs=\"$xx2\")\n    if [ \"$(xx2=$(xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"\
    $xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"\
    $xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"\
    $xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"\
    $xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"\
    $xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"$xx2\" xx2=\"\
    $xx2\" xx2=\"$\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2g5u8n7m.sh: line 31: unexpected EOF while looking for matching
    `"''

    /tmp/tmp2g5u8n7m.sh: line 35: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ str=\"$1\"\n\tstr=$(echo $str |tr \" \" \"\\n\")\n\tstr=$(echo $str |awk '{for(i=1;i<=NF;i++)if(($i\
    \ % 2)==0){print $i}}')\n\techo \"$str\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tx=\"\
    $1\"\n\tmapfile -t arr < <(echo \"$x\")\n\techo \"${arr[@]}\" | grep -E \"^[0-9]*$\"\
    \ | sort | uniq\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=\"$1\"\n  local -i n=0\n  local -a result=()\n  local -r digits=\"${x}\"\n\
    \  for x in $digits\n  do\n    n=$((10#${x}))\n    if [ \"${n}\" -eq 0 ]\n   \
    \ then\n      result+=(\"$x\")\n    fi\n  done\n  echo \"${result[@]}\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local IFS=$1; shift\n    local x=\"$1\"\n    local output\n    output=( $(echo\
    \ \"$x\" | tr \" \" \"\\n\" | sort | uniq -d | sort -n | sed \"s/\\\"//g\") )\n\
    \    echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057351
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n local\
    \ digits_array=( \"${@}\" )\n local length=${#digits_array[@]}\n local digits_array_sorted=()\n\
    \ local i=0\n local j=0\n local k=0\n local tmp_digit\n local digit\n \n for ((\
    \ i=0; i<length; ++i )); do\n  tmp_digit=\"${digits_array[i]}\"\n  if (( i % 2\
    \ )); then\n   digit=\"${tmp_digit}\"\n  else\n   digit=\"${tmp_digit%?}\"\n \
    \ fi\n  if [[ ${digits_array_sorted[@]} =~ \"${digit}\" ]]; then\n   digits_array_sorted+=(\
    \ ${digit} )\n  else\n   digits_array_sorted+=( ${digits_array_sorted[@]}+( ${digit}\
    \ ) )\n  fi\n done\n \n for (( i=0; i<length; ++i )); do\n  tmp_digit=\"${digits_array[i]}\"\
    \n  if (( i % 2 )); then\n   digit=\"${tmp_digit}\"\n  else\n   digit=\"${tmp_digit%?}\"\
    \n  fi\n  if [[ ${digits_array_sorted[@]} =~ \"${digit}\" ]]; then\n   digits_array_sorted+=(\
    \ ${digit} )\n  else\n   digits_array_sorted+=( ${digits_array_sorted[@]}+( ${digit}\
    \ ) )\n  fi\n done\n \n echo \"${digits_array_sorted[@]}\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnnbmskh_.sh: line 32: syntax error near unexpected token `(''

    /tmp/tmpnnbmskh_.sh: line 32: `   digits_array_sorted+=( ${digits_array_sorted[@]}+(
    ${digit} ) )''

    /tmp/tmpnnbmskh_.sh: line 33: syntax error near unexpected token `fi''

    /tmp/tmpnnbmskh_.sh: line 33: `  fi''

    '
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local number=$1\n    local sorted_list=\"\"\n\n    # Remove space and quotes\n\
    \    number=${number//[[:space:]]/}\n    number=${number//\\\"/}\n\n    # Sort\
    \ digits in ascending order\n    number=$(echo $number | tr ' ' ',' | sort -n)\n\
    \n    # Remove quotes and spaces \n    number=${number//\\\"/}\n\n    # Remove\
    \ any number with odd digit\n    number=${number//[[:digit:]][[:digit:]]/}\n\n\
    \    number=${number//[[:digit:]]/}\n\n    # Remove duplicates\n    number=$(echo\
    \ $number | sort -u)\n\n    # Print sorted list\n    echo -n $number\n\n    return\
    \ 0\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057351
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x\n    local output\n\n    x=${1// /\"}\n    output=()\n    for ((i =\
    \ 0; i < ${#x}; i++)); do\n        if [[ $x =~ ^.*[[:digit:]]$i.*$ ]]; then\n\
    \            continue\n        fi\n        output+=( \"$x\" )\n    done\n\n  \
    \  echo \"${output[*]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2urw412u.sh: line 37: unexpected EOF while looking for matching
    `"''

    /tmp/tmp2urw412u.sh: line 41: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x=\"$1\"\n    local y\n    local z\n    local i\n    local output\n  \
    \  IFS=$'\\n' read -ra x <<< \"$1\"\n    local count\n    local key\n    output=()\n\
    \    key=${x[0]}\n    count=0\n    for (( i=1 ; i<${#x} ; i++ )); do\n       \
    \ key=${x[i]}\n        if (( $(echo \"$key / 10\" | bc -l) == 0 )); then\n   \
    \         output+=(\"$key\")\n            count=$((count+1))\n        fi\n   \
    \ done\n    if (( count != 0 )); then\n        if (( count > 0 )); then\n    \
    \        output+=(\"${x[0]}\")\n        fi\n    fi\n    echo \"${output[@]}\"\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmp6bej_mtc.sh: line 26: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    (standard_in) 1: syntax error

    /tmp/tmp6bej_mtc.sh: line 26: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    (standard_in) 1: syntax error

    /tmp/tmp6bej_mtc.sh: line 26: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    (standard_in) 1: syntax error

    /tmp/tmp6bej_mtc.sh: line 26: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    (standard_in) 1: syntax error

    /tmp/tmp6bej_mtc.sh: line 26: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    (standard_in) 1: syntax error

    /tmp/tmp6bej_mtc.sh: line 26: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    (standard_in) 1: syntax error

    /tmp/tmp6bej_mtc.sh: line 26: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    (standard_in) 1: syntax error

    /tmp/tmp6bej_mtc.sh: line 26: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    (standard_in) 1: syntax error

    /tmp/tmp6bej_mtc.sh: line 26: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    (standard_in) 1: syntax error

    /tmp/tmp6bej_mtc.sh: line 26: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    (standard_in) 1: syntax error

    /tmp/tmp6bej_mtc.sh: line 26: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    '
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local x y z\n    IFS=' ' read -a x <<< \"$1\"\n    y=()\n    for z in \"${x[@]}\"\
    ; do \n        [[ \"$z\" =~ ^\\ *[1-9][0-9]*$ ]] || y=( \"${y[@]}\" \"$z\"); \n\
    \    done\n    echo \"${y[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local array=()\n    local result=()\n    IFS=' ' read -r -a array <<< \"$1\"\
    \n    for i in \"${array[@]}\"; do\n        if [ \"$i\" != \"0\" ]; then\n   \
    \         [[ \"$i\" =~ [[:digit:]]+ ]] || continue\n            result+=(\"$i\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | sort -u \n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057351
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ declare -a nums=()\n    declare -i count=0\n    for i in \"$1\"\n    do\n  \
    \      if [ $(echo \"$i | grep -E '^[0-9]$'| wc -l) = 0 ]; then\n            count=$((count\
    \ + 1))\n            nums[$count]=\"$i\"\n        fi\n    done\n    sort -n -k\
    \ 2 <<<\"${nums[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdzvdte5d.sh: line 34: unexpected EOF while looking for matching
    `"''

    /tmp/tmpdzvdte5d.sh: line 38: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ x=\"$1\";\n\tlocal ans=();\n\t[[ x = \"x\" ]] && return ${ans};\n\n\tx=\"${x//\
    \ /}\"\n\n\tfor ((i=1; i<=${#x}; i+=2)); do\n\t\t[[ ${x:i} = ${x:i+1} ]] && continue;\n\
    \t\t[[ ${x:i} = ${x:i+2} ]] && continue;\n\t\tans=(\"${ans[@]}\" \"$x\");\n\t\
    done\n\n\techo \"${ans[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057351
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local IFS=\" \" x=\"$1\"\n\n    if [ \"$x\" = \"$x\" -o \"$x\" = \"$x\" -o \"\
    $x\" = \"$x\" ];then\n        echo \"$x\"\n        return\n    fi\n\n    local\
    \ d\n\n    # remove all spaces and convert string to array 'x'\n    x=(${x//[[:space:]]/})\n\
    \n    # sort array\n    x=(${x//[0-9]/})\n    x=(${x//[!0-9]/})\n    x=(${x//,/})\n\
    \    sort -u <<< \"$x\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057351
