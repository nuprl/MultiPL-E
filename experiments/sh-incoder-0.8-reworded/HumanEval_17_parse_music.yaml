name: HumanEval_17_parse_music
language: sh
prompt: "#!/bin/bash\n# Input to this function is a string representing musical notes\
  \ in a special ASCII format.\n# Your task is to parse this string and return list\
  \ of integers corresponding to how many beats does each\n# not last.\n# Here is\
  \ a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two\
  \ beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o| .| o|\
  \ o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"', '\"1\"\
  ', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\nparse_music()\
  \ {\n"
tests: "}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\"\
  \ ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"\
  o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .|\
  \ o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
completions: ["  echo $1 | sed 's/\\(o.\\|.\\)\\(o.\\|.\\)\\(o.\\|.\\)\\(o.\\|.\\\
    )\\(o.\\|.\\)\\(o.\\|.\\)\\(o.\\|.\\)\\(o.\\|.\\)\\(o.\\|.\\)\\(o.\\|.\\)/\"\\\
    1\"\\2\"\\4\"\\3\"\\5\"\\2\"\\6\"\\7\"\\4\"\\8\"\\5\"\\9\"/'", "    echo \"$1\"\
    \ | grep -oP '(?=^(?:o|o|\\.)\\|$)\\d*(?!\\|)'", "    music_list=\"$1\"\n    music_list=\"\
    ${music_list// /$'\\n'}\"\n\n    music_list=\"${music_list//\\\"/\\\"\"}\n   \
    \ music_list=\"${music_list//\\'/\\\"\"}\n    music_list=\"${music_list//:/\"\
    :\"}\"\n    music_list=\"${music_list//;/\\\",\\\"\"}\n\n    music_list=\"${music_list//.\\\
    ./.}\"\n    music_list=\"${music_list//o\\./o}\"\n    music_list=\"${music_list//o\\\
    |./o|}\"\n    music_list=\"${music_list//.|.}\"\n    music_list=\"${music_list//o\\\
    |o\\|./o|o\\|o\\.}\"\n\n    music_list=\"${music_list//o\\|o\\|o\\|o\\|o\\|o\\\
    |o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\\
    |o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\\
    |o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\\
    |o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\\
    |o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\\
    |o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\", "  local music_line=$1\n  local music_len=${#music_line}\n\
    \  local music_notes=''\n  local music_beat_counts=''\n  for ((i = 0; i < music_len;\
    \ i++)); do\n    local music_ch=${music_line:$i:1}\n    # Check if it is a note\n\
    \    if [[ ${music_ch:0:1} == 'o' ]]; then\n      if [[ -n ${music_notes} ]];\
    \ then\n        music_notes=${music_notes}\" \"${music_ch:1}\n        music_beat_counts=${music_beat_counts}\"\
    \ \"${music_ch:2:1}\n      else\n        music_notes=${music_ch:1}\n        music_beat_counts=${music_ch:2:1}\n\
    \      fi\n      # If it is a last note, increase its beat count\n    elif [[\
    \ ${music_ch:0:1} == 'o|' ]]; then\n      if [[ -n ${music_notes} ]]; then\n \
    \       music_notes=${music_notes}\" \"${music_ch:1}\n        music_beat_counts=${music_beat_counts}\"\
    \ \"${music_ch:2:1}\n      else\n        music_notes=${music_ch:1}\n        music_beat_counts=${music_ch:2:1}\n\
    \      fi\n      # If it is a whole note, just append it to note list\n    elif\
    \ [[ ${music_ch:0:1} == '.|' ]]; then\n      if [[ -n ${music_notes} ]]; then\n\
    \        music_notes=${music_notes}\" \"${music_ch:1}\n      else\n        music_notes=${music_ch:1}\n\
    \      fi\n    fi\n  done\n  echo ${music_notes}\n  echo ${music_beat_counts}",
  "  notes=$1\n  result=()\n  last_beats=()\n  i=0\n  while [ $i -lt ${#notes} ];\
    \ do\n    if [ $notes[$i] == \"o\" -o $notes[$i] == \"o|\" ]; then\n      result[$i]=\"\
    \\\"${last_beats[$((${#last_beats[@]} - 1))]}\\\"\"\n      last_beats=()\n   \
    \   i=$((i + 1))\n    elif [ $notes[$i] == \"|\" ]; then\n      last_beats[$i]=\"\
    \\\"${last_beats[$((${#last_beats[@]} - 1))]}\\\"\"\n      i=$((i + 1))\n    elif\
    \ [ $notes[$i] == \".\" ]; then\n      last_beats[$((${#last_beats[@]} - 1))]=$((${last_beats[$((${#last_beats[@]}\
    \ - 1))]} + 1))\n      i=$((i + 1))\n    else\n      last_beats[$i]=$((${last_beats[$((${#last_beats[@]}\
    \ - 1))]} + 1))\n    fi\n    i=$((i + 1))\n  done", "  local notes=\"${1}\"\n\n\
    \  local index\n  local note\n  local beats\n  local octave\n  local octaves\n\
    \  local last_note\n  local output\n\n  for index in \"${!notes[@]}\"; do\n  \
    \  note=\"${notes[index]}\"\n    octaves=$(echo $note | cut -d '|' -f 1)\n   \
    \ octave=$(echo $octaves | cut -d ' ' -f 1)\n    last_note=$(echo $note | cut\
    \ -d '|' -f 2)\n\n    beats=\"$(echo \"$octave $octaves\" | cut -d 'o' -f 1)\"\
    \n    output=\"$(echo \"$last_note $beats\" | sed 's/o//g' | awk '{print length($0)}')\"\
    \n    echo \"$output\"\n  done", "  local str=\"$1\"\n  local arr=()\n  local\
    \ last\n  local beats\n  for ((i=0;i<${#str};i++)) {\n    last=\"${str:$i:1}\"\
    \n    if [ \"${last}\" == \"|\" ]; then\n      beats=\"${str:$((i+1)):1}\"\n \
    \     arr+=( \"$beats\" )\n      last=\"\"\n    elif [ \"${last}\" == \"o\" ];\
    \ then\n      beats=\"${str:$((i+1)):1}\"\n      arr+=( \"$beats\" )\n      last=\"\
    \"\n    elif [ \"${last}\" == \".\" ]; then\n      beats=\"${str:$((i+1)):1}\"\
    \n      arr+=( \"$beats\" )\n      last=\"\"\n    elif [ -z \"${last}\" ]; then\n\
    \      last=\"\"\n    fi\n  }\n  arr+=( \"$last\" )\n  echo \"${arr[@]}\"", " \
    \   local music_str=\"$1\"\n    local music_notes=\"\"\n    local music_notes_str=\"\
    \"\n    local music_notes_str_count=0\n    local music_note_str=\"\"\n    local\
    \ music_note_str_count=0\n    local music_note_count=0\n    local music_notes_str_count2=0\n\
    \    local music_notes_str_count_new=0\n    local music_notes_str_count3=0\n \
    \   local music_notes_str_count_new_new=0\n    local music_notes_str_count_new_new2=0\n\
    \    local music_notes_str_count_new_new3=0\n\n    # Parse music to find notes\
    \ sequence\n    local music_notes_str_count=$(echo $music_str | sed -E 's/^([^|]*)([|.])/\\\
    1/' | grep -Eo '[^|.]+')\n    for ((i=1; i<$music_notes_str_count; i++)); do\n\
    \        music_notes_str_count=$i\n        music_notes_str_count2=$(($music_notes_str_count\
    \ + 1))\n\n        local music_notes_str_count_new=$(($music_notes_str_count2\
    \ - 1))\n        local music_notes_str_count_new_new=$(($music_notes_str_count_new\
    \ + 1))\n\n        local music_notes_str_count_new_new2=$(($music_notes_str_count_new_new\
    \ + 1))\n        local music_notes_str_count_new_new3=$(($music_notes_str_count_new_new_new\
    \ + 1))\n\n        music_notes=\"$music_notes|$music_notes_str_count_new_new$music_notes_str_count_new_new2$music_notes_str_count_new_new3\"\
    \n        music_note_str=$music_str\n        music_note_str=\"${music_note_str//\\\
    |/$music_notes}\"\n        music_note_str_count=$(($music_note_str_count + 1))\n\
    \        music_note_count=$(($music_note_count + 1))\n        music_notes_str_count2=$(($music_notes_str_count2\
    \ + 1))\n        music_notes_str_count3=$(($music_notes_str_count3 + 1))\n   \
    \ done\n    echo $music_note_count", "    local music_line=$1\n    local music_notes=()\n\
    \    local music_beat_lengths=()\n    local music_last_note=\n\n    read -r music_line\
    \ < <(tail -n +2 <<< \"$music_line\")\n    while [[ -n \"$music_line\" ]]; do\n\
    \        # strip leading whitespace and split note and length\n        local music_note=${music_line#*\
    \ }\n        local music_beat_length=${music_line%% *}\n        music_beat_length=${music_beat_length#*\
    \ }\n        music_notes+=(${music_note})\n        music_beat_lengths+=(${music_beat_length})\n\
    \        music_line=${music_line##* }\n    done\n    music_last_note=${music_line#*\
    \ }\n    music_beat_lengths+=(${music_last_note})\n    music_notes+=(${music_last_note})\n\
    \    music_last_note=${music_last_note#* }\n    music_beat_lengths+=(${music_last_note})\n\
    \    echo \"$music_notes\"\n    echo \"$music_beat_lengths\"", "  local -a arr=();\n\
    \  local i\n  local j\n  local last\n  local n\n  local str\n  local tmp\n\n \
    \ for str in \"$@\"; do\n    arr+=(\"$str\")\n  done\n\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    last=\"none\"\n    n=0\n    str=\"${arr[i]}\"\n    for ((j=1;\
    \ j<${#arr[@]}; j++)); do\n      str=\"${str} | ${arr[j]}\"\n      if [ \"$str\"\
    \ == \"$str|\" ]; then\n        n=$((n+1))\n      else\n        if [ \"$last\"\
    \ == \"none\" ] || [ \"$last\" == \" \" ]; then\n          n=$((n+1))\n      \
    \    last=\"${arr[j]}\"\n        else\n          last=\"${last}\"\n          n=$((n+1))\n\
    \        fi\n      fi\n    done\n\n    arr[i]=\"${n}\"\n  done\n\n  echo \"${arr[@]}\"",
  "    local input_str=$1\n    local output\n    local beats_str\n    local beats_array\n\
    \n    if [[ $input_str =~ \"o\" ]]; then\n        output=$(echo \"${input_str}\"\
    \ | sed \"s/o/ '\\\"4\\\"' /g\")\n    elif [[ $input_str =~ \"o|\" ]]; then\n\
    \        output=$(echo \"${input_str}\" | sed \"s/o\\|/ '\\\"2\\\"' /g\")\n  \
    \  elif [[ $input_str =~ \".|\" ]]; then\n        output=$(echo \"${input_str}\"\
    \ | sed \"s/\\|/ '\\\"1\\\"' /g\")\n    else\n        echo \"Invalid input string\"\
    \n        return -1\n    fi\n\n    # Remove leading and trailing whitespaces.\n\
    \    output=${output#* }\n    output=${output%* }\n\n    beats_str=$(echo \"${output}\"\
    \ | sed 's/\"/ /g' | sed 's/'\"'\"'\"'/ /g' | sed 's/'\"'\"'\"'\"'/ /g' | sed\
    \ 's/'\"'\"'\"'\"'\"'/'\"'\"'\"' /g')\n    beats_array=$(echo \"${beats_str}\"\
    \ | sed 's/'\"'\"'\"/ /g' | sed 's/'\"'\"'\"'\"'/ /g' | sed 's/'\"'\"'\"'\"'\"\
    '/'\"'\"'\"'\"' /g')\n\n    echo \"${beats_array}\"", "    local notes=\"$1\"\
    ;\n    # Replace '|' symbols with '|+' symbol to simplify parsing\n    notes=$(echo\
    \ $notes | sed 's/\\|/\\|+/g');\n    # Parse music from special ASCII representation\
    \ to integers\n    local beats=$(echo $notes | sed -E 's/.{1,3}//g' | sed -E 's/o//g'\
    \ | sed -E 's/o.{1,3}//g' | sed -E 's/o|//g' | sed -E 's/o|.{1,3}//g');\n    #\
    \ Return an array of integers representing musical notes duration\n    # Example:\n\
    \    # >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n    # ['\"4\"', '\"\
    2\"', '\"1\"', '\"2\"', '\"2\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n\
    \    echo \"$beats\";", "    local string=$1\n\n    # Count the number of beats\
    \ in a note\n    local beats=0\n    # Count how many times a note appears in a\
    \ row\n    local count=1\n    # Keep track of number of notes in a row to calculate\
    \ number of beats\n    local notes_in_row=1\n    # Keep track of number of notes\
    \ in previous rows to calculate number of beats\n    local notes_in_previous_rows=0\n\
    \n    # Loop through string by splitting it into array using | as delimiter\n\
    \    IFS=\"|\" read -a notes_array <<< \"$string\"\n    # Loop through the array\
    \ checking if a note exists\n    for i in \"${notes_array[@]}\"; do\n        if\
    \ [[ $i =~ ^([[:alpha:]]+)\\$ ]]; then\n            beats+=${BASH_REMATCH[1]}\n\
    \            count=$((count+1))\n            # Reset note in row counter\n   \
    \         notes_in_row=1\n        else\n            # Reset note in row counter\n\
    \            notes_in_row=1\n            notes_in_previous_rows=0\n        fi\n\
    \    done\n\n    # Return array of beats\n    echo \"$beats\"", "  local line=\"\
    ${1}\"\n  echo \"$line\" | \\\n  sed 's/^\\ *//g' | \\\n  sed 's/ .*//g' | \\\n\
    \  sed 's/ .*//g' | \\\n  sed 's/\\.| //g' | \\\n  sed 's/o| //g' | \\\n  sed\
    \ 's/o|/ /' | \\\n  sed 's/o| /|/g' | \\\n  sed 's/.| //g' | \\\n  sed 's/o|/\
    \ /' | \\\n  sed 's/.| /|/g' | \\\n  sed 's/ .*//g' | \\\n  sed 's/|/ /' | \\\n\
    \  sed 's/|/ /' | \\\n  sed 's/ .*//g' | \\\n  sed 's/ .*//g' | \\\n  sed 's/|/\
    \ /' | \\\n  sed 's/ .*//g' | \\\n  sed 's/ .*//g' | \\\n  sed 's/|/ /' | \\\n\
    \  sed 's/ .*//g' | \\\n  sed 's/ .*//g' | \\\n  sed 's/|/ /' | \\\n  sed 's/\
    \ .*//g' | \\\n  sed 's/ .*//g' | \\\n  sed 's/|/ /' | \\\n  sed 's/ .*//g' |\
    \ \\\n  sed 's/ .*//g' | \\\n  sed 's/|/ /'", "    local music_notes=\"$1\"\n\n\
    \    local music_notes_array=()\n    while read -r line; do\n        # split line\
    \ to note and duration\n        local note_durations=( ${line%%|*} )\n       \
    \ local note_duration=\"${note_durations[-1]}\"\n\n        # check if note is\
    \ fully lasted\n        if [[ $note_durations == *\"*\"* ]]; then\n          \
    \  local note=\"${note_durations%*}\"\n\n            if [[ ${note} =~ ^[ob]$ ]];\
    \ then\n                # note is fully lasted, so let's keep track of it for\
    \ later\n                music_notes_array+=( \"${note}\" )\n            else\n\
    \                # note is not fully lasted, so let's not count it for now\n \
    \               music_notes_array+=( \"\\\"0\\\"\" ) # note is not fully lasted\n\
    \            fi\n        fi\n\n        # check if note is half lasted\n      \
    \  if [[ $note_durations == *|* ]]; then\n            local note=\"${note_durations%*}\"\
    \n\n            if [[ ${note} =~ ^[ob]$ ]]; then\n                # note is half\
    \ lasted, so let's keep track of it for later\n                music_notes_array+=(\
    \ \"${note}\" )\n            else\n                # note is not half lasted,\
    \ so let's not count it for now\n                music_notes_array+=( \"\\\"0\\\
    \"\" ) # note is not half lasted\n            fi\n        fi\n\n        # check\
    \ if note is quater lasted\n        if [[ $note_durations == *| ]]; then\n   \
    \         local note=\"${note_durations%*}\"\n\n            if [[ ${note} =~ ^[ob]$\
    \ ]]; then\n                # note is quater lasted, so let's keep track of it\
    \ for later\n                music_notes_array+=( \"${note}\" )\n            else\n\
    \                # note is not quater lasted, so let's not count it for now\n\
    \                music_notes_array+=( \"\\\"0\\\"\" ) # note is not quater lasted\n\
    \            fi\n        fi\n\n        # check if note is whole\n        if [[\
    \ $note_durations == * ]]; then\n            if [[ ${note_durations%*} =~ ^[ob]$\
    \ ]]; then\n                # note is whole, so let's keep track of it for later\n\
    \                music_notes_array+=( \"${note_durations%*}\" )\n            else\n\
    \                # note is not whole, so let's not count it for now\n        \
    \        music_notes_array+=( \"\\\"0\\\"\" ) # note is not whole\n          \
    \  fi\n        fi\n    done ", "    local music_str=$1\n    local music_arr=()\n\
    \    while [[ \"$music_str\" != \".\" ]]; do\n        local beats=$(echo \"$music_str\"\
    \ | sed -n 's/^\\(o.|o.\\|.\\)$/\\1/p' | wc -c)\n        music_arr=(\"${music_arr[@]}\"\
    \ \"$beats\")\n        music_str=$(awk 'BEGIN{RS=\"\\\"}\"; ORS=\"\\\"\"} /^$/\
    \ { $0=$2 ; print $0 ; exit} /^o\\|/ { print $0 ; exit} ' <<< \"$music_str\")\n\
    \    done\n    echo \"${music_arr[@]}\"", "\tlocal music_notes=$1\n\tlocal music_notes_split=$2\n\
    \tlocal music_notes_length=$3\n\tlocal music_notes_beats=0\n\tlocal music_notes_last_beat=0\n\
    \tlocal music_notes_index=0\n\tlocal music_notes_note=\"\"\n\tlocal music_notes_index=0\n\
    \tlocal music_notes_last_note=\"\"\n\n\tlocal music_notes_index=-1\n\tlocal music_notes_note=\"\
    \"\n\tlocal music_notes_index=0\n\tlocal music_notes_last_note=\"\"\n\tfor music_note\
    \ in $music_notes\n\tdo\n\t\tmusic_notes_index=$((music_notes_index+1))\n\t\t\
    if [ $music_notes_index -eq $music_notes_length ]\n\t\tthen\n\t\t\tmusic_notes_beats=$((music_notes_beats+1))\n\
    \t\t\tmusic_notes_index=0\n\t\telse\n\t\t\tmusic_notes_beats=$((music_notes_beats+1))\n\
    \t\tfi\n\n\t\tif [ $music_notes_last_note != $music_note ]\n\t\tthen\n\t\t\tmusic_notes_beats=$((music_notes_beats+1))\n\
    \t\t\tmusic_notes_last_beat=$((music_notes_last_beat+1))\n\t\t\tmusic_notes_last_note=$music_note\n\
    \t\tfi\n\tdone\n\n\tlocal music_notes_string=$((music_notes_beats)\"\\\"$((music_notes_beats))\\\
    \"\")\n\tlocal music_notes_string=$((music_notes_string+$music_notes_last_note)$music_notes_beats)\n\
    \techo $music_notes_string", "  local music_notes=\"$1\"\n  local music_notes_len=${#music_notes}\n\
    \  local music_notes_result=()\n  for (( i = 1; i <= music_notes_len; i++ ));\
    \ do\n    music_notes_result+=(${music_notes:$i:1})\n    music_notes_result+=(${music_notes:$i:$(($music_notes_len-i)+1)})\n\
    \  done\n  echo ${music_notes_result[@]}", "    local str=$1\n    local notes=()\n\
    \    local beat_num=0\n    local note_length=0\n    local note_lengths=()\n  \
    \  local beat_types=()\n    local last_note=()\n    local last_beat=()\n    local\
    \ max_beat_num=0\n    local max_beat_nums=()\n    local max_note_length=0\n  \
    \  local max_note_lengths=()\n    local max_beat_types=()\n    local max_last_note=()\n\
    \    local max_last_beat=()\n    local max_max_beat_num=0\n    local max_max_beat_nums=()\n\
    \    local max_max_note_length=0\n    local max_max_note_lengths=()\n    local\
    \ max_max_beat_types=()\n    local max_max_last_note=()\n    local max_max_last_beat=()\n\
    \    local max_max_max_beat_num=0\n    local max_max_max_beat_nums=()\n    local\
    \ max_max_max_note_length=0\n    local max_max_max_note_lengths=()\n    local\
    \ max_max_max_beat_types=()\n\n    while IFS= read -r line; do\n        local\
    \ beat\n        local note\n        local len\n        local type\n        local\
    \ last\n        local beat_type\n        local last_beat\n\n        # First we\
    \ find note length in given string.\n        # It starts with non-space character.\n\
    \        note_length=$((${line:0:1}))\n\n        # Then we find note lengths in\
    \ given string.\n        note_lengths=$(echo $line | sed -E 's/^[[:space:]]*([0-9]+).*/\"\
    \\1\"/')\n\n        # We find beat types in given string.\n        # It starts\
    \ with non-space character\n        beat_types=$(echo $line | sed -E 's/^[[:space:]]*([o|.|o|.])[[:space:]]*/\"\
    \\1\"/')\n\n        # Then we find beat types in given string.\n        last_beat=$(echo\
    \ $line | sed -E 's/[[:space:]]*([o|.|o|.])[[:space:]]*$/\"/\"')\n\n        if\
    \ [[ -z \"$line\" ]]; then\n            break\n        fi\n\n        # Finally\
    \ we find note numbers in given string.\n        beat_num=$(echo $line | sed -E\
    \ 's/^[[:space:]]*([0-9]+).*/\"\\1\"/')\n\n        # We find last note in given\
    \ string.\n        last=$(echo $line | sed -E 's/[[:space:]]*([o|.|o", "  local\
    \ music_notes=$1\n  local notes=()\n\n  local count=0\n  local count2=0\n\n  local\
    \ note=\"\"\n  local note_length=0\n\n  local last_note=\"\"\n  local last_note_length=0\n\
    \n  for char in ${music_notes}; do\n    if [[ $char =~ (^|$) ]]; then\n      if\
    \ [[ \"${last_note}\" ]]; then\n        note_length=$((note_length + last_note_length))\n\
    \        notes=( \"${notes[@]}\" \"$note_length\" )\n        last_note=\"\"\n\
    \        note_length=0\n      fi\n\n      note=( \"${note[@]}\" \"$char\" )\n\
    \      last_note=\"$note\"\n      last_note_length=$((${#note} - 1))\n      note_length=$((${#note}))\n\
    \    elif [[ \"$note\" ]]; then\n      note_length=$((note_length + last_note_length))\n\
    \      notes=( \"${notes[@]}\" \"$note_length\" )\n      last_note=\"\"\n    \
    \  note_length=0\n    fi\n  done\n\n  if [[ \"${last_note}\" ]]; then\n    note_length=$((note_length\
    \ + last_note_length))\n    notes=( \"${notes[@]}\" \"$note_length\" )\n  fi\n\
    \n  notes=( \"${notes[@]}\" \"$note_length\" )\n\n  printf '%s\\n' \"${notes[@]}\"",
  "    local s=$1\n    local i=0;\n    local result=()\n    local note;\n    local\
    \ note_counter;\n    \n    while (( ${#s} > 0 )); do\n        if [[ ${s:0:1} ==\
    \ \"'\" ]]; then\n            note=$(echo ${s:1:-1} | sed 's/\"\"/\\\\\"\"/g')\n\
    \            note_counter=$(echo ${s:2} | sed 's/\"\"/\\\\\"\"/g')\n         \
    \   (( ${note_counter} ))\n            (( ${#result[@]} += ${note_counter} ))\n\
    \            \n        else\n            if [[ ${s:0:1} == \"o\" ]]; then\n  \
    \              (( ${#result[@]} += 4 ))\n            else\n                if\
    \ [[ ${s:0:1} == \"o|\" ]]; then\n                    (( ${#result[@]} += 2 ))\n\
    \                else\n                    if [[ ${s:0:1} == \".|\" ]]; then\n\
    \                        (( ${#result[@]} += 1 ))\n                    fi\n  \
    \              fi\n            fi\n        fi\n        \n        s=${s:2};\n \
    \   done\n    \n    result", "    local music_lines=$1\n\n    # Split string into\
    \ line containing notes\n    local music_notes_lines=$(echo ${music_lines} | sed\
    \ \"s/./ ./g\")\n\n    # Remove empty lines\n    local music_notes_lines_noempty=$(echo\
    \ ${music_notes_lines} | sed \"s/^.//g\")\n\n    # Convert notes to integers\n\
    \    local music_notes_lines_converted=$(\n        echo ${music_notes_lines_noempty}\
    \ | sed \"s/\\([a-zA-Z]\\)/\\1 \\1/g\" | sed \"s/\\([o|.]\\)/\\1 \\1/g\"\n   \
    \ )\n\n    # Remove double spaces\n    local music_notes_lines_converted=$(echo\
    \ ${music_notes_lines_converted} | sed \"s/  *//g\")\n\n    # Remove blank lines\n\
    \    local music_notes_lines_converted=$(echo ${music_notes_lines_converted} |\
    \ sed \"/^ *$/d\")\n\n    # Remove new lines\n    local music_notes_lines_converted=$(echo\
    \ ${music_notes_lines_converted} | sed \"s/\\n/ /g\")\n\n    # Convert all notes\
    \ to integers\n    local music_notes_lines_converted=$(echo ${music_notes_lines_converted}\
    \ | sed \"s/ //g\")\n\n    # Remove excess spaces\n    local music_notes_lines_converted=$(echo\
    \ ${music_notes_lines_converted} | sed \"s/\\s\\+/ /g\")\n\n    # Split the string\
    \ into lines\n    local music_notes_lines=$(echo ${music_notes_lines_converted}\
    \ | sed \"s/ /\\n\")\n\n    # Remove extra blank lines\n    local music_notes_lines=$(echo\
    \ ${music_notes_lines} | sed \"/^$/d\")\n\n    # Remove empty lines\n    local\
    \ music_notes_lines=$(echo ${music_notes_lines} | sed \"/^ *$/d\")\n\n    # Add\
    \ \"\\\"\n    local music_notes_lines=$(echo ${music_notes_lines} | sed \"s/ /\\\
    \" \\\"/g\")\n\n    # Return music notes as list of strings\n    return ${music_notes_lines}",
  "  local music_str=\"$1\"\n  local music_arr=()\n  local note_char\n  local note_str\n\
    \  local note_arr=()\n\n  # Remove all notes, just to simplify parsing\n  music_str=\"\
    ${music_str#* }\"\n\n  for note_char in $(echo ${music_str} | sed -e 's/ //g');\
    \ do\n    note_str=$(echo ${music_str} | sed -e \"s/${note_char}//g\")\n    if\
    \ [[ -z ${note_str} ]]; then\n      continue\n    fi\n    note_arr+=(\"$note_str\"\
    )\n  done\n\n  echo \"${note_arr[@]}\"", "    local str=$1\n    local notes=$(echo\
    \ $str | sed 's/ //g' | tr '|' '.')\n    local beats=0\n    for note in $notes\n\
    \    do\n        case $note in\n            \"o\")\n                beats=$((beats\
    \ + 4))\n                ;;\n            \"o|\")\n                beats=$((beats\
    \ + 2))\n                ;;\n            \".|\")\n                beats=$((beats\
    \ + 1))\n                ;;\n        esac\n    done\n    echo $beats", "    local\
    \ str=$1\n    local oct\n    local ret\n    oct=$(echo $str | sed 's/^[o o|].*//g'\
    \ | sed 's/[|.|]$//g')\n    ret=()\n    local i\n    for ((i=0; i < ${#oct}; i++\
    \ )); do\n        if [ \"${oct:i:1}\" = \"o\" ];then\n            ret[i]=$(echo\
    \ ${#ret[@]}+1)\n        elif [ \"${oct:i:1}\" = \"o|\" ];then\n            ret[i]=$(echo\
    \ ${#ret[@]}+2)\n        elif [ \"${oct:i:1}\" = \".\" ];then\n            ret[i]=$(echo\
    \ ${#ret[@]}+1)\n        else\n            ret[i]=$(echo ${#ret[@]}+0)\n     \
    \   fi\n    done\n    echo ${ret[@]}", "    local string=\"$1\"\n    local octave=\"\
    \"\n    local note=\"\"\n    local beat_counter=0\n    local octave_counter=0\n\
    \    local note_counter=0\n    local output=\"\"\n    local last_note=\"x\"\n\
    \    local last_octave=\"x\"\n    local current_note=\"x\"\n    local current_octave=\"\
    x\"\n    local beat_string=\"\"\n\n    while [ \"$string\" != \"\" ]; do\n   \
    \     case \"$string\" in\n            # note\n            \"o\")\n          \
    \      note=\"$note\" ;;\n            \"o|\")\n                note=\"$note\"\
    \ ;;\n            \".|\")\n                note=\"$note\" ;;\n            \"*|\"\
    )\n                note=\"$note\" ;;\n            \".o|\")\n                note=\"\
    $note\" ;;\n            \".o.|\")\n                note=\"$note\" ;;\n       \
    \     \".o.*|\")\n                note=\"$note\" ;;\n            # octave\n  \
    \          \"|\")\n                octave=\"$octave\" ;;\n            \"o|\")\n\
    \                octave=\"$octave\" ;;\n            \".|\")\n                octave=\"\
    $octave\" ;;\n            \"o.|\")\n                octave=\"$octave\" ;;\n  \
    \          \"o.o|\")\n                octave=\"$octave\" ;;\n            \"o.o.|\"\
    )\n                octave=\"$octave\" ;;\n            \"o.o.o|\")\n          \
    \      octave=\"$octave\" ;;\n            \"o.o.o.|\")\n                octave=\"\
    $octave\" ;;\n            \"o.o.o.o|\")\n                octave=\"$octave\" ;;\n\
    \            \"o.o.o.o.|\")\n                octave=\"$octave\" ;;\n         \
    \   \"o.o.o.o.o|\")\n                octave=\"$octave\" ;;\n            \"o.o.o.o.o.|\"\
    )\n                octave=\"$octave\" ;;\n            \"o.o.o.o.o.o|\")\n    \
    \            octave=\"$octave\" ;;\n            \"o.o.o.o.o.o.|\")\n         \
    \       octave=\"$octave\" ;;\n            \"o.o.o.o.o.o.o|\")\n             \
    \   octave=\"$octave\" ;;\n            \"o.o.o.o.o.o.o.|\")\n                octave=\"\
    $octave\" ;;\n            \"o.o.o.o.o.o.o.o|\")\n                octave=\"$octave\"\
    \ ;;\n            \"o.o.o.o.o.o.o.o.|\")\n                octave=\"$octave\" ;;\n\
    \            # end of string\n            \"\")\n                break ;;\n  \
    \          *)", "    local input=$1\n\n    local -a output\n\n    output=()\n\
    \    local current\n    local note\n\n    while read -r note; do\n        current=${note:0:1}\n\
    \        if [[ $current == '.' ]]; then\n            current=${note:1:1}\n   \
    \         local beats\n            if [[ $current == 'o' ]]; then\n          \
    \      beats=4\n            else\n                beats=2\n            fi\n  \
    \          output+=(${#output[@]}+${beats})\n        elif [[ $current == 'o' ]];\
    \ then\n            output+=(${#output[@]})\n        fi\n    done <<< $input\n\
    \    printf \"%s\\n\" \"${output[@]}\"", "    local music_str=$1\n    local music_arr=()\n\
    \    # split string into array\n    music_arr=(${music_str//\\|/ })\n\n    # parse\
    \ array\n    for ((i=0; i<${#music_arr[@]}; i++)); do\n        # split array element\
    \ into two strings\n        local music_note=${music_arr[$i]}\n        local music_note_len=${#music_note}\n\
    \        local music_note_str=${music_note:0:$music_note_len-2}\n\n        # check\
    \ if note is a whole note\n        if [[ ${music_note_str} == 'o' ]]; then\n \
    \           # remove \"o\"\n            music_note_str=${music_note_str:0:${#music_note_str}-2}\n\
    \            music_note_len=${#music_note_str}\n        fi\n\n        # check\
    \ if note is a half note\n        if [[ ${music_note_str} == 'o|' ]]; then\n \
    \           # remove \"o|\"\n            music_note_str=${music_note_str:0:${#music_note_str}-2}\n\
    \            music_note_len=${#music_note_str}\n        fi\n\n        # check\
    \ if note is a quater note\n        if [[ ${music_note_str} == '.|' ]]; then\n\
    \            # remove \".|\"\n            music_note_str=${music_note_str:0:${#music_note_str}-2}\n\
    \            music_note_len=${#music_note_str}\n        fi\n\n        # check\
    \ if note is last note\n        if [[ ${music_note_str} == 'o' ]]; then\n    \
    \        music_note_str=${music_note_str:0:1}\n            music_note_len=1\n\
    \        fi\n\n        music_arr[$i]=${music_note_str}\n        music_arr[$i]=${music_arr[$i]}\n\
    \n    done\n\n    return \"${music_arr[@]}\"", "  local music=\"$1\"\n  local\
    \ beat_count=0\n\n  local tmp=\"$music\"\n  tmp=\"${tmp// / }\"\n\n  local notes\n\
    \  notes=()\n  while [[ \"${tmp}\" ]]; do\n    local note_marker\n    note_marker=\"\
    ${tmp}\"\n    note_marker=\"${note_marker// / }\"\n    note_marker=\"${note_marker%|}\"\
    \n    note_marker=\"${note_marker// }\"\n    note_marker=\"${note_marker% }\"\n\
    \    note_marker=\"${note_marker// }\"\n    note_marker=\"${note_marker%o}\"\n\
    \    note_marker=\"${note_marker% }\"\n    note_marker=\"${note_marker// }\"\n\
    \    note_marker=\"${note_marker%o}\"\n\n    if [[ \"${note_marker}\" == \"o\"\
    \ ]]; then\n      beat_count=$((beat_count+4))\n      notes+=(\"\\\"$beat_count\\\
    \"\")\n    elif [[ \"${note_marker}\" == \"o|\" ]]; then\n      beat_count=$((beat_count+2))\n\
    \      notes+=(\"\\\"$beat_count\\\"\")\n    elif [[ \"${note_marker}\" == \"\
    .|\" ]]; then\n      beat_count=$((beat_count+1))\n      notes+=(\"\\\"$beat_count\\\
    \"\")\n    fi\n    tmp=\"$(echo \"${tmp}\" | sed \"s/${note_marker}/|/\")\"\n\
    \  done\n  echo \"${notes[@]}\"", "    local music_str=$1\n    local music_list=($music_str);\
    \ # we must store output in array\n    local note=\"o\";\n\n    for element in\
    \ \"${music_list[@]}\"; do\n        case \"${element}\" in\n            o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|O|o|",
  "  IFS=$'\\n'\n  local string=\"$1\"\n  local beats=\"\"\n  local elements=\"\"\n\
    \  local i=0\n  local c=0\n\n  echo \"$string\" | while read note; do\n    if\
    \ [[ \"$note\" =~ ^[.|] ]]; then\n      # we are in a note\n      if [[ \"$beats\"\
    \ != \"\" ]]; then\n        echo \"${beats}\\t${elements}\" >> beats_elements.tmp\n\
    \      fi\n      beats=\"$note\"\n      elements=\"$beats\"\n      i=0\n     \
    \ continue\n    fi\n    local obeats=$(( i % 4 ))\n    local octave=$(( i / 4\
    \ ))\n    local cnote=\"$(python -c \"print chr(ord('${note}')+$obeats + $octave)\"\
    )\"\n    elements+=\"'$cnote'\"\n    (( i++ ))\n  done\n  echo \"${beats}\\t${elements}\"\
    \ >> beats_elements.tmp\n  cat beats_elements.tmp", "  local music_string=$1\n\
    \  music_string=${music_string//\\\\/\\ } # remove all backslashes\n  music_string=${music_string//\\\
    '/\\ } # remove all apostrophes\n  music_string=${music_string//\\\"/\\ } # remove\
    \ all double quotes\n  music_string=${music_string//\\\"\\\"/\\ } # remove all\
    \ double quotes\n  music_string=${music_string//\\\"\\\"\\\"/\\ } # remove all\
    \ double quotes\n  music_string=${music_string//\\\"\\\"\\\"\\\"/\\ } # remove\
    \ all double quotes\n  music_string=${music_string//\\\"\\\"\\\"\\\"\\\"/\\ }\
    \ # remove all double quotes\n  music_string=${music_string//\\\"\\\"\\\"\\\"\\\
    \"\\\"\\\"/\\ } # remove all double quotes\n  music_string=${music_string//\\\"\
    \\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"/\\ } # remove all double quotes\n  music_string=${music_string//\\\
    \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"/\\ } # remove all double quotes\n \
    \ music_string=${music_string//\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\
    /\\ } # remove all double quotes\n  music_string=${music_string//\\\"\\\"\\\"\\\
    \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"/\\ } # remove all double quotes\n \
    \ music_string=${music_string//\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\
    \\\"\\\"\\\"\\\"/\\ } # remove all double quotes\n  music_string=${music_string//\\\
    \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"/\\ } # remove\
    \ all double quotes\n  music_string=${music_string//\\\"\\\"\\\"\\\"\\\"\\\"\\\
    \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"/\\ } # remove all double quotes\n\
    \  music_string=${music_string//\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\
    \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"/\\ } # remove all double quotes\n \
    \ music_string=${music_string//\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\
    \\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"/\\ } # remove all double quotes\n\
    \  music_string=${music_string//\\\"\\\"", "    local note=\"$1\"\n    local last_beats=0\n\
    \    local current_beats=0\n    local current_note=\"\"\n    while [[ $note ]];\
    \ do\n        case \"$note\" in\n            o)\n                last_beats=$((last_beats\
    \ + 4))\n                ;;\n            o|)\n                last_beats=$((last_beats\
    \ + 2))\n                ;;\n            .|)\n                last_beats=$((last_beats\
    \ + 1))\n                ;;\n            *)\n                ;;\n        esac\n\
    \        current_beats=$((current_beats + last_beats))\n        current_note=\"\
    $current_beats $current_note\"\n        note=${note%?}\n    done\n    echo \"\
    $current_note\"", "    local lines=$1\n    local tmp='\"'\n    local music=()\n\
    \    for n in $lines; do\n        case \"$n\" in\n            'o' ) music+=( 4\
    \ ); tmp='\"4\"';;\n            'o|' ) music+=( 2 ); tmp='\"2\"';;\n         \
    \   '.|' ) music+=( 1 ); tmp='\"1\"';;\n            *) music+=( $(( ( $(echo $n\
    \ | cut -d'.' -f 1 | tr 'o|.|' 'o|.|.|' | wc -l) / 4 ) * 2 )) ); tmp=$(( ( $(echo\
    \ $n | cut -d'.' -f 1 | tr 'o|.|' 'o|.|.|' | wc -l) / 2 ) * 1 )); tmp=${tmp//./'|'};\
    \ tmp=${tmp//|/'}; music+=( $tmp ); break;;\n        esac\n    done\n    echo\
    \ \"${music[@]}\"", "\tlocal str=$1\n\n\tstr=${str#*|}\n\tstr=${str%%|*}\n\n\t\
    echo $str", "    # Split input on |\n    set -- $1 |\n    while read -t 1 char;\
    \ do\n        # Find out if char is a valid note\n        if [[ $char == (${notes[*]})\\\
    |* ]]; then\n            # If note, count beats by subtracting 1\n           \
    \ echo -n ${#char} - 1\n        else\n            # Otherwise just echo the count\n\
    \            echo -n ${#char}\n        fi\n    done", "  local input=\"$1\"\n\
    \  local output=\"'\"\n  local index\n  for index in $(seq 0 $((${#input}-1))\
    \ )\n  do\n    case \"${input:$index:1}\" in\n      o | o| o| o| o| o| o| o )\
    \ output=\"$output'4'\"\n                          ;;\n      o| o| o| o| .| .|\
    \ .| .| .| o|) output=\"$output'2'\"\n                          ;;\n      o| o|\
    \ o| .| .| .| .| .| .| o|) output=\"$output'1'\"\n                          ;;\n\
    \      o| o| o| .| .| .| .| .| .| o|) output=\"$output'2'\"\n                \
    \          ;;\n      o| o| o| .| .| .| .| .| .| o|) output=\"$output'2'\"\n  \
    \                        ;;\n      o| o| o| .| .| .| .| .| .| o|) output=\"$output'2'\"\
    \n                          ;;\n      o| o| o| .| .| .| .| .| .| o|) output=\"\
    $output'2'\"\n                          ;;\n      o| o| o| .| .| .| .| .| .| o|)\
    \ output=\"$output'2'\"\n                          ;;\n      o| o| o| .| .| .|\
    \ .| .| .| o|) output=\"$output'2'\"\n                          ;;\n      o| o|\
    \ o| .| .| .| .| .| .| o|) output=\"$output'2'\"\n                          ;;\n\
    \      o| o| o| .| .| .| .| .| .| o|) output=\"$output'2'\"\n                \
    \          ;;\n      o| o| o| .| .| .| .| .| .| o|) output=\"$output'2'\"\n  \
    \                        ;;\n      o| o| o| .| .| .| .| .| .| o|) output=\"$output'2'\"\
    \n                          ;;\n      o| o| o| .| .| .| .| .| .| o|) output=\"\
    $output'2'\"\n                          ;;\n      o| o| o| .| .| .| .| .| .| o|)\
    \ output=\"$output'", "    local music beats note\n    music=$1\n    beats=$(echo\
    \ $music | cut -d ' ' -f 1)\n    note=$(echo $music | cut -d ' ' -f 2)\n    echo\
    \ \"$beats\"", "  local s=\"$1\"\n  local beats=\"\"\n  local i=0\n  while true;\
    \ do\n    local c=\"${s:$i:1}\"\n    if [[ \"${beats}\" == *\"\\\"\"* ]]; then\n\
    \      beats=${beats}'\"0\"'\n      local m=\"${beats}\"\n      beats=\"$beats\"\
    \n    else\n      local m=\"${beats}$c\"\n      beats=\"$m\"\n    fi\n    if [[\
    \ \"${m}\" == \".\" ]] || [[ \"${m}\" == \"o\" ]]; then\n      if [[ \"${i}\"\
    \ -ge \"$((${#s}-1))\" ]]; then\n        echo \"${beats}\"\n        break\n  \
    \    fi\n      beats=\"\"\n      i=0\n    fi\n    i=$((i+1))\n  done", "    local\
    \ music_str=\"$1\"\n    # A note is represented by two chars - an accidental (\"\
    o\" in our example) and a note\n    local note=\n    local num_beats=\n\n    local\
    \ accidentals=\n\n    while [[ $music_str != \"\" ]]; do\n        if [[ ${music_str}\
    \ == \"o\" ]]; then\n            note=\"o\"\n            num_beats=4\n       \
    \ elif [[ ${music_str} == \"o|\" ]]; then\n            note=\"o|\"\n         \
    \   num_beats=2\n        elif [[ ${music_str} == \".|\" ]]; then\n           \
    \ note=\".\"\n            num_beats=1\n        elif [[ ${music_str} == \".|\"\
    \ ]]; then\n            note=\".\"\n            num_beats=1\n        elif [[ ${music_str}\
    \ == \"o|.\" ]]; then\n            note=\"o|.\"\n            num_beats=2\n   \
    \     elif [[ ${music_str} == \"o|.o\" ]]; then\n            note=\"o|.o\"\n \
    \           num_beats=3\n        elif [[ ${music_str} == \"o|.o.\" ]]; then\n\
    \            note=\"o|.o.\"\n            num_beats=4\n        elif [[ ${music_str}\
    \ == \"o|.o.o\" ]]; then\n            note=\"o|.o.o\"\n            num_beats=5\n\
    \        elif [[ ${music_str} == \"o|.o.o.\" ]]; then\n            note=\"o|.o.o.\"\
    \n            num_beats=6\n        elif [[ ${music_str} == \"o|.o.o.o\" ]]; then\n\
    \            note=\"o|.o.o.o\"\n            num_beats=7\n        elif [[ ${music_str}\
    \ == \"o|.o.o.o.\" ]]; then\n            note=\"o|.o.o.o.\"\n            num_beats=8\n\
    \        elif [[ ${music_str} == \"o|.o.o.o.o\" ]]; then\n            note=\"\
    o|.o.o.o.o\"\n            num_beats=9\n        elif [[ ${music_str} == \"o|.o.o.o.o.\"\
    \ ]]; then\n            note=\"o|.o.o.o.o.\"\n            num_beats=10\n     \
    \   elif [[ ${music_str} == \"o|.o.o.o.o.o\" ]]; then\n            note=\"o|.o.o.o.o.o\"\
    \n            num_beats=11\n        elif [[ ${music_str} == \"o|.o.o.o.o.o.\"\
    \ ]]; then\n            note=\"o|.", "    local notes=$1\n    local i=0;\n   \
    \ local output='';\n    while read -r line; do\n        if [ \"$line\" != \"${notes}\"\
    \ ]; then\n            # this line does not match notes pattern\n            output=\"\
    $output $i\";\n        else\n            # this line is notes pattern\n      \
    \      notes=\"${notes:1}\"\n            i=0;\n        fi\n        i=$((i+1));\n\
    \    done <<< \"$notes\";\n    echo \"$output\"", "    local music=$1\n    local\
    \ output=\"\"\n    local last\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    local rest\n    local rest\n    local rest\n    local rest\n\
    \    local rest\n    ", "    local notes=$1\n    # Step 1: Find all possible note\
    \ groups (notes ending with | and without |)\n    notes=$(echo $notes | sed -e\
    \ 's/ /|/g')\n    notes=$(echo $notes | sed -e 's/|$//g')\n    # Step 2: For each\
    \ note group find groups that end with o\n    # and collect number of o's\n  \
    \  notes=$(echo $notes | sed -e 's/o$|o$/o/g' | sed 's/|/ /g' | sed -e 's/^/\\\
    |/' -e 's/|$/|/' | sed -e 's/o/ /g')\n    notes=$(echo $notes | sed -e 's/o$|o$/o/g'\
    \ | sed 's/|/ /g' | sed -e 's/^/\\|/' -e 's/|$/|/' | sed -e 's/o/ /g')\n    notes=$(echo\
    \ $notes | sed -e 's/o$|o$/o/g' | sed 's/|/ /g' | sed -e 's/^/\\|/' -e 's/|$/|/'\
    \ | sed -e 's/o/ /g')\n    notes=$(echo $notes | sed -e 's/o$|o$/o/g' | sed 's/|/\
    \ /g' | sed -e 's/^/\\|/' -e 's/|$/|/' | sed -e 's/o/ /g')\n    # Step 3: Remove\
    \ empty notes\n    notes=$(echo $notes | sed -e 's/^\\s*//g' -e 's/\\s*$//g')\n\
    \    # Step 4: Remove last empty element\n    notes=$(echo $notes | sed -e 's/^\\\
    s*//g' -e 's/\\s*$//g')\n    # Step 5: Remove duplicate strings like 'o|' -> 'o'\n\
    \    notes=$(echo $notes | sed -e 's/o\\|/o/g')\n    # Step 6: Remove strings\
    \ like 'o| o| ' -> 'o o'\n    notes=$(echo $notes | sed -e 's/o\\|/ o/g')\n  \
    \  # Step 7: Remove strings like 'o| o| o| ' -> 'o o'\n    notes=$(echo $notes\
    \ | sed -e 's/o\\|o\\|/ o/g')\n    # Step 8: Remove strings like 'o| o| o| o|\
    \ o| ' -> 'o o'\n    notes=$(echo $notes | sed -e 's/o\\|o\\|", "    local music_line=$1\n\
    \    music_line=$(echo \"$music_line\" | sed \"s/| .\\+ /| /g\")\n    music_line=$(echo\
    \ \"$music_line\" | sed \"s/\\.\\+ /| /g\")\n    music_line=$(echo \"$music_line\"\
    \ | sed \"s/\\| \\.\\+ /| /g\")\n    music_line=$(echo \"$music_line\" | sed \"\
    s/\\| \\| \\.\\+ /| /g\")\n    music_line=$(echo \"$music_line\" | sed \"s/\\\
    | \\| \\| \\.\\+ /| /g\")\n    music_line=$(echo \"$music_line\" | sed \"s/\\\
    | \\| \\| \\| \\.\\+ /| /g\")\n    music_line=$(echo \"$music_line\" | sed \"\
    s/\\.\\+ \\| /| /g\")\n    music_line=$(echo \"$music_line\" | sed \"s/\\| \\\
    .\\+ \\| /| /g\")\n    music_line=$(echo \"$music_line\" | sed \"s/\\| \\| \\\
    .\\+ \\| /| /g\")\n    music_line=$(echo \"$music_line\" | sed \"s/\\| \\| \\\
    | \\.\\+ \\| /| /g\")\n    music_line=$(echo \"$music_line\" | sed \"s/\\| \\\
    | \\| \\| \\.\\+ \\| /| /g\")\n    music_line=$(echo \"$music_line\" | sed \"\
    s/\\| \\| \\| \\| \\| \\.\\+ \\| /| /g\")\n    music_line=$(echo \"$music_line\"\
    \ | sed \"s/\\| \\.\\+ \\| \\| /| /g\")\n    music_line=$(echo \"$music_line\"\
    \ | sed \"s/\\.\\+ \\| \\| /| /g\")\n    music_line=$(echo \"$music_line\" | sed\
    \ \"s/\\| \\.\\+ \\| \\| /| /g\")\n    music_line=$(echo \"$music_line\" | sed\
    \ \"s/\\| \\| \\.\\+ \\| \\| /| /g\")\n    music_line=$(echo \"$music_line\" |\
    \ sed \"s/\\| \\| \\.\\+ \\| \\| /| /g\")\n    music_line=$(echo \"$music_line\"\
    \ | sed \"s/\\| \\| \\| \\.\\+ \\| \\| /| /g\")\n    music_", "    echo $1 | \\\
    \n        awk '{\n        notes = $0\n        gsub(/[ .]/, \"\", $0)\n       \
    \ notes = notes \"|\"\n        gsub(/[ .]/, \"\", $0)\n        notes = notes \"\
    .\"\n        gsub(/[ o|]/, \"\", $0)\n        notes = notes \" \"\n        gsub(/[\
    \ o|]/, \"\", $0)\n        notes = notes \"|\"\n        gsub(/[ .]/, \"\", $0)\n\
    \        notes = notes \" \"\n        gsub(/[ .]/, \"\", $0)\n        notes =\
    \ notes \" \"\n        gsub(/[ .]/, \"\", $0)\n        notes = notes \" \"\n \
    \       gsub(/[ o|]/, \"\", $0)\n        notes = notes \" \"\n        gsub(/[\
    \ .]/, \"\", $0)\n        notes = notes \" \"\n        gsub(/[ o|]/, \"\", $0)\n\
    \        notes = notes \" \"\n        gsub(/[ .]/, \"\", $0)\n        notes =\
    \ notes \" \"\n        gsub(/[ .]/, \"\", $0)\n        notes = notes \" \"\n \
    \       gsub(/[ o|]/, \"\", $0)\n        notes = notes \" \"\n        gsub(/[\
    \ .]/, \"\", $0)\n        notes = notes \" \"\n        gsub(/[ o|]/, \"\", $0)\n\
    \        notes = notes \" \"\n        gsub(/[ .]/, \"\", $0)\n        notes =\
    \ notes \" \"\n        gsub(/[ .]/, \"\", $0)\n        notes = notes \" \"\n \
    \       gsub(/[ .]/, \"\", $0)\n        notes = notes \" \"\n        gsub(/[ o|]/,\
    \ \"\", $0)\n        notes = notes \" \"\n        gsub(/[ o|]/, \"\", $0)\n  \
    \      notes = notes \" \"\n        gsub(/[ o|]/, \"\", $0)\n        notes = notes\
    \ \" \"\n        gsub(/[ .]/, \"\", $0)\n        notes = notes \" \"\n       \
    \ gsub(/[ o|]/, \"\", $0)\n        notes = notes \" \"\n        gsub(/[ o|]/,\
    \ \"\", $0)\n        notes = notes \" \"\n        gsub(/[ o|]/, \"\", $0)\n  \
    \      notes = notes \" \"\n        gsub(/[ o|]/, \"\", $0)\n        notes = notes\
    \ \" \"\n        gsub(/[ o|]/, \"\", $0)\n", "    echo $1 | sed 's/.\\(.\\)/\\\
    1\"|\"/g' | sed \"s/.\\(..\\)/\\1|\"/g\"", "\tlocal music_str=\"$1\"\n\tlocal\
    \ music_str_size=${#music_str}\n\tlocal music_str_len=$(wc -c <<< \"${music_str}\"\
    )\n\tlocal music_str_ind=1\n\tlocal music_str_beats=0\n\tlocal music_str_index=${music_str_len}\n\
    \tlocal music_str_len_incr=0\n\tlocal music_str_beat_count=0\n\tlocal music_str_beat_len=0\n\
    \tlocal music_str_beat_len_incr=0\n\tlocal music_str_beat_ind=1\n\tlocal music_str_beat_num=0\n\
    \tlocal music_str_beat_num_new=0\n\tlocal music_str_beats_new=1\n\tlocal music_str_beats_old=1\n\
    \tlocal music_str_beat_len_index=0\n\tlocal music_str_len_incr_index=0\n\tlocal\
    \ music_str_index_new=-1\n\tlocal music_str_len_new=0\n\tlocal music_str_beat_counts_new=\n\
    \tfor ((music_str_ind=0; music_str_ind < music_str_len; music_str_ind++)); do\n\
    \t\tlocal music_str_beats_old=$((music_str_beats_new))\n\t\tlocal music_str_beat_len_old=$(echo\
    \ \"${#music_str[music_str_ind:music_str_ind+1]}\"|awk '{print $1}')\n\t\tlocal\
    \ music_str_beat_len_incr=$((music_str_beat_len_old))\n\t\tlocal music_str_beat_num_new=$(echo\
    \ \"${music_str[music_str_ind:music_str_ind+1]}\"|awk '{print length($1)}')\n\t\
    \tlocal music_str_beat_counts_new+=\"\\\"\"$music_str_beats_old\"\\\"\"\n\t\t\
    local music_str_len_incr_index=$(echo \"${music_str_ind:music_str_ind+music_str_beat_num_new+1}\"\
    |awk -F: '{print $1}')\n\t\tlocal music_str_beat_count_new=$((music_str_beats_old\
    \ + music_str_beat_num_new - 1))\n\t\tlocal music_str_beat_ind_new=$(echo \"${music_str_ind:music_str_ind+music_str_beat_num_new+1}\"\
    |awk -F: '{print $1}')\n\t\tlocal music_str_beat_num_new=$(echo \"${music_str[music_str_ind:music_str",
  "\tlocal notes=\"$1\"\n\tlocal count\n\tlocal note\n\tlocal last\n\twhile IFS= read\
    \ -r note; do\n\t\tif [[ \"$note\" == \"$last\" ]]; then\n\t\t\tcount=\"$(( ${count}+1\
    \ ))\"\n\t\telse\n\t\t\tif [[ \"$note\" == $last ]]; then\n\t\t\t\tcount=\"$((\
    \ ${count} ))\"\n\t\t\telse\n\t\t\t\tlast=\"$note\"\n\t\t\t\tcount=\"1\"\n\t\t\
    \tfi\n\t\tfi\n\tdone\n\techo \"\\\"${count}\\\"\"", "    local str=$1\n    local\
    \ out\n    local i\n    out=( $(echo $str | sed 's/^\\([o|\\.\\]\\)\\([A-Za-z0-9]*\\\
    )$/\\1\\2/'| sed 's/^\\([A-Za-z0-9]*\\)\\([o|\\.\\]\\)\\([A-Za-z0-9]*\\)$/\\1\\\
    2\\3/') )\n    for i in ${!out[@]}; do\n        if [[ \"${out[$i]}\" != \"\" ]];\
    \ then\n            out[$i]=$(echo $out[$i] | sed -e 's/\"//g' -e 's/\"//g')\n\
    \            out[$i]=$(echo $out[$i] | sed -e 's/'\\''//g' -e 's/'\\''//g')\n\
    \            out[$i]=$(echo $out[$i] | sed -e 's/,//g' -e 's/,//g')\n        \
    \    out[$i]=$(echo $out[$i] | sed -e 's/:/://g' -e 's/:/://g')\n            out[$i]=$(echo\
    \ $out[$i] | sed -e 's/;//g' -e 's/;//g')\n            out[$i]=$(echo $out[$i]\
    \ | sed -e 's/,//g')\n            out[$i]=$(echo $out[$i] | sed -e 's/=//g')\n\
    \            out[$i]=$(echo $out[$i] | sed -e 's/,//g')\n            out[$i]=$(echo\
    \ $out[$i] | sed -e 's/'\\''//g' -e 's/'\\''//g')\n            out[$i]=$(echo\
    \ $out[$i] | sed -e 's/^//g' -e 's/$//g')\n            out[$i]=$(echo $out[$i]\
    \ | sed -e 's/,//g')\n            out[$i]=$(echo $out[$i] | sed -e 's/,//g')\n\
    \            out[$i]=$(echo $out[$i] | sed -e 's/$//g')\n            out[$i]=$(echo\
    \ $out[$i] | sed -e 's/,//g')\n            out[$i]=$(echo $out[$i] | sed -e 's/^//g'\
    \ -e 's/$//g')\n            out[$i]=$(echo $out[$i] | sed -e 's/,//g')\n     \
    \       out[$i]=$(echo $out[$i] | sed -e 's/,//g')\n            out[$i]=$(echo\
    \ $out[$i] | sed -e 's/\"//g' -e 's/\"//g')\n            out", "    local music_string=\"\
    $1\"\n    local music_notes=()\n    local i=0 j=0\n    while [ $i -lt ${#music_string}\
    \ ]; do\n        local next_note=\"${music_string:$i:1}\"\n        local last_note=\"\
    ${music_string:$i:2}\"\n        if [ \"${last_note}\" = \".\" ]; then\n      \
    \      ((j++))\n        else\n            if [ \"${next_note}\" = \"o\" ]; then\n\
    \                ((j+=4))\n            elif [ \"${next_note}\" = \"|\" ]; then\n\
    \                ((j+=2))\n            else\n                ((j+=1))\n      \
    \      fi\n        fi\n        music_notes+=(${j})\n        ((i++))\n    done\n\
    \    echo \"${music_notes[@]}\"", "    local notes=\"${1}\"\n\n    local beats\
    \ note\n    beats=\"\"\n    note=\"o\"\n    while read -r note; do\n        if\
    \ [[ \"$note\" == \".\" ]]; then note=\"$note\"; continue; fi\n        if [[ \"\
    $note\" == \"o\" ]]; then note=\"$note\"; beats=\"${beats}$((${beats:-})+1)\"\
    ; continue; fi\n        if [[ \"$note\" == \"o|\" ]]; then note=\"$note\"; beats=\"\
    ${beats}$((${beats:-})/2)\"; continue; fi\n        echo \"$beats$note\"\n    \
    \    beats=\"\"\n    done <<< \"$notes\"", "    local music_notes=$1\n    local\
    \ music_beats=\"\"\n\n    music_notes=${music_notes/ /\"\"}\n    music_notes=${music_notes/\\\
    ^/\"\"}\n    music_notes=${music_notes/\\|/\"\"}\n\n    for music_note in $music_notes\n\
    \    do\n        music_beats=$music_beats\"\\\"$music_note\\\"$music_beats\"\n\
    \    done\n\n    echo ${music_beats}", "    music_notes=\"$1\"\n\n    music_notes_array=()\n\
    \    for note in $music_notes; do\n        music_notes_array+=(\n            #\
    \ Split note into three parts\n            # One note has only one '|' symbol\n\
    \            # Two notes has two '|' symbols\n            # Three notes has '|'\
    \ symbols twice, once before and once after the note\n            echo \"\\\"\
    $(echo $note | tr '|' '\\n' | wc -m)\\\"\"\n        )\n    done\n    echo $(echo\
    \ ${music_notes_array[@]} | sed -e 's/[[:space:]]//g')", "    local music_str=\"\
    $1\"\n    local music_arr=()\n    while read -r line\n    do\n        if [[ $line\
    \ =~ (.)$ ]]\n        then\n            music_arr+=(\"\\\"${BASH_REMATCH[1]}\\\
    \"\") #double quote for single note\n        fi\n    done < <(echo $music_str\
    \ |sed -e 's/[\\.\\|o\\|]/ /g')\n    echo \"${music_arr[@]}\"", "\tlocal music_str=$1\n\
    \tlocal music_arr_length=${#music_str}\n\tlocal music_arr=()\n\tlocal i b\n\t\
    local tmp\n\tlocal temp\n\n\tfor ((i=0;i<music_arr_length;i+=1)); do\n\t\tb=${music_str[i:i+1]}\n\
    \t\ttemp=`echo \"${b} | $music_str\" | grep -o '^[[:digit:]]*$' | wc -l`\n\t\t\
    case $temp in \n\t\t0)\n\t\t\tbreak;;\n\t\t1)\n\t\t\tmusic_arr[$i]=$temp;;\n\t\
    \t*)\n\t\t\tmusic_arr[$i]=$((temp-1));;\n\t\tesac\n\tdone\n\n\t# for ((i=0;i<music_arr_length;i+=1));\
    \ do\n\t# \techo \"${music_arr[$i]}\"\n\t# done\n\techo \"${music_arr[@]}\"",
  "    local str=$1\n    local output\n    local idx\n    local count\n\n    idx=0\n\
    \    output=()\n    count=1\n    while [ $idx -lt ${#str} ]; do\n        case\
    \ \"${str[idx]}\" in\n            \"o\")\n                output+=($count)\n \
    \               count=$((count+1))\n                ;;\n            \"o|\")\n\
    \                output+=($count)\n                count=$((count+2))\n      \
    \          ;;\n            \".|\")\n                output+=($count)\n       \
    \         count=$((count+1))\n                ;;\n            *)\n           \
    \     count=$((count+1))\n                ;;\n        esac\n        idx=$((idx+1))\n\
    \    done\n    return \"${output[@]}\"", '  # TODO: Implement this', "    local\
    \ music_str=$1\n    local music_arr=()\n    local i=0\n    while [ $i -lt ${#music_str}\
    \ ]; do\n        if [[ $music_str[$i] == 'o' ]]; then\n            music_arr[$i]=`expr\
    \ $((${music_arr[$i]} + 4))`\n        elif [[ $music_str[$i] == 'o|' ]]; then\n\
    \            music_arr[$i]=`expr $((${music_arr[$i]} + 2))`\n        elif [[ $music_str[$i]\
    \ == '.|' ]]; then\n            music_arr[$i]=`expr $((${music_arr[$i]} + 1))`\n\
    \        fi\n        i=$((i+1))\n    done\n    echo $music_arr", "  local STR=$1\n\
    \n  local S='\"\"'\n  local N='\"\"'\n  local K='\"\"'\n  local O='\"\"'\n\n \
    \ local W=0\n  local H=0\n  local L=0\n\n  for (( i=0; i<${#STR}; i++ )); do\n\
    \    case ${STR:$i:1} in\n      \"o\") S=\"${S}4\"\n           O=\"${O}4\"\n \
    \          W=4\n           H=4\n           L=2\n           K=\"${K}4\"\n     \
    \ ;;\n      \"|\") S=\"${S}2\"\n           O=\"${O}2\"\n           W=2\n     \
    \      H=2\n           L=1\n           K=\"${K}2\"\n      ;;\n      \".\") S=\"\
    ${S}1\"\n           O=\"${O}1\"\n           W=1\n           H=1\n           L=1\n\
    \           K=\"${K}1\"\n      ;;\n      *) S=\"${S}1\"\n           O=\"${O}1\"\
    \n           W=1\n           H=1\n           L=1\n           K=\"${K}1\"\n   \
    \   ;;\n    esac\n  done\n\n  echo $S\n  echo $N\n  echo $K\n  echo $O", "   \
    \ # your code goes here\n    echo \"$1\" | awk -F'\\\\' '{print \"\\\"\"$1\"\\\
    \"\"}'", "  local music_str=$1\n  local music_str_count=0\n  local last_char=$(echo\
    \ $music_str | sed -e 's/^.*//' -e 's/^[ ]//g')\n  local music_arr=()\n\n  # count\
    \ number of music chars in string\n  for music in $music_str; do\n    music_str_count=$((music_str_count\
    \ + 1))\n  done\n\n  # for each music char, parse string and push integer number\
    \ of beats into music_arr\n  for music_char in $(seq 1 $music_str_count); do\n\
    \    music_arr+=$(echo \"$music_str\" | sed -e \"s/^$music_char//g\" | sed -e\
    \ 's/$music_char\\$/0/g' | sed -e 's/^\\([^ ]*\\)//g')\n  done\n\n  # if last\
    \ music char is 'o' then push 0, else push previous music arr\n  if [ \"$last_char\"\
    \ == \"o\" ]; then\n    music_arr+=( \"0\" )\n  else\n    music_arr+=( \"${music_arr[@]}\"\
    \ )\n  fi\n\n  return \"${music_arr[@]}\"", "    local string=$1\n\n    local\
    \ notes=()\n\n    local note='\"'\n    local last_beat='\"'\n\n    # Skip first\
    \ character\n    string=\"${string:1}\"\n\n    while [ \"$string\" != \"\" ];\
    \ do\n        if [[ \"$string\" == \"|\" ]]; then\n            last_beat=\"${last_beat}${note}\"\
    \n            note+=\"|\"\n        else\n            last_beat=\"${last_beat}${note}\"\
    \n            note+=\"o\"\n        fi\n\n        notes+=\"\\\"${last_beat}\\\"\
    \"\n\n        string=\"${string:0:1}\"\n    done\n\n    notes+=\"${note:0:1}\"",
  "    local note=\"$1\"\n\n    local note_to_beats_map=( $(\n        local beat_count=0\n\
    \        local note_counter=0\n        local note_beat_array=( $(\n          \
    \  local last_beats=()\n\n            while IFS= read -r note_string; do\n   \
    \             if [ \"$note_string\" != \".\" ]; then\n                    note_counter=$((note_counter+1))\n\
    \                    if [ \"$note_string\" == \"o\" ]; then\n                \
    \        beat_count=$((beat_count+4))\n                        note_beat_array+=(\
    \ \"$beat_count\" )\n                    elif [ \"$note_string\" == \"|\" ]; then\n\
    \                        beat_count=$((beat_count+2))\n                      \
    \  last_beats=( \"${last_beats[@]}\" \"$beat_count\" )\n                    elif\
    \ [ \"$note_string\" == \".\" ]; then\n                        beat_count=$((beat_count+1))\n\
    \                        note_beat_array+=( \"$beat_count\" )\n              \
    \      else\n                        note_beat_array+=( \"$beat_count\" )\n  \
    \                      printf \"FATAL: Illegal musical note \\\"$note_string\\\
    \"\"\n                        exit 1\n                    fi\n               \
    \ fi\n            done < <(\n                # This part is to parse note to array\
    \ and add beats to array (for last beat)\n                echo \"$note_string\"\
    \ | awk '{for (i=1;i<=NF;i++) printf \"\\\"%s\\\",\", $i; print \"\\\"\"}'\n \
    \           )\n        )\n    )\n\n    local beat_map=( $(\n        local i=0\n\
    \        while [ $i -lt ${#note_to_beats_map[@]} ]; do\n            local last_beats=(\
    \ \"${last_beats[@]}\" )\n            local note_beats_count=${note_to_beats_map[$i]}\n\
    \            local new_beats=( $(\n                local j=0\n               \
    \ while [ $j -lt ${#last_beats[@]} ]; do\n                    local beat=( \"\
    ${last_beats[$j]}\" )\n                    local note=\"$(echo \"${note}\" | cut\
    \ -d\",\" -f1)\"\n                    local beats=${beat}\n                  \
    \  echo \"${beats[@]:0:1}\"\n                    beats=${beats:1}\n          \
    \          for (( i=0; i<beats_count; i++ )); do\n                        beats=${beats}\"\
    \ \"${note_beat_array[$((j+i))]}\"\n                    done\n               \
    \     last_beats=( \"${last_beats[@]}\" \"$beats\" )\n                    j=$((j+beats_count))\n\
    \                done\n            ))\n            i=$((i+1))\n        done\n\
    \    ))", "    local string=$1\n    local beats=0\n    local notes=\"${string//o}\"\
    \n    local halfnotes=\"${notes//o|}\"\n    local quaternotes=\"${halfnotes//.|}\"\
    \n    local n=0\n    local note\n\n    for (( i=0; i<${#halfnotes}; i++ )); do\n\
    \        if [ ${halfnotes:$i:1} == . ] ; then\n            if [ $(($beats+$n+1))\
    \ -gt 0 ] ; then\n                echo \"$beats\"\n            fi\n          \
    \  beats=0\n            n=$((n+1))\n        else\n            beats=$((beats+1))\n\
    \        fi\n        note=\"${halfnotes:$i:1}\"\n        if [ \"$note\" != . ]\
    \ ; then\n            echo \"\\\"$note\\\"\"\n        fi\n    done\n    for ((\
    \ i=0; i<${#quaternotes}; i++ )); do\n        if [ ${quaternotes:$i:1} == . ]\
    \ ; then\n            if [ $(($beats+$n+1)) -gt 0 ] ; then\n                echo\
    \ \"$beats\"\n            fi\n            beats=0\n            n=$((n+1))\n  \
    \      else\n            beats=$((beats+1))\n        fi\n        note=\"${quaternotes:$i:1}\"\
    \n        if [ \"$note\" != . ] ; then\n            echo \"\\\"$note\\\"\"\n \
    \       fi\n    done", "    echo \"$1\" | sed -n 's/\\<\\(..\\|..\\)/ \\1/p' |\
    \ tr '[:upper:]' '[:lower:]' | tr \" \" '\\012' | \\\n        tr \" \" \"\\012\"\
    \ | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\
    \\012\" | tr \" \" \"\\012\" | \\\n        tr \" \" \"\\012\" | tr \" \" \"\\\
    012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \"\
    \ \"\\012\" | \\\n        tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\
    \\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | \\\n\
    \        tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \"\
    \ \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | \\\n        tr \" \"\
    \ \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr\
    \ \" \" \"\\012\" | tr \" \" \"\\012\" | \\\n        tr \" \" \"\\012\" | tr \"\
    \ \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\"\
    \ | tr \" \" \"\\012\" | \\\n        tr \" \" \"\\012\" | tr \" \" \"\\012\" |\
    \ tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\\
    012\" | \\\n        tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\"\
    \ | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | \\\n      \
    \  tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\\
    012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | \\\n        tr \" \" \"\\012\"\
    \ | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\
    \\012\" | tr \" \" \"\\012\" | \\\n        tr \" \" \"\\012\" | tr \" \" \"\\\
    012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \"\
    \ \"\\012\" | \\\n        tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\
    \\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | tr \" \" \"\\012\" | \\\n\
    \        tr ", "    local music i\n    music=$1\n    local len\n    len=$(echo\
    \ \"${#music}\" | cut -d \"|\" -f1)\n    for i in $(seq 1 ${len}); do\n      \
    \  case \"${music}\" in\n            \"o\" | \".\")\n                if [[ ${music}\
    \ == \"o\" ]]; then\n                    echo \"${i}\"\n                elif [[\
    \ ${music} == \"o|\" ]]; then\n                    echo \"${i}\" \"${len}\"\n\
    \                fi\n                ;;\n            \"o|\")\n               \
    \ if [[ ${music} == \"o|\" ]]; then\n                    echo \"${i}\" \"${len}\"\
    \n                fi\n                ;;\n        esac\n    done", "    echo $1\
    \ | sed 's/\\(.\\)|\\(.\\)\\(.\\)\\(....\\)/\\1,\\2\\3/g'", "    local music_string=\"\
    $1\"\n    local music_list\n    music_list=$(echo $music_string | sed 's/o//g;\
    \ s/o|//g; s/\\.\\|//g;')\n    echo $music_list", "    music_notes=\"$1\"\n  \
    \  music_notes_without_pipes=\"${music_notes//| }\"\n    music_notes_without_spaces_numbers=${music_notes_without_pipes//[![:space:]]}\n\
    \    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[\\\
    [\\]]/}\n    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[[:space:]]//}\n\
    \    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[\\\
    ]\\[]/}\n    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[\\\
    [\\]\\[]/}\n    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[[:digit:]]/}\n\
    \    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[[:graph:]]/}\n\
    \    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[[:lower:]]/}\n\
    \    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[[:upper:]]/}\n\
    \    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[[:punct:]]/}\n\
    \    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[[:blank:]]/}\n\
    \    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[[:space:]]//}\n\
    \    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[[:print:]]/}\n\
    \    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[[:cntrl:]]/}\n\
    \    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[[:blank:]]/}\n\
    \    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[[:blank:]]/}\n\
    \    music_notes_without_spaces_numbers=${music_notes_without_spaces_numbers//[[:blank:]]/}\n\
    \    music_notes_without_spaces_numbers=${music_", "    local music_string=$1\n\
    \    local music_len=${#music_string}\n    local note_count=0\n    local music_notes=()\n\
    \    local music_notes_len=0\n    local music_notes_string=\"\"\n\n    local music_notes_str=\"\
    \ \"\n    local music_notes_beats=0\n\n    local music_notes_last_octave=\"\"\n\
    \n    local music_notes_beats_str=\" \"\n    local music_notes_beats_octave=0\n\
    \n    local music_notes_last_octave_str=\" \"\n    local music_notes_last_octave_beats=0\n\
    \n    local music_notes_last_octave_notes_str=\"\"\n\n    while (( music_notes_len\
    \ > 0 )) ; do\n        local music_notes_str=\"${music_string:$music_notes_beats_octave:1}\"\
    \n        local music_notes_beats=$(( music_notes_beats +  1 ))\n        local\
    \ music_notes_octave=$(( music_notes_beats_octave +  1 ))\n\n        music_notes_last_octave=\"\
    ${music_notes_str:$music_notes_beats_octave_last_octave_notes_beats:1}\"\n   \
    \     music_notes_last_octave_beats=$(( music_notes_beats_octave_last_octave_notes_beats\
    \ +  1 ))\n        music_notes_last_octave_octave=$(( music_notes_beats_octave_last_octave_notes_octave\
    \ +  1 ))\n        music_notes_last_octave_notes_str=\"${music_notes_last_octave:0:1}\"\
    \n\n        if (( music_notes_last_octave_notes_str == \"o\" )) ; then\n     \
    \       music_notes_beats_octave_last_octave_notes_beats=$music_notes_beats\n\
    \            music_notes_beats_octave_last_octave_notes_octave=$music_notes_octave\n\
    \        fi\n\n        music_notes_beats_str=\"${music_notes_beats_str:0:1}\"\n\
    \        music_notes_octave_str=\"${music_notes_octave_str:0:1}\"\n\n        if\
    \ (( music_notes_len > 1 )) ; then\n            music_notes_str=\"${music_string:$music_notes_beats_",
  "    local music_notes=\"$1\"\n    local i\n    local j\n    local output\n    local\
    \ music\n    local beats\n    local note\n    local half\n    local quat\n   \
    \ local whole\n\n    music_notes=$(echo \"$music_notes\" | tr -d '\\015')\n  \
    \  music_notes=$(echo \"$music_notes\" | tr '\\015' '\\n')\n    for music in $music_notes;\
    \ do\n        if [[ $music != ' ' ]]; then\n            beats=$(echo \"$music\"\
    \ | awk '{print $1}')\n            note=$(echo \"$music\" | awk '{print $2}')\n\
    \            half=$(echo \"$music\" | awk '{print $3}')\n            quat=$(echo\
    \ \"$music\" | awk '{print $4}')\n            whole=$(echo \"$music\" | awk '{print\
    \ $5}')\n            if [[ $half == 0 ]]; then\n                output+=\"\\\"\
    $beats\\\"\"\n            elif [[ $quat == 0 ]]; then\n                output+=\"\
    \\\"$beats\\\",\\\"$beats\\\"\"\n            elif [[ $whole == 0 ]]; then\n  \
    \              output+=\"\\\"$beats\\\",\\\"$beats\\\",\\\"$beats\\\"\"\n    \
    \        elif [[ $half == 1 ]]; then\n                output+=\"\\\"$beats\\\"\
    ,\\\"$beats\\\",\\\"$beats\\\"\"\n            elif [[ $quat == 1 ]]; then\n  \
    \              output+=\"\\\"$beats\\\",\\\"$beats\\\",\\\"$beats\\\",\\\"$beats\\\
    \"\"\n            elif [[ $whole == 1 ]]; then\n                output+=\"\\\"\
    $beats\\\",\\\"$beats\\\",\\\"$beats\\\",\\\"$beats\\\",\\\"$beats\\\"\"\n   \
    \         fi\n        fi\n    done\n    output=$(echo \"$output\" | awk '{print\
    \ $1 \",\" $2 \",\" $3 \",\" $4 \",\" $5 \",\" $6 \",\" $7 \",\" $8 \",\" $9}')\n\
    \    output=$(echo \"$output\" | awk '{print substr($1, 1, length($1)-1)}')\n\
    \    echo $output", "    local string=$1\n    local music_symbols=()\n    local\
    \ beats=()\n    for symbol in $string; do\n        case \"$symbol\" in\n     \
    \       \"o\") music_symbols+=\"1\";;\n            \"o|\") music_symbols+=\"2\"\
    ;;\n            \".|\") music_symbols+=\"4\";;\n            *) printf 'Invalid\
    \ symbol: \"%s\"\\n' \"$symbol\";;\n        esac\n    done\n    local total_beats=${#music_symbols[@]}\n\
    \    for ((i=0; i<${#music_symbols[@]}; i++)); do\n        beats+=$(( ${music_symbols[i]}\
    \ * total_beats ))\n    done\n    echo \"${beats[@]}\"", "  local music s\n  #\
    \ remove all spaces at the beginning and at the end\n  music=${1//[[:blank:]]/}\n\
    \  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n\
    \  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n\
    \  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n\
    \  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n\
    \  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n\
    \  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n\
    \  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n\
    \  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n\
    \  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n\
    \  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n\
    \  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n\
    \  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n  music=${music//[[:blank:]]/}\n\
    \  music=${music//[[:blank:]]/}\n  music", "  # Initialize empty dictionary\n\
    \  echo \"$1\" | tr '|' '\\n' | sed -e 's/o\\|\\.\\|//g' | awk '{ print $2 }'\
    \ | tr ' ' '\\n' | cut -d '\"' -f1 | sort | uniq | tr \" \" ','", "  local notes=$1\n\
    \  local num_beats=$(echo \"$notes\" | awk '{\n    if ($1 ~ /\\//) {\n      printf(\"\
    %.0f \", $2)\n    } else if ($1 ~ /o\\|/) {\n      printf(\"%.0f \", $2)\n   \
    \ } else if ($1 ~ /\\.\\|/) {\n      printf(\"%.0f \", $2)\n    } else {\n   \
    \   printf(\"%.0f \", $2)\n    }\n  }')\n  echo $num_beats", "  local music output\n\
    \  music=\"$1\"\n\n  output=$(echo \"$music\" | sed 's/o\\(.\\)/\"1\"/; s/o\\\
    |(\\(.\\))/\\1/; s/\\.\\|(\\(.\\))/\\1/')\n  output=${output//\"}\"}\n\n  # convert\
    \ output to ints instead of strings\n  output=$(echo \"$output\" | sed 's/\"//g'\
    \ | sed 's/ //g' | tr '\\n' ' ' | sed 's/^ *//g' | tr ' ' '\\n' | sed 's/ *$//g'\
    \ | sed 's/^\"//g')\n  output=$(echo \"$output\" | sed 's/\"//g' | sed 's/ //g'\
    \ | tr '\\n' ' ' | sed 's/^ *//g' | tr ' ' '\\n' | sed 's/ *$//g' | sed 's/^\"\
    //g')\n  output=$(echo \"$output\" | sed 's/\"//g' | sed 's/ //g' | tr '\\n' '\
    \ ' | sed 's/^ *//g' | tr ' ' '\\n' | sed 's/ *$//g' | sed 's/^\"//g')\n  output=$(echo\
    \ \"$output\" | sed 's/\"//g' | sed 's/ //g' | tr '\\n' ' ' | sed 's/^ *//g' |\
    \ tr ' ' '\\n' | sed 's/ *$//g' | sed 's/^\"//g')\n  output=$(echo \"$output\"\
    \ | sed 's/\"//g' | sed 's/ //g' | tr '\\n' ' ' | sed 's/^ *//g' | tr ' ' '\\\
    n' | sed 's/ *$//g' | sed 's/^\"//g')\n  output=$(echo \"$output\" | sed 's/\"\
    //g' | sed 's/ //g' | tr '\\n' ' ' | sed 's/^ *//g' | tr ' ' '\\n' | sed 's/ *$//g'\
    \ | sed 's/^\"//g')\n  output=$(echo \"$output\" | sed 's/\"//g' | sed 's/ //g'\
    \ | tr '\\n' ' ' | sed 's/^ *//g' | tr ' ' '\\n' | sed 's/ *$//g' | sed 's/^\"\
    //g')\n  output=$(echo \"$output\" | sed 's/\"//g' | sed 's/ //g' | tr '\\n' '\
    \ ' | sed 's/^ *//g' | tr ' ' '\\n' | sed '", "    local music # music to parse\n\
    \    music=\"$1\"\n    local nbeat # beats current note\n    local nlastbeat #\
    \ beats last note\n    local nlength # total note length\n    local result # resulting\
    \ array\n    nbeat=0\n    nlastbeat=4\n    nlength=${#music}\n    for (( i=0;\
    \ i < nlength; i++ )); do\n        # print progress message\n        if [ ${music[i]}\
    \ != \"o\" ] && [ ${music[i]} != \"o|\" ] && [ ${music[i]} != \".|\" ]; then\n\
    \            echo \"music element [$i]: '$music[i]'\"\n        fi\n        \n\
    \        # handle notes\n        if [ ${music[i]} == \"o\" ]; then\n         \
    \   result[$i]=\"${nbeat}\"\n            nbeat=0\n            ((nbeat+=4))\n \
    \       elif [ ${music[i]} == \"o|\" ]; then\n            result[$i]=\"${nbeat}\"\
    \n            nbeat=0\n            ((nbeat+=2))\n        elif [ ${music[i]} ==\
    \ \".|\" ]; then\n            result[$i]=\"${nbeat}\"\n            nbeat=0\n \
    \           ((nbeat+=1))\n        else\n            result[$i]=\"${music[i]}\"\
    \n        fi\n        \n        # update last beat\n        if [ ${music[i]} ==\
    \ \"o\" ] || [ ${music[i]} == \"o|\" ] || [ ${music[i]} == \".|\" ]; then\n  \
    \          if (( nbeat > nlastbeat )); then\n                ((nlastbeat+=1))\n\
    \            else\n                ((nlastbeat+=4))\n            fi\n        fi\n\
    \    done\n    echo \"${result[@]}\"", "  local s=$1\n  s=${s//o|/}\n  s=${s//.|/}\n\
    \  s=${s//|o|/}\n  s=${s//o|/}\n  s=${s//.|/}\n  s=${s//o|/}\n  s=${s//.|/}\n\
    \  s=${s//o|/}\n  s=${s//.|/}\n  s=${s//o|/}\n  s=${s//|o|/}\n  s=${s//o|/}\n\
    \  s=${s//.|/}\n  s=${s//o|/}\n  s=${s//.|/}\n  s=${s//o|/}\n  s=${s//.|/}\n \
    \ s=${s//o|/}\n  s=${s//|o|/}\n  s=${s//o|/}\n  s=${s//.|/}\n  s=${s//o|/}\n \
    \ s=${s//|o|/}\n  s=${s//o|/}\n  s=${s//.|/}\n  s=${s//o|/}\n  s=${s//|o|/}\n\
    \  s=${s//o|/}\n  s=${s//.|/}\n  s=${s//o|/}\n  s=${s//|o|/}\n  s=${s//o|/}\n\
    \  s=${s//|o|/}\n  s=${s//o|/}\n  s=${s//|o|/}\n  s=${s//o|/}\n  s=${s//|o|/}\n\
    \  s=${s//o|/}\n  s=${s//|o|/}\n  s=${s//o|/}\n  s=${s//|o|/}\n  s=${s//o|/}\n\
    \  s=${s//|o|/}\n  s=${s//o|/}\n  s=${s//|o|/}\n  s=${s//o|/}\n  s=${s//|o|/}\n\
    \  s=${s//o|/}\n  s=${s//|o|/}\n  s=${s//o|/}\n  s=", "    local notes=$1\n  \
    \  local last_note\n    local last_beat\n    local beats\n    local note\n   \
    \ local note_last\n    local current_beat\n    local current_note\n    local last_beat_value\n\
    \    local last_note_value\n    local beat_value\n    local note_value\n    local\
    \ beat_list\n    local note_array\n    local last_note_array\n    local last_beat_array\n\
    \n    last_beat=()\n    last_note=()\n    beats=()\n    note=()\n    note_last=()\n\
    \    current_beat=()\n    current_note=()\n    last_beat_value=0\n    last_note_value=0\n\
    \    beat_value=0\n    note_value=0\n    beat_list=()\n    note_array=()\n   \
    \ last_note_array=()\n    last_beat_array=()\n\n    note_array+=(\"0\")\n    last_note_array+=(\"\
    0\")\n    beat_array+=(\"0\")\n    last_beat_array+=(\"0\")\n\n    beat_list=()\n\
    \    note_list=()\n    last_note_list=()\n\n    for x in \"${notes}\"; do\n  \
    \      note=\"$x\"\n        case \"$note\" in\n            \"o\")\n          \
    \      note_last=()\n                last_beat=()\n                last_note=()\n\
    \                beat_value=0\n                current_beat=()\n             \
    \   current_note=()\n                current_beat+=($beat_value)\n           \
    \     beat_value=0\n                note_value=0\n                beat_list=()\n\
    \                note_list=()\n                last_beat_list=()\n           \
    \     last_note_list=()\n                beat_list+=(\"0\")\n                last_beat_list+=(\"\
    0\")\n                last_note_list+=(\"0\")\n                note_array+=(\"\
    0\")\n                last_note_array+=(\"0\")\n                last_beat_array+=(\"\
    0\")\n                ;;\n            \"o|\")\n                note_last=()\n\
    \                last_beat=()\n                last_note=()\n                beat_value=0\n\
    \                current_beat=()\n                current_note=()\n          \
    \      current_beat+=($beat_value)\n                beat_value=0\n           \
    \     note_value=0\n                beat_list=()\n                note_list=()\n\
    \                last_beat_list=()\n                last_note_list=()\n      \
    \          beat_list+=(\"0\")\n                last_beat_list+=(\"0\")\n     \
    \           last_note_list+=(\"0\")\n                note_array+=(\"0\")\n   \
    \             last_note_array+=(\"0\")\n                last_beat_array+=(\"0\"\
    )\n                ;;\n            \".|\")\n                note_last=()\n   \
    \             last_beat=()\n                last_note=()\n                beat_value",
  "    local result=()\n    local input=${1:-\"\"}\n    local prev=\"o\"\n    while\
    \ [[ $input != \"\" ]]; do\n        if [[ \"$prev\" == \"o\" ]] && [[ \"$input\"\
    \ == \"o|\" ]]; then\n            prev=\"o\"\n            ((result+=(\"$input\"\
    )))\n        elif [[ \"$prev\" == \"o\" ]]; then prev=\".\"; else prev=\"o\";\
    \ fi\n        ((result+=(\"$prev\"))) input=${input:1}\n    done\n    echo \"\
    ${result[@]}\"", "    local i=1\n    local array=()\n    while [ $i -lt ${#1}\
    \ ]; do\n        if [[ ${1:$i} == *o* ]]; then\n            array=(\"${array[@]}\"\
    \ \"$(( ${i:$i+1} * 4 ))\")\n            i=$((i+1))\n        elif [[ ${1:$i} ==\
    \ *o\\|* ]]; then\n            array=(\"${array[@]}\" \"$(( ${i:$i+1} * 2 ))\"\
    )\n            i=$((i+1))\n        elif [[ ${1:$i} == *\\.\\|* ]]; then\n    \
    \        array=(\"${array[@]}\" \"$(( ${i:$i+1} ))\")\n            i=$((i+1))\n\
    \        else\n            array=(\"${array[@]}\" \"$(( ${i:$i+1} ))\")\n    \
    \        i=$((i+1))\n        fi\n    done\n    echo \"${array[@]}\"", "\tlocal\
    \ notes=$1\n\tlocal result=''\n\n\tlocal i\n\tlocal count=0\n\tfor i in ${notes};\
    \ do\n\t\t[[ $i =~ o || $i =~ o\\| || $i =~ \\. ]] && result=\"${result}\\\"$((count+1))\\\
    \"; \"\n\t\t(( count++ ))\n\tdone\n\n\techo $result", "    local notes=$1\n  \
    \  local numbered_notes=\"\"\n    while [[ $notes ]]; do\n        case \"${notes:0:1}\"\
    \ in\n            '.' | '.|' | '.*|') break ;;\n            'o') numbered_notes=\"\
    ${numbered_notes}${notes:1}\" ;;\n            'o|') numbered_notes=\"${numbered_notes}${notes:2}\"\
    \ ;;\n            *)\n                # we may have found a note in middle of\
    \ string and there are not enough beats\n                # in this note, let's\
    \ push it to the end of notes\n                if [[ $numbered_notes != \"\" ]];\
    \ then\n                    numbered_notes=\"${numbered_notes}, ${notes:1}\"\n\
    \                    notes=$(echo $notes | sed 's/,$//')\n                fi\n\
    \                numbered_notes=${numbered_notes}, ${notes}\n                break\
    \ ;;\n        esac\n    done\n    echo \"$numbered_notes\"", "\tlocal music_str=$1\n\
    \tlocal music_array\n\tlocal beat_count\n\tlocal i\n\tmusic_array=()\n\tbeat_count=0\n\
    \n\tfor i in \"${music_str//[!.]*}\"; do\n\t\tif [[ \"$i\" != \".\" ]]; then\n\
    \t\t\t((beat_count++))\n\t\t\tmusic_array+=($((beat_count - 1)))\n\t\tfi\n\tdone\n\
    \n\tprintf \"[\"\n\tfor (( i = 0; i < ${#music_array[@]}; i++ )); do\n\t\tif [[\
    \ ${music_array[i]} == 0 ]]; then\n\t\t\techo \"\\\"${music_array[i]}\\\" \"\n\
    \t\telse\n\t\t\techo \"\\\"${music_array[i]}\\\"\"\n\t\tfi\n\tdone\n\techo \"\
    ]\\n\"", "    local s\n    local beats\n    local n\n    local i\n\n    beats=(\
    \ $(echo $1 | sed 's/^./ /g' | sed 's/o\\|\\.\\|//g' | awk '{print $1}') )\n \
    \   n=$(( ${#beats[@]} - 1 ))\n\n    s=\n    for ((i=0; i<${#beats[@]}; i++));\
    \ do\n        s=\"$s${beats[i]}${beats[i+1]}\"\n    done\n    echo \"\\\"$((${#beats[@]}\
    \ / 2)-1)\\\"\"", "    echo \"$1\" | grep -o '\\<[0-9]\\>'", "    local music_line=$1\n\
    \    music_line=\"${music_line// /}\"\n    music_line=\"${music_line/ / }\"\n\
    \    music_line=\"${music_line% }\"\n    music_line=\"${music_line##* }\"\n  \
    \  music_line=\"${music_line%% *}\"\n    music_line=\"${music_line% *}\"\n   \
    \ music_line=\"${music_line#* }\"\n    music_line=\"${music_line%% *}\"\n    music_line=\"\
    ${music_line// }\"\n    music_line=\"${music_line# }\"\n    music_line=\"${music_line%\
    \ }\"\n    music_line=\"${music_line%% *}\"\n    music_line=\"${music_line##*\
    \ }\"\n    music_line=\"${music_line%% *}\"\n    music_line=\"${music_line%% *}\"\
    \n    music_line=\"${music_line%% *}\"\n    music_line=\"${music_line% }\"\n \
    \   music_line=\"${music_line##* }\"\n    music_line=\"${music_line%% *}\"\n \
    \   music_line=\"${music_line%% *}\"\n    music_line=\"${music_line%% *}\"\n \
    \   music_line=\"${music_line% }\"\n    music_line=\"${music_line##* }\"\n   \
    \ music_line=\"${music_line%% *}\"\n    music_line=\"${music_line%% *}\"\n   \
    \ music_line=\"${music_line%% *}\"\n    music_line=\"${music_line%% *}\"\n   \
    \ music_line=\"${music_line%% *}\"\n    music_line=\"${music_line%% *}\"\n   \
    \ music_line=\"${music_line%% *}\"\n    music_line=\"${music_line%% *}\"\n   \
    \ music_line=\"${music_line%% *}\"\n    music_line=\"${music_line%% *}\"\n   \
    \ music_line=\"${music_line%% *}\"\n    music_line=\"${music_line%% *}\"\n   \
    \ music_line=\"${music_line%% *}\"\n    music_line=\"${music_line%% *}\"\n   \
    \ music_line=\"${music_line%% *}\"\n    music_line=\"${music_line%% *}\"\n   \
    \ music_line=\"${music_line%% *}\"\n    music_line=\"${music_line%% *}\"\n   \
    \ music_line=\"${music_line%% *}\"\n    music_line=\"${musi", "    echo \"$1\"\
    \ | sed -e 's/ \\+ /\\+/g' -e 's/ \\- /-/g' -e 's/ o/ \\\"0\\\"/g' -e 's/ o/ \\\
    \"1\\\"/g' -e 's/ o/ \\\"2\\\"/g' -e 's/ o/ \\\"3\\\"/g' -e 's/ o/ \\\"4\\\"/g'\
    \ -e 's/ o/ \\\"5\\\"/g' -e 's/ o/ \\\"6\\\"/g' -e 's/ o/ \\\"7\\\"/g' -e 's/\
    \ o/ \\\"8\\\"/g' -e 's/ o/ \\\"9\\\"/g' -e 's/ o/ \\\"10\\\"/g' -e 's/ o/ \\\"\
    11\\\"/g' -e 's/ o/ \\\"12\\\"/g' -e 's/ o/ \\\"13\\\"/g' -e 's/ o/ \\\"14\\\"\
    /g' -e 's/ o/ \\\"15\\\"/g' -e 's/ o/ \\\"16\\\"/g' -e 's/ o/ \\\"17\\\"/g' -e\
    \ 's/ o/ \\\"18\\\"/g' -e 's/ o/ \\\"19\\\"/g' -e 's/ o/ \\\"20\\\"/g' -e 's/\
    \ o/ \\\"21\\\"/g' -e 's/ o/ \\\"22\\\"/g' -e 's/ o/ \\\"23\\\"/g' -e 's/ o/ \\\
    \"24\\\"/g' -e 's/ o/ \\\"25\\\"/g' -e 's/ o/ \\\"26\\\"/g' -e 's/ o/ \\\"27\\\
    \"/g' -e 's/ o/ \\\"28\\\"/g' -e 's/ o/ \\\"29\\\"/g' -e 's/ o/ \\\"30\\\"/g'\
    \ -e 's/ o/ \\\"31\\\"/g' -e 's/ o/ \\\"32\\\"/g' -e 's/ o/ \\\"33\\\"/g' -e 's/\
    \ o/ \\\"34\\\"/g' -e 's/ o/ \\\"35\\\"/g' -e 's/ o/ \\\"36\\\"/g' -e 's/ o/ \\\
    \"37\\\"/g' -e 's/ o/ \\\"38\\\"/g' -e 's/ o/ \\\"39\\\"/g' -e 's/ o/ \\\"40\\\
    \"/g' -e 's/ o/ \\\"41\\\"/g' -e 's/ o/ \\\"42\\\"/g' -e 's/ o/ \\\"43\\\"/g'\
    \ -e 's/ o", "    # Write your code here\n    local str=$1\n    local notes=\"\
    \"\n    local beats=\"\"\n    local half=\"\"\n    local quarter=\"\"\n\n    if\
    \ [ \"$str\" == \"o\" ] || [ \"$str\" == \"o|\" ]; then\n        notes=\"4\"\n\
    \        beats=\"4\"\n        half=\"2\"\n        quarter=\"1\"\n    elif [ \"\
    $str\" == \".|\" ]; then\n        notes=\"2\"\n        beats=\"1\"\n        half=\"\
    1\"\n        quarter=\"1\"\n    elif [ \"$str\" == \"|.\" ]; then\n        notes=\"\
    2\"\n        beats=\"1\"\n        half=\"1\"\n        quarter=\"1\"\n    elif\
    \ [ \"$str\" == \"|o\" ]; then\n        notes=\"2\"\n        beats=\"2\"\n   \
    \     half=\"2\"\n        quarter=\"2\"\n    elif [ \"$str\" == \"|o|\" ]; then\n\
    \        notes=\"2\"\n        beats=\"2\"\n        half=\"2\"\n        quarter=\"\
    2\"\n    elif [ \"$str\" == \".||\" ]; then\n        notes=\"2\"\n        beats=\"\
    2\"\n        half=\"1\"\n        quarter=\"1\"\n    elif [ \"$str\" == \"||.\"\
    \ ]; then\n        notes=\"2\"\n        beats=\"2\"\n        half=\"1\"\n    \
    \    quarter=\"1\"\n    elif [ \"$str\" == \"||o\" ]; then\n        notes=\"2\"\
    \n        beats=\"3\"\n        half=\"3\"\n        quarter=\"3\"\n    elif [ \"\
    $str\" == \"||o|\" ]; then\n        notes=\"2\"\n        beats=\"3\"\n       \
    \ half=\"3\"\n        quarter=\"3\"\n    elif [ \"$str\" == \"o||\" ]; then\n\
    \        notes=\"3\"\n        beats=\"2\"\n        half=\"2\"\n        quarter=\"\
    2\"\n    elif [ \"$str\" == \"o|||\" ]; then\n        notes=\"3\"\n        beats=\"\
    3\"\n        half=\"3\"\n        quarter=\"3\"\n    elif [ \"$str\" == \".||o\"\
    \ ]; then\n        notes=\"3\"\n        beats=\"2\"\n        half=\"2\"\n    \
    \    quarter=\"2\"\n    elif [ \"$str\" == \".||o|\" ]; then\n        notes=\"\
    3\"\n        beats=\"3\"\n        half=\"3\"\n        quarter=\"3\"\n    elif\
    \ [ \"$str\" == \".|.||\" ]; then\n        notes=\"3\"\n        beats=\"4\"\n\
    \        half=\"4\"\n        quarter=\"4\"\n    elif [ \"$str\" == \".|.|||\"\
    \ ]; then\n        notes=\"3\"\n        beats=\"4\"\n        half=\"4\"\n    \
    \    quarter=\"4\"\n    elif [ \"$str\" == \"||.||\" ]; then\n        notes=\"\
    4\"\n        beat", "    echo \"$1\" |\n    sed -r \"s/^([[:alpha:]]+)(.*)$/$(echo\
    \ 'o' | sed -r \"s/.(.)/\\\\1\\\\2/g\")/\" \\\n        | sed -r \"s/o\\|o\\|\\\
    .\\|o\\|o\\|\\.\\|\\.\\|\\.\\|o\\|o/g\"", "  local notes=$1\n  local counter=0\
    \ # counter for parsing notes\n  local temp=0 # temporary variable for checking\
    \ whether note is on last beat\n  local ret=() # return value\n  for ((counter=4;\
    \ counter>0; counter--)); do\n    if [[ ${notes:${counter}:1} = \"o\" ]]; then\n\
    \      temp=1 # on note\n    elif [[ ${notes:${counter}:1} = \"o|\" ]]; then\n\
    \      temp=2 # on half note\n    elif [[ ${notes:${counter}:1} = \".|\" ]]; then\n\
    \      temp=3 # on quater note\n    elif [[ ${notes:${counter}:1} = \".\" ]] &&\
    \ [[ ${temp} -eq 3 ]]; then\n      # on last note of quater note\n      temp=0\n\
    \    else\n      # on last note of note\n      temp=0 # reset temporary variable\n\
    \    fi\n    ret+=(${counter}) # add counter to return value\n    notes=${notes:0:${counter}}\n\
    \  done\n  echo $ret", "    local STRING=${1}\n    local BACK_LEVEL=1\n    local\
    \ MUSIC_INFO=\"\"\n    while read -r -n 1 CHAR\n    do\n        if [[ \"$CHAR\"\
    \ == \" \" ]]; then\n            BACK_LEVEL=$((BACK_LEVEL-1))\n            continue\n\
    \        fi\n        if [[ \"$CHAR\" == \"|\" ]]; then\n            BACK_LEVEL=$((BACK_LEVEL+1))\n\
    \            continue\n        fi\n        if [[ \"$CHAR\" == \"o\" ]]; then\n\
    \            MUSIC_INFO+=\"\\\"\"$((BACK_LEVEL*4))\"\\\"\"\n            continue\n\
    \        fi\n        if [[ \"$CHAR\" == \"o|\" ]]; then\n            MUSIC_INFO+=\"\
    \\\"\"$((BACK_LEVEL*2+1))\"\\\"\"\n            continue\n        fi\n        if\
    \ [[ \"$CHAR\" == \".|\" ]]; then\n            MUSIC_INFO+=\"\\\"\"$((BACK_LEVEL))\"\
    \\\"\"\n            continue\n        fi\n    done <<< \"$STRING\"\n    echo \"\
    $MUSIC_INFO\"", "    local music_string=\"${1}\"\n    music_string=\"$(echo \"\
    ${music_string}\" | sed 's/^ *//' | sed 's/ *$//')\"\n    music_string=\"$(echo\
    \ \"${music_string}\" | sed 's/[|\\.]\\+/ /g')\"\n    music_string=\"$(echo \"\
    ${music_string}\" | sed 's/^\\([o|o\\|\\.]\\+\\)/\"1\"/g')\"\n    music_string=\"\
    $(echo \"${music_string}\" | sed 's/\\([o|o\\|\\.]\\+\\)/\"1\"/g')\"\n    echo\
    \ \"${music_string}\"", "    local music i\n\n    music=$1\n    for i in \"${music//\\\
    | /}\";\n    do\n        echo -n \"\\\"\"$i\"\\\"'\";\n    done;", "\tlocal music=$1\n\
    \tlocal index=0\n\tlocal output=\"\"\n\tlocal music_length=$((${#music}-1))\n\t\
    local music_char=\"\\001\"\n\n\twhile [ \"$index\" -lt \"${music_length}\" ];\
    \ do\n\t\tlocal music_char_upper=\"${music[$index]}\"\n\t\tif [ \"$music_char_upper\"\
    \ == \"o\" ]; then\n\t\t\tlocal music_char=\"$music_char\\004\"\n\t\telif [ \"\
    $music_char_upper\" == \"o|\" ]; then\n\t\t\tlocal music_char=\"$music_char\\\
    002\"\n\t\telif [ \"$music_char_upper\" == \".|\" ]; then\n\t\t\tlocal music_char=\"\
    $music_char\\001\"\n\t\telse\n\t\t\tlocal music_char=\"\"\n\t\tfi\n\n\t\toutput=\"\
    $output$music_char\"\n\t\tindex=$((index+1))\n\tdone\n\n\techo \"$output\"", " \
    \ local input=\"$1\"\n\n  local count\n  local i\n  local last\n\n  local output=''\n\
    \  for i in $(seq 0 6); do\n    count=0\n    if [[ $input =~ ^\\($i\\|\\$i\\|\\\
    $i\\)\\$ ]]; then\n      count=$(expr ${BASH_REMATCH[0]} + 1)\n      last=$i\n\
    \    elif [[ $input =~ ^\\($i\\)\\$ ]]; then\n      count=$(expr ${BASH_REMATCH[0]}\
    \ + 1)\n      last=$i\n    elif [[ $input =~ ^\\(\\$\\$|\\$\\$|\\$\\$\\)\\$ ]];\
    \ then\n      count=$(expr ${BASH_REMATCH[0]} + 1)\n      last='$'\n    else\n\
    \      continue\n    fi\n    count=$(($count + 1))\n    output+=\"\\\"$count\\\
    \",\"\n  done\n  echo $output", "    local music_str=\"$1\"\n    local music_arr=()\n\
    \    local music_notes\n\n    # remove all whitespace from $music_str\n    music_str=${music_str//\
    \ /}\n\n    for music_note in \"${music_str}\"; do\n        if [[ \"$music_note\"\
    \ == \"o\" || \"$music_note\" == \"o|\" || \"$music_note\" == \".|\" ]]; then\n\
    \            music_arr+=( \"$music_note\" )\n        else\n            music_notes=\"\
    $music_notes\"\n        fi\n    done\n\n    # split music_notes in 3 chars pieces\
    \ by whitespace\n    music_notes=\"$music_notes\" | tr ' ' '\\n'\n\n    # for\
    \ each music_note find how many beats does it last and store it in array\n   \
    \ for music_note in $music_notes; do\n        music_note=${music_note%'\\n'}\n\
    \n        if [[ \"$music_note\" == \"o\" ]]; then\n            music_arr+=( \"\
    4\" )\n        elif [[ \"$music_note\" == \"o|\" ]]; then\n            music_arr+=(\
    \ \"2\" )\n        elif [[ \"$music_note\" == \".|\" ]]; then\n            music_arr+=(\
    \ \"1\" )\n        else\n            music_arr+=( \"1\" )\n        fi\n    done\n\
    \n    # return music_arr\n    echo \"${music_arr[@]}\"", "  local music=\"$1\"\
    \n  local result\n  result=($(\n    echo \"$music\" | \\\n      sed -E 's/^([oO][.])/\\\
    1|/' | \\\n      sed -E 's/^([|])/\\1o/' | \\\n      sed -E 's/^([.])/\\1o|/'\
    \ | \\\n      sed -E 's/^(o)/|/' | \\\n      sed -E 's/^(o|)/|/' | \\\n      sed\
    \ -E 's/^([|])/\\1o|/' | \\\n      sed -E 's/^([.])/\\1o|/' | \\\n      sed -E\
    \ 's/^(o)/|/' | \\\n      sed -E 's/^(o|)/|/' | \\\n      sed -E 's/^(o|)/|/'\
    \ | \\\n      sed -E 's/^(o|)/|/' | \\\n      sed -E 's/^(o|)/|/' | \\\n     \
    \ sed -E 's/^(o|)/|/' | \\\n      sed -E 's/^(o|)/|/' | \\\n      sed -E 's/^(o|)/|/'\
    \ | \\\n      sed -E 's/^(o|)/|/' | \\\n      sed -E 's/^(o|)/|/' | \\\n     \
    \ sed -E 's/^(o|)/|/' | \\\n      sed -E 's/^(o|)/|/' | \\\n      sed -E 's/^(o|)/|/'\
    \ | \\\n      sed -E 's/^(o|)/|/' | \\\n      sed -E 's/^(o|)/|/' | \\\n     \
    \ sed -E 's/^(o|)/|/' | \\\n      sed -E 's/^(o|)/|/' | \\\n      sed -E 's/^(o|)/|/'\
    \ | \\\n      sed -E 's/^(o|)/|/' | \\\n      sed -E 's/^(o|)/|/' | \\\n     \
    \ sed -E 's/^(o|)/|/' | \\\n      sed -E 's/^(o|)/|/' | \\\n      sed -E 's/^(o|)/|/'\
    \ | \\\n      sed -E 's/^(o|)/|/' | \\\n      sed -E 's/^(o|)/|/' | ", "\tlocal\
    \ notes\n\tnotes=\"$1\"\n\t# We must ignore \"o\" and \"|\" chars\n\tnotes=\"\
    $(echo \"$notes\" | grep -v \"o\" | grep -v \"|\")\"\n\t# We must ignore empty\
    \ lines\n\tnotes=\"$(echo \"$notes\" | grep -v \"^$\")\"\n\t# We must remove line\
    \ breaks\n\tnotes=\"$(echo \"$notes\" | tr -d '\\n')\"\n\t# We must split the\
    \ string into two parts\n\tnotes=\"$(echo \"$notes\" | awk '{print $1}')\"\n\t\
    # We must ignore spaces between notes\n\tnotes=\"$(echo \"$notes\" | sed 's/^\
    \ *//')\"\n\t# We must remove spaces around pipes\n\tnotes=\"$(echo \"$notes\"\
    \ | sed 's/|//g')\"\n\t# We must remove empty notes\n\tnotes=\"$(echo \"$notes\"\
    \ | grep -v \"^$\")\"\n\t# We must remove 'o' and '|' from notes\n\tnotes=\"$(echo\
    \ \"$notes\" | sed 's/o//g' | sed 's/|//g')\"\n\t# We must convert notes to ints\n\
    \tnotes=\"$(echo \"$notes\" | tr 'o' '0')\"\n\tnotes=\"$(echo \"$notes\" | tr\
    \ '|' '0')\"\n\techo $notes", "  local str=$1\n\n  local i=0\n  local ret\n  while\
    \ [ -n \"$str\" ]; do\n    case \"$str\" in\n      *o)\n        i=$((i+4))\n \
    \       ;;\n      *o|*)\n        i=$((i+2))\n        ;;\n      *.|*)\n       \
    \ i=$((i+1))\n        ;;\n      *)\n        echo \"$str is not a supported musical\
    \ note type\"\n        exit 1\n        ;;\n    esac\n    ret=(\"${ret[@]}\" \"\
    $i\")\n    i=$((i+1))\n    str=$(awk 'BEGIN{for (n=1;n<=NF;n++) if($n == $1) print\
    \ $n}' <<< $str)\n  done\n\n  echo \"${ret[@]}\"", "    local music_str=\"$1\"\
    \n    music_str+=$'\\n'\n    local notes_str=\"\"\n    local beats_str=\"\"\n\
    \    local current_note=\"-\"\n    local current_beat=\"-\"\n    local i=0 beats_per_note\n\
    \n    while read -r note; do\n        if [ \"$note\" == \"o\" ] || [ \"$note\"\
    \ == \"o|\" ]; then\n            # last beat\n            if [ \"$note\" == \"\
    o|\" ]; then\n                beats_per_note=4\n            else\n           \
    \     beats_per_note=2\n            fi\n\n            # new note\n           \
    \ if [ \"$note\" == \"o\" ]; then\n                notes_str+=\"\\\"$beats_per_note\\\
    \"\"\n                current_note=$note\n                beats_str+=\"\\\"$beats_per_note\\\
    \"\"\n                i=0 beats_per_note\n            else\n                notes_str+=\"\
    \\\"$beats_per_note\\\"\"\n                beats_str+=\"\\\"$beats_per_note\\\"\
    \"\n                beats_per_note=$((beats_per_note+1))\n                beats_str+=\"\
    \\\"$beats_per_note\\\"\"\n                i=0 beats_per_note\n            fi\n\
    \n        elif [ \"$note\" == \".|\" ]; then\n            # last beat\n      \
    \      if [ \"$current_beat\" == \"-\" ]; then\n                beats_per_note=1\n\
    \            else\n                beats_per_note=2\n            fi\n\n      \
    \      # new note\n            if [ \"$current_note\" == \"-\" ]; then\n     \
    \           notes_str+=\"\\\"$beats_per_note\\\"\"\n                current_note=$note\n\
    \                beats_str+=\"\\\"$beats_per_note\\\"\"\n                i=0 beats_per_note\n\
    \            else\n                notes_str+=\"\\\"$beats_per_note\\\"\"\n  \
    \              beats_str+=\"\\\"$beats_per_note\\\"\"\n                beats_per_note=$((beats_per_note+1))\n\
    \                beats_str+=\"\\\"$beats_per_note\\\"\"\n                i=0 beats_per_note\n\
    \            fi\n        else\n            notes_str+=\"\\\"$beats_per_note\\\"\
    \"\n            beats_str+=\"\\\"$beats_per_note\\\"\"\n            beats_per_note=$((beats_per_note+1))\n\
    \            beats_str+=\"\\\"$beats_per_note\\\"\"\n            i=0 beats_per_note\n\
    \        fi\n    done <<< \"$music_str\"\n    echo \"$notes_str\"", "  # parse\
    \ input\n  local input_line=$1\n\n  # define empty result\n  local output_line=''\n\
    \  while read -r -n1 note; do\n    if [[ \"${input_line}\" = *\"${note}\"* ]];\
    \ then\n      # new note found, increment count\n      output_line=\"${output_line}${note#*|}\"\
    \n    else\n      # just append the new note to the result string\n      output_line=\"\
    ${output_line}${note}|\"\n    fi\n  done <<< \"${input_line}\"\n\n  # cut last\
    \ '|'\n  output_line=\"${output_line%|}\"\n  output_line=\"${output_line#*\\|}\"\
    \n\n  # add '\"'\n  output_line=\"${output_line//\\|/\\\"}\"\n\n  # add ' ' after\
    \ every two elements\n  output_line=\"${output_line// / \\\"}\"\n  output_line=\"\
    ${output_line// \\\" /}\"\n  output_line=\"${output_line//\\\"\\\"/\\\"}\"\n\n\
    \  # remove last space and comma\n  output_line=\"${output_line//\\\"/ }\"\n \
    \ output_line=\"${output_line// ,}\"\n\n  # remove first space\n  output_line=\"\
    ${output_line//\\\"/}\"\n\n  # remove first and last space\n  output_line=\"${output_line//\
    \ }\"\n\n  echo \"${output_line}\"", "\tlocal string=\"$1\"\n\techo \"$(echo \"\
    $string\" | sed \"s/ /\\\",\\\"\")\"", "    local music_str=$1\n    local music_arr=()\n\
    \    local tempstr\n    local beats\n\n    tempstr=$(echo $music_str | sed 's/.//g')\n\
    \    beats=$(echo $music_str | sed 's/|//g')\n    echo $beats\n\n    IFS=$'\\\
    n' read -r -d '' -a music_arr <<< \"$music_str\"\n    music_arr=(${music_arr[@]#})\n\
    \    music_arr=(${music_arr[@]%})\n\n    echo $music_arr", "    local music=\"\
    $1\" # Your code goes here\n    local output=\"\"\n    for music in $music\n \
    \   do\n        echo \"$music\"\n        local strlen=${#music}\n        local\
    \ last=${music[strlen-1]}\n        if [[ $strlen -gt 4 ]]; then\n            output+=\"\
    \\\"${music}\\\"${music[strlen-4]}\"\n        else\n            if [[ \"$music\"\
    \ == \".\" ]]; then\n                output+=\"\\\"${music}\\\"\"\n          \
    \  elif [[ \"$music\" == \"o\" ]]; then\n                if [[ $last == \"|\"\
    \ ]]; then\n                    output+=\"\\\"${music}\\\"2\"\n              \
    \  else\n                    output+=\"\\\"${music}\\\"4\"\n                fi\n\
    \            else\n                if [[ $last == \".\" ]]; then\n           \
    \         output+=\"\\\"${music}\\\"\"\n                else\n               \
    \     output+=\"\\\"${music}\\\"1\"\n                fi\n            fi\n    \
    \    fi\n    done\n    echo \"$output\"", "    local string=$1\n\n    local i=0\n\
    \    local ret=()\n\n    while [ $i -lt ${#string} ]; do\n        if [ \"${string:$i:1}\"\
    \ == \"|\" ] || [ \"${string[((i-1))]}\" == \"|\" ]; then\n            i=$((i\
    \ + 1))\n        else\n            i=$((i + 1))\n            ret+=($(expr ${#string}\
    \ - $i ))\n        fi\n    done\n\n    return \"${ret[@]}\"", "  local music_str=$1\n\
    \  local music_arr=()\n\n  local i\n  local j\n  local num\n\n  local first_char\n\
    \  local first_char_pos\n  local first_char_val\n  local first_char_arr_pos\n\
    \  local first_char_arr_val\n\n  for (( i=0; i < ${#music_str}; i++ )); do\n \
    \   if [[ \"${music_str:$i:1}\" == \".\" ]]; then\n      j=i\n      while [[ \"\
    ${music_str:$((i+2)):1}\" == \"|\" ]]; do\n        j=$((j+2))\n      done\n  \
    \    num=\"${music_str$j:2}\"\n      music_arr+=(${num})\n      i=$((i+2))\n \
    \     j=$((i+1))\n      while [[ \"${music_str$j:1}\" == \"|\" ]]; do\n      \
    \  j=$((j+1))\n      done\n      num=\"${music_str$j:1}\"\n      music_arr+=(${num})\n\
    \      i=$((i+1))\n    fi\n  done\n  echo \"${music_arr[@]}\"", "  local music_string=$1\n\
    \  local music_notes=()\n  local music_beats=()\n\n  for i in $(seq 1 ${#music_string});\n\
    \  do\n    local music_note=$(echo \"${music_string}\" | cut -d'|' -f${i})\n \
    \   music_notes+=(${music_note})\n  done\n  for i in $(seq 0 ${#music_notes}-1);\n\
    \  do\n    local music_beats_count=$(echo \"${music_notes[$i]}\" | cut -d'o' -f1)\n\
    \    music_beats+=(${music_beats_count})\n  done\n  echo \"${music_beats}\"",
  "  local string=$1\n  echo \"$string\"\n  local last=\n  local last2=\n  local beats=\n\
    \n  echo \"$string\" | awk '{ beats = beats + 1 } END { print beats }'", "   \
    \ # Write your solution and explanations here\n    echo \"${1}\" > /tmp/notes.txt\n\
    \    for n in ${1//| /}\n    do\n        echo $n >> /tmp/notes.txt\n    done\n\
    \    echo \"\" >> /tmp/notes.txt\n    echo $(($(wc -l < /tmp/notes.txt)-6)) >\
    \ /tmp/beats.txt\n    echo \"\" >> /tmp/notes.txt\n    for n in ${1//| /}\n  \
    \  do\n        echo $(($(sed 's/^/'$n'/ /tmp/notes.txt|wc -l)-6)) >> /tmp/beats.txt\n\
    \    done\n    echo \"\" >> /tmp/notes.txt\n    for n in ${1//| /}\n    do\n \
    \       echo $(($(sed 's/^/'$n'/ /tmp/notes.txt|sed 's/^/'$n'/ /tmp/beats.txt|wc\
    \ -l)-6)) >> /tmp/beats.txt\n    done\n    echo \"\" >> /tmp/notes.txt\n    for\
    \ n in ${1//| /}\n    do\n        echo $(($(sed 's/^/'$n'/ /tmp/notes.txt|sed\
    \ 's/^/'$n'/ /tmp/beats.txt|sed 's/^/'$n'/ /tmp/beats.txt|wc -l)-6)) >> /tmp/beats.txt\n\
    \    done", "  local input=$1\n  local output\n  output=\"\\\"\"\n  local i\n\
    \  local length\n  length=${#input}\n  for ((i=0;i<length;i++));\n  do\n    case\
    \ \"${input:$i:1}\" in\n      \".|\")\n        local j\n        j=$((i+1))\n \
    \       case \"${input:$j:1}\" in\n          \".|\")\n            local j\n  \
    \          j=$((i+2))\n            case \"${input:$j:1}\" in\n              \"\
    .|\")\n                local j\n                j=$((i+3))\n                case\
    \ \"${input:$j:1}\" in\n                  \".|\")\n                    local j\n\
    \                    j=$((i+4))\n                    case \"${input:$j:1}\" in\n\
    \                      \".|\")\n                        local j\n            \
    \            j=$((i+5))\n                        case \"${input:$j:1}\" in\n \
    \                         \".|\")\n                            local j\n     \
    \                       j=$((i+6))\n                            case \"${input:$j:1}\"\
    \ in\n                              \".|\")\n                                local\
    \ j\n                                j=$((i+7))\n                            \
    \    case \"${input:$j:1}\" in\n                                  \".|\")\n  \
    \                                  local j\n                                 \
    \   j=$((i+8))\n                                    case \"${input:$j:1}\" in\n\
    \                                      \".|\")\n                             \
    \           local j\n                                        j=$((i+9))\n    \
    \                                    case \"${input:$j:1}\" in\n             \
    \                             \"o|\")\n                                      \
    \      output=\"${output}\\\"4\\\"\"\n                                       \
    \     ;;\n                                          \"o\")\n                 \
    \                           output=\"${output}\\\"1\\\"\"\n                  \
    \                          ;;\n                                          \"|\"\
    )\n                                            output=\"${output}\\\"2\\\"\"\n\
    \                                            ;;\n                            \
    \              *)\n                                            output=\"${output}\\\
    \"1\\\"\"\n                                            ;;\n                  \
    \                      esac\n                                    esac\n      \
    \                          esac\n                            esac\n          \
    \              esac\n                    esac\n                esac\n        \
    \    esac\n          esac\n        esac\n      esac\n    esac\n  done\n  echo\
    \ \"$output\"", "    local music_str=$1\n    local music_notes=\"\"\n    local\
    \ music_notes_arr=()\n    local music_notes_str=\"\"\n    for music in $music_str;\
    \ do\n        local music_note=\"${music%%|*}\"\n        local music_note_arr=()\n\
    \        local music_note_str=\"\"\n        for note in $music_note; do\n    \
    \        local music_note_len=${#note}\n            music_note_arr+=($music_note_len)\n\
    \        done\n        music_notes_arr+=($music_note_arr)\n        music_notes_str+=$music_note\n\
    \    done\n    music_notes=\"\\\"${music_notes_arr[*]}\\\"\" \n    music_notes_str=\"\
    ${music_notes_str//'\\\"'/}\"\n    echo \"$music_notes_str\"", "    local STRING=\"\
    $1\"\n    local LENGTH=\"$(echo \"$STRING\" | wc -m)\"\n    local VALUE=\"$(echo\
    \ \"$STRING\" | sed -e 's/ /\\\\ /g')\"\n    local BEATS=\"$(echo $VALUE | sed\
    \ -e 's/\\|/\\\\|/g')\"\n    local NUM_BEATS=\"$(echo $BEATS | sed -e 's/o|/o\\\
    \\|/g')\"\n    local NUM=\"$(echo $NUM_BEATS | sed -e 's/ /\\\\ /g')\"\n    echo\
    \ $NUM", "  local line=$1\n\n  local arr=()\n\n  local last\n  local i\n\n  for\
    \ ((i=0; i<${#line}; i=i+2)); do\n    local j\n    local str\n\n    last=${line:$i:1}\n\
    \    j=${line:$i+1:1}\n    local k\n\n    str=( $j )\n\n    if (( str[1] == \"\
    '\" )) && (( str[2] == \"'\" )) && (( str[3] == \"'\" )) ; then\n      arr+=(\"\
    ${str[4]}\")\n      i=$((i+2))\n    else\n      if (( j == \"'\" )) && (( j ==\
    \ last )) && (( j == \"'\" )) ; then\n        arr+=(\"$((2*${#str})-2)\")\n  \
    \    else\n        arr+=(\"0\")\n      fi\n    fi\n  done\n\n  echo ${arr[@]}",
  "    local music_str=$1\n    local notes=$(echo $music_str | sed 's/o\\|\\.\\|//g')\n\
    \    local beats=$(echo $music_str | sed 's/o\\|\\.\\|//g' | sed 's/o\\|\\.\\\
    |//g' | sed 's/o\\|\\.\\|//g' | sed 's/o\\|\\.\\|//g' | sed 's/o\\|\\.\\|//g'\
    \ | sed 's/o\\|\\.\\|//g' | sed 's/o\\|\\.\\|//g' | sed 's/o\\|\\.\\|//g' | sed\
    \ 's/o\\|\\.\\|//g' | sed 's/o\\|\\.\\|//g' | sed 's/o\\|\\.\\|//g' | sed 's/o\\\
    |\\.\\|//g' | sed 's/o\\|\\.\\|//g' | sed 's/o\\|\\.\\|//g' | sed 's/o\\|\\.\\\
    |//g')\n    echo $notes\n    echo $beats", "    local music=\"$1\" # music string\n\
    \    local notes # notes list\n    notes=() # notes list\n\n    # Count all notes\
    \ and save to notes array\n    # notes[0...n] represents note 0 in range [0...n]\n\
    \    for i in $(seq 0 $(( ${#music} - 1 )) ); do\n        if [ ${music:$i:1} =\
    \ ' ' ]; then # if note is first symbol\n            if [ $(( i / 2 )) -ne 0 ];\
    \ then\n                notes+=( \"${music[((i-1)):i]}\" ) # last is note itself\n\
    \            else\n                notes+=( \"${music[((i-2)):i]}\" )\n      \
    \      fi\n        fi\n    done\n\n    # Count all notes\n    # notes[0...n] represents\
    \ note 0 in range [0...n]\n    for i in $(seq 0 $(( ${#music} - 1 )) ); do\n \
    \       if [ ${music:$i:1} = ' ' ]; then # if note is first symbol\n         \
    \   if [ $(( i / 2 )) -ne 0 ]; then\n                notes+=( \"${music[((i-1)):i]}\"\
    \ ) # last is note itself\n            else\n                notes+=( \"${music[((i-2)):i]}\"\
    \ )\n            fi\n        fi\n    done\n\n    echo $notes", "\tlocal string=$1\n\
    \tlocal music_notes=()\n\tlocal note_count=0\n\tlocal note\n\n\t# $string should\
    \ contain a single note in $note_names string\n\tnote=$(echo $string | cut -d'\
    \ ' -f 1)\n\n\tif [[ \"$note\" == 'o' ]]; then\n\t\tmusic_notes+=(\"\\\"$note\\\
    \"\")\n\t\tnote_count=$note_count\n\t\tnote_count=$(($note_count + 1))\n\t\tnote_count=$(($note_count\
    \ + 1))\n\tfi\n\tif [[ \"$note\" == 'o|' ]]; then\n\t\tmusic_notes+=(\"\\\"$note\\\
    \"\")\n\t\tnote_count=$note_count\n\t\tnote_count=$(($note_count + 1))\n\tfi\n\
    \tif [[ \"$note\" == '.|' ]]; then\n\t\tmusic_notes+=(\"\\\"$note\\\"\")\n\t\t\
    note_count=$note_count\n\t\tnote_count=$(($note_count + 1))\n\tfi\n\n\t# print\
    \ current notes count\n\techo $note_count\n\t# print current music notes\n\techo\
    \ ${music_notes[*]}\n", "    local music_str=$1\n    # $music_str will be a note:beats\
    \ string such as:\n    # o o| .| o| o| .| .| .| .| o o\n    local notes=$music_str\n\
    \    local note=\"\"\n    local beats=\"\"\n    local count=0\n    local beat_str=\"\
    \"\n    local last_beat_str=\"\"\n\n    # Iterate over string and count every\
    \ beat:\n    # Example (note is \"o\", beat is \"4\"):\n    #   o 4\n    #   o\
    \ 4\n    #   o 4\n    #   o 4\n    #   o 4\n    #   o 4\n    local i\n    for\
    \ ((i=0; i<${#notes}; i++)); do\n        local char=\"${notes:$i:1}\"\n      \
    \  case \"$char\" in\n        o) note=\"o\"; beats=\"4\"; last_beat_str=\"\";;\n\
    \        o|) note=\"o|\"; beats=\"2\"; last_beat_str=\"\";;\n        .|) note=\"\
    .|\"; beats=\"1\"; last_beat_str=\"\";;\n        *) echo \"ERROR: unknown note\
    \ '$char'\" >&2; exit 1;;\n        esac\n        if [ -z \"$last_beat_str\" ];\
    \ then\n            # This is the first time we see this note (note is \"o\" for\
    \ this iteration).\n            last_beat_str=\"\\\"$beats\\\"; \"\n        fi\n\
    \        beat_str+=\"$last_beat_str\\\"$beats\\\"\n        last_beat_str=\"\\\"\
    $beats\\\"; \"\n        count=$((count+1))\n    done\n    # Example (note is \"\
    o\", beat is \"2\"):\n    #   o 2\n    #   o 2\n    #   o 2\n    #   o 2\n   \
    \ #   o 2\n    #   o 2\n    #   o 2\n    beat_str+=\"$last_beat_str\\\"$beats\\\
    \"; \"\n    # Example (note is \".|\", beat is \"1\"):\n    #   o 1\n    #   o\
    \ 1\n    #   o 1\n    #   o 1\n    #   o 1\n    #   o 1\n    #   o 1\n    #  \
    \ o 1\n    # In this case, last beat should be \"1\" and count should be 4, because\
    \ there are 4 \".|\"s.\n    echo \"$note:\\\"$count\\\"; \"", '    # TODO', " \
    \   local str=$1\n    local strarr=(${str//|/ })\n    local i\n    local len=$((${#strarr[@]}\
    \ - 1))\n    local notes=()\n\n    for (( i = 0; i < len; i++ ))\n    do\n   \
    \     local note=${strarr[$i]}\n        if [[ \"$note\" == \"o\" ]]; then\n  \
    \          notes+=(\"\\\"$(($i + 4))\\\"\")\n        else\n            if [[ \"\
    $note\" == \"|\" ]]; then\n                notes+=(\"\\\"$(($i + 2))\\\"\")\n\
    \            else\n                notes+=(\"\\\"$(($i + 1))\\\"\")\n        \
    \    fi\n        fi\n    done\n\n    echo ${notes[@]}", "    local notes=$1\n\
    \    local notes_count=$(echo \"$notes\" | awk '{print length($0)}')\n    local\
    \ music_count=$(($notes_count*2))\n    local beats_string=''\n    local music_list=''\n\
    \    for n in $(echo $notes | cut -d' ' -f1); do\n        local note_count=$(echo\
    \ $n | tr -cd \"[:digit:]\")\n        local beat_count=$(($music_count-$note_count))\n\
    \        music_list+=\"'$note_count'$beat_count'\"\n        beats_string+=$beat_count\n\
    \    done\n    echo \"'${music_list//$'\\n'/'\\n'}\"\n    echo \"'${beats_string//$'\\\
    n'/'\\n'}\"", "  local music_string=$1\n\n  local last_beat=\"\"\n  local last_beats=0\n\
    \  local music_note=\"\"\n  local music_notes=\"\"\n\n  for music_note in $(echo\
    \ \"${music_string}\" | sed -e 's/\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\\
    )/\\3\\4\\1\\2/' -e 's/\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\\
    )/\\1\\4\\3\\2/' -e 's/\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\\
    )\\([a-z]\\)/\\1\\3\\4\\2\\5/' -e 's/\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\\
    )\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)/\\1\\2\\3\\4\\5\\6/' -e 's/\\([a-z]\\)\\([a-z]\\\
    )\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)/\\1\\2\\3\\4\\5\\6/'\
    \ -e 's/\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\\
    )/\\1\\4\\3\\2\\6/')\n  do\n    echo $music_note | sed -e 's/\\([a-z]\\)\\([a-z]\\\
    )\\([a-z]\\)\\([a-z]\\)/\\1\\4\\3\\2/' -e 's/\\([a-z]\\)\\([a-z]\\)\\([a-z]\\\
    )\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)/\\1\\3\\4\\2\\5/' -e 's/\\([a-z]\\)\\([a-z]\\\
    )\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)/\\1\\2\\3\\4\\5\\6/' -e 's/\\([a-z]\\\
    )\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)/\\1\\2\\3\\4\\5\\6/'\
    \ -e 's/\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)/\\\
    1\\4\\3\\2\\", "    local music_str=\"$1\"\n    local music_str_tmp=\"\"\n   \
    \ local notes=()\n\n    local last_beat=0\n    local is_last=false\n    local\
    \ music_char=\"${music_str#*|}\"\n    local music_char_tmp=\"${music_char#o}\"\
    \n\n    while [ -n \"${music_char_tmp}\" ]; do\n        music_str_tmp=\"${music_str_tmp}${music_char_tmp}\"\
    \n        if [ \"${music_str_tmp}\" == \"${music_str}\" ]; then\n            is_last=true\n\
    \        fi\n        if [ -z \"${is_last}\" ]; then\n            if [ \"${music_str_tmp}\"\
    \ = \".\" ]; then\n                music_char=\"${music_str#*o}\"\n          \
    \  else\n                music_char=\"${music_str#*}\"\n            fi\n     \
    \   fi\n        if [ \"${music_char}\" != \"${music_str_tmp}\" ]; then\n     \
    \       music_str_tmp=\"\"\n        fi\n\n        music_char=\"${music_char#*}\"\
    \n        music_char_tmp=\"${music_char_tmp#*}\"\n    done\n    music_str=\"${music_str_tmp}\"\
    \n\n    local music_char=\"${music_str#*}\"\n    while [ -n \"${music_char}\"\
    \ ]; do\n        music_str=\"${music_str}${music_char}\"\n        local music_char=\"\
    ${music_char#*}\"\n    done\n\n    local music_char=\"${music_str#*}\"\n    while\
    \ [ -n \"${music_char}\" ]; do\n        music_str=\"${music_str}${music_char}\"\
    \n        local music_char=\"${music_char#*}\"\n        notes+=\"\\\"${music_str}\\\
    \"\"\n    done\n\n    echo \"${notes[@]}\"", "  echo \"$1\" |\n  awk 'BEGIN{RS=\"\
    \ \"}; $1~/^\\<o\\>$/ {printf \"\\\"4\\\"\\n\"}\n       $1~/^\\<o\\|\\>$/ {printf\
    \ \"\\\"2\\\"\\n\"}\n       $1~/^\\.\\|\\>$/ {printf \"\\\"1\\\"\\n\"}\n     \
    \  $1~/^$/ {print}'", "  local music_str=\"$1\"\n  local music_notes=()\n  local\
    \ note\n  \n  for note in $(echo \"$music_str\" | sed \"s/ /, /g\" | sed \"s/^.\\\
    {1,4\\}$//g\" | sed \"s/\\.\\|/o\\|/g\" ); do\n    music_notes+=( $(echo \"$note\"\
    \ | sed \"s/o/\\o/g\") )\n  done\n  \n  echo \"${music_notes[@]}\"", "    local\
    \ music_str=$1\n    local music_arr=()\n    local music_arr_ind=()\n    local\
    \ music_arr_len=()\n    local music_str_len=${#music_str}\n\n    # parse music\
    \ string\n    for (( i=0; i<music_str_len; i++ )); do\n        if [[ $music_str[$i]\
    \ == '.' ]]; then\n            music_arr_len[$i]=\"${#music_arr[$i]}\"\n     \
    \   fi\n        if [[ $music_str[$i] == ' ' ]]; then\n            music_arr_ind[$i]=\"\
    $(echo \"${music_arr[$i]}\" | sed -e 's/\"/\\\"/g' -e 's/ //g')\"\n        fi\n\
    \        if [[ $music_str[$i] == 'o' ]]; then\n            music_arr_ind[$i]=\"\
    $(echo \"${music_arr[$i]}\" | sed -e 's/o//g' -e 's/|//g' -e 's/o//g' -e 's/|//g'\
    \ -e 's/o//g' -e 's/|//g' -e 's/o//g' -e 's/|//g' -e 's/o//g' -e 's/|//g' -e 's/o//g'\
    \ -e 's/|//g')\"\n            music_arr_ind[$i]=\"$(echo \"${music_arr_ind[$i]}\"\
    \ | sed -e 's/\"//g')\"\n            music_arr_ind[$i]=\"$(echo \"${music_arr_ind[$i]}\"\
    \ | sed -e 's/,//g')\"\n            music_arr_ind[$i]=\"$(echo \"${music_arr_ind[$i]}\"\
    \ | sed -e 's/-//g')\"\n        fi\n        if [[ $music_str[$i] == 'o|' ]]; then\n\
    \            music_arr_ind[$i]=\"$(echo \"${music_arr[$i]}\" | sed -e 's/o//g'\
    \ -e 's/|//g' -e 's/o|//g' -e 's/|//g' -e 's/o|//g' -e 's/|//g' -e 's/o|//g' -e\
    \ 's/|//g' -e 's/o|//g' -e 's/|//g' -e 's/o|//g' -e 's/|//g' -e 's/o|//g' -e 's/|//g')\"\
    \n            music_arr_ind[$i]=\"$(echo \"${music_arr_ind", "    local music_string=$1\n\
    \    local music_notes=$(echo $music_string | sed 's/\\|//g' | sed 's/o//g' |\
    \ sed 's/.//g')\n    local number_of_music_notes=$((${#music_notes}))\n\n    for\
    \ music_note in ${music_notes[@]}; do\n        if [[ \"$music_note\" == '\"' ]];\
    \ then\n            number_of_music_notes=$((number_of_music_notes-1))\n     \
    \   fi\n\n        music_note_number=$(echo $music_note | cut -d '\"' -f1)\n  \
    \      music_note_type=$(echo $music_note | cut -d '\"' -f2)\n        music_note_length=$((number_of_music_notes*$music_note_number))\n\
    \n        if [[ \"$music_note_type\" == \"o\" ]]; then\n            music_note_type_length=\"\
    4\"\n        elif [[ \"$music_note_type\" == \"o|\" ]]; then\n            music_note_type_length=\"\
    2\"\n        elif [[ \"$music_note_type\" == \".|\" ]]; then\n            music_note_type_length=\"\
    1\"\n        fi\n\n        music_note_length=$((music_note_length+music_note_type_length))\n\
    \    done\n\n    echo \"$music_note_length\"", "  local i\n  local string=$1\n\
    \n  string=${string//[\\|\\.]/ }  # substitute all bars, dots and bars followed\
    \ by dots with spaces\n  string=${string//[\\|\\.]/ }  # substitute all bars,\
    \ dots and bars followed by dots with spaces\n  string=${string//[\\|\\.]/ } \
    \ # substitute all bars, dots and bars followed by dots with spaces\n  string=${string//[\\\
    |\\.]/ }  # substitute all bars, dots and bars followed by dots with spaces\n\
    \  string=${string//[\\|\\.]/ }  # substitute all bars, dots and bars followed\
    \ by dots with spaces\n  string=${string//[\\|\\.]/ }  # substitute all bars,\
    \ dots and bars followed by dots with spaces\n  string=${string//[\\|\\.]/ } \
    \ # substitute all bars, dots and bars followed by dots with spaces\n  string=${string//[\\\
    |\\.]/ }  # substitute all bars, dots and bars followed by dots with spaces\n\
    \  string=${string//[\\|\\.]/ }  # substitute all bars, dots and bars followed\
    \ by dots with spaces\n  string=${string//[\\|\\.]/ }  # substitute all bars,\
    \ dots and bars followed by dots with spaces\n  string=${string//[\\|\\.]/ } \
    \ # substitute all bars, dots and bars followed by dots with spaces\n  string=${string//[\\\
    |\\.]/ }  # substitute all bars, dots and bars followed by dots with spaces\n\
    \  string=${string//[\\|\\.]/ }  # substitute all bars, dots and bars followed\
    \ by dots with spaces\n  string=${string//[\\|\\.]/ }  # substitute all bars,\
    \ dots and bars followed by dots with spaces\n  string=${string//[\\|\\.]/ } \
    \ # substitute all bars, dots and bars followed by dots with spaces\n  string=${string//[\\\
    |\\.]/ }  # substitute all bars, dots and bars followed by dots with spaces\n\
    \  string=${string//[\\|\\.]/ }  # substitute all bars, dots and bars followed\
    \ by dots with spaces\n  string=${string//[\\|\\.]/ }  # substitute all bars,\
    \ dots and bars followed by dots with spaces\n  string=${string//[\\|\\.]/ } \
    \ # substitute all bars, dots and bars followed by dots with spaces\n  string=${string//[\\\
    |\\.", "  # echo \"$1\"\n  local line\n  local result\n  local i\n  local notes\n\
    \  local length\n\n  if [[ -z \"$1\" ]]; then\n    return 1\n  fi\n\n  notes=$(echo\
    \ $1 | sed 's/ /./g')\n  length=$#\n\n  result=$( for i in $(seq 0 $((length-1)));\
    \ do\n    line=$(echo $1 | sed \"s/.\\($i\\)/\\1/\")\n    # echo \"$line\"\n \
    \   if [[ \"$line\" == o* ]]; then\n      # echo \"$line\"\n      result[$i]=$((length*4))\n\
    \    elif [[ \"$line\" == o|* ]]; then\n      # echo \"$line\"\n      result[$i]=$((length*2))\n\
    \    elif [[ \"$line\" == .|* ]]; then\n      # echo \"$line\"\n      result[$i]=$((length))\n\
    \    fi\n  done)\n\n  echo ${result[@]}", "  echo \"$1\" | tr -sc '[:lower:]'\
    \ '[:upper:]' | sed 's/o|.\\|o//g' | sed 's/o//g' | tr '[:upper:]' '[:lower:]'",
  "\tlocal STRING=$1\n\tlocal CHARS=''\n\tlocal CHAR\n\tlocal NBEATS\n\t\n\twhile\
    \ read -r CHAR; do\n\t\tCHARS=\"$CHARS$CHAR\"\n\t\tif [ \"$CHAR\" == '|' ]; then\n\
    \t\t\tif [ \"$CHARS\" == \"o\" ] || [ \"$CHARS\" == \"o|\" ] || [ \"$CHARS\" ==\
    \ \".|\" ]; then\n\t\t\t\tNBEATS=1\n\t\t\t\tCHARS=''\n\t\t\telse\n\t\t\t\tNBEATS=$((\
    \ $NBEATS + 1 ))\n\t\t\t\tCHARS=''\n\t\t\tfi\n\t\tfi\n\tdone <<< \"$STRING\"\n\
    \n\techo \"$CHARS\"", "    local music_notes\n    music_notes=$1\n\n    local\
    \ music_notes_2\n    music_notes_2=$(echo $music_notes | sed 's/o\\|\\.\\|/\\\
    |/g')\n    local music_notes_2_length\n    music_notes_2_length=$(echo ${#music_notes_2}\
    \ | wc -l)\n\n    # Parse input notes\n    local music_notes_3\n    music_notes_3=$music_notes_2\n\
    \    local music_notes_4\n    music_notes_4=$music_notes_2\n    local music_notes_5\n\
    \    music_notes_5=$music_notes_2\n    local music_notes_6\n    music_notes_6=$music_notes_2\n\
    \    local music_notes_7\n    music_notes_7=$music_notes_2\n    local music_notes_8\n\
    \    music_notes_8=$music_notes_2\n\n    local music_notes_9_length\n    music_notes_9_length=$(echo\
    \ ${#music_notes_9} | wc -l)\n\n    # Count amount of notes per beat in input\
    \ notes\n    local music_notes_10\n    music_notes_10=$(echo $music_notes | sed\
    \ 's/o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\\
    |\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\\
    |\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\\
    |\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\\
    |\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o\\|\\.\\|o",
  "  local STR=$1\n  # echo \"Str: $STR\"\n\n  # echo \"${STR}\"\n\n  local C\n  #\
    \ echo \"${STR}\"\"${STR}\"\n  local M\n  local L\n  local NL\n  local NL2\n \
    \ local NL3\n  local NL4\n  local NL5\n  local NL6\n  local NL7\n\n  local BEATS\n\
    \n  local RET\n\n  C=${STR:0:1}\n  M=${STR:1:1}\n  L=${STR:2:1}\n\n  # echo \"\
    C: ${C}\"\n  # echo \"M: ${M}\"\n  # echo \"L: ${L}\"\n\n  # echo \"C+M: ${C}+${M}\"\
    \n  # echo \"C+M+L: ${C}+${M}+${L}\"\n\n  BEATS=\n  BEATS=${C}+${M}+${L}\n\n \
    \ # echo \"BEATS: ${BEATS}\"\n\n  NL=`expr $BEATS / 4`\n  # echo \"NL: ${NL}\"\
    \n\n  # echo \"NL+1: ${NL}+1\"\n  # echo \"NL+2: ${NL}+2\"\n  # echo \"NL+3: ${NL}+3\"\
    \n  # echo \"NL+4: ${NL}+4\"\n  # echo \"NL+5: ${NL}+5\"\n  # echo \"NL+6: ${NL}+6\"\
    \n  # echo \"NL+7: ${NL}+7\"\n\n  NL2=`expr $BEATS / 2`\n  # echo \"NL2: ${NL2}\"\
    \n  # echo \"NL2+1: ${NL2}+1\"\n\n  NL3=`expr $BEATS / 2`\n  # echo \"NL3: ${NL3}\"\
    \n  # echo \"NL3+1: ${NL3}+1\"\n\n  NL4=`expr $BEATS / 2`\n  # echo \"NL4: ${NL4}\"\
    \n  # echo \"NL4+1: ${NL4}+1\"\n\n  NL5=`expr $BEATS / 2`\n  # echo \"NL5: ${NL5}\"\
    \n  # echo \"NL5+1: ${NL5}+1\"\n\n  NL6=`expr $BEATS / 2`\n  # echo \"NL6: ${NL6}\"\
    \n  # echo \"NL6+1: ${NL6}+1\"\n\n  NL7=`expr $BEATS / 2`\n  # echo \"NL7: ${NL7}\"\
    \n  # echo \"NL7+1: ${NL7}+1\"", "    local i\n    local arr\n    local last\n\
    \    local count\n    local note\n\n    for i in \"${@}\"\n    do\n        arr=(\
    \ ${i//[!^]/} )\n        if [ \"$i\" == \".\" ]; then\n            note=\"${arr[1]}\"\
    \n            count=\"$(echo \"$i\" | wc -c)\"\n        else\n            note=\"\
    ${arr[0]}\"\n            count=\"$(echo \"$i\" | wc -c)\"\n        fi\n\n    \
    \    if [ \"$last\" == \".\" ]; then\n            arr=(${arr[@]/\"$note\"/})\n\
    \        else\n            arr=(${arr[@]/\"$note\"/$last/$count})\n        fi\n\
    \n        last=\"${note}\"\n    done\n\n    echo \"${arr[@]}\"", "  local notes=$1\n\
    \n  local notes_arr=(\n    # octave 0\n    \"\\001\\002\\003\\004\\005\\006\\\
    007\\008\\009\\010\\011\\012\\013\\014\\015\\016\\017\\018\\019\\020\\021\"\n\
    \    # octave 1\n    \"\\022\\023\\024\\025\\026\\027\\028\\029\\030\\031\\100\\\
    101\\102\\103\\104\\105\\106\\107\\108\\109\"\n    # octave 2\n    \"\\010\\011\\\
    012\\013\\014\\015\\016\\017\\018\\019\\020\\021\\022\\023\\024\\025\\026\\027\\\
    028\\029\"\n    # octave 3\n    \"\\200\\201\\202\\203\\204\\205\\206\\207\\208\\\
    209\\202\\203\\204\\205\\206\\207\\208\\209\\202\\203\"\n    # octave 4\n    \"\
    \\010\\011\\012\\013\\014\\015\\016\\017\\018\\019\\020\\021\\022\\023\\024\\\
    025\\026\\027\\028\\029\"\n    # octave 5\n    \"\\200\\201\\202\\203\\204\\205\\\
    206\\207\\208\\209\\202\\203\\204\\205\\206\\207\\208\\209\\202\\203\"\n    #\
    \ octave 6\n    \"\\200\\201\\202\\203\\204\\205\\206\\207\\208\\209\\202\\203\\\
    204\\205\\206\\207\\208\\209\\202\\203\"\n    # octave 7\n    \"\\200\\201\\202\\\
    203\\204\\205\\206\\207\\208\\209\\202\\203\\204\\205\\206\\207\\208\\209\\202\\\
    203\"\n    # octave 8\n    \"\\200\\201\\202\\203\\204\\205\\206\\207\\208\\209\\\
    202\\203\\204\\205\\206\\207\\208\\209\\202\\203\"\n    # octave 9\n    \"\\200\\\
    201\\202\\203\\204\\205\\206\\207\\208\\209\\202\\203\\204\\205\\206\\207\\208\\\
    209\\202\\20", "    echo \"$1\" | sed 's/o\\|\\.\\|o\\|o\\|o\\|\\.\\|\\.\\|\\\
    .\\|o\\|o\\|o\\|/\\\"4\\\",\\\"2\\\",\\\"1\\\",\\\"2\\\",\\\"2\\\",\\\"1\\\",\\\
    \"1\\\",\\\"1\\\",\\\"1\\\",\\\"4\\\",\\\"4\\\"/g' | tr '\\n' ',' | tr '\"' '|'\
    \ | sed 's/,$//g' | sed 's/,$//g' | sed 's/,$//g' | awk -F'|' -v OFS=: '{$1=$1};1'\
    \ | sed 's/|$//g' | sed 's/,$//g' | sed 's/|$//g' | sed 's/,$//g' | sed 's/,$//g'\
    \ | sed 's/|$//g' | sed 's/,$//g' | sed 's/,$//g' | sed 's/,$//g' | sed 's/,$//g'\
    \ | sed 's/,$//g' | sed 's/,$//g' | sed 's/,$//g' | sed 's/,$//g'", "    local\
    \ string=\"$1\"\n    local note=\"\"\n    local result=()\n    local count\n \
    \   local index\n    local length=$#\n    local i\n    for (( i=0; i<length; i++\
    \ )); do\n        index=$i\n        case \"${string:$i:1}\" in\n            \\\
    # ) index=$((i+1)); break;;\n            o | \\| \\.)\n                note=\"\
    ${string:$index:1}\"\n                count=$((4*$note))\n                result+=(\
    \ \\\"${count}\\\" )\n                ;;\n            *)\n                note=\"\
    ${string:$i:1}\"\n                count=$((2*$note))\n                result+=(\
    \ \\\"${count}\\\" )\n                ;;\n        esac\n    done\n    echo \"\
    ${result[@]}\"", "    local music notes\n    music=$1\n    local notes\n\n   \
    \ while read -r -n 1 notes; do\n        local beats\n        beats=$(echo $notes\
    \ | sed -r \"s/([0-9]+)(\\|$)/\\1\\1/\")\n        echo $beats\n    done <<< \"\
    $music\"", "    local music_str=$1\n    music_str=\"${music_str//[\\\"}\";\n \
    \   music_str=\"${music_str//]\\\"}\";\n    music_str=\"${music_str//\\\\/\\\\\
    \\\\}\";\n    music_str=\"${music_str//|}\";\n    music_str=\"${music_str//\\\
    .\\|}\";\n    music_str=\"${music_str//\\.\\./\\\\.}\";\n    music_str=\"${music_str//\\\
    .\\./\\\\.}\";\n    music_str=\"${music_str//\\.\\./\\\\.}\";\n    music_str=\"\
    ${music_str//\\.\\./\\\\.}\";\n    music_str=\"${music_str//\\.\\./\\\\.}\";\n\
    \    music_str=\"${music_str//\\.\\./\\\\.}\";\n    music_str=\"${music_str//\\\
    .\\./\\\\.}\";\n    music_str=\"${music_str//\\.\\./\\\\.}\";\n    music_str=\"\
    ${music_str//\\.\\./\\\\.}\";\n    music_str=\"${music_str//\\.\\./\\\\.}\";\n\
    \    music_str=\"${music_str//\\.\\./\\\\.}\";\n    music_str=\"${music_str//\\\
    .\\./\\\\.}\";\n    music_str=\"${music_str//\\.\\./\\\\.}\";\n    music_str=\"\
    ${music_str//\\.\\./\\\\.}\";\n    music_str=\"${music_str//\\.\\./\\\\.}\";\n\
    \    music_str=\"${music_str//\\.\\./\\\\.}\";\n    music_str=\"${music_str//\\\
    .\\./\\\\.}\";\n    music_str=\"${music_str//\\.\\./\\\\.}\";\n    music_str=\"\
    ${music_str//\\.\\./\\\\.}\";\n    music_str=\"${music_str//\\.\\./\\\\.}\";\n\
    \    music_str=\"${music_str//\\.\\./\\\\.}\";\n    music_str=\"${music_str//\\\
    .\\./\\\\.}\";\n    music_str=\"${music_str//\\.\\./\\\\.}\";\n    music_str=\"\
    ${music_str//\\.\\./\\\\.}\";\n    music_str=\"${music_str//\\.\\./\\\\.}\";\n\
    \    music_str=\"${music_str//\\.\\./\\\\.}\";\n    music_str=\"${music_str//\\\
    .\\./\\\\.}\";\n    ", "    local -a music=($1)\n    local i beat last\n    local\
    \ music[$#music] note\n    for((i=1; i<$#music; i++)) {\n        note=${music[i]}\n\
    \        # Handle single note case\n        if [[ $note == \"o\" || $note == \"\
    o|\" || $note == \".|\" ]]; then\n            beat=$(printf \"%s\" \"$note\" |\
    \ sed -E 's/o|.|//g' | sed -E 's/o//g' | tr -cd '[:digit:]')\n            last=$((beat*4))\n\
    \        fi\n        # Handle quater note case\n        elif [[ \"$note\" =~ o\\\
    ||| $note =~ o\\. ]]; then\n            beat=$(printf \"%s\" \"$note\" | sed -E\
    \ 's/o\\|o\\./o|/g' | sed -E 's/o\\./o|/g' | tr -cd '[:digit:]')\n           \
    \ last=$((beat*2))\n        fi\n        # Handle full note case\n        else\n\
    \            beat=$(printf \"%s\" \"$note\" | tr -cd '[:digit:]')\n          \
    \  last=$((beat))\n        fi\n        music[i]=$last\n    }\n    echo \"${music[@]}\"",
  "    local music_str=$1\n    local music_arr=()\n\n    # Split string to array by\
    \ line\n    music_str=$(echo \"${music_str}\" | sed 's/[[:blank:]]/ /g')\n   \
    \ music_arr=(\"${music_str}\")\n    # Remove empty strings from the array\n  \
    \  music_arr=(\"${music_arr[@]}\")\n    # Eliminate all \"o\" and split by | into\
    \ array\n    music_arr=(\"${music_arr[@]//o}\")\n    # Split each item by | into\
    \ array\n    music_arr=(\"${music_arr[@]//|}\")\n\n    echo \"${music_arr[@]}\"",
  "    # Here we parse our string and create list of tuples with note and number of\
    \ beats\n    local str=\"$1\"\n    # Initialize list to store results\n    local\
    \ notes=()\n    for n in $str; do\n        case \"$n\" in\n            o) notes+=($(echo\
    \ $((${#notes[@]} - 1)*4)) \"\\\"$((${#notes[@]} - 1))\\\"\");;\n            o|)\
    \ notes+=($(echo $((${#notes[@]} - 1)*2)) \"\\\"$((${#notes[@]} - 1))\\\"\");;\n\
    \            .|) notes+=($(echo $((${#notes[@]} - 1)) \"\\\"$((${#notes[@]} -\
    \ 1))\\\"\");;\n        esac\n    done\n    # Return list of tuples containing\
    \ note and number of beats\n    echo $notes", "  local notes=\"$1\"\n  local beats=\"\
    $(( ${#notes} - 1 ))\"\n  local music_str=\"$(echo \"$notes\" | sed -e 's/o\\\
    ([\\.|o]\\)$/\"1\"/')\"\n  local music=($(echo \"$music_str\" | sed -e 's/.\\\
    ([0-9]\\)/\\1\"/'))\n  echo \"${music[@]:0:$beats}\"", "  local output\n  local\
    \ i\n  output=$1\n  for i in \"${output}\"; do\n    case \"$i\" in\n      \"o\"\
    )\n        echo $((${i}-4))\n      ;;\n      \"o|\")\n        echo $((${i}-2))\n\
    \      ;;\n      \".|\")\n        echo $((${i}-1))\n      ;;\n    esac\n  done",
  "    local music_str=\"$1\"\n    local music_str_tmp=\"\"\n    local music_str_tmp2=\"\
    \"\n    local music_str_tmp3=\"\"\n    local music_str_tmp4=\"\"\n    local music_str_tmp5=\"\
    \"\n    local music_str_tmp6=\"\"\n    local music_str_tmp7=\"\"\n    local music_str_tmp8=\"\
    \"\n    local music_str_tmp9=\"\"\n    local music_str_tmp10=\"\"\n    local music_str_tmp11=\"\
    \"\n    local music_str_tmp12=\"\"\n    local music_str_tmp13=\"\"\n    local\
    \ music_str_tmp14=\"\"\n    local music_str_tmp15=\"\"\n    local music_str_tmp16=\"\
    \"\n    local music_str_tmp17=\"\"\n    local music_str_tmp18=\"\"\n    local\
    \ music_str_tmp19=\"\"\n    local music_str_tmp20=\"\"\n    local music_str_tmp21=\"\
    \"\n    local music_str_tmp22=\"\"\n    local music_str_tmp23=\"\"\n    local\
    \ music_str_tmp24=\"\"\n    local music_str_tmp25=\"\"\n    local music_str_tmp26=\"\
    \"\n    local music_str_tmp27=\"\"\n    local music_str_tmp28=\"\"\n    local\
    \ music_str_tmp29=\"\"\n    local music_str_tmp30=\"\"\n    local music_str_tmp31=\"\
    \"\n    local music_str_tmp32=\"\"\n    local music_str_tmp33=\"\"\n    local\
    \ music_str_tmp34=\"\"\n    local music_str_tmp35=\"\"\n    local music_str_tmp36=\"\
    \"\n    local music_str_tmp37=\"\"\n    local music_str_tmp38=\"\"\n    local\
    \ music_str_tmp39=\"\"\n    local music_str_tmp40=\"\"\n    local music_str_tmp41=\"\
    \"\n    local music_str_tmp42=\"\"\n    local music_str_tmp43=\"\"\n    local\
    \ music_str_tmp44=\"\"\n    local music_str_tmp45=\"\"\n    local music_str_tmp46=\"\
    \"\n    local music_str_tmp47=\"\"\n    local music_str_tmp48=\"\"\n    local\
    \ music_str_tmp49=\"\"\n    local music_str_tmp50=\"\"\n    local music_str_tmp51=\"\
    \"\n    local music_str_tmp52=\"\"\n    local music_str_tmp53=\"\"\n    local\
    \ music_str_tmp54=\"\"\n    local music_str_tmp55=\"\"\n    local music_str_tmp56=\"\
    \"\n    ", "  local in=\"$1\"\n  local str=()\n\n  for char in $(echo \"$in\"\
    \ | sed \"s/\\(.\\|$\\)/'\\\"&\\\"'/g\"); do\n    if [[ \"$char\" == . ]]; then\n\
    \      # $char is '.'\n      str+=( \"\\\"${#str[@]}\\\"\" )\n    elif [[ \"$char\"\
    \ == * ]]; then\n      # $char is '*'\n      str+=( \"\\\"${#str[@]}\\\"\" )\n\
    \    elif [[ \"$char\" == o ]]; then\n      # $char is 'o'\n      str+=( \"\\\"\
    1\\\"\" )\n    elif [[ \"$char\" == o| ]]; then\n      # $char is 'o|'\n     \
    \ str+=( \"\\\"2\\\"\" )\n    elif [[ \"$char\" == o| ]]; then\n      # $char\
    \ is 'o|'\n      str+=( \"\\\"2\\\"\" )\n    elif [[ \"$char\" == o| ]]; then\n\
    \      # $char is 'o|'\n      str+=( \"\\\"1\\\"\" )\n    elif [[ \"$char\" ==\
    \ .| ]]; then\n      # $char is '.|'\n      str+=( \"\\\"3\\\"\" )\n    else\n\
    \      # $char is something else\n      str+=( \"\\\"${#str[@]}\\\"\" )\n    fi\n\
    \  done\n\n  echo \"${str[@]}\"", "    local string=\"${1}\"\n    local beats=0\n\
    \    local count=0\n    for (( i=0; i<${#string}; i++ )); do\n        if [ ${string:$i:1}\
    \ = \".\" ] ; then\n            (( beats++ ))\n        else\n            if [\
    \ ${string:$i:1} = \"o\" ] ; then\n                (( beats++ ))\n           \
    \ else\n                if [ ${string:$i:1} = \"|\" ] ; then\n               \
    \     (( beats++ ))\n                else\n                    if [ ${string:$i:1}\
    \ = \"o|\" ] ; then\n                        (( beats++ ))\n                 \
    \   else\n                        echo \"ERROR: unknown symbol in ${string:$i}\"\
    \n                    fi\n                fi\n            fi\n        fi\n   \
    \ done\n    echo \"\\\"${beats}\\\"\"", "    local music_string=$1\n    local\
    \ music_notes=\"${music_string//\\\"/}\"\n    local music_notes_list=\"\"\n  \
    \  local number_of_beats=0\n\n    local i=0\n    while [ \"$i\" -lt \"${#music_notes}\"\
    \ ]; do\n        music_note=${music_notes:$i:1}\n        if [ \"$music_note\"\
    \ == \"|\" ]; then\n            ((number_of_beats++))\n        elif [ \"$music_note\"\
    \ == \"o\" ]; then\n            ((number_of_beats+=4))\n        elif [ \"$music_note\"\
    \ == \"o|\" ]; then\n            ((number_of_beats+=2))\n        elif [ \"$music_note\"\
    \ == \".\" ]; then\n            ((number_of_beats+=1))\n        else\n       \
    \     echo \"$music_note is not supported. Supported musical notes: o, o|, .\"\
    \n            exit 1\n        fi\n        music_notes_list=\"${music_notes_list}${music_note}${number_of_beats}\"\
    \ # append beats number to a string with beats number\n        ((i+=1))\n    done\n\
    \    echo $music_notes_list", "    local music=$(echo \"$1\" | sed \"s/[^a-z]//g\"\
    )\n    local beat_count=$(echo \"$music\" | sed 's/o|\\.|\\|\\|/|/;s/o//;s/\\\
    .\\|//')\n    echo \"$beat_count\"", "  local STRING=$1\n  local STRING_END=$2\n\
    \  local OUTPUT\n  local OUTPUT2\n\n  while test $STRING != \"$STRING_END\"\n\
    \  do\n    case \"$STRING\" in\n    'o'|'o|') OUTPUT=\"$OUTPUT\" $((${#OUTPUT}\
    \ + 4)) ;;\n    '.'|'o|.') OUTPUT=\"$OUTPUT\" $((${#OUTPUT} + 2)) ;;\n    '.|o|.|')\
    \ OUTPUT=\"$OUTPUT\" $((${#OUTPUT} + 1)) ;;\n    '.') OUTPUT=\"$OUTPUT\" $((${#OUTPUT}))\
    \ ;;\n    *) OUTPUT=\"$OUTPUT\" $((${#OUTPUT} + 1)) ;;\n    esac\n    STRING=${STRING#?}\n\
    \  done\n\n  echo $OUTPUT", "  local music_str=$1\n  local music_arr=''\n  local\
    \ music_arr_i\n  local music_arr_j\n  local music_arr_k\n  local music_arr_i_cnt\n\
    \  local music_arr_j_cnt\n  local music_arr_k_cnt\n  local music_arr_i_cnt2\n\
    \  local music_arr_j_cnt2\n  local music_arr_k_cnt2\n  local music_arr_i_cnt3\n\
    \  local music_arr_j_cnt3\n  local music_arr_k_cnt3\n  local music_arr_i_cnt4\n\
    \  local music_arr_j_cnt4\n  local music_arr_k_cnt4\n  local music_arr_i_cnt5\n\
    \  local music_arr_j_cnt5\n  local music_arr_k_cnt5\n  local music_arr_i_cnt6\n\
    \  local music_arr_j_cnt6\n  local music_arr_k_cnt6\n  local music_arr_i_cnt7\n\
    \  local music_arr_j_cnt7\n  local music_arr_k_cnt7\n  local music_arr_i_cnt8\n\
    \  local music_arr_j_cnt8\n  local music_arr_k_cnt8\n  local music_arr_i_cnt9\n\
    \  local music_arr_j_cnt9\n  local music_arr_k_cnt9\n  local music_arr_i_cnt10\n\
    \  local music_arr_j_cnt10\n  local music_arr_k_cnt10\n  local music_arr_i_cnt11\n\
    \  local music_arr_j_cnt11\n  local music_arr_k_cnt11\n  local music_arr_i_cnt12\n\
    \  local music_arr_j_cnt12\n  local music_arr_k_cnt12\n  local music_arr_i_cnt13\n\
    \  local music_arr_j_cnt13\n  local music_arr_k_cnt13\n  local music_arr_i_cnt14\n\
    \  local music_arr_j_cnt14\n  local music_arr_k_cnt14\n  local music_arr_i_cnt15\n\
    \  local music_arr_j_cnt15\n  local music_arr_k_cnt15\n  local music_arr_i_cnt16\n\
    \  local music_arr_j_cnt16\n  local music_arr_k_cnt16", "    local input=$1\n\
    \    local output=()\n    for ix in \"${input}\"; do\n        local letter=${ix:0:1}\n\
    \        if [[ ${letter} == \".\" ]] || [[ ${letter} == \"o\" ]] || [[ ${letter}\
    \ == \"o|\" ]]; then\n            output+=(\"\\\"${ix:1}\\\"\")\n        else\n\
    \            output+=(\"\\\"${letter}${ix:1}\\\"\")\n        fi\n    done\n  \
    \  echo ${output[@]}", "    local STR=$1\n    local RSTR=''\n    local NOTES=()\n\
    \    local NOTE\n    local BES=()\n    local BE\n    local B\n    for STR; do\n\
    \        if [[ $STR == ' ' ]]; then\n            RSTR=\"${RSTR} \"\n         \
    \   NOTES+=(\"${NOTES[@]}\")\n            NOTES=()\n        else\n           \
    \ NOTE=\"${STR}\"\n            BE=(\"${NOTES[@]}\")\n            if [[ ${NOTE}\
    \ == ' ' ]]; then\n                NOTES+=(\"${NOTE}\")\n            else\n  \
    \              NOTES+=(\"${NOTE}-${BE}\")\n            fi\n        fi\n    done\n\
    \    echo \"${NOTES[@]}\"", "    local music_str=$1\n    local music_notes=\"\
    o o| .| o| o| .| .| .| .| o o\"\n    local music_notes_array=($(echo $music_notes\
    \ | sed 's/ /\\n/g'))\n    local music_notes_array_length=$((${#music_notes_array[@]}-1))\n\
    \    local music_notes_array_index_count=-1\n    local music_notes_array_index_offset=0\n\
    \    local music_notes_array_temp_index=-1\n    local music_notes_array_index_count=-1\n\
    \    local music_notes_array_index_offset=0\n\n    local music_notes_array_length=$((${#music_notes_array[@]}-1))\n\
    \    local music_notes_array_index_count=-1\n    local music_notes_array_index_offset=0\n\
    \n    local music_notes_array_temp_index=-1\n    local music_notes_array_index_count=-1\n\
    \    local music_notes_array_index_offset=0\n    while [[ $music_notes_array_index_count\
    \ -le $music_notes_array_length ]]; do\n        music_notes_array_temp_index=$((music_notes_array_index_count+1))\n\
    \        if [[ $music_notes_array[$music_notes_array_index_count] == '|' ]]; then\n\
    \            music_notes_array[$music_notes_array_index_offset]=\"${music_notes_array[$music_notes_array_index_offset]}.${music_notes_array[$music_notes_array_index_temp_index]}\"\
    \n            music_notes_array[$music_notes_array_index_temp_index]=\"\"\n  \
    \          music_notes_array_index_temp_index=$((music_notes_array_index_offset+1))\n\
    \            music_notes_array_index_offset=$((music_notes_array_index_offset+1))\n\
    \        else\n            music_notes_array[$music_notes_array_index_offset]=\"\
    ${music_notes_array[$music_notes_array_index_offset]}.${music_notes_array[$music_notes_array_index_temp_index]}\"\
    \n            music_notes_array[$music_notes_array_index_temp_index]=\"\"\n  \
    \      fi\n        music_notes_array_index_count=$((music_notes_array_index_count+1))\n\
    \    done\n    echo ${music_notes_array[@]}", "    local notes\n    local note\n\
    \    local note_count\n    local beat_count\n    local current_beat\n    notes=$1\n\
    \    note_count=4\n    beat_count=0\n\n    # First find out how many notes are\
    \ in the string.\n    while [[ $notes =~ \\^(.|o|\\|) ]]; do\n        note=${BASH_REMATCH[1]}\n\
    \        note_count=$((note_count + 1))\n        notes=${notes#$note}\n    done\n\
    \n    # Then fill array with all possible notes.\n    for (( i=0; (i <= $note_count);\
    \ i++ )); do\n        note=\"${notes}\"\n        if [ \"$note\" == \".\" ] ||\
    \ [ \"$note\" == \"o\" ] || [ \"$note\" == \"|\" ]; then\n            notes[$i]=$((${beat_count}+1))\n\
    \            beat_count=$((beat_count + 1))\n        else\n            notes[$i]=$((${beat_count}+2))\n\
    \            beat_count=$((beat_count + 1))\n        fi\n        notes=${notes#${note}}\n\
    \    done", "  local notes=$1\n  local notes_len=${#notes}\n  local notes_result=''\n\
    \  local i\n  local j\n\n  i=$((notes_len/4))\n  j=0\n\n  while ((i<notes_len))\
    \ && (($j < $i)) ; do\n    notes_result+=\"${notes[i-j]}\"\n    j=$((j+1))\n \
    \   i=$((i+1))\n  done\n\n  echo $notes_result", "  local music_string=\"$1\"\n\
    \  local music_notes=()\n  local music_notes_note_count=()\n  local music_notes_note_start_point=()\n\
    \n  for line in $music_string; do\n    local music_note=\"$(echo \"$line\" | tr\
    \ '[:upper:]' '[:lower:]')\"\n    local music_note_index\n    local music_note_length\n\
    \n    if [[ \"$music_note\" == \".\" ]]; then\n      music_note_index=\"${music_notes_note_start_point[@]}\"\
    \n      music_notes_note_start_point+=( \"${music_notes_note_start_point[@]:0:$music_notes_note_start_point[@]-1:1}\"\
    \ )\n      music_notes_note_count+=( \"${music_notes_note_count[@]:0:$music_notes_note_start_point[@]-1:1}\"\
    \ )\n      music_notes_note_count+=( 1 )\n    else\n      music_note_index=\"\
    $music_notes_note_start_point[@]$music_notes_note_count[@]\" # $music_notes_note_count[@]\
    \ is the length of previous note\n      music_notes_note_count+=( 1 )\n      if\
    \ [[ ! \"$music_note\" == \"o\" ]]; then\n        music_notes_note_start_point+=(\
    \ \"${music_notes_note_start_point[@]:0:$music_notes_note_start_point[@]-1:1}\"\
    \ )\n        music_notes_note_count+=( \"${music_notes_note_count[@]:0:$music_notes_note_start_point[@]-1:1}\"\
    \ )\n      fi\n    fi\n  done\n\n  local music_note\n  for music_note in \"${music_notes_note_count[@]}\"\
    ; do\n    music_notes+=($music_note)\n  done\n\n  echo \"${music_notes[@]}\"",
  "    local notes=$1\n    local beats=0\n    local last_note=\"\"\n    local last_beats=0\n\
    \    local notes_in_chord=()\n\n    for note in $notes; do\n        if [[ $note\
    \ == .\"|\" ]]; then\n            beats=$(($beats+1))\n        elif [[ $note ==\
    \ .\"o|\" ]]; then\n            beats=$(($beats+4))\n        elif [[ $note ==\
    \ .\"o\" ]]; then\n            beats=$(($beats+2))\n        elif [[ $note == .o\
    \ ]]; then\n            beats=$(($beats+1))\n        else\n            beats=$(($beats+1))\n\
    \            last_note=$note\n            last_beats=$beats\n            notes_in_chord+=($beats)\n\
    \        fi\n    done\n    notes_in_chord+=($beats)\n\n    printf \"%s\\n\" ${notes_in_chord[@]}",
  "  while read -r; do\n    if [[ $REPLY == \".\" ]]; then\n      printf '%s\\n' \"\
    ${REPLY//?/.}\"\n    else\n      printf '%s\\n' \"${REPLY//\\// }\"\n    fi\n\
    \  done <<< \"$1\"", "  echo \"${1}\" | sed \"s/ //g\" | tr \"|\" \"\\n\" | cut\
    \ -d \" \" -f 3 | sed \"s/.//g\" | paste -sd, - | sed 's/\"//g'", "    local str=$1\n\
    \    local last=\n    local count\n    while IFS= read -r char; do\n        if\
    \ [ \"$char\" = \"|\" ]; then\n            count=\"$(expr $count + 1)\"\n    \
    \        last=\"$(expr $last + 1)\"\n        else\n            count=\"$(expr\
    \ $count - 1)\"\n            last=\"$(expr $last - 1)\"\n        fi\n    done\n\
    \    echo \"\\\"${count}\\\"\" <<< \"${str}\"", "  local notes=\"$1\"\n  echo\
    \ \"$(echo \"$notes\" | sed 's/ /\\|/g' | sed 's/o|\\.|o/ \\\"\\\"/g' | sed 's/o|\\\
    .|o\\|o|\\./ \\\"\\\"/g' | sed 's/o|\\.|o\\|o\\|o|o| o\\|\\.\\|o\\|\\./ \\\"\\\
    \"/g' | sed 's/o|\\.|o\\|o\\|o\\|o\\|o\\|o\\|o\\|\\.\\|o\\|\\.\\|\\.\\|/ \\\"\\\
    \"/g' | sed 's/o\\|\\.\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|\\.\\|o\\|\\.\\|\\.\\|/ \\\
    \"\\\"/g' | sed 's/o\\|\\.\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|\\.\\|o\\|\\.\\|\\\
    .\\|/ \\\"\\\"/g' | sed 's/o\\|\\.\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|\\.\\|o\\\
    |\\.\\|\\.\\|/ \\\"\\\"/g' | sed 's/o\\|\\.\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\\
    |o\\|\\.\\|o\\|\\.\\|\\.\\|/ \\\"\\\"/g' | sed 's/o\\|\\.\\|o\\|o\\|o\\|o\\|o\\\
    |o\\|o\\|o\\|\\.\\|o\\|\\.\\|\\.\\|/ \\\"\\\"/g' | sed 's/o\\|\\.\\|o\\|o\\|o\\\
    |o\\|o\\|o\\|o\\|o\\|o\\|\\.\\|o\\|\\.\\|\\.\\|/ \\\"\\\"/g' | sed 's/o\\|\\.\\\
    |o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|\\.\\|o\\|\\.\\|\\.\\|/ \\\"\\\"/g' | sed\
    \ 's/o\\|\\.\\|o\\|o\\|o\\|o\\|o\\|o", "    local notes=\"$1\"\n    local notes_arr=()\n\
    \    local notes_str=`echo \"$notes\" | sed 's/\\./\\|/g'`\n    local notes_str_slash=`echo\
    \ \"$notes_str\" | sed 's/o|/o\\|/g'`\n    local notes_str_slash_arr=`echo \"\
    $notes_str_slash\" | sed 's/\\|/|/g'`\n    local notes_str_slash_arr2=`echo \"\
    $notes_str_slash_arr\" | sed 's/\\|/|/g'`\n    local notes_str_slash_arr2_arr=`echo\
    \ \"$notes_str_slash_arr2\" | sed 's/\\|/|/g'`\n    local notes_str_slash_arr2_arr2=`echo\
    \ \"$notes_str_slash_arr2_arr\" | sed 's/\\|/|/g'`\n    local notes_str_slash_arr2_arr2_arr=`echo\
    \ \"$notes_str_slash_arr2_arr2\" | sed 's/\\|/|/g'`\n    local notes_str_slash_arr2_arr2_arr2_arr=`echo\
    \ \"$notes_str_slash_arr2_arr2_arr\" | sed 's/\\|/|/g'`\n    local notes_str_slash_arr2_arr2_arr2_arr2_arr=`echo\
    \ \"$notes_str_slash_arr2_arr2_arr2_arr\" | sed 's/\\|/|/g'`\n    local notes_str_slash_arr2_arr2_arr2_arr2_arr2_arr=`echo\
    \ \"$notes_str_slash_arr2_arr2_arr2_arr2_arr\" | sed 's/\\|/|/g'`\n    local notes_str_slash_arr2_arr2_arr2_arr2_arr2_arr2_arr=`echo\
    \ \"$notes_str_slash_arr2_arr2_arr2_arr2_arr2_arr2_arr\" | sed 's/\\|/|/g'`\n\
    \    local notes_str_slash_arr2_arr2_arr2_arr2_arr2_arr2_arr2_arr=`echo \"$notes_str_slash_arr2_arr2_arr2_arr2_arr2_arr2_arr2_arr\"\
    \ | sed 's/\\|/|/g'`\n    local notes_str_slash_arr2_arr2_arr2_arr2_arr2_arr2_",
  "    # split string by each note, count the # of beats\n    # split string by each\
    \ beat, count the # of notes\n    # sort and count # of notes per beat\n    #\
    \ append string representation of note to array\n    # append beat to array\n\
    \    # sort array\n    # return array\n    local notes=\"\"\n    local beats=\"\
    \"\n    local note_count=0\n    local beat_count=0\n    local temp=\"\"\n    while\
    \ read -r note; do\n        temp=\"${temp}${note}\"\n        note_count=$((note_count\
    \ + 1))\n    done < <(echo \"$1\")\n    while read -r beat; do\n        temp=\"\
    ${temp}${beat}\"\n        beat_count=$((beat_count + 1))\n    done < <(echo \"\
    $1\")\n    temp=\"${temp}\"\n    temp=$(echo \"$temp\" | sort -n | tr '\\n' '\
    \ ')\n    temp=$(echo \"$temp\" | sed \"s/ /\\\"$note_count\\\"/;s/\\|/\\\"$beat_count\\\
    \"/\")\n    echo \"$temp\"", "    local notes=\"$1\"\n    local beats=\"\"\n \
    \   local note=\"\"\n    local beat=\"\"\n    local octave=0\n    local rest=\"\
    \"\n    local note_count=0\n\n    while [ -n \"$notes\" ]; do\n        case \"\
    $notes\" in\n            'o' ) note_count=4;;\n            'o|' ) note_count=2;;\n\
    \            '.|' ) note_count=1;;\n            *) note_count=0;;\n        esac\n\
    \n        if [ \"$note_count\" -eq \"0\" ]; then\n            notes=\"${notes:1}\"\
    \n        fi\n\n        case \"$notes\" in\n            'o' ) note=\"\\\"${notes:1}\\\
    \"\";;\n            'o|' ) note=\"\\\"${notes:1}\\\"\";;\n            '.|' ) note=\"\
    \\\"${notes:1}\\\"\";;\n            *) note=\"\\\"${notes:1}\\\"\";;\n       \
    \ esac\n\n        if [ \"$octave\" -lt 4 ]; then\n            if [ \"$octave\"\
    \ -eq \"0\" ]; then\n                octave=1\n            else\n            \
    \    octave=$((octave+1))\n            fi\n            beats=\"${beats}\\\"${octave}\\\
    \"\"\n        else\n            if [ \"$octave\" -ge 4 ]; then\n             \
    \   octave=0\n            fi\n            beats=\"${beats}\\\"${octave}\\\"\"\n\
    \        fi\n\n        case \"$notes\" in\n            '.' ) rest=\"\\\"${notes:1}\\\
    \"\";;\n        esac\n\n        notes=\"${notes:2}${rest}\"\n        beats=\"\
    ${beats}${rest}\"\n\n        if [ \"$note_count\" -ge 4 ]; then\n            octave=$((octave+1))\n\
    \        fi\n    done\n\n    echo \"$beats\"", "    local music_str=$1\n    local\
    \ output\n    output=$(echo $music_str | sed -e 's/^\\s*//' -e 's/\\s*$//')\n\
    \    local i\n    for ((i = 0; i <= ${#music_str}; i++ )); do\n        local str\n\
    \        str=$(echo $music_str | sed -n \"${i}p\")\n        if [[ $str == $output\
    \ ]]; then\n            output=$(echo $music_str | sed -e \"${i}q;d\" -e 's/^\\\
    s*//' -e 's/\\s*$//')\n        fi\n    done\n    echo $output", "  local music\
    \ # 'music' variable name is a convention used in bash scripts to represent a\
    \ variable\n  local note # 'note' variable name is a convention used in bash scripts\
    \ to represent a variable\n  local n # 'n' variable name is a convention used\
    \ in bash scripts to represent a variable\n  local r # 'r' variable name is a\
    \ convention used in bash scripts to represent a variable\n\n  music=$1\n  n=0\n\
    \  r=4\n  while read -r note; do\n    if [[ \"$note\" == \"o|\" ]]; then\n   \
    \   (( n += r ))\n      r*=2\n    elif [[ \"$note\" == \".|\" ]]; then\n     \
    \ (( n += 1 ))\n    elif [[ \"$note\" == \"o\" ]]; then\n      (( n += 4 ))\n\
    \    fi\n  done <<< \"$music\"\n  printf \"%s\" \"$n\"", "  local x\n  local -n\
    \ array=array\n  local -n result=result\n\n  for x; do\n    if [[ \"${x:0:1}\"\
    \ == \".\" || \"${x:0:1}\" == \"o\" ]]; then\n      if [[ \"${x:0:1}\" == \"o\"\
    \ ]]; then\n        array+=(\"${x}\")\n      else\n        array+=(\"${x:1}\"\
    )\n      fi\n    elif [[ \"${x:0:1}\" == \"o|\" ]]; then\n      array+=(\"${x:1}\"\
    )\n    elif [[ \"${x:0:1}\" == \"|\" ]]; then\n      array+=(\"${x:1}\")\n   \
    \ else\n      array+=(\"${x:0:1})\n    fi\n  done\n\n  result=(\"${array[@]}\"\
    )", '  # TODO: implement the function', "    local notes=\"$1\"\n    local beats\n\
    \    local result\n    local i=0\n    local temp1\n    local temp2\n    local\
    \ temp3\n    while true; do\n        temp1=\"${notes:i:1}\"\n        temp2=\"\
    ${notes:i:2}\"\n        temp3=\"${notes:i:3}\"\n        if [ -z \"$temp1\" -o\
    \ \"$temp1\" == \".\" ]; then\n            if [ -z \"$temp2\" -o \"$temp2\" ==\
    \ \".\" ]; then\n                if [ -z \"$temp3\" -o \"$temp3\" == \".\" ];\
    \ then\n                    beats=\"$beats$i\"\n                    i=$((i+1))\n\
    \                    if [ $i -eq 3 ]; then\n                        result=\"\
    $beats\"\n                        break\n                    else\n          \
    \              i=$((i+1))\n                    fi\n                else\n    \
    \                beats=\"$beats$i\"\n                    i=$((i+1))\n        \
    \            result=\"$beats\"\n                    break\n                fi\n\
    \            else\n                beats=\"$beats$i\"\n                i=$((i+1))\n\
    \                result=\"$beats\"\n                break\n            fi\n  \
    \      else\n            if [ \"$temp1\" == \"o\" ]; then\n                beats=\"\
    $beats$i\"\n                i=$((i+1))\n                result=\"$beats\"\n  \
    \              break\n            fi\n            if [ \"$temp2\" == \"o\" ];\
    \ then\n                beats=\"$beats$i\"\n                i=$((i+1))\n     \
    \           result=\"$beats\"\n                break\n            fi\n       \
    \     if [ \"$temp3\" == \"o\" ]; then\n                beats=\"$beats$i\"\n \
    \               i=$((i+1))\n                result=\"$beats\"\n              \
    \  break\n            fi\n        fi\n    done\n    echo \"$result\"", "    local\
    \ music len\n    music=\"$1\"\n    len=${#music}\n    shift\n    echo $music |\
    \ while read note; do\n        case \"$note\" in\n            'o') printf '%s\\\
    n' \"$((len-$((${#note}-1))))\"\n                break\n                ;;\n \
    \           'o|') printf '%s\\n' \"$((len-$((${#note}-1))))\"\n              \
    \  break\n                ;;\n            '.|') printf '%s\\n' \"$((len-$((${#note}-1))))\"\
    \n                break\n                ;;\n        esac\n    done", "    local\
    \ music_string=$1\n    local beats\n    local notes\n    local beat_counter\n\
    \    local note_counter\n\n    beats=$(echo $music_string | sed 's/^.//' | sed\
    \ 's/o.*/\"4\"/' | sed 's/o\\|.*/\"2\"/' | sed 's/o\\|o\\|.*/\"1\"/' | sed 's/o\\\
    |o\\|o\\|.*/\"2\"/' | sed 's/o\\|o\\|o\\|o\\|.*/\"2\"/' | sed 's/o\\|o\\|o\\|o\\\
    |o\\|.*/\"3\"/' | sed 's/o\\|o\\|o\\|o\\|o\\|o\\|.*/\"2\"/' | sed 's/o\\|o\\|o\\\
    |o\\|o\\|o\\|o\\|.*/\"4\"/' | sed 's/o\\|o\\|o\\|o\\|o\\|o\\|o\\|o\\|.*/\"4\"\
    /' | sed 's/\\.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\\
    |.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\\
    |.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\\
    |.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\\
    |.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|.\\|", "    local\
    \ str=$1\n    local res=()\n    local note\n    local last_note\n    local last_beat_len\n\
    \    local beats_str\n    local i j k l\n    local notes\n\n    notes=($str)\n\
    \n    note =\"${notes[0]}\"\n    last_beat_len=$((${#note}-1))\n\n    beats_str=\"\
    ${note}${note}\"\n    \n    beats_str=${beats_str#${beats_str%}}\n    beats_str=${beats_str//${beats_str%}}\n\
    \    beats_str=${beats_str//\\\\/}\n    beats_str=${beats_str//^}\n    beats_str=${beats_str//\\\
    }\n\n    # cut off last beat\n    beats=${beats_str: -$((last_beat_len+1))}\n\
    \    for j in $beats; do\n        res_str=\"${res}\"\n        if [[ \"$note\"\
    \ == \".\" || \"$note\" == \"o\" ]]; then\n            [[ \"$j\" -eq 0 ]] && res_str+=\"\
    1\"\n        elif [[ \"$note\" == \"|\" ]]; then\n            [[ \"$j\" -eq 0\
    \ ]] && res_str+=\"2\"\n        else\n            [[ \"$j\" -eq 0 ]] && res_str+=\"\
    0\"\n        fi\n        res_str+=\"'\"\n        res_str+=\"${j}\"\n        res_str+=\"\
    '\"\n        res+=($res_str)\n        note=${notes:$((${#note}-1))}\n    done\n\
    \n    return \"${res[@]}\"", "    music_line=$1\n    note_line=\n    notes=\n\
    \    note_count=\n    music_beats=\n    music_notes=\n\n    if [ -z ${music_line}\
    \ ]\n    then\n        echo $music_line > /tmp/music-to-beat.log\n        echo\
    \ \"Usage: $(basename $0) music-line\" >&2\n        exit 1\n    fi\n\n    for\
    \ ((i = 0; $music_line | sed -n $i\"p\" > /tmp/music-to-beat.log; i=$(($i+1)))\n\
    \    do\n        music_beats+=$(($music_beats+1))\n        music_notes+=$(($music_notes+1))\n\
    \    done\n\n    echo \"$music_beats\" > /tmp/music-to-beat.log\n    echo \"$music_notes\"\
    \ > /tmp/music-to-beat.log\n    echo \"$music_line\" >> /tmp/music-to-beat.log\n\
    \n    echo $music_beats > /tmp/music-to-beat.log\n    echo $music_notes > /tmp/music-to-beat.log\n\
    \n    music_beats=$(sed -n \"0,$music_beats\"p /tmp/music-to-beat.log)\n    music_notes=$(sed\
    \ -n \"$music_beats,$music_beats\"p /tmp/music-to-beat.log)\n\n    echo $music_beats\
    \ > /tmp/music-to-beat.log\n    echo $music_notes > /tmp/music-to-beat.log\n\n\
    \    music_beats=$(sed -n \"$music_beats,$music_beats\"p /tmp/music-to-beat.log)\n\
    \    music_notes=$(sed -n \"$music_beats,$music_beats\"p /tmp/music-to-beat.log)\n\
    \n    echo $music_beats > /tmp/music-to-beat.log\n    echo $music_notes > /tmp/music-to-beat.log\n\
    \n    music_beats=$(sed -n \"$music_beats,$music_beats\"p /tmp/music-to-beat.log)\n\
    \    music_notes=$(sed -n \"$music_beats,$music_beats\"p /tmp/music-to-beat.log)\n\
    \n    echo $music_beats > /tmp/music-to-beat.log\n    echo $music_notes > /tmp/music-to-beat.log\n\
    \n    music_beats=$(sed -n \"$music_beats,$music_beats\"p /tmp/music-to-beat.log)\n\
    \    music_notes=$(sed -n \"$music_beats,$music_", "    local notes=$1\n    local\
    \ music=()\n    local i=0 \n    local note\n    local beats\n    local b\n   \
    \ local beat\n    local bbeats\n    local bbeat\n    for note in $notes; do\n\
    \        beats=\"$(cycle \"$note\" '|')\"\n        bbeats=\"$(eval echo \"$beats\"\
    \ | sed \"s/|//g\" | awk '{print ($1 + \"0\" + ($1 - 1) / 4)}')\"\n        music[i]=\"\
    $(bbeats)\"\n        ((i++))\n    done\n    echo '\"'\"${music[@]}\"'\"", "  local\
    \ temp=()\n  local str=$1\n\n  local count=0\n  local i=0\n\n  while [ $i -le\
    \ ${#str} ]; do\n    if [ ${str:$i:1} == \"|\" ]; then\n      count=$(( $count\
    \ + 1 ))\n      i=$(( $i + 1 ))\n    else\n      i=$(( $i + 1 ))\n      temp[$count]=$((\
    \ $count ))\n    fi\n  done\n\n  echo ${temp[@]}", "  local note=\"$1\"\n  local\
    \ str\n  local strs\n  local cnt=0\n  local beat_str\n  local beat_strs\n  strs=$(echo\
    \ $note | sed \"s/o|.|/\\\"$1/\")\n  for str in $strs; do\n    beat_strs=$(echo\
    \ $str | sed \"s/o|.|/\\\"$1/\")\n    for beat_str in $beat_strs; do\n      cnt=$(echo\
    \ $beat_str | sed \"s/o|.|/\\\"$1/\")\n      echo $cnt\n    done\n  done", " \
    \   local result\n    local i note beats last_beats last_note\n    local tmp tmp2\n\
    \    note=$1\n    beats=\"\"\n    last_beats=\"\"\n    last_note=\"\"\n    for\
    \ ((i=0; i < ${#note}; i+=1)); do\n        if [[ \"${note:$i:1}\" == \"|\" ]];\
    \ then\n            if [[ \"${note:$i+1:1}\" == \"|\" ]]; then\n             \
    \   # Note is a quarter note\n                tmp=\"${note:$i+1:1}\"\n       \
    \         tmp2=\"${note:$i+2:1}\"\n                beats=\"${beats}${tmp:0:1}\"\
    \n                last_beats=\"${last_beats}${tmp2:0:1}\"\n                last_note=\"\
    ${note:$i:1}\"\n            else\n                tmp=\"${note:$i:1}\"\n     \
    \           beats=\"${beats}${tmp:0:1}\"\n                last_beats=\"${last_beats}${tmp:0:1}\"\
    \n                last_note=\"${note:$i+1:1}\"\n            fi\n        fi\n \
    \   done\n    result=\"${beats}${last_beats}${last_note}\"\n    echo \"${result}\"",
  "    echo \"$1\" | cut -d' ' -f1,2- | sed 's/|/&\\n/g' | sed 's/./&\"/g'", "   \
    \ local music_str=$1\n    music_str=${music_str//\"o o|\"./ }\n    music_str=${music_str//\"\
    |\"./ }\n    music_str=${music_str//\"|/| }\n    music_str=${music_str//\"|/\"\
    }\n    music_str=${music_str//\"o.oo.\"/}\n    music_str=${music_str//\"o.o.o.\"\
    /}\n    music_str=${music_str//\"o.o.o.\"/}\n    music_str=${music_str//\"o.o.o.\"\
    /}\n    music_str=${music_str//\"o.o.o.\"/}\n    music_str=${music_str//\"o.o.o.\"\
    /}\n    music_str=${music_str//\"o.o.o.\"/}\n    music_str=${music_str//\"o.o.o.\"\
    /}\n    music_str=${music_str//\"o.o.o.\"/}\n    music_str=${music_str//\"o.o.o.\"\
    /}\n    music_str=${music_str//\"o.o.o.\"/}\n    music_str=${music_str//\"o.o.o.\"\
    /}\n    music_str=${music_str//\"o.o.o.\"/}\n    music_str=${music_str//\"o.o.o.\"\
    /}\n    music_str=${music_str//\"o.o.o.\"/}\n    music_str=${music_str//\"o.o.o.\"\
    /}\n    music_str=${music_str//\"o.o.o.\"/}\n    music_str=${music_str//\"o.o.o.\"\
    /}\n    music_str=${music_str//\"o.o.o.\"/}\n    music_str=${music_str//\"o.o.o.\"\
    /}\n    music_str=${music_str//\"o.o.o.\"/}\n    music_str=${music_str//\"o.o.o.\"\
    /}\n    music_str=${music_str//\"o.o.o.\"/}\n    music_str=${music_str//\"o.o.o.\"\
    /}\n    music_str=${music_str//\"o.o.o.\"/}\n    music_str=${music_str//\"o.o.o.\"\
    /}\n    music_str=${music_str//\"o.o.o.\"/}\n    music_str=${music_str//\"o.",
  "    local music_str=$1\n    local music_str_reversed=$(echo $music_str | rev |\
    \ sed -r 's/(.)\\2/\\\\1/g' | rev | sed -r 's/(.)/\\1/g')\n    local music_str_length=$(echo\
    \ $music_str_reversed | wc -l)\n    local music_str_mirror=$(echo $music_str_reversed\
    \ | sed -r 's/(.)/\\1\\1/g')\n    local music_str_split=$(echo $music_str_mirror\
    \ | sed -r 's/(.)/\\1\\n/g')\n    local music_str_split2='\"' $music_str_split\n\
    \    local music_str_split3='\"' $music_str_split\n    local music_str_split4=$music_str_split3\
    \ $music_str_split2\n    local music_str_split5='\"' $music_str_split\n    local\
    \ music_str_split6=$music_str_split5 $music_str_split2\n    local music_str_split7=$music_str_split6\
    \ $music_str_split2\n    local music_str_split8=$music_str_split7 $music_str_split2\n\
    \    local music_str_split9=$music_str_split8 $music_str_split2\n    local music_str_split10=$music_str_split9\
    \ $music_str_split2\n    local music_str_split11=$music_str_split10 $music_str_split2\n\
    \    local music_str_split12=$music_str_split11 $music_str_split2\n    local music_str_split13=$music_str_split12\
    \ $music_str_split2\n    local music_str_split14=$music_str_split13 $music_str_split2\n\
    \    local music_str_split15=$music_str_split14 $music_str_split2\n    local music_str_split16=$music_str_split15\
    \ $music_str_split2\n    local music_str_split17=$music_str_split16 $music_str_split2\n\
    \    local music_str_split18=$music_str_split17 $music_str_split2\n    local music_str_split19=$music_str_split18\
    \ $music_str_split2\n    local music_str_split20=$music_str_split19 $music_str_split2\n\
    \    local music_str_split21=$music_str_split20 $music_str_split2", "    IFS=\\\
    | \n    set -- $1;\n    local music=$(echo {1..$#} | tr ' ' '\\n' | xargs)\n \
    \   echo $(echo $music | sed 's/\\([0-9]\\)/ \\1 /g')", "    local str=$1\n  \
    \  echo \"$str\" | sed 's/\\.$//g' | sed 's/o$//g' | sed 's/o\\|$//g' | sed 's/.\\\
    |$//g' | sed 's/^[ ]*//g' | sed 's/[ ]*$//g'", "    local music_str=\"$1\"\n \
    \   local music_arr=()\n    local music_last='0'\n    local music_last_beat='0'\n\
    \    local music_last_beats='0'\n\n    local music_prev_beat=''\n    local music_prev_beats='0'\n\
    \    local music_prev_beats_str=''\n\n    local music_notes=()\n    local music_notes_len=0\n\
    \n    while read -r music_note || [[ -n $music_note ]]; do\n        if [[ \"$music_note\"\
    \ =~ ^\\. ]]; then\n            music_notes_len=$((music_notes_len + 1))\n   \
    \     elif [[ \"$music_note\" =~ ^\\o ]]; then\n            music_notes_len=$((music_notes_len\
    \ + 2))\n        elif [[ \"$music_note\" =~ ^\\o\\| ]]; then\n            music_notes_len=$((music_notes_len\
    \ + 1))\n        elif [[ \"$music_note\" =~ ^\\..\\| ]]; then\n            music_notes_len=$((music_notes_len\
    \ + 2))\n        fi\n\n        if [[ \"$music_note\" =~ ^\\. ]]; then\n      \
    \      music_notes+=( \"$(seq -f '\" \"' '\"%d\" ' $music_note)\" )\n        elif\
    \ [[ \"$music_note\" =~ ^\\o ]]; then\n            music_notes+=( \"$(seq -f '\"\
    \ \"' '\"%d\" ' $music_note)\" )\n        elif [[ \"$music_note\" =~ ^\\o\\| ]];\
    \ then\n            music_notes+=( \"$(seq -f '\" \"' '\"%d\" ' $music_note)\"\
    \ )\n        elif [[ \"$music_note\" =~ ^\\..\\| ]]; then\n            music_notes+=(\
    \ \"$(seq -f '\" \"' '\"%d\" ' $music_note)\" )\n        fi\n\n        music_last_beats='$((music_last_beats\
    \ + 1))'\n        if [[ \"$music_last_beats\" -gt \"$music_notes_len\" ]]; then\n\
    \            music_last_beat='$((music_last_beats + 1))'\n        fi\n\n     \
    \   music_last_beats_str=\"$music_last_beats$music_last_beat\"\n        if [[\
    \ \"$music_last_beats\" -ne \"$music_notes_len\" ]]; then\n            music_last_beats_str=\"\
    $music_last_beats_str0\"\n        fi\n\n        music_last_beats_str=\"${music_last_beats_str",
  '  local music "1=$1 2=$1 3=$1 4=$1 5=$1 6=$1 7=$1 8=$1 9=$1 10=$1 11=$1 12=$1 13=$1
    14=$1 15=$1 16=$1 17=$1 18=$1 19=$1 20=$1 21=$1 22=$1 23=$1 24=$1 25=$1 26=$1
    27=$1 28=$1 29=$1 30=$1 31=$1 32=$1 33=$1 34=$1 35=$1 36=$1 37=$1 38=$1 39=$1
    40=$1 41=$1 42=$1 43=$1 44=$1 45=$1 46=$1 47=$1 48=$1 49=$1 50=$1 51=$1 52=$1
    53=$1 54=$1 55=$1 56=$1 57=$1 58=$1 59=$1 60=$1 61=$1 62=$1 63=$1 64=$1 65=$1
    66=$1 67=$1 68=$1 69=$1 70=$1 71=$1 72=$1 73=$1 74=$1 75=$1 76=$1 77=$1 78=$1
    79=$1 80=$1 81=$1 82=$1 83=$1 84=$1 85=$1 86=$1 87=$1 88=$1 89=$1 90=$1 91=$1
    92=$1 93=$1 94=$1 95=$1 96=$1 97=$1 98=$1 99=$1 100=$1 101=$1 102=$1 103=$1 104=$1
    105=$1 106=$1 107=$1 108=$1 109=$1 110=$1 111=$1 112=$1 113=$1 114=$1 115=$1 116=$1
    117=$1 118=$1 119=$1 120=$1 121=$1 122=$1 123=$1 124=$1 125=$1 126=$1 127=$1 128=$1
    129=$1 130=$1 131=$1 132=$1 133=$1 134=$1 135=$1 136=$1 137=$1 138=$1 139=$1 140=$1
    141=$1 142=$1 143=$1 144=$1 145=$1 146=$1 147=$1 148=$1 149=$1 150=$1 151=$1 152=$1
    153=$1 154=$1 155=$1 156=$1 157=$1 158=$1 159=$1 160=$1 161=$1 162=$1 163=$1 164=$1
    165=$1 166=$', "  local STR=$1\n  local N=$2\n  local M=$(( ${#STR} - $N + 1 ))\n\
    \  local O='o'\n  local O='|'\n  local DOT='.'\n  local SEP=\" \"\n  local
  "    local x\n    local last\n\n    # Remove newlines, strip spaces \n    # Replace\
    \ each character with corresponding number\n    # Add quotes around number\n \
    \   x=$(echo $1 | sed -e 's/\\\\n//g' -e 's/ /|/g' -e 's/^/\"/' -e 's/$/\"/' )\n\
    \    x=$(echo \"$x\" | sed -e 's/\\(.\\)/\"\\1\"/g')\n\n    last=$(echo $x | sed\
    \ -e 's/ /|/g' -e 's/o\\|o/|/g' -e 's/o\\|o/\\|/g' -e 's/\\.\\|.\\|/\\|/g' -e\
    \ 's/o\\|o/o/g')\n    echo $last", "  local music_string=$1\n  local music\n \
    \ music=$(echo \"$music_string\" | sed -E 's/(\\.|[^|])*$//g; s/^[|][|][|]//g;\
    \ s/[|][|][|]$//g; s/[|][|][|][|]//g; s/[|][|][|][|][|]//g; s/[|][|][|][|][|][|]//g;')\n\
    \  echo \"${music}\"", "    local music=$1\n    local last=$(echo $music | rev\
    \ | cut -d \" \" -f1 | rev)\n    local rest=$(echo $music | rev | sed \"s/.* \\\
    ([^ ]*\\) .*/\\1/g\" | rev)\n    echo $rest\n    local rest=$( echo $rest | sed\
    \ \"s/$last/$1/g\" | sed \"s/$last|/$1/\" | sed \"s/$last.|/$1/\" )\n    echo\
    \ $rest\n    echo \"$rest\"", "  local music_str=$1\n  echo \"$music_str\" | sed\
    \ -e \"s/[^a-zA-Z\\.0-9]/ /g\" | sed -e \"s/ /\\//g\" | sed -e \"s/^\\//0/\" |\
    \ sed -e \"s/$/ 1/\" | sed -e \"s/ /|/g\" | sed -e \"s/|/\\\"$music_str\\\"/g\"\
    \ | sed -e \"s/0//g\" | sed -e \"s/\\///g\" | sed -e \"s/.//g\" | sed -e \"s/$/\
    \ 0/g\" | sed -e \"s/| /./g\"", "    local n=$1\n    local out=0\n    while [\
    \ \"$n\" ]; do\n        case \"$n\" in\n            o|.|\\?)\n               \
    \ out=$(($out+1))\n                ;;\n            esac\n        n=${n#*|}\n \
    \   done\n    echo \"\\\"$out\\\"\"", "    local input=\"$1\"\n    local str=\"\
    \"\n    local numbers=$(echo -n \"$input\" | cut -d \"|\" -f \"1,2,3,4,5,6,7,8,9,10,11,12,13\"\
    )\n    local i\n    for i in $(seq 0 \"${#numbers}\")\n    do\n        if [[ ${input[$i]}\
    \ == \"o\" ]]\n        then\n            str=\"$str ${numbers[$i]}\"\n       \
    \ elif [[ ${input[$i]} == \"o|\" ]]\n        then\n            str=\"$str ${numbers[$i]}*\"\
    \n        elif [[ ${input[$i]} == \".|\" ]]\n        then\n            str=\"\
    $str ${numbers[$i]}\"\n        fi\n    done\n    echo \"$str\"", "    local music\
    \ = $1\n\n    # parse notes from music string\n    local notes=$(echo $music |\
    \ sed 's/.*/\"&\"/' | sed 's/^\"\\(.*\\)\"$/\\1/')\n    # print beats count for\
    \ each note\n    echo $(echo $notes | sed 's/^\"\\(.*\\)\"$/\\1/' | sed 's/|/\"\
    /' | sed 's/o\\./\"&\"/' | awk '{print $1 }'  | sed 's/\\./\"&\"/')", "\tlocal\
    \ music_notes=\"$1\";\n\tlocal notes=\"\";\n\n\tfor note; do\n\t\t# check if note\
    \ is valid or if it is the end of string (notes ends with '|')\n\t\tif [[ \"$note\"\
    \ != o && \"$note\" != .* ]]; then\n\t\t\tnotes+=$(echo \"$note\" | wc -w);\n\t\
    \tfi\n\tdone\n\n\techo $notes;", "    local music_str=$1\n    local music_str_cpy=$music_str\n\
    \    local music_str_cpy2=$music_str\n    local music_str_cpy3=$music_str\n  \
    \  local music_str_cmp4=$music_str\n    local music_str_cmp5=$music_str\n\n  \
    \  music_str_cpy=\"$(echo $music_str_cpy | sed \"s/'//g\")\"\n    music_str_cpy2=\"\
    $(echo $music_str_cpy2 | sed \"s/'//g\")\"\n    music_str_cpy3=\"$(echo $music_str_cpy3\
    \ | sed \"s/'//g\")\"\n    music_str_cmp4=\"$(echo $music_str_cmp4 | sed \"s/'//g\"\
    )\"\n    music_str_cmp5=\"$(echo $music_str_cmp5 | sed \"s/'//g\")\"\n\n    music_str_cpy=\"\
    $(echo $music_str_cpy | sed \"s/o//g\")\"\n    music_str_cpy2=\"$(echo $music_str_cpy2\
    \ | sed \"s/o//g\")\"\n    music_str_cpy3=\"$(echo $music_str_cpy3 | sed \"s/o//g\"\
    )\"\n    music_str_cmp4=\"$(echo $music_str_cmp4 | sed \"s/o//g\")\"\n    music_str_cmp5=\"\
    $(echo $music_str_cmp5 | sed \"s/o//g\")\"\n    music_str_cmp4=\"$(echo $music_str_cmp4\
    \ | sed \"s/o//g\")\"\n    music_str_cmp5=\"$(echo $music_str_cmp5 | sed \"s/o//g\"\
    )\"\n    music_str_cmp5=\"$(echo $music_str_cmp5 | sed \"s/o//g\")\"\n    music_str_cmp5=\"\
    $(echo $music_str_cmp5 | sed \"s/o//g\")\"\n    music_str_cmp5=\"$(echo $music_str_cmp5\
    \ | sed \"s/o//g\")\"\n    music_str_cmp5=\"$(echo $music_str_cmp5 | sed \"s/o//g\"\
    )\"\n    music_str_cmp5=\"$(echo $music_str_cmp5 | sed \"s/o//g\")\"\n    music_str_cmp5=\"\
    $(", "    local music_str=$1\n    local music_str2=${music_str//\"o}\"'|'}\n \
    \   local music_str3=${music_str2//\"|\"}'.'}\n    local music_str4=${music_str3//\"\
    |\"}'.'}\n    local music_str5=${music_str4//\"|\"}'.'}\n    local music_str6=${music_str5//\"\
    |\"}'.'}\n    local music_str7=${music_str6//\"|\"}'.'}\n    local music_str8=${music_str7//\"\
    |\"}'.'}\n    local music_str9=${music_str8//\"|\"}'.'}\n    local music_str10=${music_str9//\"\
    |\"}'.'}\n    local music_str11=${music_str10//\"|\"}'.'}\n    local music_str12=${music_str11//\"\
    |\"}'.'}\n    local music_str13=${music_str12//\"|\"}'.'}\n    local music_str14=${music_str13//\"\
    |\"}'.'}\n    local music_str15=${music_str14//\"|\"}'.'}\n    local music_str16=${music_str15//\"\
    |\"}'.'}\n    local music_str17=${music_str16//\"|\"}'.'}\n    local music_str18=${music_str17//\"\
    |\"}'.'}\n    local music_str19=${music_str18//\"|\"}'.'}\n    local music_str20=${music_str19//\"\
    |\"}'.'}\n    local music_str21=${music_str20//\"|\"}'.'}\n    local music_str22=${music_str21//\"\
    |\"}'.'}\n    local music_str23=${music_str22//\"|\"}'.'}\n    local music_str24=${music_str23//\"\
    |\"}'.'}\n    local music_str25=${music_str24//\"|\"}'.'}\n    local music_str26=${music_str25//\"\
    |\"}'.'}\n    local music_str27=${music_str26//\"|\"}'.'}\n    local music_str28=${music_str27//\"\
    |\"}'.'}\n    local music_str29=${music_str28//\"|\"}'.'}\n", "  local music_string=$1\n\
    \  local last_note=$(echo $music_string | awk '{print $1}')\n  local music_split=$(echo\
    \ $music_string | awk '{print $2}')\n  local music_notes=$(echo $music_string\
    \ | awk '{print $3}' | awk '{print $1}')\n  local last_beat=$(echo $music_string\
    \ | awk '{print $5}')\n  local last_duration=$(echo $music_string | awk '{print\
    \ $4}')\n  local music_split=$(echo $music_string | awk '{print $2}')\n  local\
    \ music_notes=$(echo $music_string | awk '{print $3}' | awk '{print $1}')\n\n\
    \  # echo $music_split\n  # echo $music_notes\n  # echo $last_note\n  # echo $last_beat\n\
    \  # echo $last_duration\n\n  local music_notes_array=(${music_split//:/ })\n\
    \  local music_notes_array_length=${#music_notes_array[@]}\n\n  # echo $music_notes_array_length\n\
    \n  # if music_notes_array_length > 0, then\n  if [[ $music_notes_array_length\
    \ -gt 0 ]]; then\n    local music_notes_array_elements=()\n    local music_notes_array_elements_length=()\n\
    \    local last_beat_array_elements=()\n    local last_beat_array_elements_length=()\n\
    \    local last_duration_array_elements=()\n    local last_duration_array_elements_length=()\n\
    \n    for music_note in ${music_notes_array[@]}; do\n      # echo $music_note\n\
    \n      music_note_length=$(echo $music_note | awk '{print length}')\n\n     \
    \ if [[ $music_note_length -lt 4 ]]; then\n        last_beat_array_elements+=$(echo\
    \ $music_note | awk '{print $5}')\n        last_beat_array_elements_length+=$(echo\
    \ $music_note | awk '{print length}')\n        last_duration_array_elements+=$(echo\
    \ $music_note | awk '{print $4}')\n        last_duration_array_elements_length+=$(echo\
    \ $music_note | awk '{print length}')\n      else\n        music_note_length=$(echo\
    \ $music_note | awk '{print length}')\n        last_beat_array_elements+=$(echo\
    \ $music_note | awk '{print $5}')\n        last_beat_array_elements_length+=$(echo\
    \ $music_note | awk '{print length}')\n        last_duration_array_elements+=$(echo\
    \ $music_note | awk '{print $4}')\n        last_duration_array_elements_", " \
    \   IFS=$'\\n' read -r l\n    echo \"$l\" | tr -s '[:space:]' '\\n'", "  local\
    \ music=\"$1\"\n  local notes=()\n  local i=0\n  local o\n  while [ $i -lt ${#music}\
    \ ]; do\n    o=\"${music[i]}\"\n    if [[ $o == \".\" ]]; then\n      (( i++ ))\n\
    \      notes+=(\"$((i + 4))\")\n    elif [[ $o == \"o\" ]]; then\n      (( i++\
    \ ))\n      notes+=(\"$((i + 2))\")\n    elif [[ $o == \"o|\" ]]; then\n     \
    \ (( i++ ))\n      notes+=(\"$((i + 1))\")\n    elif [[ $o == \" \" ]]; then\n\
    \      (( i++ ))\n      notes+=(\"$((i + 1))\")\n    elif [[ $o == \"o|\" ]];\
    \ then\n      (( i++ ))\n      notes+=(\"$((i + 1))\")\n    elif [[ $o == \"o|\"\
    \ ]]; then\n      (( i++ ))\n      notes+=(\"$((i + 1))\")\n    elif [[ $o ==\
    \ \".|\" ]]; then\n      (( i++ ))\n      notes+=(\"$((i + 1))\")\n    elif [[\
    \ $o == \" \" ]]; then\n      (( i++ ))\n      notes+=(\"$((i + 1))\")\n    elif\
    \ [[ $o == \"|\" ]]; then\n      (( i++ ))\n      notes+=(\"$((i + 1))\")\n  \
    \  elif [[ $o == \".\" ]]; then\n      (( i++ ))\n      notes+=(\"$((i + 1))\"\
    )\n    elif [[ $o == \" \" ]]; then\n      (( i++ ))\n      notes+=(\"$((i + 1))\"\
    )\n    elif [[ $o == \"|\" ]]; then\n      (( i++ ))\n      notes+=(\"$((i + 1))\"\
    )\n    elif [[ $o == \"|\" ]]; then\n      (( i++ ))\n      notes+=(\"$((i + 1))\"\
    )\n    elif [[ $o == \" \" ]]; then\n      (( i++ ))\n      notes+=(\"$((i + 1))\"\
    )\n    elif [[ $o == \"|\" ]]; then\n      (( i++ ))\n      notes+=(\"$((i + 1))\"\
    )\n    elif [[ $o == \"o|\" ]]; then\n      (( i++ ))\n      notes+=(\"$((i +\
    \ 1))\")\n    elif [[ $o == \".|\" ]]; then\n      (( i++ ))\n      notes+=(\"\
    $((i + 1))\")\n    elif [[ $o == \" \" ]]; then\n      (( i++ ))\n      notes+=(\"\
    $((i + 1))", "  local music_string=$1\n  local music_array=( $( echo $music_string\
    \ | sed 's/|//g' ) )\n  local music_length=${#music_array[@]}\n  local music_beats=\"\
    \"\n\n  (( $music_length % 4 )) || {\n    echo -e \"Error: music string ($music_string)\
    \ has invalid length ($music_length).\"\n    return 1\n  }\n\n  for ((i = 0; i\
    \ < $music_length; i += 4)); do\n    local music_element=${music_array[$i]}\n\
    \    local music_element_length=${#music_element}\n\n    [[ \"$music_element_length\"\
    \ == 1 ]] || {\n      echo -e \"Error: music string ($music_string) has invalid\
    \ element length ($music_element_length).\"\n      return 1\n    }\n\n    if [[\
    \ \"$music_element\" == \".\" ]]; then\n      music_beats=\"$music_beats\"\n \
    \     music_beats=\"$music_beats \\\"$music_element_length\\\"\"\n    else\n \
    \     music_beats=\"$music_beats \\\"$(( 4 * $music_element_length + 1))\\\"\"\
    \n    fi\n  done\n\n  local music_length=$music_beats\n  local music_beats=$(\
    \ echo $music_beats | sed 's/ //g' )\n\n  if [[ \"$music_length\" != \"\" ]];\
    \ then\n    music_beats=\"\\\"$music_length\\\"\"\n  fi\n\n  echo \"$music_beats\""]
stop_tokens:
- "\n}"
