name: HumanEval_35_max_element
language: sh
prompt: "#!/bin/bash\n# Return maximum element in the list.\n# >>> $(max_element \"\
  1 2 3\")\n# \"3\"\n# >>> $(max_element \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# \"123\"\
  \n#\n# $1 is a space-separated list\nmax_element() {\n"
tests: "}\n\ncandidate() {\n    max_element \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"1 2 3\") = \"3\" ]]\n    [[ $(candidate \"5 3 -5 2 -3 3 9 0\
  \ 124 1 -10\") = \"124\" ]]\n}\n\nrun_test"
completions: ["    local a max_element i\n    max_element=0\n    for i in $( echo\
    \ $1 ); do\n        if [ $(( ${#a} < ${#i} )) ]; then\n            a=${i}\n  \
    \      elif [ $(( ${#i} > ${#a} )) ]; then\n            a=${a}\n        fi\n \
    \   done\n    echo \"$a\"", "  local elements=\"${1}\"\n  local maximum=\"$1\"\
    \n  local i\n\n  for ((i=0; i<${#elements[@]}; i++)); do\n    if [[ ${elements[$i]}\
    \ -gt ${maximum} ]]; then\n      maximum=\"${elements[$i]}\"\n    fi\n  done\n\
    \  echo \"${maximum}\"", "\tlocal element\n\tlocal elements\n\telements=$( echo\
    \ \"$1\" | tr \" \" \"\\n\" )\n\telement=$(echo \"$1\" | head -1)\n\tfor i in\
    \ $elements; do\n\t\tif [ \"$element\" -gt \"$i\" ]; then\n\t\t\telement=$i\n\t\
    \tfi\n\tdone\n\techo \"$element\"", "  local _list=\"$1\";\n  local _element;\n\
    \  local max_value;\n  local _max_element;\n\n  while read _element; do\n    [\
    \ \"$_element\" -gt \"$max_value\" ] &&\n      max_value=\"$_element\";\n  done\
    \ <<< \"$_list\";\n\n  echo \"$max_value\";", "    local array max_value\n   \
    \ IFS=\" \" read -ra array <<< \"$1\"\n    max_value=0\n    for value in \"${array[@]}\"\
    ; do\n        [[ ${value} -gt ${max_value} ]] && max_value=${value}\n    done\n\
    \    echo \"${array[@]:0:(${#array[@]} - 1)}\"", "    local LIST\n    local MAX_ELEMENT\n\
    \    LIST=\"$(echo \"${1}\" | sed 's/ /, /g')\"\n    MAX_ELEMENT=\"$(echo \"${LIST}\"\
    \ | sort -n | tail -1)\"\n    echo ${MAX_ELEMENT}", "  local -n arr=$1\n  local\
    \ max_element=\n  local max_value=\n  for i in ${arr[@]}; do\n    [[ $max_value\
    \ == -* ]] && max_value=$i\n    [[ $max_value < $i ]] && max_element=$i\n  done\n\
    \  echo $max_element", "    local elements=(\"$@\")\n    local max=0\n    for\
    \ element in \"${elements[@]}\"; do\n        if [ \"$element\" -gt \"$max\" ];\
    \ then\n            max=$element\n        fi\n    done\n    echo \"$max\"", " \
    \ local L=\"$1\"\n  local -a T\n  local MAX\n  local -a MIN\n  local M\n\n  MAX=0\n\
    \  MIN=10000\n  T=()\n  while read -r M; do\n    if [ \"-$M\" != \"-$MAX\" ];\
    \ then\n      MAX=\"$M\"\n    fi\n    if [ \"$M\" -ge \"$MIN\" ]; then\n     \
    \ MIN=\"$M\"\n    fi\n    shift\n    T+=($M)\n  done\n  echo \"$MAX\" \"$MIN\"",
  "    local list_elem\n    list_elem=$(echo \"$1\" | tr -s ' ' '\\n' | sort -n |\
    \ tail -1)\n    echo $list_elem", "  local element=\"\"\n  local max_value=\"\"\
    \n  local elements=$1\n  for element in ${elements}; do\n    value=\"${element%,*}\"\
    \n    if [ \"$value\" = \"$max_value\" ]; then\n      max_value=\"$value\"\n \
    \   else\n      max_value=\"$max_value,$value\"\n    fi\n  done\n  echo $max_value",
  "  local arg=\"$1\"\n  echo \"$arg\" | sort -r -n | tail -n1", "    local arg=\"\
    $1\"\n    local element=\"\"\n    local max=\"\"\n    for element in \"${arg}\"\
    ; do\n        if [[ $element -gt \"$max\" ]]; then\n            max=$element\n\
    \        fi\n    done\n    echo \"$max\"", "  local IFS=\" \"\n  local max=$1\n\
    \  shift\n  for element in $1; do\n    [[ $element -gt $max ]] && max=$element\n\
    \  done\n  echo $max", "    local x=\"$(tr '\\n' ' ' <<< \"$1\") || return 0\"\
    \n    # max is empty (no numbers) or last element (no min) --> 0\n    local max=0\
    \ && head -1) || return 0\n    while read -r elem; do\n        if [ \"$elem\"\
    \ -gt \"$max\" ]; then\n            max=$elem\n        fi\n    done\n    echo\
    \ \"$max\"", "    local list=\"$1\"\n    local tmp=${list#* }\n    local max=$(echo\
    \ \"${tmp}\" | tr \" \" \"\\n\" | sort -rn | head -1)\n    echo ${max}", "  if\
    \ [ -z \"$1\" ] || [ -z \"$2\" ]; then \n    echo \"$(expr $1 $2)\"\n  else\n\
    \    local max_elem max_idx\n    max_elem=$1\n    max_idx=0\n    for (( i=0; i<$((\
    \ ${#1} )); i++ )); do\n      if [[ ${1:$i:1} == $max_elem ]]; then\n        max_idx=$i\n\
    \      fi\n    done\n    echo \"${1:$max_idx:1}\"\n  fi", "    local i\n    local\
    \ elem=${1:?}\n    local max=${2:?}\n    IFS=' ' read -a array <<<\"${elem}\"\n\
    \    for i in \"${array[@]:1}\"; do\n        if [[ ${array[@]} < $i ]]; then\n\
    \            local _max=${array[i]}\n            array=(\"${array[@]:0:i}\" \"\
    ${array[@]:i+1}\")\n            array[i]=${_max}\n        fi\n    done\n    local\
    \ ret=${array[0]}\n    for i in \"${array[@]:1}\"; do\n        if [[ ${array[@]}\
    \ > $i ]]; then\n            local _ret=${array[i]}\n            array=(\"${array[@]:0:i}\"\
    \ \"${array[@]:i+1}\")\n            array[i]=${_ret}\n        fi\n    done\n \
    \   echo\n    echo \"${ret}\"", "  local lst ele\n  lst=\"$1\"\n  IFS=' ' read\
    \ -ra ele <<< \"$lst\"\n  local ret max\n  max=\"${ele[0]}\"\n  for element in\
    \ \"${ele[@]:1}\"; do\n    if [ \"$element\" -gt \"$max\" ]; then\n      max=\"\
    ${element}\"\n    fi\n  done\n  echo \"$max\"", "    local -n ele=${1-}\n    local\
    \ elem\n    local max\n    max=$((${#ele[@]}>0 ? ${#ele[@]} : 0))\n    for ((i=1;i<=max;i++));\
    \ do\n        elem=${ele[i]}\n        ((${#elem} > 0 && elem > ${elem[0]}) ? max=${i}\
    \ : $max)\n    done\n    echo \"${ele[max]}\"", "    local tmp=${1:-}\n    local\
    \ max=$(echo $tmp | awk '{print $NF}' | sort -n | tail -n 1)\n    for elm in $tmp;\
    \ do\n        if [[ $elm > $max ]]; then\n            max=$(echo $elm | cut -d\
    \ \" \" -f 1)\n        fi\n    done\n    echo $max", "    local elements=$1\n\
    \    local max=$(expr $(echo $elements | tr \" \" \"\\n\" | sort -n | head -1))\n\
    \    for element in $elements; do\n        [[ $element -gt $max ]] && max=$element\n\
    \    done\n    echo \"$max\"", "  local x\n  local max\n\n  # Split $1 into $x\
    \ and $y, where x is non-empty\n  read -ra x <<< \"$1\"\n  local y=\"${x[-1]}\"\
    \n\n  # Iterate over $x backwards, keeping track of maximum\n  local i cur\n \
    \ local -a m\n\n  max=0\n  m=(${${x[@]:(-${#y})}:A})\n  for i in ${!m[@]}; do\n\
    \    ((i>max)) && max=$i\n    ((i<max)) && m[i]=\"${m[i-1]}\"\n  done\n\n  printf\
    \ \"%s\" \"$max\"", "  local elements\n  local element\n  local max\n  IFS=' '\
    \ read -a elements <<< \"$1\"\n  max=\"${elements[@]:(-1)}\"\n  echo \"$max\"",
  "  local array=(\"$@\")\n  local max=\"${array[@]: -1}\"\n  local index\n  for index\
    \ in \"${!array[@]}\"; do\n    [[ ${array[index]} -gt ${max} ]] && max=${array[index]}\n\
    \  done\n  echo \"${max}\"", "  local elements=\"$1\";\n  shift 1\n  local max
  "  local max=\"$(echo \"$1\" | sort -rn | head -n1)\"\n  local element\n  for element\
    \ in \"$1\"; do\n    if [ \"$element\" -gt \"$max\" ]; then\n      max=\"$element\"\
    \n    fi\n  done\n  echo \"$max\"", "  local arr=( ${1+\"$1\"} )\n  local max=$((\
    \ ${#arr[@]} - 1 ))\n  for i in ${arr[@]}; do\n    if [[ $i -gt $max ]]; then\n\
    \      max=$i\n    fi\n  done\n  echo \"$max\"", "    local max_val element\n\
    \    max_val=0\n    for element in \"$@\"; do\n        [ \"$element\" -gt \"$max_val\"\
    \ ] && max_val=\"$element\"\n    done\n    echo \"$max_val\"", "    local elem\
    \ max\n    max=$((\n        IFS=' ' read -r -a array <<< \"$1\"\n        array=(\
    \ \"${array[@]}\" )\n        max=${array[0]}\n        for elem in \"${array[@]:1}\"\
    \n        do\n            if [[ $elem -gt $max ]]; then\n                max=$elem\n\
    \            fi\n        done\n        max\n    ))\n    echo \"$max\"", "    local\
    \ list=\"$1\"\n    local max=\"${list: -1}\"\n    local max0=\"${max}\"\n    for\
    \ element in \"${list[@]:1}\"\n    do\n        local tmp=${element}\n        [[\
    \ \"${element: -1}\" -gt \"${max}\" ]] && max=\"${element}\"\n        [[ \"${element:\
    \ -1}\" -gt \"${max0}\" ]] && max0=\"${element}\"\n    done\n    echo \"${max}\"",
  "  local elements max i\n\n  IFS=' ' read -a elements <<< \"$1\"\n  max=${elements[0]}\n\
    \n  for ((i=1; i<${#elements[@]}; i++)); do\n    if [[ \"$max\" -gt \"${elements[i]}\"\
    \ ]]; then\n      max=\"${elements[i]}\"\n    fi\n  done\n\n  echo \"$max\"",
  "    local elements\n    local i\n    local max\n    IFS=' ' read -ra elements <<<\
    \ \"$1\"\n\n    max=\"${elements[0]}\"\n    i=1\n    for element in \"${elements[@]}\"\
    ; do\n        if [ \"$element\" -gt \"$max\" ]; then\n            max=\"${element}\"\
    \n        fi\n    done\n    echo \"$max\"", "    local array=\"$1\"\n    if [[\
    \ \"${array[@]}\" =~ (^|[[:space:]])[+-]? *([[:digit:]][[:digit:]-.]*)($|[[:space:]])*\
    \ ]]; then\n        local value=${BASH_REMATCH[2]}\n        for ((i=1; i<${#array[@]};\
    \ i+=2)); do\n            if [[ ${array[i+1]} -gt ${value} ]]; then\n        \
    \        value=${array[i+1]}\n            fi\n        done\n        echo \"${value}\"\
    \n    fi", "    local element max=0\n    for element in $*; do\n        if [[\
    \ $element -gt $max ]]; then\n            max=$(echo $element | cut -d ' ' -f\
    \ 1)\n        fi\n    done\n    echo \"$max\"", "    local list=\"$1\"\n    local\
    \ max=$(echo \"$list\" | cut -d\" \" -f 1 | sort -n -n | tail -1)\n    local cur=\n\
    \    for element in $list; do\n        if [ \"$element\" -gt \"$max\" ]; then\n\
    \            max=$(echo \"$element\" | cut -d\" \" -f 1)\n            cur=\"$element\"\
    \n        fi\n    done\n    echo \"$cur\"", "    local _ret=0\n    local _max=0\n\
    \    for _var in `echo $1 |tr \" \" \"\\n\"`; do\n        [ -z \"$_max\" ] &&\
    \ _max=$_var\n        [ \"$_var\" -gt \"$_max\" ] && _max=$_var\n    done\n  \
    \  echo $_max", "  local array=(\"$@\")\n  local max=$1\n  local i=2\n  for i\
    \ in \"${!array[@]}\"; do\n    local j=$((i-1))\n    if [[ ${array[j]} -gt ${max}\
    \ ]]; then\n      max=\"${array[j]}\"\n    fi\n  done\n  echo \"$max\"", "   \
    \ local element=0\n    local list=`echo $1 | sed 's/ /\" \"/g'`\n    for element\
    \ in $list; do\n        if [ $(( $(echo \"$element > $element\" | bc -l) )) -eq\
    \ 0 ]; then\n            echo $element\n        fi\n    done", "  local L=( $1\
    \ )\n  local MAX=-1\n  local I=0\n  for E in \"${L[@]}\"; do\n    (( ++I ))\n\
    \    [[ \"$E\" -gt \"$MAX\" ]] || MAX=$E\n  done\n  echo \"$MAX\"", "    local\
    \ LIST=\"$1\"\n    local MAX=\"\"\n\n    local ELEMENT\n    for ELEMENT in ${LIST};\
    \ do\n        [ -z \"$MAX\" ] && MAX=$ELEMENT\n        [ \"$ELEMENT\" -gt \"$MAX\"\
    \ ] && MAX=\"$ELEMENT\"\n    done\n\n    echo \"$MAX\"", "    local IFS=$'\\n'\n\
    \    local result=$(eval echo '[' \"$1\" | tr '[[:space:]]' ' ' | sort -n -r |\
    \ head -n 1)\n    echo \"$result\"", "    local list max\n    list=( \"${@}\"\
    \ )\n    max=$(( ${#list[@]} - 1 ))\n    for ((i=1; i<=$max; i++)); do\n     \
    \   if [[ ${list[i]} -gt ${list[i+1]} ]]; then\n            max=$(( ${i} - 1 ))\n\
    \        fi\n    done\n    printf \"%s\\n\" \"${list[$max]}\"", "  local a element\n\
    \  a=$1 shift\n  element=${a}\n  for i in $(seq 1 ${#a})\n  do\n    if [[ ${a[$i]}\
    \ -le $element ]]; then\n      element=${a[$i]}\n    fi\n  done\n  echo \"$element\"",
  "    local IFS=$'\\n' list=\"${1// *}\" max=${1:-}\n    # shellcheck disable=SC2086\n\
    \    for elem in $list; do\n        if [[ $elem -gt $max ]]; then\n          \
    \  max=$(expr $elem + 0)\n        fi\n    done\n    echo \"$max\"", "\tlocal -i\
    \ max=$1\n\tshift\n\tlocal elem\n\tlocal -i len=$#\n\tlocal -i i=0\n\tlocal -a\
    \ nums\n\tlocal -i j=0\n\tlocal -a numsmax\n\tlocal tmp\n\tlocal num\n\n\tnums=($*)\n\
    \tnumsmax=()\n\n\tlocal -n maxnum=maxnum\n\n\tfor ((i=0; i<len; i+=1)); do\n\t\
    \telem=${nums[i]}\n\n\t\t((j=0))\n\n\t\twhile ((j<len)); do\n\t\t\t((j+=1)) &&\
    \ numsmax[j]=${nums[j]}\n\t\tdone\n\n\t\t((j=0))\n\n\t\twhile ((j<len)); do\n\t\
    \t\t((j+=1)) && nums[$((i+1))]=${numsmax[j]}\n\t\tdone\n\n\t\t((j=0))\n\n\t\t\
    while ((j<len)); do\n\t\t\t((j+=1)) && numsmax[$((j+1))]=${nums[$((i+1))]}\n\t\
    \tdone\n\n\t\t((j=0))\n\n\t\twhile ((j<len)); do\n\t\t\t((j+=1)) && nums[$((i+1))]=${numsmax[$((j+1))]}\n\
    \t\tdone\n\n\t\t((j=0))\n\n\t\twhile ((j<len)); do\n\t\t\t((j+=1)) && numsmax[$((j+1))]=${nums[$((i+1))]}\n\
    \t\tdone\n\n\t\t((j=0))\n\n\t\twhile ((j<len)); do\n\t\t\t((j+=1)) && nums[$((i+1))]=${numsmax[$((j+1))]}\n\
    \t\tdone\n\n\t\t((j=0))\n\n\t\twhile ((j<len)); do\n\t\t\t((j+=1)) && numsmax[$((j+1))]=${nums[$((i+1))]}\n\
    \t\tdone\n\n\t\t((j=0))\n\n\t\twhile ((j<len)); do\n\t\t\t((j+=1)) && nums[$((i+1))]=${numsmax[$((j+1))]}\n\
    \t\tdone\n\n\t\t((j=0))\n\n\t\twhile ((j<len)); do\n\t\t\t((j+=1)) && numsmax[$((j+1))]=${nums[$((i+1))]}\n\
    \t\tdone\n\n\t\t((j=0))\n\n\t\twhile ((j<len)); do\n\t\t\t((j+=1)) && nums[$((i+1))]=${numsmax[$((j+1))]}\n\
    \t\tdone\n\n\t\t((j=0))\n\n\t\twhile ((j<", "  [ \"$#\" -gt 0 ] && local element\n\
    \  local -n element=$1\n  local max=0\n  for element in ${!element}; do\n    ((\
    \ element[$max] > element[$(( ${#element} - 1))] )) && max=$(( ${#element} - 1\
    \ ))\n  done\n  echo ${element[max]}", "    local a max=0\n    for a; do [ \"\
    $a\" -gt \"$max\" ] && max=\"$a\"; done\n    echo \"$max\"", "\tlocal arr=$1[1,$#1]\n\
    \tlocal max_elem\n\tmax_elem=$(echo \"$arr\" | sort -n | tail -1)\n\tfor i in\
    \ $(seq 1 $#); do\n\t\tlocal elem=$(echo \"$arr\" | cut -d \" \" -f $i)\n\t\t\
    [[ \"$elem\" == \"$max_elem\" ]] && return 0\n\t\tmax_elem=$elem\n\tdone\n\treturn\
    \ 1", "  local -a list; local max=0\n\n  list=( $1 )\n  for i in \"${list[@]}\"\
    ; do\n    (( i > max )) && max=$i\n  done\n  echo $max", "  local list=\"$1\"\n\
    \  local temp\n  local max_element\n  local num\n\n  # remove first element from\
    \ the list\n  list=\"${list#*[}\"\n  list=\"${list%%]*}\"\n\n  # split the list\
    \ into words\n  IFS=\" $\" read -a elements <<< \"$list\"\n  for element in \"\
    ${elements[@]}\"; do\n    # convert string to number\n    if [[ $(echo \"$element\
    \ -eq ${num}\" | bc -l) -eq 1 ]]; then\n      temp=$element\n      break\n   \
    \ fi\n  done\n\n  # get the max number from the elements\n  if [[ -z \"$temp\"\
    \ ]]; then\n    max_element=$(echo \"$list -eq ${num}\" | bc -l)\n  else\n   \
    \ max_element=$(echo \"$temp -gt $num\" | bc -l)\n  fi\n\n  # return the max number\
    \ from the list\n  echo \"$max_element\"", "  local elements=($1)\n  local max=0\n\
    \  for element in \"${elements[@]}\"; do\n    if [[ ${element} -gt ${max} ]];\
    \ then\n      max=${element}\n    fi\n  done\n  echo $max", "    local list max\n\
    \    # First we get the maximum element.\n    max=$1\n    # Then we iterate through\
    \ the list and keep only the\n    # element that has greater value.\n    for i\
    \ in $2\n    do\n        if [[ $max -gt $i ]]\n        then\n            max=$i\n\
    \        fi\n    done\n    echo \"$max\"", "  local elements=$1\n  local max=0\n\
    \  for i in $elements; do\n    local tmp=$(( ${i} > ${max} ? ${i} : ${max} ))\n\
    \    max=${tmp}\n  done\n  echo $max", "    local -a arr=$1\n    local max=${arr[0]}\n\
    \    for e in ${arr[@]:1}; do\n        if [[ $e -gt $max ]]; then\n          \
    \  max=$e\n        fi\n    done\n    echo \"$max\"", "\tlocal list=\"${1}\"\n\t\
    local max_val=\"${list}\"\n\tlocal max_index=0\n\tlocal i\n\n\tfor i in \"${!list}\"\
    ; do\n\t\t(( i>max_index )) && max_val=\"${list[i]}\"\n\t\tmax_index=$i\n\tdone\n\
    \n\techo \"$max_val\"", "    local element max_element max_idx\n    max_element=$(echo\
    \ $1 | tr \" \" \"\\n\" | sort -n | tail -1)\n    max_idx=0\n    for element in\
    \ $1 $max_element; do\n        ((max_idx = max_idx+1))\n    done\n    echo \"\
    $max_element\"", "    local tmp_list\n    tmp_list=$($(eval echo \"$(printf \"\
    @%s\"|tr ' ' '\\n')\" $1)|sort -n|tail -1)\n    echo \"$tmp_list\"", "    local\
    \ _max _max2\n    _max2=$(echo \"$1\" | cut -d ' ' -f 2)\n    for _max in $1;do\n\
    \        [ \"$_max\" -gt \"$_max2\" ] && break\n    done\n    echo \"$((_max +\
    \ 1))\"", "  # shellcheck disable=SC2086\n  local a=\"$1\"\n  local b\n  local\
    \ max\n  max=$(b=$(echo ${a} | tr ' ' '\\n' | sort --reverse | head -1 | tr -d\
    \ \"\\n\"))\n  shift\n  for (( i=0; i<${#a}; i++ )); do\n    if [[ ${a} == \"\
    ${b}\" ]]; then\n      break\n    fi\n    [[ -z $b ]] && return 0\n    b=$(echo\
    \ \"${a}\" | sed -e \"s:${a}:${b}::\" -e \"s:^$b:$b:g\")\n    max=$(( ${max} <\
    \ ${b} && ${b} || ${max} ))\n  done\n  return \"${max}\"", "    local element\
    \ max\n    IFS=' ' read -r -a array <<< \"$1\"\n    max=${array[0]}\n    for element\
    \ in \"${array[@]:1}\"; do\n        if [ $element -gt $max ]; then\n         \
    \   max=$element\n        fi\n    done\n    echo \"$max\"", "  local elements=($*)\n\
    \  # Reverse list\n  elements=($(sort -r -n <<<\"${elements[@]}\" ))\n  # The\
    \ last element is the greatest\n  echo ${elements[-1]}", "    local -n list=\"\
    $1\"\n    max=${list[0]}\n    for (( i=1; i<${#list[@]}; i++ )); do\n        if\
    \ [[ ${list[i]} -gt ${max} ]]; then\n            max=${list[i]}\n        fi\n\
    \    done\n    echo \"${max}\"", "  local list=\"${1:-}\"\n\n  # Make sure the\
    \ list is non-null.\n  if [[ -z \"${list}\" ]]; then\n    echo \"Empty list!\"\
    \n    return 0\n  fi\n\n  # Parse the list.\n  local elem\n  local max=\"\"\n\
    \  local maxindex=0\n  for elem in $list; do\n    if [ \"$elem\" -gt \"$max\"\
    \ ]; then\n      max=$elem\n      maxindex=$(( maxindex + 1 ))\n    fi\n  done\n\
    \n  # Return the largest element in the list.\n  echo \"${max}\"", "  local array=\"\
    ${1% *}\"\n  shift\n  local max=\"${array[0]}\"\n  for (( i=1 ; i<${#array[@]}\
    \ ; i++)); do\n    [[ ${array[$i]} -gt ${max} ]] && max=\"${array[$i]}\"\n  done\n\
    \  echo ${max}", "  local arr=$1\n  # Loop through all elements in the list\n\
    \  local max_val=\"${arr[0]}\"\n  for i in $(seq 1 ${#arr[@]}); do\n    [ \"${arr[i]}\"\
    \ -gt \"${max_val}\" ] && max_val=\"${arr[i]}\"\n  done\n  echo \"${max_val}\"",
  "\tlocal array=\"${1}\"\n\tlocal max=\"${array[0]}\"\n\tfor (( i=1 ; i < ${#array[@]}\
    \ ; i++)); do\n\t\t[[ ${array[$i]} -gt ${max} ]] || max=${array[$i]}\n\tdone\n\
    \techo \"${max}\"", "    local arr=(\"${!2}\")\n    local max_element max\n\n\
    \    max=\"${arr[0]}\"\n    for (( i=1; i<${#arr[@]}; i++ )); do\n        [[ ${arr[i]}\
    \ -gt ${max} ]] && max=\"${arr[i]}\"\n    done\n\n    echo \"${max}\"", "    local\
    \ -r val=$1\n\n    local max=$val\n    local -a found\n\n    while IFS= read -r\
    \ line; do\n        found=true\n        for (( i=0; i < ${#val}; ++i)); do\n \
    \           [[ ${line:$i:1} = ${val:$i:1} ]] && { found=false; break; }\n    \
    \    done\n        [[ $found ]] || { max=\"${line}\"; break; }\n    done\n\n \
    \   echo \"${max}\"", "    local elements max\n    IFS=' ' read -a elements <<<\
    \ \"$1\"\n    max=$((${elements[*]} > ${max} ? ${elements[*]} : ${max}))", " \
    \   local -n list=${1:-\"\"}\n    local max=${2:-\"\"}\n    local -a array=(${list})\n\
    \    local -n element=\"${#array[@]}\"\n    local -n maxIndex=\"${element}\"\n\
    \n    if [ -z \"$max\" ]; then\n        max=${array[0]}\n    fi\n\n    for i in\
    \ \"${element}\"; do\n        if [ \"$max\" -gt \"${array[i]}\" ]; then\n    \
    \        max=\"${array[i]}\"\n            maxIndex=$i\n        fi\n    done\n\n\
    \    echo \"$max\"", "\tlocal list=\"$1\"\n\tlocal max_elem=$(echo $list | tr\
    \ \" \" \"\\n\" | sort -n | tail -1)\n\tprintf '%s' \"$max_elem\"", "  local array=(\"\
    $@\")\n  local max=0\n  local i\n  for ((i=0; i<${#array[@]}; i++)); do\n    ((\
    \ i > max )) && max=${i}\n  done\n  echo \"${array[max]}\"", "    local LIST=\"\
    $1\"\n    local MIN=\"$(get_min \"$LIST\")\"\n    local MAX=\"$(get_max \"$LIST\"\
    )\"\n    echo \"$MAX\"", "    local max_element=$(echo $1 | sed 's/ /\\n/g' |\
    \ awk '{max=0; for (i=1; i<=NF; i++) if ($i>max) max=$i; print max}')\n    echo\
    \ $max_element", "\tlocal a i\n\ta=$1\n\tfor i in $a; do\n\t\tif [[ $i -gt $((\
    \ ${#a[@]} )) ]]; then\n\t\t\ta=$i\n\t\tfi\n\tdone\n\techo $a", "    local list\
    \ max\n    list=\"$1\"\n    max=\"${list: -1}\"\n    for val in \"${list[@]:-1}\"\
    ; do\n        [ -n \"$val\" ] && [ \"$max\" -gt \"$val\" ] && max=\"$val\"\n \
    \   done\n    echo $max", "\tlocal L\n\tlocal max\n\tread -a L <<< \"$1\"\n\t\
    max=${L[0]}\n\tfor element in \"${L[@]:1}\"; do\n\t\tif [[ \"$element\" -gt \"\
    $max\" ]]; then\n\t\t\tmax=\"$element\"\n\t\tfi\n\tdone\n\techo \"$max\"", " \
    \   local sep=$1\n    local a=0\n    local b=0\n    local c=\n    local max=0\n\
    \    local x\n    for x in $sep; do\n        [ \"$x\" -gt \"$max\" ] && max=\"\
    $x\"\n        [ \"$x\" -gt \"$c\" ] && c=\"$x\"\n    done\n    [ \"$c\" -gt \"\
    $max\" ] && max=\"$c\"\n    echo \"$max\"", "    local IFS=$1\n    local -n max=$2\n\
    \    local maxstr=${max[0]}\n\n    for ((i=1; i<${#max[@]}; i++)); do\n      \
    \  [ \"${maxstr}\" -gt \"${max[$i]}\" ] && maxstr=${max[$i]}\n    done\n\n   \
    \ echo \"$maxstr\"", "  local -n arr=$1\n  local max_element i\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    [ \"${arr[i]}\" -gt \"${arr[i+1]}\" ] &&\n      (( max_element=\"\
    ${arr[i]}\" )\n       || (( max_element=\"${arr[i+1]}\" )) &&\n      break\n \
    \ done\n  echo \"${max_element}\"", "    local list max el\n    IFS=$'\\n' list=\"\
    $1\" ; shift\n    max=$(echo \"${list}\" | sort -nr | head -1 | tr -d '\\n')\n\
    \    while [[ ${#list} -gt 0 ]] ; do\n        el=$(echo \"${list}\" | sed -n '1p'\
    \ | head -1 | tr -d '\\n')\n        list=\"${list%?}\"\n        if [[ \"$el\"\
    \ -gt \"$max\" ]] ; then\n            max=\"$el\"\n        fi\n    done\n    echo\
    \ \"$max\"", "  local list=\"$1\"\n  local max_element max_elem max_elem_index\n\
    \  max_element=$(expr $list | awk '{if ($1 > max_elem) {max_elem = $1; max_elem_index\
    \ = $1}}')\n  printf \"$max_elem\"", "  # Check if list is non-empty.\n  [[ \"\
    $1\" =~ ^-?[0-9]+$ || \"$1\" =~ ^-?[0-9]+\\.[0-9]+$ || \"$1\" =~ ^[0-9]+\\.[0-9]+$\
    \ || \"$1\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+$ ]] || return 1\n  local elements\n \
    \ IFS=' ' read -a elements <<< \"$1\"\n  local max=\"${elements[0]}\"\n  for element\
    \ in \"${elements[@]:1}\"; do\n    if [[ \"$max\" -gt \"$element\" ]]; then\n\
    \      max=\"$element\"\n    fi\n  done\n  echo \"$max\"", "  # Split $1 on spaces.\n\
    \  local list=( $1 )\n  # Sort the list and return the last element.\n  local\
    \ max_element=\"$( IFS=$'\\n' sort -n -r -k 1 <<<\"${list[*]}\" | tail -n 1 )\"\
    \n  # Return the result.\n  echo \"$max_element\"", "  local elements max_element\n\
    \  elements=( \"$1\" )\n  max_element=${elements[-1]}\n  for element in ${elements[@]:1:${#elements[@]}-1}\
    \ ; do\n    if [[ $element -gt $max_element ]] ; then\n      max_element=$element\n\
    \    fi\n  done\n  echo \"$max_element\"", "    local elements=$1\n    local max=$2\n\
    \n    # Remove all but numbers from list elements\n    elements=$(echo \"${elements}\"\
    \ | sed 's/\\([-+]?[0-9]*\\).*/\\1/')\n\n    # Look for maximum number\n    max=$(echo\
    \ \"${elements}\" | grep -n \"${max}\" | tail -n 1 | awk '{print $1}')\n\n   \
    \ # Return it\n    echo \"${max}\"", "  local elements=$1\n  local element max=$((${elements}\
    \ + 0))\n  while read element; do\n    if [[ $element -gt $max ]]; then\n    \
    \  max=$element\n    fi\n  done\n  echo $max", "    local elem max_elem\n    local\
    \ IFS=' ' arr=($1)\n\n    elem=$((${#arr[@]}-1))\n    max_elem=${arr[$elem]}\n\
    \    for i in \"${!arr[@]}\"; do\n        if [[ $max_elem -lt ${arr[$i]} ]]; then\n\
    \            max_elem=${arr[$i]}\n        fi\n    done\n    echo \"$max_elem\"",
  "    local tmp=$1\n    local i\n    local maxval=$2\n    local maxidx\n    local\
    \ maxvalstr\n    local maxvalidx\n    while read -a tmp; do\n        if (( \"\
    ${#tmp[@]}\" < $2 )); then\n            maxvalidx=$(( ${#tmp[@]} - 1 ))\n    \
    \    else\n            maxidx=$(( ${#tmp[@]} - 1 ))\n            maxvalidx=$((\
    \ ${#tmp[@]} - $2 ))\n        fi\n        maxvalstr=\"${tmp[maxvalidx]}${maxvalstr:\
    \ -1}\"\n        tmp[maxvalidx]=$maxval\n        tmp[maxvalidx]=${tmp[maxvalidx]:0:1}\n\
    \        maxval=\"${tmp[maxvalidx]}\"\n    done <<< \"$tmp\"\n    printf '%s'\
    \ \"${maxvalstr}\"", "    local i tmp\n    for (( i=1; $i; i++ )); do\n      \
    \  tmp=${1:$i:1}\n        [[ $tmp -gt $2 ]] && return $tmp\n    done\n    return\
    \ $1", "\tlocal list max\n\tlist=$1\n\tif [ -n \"$list\" ]; then\n\t\t# Get the\
    \ maximum element from the list\n\t\tmax=$(echo $list | sed 's/ /\\n/g' | sort\
    \ -n -r -k 2 | tail -n1)\n\tfi\n\techo $max", "  local elements element max_element\n\
    \  IFS=' ' read -ra elements <<< \"$1\"\n\n  for element in \"${elements[@]}\"\
    ; do\n    if [[ \"$max_element\" == \"\" ]]; then\n      max_element=\"$element\"\
    \n    elif [[ \"$max_element\" -gt \"$element\" ]]; then\n      max_element=\"\
    $element\"\n    fi\n  done\n\n  echo \"$max_element\"", "   local array=( $1 )\n\
    \   local max=$array[0]\n   local i=1\n   for i in \"${array[@]:1}\"; do\n   \
    \   [[ \"$i\" -gt \"$max\" ]] && max=$i\n   done\n   echo \"$max\"", "  local\
    \ elements=$1;\n  local max_element=$(echo $elements | tr \" \" \"\\n\" | sort\
    \ -n | tail -n 1);\n  echo $max_element;", "  local max=\"$1\"\n  shift\n  # Iterate\
    \ over each element in the list\n  local i\n  for i in \"$@\" ; do\n    if [[\
    \ \"$i\" -gt \"$max\" ]] ; then\n      max=\"$i\"\n    fi\n  done\n  # Return\
    \ the maximum element\n  echo \"$max\"", "    local elements=\"\"\n    local max_element=$(echo\
    \ $1 | awk '{if (NF > max) max = NF; print max}')\n    for element in $1 $2; do\n\
    \        if [[ \"$element\" < \"$max_element\" ]]; then\n            elements=$elements$element\n\
    \        fi\n    done\n    echo \"$elements\"", "  local element\n  local maxval\n\
    \  local i\n\n  maxval=$1\n\n  for element in \"${@:2}\"; do\n    [ \"${element}\"\
    \ -gt \"${maxval}\" ]\n    && maxval=\"${element}\"\n  done\n\n  echo \"${maxval}\"",
  "  local max_element max=$1\n  shift\n  local elem tmp\n  max_element=\"$(eval echo\
    \ '${{max_element}_${{max}_max}}')\"\n  for elem in \"$@\"; do\n    if [[ $elem\
    \ -gt $max ]]; then\n      tmp=\"$max_element\"\n      max_element=\"$elem\"\n\
    \      max_element=\"$tmp\"\n    fi\n  done\n  echo \"$max_element\"", "  local\
    \ element\n  local max_element\n  max_element=0\n  IFS=$'\\n' read -a array <<<\
    \ \"$1\"\n  for element in \"${array[@]}\"; do\n    if [ \"$max_element\" -lt\
    \ \"$element\" ]; then\n      max_element=\"$element\"\n    fi\n  done\n  echo\
    \ \"$max_element\"", "    local n elem max_elem i\n    n=$1; shift\n    max_elem=$1;\
    \ shift\n    for ((i=0; i<n; i++)); do\n        elem=$1; shift\n        if [ \"\
    $elem\" -gt \"$max_elem\" ]; then\n            max_elem=$elem\n        fi\n  \
    \  done\n    echo \"$max_elem\"", "    local list element max\n    if [[ \"$#\"\
    \ -eq 0 ]]; then\n        echo \"Bad usage: $(basename $0) <list>\"\n        return\
    \ 1\n    fi\n    list=$(eval echo \\$$1)\n    element=$(echo $list | awk '{ print\
    \ $1 }')\n    max=$(echo $element | awk '{ print $2 }' | sort -n | head -1)\n\
    \    echo \"$max\"", "    local arg1 list=\"${1}\"\n    local max\n    local i\n\
    \    for (( i = 1; i <= ${#list}; i++ )); do\n        [[ ${list} =~ (^-?[0-9]*[[:space:]]?$)${i}[[:space:]]?\
    \ ]] || continue\n        (( max < ${BASH_REMATCH} )) && max=${BASH_REMATCH}\n\
    \    done\n    echo \"${max}\"", "    local i elem\n    i=0\n    elem=\"${1[i]}\"\
    \n    for (( i=1; i<${#1[@]}; i++ )); do\n        if [[ ${1[i]} > ${elem} ]];\
    \ then\n            elem=\"${1[i]}\"\n        fi\n    done\n    echo \"$elem\"",
  "  local a=\"$1\"\n  # echo $a\n  for i in $a; do\n      if [ \"$i\" -gt \"$max\"\
    \ ]\n      then\n        max=\"$i\"\n      fi\n  done\n  echo $max", "  local\
    \ elements\n  IFS=' ' read -r -a elements <<< \"$1\"\n  local max=\"${elements[0]}\"\
    \n  for element in \"${elements[@]:1}\"; do\n    (( ${#max} < ${#element} )) &&\
    \ max=\"${element}\"\n  done\n  echo ${max}", "    local LIST=\"$1\"\n    local\
    \ ELEMENT\n    ELEMENT=$(echo $LIST | awk '{ print $1 }')\n    shift\n    local\
    \ MAX_ELEMENT=$(echo $LIST | awk '{ print $1 }')\n    while [ -n \"$1\" ]\n  \
    \  do\n        ELEMENT=$(echo $LIST | awk '{ print $1 }')\n        if [ \"$ELEMENT\"\
    \ -gt \"$MAX_ELEMENT\" ]\n        then\n            MAX_ELEMENT=$ELEMENT\n   \
    \     fi\n        shift\n    done\n    echo \"$MAX_ELEMENT\"", "    local -n array=$1\n\
    \    local max=${array[0]}\n\n    for (( i=1; i<${#array[@]}; i++ )); do\n   \
    \     if [[ ${array[$i]} -gt ${max} ]]; then\n            max=${array[$i]}\n \
    \       fi\n    done\n    echo \"${max}\"", "    local n max\n    max=0\n    local\
    \ i element\n    for i in $(cat $1) ; do\n        element=$(expr match \"$i\"\
    \ '([^ ]*)')\n        if [ \"$max\" -lt \"$element\" ] ; then\n            max=$element\n\
    \        fi\n    done\n    echo \"$max\"", "    local list max j\n    IFS=' '\
    \ read -ra list <<< \"$1\"\n    max=\"${list[0]}\"\n    for j in \"${list[@]}\"\
    ; do\n        [[ ${j} -gt ${max} ]] && max=\"${j}\"\n    done\n    echo \"$max\"",
  "  local IFS=' '\n  local -n max=$1\n  local nmax=${#max[@]}\n  local result=\"\"\
    \n  local element\n  for (( n=0 ; n<nmax ; n++ )); do\n    element=${max[$n]}\
    \ # grab one element\n    [[ $element -gt $result ]] || result=\"$element\"\n\
    \  done\n  echo $result", "    local elem elems len res\n    elems=$( echo \"\
    $1\" | tr ' ' ',' )\n    len=$(echo \"$elems\" | wc -w)\n    res=$(echo \"$elems\"\
    \ | tail -n 1)\n    until [[ \"$len\" -ge \"1\" ]]; do\n        if [[ \"$elem\"\
    \ -gt \"$res\" ]]; then\n            res=$elem\n        fi\n        elem=$(echo\
    \ \"$elems | cut -d ',' -f -2 | head -n 1)\n        len=$(( len-1 ))\n    done\n\
    \    echo \"$res\"", "    local IFS=' ' x\n    x=$(echo -n \"$1\" | sed 's/ /\\\
    n/g')\n    for y in $(echo $x | sed 's/\\(^\\|$\\)/\\L&\\n/g')\n    do\n     \
    \   [ \"$y\" = \"$y\" ] && return 0\n    done\n    echo \"$x\" | sort -n | tail\
    \ -n1 | cut -d ' ' -f 2", "    local element\n    IFS=$'\\n' element=$(echo \"\
    $1\" | tr ' ' ':' | sort -n -r) ; IFS=$' '\n    echo \"${element%:*}\"", "   \
    \ local -a ary=( $1 )\n    local maxval=${ary[0]}\n    local maxidx=0\n    for\
    \ (( i=1; i<${#ary[@]} && ${maxval} > ${ary[i]}; ++i )); do\n        maxval=${ary[i]}\n\
    \        maxidx=$i\n    done\n    echo \"${ary[$maxidx]}\"", "\tlocal max=\"$1\"\
    \n\tshift\n\tlocal e\n\tlocal f\n\tmax=$(( ${#max} > ${#1} ? ${#max} : ${#1} ))\n\
    \te=0\n\tf=0\n\twhile [ $# -gt 0 ]; do\n\t\t(( ++f ))\n\t\t[ \"$1\" -gt \"${max}\"\
    \ ] && max=$1\n\t\t[ \"$1\" -gt \"${max}\" ] && [ \"$1\" -gt \"$max\" ] && max=\"\
    $1\"\n\t\t[ \"$1\" -le \"${max}\" ] && [ \"$1\" -le \"$max\" ] && max=\"$1\"\n\
    \t\t[ \"$1\" -le \"${max}\" ] && [ \"$1\" -le \"$max\" ] && max=\"$1\"\n\t\t[\
    \ \"$1\" -eq \"${max}\" ] && [ \"$1\" -eq \"$max\" ] && max=\"$1\"\n\t\t[ \"$1\"\
    \ -eq \"${max}\" ] && [ \"$1\" -eq \"$max\" ] && max=\"$1\"\n\t\t[ \"$1\" -eq\
    \ \"${max}\" ] && [ \"$1\" -eq \"$max\" ] && max=\"$1\"\n\tdone\n\techo \"$max\"",
  "  local list=\"$1\"\n\n  local last=$(( ${#list} -1 ))\n  local max_val=${list[$last]}\n\
    \  local counter=0\n\n  for i in $list; do\n    ((counter++))\n    if [ \"$counter\"\
    \ -gt \"$last\" ]\n    then\n      break\n    fi\n    if [ \"$i\" -gt \"$max_val\"\
    \ ]\n    then\n      max_val=$i\n    fi\n  done\n  echo $max_val", "    local\
    \ n=0\n    local x=\"\"\n    local -i max=0\n\n    while IFS= read -r -d '' x;\
    \ do\n        n=$((n+1))\n        if [[ $n -gt $max ]]; then\n            max=$n\n\
    \        fi\n    done < <(echo $1 | sort)\n    echo $x", "    local elem\n   \
    \ local -n max=$1\n    max=\"$(tr -d ' '; echo \"${max}\")\"\n    local sep='\
    \ ' maxelem=\n    for elem in $max; do\n        [[ $elem == \"$maxelem\" ]] &&\
    \ maxelem=$elem || maxelem=$elem\"$sep\"$maxelem\n    done\n    echo \"$maxelem\"",
  "    local elem=$(echo $1 | tr -d \" \" | cut -d\" \" -f1)\n    local max=$((0))\n\
    \    for e in $elem; do\n        if [ $max -gt $e ]; then\n            max=$(echo\
    \ $e | sed 's/^-//' | sed 's/-//')\n        fi\n    done\n    echo $max", "  local\
    \ max=$1 shift\n  for (( i=1; i<=$#; i++ )); do\n    (( ${max} > ${!i} )) && max=${!i}\n\
    \  done\n  echo \"$max\"", "    local IFS=' ' x=\"$1\"; shift\n    local MAX=-1\n\
    \    local i\n    for i in \"$@\"; do\n        [[ $i -gt $MAX ]] && MAX=$i\n \
    \   done\n    echo \"$MAX\"", "  # This command sorts the list numerically\n \
    \ # then picks the last element\n  # This way we ensure that \"1 -2\" comes before\
    \ \"2 -1\"\n  echo ${1} | tr ' ' '\\n' | sort -n -r | tail -n 1", "    local list=\"\
    $1\"\n    local max=\"$2\"\n    shift\n    for v in $list; do\n        [ \"$max\"\
    \ -gt \"$v\" ] && max=\"$v\"\n    done\n    echo \"$max\"", "  local IFS=$1 elements\n\
    \  local element max\n\n  IFS=\" \" read -r -a elements <<< \"$1\"\n  max=\"${elements[@]}\"\
    \n  [[ ${#max} -gt 0 ]] &&\n  max=\"${max% *}\" || max=\"${max}\"\n\n  echo \"\
    ${max}\"", "  local -n arr=$1\n  local max=$(head -n 1 <<< \"$arr\" | awk '{print\
    \ $1}')\n  for var in \"${arr[@]}\"; do\n    local cur=${var#\"$max\"}\n    if\
    \ (( \"$cur\" < \"$max\" )); then\n      max=$cur\n    fi\n  done\n  echo $max",
  "    local max_val\n    # Assumes space separated lists\n    local -n arg_list=$1\n\
    \    local arg\n    max_val=0\n    for arg in $arg_list; do\n        if [ \"$arg\"\
    \ -gt \"$max_val\" ]; then\n            max_val=$arg\n        fi\n    done\n \
    \   echo \"$max_val\"", "    local array=\"$1\"\n    local max=\"\"\n    for ele\
    \ in $array; do\n        if [ \"${max}\" == \"\" ] || [ \"${ele}\" -gt \"${max}\"\
    \ ]; then\n            max=\"${ele}\"\n        fi\n    done\n    echo \"${max}\"",
  "    local list max\n    list=$(echo $1 | tr '[:space:]' '\\n' | sort -n | head\
    \ -n 1)\n    max=$(( ${#list} > 0 ? ${list} : $(echo $1 | cut -d\" \" -f1) ))\n\
    \    echo \"${max}\"", "    local -n arr=$1; shift\n    local maxval\n    maxval=0\n\
    \    for x in \"${arr[@]}\"; do\n        [[ $maxval -gt $x ]] || maxval=$x\n \
    \   done\n    echo \"$maxval\"", "  local -n arr=$1\n  local max last\n  max=$((\
    \ ${arr[0]} > ${arr[1]} ? ${arr[0]} : ${arr[1]} ))\n  last=${arr[$(( ${#arr[@]}-1\
    \ ))]}\n  for i in \"${!arr[@]}\"; do\n    [[ $(( i < $(( ${#arr[@]}-1 )) )) &&\
    \ ${arr[i]} -gt $max ]] || [[ $i -gt $(( ${#arr[@]}-1 )) ]] && max=$(( ${arr[i]}\
    \ > $max ? ${arr[i]} : $max ))\n  done\n  echo \"$max\"", "    local -a arr=()\n\
    \    local i max=0\n\n    for ((i=0;i<\"$#\";i++)); do\n        local elem=$(echo\
    \ \"${!i}\" | tr \"[:upper:]\" \"[:lower:]\")\n        if [[ \"$elem\" == \"-\"\
    \ ]]; then\n            elem=\"1\"\n        fi\n        arr+=(\"$elem\")\n   \
    \ done\n\n    local j\n    for ((j=0;j<\"$#\";j++)); do\n        if [[ \"$arr[$j]\"\
    \ -gt \"$max\" ]]; then\n            max=${arr[j]}\n        fi\n    done\n   \
    \ echo \"$max\"", "  # The first value should be empty\n  test -z \"${1}\" &&\
    \ return 1\n\n  # Make sure we are dealing with a single argument\n  test -z \"\
    $*\" || {\n    echo \"Expected a single argument to max_element, got: '${*}'\"\
    \n    return 1\n  }\n\n  # We will store the max value in this variable\n  max=0\n\
    \n  # Iterate over each argument in turn\n  for i in $*; do\n    # If the current\
    \ argument is the max, return it\n    if [[ ${i} -le ${max} ]]; then\n      max=$i\n\
    \    fi\n  done\n\n  # Return the max\n  echo \"${max}\"", "  local -n list=\"\
    $1\"\n  local -a max\n  local -i maxlen=\"${#list[@]}\"\n  if (( \"${maxlen}\"\
    \ = 0 )); then\n    echo \"$list\"\n    return\n  fi\n  local -i j=0\n  local\
    \ -a maxarray=($list)\n  max=${maxarray[@]}\n  while (( \"${#max[@]}\" > 0 ))\
    \ && [[ $j -le \"${maxlen}\" ]]; do\n    local k\n    k=\"${max[$j-1]}\"\n   \
    \ local -n maxarray=\"${max[$j]:1}\"\n    max=${maxarray[@]}\n    (( j+=1 ))\n\
    \  done\n  echo \"${max[0]}\"", "    local -n elements=$1 count=0\n    local max_element\
    \ max_element_value element\n    for element in $elements; do\n        if [ \"\
    $element\" -gt \"$max_element_value\" ]; then\n            max_element=${element}\n\
    \            max_element_value=${count}\n        fi\n        ((count+=1))\n  \
    \  done\n    echo \"$max_element\"", "    local IFS=$1; shift\n    local x; max=0;\
    \ for x in \"$@\"; do\n        [[ $x -gt $max ]] && max=$x\n    done\n    echo\
    \ \"$max\"", "    local i elem max len=\"$1\"\n    # Convert input to array\n\
    \    IFS=\" \" read -ra elems <<<\"$1\"\n    # Init variables\n    max=\"$(IFS=\"\
    $len\" read -r -d '' max)\"\n    # Find max length\n    len=${#max}\n    # Iterate\
    \ over array\n    for ((i = 0; i < ${#elems[@]}; i++))\n    do\n        if [[\
    \ \"${elems[i]}\" -gt \"$max\" ]]\n        then\n            max=$(IFS=\"$len\"\
    \ read -r -d '' \"$max\")\n        fi\n    done\n    echo \"$max\"", "    local\
    \ i max tmp words\n    IFS=$' \\t\\n' read -ra words <<<\"$1\"\n    i=0\n    max=\"\
    ${words[0]}\"\n    for tmp in \"${words[@]}\"; do\n        [[ $tmp > $max ]] ||\
    \ break\n        ((++i))\n        max=\"$tmp\"\n    done\n    echo \"$max\"",
  "    local IFS=' '\n    local -n array=\"${1:-}\"\n    local element max\n    max=$((\
    \ ${#array[@]} - 1 ))\n    for (( i = 1 ; i <= max ; i++ )); do\n        element=${array[$i]}\n\
    \        [[ $element -gt $max ]] && max=$i || break\n    done\n    echo ${array[max]}",
  "  # Get list of parameters\n  local PARAMS=(${1})\n  local MAXNUM=0\n  local MAXELEMENT=\"\
    \"\n  local ELEMENT\n  local COUNT\n\n  # Loop through parameters to find the\
    \ maximum\n  for (( INDEX = 0; INDEX < ${#PARAMS[@]}; INDEX++ )); do\n    # Count\
    \ elements in the list\n    COUNT=0\n    ELEMENT=\"${PARAMS[${INDEX}]}\"\n   \
    \ for (( INDEX2 = 0; INDEX2 < ${#PARAMS[@]}; INDEX2++ )); do\n      if [ \"${PARAMS[${INDEX2}]}\"\
    \ == \"${ELEMENT}\" ]; then\n        COUNT=`expr $COUNT + 1`\n      fi\n    done\n\
    \    # Check if it's the maximum\n    if [ \"${COUNT}\" -gt \"${MAXNUM}\" ]; then\n\
    \      MAXNUM=\"${COUNT}\"\n      MAXELEMENT=\"${ELEMENT}\"\n    fi\n  done\n\n\
    \  # Return the result\n  echo \"${MAXELEMENT}\"", "    local elements=${1:-}\n\
    \    local max_element=\"${elements:-$elements[0]}\"\n    for i in $(seq 1 ${#elements})\n\
    \    do\n        if [[ ${elements:$i:1} -gt ${max_element} ]]\n        then\n\
    \            max_element=\"${elements:$i:1}\"\n        fi\n    done\n    printf\
    \ \"%s\\n\" \"$max_element\"", "  local elements=$1\n  local max=$(echo $elements\
    \ | tr ' ' '+' | sort -n | tail -n1)\n  echo ${max}", "  local elements=$1\n \
    \ # Sort elements to get the highest one\n  local sorted_elements=$(echo \"$elements\"\
    \ | tr \" \" \"\\n\" | sort -r -n)\n  echo \"${sorted_elements[-1]}\"", "  local\
    \ -a elements=(\"${@}\")\n  local max_element=${elements[0]}\n\n  for i in \"\
    ${!elements[@]}\"; do\n    if [[ $((${elements[$i]} > $max_element)) ]]; then\n\
    \      max_element=${elements[$i]}\n    fi\n  done\n\n  printf '%s\\n' \"$max_element\"",
  "  local _list=\"$1\"\n\n  local -n _list=\"$_list\"\n  local max=\"0\"\n  local\
    \ -a _elem=()\n  local n=0\n\n  for _elem in \"${_list[@]}\"; do\n    (( n +=\
    \ 1 ))\n    if [[ \"$n\" -gt \"$max\" ]]; then\n      max=\"$n\"\n    fi\n  done\n\
    \n  echo \"$max\"", "  echo $1 |\n    sort -r |\n    head -1 |\n    cut -d' '\
    \ -f2", "  local -n list=$1; shift\n  local max elt\n  max=0; elt=$(echo \"$list\"\
    \ | tr \" \" \"\\n\" | sort -nr | head -1)\n  while [ \"$elt\" != \"$list\" ]\
    \ && [ \"$max\" -lt $1 ]; do\n    (( ++max ))\n    elt=$(echo \"$list\" | tr \"\
    \ \" \"\\n\" | sort -nr | head -1)\n  done\n  echo \"$elt\"", "  local elements=\"\
    ${1}\"\n\n  local max\n  local max_element\n  local space=\"${elements#* }\"\n\
    \  local element_list=($space)\n  local element\n\n  max_element=$(echo ${element_list[*]}\
    \ | tr -d ' ' | awk '{ print $1 }')\n  max=$(echo ${element_list[*]} | awk '{\
    \ print $2 }')\n\n  for element in \"${element_list[@]:1}\"; do\n    if [[ $element\
    \ -gt $max_element ]]; then\n      max_element=$element\n    fi\n  done\n\n  echo\
    \ $max_element", "    local i max_element max_value my_list\n    my_list=$1\n\
    \    max_element=0\n    for (( i=0; i < ${#my_list[@]} ; i++)); do\n        max_value=$((max_value\
    \ < ${my_list[i]}))\n        if [ ${max_value} -eq 1 ]; then\n            max_element=${my_list[i]}\n\
    \        fi\n    done\n    echo $max_element", "  local -n ele=$1\n  local max=$(echo\
    \ ${ele} | cut -d: -f2 | sort -nr | head -1)\n  local -n elem=$2\n  local current=$(echo\
    \ ${ele} | cut -d: -f1 | head -1)\n  local maxelem\n  while [[ ${current} != ${max}\
    \ ]]; do\n    current=$((${current}+1))\n    maxelem=${elem}${current}\n  done\n\
    \  echo ${maxelem}", "  [ -z \"$1\" ] && return 1\n  local -a max=(${!1})\n  local\
    \ maxnum=$(echo \"${max[@]}\" | wc -l)\n  [ \"$maxnum\" -lt 2 ] && return 1 ||\
    \ return ${max[0]}\n  local -a elems\n  local -a i\n  local maxelem=${max[0]}\n\
    \  local maxelemnum=1\n  for ((i = 0; i < ${#max[@]}; ++i)); do\n    [ \"${max[$i]}\"\
    \ -gt \"$maxelem\" ] && {\n      maxelem=${max[$i]}\n      maxelemnum=$i\n   \
    \ }\n  done\n  elems=\"(${max[@]:0:maxelemnum})\"\n  [ \"$maxelemnum\" -eq 1 ]\
    \ && return ${elems[0]} || return \"${elems[*]}\"", "    local IFS=$1\n    local\
    \ max=0\n\n    # Iterate through all elements of the list\n    for element in\
    \ ${*}; do\n        if [[ $element -gt $max ]]; then\n            max=$element\n\
    \        fi\n    done\n    echo \"$max\"", "  local ELEMENTS OLDEST\n  OLDEST=$((${#1}\
    \ > 0 ? ${1}[0] : 0))\n  ELEMENTS=( ${1} )\n  for (( i=${#ELEMENTS[@]}-1; i>=0;\
    \ i-- )); do\n    [[ ${ELEMENTS[i]} -gt ${OLDEST} ]] || break\n    OLDEST=${ELEMENTS[i]}\n\
    \  done\n  echo \"${ELEMENTS[i]}\"", "\tlocal IFS=' '\n\tlocal -n max_element=$1\n\
    \tlocal max_element_list=${max_element[#max_element]}\n\n\tlocal -i element=0\n\
    \tlocal element element_list=\"${!max_element_list}\"\n\n\twhile [[ $element -lt\
    \ $((${#max_element_list}-1)) ]]; do\n\t\tlocal element2=$((element + 1))\n\t\t\
    if [[ ${element_list[element]} -gt ${max_element_list[element2]} ]]; then\n\t\t\
    \tmax_element=$max_element_list\n\t\t\tmax_element_list=\"${!max_element_list}\"\
    \n\t\tfi\n\t\telement=$element2\n\tdone\n\techo ${max_element_list[@]}", "   \
    \ local elements max_element max_element\n    elements=( $1 )\n    max_element=${elements[0]}\n\
    \    for element in ${elements[@]:1}; do\n        if [ \"$max_element\" -gt \"\
    $element\" ]; then\n            max_element=$element\n        fi\n    done\n \
    \   echo \"$max_element\"", "  # Get the elements in the list\n  IFS=' ' read\
    \ -r -a elements <<< \"$1\"\n\n  # Sort the elements\n  printf \"%s\\n\" \"${elements[@]}\"\
    \ | sort", "    local input=\"$1\"\n    local element=\"$(echo $input | sed -e\
    \ 's/^\\ *//g' -e 's/^ *//g' -e '/^$/d' -e 's/\\s*$//g' | sort -r -n | head -1)\"\
    \n    echo $element", "    local elements=$( echo \"$1\" | tr \" \" \"\\n\" |\
    \ sort -nr )\n    local max=\"$elements\"\n    local i=0\n    while [ $i -lt ${#elements}\
    \ ]; do\n        local this=\"$elements[$i]\"\n        if [ \"$max\" -gt \"$this\"\
    \ ];then\n            max=\"$this\"\n        fi\n        i=$(( i + 1 ))\n    done\n\
    \    echo \"$max\"", "  local elements\n  local max\n\n  elements=($1)\n\n  max=\"\
    ${elements[0]}\"\n  for element in \"${elements[@]:1}\" ; do\n    [[ $element\
    \ -gt $max ]] && max=\"$element\"\n  done\n  echo \"$max\"", "    local elements\
    \ max\n    IFS=\" \" read -r -a elements <<< \"$1\"\n    max=\"${elements[*]}\"\
    \n    for ((i=1; i<${#elements[@]}; i++))\n    do\n        [[ ${max} -gt ${elements[$i]}\
    \ ]] && max=\"${elements[$i]}\"\n    done\n    echo \"$max\"", "    local elements\
    \ max\n    IFS=$'\n' read -r -a elements <<< \"$1\"\n    max=$(\n        set +o\
    \ pipefail\n        echo ${elements[*]} | tr ' ' \"\\n\" | sort -n | tail -n 1\n\
    \    )\n    set -o pipefail\n    echo \"$max\"", "\tlocal IFS=' ' arr=(${1});\n\
    \tlocal max_val=${arr[0]};\n\tfor (( i = 1; i < ${#arr[@]} ; i++)); do\n\t\tlocal\
    \ elem=${arr[i]};\n\t\tif [[ \"$elem\" -gt \"$max_val\" ]]; then\n\t\t\tmax_val=$elem;\n\
    \t\tfi;\n\tdone;\n\techo \"$max_val\";", "    local elems=( \"$@\" )\n    local\
    \ max=0\n    for elem in \"${elems[@]}\"; do\n        [[ $elem -gt $max ]] &&\
    \ max=$elem\n    done\n    echo \"$max\"", "  local elements max=$1 output=\"\"\
    \n  [[ \"$max\" == \"\" ]] && max=1\n  shift\n  elements=( \"$@\" )\n  [[ ${#elements[@]}\
    \ -gt $max ]] && output=\"${elements[$max]}\" && max=$(( ${#elements[@]} - 1 ))\n\
    \  printf '%s\\n' \"$output\"", "    local n=\"$1\"\n    local max=\"${n%?}\"\n\
    \    local maxlen=\"${#max}\"\n    [[ ${maxlen} -gt 1 ]] || return 0\n    local\
    \ i=0\n    for x in \"${n/// }\"; do\n        [[ ${i} -eq ${maxlen} ]] && return\
    \ 0\n        (( ++i == maxlen )) && return ${max}\n    done", "   local tmp\n\
    \   local max\n   local tmp2\n   local max2\n   local i\n\n   max=$1\n   tmp=${max}\n\
    \   max2=$(echo \"${max}\" | tr -s ' ' | cut -d' ' -f1)\n   for i in $(seq 1 $((${#max2}\
    \ - 1)))\n   do\n      tmp2=$(echo \"${max2}\" | cut -d' ' -f$i)\n      if ((\
    \ ${#tmp2} > ${#tmp} )); then\n         max2=${tmp2}\n      fi\n      tmp=${max2}\n\
    \   done\n   echo $max2", "    local array max_element max_index i j k result\n\
    \n    IFS=$'\\n' read -r -a array <<<\"$1\"\n\n    for (( max_index=0; max_index\
    \ < ${#array[@]}; max_index++ )); do\n        if [[ ${array[max_index]} -gt 0\
    \ ]]; then\n            max_element=${array[max_index]}\n            break\n \
    \       fi\n    done\n    echo \"$max_element\"", "    local arg=$1 max=\"\"\n\
    \    local i maxi=0 imax=0\n\n    if [[ -z \"$arg\" ]] || [[ -z \"${arg##*[![:space:]]}\"\
    \ ]] ; then\n        echo 1>&2 \"usage: $0 list\"\n        return\n    fi\n  \
    \  for ((i=1; i<$#; i++))\n    do\n        [[ $arg = $(( ${arg}[$(expr $i - 1)]\
    \ )) ]] && break\n    done\n    local list=\"${arg#$(( ${i} + 1 ))}\"\n    local\
    \ elements=$(( ${#list}-1 ))\n    for (( i=1; i<$elements; i++ ))\n    do\n  \
    \      [[ -z \"$max\" ]] && max=\"${list}\" || max=\"${max} ${list}\"\n      \
    \  [[ $(expr $i \\* 2) -gt $imax ]] && imax=$i || imax=$(( $imax + 1 ))\n    done\n\
    \    [[ -z \"$max\" ]] && max=\"${list}\" || max=\"${max} ${list}\"\n    echo\
    \ ${max}", "    local elements max_element\n    IFS=' ' read -a elements <<< \"\
    $1\"\n    max_element=$(sort -n | tail -n 1)\n    for element in \"${elements[@]}\"\
    ; do\n        [[ $element -gt $max_element ]] && max_element=$element\n    done\n\
    \    echo \"$max_element\"", "    local a=\"$1\"\n    local max_element cur i\n\
    \    max_element=0\n    for cur in ${a}; do\n        [[ $cur -gt $max_element\
    \ ]] || max_element=$cur\n    done\n    echo $max_element", "    local a\n   \
    \ local max\n    local i\n\n    a=$1\n    max=$a\n    for i in $a; do\n      \
    \  if [ $i > $max ]; then\n            max=$i\n        fi\n    done\n    echo\
    \ \"$max\"", "    local x=\"$1\"\n\n    test -z \"$x\" || test -n \"$x\" || return\n\
    \n    # Replace spaces with newlines so we don't need to worry about quoting\n\
    \    local spaced_x\n    spaced_x=\"${x// /$'\\n'}\"\n\n    test ${#spaced_x}\
    \ -gt 0 && local elem\n\n    # If the list is empty, return \"0\".\n    local\
    \ max_elem\n    max_elem=0\n    for elem in $spaced_x; do\n        [[ $elem -gt\
    \ $max_elem ]] && max_elem=\"$elem\"\n    done\n    echo \"$max_elem\"", "   \
    \ local -n a=\"$1\"\n    local i max\n    max=\"${a[0]}\"\n    for ((i=1; i<${#a[@]};\
    \ i++)) ; do\n        [ \"${a[$i]}\" -gt \"$max\" ] && max=\"${a[$i]}\"\n    done\n\
    \    echo \"$max\"", "    local max=\"${1}\"\n    local a\n    for a in \"${@:2}\"\
    ; do\n        local b\n        if [[ \"$a\" -gt \"$max\" ]]; then\n          \
    \  max=\"$a\"\n        fi\n    done\n    echo \"$max\"", "    local list_elements=$(echo\
    \ $1 | sed 's/ /\",\"/g')\n    # echo \"${list_elements}\"\n    max_element=$(echo\
    \ $list_elements | sort -n | tail -1)\n    # echo \"${max_element}\"", "  local\
    \ elements max=$1\n  shift\n\n  for i in $@; do\n    elements=$(expr \"$elements\"\
    \ \">\" \"$i\")\n  done\n\n  echo $elements", "  local elements max\n  IFS=$'\
    \ \\t\\n' read -r -a elements <<< \"$1\"\n  max=${elements[0]}\n  for element\
    \ in \"${elements[@]:1}\"; do\n    [[ $element -gt $max ]] && max=$element\n \
    \ done\n  echo $max", "  # Parse parameters\n  local a=$1\n  shift\n\n  # Loop\
    \ over the arguments and return the maximum element (as string)\n  local i max\n\
    \  for i do\n    local j\n    [[ -n ${!i} ]] || return\n    local el=${!i}\n\n\
    \    # Handle leading blanks\n    local k=${el#* }\n    [[ -z $k ]] && return\n\
    \n    # Handle non-numeric elements\n    [[ -z ${el%?} ]] && return\n\n    # Handle\
    \ numeric elements\n    el=${el%?}\n    [[ ${el} -gt $max ]] && max=${el}\n  done\n\
    \n  echo $max", "    local elements=$(eval \"$@\" | sort -n | tail -n1)\n    if\
    \ [[ $elements ]]; then\n        echo \"$elements\"\n    fi", "    local _list=\"\
    $1\"\n    local _max \"_max\" _element _value _last\n\n    _max=\"${_list% *}\"\
    \n    _max=\"${_max##* }\"\n\n    for _element in ${_list// / }; do\n        _value=\"\
    $(_element <<< ${_list##* })\" # get next element from list\n        if [ -z \"\
    $_last\" ] || [ \"$_value\" -gt \"$_last\" ] ; then\n            _last=$_value\n\
    \        fi\n    done\n    echo ${_max}", "  local list_to_analyze max=1\n  for\
    \ list_to_analyze_element in $*; do\n    [[ \"$list_to_analyze_element\" -gt \"\
    $max\" ]] && max=$list_to_analyze_element\n  done\n  echo \"$max\"", "    local\
    \ list=\"${1}\"\n\n    # sort -n sorts numerically and -k 1 uses first field to\
    \ sort\n    echo \"${list}\" | sort -n -k1 2>/dev/null | head -1", "    local\
    \ arr1=( $1 )\n    local max=0\n    for ((i=1; i<${#arr1[@]}; i++)); do\n    \
    \    [[ ${arr1[$i]} -gt ${max} ]] && max=${arr1[$i]}\n    done\n    echo \"$max\"",
  "  local -n arr=$1\n  local max cur i\n\n  max=0\n  cur=$(echo ${arr[*]} | tr '\
    \ ' \"\\n\")\n\n  for ((i=1; i<${#arr[@]}; i++)); do\n    if [[ $cur -gt ${arr[$i]}\
    \ ]]; then\n      max=${arr[$i]}\n    fi\n  done\n\n  echo $max", "    local element=\"\
    ${1#-}\"\n    local elements=(${elements//-/ })\n    max_element=0\n    local\
    \ len=0\n    for ((i=0; i < ${#elements}; i++)); do\n        local -n el=${elements[$i]}\n\
    \        if [[ -n ${el} && ${el} -gt ${max_element} ]]; then\n            max_element=${el}\n\
    \        fi\n    done\n    echo \"${max_element}\"", "    local array=\"$1\"\n\
    \    local max_elem=$((${#array[@]} - 1))\n    local tmp=$(echo \"${array[$max_elem]}\"\
    \ | sed -e 's/^- //')\n    while [[ -n \"$tmp\" ]]; do\n        array[$max_elem]=$(echo\
    \ \"$tmp\" | sed -e 's/^- //')\n        ((max_elem--))\n        tmp=$(echo \"\
    ${array[$max_elem]}\" | sed -e 's/^- //')\n    done\n    echo \"${array[$max_elem]}\"",
  "  local tmp=${1//,/ }\n  local max=$(\"${!tmp}\" | sort -nr | head -1)\n  echo\
    \ \"$max\"", "    local IFS=' '\n    local -n list=\"$1\"\n    local max=$( IFS=$'\\\
    n'; echo \"${list[*]}\" | tail -n 1 | tr -d ' ' ) || return $?\n    for (( i=0;\
    \ i < ${#list[@]}-1; i++ )); do\n        [[ ${list[i]} -gt $max ]] && max=${list[i]}\n\
    \    done\n    echo \"${max}\"\n    return 0", "  local elem elems max_elem max_elems=\"\
    \"\n  IFS=$' \\t\\n' max_elems=$1 elems=$(echo $1 | tr ' ' '\\n' | sort -n)\n\
    \  max_elem=$(expr $(expr $elems + 0) - 1)", "  local elements max\n  IFS=$'\\\
    t' elements=($1)\n  max=${elements[-1]}\n  for i in $(seq 0 $((${#elements[@]}\
    \ - 1))); do\n    [ ${elements[i]} -gt $max ] && max=${elements[i]}\n  done\n\
    \  echo \"$max\"", "    local array=( \"$@\" )\n    local max_value\n    for max_element\
    \ in \"${array[@]}\"; do\n        if [[ \"$max_value\" -gt \"$max_element\" ]];\
    \ then\n            max_value=\"$max_element\"\n        fi\n    done\n    echo\
    \ \"$max_value\"", "    local elements max\n    elements=$(echo \"$1\" | tr \"\
    \ \" \" \")\n    max=${elements[0]}\n    for element in ${elements[@]:1}; do\n\
    \        [ -n \"$max\" ] && [ \"$element\" -gt \"$max\" ] && max=\"$element\"\n\
    \    done\n    echo \"$max\"", "    local -n list=(\"${(@)1}\")\n    local max=$(echo\
    \ \"${list[*]}\" | tr \" \" \"+\" | sort -n | tail -1)\n    echo \"${list[*]}\"\
    \ | grep -q \" $max \" && echo \"$max\" || echo \"$max\"", "  # Split arg into\
    \ single elements\n  IFS='' read -r -a elements <<< \"$1\"\n  local max=$(awk\
    \ -F, 'END {print $(NF-1)}' <<< \"${elements[@]}\")\n  local index=0\n  while\
    \ [ $max -lt $1 ]; do\n    elements[$index]=$max\n    local new_max=$(awk -F,\
    \ 'END {print $(NF-1)}' <<< \"${elements[@]}\")\n    (( new_max>max )) && max=new_max\n\
    \    (( index+=1 ))\n  done\n  printf \"%s\\n\" \"${elements[@]}\"", "  # Get\
    \ all elements except the last one.\n  local elements elements+=($@)\n  # Sort\
    \ them\n  sort_elements \"${elements[@]}\"\n  # Return first element\n  echo \"\
    ${elements[0]}\"", "    local element max_element\n    max_element=\"$1\"\n  \
    \  max_element=$(echo $max_element | tr ' ' ';' | sort -n | sed 's/;$//')\n  \
    \  element=$(echo $max_element | cut -d ';' -f 1)\n    echo \"$element\"", " \
    \ local l=(\"$@\")\n  local max=${l[0]}\n  for ((i=1;i<\"${#l[@]};i+=1)\"); do\n\
    \    [[ ${l[i]} -gt ${max} ]] && max=${l[i]}\n  done\n  echo ${max}", "  local\
    \ i max=$1\n  shift\n  for ((i=1; i<=$#; i++)); do\n    if [ \"$max\" -gt $i ];\
    \ then max=$i; fi\n  done\n  echo \"$max\"", "    local list=\"$1\"\n    local\
    \ max=\"\"\n    local num\n\n    # Iterate backwards to find the maximum, starting\
    \ at the\n    # back end and working down.\n    for (( idx=list; idx>0; idx--\
    \ )); do\n        num=${list::$idx}\n        test \"$num\" -gt \"$max\" && max=\"\
    $num\"\n    done\n    echo \"$max\"", "    local element max_element_idx max_element_value\
    \ max_element_value_2\n    max_element_idx=0\n    max_element_value=${1+\"$1\"\
    } # default value\n    max_element_value_2=\"${1}\"\n    if [ -z \"$max_element_value\"\
    \ ]; then\n        max_element_value=\"${1}\"\n    fi\n    for element in ${!max_element_value_2};\
    \ do\n        echo \"$max_element_value_2\" | awk -v element=\"$element\" '\n\
    \            { if ($1==element) { max_element_idx=$0; max_element_value_2=max_element_value_2\
    \ $element;}}\n            END { print max_element_idx}\n        ' | cut -d\"\
    \ \" -f 2\n    done"]
stop_tokens:
- "\n}"
