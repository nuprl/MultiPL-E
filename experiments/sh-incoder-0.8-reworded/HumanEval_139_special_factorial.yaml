name: HumanEval_139_special_factorial
language: sh
prompt: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
  \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
  \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
  \ {\n"
tests: "}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
  \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
  ) = \"1\" ]]\n}\n\nrun_test"
completions: ["    factorial=$1\n    while [ $factorial -gt 1 ]\n    do\n        factorial=$((\
    \ $factorial * $factorial ))\n    done\n    echo \"$factorial\"", "        echo\
    \ \"[SPECIAL_FACTORIAL] $1 -> $(expr $1 \\* $1)\"\n        factorial=\"$(expr\
    \ $1 \\* $1)\"\n        while [ \"$factorial\" -gt 0 ]; do\n                factorial=\"\
    $(expr $factorial \\* $1)\"\n        done\n        echo \"$factorial\"", "  local\
    \ i\n  i=$1\n  ((i=$i!))\n  i=1\n  ((i=$i*$i))", "  if (( $# != 1 )); then\n \
    \   echo \"Invalid number of arguments\"\n    exit 1\n  fi\n  echo $(( $1 * $(factorial\
    \ $1) ))", "  local -r n=\"$1\"\n  shift\n  local -a fact\n  fact=()\n  for i\
    \ in $(seq 1 \"$n\"); do\n    fact+=($(special_factorial \"$i\"))\n  done\n  echo\
    \ $(IFS=\" \"; echo \"${fact[*]}\")", "    local factorial=1\n    for (( n=$1;\
    \ n; n-- ))\n    do\n        factorial=$((n*factorial))\n    done\n    echo \"\
    $factorial\"", "  local n=$1\n  local result\n  if [ $n -eq 0 ]; then\n    result=1\n\
    \  elif [ $n -eq 1 ]; then\n    result=2\n  elif [ $n -eq 2 ]; then\n    echo\
    \ 2\n  elif [ $n -ge 3 ]; then\n    result=$(special_factorial $((n - 1))) * $(special_factorial\
    \ $((n - 2)))\n  else\n    result=$(special_factorial $((n - 1))) * $(special_factorial\
    \ $((n - 2))) * $(special_factorial $((n - 3)))\n  fi\n  echo $result", "  local\
    \ i\n  local factorial\n\n  case $1 in\n    [1-9]* | [1-9]*[0-9])\n      factorial=1\n\
    \      for i in $(seq $1 2) ; do\n        factorial=$(( factorial * i ))\n   \
    \   done\n      factorial=$(( factorial * $1 ))\n      ;;\n    *)\n      factorial=1\n\
    \      for i in $(seq $1 9) ; do\n        factorial=$(( factorial * i ))\n   \
    \   done\n      factorial=$(( factorial * $1 ))\n      ;;\n  esac\n  echo \"$factorial\"",
  "    factorial=$1\n    # Iterate through the numbers starting from 2 and checking\
    \ if their factorial\n    # is the same as this number's factorial\n    for i\
    \ in $(seq 2 $factorial); do\n        if [ $(($factorial*$i)) == $factorial ];\
    \ then\n            echo $i\n        fi\n    done", "  echo \"$1\"\n  local factorial_result=\"\
    $(echo \"$1\" | tr \" \" \"\\n\" | sort -n -r -n | head -n 1)\"\n  local factorial_count=\"\
    $(echo \"$1\" | tr \" \" \"\\n\" | sort -n -r -n | wc -l )\"\n  factorial_result=$(brazilian_factorial\
    \ \"$factorial_count\")\n  echo \"$factorial_result\"", "  if (( ! $1 )) ; then\n\
    \    echo 'The special factorial of ' $1 ' is 0'\n  else\n    factorial=1\n  \
    \  while [[ $1 -gt 0 ]]; do\n      factorial=$((factorial * ($(( ${1#} - 1 )))))\n\
    \      (( $1 != 1 ))\n    done\n    echo $factorial\n  fi", "  # If the argument\
    \ is negative, return an error\n  [[ \"$1\" =~ ^-?[0-9]+$ ]] || return 1\n\n \
    \ # Define the factorial as an array\n  local factorial=( $(for ((i = 1; i <=\
    \ $1; i++)); do echo $i; done) )\n\n  # If the number is 0, return the array size\n\
    \  [[ \"${1:-0}\" -eq 0 ]] && return ${#factorial[@]}\n\n  # If the number is\
    \ negative, return an error\n  [[ \"$1\" =~ ^-[0-9]+$ ]] || return 1\n\n  # If\
    \ the number is negative, return an error\n  [[ \"$1\" -lt 0 ]] || return 1\n\n\
    \  # Calculate the factorial with the last element removed\n  local i\n  for ((i=1;\
    \ i<${#factorial[@]}; i++)) do\n    (( factorial[i] = factorial[i] * ${factorial[i-1]}\
    \ ))\n  done\n\n  # Return the factorial array\n  echo ${factorial[@]}", "\tlocal\
    \ n=$1\n\tlocal factorial=$(( n ** 2 ))\n\tlocal i\n\tfor i in $(seq 1 $n); do\n\
    \t\tfactorial=$(( factorial * i ))\n\tdone\n\techo $factorial", "    if [ $# -lt\
    \ 1 ]\n    then\n        echo \"Illegal number of parameters\"\n        echo \"\
    usage: $0 [n]\"\n        exit 1\n    fi\n\n    local n=$1\n\n    # Check if n\
    \ is an integer and has value > 0\n    if [ $n -lt 1 ]\n    then\n        echo\
    \ \"Illegal number of parameters\"\n        echo \"usage: $0 [n]\"\n        exit\
    \ 1\n    fi\n\n    # Calculate factorial\n    factorial=1\n    for ((i=1; i<=$n;\
    \ i++)); do\n        factorial=$(( factorial * i ))\n    done\n    echo $factorial",
  "    while [ $1 -gt 0 ]; do\n        factorial_result=$((factorial_result * $1))\n\
    \        shift\n    done\n\n    echo \"$factorial_result\"", "    while [[ $#\
    \ -gt 0 ]]; do\n        factorial=$(($factorial * $1))\n        shift\n    done",
  "    local factorial=$1\n    local factorial_out=''\n    while [ $factorial -gt\
    \ 0 ]; do\n        factorial_out=\"$factorial_out${factorial}!\"\n        factorial=$((\
    \ $factorial - 1 ))\n    done\n    echo \"$factorial_out\"", "    factorial_string=$1\n\
    \    factorial_string=$(echo \"$factorial_string\" | tr '[:upper:]' '[:lower:]')\n\
    \    while (( $factorial_string > 0 ))\n    do\n        factorial_string=\"$((\
    \ $factorial_string * $1 ))\"\n    done\n    echo \"$factorial_string\"", "  \
    \  while [ $# -gt 0 ]\n    do\n        local n=$1\n        shift\n        (( n--\
    \ ))\n        (( n *= n ))\n    done\n\n    echo \"$n\"", "  factorial=1\n  for\
    \ i in $(seq $1 $2); do\n    factorial=$((factorial * i))\n  done\n  echo $factorial",
  "    echo \"$1\"\n    factorial=1\n    for i in $(seq 1 $1)\n    do\n        factorial=$((factorial\
    \ * $i))\n    done\n    echo \"$factorial\"", "\tlocal n=$1\n\tlocal factorial=1\n\
    \twhile [ \"$n\" -ge 1 ]; do\n\t\tfactorial=\"$factorial$n\"\n\t\tn=$(n-2)\n\t\
    done\n\techo $factorial", "  local factorial_result=$1\n  factorial_result=$((factorial_result\
    \ * factorial_result * factorial_result))\n  return $factorial_result", "  local\
    \ NUMBER=\"$1\"\n  local VALUE=1\n\n  while [ $VALUE -le $NUMBER ]\n  do\n   \
    \ VALUE=$(($VALUE * $NUMBER))\n  done\n\n  echo $VALUE", "    local number=$1\n\
    \    local factorial=$((number * number))\n    while [ $factorial -ne 0 ]; do\n\
    \        factorial=$((factorial * number))\n    done\n    echo \"$factorial\"",
  "  echo \"$1\" > factorial\n  factorial_str=\"1\"\n  for (( i = 1; i < $1; i++ ))\n\
    \    do\n      factorial_str=\"$factorial_str * ($(( i-1))!)\"\n    done\n  echo\
    \ $factorial_str", "  if [ -z \"$1\" ]; then\n    echo 0\n  else\n    # Special\
    \ factorial is defined as:\n    # special_factorial(n) = n! * (n-1)! * (n-2)!\
    \ * ... * 1!\n    # where n > 0\n    echo \"$(($1 * ($1 * $1 * ($1 * $1 ))))\"\
    \n  fi", "  local n=$1\n  local ret=$(n-2)*(n-1)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)\n\
    \  # $(n-2)! is equal to $(n-2)\n  [ $ret -lt 1 ] && ret=$(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)\n\
    \  # $(n-1)! is equal to $(n-1)\n  [ $ret -lt 2 ] && ret=$(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)\n\
    \  # $(n-3)! is equal to $(n-3)\n  [ $ret -lt 3 ] && ret=$(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)\n\
    \  # $(n-4)! is equal to $(n-4)\n  [ $ret -lt 4 ] && ret=$(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)\n\
    \  # $(n-5)! is equal to $(n-5)\n  [ $ret -lt 5 ] && ret=$(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)\n\
    \  # $(n-6)! is equal to $(n-6)\n  [ $ret -lt 6 ] && ret=$(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)\n\
    \  # $(n-7)! is equal to $(n-7)\n  [ $ret -lt 7 ] && ret=$(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)\n\
    \  echo $ret", "    local -r n=\"$1\"\n    shift\n    echo \"$n!\"\n    for i\
    \ in $(seq 1 $n); do\n        echo \"$i\"\n    done", "  local factorial\n  factorial=\"\
    $1\"\n  echo \"$((factorial))!\"", "    local x=\"$1\"\n    shift\n    echo \"\
    $x\"\n    while (( x-- )); do echo \"$x!\"; done", "    local n=$1\n    if [ $n\
    \ -gt 0 ]; then\n        factorial=1\n        for ((i=2;i<=n;i++)); do\n     \
    \       factorial=$((factorial*i))\n        done\n        echo $factorial\n  \
    \  else\n        echo \"$n\"\n    fi", "    if [ $1 -eq 1 ]\n    then\n      \
    \  echo \"1\"\n    elif [ $1 -le 2 ]\n    then\n        echo \"$1\"\n    else\n\
    \        echo `expr $1 \\* \\( $special_factorial $(( ${1#} - 1 )) \\)`\n    fi",
  "  # If $1 is an integer, then factorial will be calculated with factorial\n  #\
    \ function\n  if [ -n \"$1\" ] && [[ $1 =~ ^[0-9]+$ ]]; then\n    factorial\n\
    \  else\n    echo \"Invalid input: factorial of $1 is not defined\"\n  fi", " \
    \   factorial=1\n    for ((i=1; i<$1; i+=1)); do\n        factorial=$((factorial\
    \ * i))\n    done\n    echo \"$factorial\"", "  local factorial=$(factorial $1)\n\
    \  echo $((factorial * $1))", "    local factorial=1\n    for i in $(seq 1 $1);\
    \ do\n        factorial=$((factorial*i))\n    done\n    echo \"$factorial\"",
  "  factorial=\"$1\"\n  factorial_string=\"1\"\n  factorial_number=1\n  while [ \"\
    $factorial_number\" -gt \"$factorial\" ]; do\n    factorial_string=\"$factorial_string\
    \ * $factorial_number\"\n    ((factorial_number++))\n  done\n  echo $factorial_string",
  "    local n=\"$1\"\n    local ret=\"$(nfactorial \"$n\")\"\n    echo \"$ret\"",
  "  # The factorial can be defined as:\n  # factorial(n) = n!\n  local factorial=\"\
    $1\"\n\n  factorial=\"$factorial\"!\n  factorial=\"$factorial\"!\n  factorial=\"\
    $factorial\"!\n  factorial=\"$factorial\"!\n\n  factorial=\"$factorial\"\n  factorial=\"\
    $factorial\"\n  factorial=\"$factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"\
    $factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"\
    $factorial\"\n\n  factorial=\"$factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"\
    $factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"\
    $factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"\
    $factorial\"\n\n  factorial=\"$factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"\
    $factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"\
    $factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"\
    $factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"\
    $factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"\
    $factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"\
    $factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"\
    $factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"\
    $factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"\
    $factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"\
    $factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"\
    $factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"\
    $factorial\"\n  factorial=\"$factorial\"\n\n  factorial=\"$factorial\"\n  factorial=\"\
    $factorial\"\n\n  factorial=\"$factori", "\tfactorial=$1\n\tfactorial=$((factorial))\n\
    \n\t# Checking for negative numbers\n\tif (( factorial < 0 )); then\n\t\techo\
    \ \"Error: Input must be a positive integer!\"\n\t\treturn 1\n\tfi\n\n\t# Looping\
    \ through all the digits of $factorial\n\ti=1\n\twhile (( $i <= $factorial ));\
    \ do\n\t\tfactorial=$((factorial * $i))\n\t\ti=$((i + 1))\n\tdone\n\n\tfactorial=$((factorial))\n\
    \n\t# Printing factorial to stdout\n\techo \"$factorial\"", "    local n=$1\n\
    \    if [ $n -ge 0 ]\n    then\n        echo $((n! * (n-1)! * (n-2)! * ... * 1!))\n\
    \    else\n        echo 1\n    fi", "  local n=$1\n  local factorial=1\n  local\
    \ i\n  local j\n  local k\n  local factorial_str\n  local factorial_str_2\n  factorial_str=\"\
    0\"\n  factorial_str_2=\"0\"\n  for ((i=1; i <= n; i++)); do\n    factorial=$((factorial*i))\n\
    \    factorial_str=$((factorial_str + $((factorial))))\n  done\n  for ((j=1; j<i;\
    \ j++)); do\n    factorial=$((factorial*j))\n    factorial_str_2=$((factorial_str_2\
    \ + $((factorial))))\n  done\n  echo $factorial_str_2", "  factorial=1\n  factorial=$(($factorial\
    \ * $1))\n  factorial=$(($factorial * ($1 - 1)))\n  factorial=$(($factorial *\
    \ ($1 - 2)))\n  factorial=$(($factorial * ($1 - 3)))\n  factorial=$(($factorial\
    \ * ($1 - 4)))\n  factorial=$(($factorial * ($1 - 5)))\n  factorial=$(($factorial\
    \ * ($1 - 6)))\n  factorial=$(($factorial * ($1 - 7)))\n  factorial=$(($factorial\
    \ * ($1 - 8)))\n  factorial=$(($factorial * ($1 - 9)))\n  factorial=$(($factorial\
    \ * ($1 - 10)))\n  factorial=$(($factorial * ($1 - 11)))\n  factorial=$(($factorial\
    \ * ($1 - 12)))\n  factorial=$(($factorial * ($1 - 13)))\n  factorial=$(($factorial\
    \ * ($1 - 14)))\n  factorial=$(($factorial * ($1 - 15)))\n  factorial=$(($factorial\
    \ * ($1 - 16)))\n  factorial=$(($factorial * ($1 - 17)))\n  factorial=$(($factorial\
    \ * ($1 - 18)))\n  factorial=$(($factorial * ($1 - 19)))\n  factorial=$(($factorial\
    \ * ($1 - 20)))\n  factorial=$(($factorial * ($1 - 21)))\n  factorial=$(($factorial\
    \ * ($1 - 22)))\n  factorial=$(($factorial * ($1 - 23)))\n  factorial=$(($factorial\
    \ * ($1 - 24)))\n  factorial=$(($factorial * ($1 - 25)))\n  factorial=$(($factorial\
    \ * ($1 - 26)))\n  factorial=$(($factorial * ($1 - 27)))\n  factorial=$(($factorial\
    \ * ($1 - 28)))\n  factorial=$(($factorial * ($1 - 29)))\n  factorial=$(($factorial\
    \ * ($1 - 30)))\n  factorial=$(($factorial * ($1 - 31)))\n  factorial=$(($factorial\
    \ * ($1 - 32)))\n  factorial=$(($factorial * ($1 - 33)))\n  factorial=$(($factorial\
    \ * ($1 - 34)))\n  factorial=$(($factorial * ($1 - 35)))\n  factorial=$(($factorial\
    \ * ($1 - 36)))\n  factorial=$(($factorial * ($1 - 37)))\n  factorial=$(($factorial\
    \ * ($1 - 38)))\n  factorial=$(($", "  local i result\n  \n  (( $# )) || return\
    \ 0\n  result=$1\n  \n  # If n is 0, factorial is 0!\n  (( result == 0 )) || return\
    \ 0\n  \n  i=1\n  while [ $(( result > 1 )) -ge $1 ]; do\n    (( result = result\
    \ * ($i + 1) ))\n    (( i++ ))\n  done\n  \n  return $result", "\tlocal factorial\n\
    \tfactorial=$1\n\twhile [ $factorial -gt 0 ]\n\tdo\n\t\tfactorial=$(( $factorial\
    \ * $1 ))\n\tdone\n\techo $factorial", "    local number=$1\n    local factorial=1\n\
    \    if [ $number -eq 0 ]; then\n        echo \"1\"\n    else\n        for i in\
    \ $(seq 0 $number); do\n            factorial=$(($factorial * $i))\n        done\n\
    \        echo $factorial\n    fi", '    echo "$(brazilian_factorial "$1")"', " \
    \   local number=$1\n    if [ $number == 0 ]; then\n        return 1\n    elif\
    \ [ $number -eq 1 ]; then\n        return 1\n    else\n        special_factorial\
    \ $((number-1))\n    fi", "    local -r n=$1\n    factorial=$(echo $((n!*(n-1)!*(n-2)!*(n-3)!*(n-4)!*(n-5)!*(n-6)!*(n-7)!*(n-8)!*(n-9)!*(n-10)!*(n-11)!*(n-12)!*(n-13)!*(n-14)!*(n-15)!*(n-16)!*(n-17)!*(n-18)!*(n-19)!*(n-20)!*(n-21)!*(n-22)!*(n-23)!*(n-24)!*(n-25)!*(n-26)!*(n-27)!*(n-28)!*(n-29)!*(n-30)!*(n-31)!*(n-32)!*(n-33)!*(n-34)!*(n-35)!*(n-36)!*(n-37)!*(n-38)!*(n-39)!*(n-40)!*(n-41)!*(n-42)!*(n-43)!*(n-44)!*(n-45)!*(n-46)!*(n-47)!*(n-48)!*(n-49)!*(n-50)!*(n-51)!*(n-52)!*(n-53)!*(n-54)!*(n-55)!*(n-56)!*(n-57)!*(n-58)!*(n-59)!*(n-60)!*(n-61)!*(n-62)!*(n-63)!*(n-64)!*(n-65)!*(n-66)!*(n-67)!*(n-68)!*(n-69)!*(n-70)!*(n-71)!*(n-72)!*(n-73)!*(n-74)!*(n-75)!*(n-76)!*(n-77)!*(n-78)!*(n-79)!*(n-80)!*(n-81)!*(n-82)!*(n-83)!*(n-84)!*(n-85)!*(n-86)!*(n-87)!*(n-88)!*(n-89)!*(n-90)!*(n-91)!*(n",
  "\tif [[ \"${1}\" -gt \"0\" ]]; then\n\t\tlocal factorial=$1\n\t\tlocal numer=1\n\
    \t\tlocal denomin=1\n\t\twhile [[ ${numer} -le \"${factorial}\" ]]; do\n\t\t\t\
    numer=$(( ${numer} * ${denomin} ))\n\t\t\tdenomin=$(( ${denomin} * 2 ))\n\t\t\
    done\n\t\techo ${numer}\n\telse\n\t\techo \"invalid input\"\n\tfi", "  local number=$1\n\
    \  echo $(( ${number} * $(special_factorial \"${number-1}\" ) ))", "    echo \"\
    $1 is not a valid integer. Please, use $(special_factorial '4')\"", '    echo
    "$1" | bc -l | xargs printf "%.0f\n" | xargs expr "$(( ("$1" - 1) / $2))"', "\t\
    local n=$1\n\tlocal factorial=1\n\tlocal i\n\tfor i in $(seq 0 $(( $n - 1 )));\
    \ do\n\t\tfactorial=$(( $factorial * $i ))\n\tdone\n\techo \"$factorial\"", " \
    \   if [ -z \"$1\" ]; then\n        echo \"error: factorial input not defined\"\
    \n        exit 1\n    fi\n    local i\n    local n\n    local out\n\n    if [\
    \ \"$1\" -lt 1 ]; then\n        echo \"error: factorial input needs to be greater\
    \ than 0\"\n        exit 1\n    fi\n\n    for (( i=1; i <= $1; i++ )); do\n  \
    \      ((n++))\n    done\n\n    if [ $n -lt 1 ]; then\n        out=\"1\"\n   \
    \ else\n        out=$(( $n * ( special_factorial( $(( n - 1 )) ) ) ))\n    fi\n\
    \n    echo \"$out\"", "    factorial=1\n    for ((i=$1; i>0; i--))\n    do\n \
    \       factorial=$(($factorial * $i))\n    done\n    echo \"$factorial\"", " \
    \ factorial=$1\n  while [ $factorial -ge 1 ]\n  do\n    factorial=$(( $factorial\
    \ * $1 ))\n  done\n  echo $factorial", "    if [ \"${#}\" -eq \"1\" ]; then\n\
    \        echo \"0\"\n    elif [ \"${#}\" -eq \"2\" ]; then\n        echo \"1\"\
    \n    elif [ \"${#}\" -eq \"3\" ]; then\n        echo \"2\"\n    elif [ \"${#}\"\
    \ -eq \"4\" ]; then\n        echo \"6\"\n    elif [ \"${#}\" -eq \"5\" ]; then\n\
    \        echo \"24\"\n    elif [ \"${#}\" -eq \"6\" ]; then\n        echo \"120\"\
    \n    elif [ \"${#}\" -eq \"7\" ]; then\n        echo \"720\"\n    elif [ \"${#}\"\
    \ -eq \"8\" ]; then\n        echo \"5040\"\n    elif [ \"${#}\" -eq \"9\" ]; then\n\
    \        echo \"40320\"\n    elif [ \"${#}\" -eq \"10\" ]; then\n        echo\
    \ \"362880\"\n    elif [ \"${#}\" -eq \"11\" ]; then\n        echo \"3628800\"\
    \n    elif [ \"${#}\" -eq \"12\" ]; then\n        echo \"39916800\"\n    elif\
    \ [ \"${#}\" -eq \"13\" ]; then\n        echo \"479001600\"\n    elif [ \"${#}\"\
    \ -eq \"14\" ]; then\n        echo \"6227020800\"\n    elif [ \"${#}\" -eq \"\
    15\" ]; then\n        echo \"87178291200\"\n    elif [ \"${#}\" -eq \"16\" ];\
    \ then\n        echo \"130767436800\"\n    elif [ \"${#}\" -eq \"17\" ]; then\n\
    \        echo \"20922789888000\"\n    elif [ \"${#}\" -eq \"18\" ]; then\n   \
    \     echo \"355687428096000\"\n    elif [ \"${#}\" -eq \"19\" ]; then\n     \
    \   echo \"6402373705728000\"\n    elif [ \"${#}\" -eq \"20\" ]; then\n      \
    \  echo \"121645100408832000\"\n    elif [ \"${#}\" -eq \"21\" ]; then\n     \
    \   echo \"2432902008176640000\"\n    elif [ \"${#}\" -eq \"22\" ]; then\n   \
    \     echo \"51090942171709440000\"\n    elif [ \"${#}\" -eq \"23\" ]; then\n\
    \        echo \"1124000727777607680000\"\n    elif [ \"${#}\" -eq \"24\" ]; then\n\
    \        echo \"25852016738884976640000\"\n    elif [ \"${#}\" -eq \"25\" ]; then\n\
    \        echo \"620448401733239439360000\"\n    elif [ \"${#}\" -eq \"26\" ];\
    \ then\n        echo \"15511210043330985984000000\"\n    elif [ \"${#}\" -eq \"\
    27\" ]; then", "    factorial=$1\n    if [ $1 -gt 1 ]\n    then\n        factorial=$((\
    \ factorial * $1 ))\n        special_factorial $(($factorial - 1))\n    else\n\
    \        echo \"$factorial\"\n    fi", "  factorial=1\n  for i in $(seq 1 $1);\
    \ do\n    factorial=$((factorial*$i))\n  done\n  echo $factorial", "    if [[\
    \ -z $1 ]]; then echo \"The argument \\\"$1\\\" must be non-zero\"; return 1;\
    \ fi\n    \n    factorial=1\n    for i in {1..\"$1\"};do factorial=\"$((factorial\
    \ * i))\"; done;\n    echo \"$factorial\"", "    factorial=$1\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    factorial=$((factorial * factorial))\n    factorial=$((factorial\
    \ * factorial))\n    echo \"$factorial\"", "  factorial_calc=$1\n  factorial_string=$(echo\
    \ $factorial_calc | sed 's/^0*//g' | awk '{print $NF}')\n  factorial_sum=$(echo\
    \ $factorial_calc | sed 's/^0*//g' | awk '{print $1}')\n  factorial_string=$(echo\
    \ $factorial_string)\n  factorial_sum=$(echo $factorial_sum)\n  while [[ $factorial_sum\
    \ -le $factorial_string ]]\n  do\n    factorial_sum=$(echo $factorial_sum * $factorial_string)\n\
    \    factorial_string=$(echo $factorial_string * $factorial_string)\n  done\n\
    \  echo $factorial_sum", "    local factors=()\n    local n=$1\n    local factor\n\
    \    for ((i = 0; i < n; i++)); do\n        factor=$(expr \"$i\" + 1)\n      \
    \  factors+=(\"$factor\")\n    done\n    echo \"${factors[*]}\"", "    local factorial_num=$1\n\
    \    factorial_num=$((factorial_num))\n    while [ $factorial_num -gt 0 ]; do\n\
    \        factorial_num=$((factorial_num * $factorial_num))\n    done\n    echo\
    \ \"$factorial_num\"", "\t# if $1 is zero, return one\n\tif [ \"$1\" -eq 0 ]\n\
    \tthen\n\t\techo 1\n\t\treturn\n\tfi\n\t# If $1 is not zero, calculate the factorial\
    \ and return the value\n\tlet factorial=1\n\tlet factorial=$1*factorial\n\techo\
    \ $factorial\n\twhile [ $factorial -gt 1 ]\n\tdo\n\t\tlet factorial=$factorial-1\n\
    \t\tlet factorial=$factorial*factorial\n\tdone", "    factorial_function=$1\n\
    \    if [ $factorial_function -gt 0 ]; then\n        factorial=1\n        for\
    \ n in $(seq 0 $((factorial_function-1))); do\n            factorial=$((factorial*n))\n\
    \        done\n        echo $factorial\n    else\n        echo \"Error: factorial\
    \ number must be greater than 0\"\n    fi", "    if [[ -z $1 ]]; then\n      \
    \  return 1\n    fi\n    factorial=0\n    while [[ $1 -gt 0 ]]; do\n        factorial=$((\
    \ $factorial * $1 ))\n        shift\n    done\n    echo \"$factorial\"", "  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*$1))\n  done\n  echo $factorial",
  "  local n=\"$1\"\n  local factorial=\"$2\"\n  local result=\"$3\"\n  local sum\n\
    \n  if [[ \"$factorial\" -eq \"0\" ]]; then\n    echo \"$result\"\n  else\n  \
    \  for (( i = 1; i <= n; i++ )); do\n      sum=$(( factorial*i ))\n      factorial=$((\
    \ factorial*(n - i)))\n      result=$(( sum+result ))\n    done\n  fi", "  factorial=1\n\
    \  for i in $(seq 1 $1); do\n    factorial=$((factorial*i))\n  done\n  echo $factorial",
  "    local number=$1\n    local factorial=1\n    local count=1\n    while [ $count\
    \ -le $number ]; do\n        factorial=$(($factorial*$count))\n        count=$(($count+1))\n\
    \    done\n    echo \"$factorial\"", "\tif [[ -z \"$1\" ]]; then\n\t\techo \"\
    Error. Parameter expected\" >&2\n\t\texit 1\n\tfi\n\n\t# The factorial of a negative\
    \ number is undefined\n\tif [[ \"$1\" -gt 0 ]]; then\n\t\techo $(expr $1 \\* $(special_factorial\
    \ \"$(expr $1 \\+ 1)\"))\n\telse\n\t\techo \"0\"\n\tfi", '  echo $(($1*$(($1-1))*$(($1-2))))',
  "  local n=\"$1\"\n  case $n in\n    0) echo \"0\" >&2\n    ;;\n    1) echo \"1\"\
    \ >&2\n    ;;\n    2) echo \"$n\" >&2\n    ;;\n    *)\n      local result=\"$((\
    \ n * (n-1) ))\"\n      local i\n      for (( i = 3; i <= n; ++i )); do\n    \
    \    result=\"$(( result * (n-$i-1) ))\"\n      done\n      echo \"$result\"\n\
    \    ;;\n  esac", "  factorial=1\n  for ((i=1; i <= $1; i++))\n  do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial", "  local n=$1\n\n  if [ $n -lt 1 ]; then\n\
    \    echo \"Invalid argument $1\"\n    return 1\n  fi\n\n  local factorial=1\n\
    \  local factorial_prev\n  local factorial_next\n\n  while [ $n -gt 1 ]; do\n\
    \    factorial_prev=$factorial\n    factorial=$((factorial * (n - 1)))\n    factorial_next=$((factorial_prev\
    \ * factorial))\n\n    # echo \"n=$n factorial=$factorial factorial_prev=$factorial_prev\
    \ factorial_next=$factorial_next\"\n\n    n=$((n - 1))\n  done\n\n  echo \"$factorial_next\"",
  "    factorial=$1\n    factorials=$(brazilian_factorial $factorial)", "  local x=\"\
    $1\"\n  (( x > 0 )); echo \"$(( $x * $(brazilian_factorial $(( x - 1 ))) ))\"",
  "    if [ \"${#}\" -lt \"1\" ]; then\n        echo \"Usage: special_factorial(N)\"\
    \ >&2\n        return 1\n    fi\n\n    factorial=1\n    for i in $(seq 0 $1);\
    \ do\n        factorial=\"$factorial$((i * (i - 1))\"\n    done\n    echo \"$factorial\"",
  "    factorial=$1\n    factorials=()\n    factorial_counter=1\n    for i in `seq\
    \ 1 $factorial`; do\n        factorials=(\"${factorials[@]}\" $(( ${factorial_counter}\
    \ * $i )))\n        factorial_counter=$(( $factorial_counter + 1 ))\n    done\n\
    \    echo \"${factorials[*]}\"", "\tfactorial=1\n\tnum=$1\n\twhile [ $num -gt\
    \ 1 ]; do\n\t\tfactorial=$(( ${factorial} * $num ))\n\t\tnum=$(( $num - 1 ))\n\
    \tdone\n\techo $factorial", "  local factorial=1\n  local factorial_counter=1\n\
    \  local factorial_max_counter=$1\n  local factorial_sum=0\n\n  while [ \"$factorial_counter\"\
    \ -le \"$factorial_max_counter\" ]; do\n    factorial_sum=$((factorial_sum + $factorial_counter))\n\
    \    factorial_counter=$((factorial_counter + 1))\n  done\n  echo $factorial_sum",
  "  local n=$1\n  local factorial=1\n  local temp\n  temp=$(( ${n} + 1))\n  while\
    \ [ $temp -gt 1 ]\n  do\n    factorial=$(( ${factorial} * $temp))\n    temp=$((\
    \ $temp - 1 ))\n  done\n  echo $factorial", "    local n factorial count\n   \
    \ factorial=1\n    while [ $n -gt 1 ]; do\n        factorial=$(($factorial * $n))\n\
    \        n=$(($n - 1))\n    done\n    count=0\n    while [ $n -lt 10 ]; do\n \
    \       factorial=$(($factorial * $n))\n        n=$(($n + 1))\n        let count++\n\
    \    done\n    echo \"$factorial\"", "  echo \"$1\"\n  factorial=1\n  for ((i=1;\
    \ i<=$1; i++)); do\n      factorial=$(($factorial * $i))\n  done\n  echo $factorial",
  "  local val=\"$1\"\n  echo \"$(($val*(val-1))*$(($val-1)))\"", "  local n=\"$1\"\
    \n  if [ \"${n}\" -ge 0 ]; then\n    factorial_output=$((n!))\n    for ((i=1;\
    \ i<n; i++)); do\n      factorial_output=$((factorial_output*i))\n    done\n \
    \ else\n    factorial_output=1\n  fi\n  printf \"${factorial_output}\"", "  local\
    \ n_string=$1\n  local factorial=0\n\n  while [ -z \"$n_string\" ]\n  do\n   \
    \ n_string=$(echo \"$n_string\" | rev | cut -c1-1 | rev)\n    factorial=$(($factorial\
    \ * $n_string))\n  done\n\n  echo $(echo $factorial)", "    if [ \"$1\" -gt \"\
    0\" ]; then\n        factorial=$1\n        for ((i=2; i <= $factorial; i++));\
    \ do\n            factorial=$((factorial*i))\n        done\n        echo $factorial\n\
    \    else\n        echo \"Invalid parameter, try again\"\n    fi", "  factorial=$1\n\
    \  factorial=1\n  for i in $(seq 0 $(( $factorial - 1 ))); do\n    factorial=$((\
    \ $factorial * $i ))\n  done\n  echo $factorial", "\tlet n=$1\n\tlet nfactorial=$(nfactorial\
    \ \"$n\")\n\tlet nfactorial=$(( (nfactorial % 10) * 10 ))\n\techo $nfactorial",
  '  factorial_of_number $1', "  if [ $# -ne 1 ]; then\n    echo \"usage: special_factorial\
    \ integer\"\n    return\n  fi\n  local n=$1\n  if [ $n -lt 1 ]; then\n    echo\
    \ \"Error: input must be > 0\"\n    return\n  fi\n\n  local factorial=1\n  for\
    \ i in $(seq 1 $n); do\n    factorial=$((factorial * (n-1)))\n  done\n  echo $factorial",
  "    factorial=1;\n    for (( i=1; i<=$1; i++ ));\n    do\n        factorial=$((\
    \ factorial * i ));\n    done\n    echo $factorial;", "    echo \"$1\"\n    factorial=$1\n\
    \    factorial=$(( $factorial * $factorial ))\n    factorial=$(( $factorial *\
    \ $factorial ))\n    factorial=$(( $factorial * $factorial ))\n    factorial=$((\
    \ $factorial * $factorial ))\n    factorial=$(( $factorial * $factorial ))\n \
    \   factorial=$(( $factorial * $factorial ))\n    factorial=$(( $factorial * $factorial\
    \ ))\n    factorial=$(( $factorial * $factorial ))\n    factorial=$(( $factorial\
    \ * $factorial ))\n    factorial=$(( $factorial * $factorial ))\n    factorial=$((\
    \ $factorial * $factorial ))\n    factorial=$(( $factorial * $factorial ))\n \
    \   factorial=$(( $factorial * $factorial ))\n    factorial=$(( $factorial * $factorial\
    \ ))\n    factorial=$(( $factorial * $factorial ))\n    factorial=$(( $factorial\
    \ * $factorial ))\n    factorial=$(( $factorial * $factorial ))\n    factorial=$((\
    \ $factorial * $factorial ))\n    factorial=$(( $factorial * $factorial ))\n \
    \   factorial=$(( $factorial * $factorial ))\n    factorial=$(( $factorial * $factorial\
    \ ))\n    factorial=$(( $factorial * $factorial ))\n    factorial=$(( $factorial\
    \ * $factorial ))\n    factorial=$(( $factorial * $factorial ))\n    factorial=$((\
    \ $factorial * $factorial ))\n    factorial=$(( $factorial * $factorial ))\n \
    \   factorial=$(( $factorial * $factorial ))\n    factorial=$(( $factorial * $factorial\
    \ ))\n    factorial=$(( $factorial * $factorial ))\n    factorial=$(( $factorial\
    \ * $factorial ))\n    factorial=$(( $factorial * $factorial ))\n    factorial=$((\
    \ $factorial * $factorial ))\n    factorial=$(( $factorial * $factorial ))\n \
    \   factorial=$(( $factorial * $factorial ))\n    factorial=$(( $factorial * $factorial\
    \ ))\n    factorial=$(( $factorial * $factorial ", '  echo "$1"', "  if [[ \"\
    $1\" == \"\" ]]; then\n    echo \"Please supply an integer to factorialize\"\n\
    \    return\n  fi\n\n  if [[ \"$1\" -ge 1 ]]; then\n    echo \"Sorry, factorial\
    \ is not defined for numbers higher than 1\"\n    return\n  fi\n\n  # Special\
    \ case when n = 1\n  special_case=1\n  factorial=$1\n  while [ $(( $factorial\
    \ % 2 )) == 1 ]\n  do\n    factorial=$(( $factorial * 2 ))\n  done\n\n  factorial=$((\
    \ $factorial * $special_case ))\n\n  while [ $(( $factorial % $1 )) == 1 ]\n \
    \ do\n    factorial=$(( $factorial * $1 ))\n  done\n\n  echo $factorial", "  local\
    \ n=$1\n  [[ -z $n ]] && echo \"Error: the parameter \\\"n\\\" must be an integer\
    \ greater than zero.\" && return 1\n  n=${n#0}\n  local factorial=1\n  local factorial2=1\n\
    \  for ((i = 1; i <= $n; i++)); do\n    factorial=$((factorial*i))\n    factorial2=$((factorial2*i))\n\
    \  done\n  printf \"$factorial2\"", "\techo $1 |\n\t\tawk '{\n\t\t\tif ($1%2 !=\
    \ 0) {\n\t\t\t\tprint $1/2\n\t\t\t} else {\n\t\t\t\tprint $1*4\n\t\t\t}\n\t\t\
    }'", "\tlocal factor=1\n\tlocal number=$1\n\tlocal factorial=1\n\n\tif [[ $number\
    \ -lt 1 ]]; then\n\t\techo \"This factorial is invalid.\"\n\t\treturn 1\n\tfi\n\
    \n\twhile [ $number -gt 0 ]\n\tdo\n\t\tfactorial=$(( ${factorial} * ${number}\
    \ ))\n\t\tnumber=$(( ${number}-1 ))\n\tdone\n\n\techo $factorial", "  local factorial_n=$1\n\
    \  if [[ $factorial_n < 0 ]]; then\n    echo \"Error: factorial argument must\
    \ be greater than 0.\"\n    echo \"The factorial argument must be an integer.\"\
    \n  else\n    factorial=$(factorial \"$factorial_n\")\n  fi\n  echo \"$factorial\"",
  "    local n=$1\n    local factorial\n    factorial=0\n    while [ $n -gt 0 ]; do\n\
    \        factorial=$(( factorial * n ))\n        n=$(( n - 1 ))\n    done\n  \
    \  echo \"$factorial\"", "    factorial=$1\n    if [[ $factorial -gt 0 ]]; then\n\
    \        factorial=$(($factorial * $factorial))\n    fi\n    if [[ $factorial\
    \ -gt 1 ]]; then\n        factorial=$(($factorial * $factorial -1))\n    fi\n\
    \    if [[ $factorial -gt 2 ]]; then\n        factorial=$(($factorial * $factorial\
    \ -2))\n    fi\n    if [[ $factorial -gt 3 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -3))\n    fi\n    if [[ $factorial -gt 4 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -4))\n    fi\n    if [[ $factorial -gt 5 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -5))\n    fi\n    if [[ $factorial -gt 6 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -6))\n    fi\n    if [[ $factorial -gt 7 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -7))\n    fi\n    if [[ $factorial -gt 8 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -8))\n    fi\n    if [[ $factorial -gt 9 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -9))\n    fi\n    if [[ $factorial -gt 10 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -10))\n    fi\n    if [[ $factorial -gt 11 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -11))\n    fi\n    if [[ $factorial -gt 12 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -12))\n    fi\n    if [[ $factorial -gt 13 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -13))\n    fi\n    if [[ $factorial -gt 14 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -14))\n    fi\n    if [[ $factorial -gt 15 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -15))\n    fi\n    if [[ $factorial -gt 16 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -16))\n    fi\n    if [[ $factorial -gt 17 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -17))\n    fi\n    if [[ $factorial -gt 18 ]]; then\n        factorial=$(($factorial\
    \ * $factorial -18))\n    fi\n    if [[ $factorial -gt 19 ]]; then\n        factorial=$",
  "    local factorial=\"${1}\"\n\n    if [[ ${factorial} -eq 0 ]]; then\n       \
    \ return 1\n    elif [[ ${factorial} -eq 1 ]]; then\n        return ${factorial}\n\
    \    else\n        factorial=$((${factorial} * special_factorial((${factorial}\
    \ - 1))))\n    fi\n\n    return ${factorial}", "  local factorial=\"$1\"\n\n \
    \ if [[ \"$factorial\" -eq 1 ]]; then\n    factorial\n  else\n    factorial=\"\
    $factorial\"\n    for i in $(seq 1 \"$factorial\"); do\n      factorial=\"$factorial\"\
    \ *\"$i\"\n    done\n  fi\n  factorial", "\techo \"$(echo \"$1\" | tr \" \" \"\
    \\n\" | grep -o -E '[+-]?[1-9][0-9]*$' | xargs -n1 echo \"$(nproc --all)\" |head\
    \ -n 1)\"", "    local number=$1\n    local factorial=1\n\n    if [ $number -eq\
    \ 0 ]; then\n        return 0\n    fi\n\n    if [ $number -eq 1 ]; then\n    \
    \    return 1\n    fi\n\n    for ((i=2; i <= $((number-1)); i++))\n    do\n  \
    \      factorial=$((factorial * (number-i)))\n    done\n\n    echo \"$factorial\"",
  "    factorial=1\n    i=0\n    for ((i=0;i<$1;i++))\n    do\n        factorial=$((factorial*$i))\n\
    \    done\n    echo \"$factorial\"", "    local n=$1 #local variables\n    factorial_value=1\
    \ #global variable\n\n    # Loop to calculate factorial\n    for ((i = 1; i <=\
    \ n; i++))\n    do\n        factorial_value=$factorial_value * (n-i) #use bash\
    \ math to calculate factorial\n    done\n\n    echo \"$factorial_value\" #return\
    \ the factorial value", "  echo \"$1\"\n  local -r n=$1\n  factorial_result=0\n\
    \  for (( i = 1; i <= n; i++ ))\n  do\n    factorial_result=$(( $factorial_result\
    \ * $i ))\n  done\n  echo \"$factorial_result\"", "    local input=$1\n    if\
    \ [ $input -gt 1 ]; then\n        echo $(factorial $(($input-1)))\n    else\n\
    \        echo $1\n    fi", "    echo \"$1\"\n    factorial=\"$(( $1 * $(( $1 *\
    \ $1 )) ))\"\n    for i in $(seq 0 $(($factorial - 1)))\n    do\n        factorial=\"\
    $(( $factorial * $i ))\"\n    done\n    echo \"$factorial\"", "  (( $# )) || return\
    \ 1\n  local n=\"$1\"\n  (( $# )) || return 1\n  (( $n <= 1 )) && return 1\n \
    \ local i\n  local factorial\n  factorial=1\n  while [ $n -gt 0 ]; do\n    ((\
    \ i++ ))\n    (( $i < $n )) && factorial=$(($factorial * $n--))\n  done\n  echo\
    \ $factorial", "  (( $# )) && {\n    local factor=1\n    while (( $# > 0 ));\n\
    \    do\n      (( factor *= $1 ))\n      (( $# --))\n    done\n    echo \"$factor\"\
    \n  }", "  local factorial factorial_str\n  factorial_str=$((${1%%-*}))\n  while\
    \ [[ ${#1} -gt 0 ]]; do\n    factorial=$((factorial*$factorial_str))\n    factorial_str=$((${1##*-}))\n\
    \  done\n  echo $factorial", "  factorial=$(factorial $1)\n  echo \"$factorial\"",
  "    # Convert the argument to a number\n    n=\"$1\"\n    if [ $n -eq 1 ]\n   \
    \ then\n        # Special case\n        return 1\n    fi\n    brazilian_factorial_count=$((n-1))\n\
    \    brazilian_factorial=$((n-brazilian_factorial_count))\n    echo \"$brazilian_factorial\"",
  "    factorial=1\n    factor=2\n    while [ $factor -lt $1 ]; do\n        factorial=$((\
    \ factorial * factor ))\n        factor=$(( factor * 2 ))\n    done\n    echo\
    \ $factorial", "  (( $# == 0 )) && return 0\n  local i\n  (( $# == 1 )) && return\
    \ $1\n  (( $# == 2 )) && return $2\n  (( $# > 2 )) && return 0\n  i=$1\n  (( i\
    \ <= $2 )) && return $i\n  (( i > $2 )) && return 0\n  i=$2\n  (( i <= $3 )) &&\
    \ return $i\n  (( i > $3 )) && return 0\n  i=$3\n  (( i <= $4 )) && return $i\n\
    \  (( i > $4 )) && return 0\n  i=$4\n  (( i <= $5 )) && return $i\n  (( i > $5\
    \ )) && return 0\n  i=$5\n  (( i <= $6 )) && return $i\n  (( i > $6 )) && return\
    \ 0\n  i=$6\n  (( i <= $7 )) && return $i\n  (( i > $7 )) && return 0\n  i=$7\n\
    \  (( i <= $8 )) && return $i\n  (( i > $8 )) && return 0\n  i=$8\n  (( i <= $9\
    \ )) && return $i\n  (( i > $9 )) && return 0\n  i=$9\n  (( i <= $10 )) && return\
    \ $i\n  (( i > $10 )) && return 0\n  i=$10\n  (( i <= $11 )) && return $i\n  ((\
    \ i > $11 )) && return 0\n  i=$11\n  (( i <= $12 )) && return $i\n  (( i > $12\
    \ )) && return 0\n  i=$12\n  (( i <= $13 )) && return $i\n  (( i > $13 )) && return\
    \ 0\n  i=$13\n  (( i <= $14 )) && return $i\n  (( i > $14 )) && return 0\n  i=$14\n\
    \  (( i <= $15 )) && return $i\n  (( i > $15 )) && return 0\n  i=$15\n  (( i <=\
    \ $16 )) && return $i\n  (( i > $16 )) && return 0\n  i=$16\n  (( i <= $17 ))\
    \ && return $i\n  (( i > $17 )) && return 0\n  i=$17\n  (( i <= $18 )) && return\
    \ $i", "  if (( $# != 1 )); then\n    echo \"$0: ERROR: Must enter an integer\"\
    \ 1>&2\n    exit 1\n  fi\n  \n  n=${1:-0}\n  factorial=1\n  i=1\n  while (( $i\
    \ <= $n )); do\n    factorial=$(bc <<< \"($factorial * $i)\")\n    (( i++ ))\n\
    \  done\n  echo $factorial", "  factorial=$1\n  if [ $factorial -eq 1 ]; then\n\
    \    return $factorial\n  fi\n  echo \"$factorial\"\n  special_factorial $(( $factorial-1\
    \ ))\n  special_factorial $(( $factorial-2 ))", "  if [ -z \"$1\" ]; then\n  \
    \  echo \"You must pass me a positive integer.\"\n    exit 1\n  fi\n  local factors=$(seq\
    \ -f \"%g \" 0 \"$1\")\n  echo \"$factors\"", "    local factor=\"$(printf \"\
    %.0d\" \"$1\")\"\n    local factorial=\"$(echo $factor | bc)\"\n\n    if [[ $factor\
    \ -ge 1 ]]; then\n        factorial=\"$(echo \"$factorial\" | bc -l)\"\n    fi\n\
    \n    echo \"$factorial\"", "  n=$1\n  echo \"$(( $n*$( special_factorial $((\
    \ $n -1 )) ) ))\"", "    local n=$1\n\n    local factorial_str=\"\"\n    for ((i=1;\
    \ i <= n; i++)); do\n        factorial_str=\"${factorial_str}${1}!\"\n    done\n\
    \n    echo \"${factorial_str}\"", "\tfactorial=1\n\twhile [ $1 -gt 0 ]; do\n\t\
    \tfactorial=$(( factorial * $1 ))\n\t\tshift\n\tdone\n\techo \"$factorial\"",
  "    factorial=1;\n    for ((i = 1; i <= $1; i++)); do\n        factorial=$(expr\
    \ $factorial * $i)\n    done\n    echo $factorial", "  local n=\"$1\"\n\n  case\
    \ $n in\n    0) return 0 ;;\n    *) local x=\"$(( ( ( ( ( ( ( ( ( ( ( ( ( ( ((\
    \ n==1 ) ) ) ) ) ) ) ) ) ) ) ) ) ) )\"\n      echo $(( n! ))\n      return\n \
    \   ;;\n  esac", "  local n ans nc i result factorial\n  case $1 in\n    0) echo\
    \ \"0\";;\n    *) echo \"$(( n ))\";;\n  esac", "  local _n _f _m _j\n\n  if [[\
    \ \"$#\" -ne 1 ]]; then\n    echo >&2 \"Usage: $(basename $0) <n>\"\n    exit\
    \ 1\n  fi\n\n  read _n\n  _f=$(( 1 <<< \"$_n\" ))\n  while [[ \"$_f\" -gt 1 ]];\
    \ do\n    (( _f = _f * _n ))\n    (( _m = _m - 1 ))\n  done\n  echo \"$_f\"",
  "    local number=$1\n\n    echo \"$(brazilian_factorial $number)\" | bc", "\tfactorial=1\n\
    \tfor i in $(seq 1 $1); do\n\t\tfactorial=$(( $factorial * $(factorial_function\
    \ $i) ))\n\tdone\n\techo $factorial", "  local n=$1\n  local f=1\n  for ((i =\
    \ 1; i <= n; ++i)); do\n    f=$(( f * i ))\n  done\n  echo $f", "    # $2 will\
    \ be the first parameter of special_factorial\n    # $1 will always be an integer\n\
    \    local factorial_parameter=$1\n    # $factorial_parameter will always be an\
    \ integer\n    # $2 will always be an integer\n    local factorial_parameter=$1\n\
    \    # $3 will always be an integer\n    local factorial_parameter=$1\n    # $4\
    \ will always be an integer\n    local factorial_parameter=$1\n    # $5 will always\
    \ be an integer\n    local factorial_parameter=$1\n    # $6 will always be an\
    \ integer\n    local factorial_parameter=$1\n    # $7 will always be an integer\n\
    \    local factorial_parameter=$1\n    # $8 will always be an integer\n    local\
    \ factorial_parameter=$1\n    # $9 will always be an integer\n    local factorial_parameter=$1\n\
    \    # $10 will always be an integer\n    local factorial_parameter=$1\n    #\
    \ $11 will always be an integer\n    local factorial_parameter=$1\n    # $12 will\
    \ always be an integer\n    local factorial_parameter=$1\n    # $13 will always\
    \ be an integer\n    local factorial_parameter=$1\n    # $14 will always be an\
    \ integer\n    local factorial_parameter=$1\n    # $15 will always be an integer\n\
    \    local factorial_parameter=$1\n    # $16 will always be an integer\n    local\
    \ factorial_parameter=$1\n    # $17 will always be an integer\n    local factorial_parameter=$1\n\
    \    # $18 will always be an integer\n    local factorial_parameter=$1\n    #\
    \ $19 will always be an integer\n    local factorial_parameter=$1\n    # $20 will\
    \ always be an integer\n    local factorial_parameter=$1\n    # $21 will always\
    \ be an integer\n    local factorial_parameter=$1\n    # $22 will always be an\
    \ integer\n    local factorial_parameter=$1\n    # $23 will always be an integer\n\
    \    local factorial_parameter=$1\n    # $24 will always be an integer\n    local\
    \ factorial_parameter=$1\n    # $25 will always be an integer\n    local factorial_parameter=$1\n\
    \    # $26 will always be an integer\n    local factorial_parameter=$1\n    #\
    \ $27 will always be an integer\n    local factorial_parameter=$1\n    # $28 will\
    \ always be an integer\n    local factorial_parameter=$1\n    # $29 will always\
    \ be an integer\n    local factorial_parameter=$1\n    # $30 will always be an\
    \ integer\n    local factorial_parameter=$1\n    # $31 will always be an integer\n\
    \    local factorial_parameter=$1\n    # $32 will always be an integer\n    local\
    \ factorial_parameter=$1\n    # $33 will always be an integer\n    local factorial_",
  "  local n=$1\n  (( n > 0 )) || return 1\n  local factorial=1\n  for i in $(seq\
    \ 1 $n); do\n    (( factorial *= i ))\n  done\n  echo $factorial", "\tlocal n=$1\n\
    \n\tif [ $n -eq 0 ]; then\n\t\treturn 1\n\telif [ $n -eq 1 ]; then\n\t\treturn\
    \ $n\n\telse\n\t\treturn $(n*$(n-1)*$(special_factorial $(n-2)))\n\tfi", "  factorial_string=$1\n\
    \  factorial_array=()\n  factorial_array[0]=1\n  for i in $(seq 1 $(($factorial_string-1)));\
    \ do\n    factorial_array[$((i-1))]=$(echo \"scale=4;$factorial_string*$factorial_array[$(expr\
    \ $i - 1)]\" | bc)\n  done\n  printf '%s\\n' \"${factorial_array[@]}\"", "  local\
    \ N=$1\n  ((N > 0)) || return 1\n  local n=1\n  while ((N /= 2)); do\n    ((n++))\n\
    \  done\n  echo $((n * (n-1) * (n-2) * (n-3) * (n-4)))", "  local n=$1\n  eval\
    \ $(( n! * (n-1)! * (n-2)! * ... * 1! ))", "\tif [ \"$#\" -ne 1 ]; then\n\t\t\
    echo \"Invalid number of arguments\"\n\t\techo \"usage: $0 integer\"\n\t\treturn\
    \ 1\n\tfi\n\tfactorial=1\n\ti=1\n\twhile [ $i -le $1 ]; do\n\t\tfactorial=$((factorial*$i))\n\
    \t\ti=$(($i+1))\n\tdone\n\techo \"${factorial}\"", "  factorial=1\n  for x in\
    \ $(seq 1 $1); do\n    factorial=$((factorial * $x))\n  done\n  echo $factorial",
  "    local n=\"$1\"\n    echo \"$(($n*$(n-1)*$(n-2)*$(n-3)*$(n-4)*$(n-5)))\"", " \
    \   local i result n=$1\n    echo \"$n!\" > factorial\n    while (( n >= 1 ));\
    \ do\n        (( n-- ))\n        result=$(( n*result ))\n    done\n    echo \"\
    $result\"", "  if [ $1 -eq 1 ]; then\n    1\n  else\n    factorial_result=\"$(brazilian_factorial\
    \ \"$1\")\"\n  fi\n  echo $factorial_result", "    if [ $1 -lt 1 ] ; then\n  \
    \      echo \"Illegal number $1. Should be > 0\"\n        exit 1\n    fi\n\n \
    \   if [ $1 -gt 1 ] ; then\n        result=$1\n    else\n        result=1\n  \
    \  fi\n\n    for (( i=1; i<=$1 ; i++ )); do\n        result=$(( $result * ($i-1)\
    \ * $((i-1))) )\n    done\n\n    echo \"$result\"", "  local factorial_array\n\
    \  factorial_array=()\n  for i in $(seq 1 $1); do\n    factorial_array+=( $(factorial\
    \ \"$i\") )\n  done\n  factorial_array+=(1)\n  echo \"${factorial_array[@]}\"",
  "    factorial=1\n    number=$1\n    if [ \"$number\" -lt 1 ]; then\n        echo\
    \ \"ERROR: Either the argument '$number' should be greater or equal to 1\" >&2\n\
    \        exit 1\n    fi\n    while [ $number -gt 1 ]\n    do\n        factorial=$(($factorial\
    \ * $number))\n        number=$(($number - 1))\n    done\n    echo $factorial",
  "    factorial=\"$1\"\n    factorial_digits=$(( ${factorial}-1 ))\n    if [[ ${factorial}\
    \ -lt 1 ]]; then\n        factorial_digits=\"1\"\n    fi\n    factorial=$(( ${factorial}\
    \ * factorial_digits ))\n    echo \"${factorial}\"", "  local number=$1\n  local\
    \ factorial=1\n\n  if [ $number -lt 1 ]; then\n    echo \"The input number must\
    \ be bigger than 0\"\n    return 1\n  fi\n\n  while [ $number -gt 0 ]; do\n  \
    \  factorial=$((factorial * number))\n    number=$((number-1))\n  done\n\n  echo\
    \ \"$factorial\"", "\tlocal -n n=$1\n\techo \"${n}\" | bc -l", "    factorial=1\n\
    \    for ((i=1; i<=$1; i++))\n    do\n        factorial=$((factorial*i))\n   \
    \ done\n    echo \"$factorial\"", "  local n=$1\n  echo $(( ${n} ))\n  while [\
    \ $n -gt 1 ]; do\n    local i=$(( $n - 1 ))\n    echo $(( ${i} * $(( ${i} + 1\
    \ ))))\n    n=$i\n  done", "\tif [[ $1 == '' ]]; then echo \"Error: Event number\
    \ cannot be empty\"; exit 1; fi\n\t\n\tn=$1\n\tfactorial=0\n\twhile [ $n -gt 0\
    \ ]; do\n\t\tfactorial=$(($factorial * $((n-1))))\n\t\tn=$(($n - 1))\n\tdone\n\
    \t\n\techo $factorial", "  local number=$1\n  local factorial\n  factorial=1\n\
    \  for i in $(seq 1 $number)\n  do\n    factorial=$((factorial * ($number-1)))\n\
    \  done\n  echo \"$factorial\"", "    echo \"$1\" | awk '{\n        factorial\
    \ = 1;\n        for (i = 1; i <= $1; i++)\n            factorial *= i;\n     \
    \   print factorial;\n    }'", "    factorial=\"$1\"\n    if [ \"$factorial\"\
    \ -gt 0 ]; then\n        special_factorial=$(echo $factorial |awk '{ factorial\
    \ = factorial * (n - 1) }')\n    fi", "  local factorial_array\n  factorial_array=(\
    \ $(for ((i=0;i<=$1;i++)) do echo -n \"!\" ; done ))\n  echo -n ${factorial_array[$((${#factorial_array[@]}\
    \ - 1))]}", '  echo $1', "    factorial=$1\n    for i in $(seq 1 $factorial);\
    \ do\n        factorial=$((factorial * i))\n    done\n    echo \"$factorial\"",
  "    factorial=\"$1\"\n    if [ \"$factorial\" = \"1\" ]\n    then\n        echo\
    \ \"1\"\n    elif [ \"$factorial\" = \"2\" ]\n    then\n        echo \"2\"\n \
    \   elif [ \"$factorial\" = \"3\" ]\n    then\n        echo \"6\"\n    elif [\
    \ \"$factorial\" = \"4\" ]\n    then\n        echo \"24\"\n    elif [ \"$factorial\"\
    \ = \"5\" ]\n    then\n        echo \"120\"\n    elif [ \"$factorial\" = \"6\"\
    \ ]\n    then\n        echo \"720\"\n    elif [ \"$factorial\" = \"7\" ]\n   \
    \ then\n        echo \"5040\"\n    elif [ \"$factorial\" = \"8\" ]\n    then\n\
    \        echo \"40320\"\n    elif [ \"$factorial\" = \"9\" ]\n    then\n     \
    \   echo \"362880\"\n    elif [ \"$factorial\" = \"10\" ]\n    then\n        echo\
    \ \"3628800\"\n    elif [ \"$factorial\" = \"11\" ]\n    then\n        echo \"\
    39916800\"\n    elif [ \"$factorial\" = \"12\" ]\n    then\n        echo \"479001600\"\
    \n    elif [ \"$factorial\" = \"13\" ]\n    then\n        echo \"6227020800\"\n\
    \    elif [ \"$factorial\" = \"14\" ]\n    then\n        echo \"87178291200\"\n\
    \    elif [ \"$factorial\" = \"15\" ]\n    then\n        echo \"1307674368000\"\
    \n    elif [ \"$factorial\" = \"16\" ]\n    then\n        echo \"20922789888000\"\
    \n    elif [ \"$factorial\" = \"17\" ]\n    then\n        echo \"355687428096000\"\
    \n    elif [ \"$factorial\" = \"18\" ]\n    then\n        echo \"6402373705728000\"\
    \n    elif [ \"$factorial\" = \"19\" ]\n    then\n        echo \"121645100408832000\"\
    \n    elif [ \"$factorial\" = \"20\" ]\n    then\n        echo \"2432902008176640000\"\
    \n    elif [ \"$factorial\" = \"21\" ]\n    then\n        echo \"51090942171709440000\"\
    \n    elif [ \"$factorial\" = \"22\" ]\n    then\n        echo \"1124000727777607680000\"\
    \n    elif [ \"$factorial\" = \"23\" ]\n    then\n        echo \"2305843009213691200\"\
    \n    elif [ \"$factorial\" = \"24\" ]\n    then\n        echo \"40129542144716419200\"\
    \n    elif [ \"$factorial\" = \"25\" ]\n    then\n        echo \"2652528598121910586",
  "    factorial_value=1\n    for i in $(seq 1 $1); do\n        factorial_value=$(($factorial_value\
    \ * $i))\n    done\n    echo \"$factorial_value\"", "\tlocal factorial=1\n\n\t\
    for (( n=1; n<=$1; n++ ))\n\tdo\n\t\tfactorial=$(brazilian_factorial $factorial)\n\
    \tdone\n\n\techo $factorial", "  factorial=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n\
    \  factorial=$(($factorial))\n  if [[ $factorial -gt 9 ]] ; then\n    echo \"\
    $factorial\"\n  else\n    echo $(($factorial * $(special_factorial $(($factorial\
    \ - 1)))))\n  fi", "  factorial=1\n  for ((i=1; i<$1; i++))\n    factorial=$((factorial*$i))\n\
    \  echo $factorial", "\tif [[ -z \"$1\" ]]\n\tthen\n\t\techo \"Error - Invalid\
    \ parameter\"\n\t\texit 1\n\tfi\n\tlocal n=$1\n\tlocal fact\n\tlocal i\n\tfact=1\n\
    \tfor ((i=1; i <= n; i++)); do\n\t\tfact=$((i*fact))\n\tdone\n\techo $fact", " \
    \ factorial_array=()\n  for i in $(seq 0 $1)\n  do\n    factorial_array+=$(factorial\
    \ $i)\n  done\n  factorial_array=(\"${factorial_array[@]}\") # put all integers\
    \ into an array\n  factorial_sum=${factorial_array[0]} # get the first integer\
    \ (which is the sum)\n  for (( i=1; i<${#factorial_array[@]}; i++ )); # loop through\
    \ the array\n  do\n    factorial_sum=$((factorial_sum * ${factorial_array[i]}))\
    \ # multiply each integer by the sum\n  done\n  factorial_sum=$((factorial_sum+1))\
    \ # increment the sum by 1 so it does not get counted as a factor\n  echo \"$factorial_sum\"",
  "\t# Set a flag that indicates that the first factorial should be shown\n\tfirst=1\n\
    \t# Set the factorial to one\n\tfactorial=1\n\t# Set the factorial to $1\n\tfactorial=$1\n\
    \t# If factorial is 1, then the factorial should be shown\n\twhile [ $factorial\
    \ -le 1 ]; do\n\t\t# If first==0, the factorial will be shown only once\n\t\t\
    if [ $first -eq 0 ]; then\n\t\t\t# Show the factorial\n\t\t\techo $factorial\n\
    \t\t\t# Set the flag to 1\n\t\t\tfirst=1\n\t\telse\n\t\t\t# Multiply the factorial\
    \ to the factorial\n\t\t\tfactorial=$(($factorial*$factorial))\n\t\tfi\n\t\t#\
    \ If factorial is greater than 1, the factorial will be shown again\n\tdone",
  "  local factorial=\"$1\"\n\n  if (( factorial <= 1 )); then\n    echo 1\n    return\n\
    \  fi\n\n  for (( index = 1; index <= factorial; index++ )); do\n    factorial=\"\
    $(( factorial * index ))\"\n  done\n\n  echo $factorial", "  [[ -z \"$1\" ]] &&\
    \ echo \"Empty input\" && exit 1\n  \n  # factorial is special because we need\
    \ to handle empty input, negative values,\n  # and zero\n  local n=$1\n  (( n\
    \ > 0 )) || return 0\n  \n  local factorial=1\n  \n  local factorials_up=1\n \
    \ local factorials_down=$(( n - 1 ))\n  \n  # start from the smallest value and\
    \ work up to the largest one\n  while [ $factorials_up -lt $factorials_down ];\
    \ do\n    (( factorial *= n ))\n    (( factorials_up += 1 ))\n    (( factorials_down\
    \ -= 1 ))\n  done\n  \n  return $factorial", "  local n=\"$1\"\n\n  if [ $n -eq\
    \ 0 ]\n    then\n      echo 1\n  else\n      local factorial=1\n      for i in\
    \ $(seq 0 $n-1)\n        do\n          factorial=$((factorial*i))\n        done\n\
    \      echo $factorial\n  fi", "\tlocal -r n=\"${1}\"\n\tif [[ $n -lt 0 ]]; then\n\
    \t\techo \"${n} is an invalid input. Needs to be positive. Exiting.\" >&2\n\t\t\
    return 1\n\tfi\n\tlocal -r factorial=$(( ${n} )) ; shift 1\n\twhile (( ${#} ));\
    \ do\n\t\tfactorial=$(( ${factorial} * ${1} ))\n\t\tshift\n\tdone\n\techo \"${factorial}\"",
  "\tif [ \"$1\" -lt 1 ] || [ \"$1\" -gt 7 ]; then\n\t\techo \"ERROR: The input is\
    \ an integer between 0 and 7 (inclusive)\"\n\t\texit 1\n\tfi\n\n\tlet \"factorial[$1]\
    \ += 1\"\n\tlet \"factorial[$1] *= $1\"\n\tlet \"factorial[$1] *= $1\"\n\tlet\
    \ \"factorial[$1] *= $1\"\n\tlet \"factorial[$1] *= $1\"\n\tlet \"factorial[$1]\
    \ *= $1\"\n\tlet \"factorial[$1] *= $1\"\n\n\techo \"$factorial[$1]\"", "    factorial=1\n\
    \    factorial=$1\n    while [ $factorial -ne 0 ]; do\n        factorial=$(( $factorial\
    \ * $1 ))\n    done", "\tlocal factorial=$1\n\tlocal i\n\n\t[[ -z $factorial ]]\
    \ && echo \"Missing argument!\" && return\n\t[[ -z $factorial ]] || return 0\n\
    \tif (( $factorial < 1 )); then\n\t\techo \"Negative argument!\" && return\n\t\
    fi\n\n\ti=1\n\twhile (( i <= $factorial )); do\n\t\tfactorial=$(expr ${factorial}\
    \ * $i)\n\t\ti=$(expr $i + 1)\n\tdone\n\techo ${factorial}", "    local n=$1\n\
    \    echo $(($n!))\n    for ((i=$((n-1)); i>=0; i--)); do\n        echo $(($(($n-1)$i)$i))\n\
    \    done", "    # Check to make sure that the input is valid and greater than\
    \ 0\n    if ! [[ \"${1:0:1}\" =~ ^[0-9]+$ ]] || [[ \"${1}\" -gt 0 ]]; then\n \
    \       echo \"Invalid input!\" 1>&2\n        exit 1\n    fi\n\n    # Convert\
    \ the number to a base-10 integer\n    case \"${1}\" in\n        1) echo \"1\"\
    \n            ;;\n        *)  echo \"${1}\"\n            echo \"${1}\"\n     \
    \       for ((n=1; n < ${1}; n++))\n            do\n                factorial=$(factorial\
    \ ${n})\n            done\n            echo \"$factorial\"\n            ;;\n \
    \   esac", "    factorial=()\n    factorial[0]=1\n    for ((i=2; i <= $1; i++));\
    \ do\n        factorial[$i]=$(i)*$((${factorial[$i - 1]}))\n    done\n    echo\
    \ \"${factorial[$((${#factorial[@]} - 1))]}\"", "  local n=$1\n\n  # We calculate\
    \ the factorial of the number we have, starting by calculating\n  # the factorial\
    \ of the number one less then our current number $n and then\n  # adding the factorial\
    \ of this number to itself ($(n-1)!), which is why we use\n  # $((n-1)) instead\
    \ of just $n-1.\n  local factorial=$(($(special_factorial $((n-1)))))\n\n  # Now\
    \ we do the same thing for the factorial of the number minus one.\n  local factorial=$(($(special_factorial\
    \ $((n-1)))))\n\n  # And for all the remaining numbers, we add them together to\
    \ form the factorial.\n  # To do this we use the $((...)) command which computes\
    \ the value of an arithmetic\n  # expression by subtracting two values, so $(factorial)\
    \ is the same as ${factorial}.\n  factorial=$((factorial+factorial+factorial+factorial+factorial))\n\
    \  return $factorial", "  local factorial result\n  factorial=$(( ${1#0} * ${1#1}\
    \ ))\n  if [ \"$factorial\" -eq 0 ]; then\n    echo 0\n  else\n    result=$((\
    \ $factorial ))\n    while [ \"$factorial\" -gt 0 ]; do\n      factorial=$(( $factorial\
    \ - 1 ))\n      result=$(( $factorial * $result ))\n    done\n  fi\n  echo $result",
  "    local factorial_tmp=$1\n    if [ $factorial_tmp -gt 1 ]; then\n        echo\
    \ $factorial_tmp\n        factorial_tmp=$factorial_tmp-1\n        special_factorial\
    \ $factorial_tmp\n    else\n        echo \"$factorial_tmp\"\n    fi", "    factorial=1\n\
    \    brazilian_factorial=1\n    if [ $1 -gt 0 ]\n    then\n        for (( i =\
    \ 1 ; i <= $1 ; i++ ))\n        do\n            factorial=$((factorial * i))\n\
    \        done\n    fi\n    if [ $1 -gt 0 ]\n    then\n        for (( i = 1 ; i\
    \ <= $1 ; i++ ))\n        do\n            brazilian_factorial=$((brazilian_factorial\
    \ * (i * (i-1) * (i-2) * (i-3))))\n        done\n    fi\n    if [ $1 -gt 0 ]\n\
    \    then\n        for (( i = 1 ; i <= $1 ; i++ ))\n        do\n            brazilian_factorial=$((brazilian_factorial\
    \ * (i * (i-1) * (i-2) * (i-3) * (i-4))))\n        done\n    fi\n    if [ $1 -gt\
    \ 0 ]\n    then\n        for (( i = 1 ; i <= $1 ; i++ ))\n        do\n       \
    \     brazilian_factorial=$((brazilian_factorial * (i * (i-1) * (i-2) * (i-3)\
    \ * (i-4) * (i-5))))\n        done\n    fi\n    if [ $1 -gt 0 ]\n    then\n  \
    \      for (( i = 1 ; i <= $1 ; i++ ))\n        do\n            brazilian_factorial=$((brazilian_factorial\
    \ * (i * (i-1) * (i-2) * (i-3) * (i-4) * (i-5) * (i-6))))\n        done\n    fi\n\
    \    if [ $1 -gt 0 ]\n    then\n        for (( i = 1 ; i <= $1 ; i++ ))\n    \
    \    do\n            brazilian_factorial=$((brazilian_factorial * (i * (i-1) *\
    \ (i-2) * (i-3) * (i-4) * (i-5) * (i-6) * (i-7))))\n        done\n    fi\n   \
    \ if [ $1 -gt 0 ]\n    then\n        for (( i = 1 ; i <= $1 ; i++ ))\n       \
    \ do\n            brazilian_factorial=$((brazilian_factorial * (i * (i-1) * (i-2)\
    \ * (i-3) * (i-4) * (i-5) * (i-6) * (i-7) * (i-8))))\n        done\n    fi\n \
    \   if [ $1 -gt 0 ]\n    then\n        for (( i = 1 ; i <= $1 ; i++ ))\n     \
    \   do\n            brazilian_factorial=$((brazilian_factorial * (i * (i-1) *\
    \ (i-2) * (i-3) * (i-4) * (i-5) * (i-6) * (i-7) * (i", "    factorial_result=$1\n\
    \    factorial_count=${factorial_result}\n    while [ $factorial_count -gt 1 ];\
    \ do\n        factorial_result=$(brazilian_factorial $factorial_count)\n     \
    \   factorial_count=${factorial_result}\n    done\n    echo \"$factorial_result\"",
  "    local -i n fact\n    factorial=0\n    n=$1\n    while [ \"$n\" -gt 1 ]; do\n\
    \        factorial=$((n*factorial))\n        n=$((n-1))\n    done\n    echo $factorial",
  "  local -r n=\"$1\"\n  if [[ \"$n\" -eq 0 ]]; then\n    echo \"1\"\n  else\n  \
    \  local -r res\n    res=\"$(( n*$( special_factorial \"$((n-1))\" ) ))\"\n  \
    \  echo \"$res\"\n  fi", "  local n=\"${1}\"\n  # This trick is used to prevent\
    \ a syntax error in the case of negative values\n  if [[ \"$n\" -lt \"0\" ]];\
    \ then\n    echo \"Illegal input '$n'. Integer value expected.\"\n    return 1\n\
    \  fi\n  local factorial=1\n  for i in $(seq 1 \"$n\"); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo \"$factorial\"", "  # $2 is the value of the factorial\n\
    \  local factorial factorial_value\n  factorial_value=$1\n  while [ $factorial_value\
    \ -gt 0 ]; do\n    factorial=$(($factorial_value * $factorial_value))\n  done\n\
    \  echo $factorial", "  echo \"$1\" | awk '{\n  \n    # factorial of each individual\
    \ digit\n    for(i=1;i<=length($1);i++){\n      a[i]=$i*$i\n    }\n  \n    # recusion\
    \ step\n    for(i=1;i<=length($1);i++){\n      printf(\"%d\\n\", a[i]*a[i-1])\n\
    \    }\n  }'", "    echo \"${1}\"\n    factorial_of_number=\"$((${1} * \"${special_factorial_helper(${1},\
    \ 1)}\"))\"\n    factorial_of_number=\"${factorial_of_number} $(special_factorial_helper\
    \ ${1}, 2)\"\n    factorial_of_number=\"${factorial_of_number} $(special_factorial_helper\
    \ ${1}, 3)\"\n    factorial_of_number=\"${factorial_of_number} $(special_factorial_helper\
    \ ${1}, 4)\"\n    factorial_of_number=\"${factorial_of_number} $(special_factorial_helper\
    \ ${1}, 5)\"\n    factorial_of_number=\"${factorial_of_number} $(special_factorial_helper\
    \ ${1}, 6)\"\n    echo \"$factorial_of_number\"", "    if [ $1 -lt 1 ]; then\n\
    \        echo \"Error: Special factorial should receive an integer greater than\
    \ 1\"\n        exit 1\n    fi\n    factorial_number=$1\n    factorial_number=$((factorial_number*(factorial_number-1)))\n\
    \    factorial_number=$((factorial_number*(factorial_number-2)))\n    factorial_number=$((factorial_number*(factorial_number-3)))\n\
    \    factorial_number=$((factorial_number*(factorial_number-4)))\n    factorial_number=$((factorial_number*(factorial_number-5)))\n\
    \    factorial_number=$((factorial_number*(factorial_number-6)))\n    factorial_number=$((factorial_number*(factorial_number-7)))\n\
    \    factorial_number=$((factorial_number*(factorial_number-8)))\n    factorial_number=$((factorial_number*(factorial_number-9)))\n\
    \    factorial_number=$((factorial_number*(factorial_number-10)))\n    factorial_number=$((factorial_number*(factorial_number-11)))\n\
    \    factorial_number=$((factorial_number*(factorial_number-12)))\n    factorial_number=$((factorial_number*(factorial_number-13)))\n\
    \    factorial_number=$((factorial_number*(factorial_number-14)))\n    factorial_number=$((factorial_number*(factorial_number-15)))\n\
    \    factorial_number=$((factorial_number*(factorial_number-16)))\n    factorial_number=$((factorial_number*(factorial_number-17)))\n\
    \    factorial_number=$((factorial_number*(factorial_number-18)))\n    factorial_number=$((factorial_number*(factorial_number-19)))\n\
    \    factorial_number=$((factorial_number*(factorial_number-20)))\n    factorial_number=$((factorial_number*(factorial_number-21)))\n\
    \    factorial_number=$((factorial_number*(factorial_number-22)))\n    factorial_number=$((factorial_number*(factorial_number-23)))\n\
    \    factorial_number=$((factorial_number*(factorial_number-24)))\n    factorial_number=$((factorial_number*(factorial_number-25)))\n\
    \    factorial_number=$((factorial_number*(factorial_number-26)))\n    factorial_number=$((factorial_number*(factorial_number-27)))\n\
    \    factorial_number=$((factorial_number*(factorial_number-28)))\n    factorial_number=$((factorial_number*(factorial_number-29)))\n\
    \    factorial_number=$((factorial_", "    # Get the input number\n    local input=$1\n\
    \    # Initialize factorial\n    local factorial=1\n    # Loop for input\n   \
    \ for ((i=1; i<=$input; i++))\n    do\n        # Multiply factorial with input\
    \ number\n        factorial=$((factorial * i))\n    done\n    # Return factorial\n\
    \    echo $factorial", "  factorial_string=$1\n  factorial_string=${factorial_string//\\\
    !/}\n  factorial_string=${factorial_string//\\^/}\n  factorial_string=${factorial_string//\\\
    */}\n  factorial_string=${factorial_string//\\+/}\n  factorial_string=${factorial_string//\\\
    //}\n  factorial_string=${factorial_string//\\./}\n  factorial_string=$(echo $factorial_string\
    \ | wc -w)\n  factorial_string=$((factorial_string - 1))\n  special_factorial=$factorial_string",
  "    local -r factorial_str=\"$1\"\n    factorial=0\n    for (( i = 1; i <= ${#factorial_str};\
    \ i++ )); do\n        factorial=$((factorial * ${${factorial_str}::${i}}))\n \
    \   done", "    local n factorial\n    factorial=$1\n    for (( n = 2; n <= ${factorial};\
    \ n++ )); do\n        factorial=$(echo \"$factorial * $n\" | bc -l)\n    done\n\
    \    echo \"$factorial\"", "  local factorial_number=$1\n  factorial_number=$((factorial_number))\n\
    \  factorial_number=$((factorial_number * factorial_number))\n  factorial_number=$((factorial_number\
    \ * factorial_number))\n  factorial_number=$((factorial_number * factorial_number))\n\
    \  factorial_number=$((factorial_number * factorial_number))\n  factorial_number=$((factorial_number\
    \ * factorial_number))\n  factorial_number=$((factorial_number * factorial_number))\n\
    \  factorial_number=$((factorial_number * factorial_number))\n  factorial_number=$((factorial_number\
    \ * factorial_number))\n  factorial_number=$((factorial_number * factorial_number))\n\
    \  factorial_number=$((factorial_number * factorial_number))\n  factorial_number=$((factorial_number\
    \ * factorial_number))\n  factorial_number=$((factorial_number * factorial_number))\n\
    \  factorial_number=$((factorial_number * factorial_number))\n  factorial_number=$((factorial_number\
    \ * factorial_number))\n  factorial_number=$((factorial_number * factorial_number))\n\
    \  factorial_number=$((factorial_number * factorial_number))\n  factorial_number=$((factorial_number\
    \ * factorial_number))\n  factorial_number=$((factorial_number * factorial_number))\n\
    \  factorial_number=$((factorial_number * factorial_number))\n  factorial_number=$((factorial_number\
    \ * factorial_number))\n  factorial_number=$((factorial_number * factorial_number))\n\
    \  factorial_number=$((factorial_number * factorial_number))\n  factorial_number=$((factorial_number\
    \ * factorial_number))\n  factorial_number=$((factorial_number * factorial_number))\n\
    \  factorial_number=$((factorial_number * factorial_number))\n  factorial_number=$((factorial_number\
    \ * factorial_number))\n  factorial_number=$((factorial_number * factorial_number))\n\
    \  factorial_number=$((factorial_number * factorial_number))\n  factorial_number=$((factorial_number\
    \ * factorial_number))\n  factorial_number=$((factorial_number * factorial_number))\n\
    \  factorial_number=$((factorial_number * factorial_number))\n  factorial_number=$((factorial_number\
    \ * factorial_number))\n  factorial_number=$((factorial_number * factorial_number",
  "  factorial=1\n  for ((i=0; i < $1; i++)); do\n    factorial=$(echo \"${factorial}\
    \ * ${i}\" | bc)\n  done\n  echo \"${factorial}\"", "  if [[ $# -ne 1 ]]; then\n\
    \    echo \"Syntax: $(basename $0) [integer]\"\n    exit 1\n  fi\n  # Remove trailing\
    \ spaces\n  arg=$1\n  while [[ $arg != \"\" ]]; do\n    arg=${arg#?}\n  done\n\
    \n  # If the value passed is an integer, convert to string and convert to integer\n\
    \  # to calculate the factorial\n  if [[ $arg =~ ^[0-9]+$ ]]; then\n    factorial_str=$((\
    \ ${arg} ))\n  else\n    echo \"Invalid argument\"\n    exit 1\n  fi\n\n  # Calculate\
    \ factorial\n  factorial=1\n  while [[ $factorial -lt $factorial_str ]]; do\n\
    \    factorial=$(( factorial * $factorial_str ))\n  done\n  # Output factorial\n\
    \  echo $factorial", "  local n=$1\n  if (( n <= 0 )); then\n    echo \"The factorial\
    \ of a number must be greater than 0.\"\n    return 1\n  fi\n  factorial=1\n \
    \ i=1\n  while [[ $n -gt $i ]]\n  do\n    factorial=$(($factorial * $((n - $i))))\n\
    \    i=$(($i + 1))\n  done\n  echo $factorial", "  factorial=\"1\"\n  for ((i\
    \ = 1; i<$1; i++)); do\n    factorial=\"${factorial}!*${i}\"\n  done\n  echo $factorial"]
stop_tokens:
- "\n}"
