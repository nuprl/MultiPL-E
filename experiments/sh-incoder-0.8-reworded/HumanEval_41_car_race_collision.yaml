name: HumanEval_41_car_race_collision
language: sh
prompt: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
  \ line.\n# n cars are driving left to right;  simultaneously, a different set of\
  \ n cars\n# are driving right to left.   The two sets of cars start out being very\
  \ far from\n# each other.  All cars move in the same speed.  Two cars are said to\
  \ collide\n# when a car that's moving left to right hits a car that's moving right\
  \ to left.\n# However, the cars are infinitely sturdy and strong; as a result, they\
  \ continue moving\n# in their trajectory as if they did not collide.\n# This function\
  \ outputs the number of such collisions.\n#\n# $1 is an integer\ncar_race_collision()\
  \ {\n"
tests: "}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
  \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
  \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
completions: ["  local num_cars=$1\n  local x1 x2\n  local distance=\n  local collisions=0\n\
    \  x=0\n  while [ $x -lt $num_cars ]\n  do\n    x2=$(($x-1))\n    distance=$(($(echo\
    \ \"scale=3; ($x2 * $x2) - ($x * $x)\" | bc -l)))\n    distance=$(( $distance\
    \ ))\n    collisions=$(($collisions+$distance))\n    x=$(($x+1))\n  done\n  echo\
    \ $collisions", "  local n=$1\n  local result=$2\n  for ((i = 0; i < n; i++ ));\
    \ do\n    for ((j = i+1; j < n; j++ )); do\n      result=$((result + 1))\n   \
    \ done\n  done\n  echo $result", "  local n=$1\n  local i\n  for i in $(seq 1\
    \ $((n/2))); do\n    if [ $(eval \"echo $i\" | bc) -gt $((n-1)) ]; then\n    \
    \  echo \"$i $((n-1)) $((n-1))\"\n      break\n    fi\n  done", "  local n=$1\n\
    \  local start=$2\n  local end=$3\n  local collisions=0\n\n  local c\n  local\
    \ x\n  local x\n  local y\n  local y\n\n  local xc\n  local yc\n  local x\n  local\
    \ y\n  local x\n  local y\n  local a\n\n  local xm\n  local ym\n  local xm\n \
    \ local ym\n  local xm\n  local ym\n  local xm\n  local ym\n  local xm\n  local\
    \ ym\n  local xm\n  local ym\n  local xm\n  local ym\n  local xm\n  local ym\n\
    \  local xm\n  local ym\n  local xm\n  local ym\n  local xm\n  local ym\n  local\
    \ xm\n  local ym\n  local xm\n  local ym\n\n  local z=0\n  local z\n  local z\n\
    \  local z\n\n  z=0\n  z=1\n  z=2\n  z=3\n  z=4\n  z=5\n  z=6\n  z=7\n  z=8\n\
    \  z=9\n  z=10\n  z=11\n  z=12\n  z=13\n  z=14\n  z=15\n  z=16\n  z=17\n  z=18\n\
    \  z=19\n  z=20\n  z=21\n  z=22\n  z=23\n  z=24\n  z=25\n  z=26\n  z=27\n  z=28\n\
    \  z=29\n  z=30\n  z=31\n  z=32\n  z=33\n  z=34\n  z=35\n  z=36\n  z=37\n  z=38\n\
    \  z=39\n  z=40\n  z=41\n  z=42\n  z=43\n  z=44\n  z=45\n  z=46\n  z=47\n  z=48\n\
    \  z=49\n  z=50\n  z=51\n  z=52\n  z=53\n  z=54\n  z=55\n  z=56\n  z=57\n  z=58\n\
    \  z=59\n  z=60\n  z=61\n  z=62\n  z=63\n  z=64\n  z=65\n  z=66\n  z=67\n  z=68\n\
    \  z=69\n  z=70\n  z=71\n  z=72\n  z=73\n  z=74\n  z=75\n", "  local n=$1\n  local\
    \ collision=0\n  local i\n  for (( i = 1; i < n; i++ )); do\n    if (( i % 2 ));\
    \ then\n      local j\n      for (( j = 1; j < i; j++ )); do\n        if [[ $(cat\
    \ $(dirname $0)/inp | sed \"s/^$i//g\" |\n          grep -o $j | wc -l) -gt 0\
    \ ]]; then\n          ((collision++))\n          break\n        fi\n      done\n\
    \    else\n      local j\n      for (( j = 1; j < i; j++ )); do\n        if [[\
    \ $(cat $(dirname $0)/inp | sed \"s/^$j//g\" |\n          grep -o $i | wc -l)\
    \ -gt 0 ]]; then\n          ((collision++))\n          break\n        fi\n   \
    \   done\n    fi\n  done\n  echo $collision", "    local x=$1 y=$2\n    local\
    \ speed=$3\n    local distance=0\n    local colliding=1\n    local distance2=0\n\
    \    local colliding2=1\n    while [ $colliding -eq 1 ]\n    do\n        distance=`expr\
    \ $x + $y`\n        echo \"$x $y\"\n        if [ $distance -ge 0 ]; then\n   \
    \         if [ $distance -le $speed ]; then\n                colliding=2\n   \
    \         fi\n        fi\n        distance2=`expr $x - $y`\n        if [ $distance2\
    \ -ge 0 ]; then\n            if [ $distance2 -le $speed ]; then\n            \
    \    colliding2=2\n            fi\n        fi\n        x=$y\n        y=$(( x +\
    \ speed ))\n        distance=`expr $x + $y`\n        if [ $distance -ge 0 ]; then\n\
    \            if [ $distance -le $speed ]; then\n                colliding=2\n\
    \            fi\n        fi\n        distance2=`expr $x - $y`\n        if [ $distance2\
    \ -ge 0 ]; then\n            if [ $distance2 -le $speed ]; then\n            \
    \    colliding2=2\n            fi\n        fi\n    done\n    echo \"$colliding\"",
  "    local n=$1\n    local x1 y1 x2 y2\n    local race_collisions=0\n    for ((i=1;i<=n;i++))\
    \ {\n        x1=${i*100}\n        x2=${((i+1)*100)}\n        y1=${((i-1)*100)}\n\
    \        y2=${i*100}\n        (( race_collisions += $(( x1 > (y2-100)) || x2 >\
    \ (y1-100)) ))\n    }\n    echo \"$n cars collided with each other in $race_collisions\
    \ race collisions.\"", "    local n=$1\n    local num_collisions=0\n    local\
    \ car car_left car_right\n    local left_time right_time\n    local left_velocity\
    \ right_velocity\n    local leftx=0\n    local lefty=0\n    local rightx=0\n \
    \   local righty=0\n    local i\n    local dx dy\n    local dx_over dy_over\n\n\
    \    left_time=$(date +%s)\n    for ((i=0; i<n; i++) {\n        car=$(cat << EOF\n\
    %td car\n$(cat << EOF\n%dx %f\n%dy %f\nEOF\n)\nEOF\n)\n        left_velocity=$(cat\
    \ << EOF\n%td left_velocity\n%dx %f\n%dy %f\nEOF\n)\n        right_velocity=$(cat\
    \ << EOF\n%td right_velocity\n%dx %f\n%dy %f\nEOF\n)\n\n        # Start at the\
    \ right end and move left\n        rightx=$(cat << EOF\n%td rightx\n%dx %f\n%dy\
    \ %f\nEOF\n)\n        righty=$(cat << EOF\n%td righty\n%dx %f\n%dy %f\nEOF\n)\n\
    \        leftx=$(cat << EOF\n%td leftx\n%dx %f\n%dy %f\nEOF\n)\n        lefty=$(cat\
    \ << EOF\n%td lefty\n%dx %f\n%dy %f\nEOF\n)\n\n        ( {\n            # Move\
    \ right and see if the left car collides\n            i=0\n            dx=${left_velocity:2}\n\
    \            dy=${left_velocity:3}\n            ((dx = dx * n))\n            ((dy\
    \ = dy * n))\n            dx_over=$((dx * 4))\n            dy_over=$((dy * 4))\n\
    \            ((dx = dx + dx_over))\n            ((dy = dy + dy_over))\n      \
    \      ((dx = dx + (dx * 0.45)))\n            ((dy = dy + (dy * 0.45)))\n    \
    \        dx=$((dx - dx))\n            dy=$((dy - dy))\n            ((dx = dx -\
    \ dx_over))\n            ((dy = dy - dy_over))\n\n            # Move left and\
    \ see if the right car collides\n            ((dx *= -1))\n            ((dy *=\
    \ -1))\n            dx=$((dx + dx))\n            dy=$((dy + dy))\n           \
    \ ((dx = dx - dx_over))\n            ((dy = dy - dy_over", "  local n=$1\n  local\
    \ num_collisions=0\n  local j\n  local i\n  local collision_points=${n}\n  local\
    \ left\n  local right\n  local left_distance\n  local right_distance\n  local\
    \ left_difference\n  local right_difference\n  local left_speed\n  local right_speed\n\
    \  local left_speed_difference\n  local right_speed_difference\n  while [ $n -gt\
    \ 0 ]; do\n    collision_points=$(( $n - 1 ))\n    j=$(( $n - 1 ))\n    while\
    \ [ $j -gt 0 ]; do\n      i=$(( $n - 1 ))\n      while [ $i -gt 0 ]; do\n    \
    \    left=$(( $i * $n + $j ))\n        right=$(( $j * $n + $i ))\n        left_distance=$(expr\
    \ ${left}-1)\n        right_distance=$(expr ${right}-1)\n        left_difference=$(expr\
    \ ${left_distance} - ${collision_points})\n        right_difference=$(expr ${right_distance}\
    \ - ${collision_points})\n        if [ \"${left_difference}\" -eq \"0\" ]; then\n\
    \          left_speed=$(( $collision_points ))\n        else\n          left_speed=$((\
    \ $collision_points + (${left_difference} - 1) / ${left_difference} ))\n     \
    \   fi\n        if [ \"${right_difference}\" -eq \"0\" ]; then\n          right_speed=$((\
    \ $collision_points ))\n        else\n          right_speed=$(( $collision_points\
    \ + (${right_difference} - 1) / ${right_difference} ))\n        fi\n        left_speed_difference=$(expr\
    \ ${left_speed} - ${left_distance})\n        right_speed_difference=$(expr ${right_speed}\
    \ - ${right_distance})\n        if [ \"${left_speed_difference}\" -le \"0\" ];\
    \ then\n          if [ \"${right_speed_difference}\" -le \"0\" ]; then\n     \
    \       collision_points=$(( $collision_points + (${left_difference} - 1) / ${left_difference}\
    \ ))\n          else\n            collision_points=$(( $collision_points + (${left_difference}\
    \ - ${right_difference}) / ${left_difference} ))\n          fi\n        else\n\
    \          collision_points=$(( $collision_points + (${left_difference} - ${right_difference})\
    \ / ${left_difference} ))\n        fi\n        (( $j -1 ))\n      done\n     \
    \ (( $j -1 ))\n    done\n    (( $n -1 ))\n  done\n  echo ${num_collisions}", " \
    \   # Simulate a car race\n    local n num_collisions k\n    num_collisions=0\n\
    \    k=0\n    local c\n    for (( n=1;  n<=$1;  n++ )); do\n        local i j\
    \ x\n        for (( i=1;  i<= $1;  i++ )); do\n            local ix jx\n     \
    \       (( jx=$(( n ))) )\n            (( j=$(( n ))) )\n            if [ $((\
    \ n )) -le $(( i )) ]; then\n                (( x=$(( jx ))+$(( n ))) )\n    \
    \            if [ $(( n )) -le $(( jx )) ]; then\n                    (( y=$((\
    \ x ))+$(( jx ))) )\n                    (( x=$(( y ))+$(( i ))) )\n         \
    \       else\n                    (( y=$(( x ))+$(( i ))) )\n                \
    \    (( x=$(( y ))+$(( jx ))) )\n                fi\n            else\n      \
    \          (( x=$(( jx ))+$(( i ))) )\n                if [ $(( n )) -le $(( jx\
    \ )) ]; then\n                    (( y=$(( x ))+$(( jx ))) )\n               \
    \     (( x=$(( y ))+$(( n ))) )\n                else\n                    ((\
    \ y=$(( x ))+$(( n ))) )\n                    (( x=$(( y ))+$(( jx ))) )\n   \
    \             fi\n            fi\n            if [ $(( n )) -eq $(( i )) ]; then\n\
    \                (( num_collisions=$(( num_collisions+1 ))) )\n            fi\n\
    \        done\n    done\n    printf \"There are %5d collisions.\\n\" $num_collisions",
  "  local n=$1\n  local i\n  local j\n  local collision_count\n  local speed\n  local\
    \ left_speed\n  local right_speed\n  for ((i=1; i<=$n; i+=2)); do\n    speed=$((\
    \ ( (i+1) * (i+2) ) / 4 ))\n    left_speed=$(( speed * -2 ))\n    right_speed=$((\
    \ speed * 2 ))\n    for ((j=1; j<=n; j+=2)); do\n      if ((j == i) || (j == i+1))\
    \ continue\n      # Collision occurs when moving left to right hits a car moving\
    \ right to\n      # left AND moving left to right hits a car moving left to right.\n\
    \      if ((left_speed < speed) && (speed < right_speed)) then\n        collision_count=$((collision_count+1))\n\
    \      fi\n    done\n  done\n  echo $collision_count", "  n=$1\n  i=1\n  while\
    \ [ $i -le $n ] ; do\n    j=$((i+1))\n    # first car is going right to left...\n\
    \    [ ! \"$car_$i\" ] && continue\n    # second car is going left to right...\n\
    \    [ ! \"$car_$j\" ] && continue\n    # determine distance to next collision\
    \ point\n    dis=$( echo \"$car_$i\"|bc -l | grep \"^[[:digit:]]\"| cut -c2- )\n\
    \    dis=$( echo \"$car_$j\"|bc -l | grep \"^[[:digit:]]\"| cut -c2- )\n    #\
    \ make sure cars are not too close\n    [ \"$dis\" -eq 0 ] && continue\n    #\
    \ make sure collision points are in opposite directions\n    [ \"$dis\" -gt 0\
    \ ] && dis=$(( $dis * -1 ))\n    # compare the distances\n    if [ $dis -le \"\
    $dis\" ];then\n      [ ! \"$car_$i\" ] && continue\n      [ ! \"$car_$j\" ] &&\
    \ continue\n      # if there are an equal number of collisions, return it\n  \
    \    (( i++ ))\n    fi\n  done\n  echo \"$i\"", "  local cars=$1\n  local collisions=0\n\
    \  # for each car, count the number of times that it moved right to left and that\
    \ it\n  # moved left to right.  Those counts are the collision counts.\n  for\
    \ i in $(seq 0 $((cars - 1))); do\n    collisions=$((collisions + \\\n      $(grep\
    \ -c '^('\"$i'\" \"$((i + 1)\")\" \"$((cars + 1))\")' $2 |\n       grep -c '^('\"\
    $((cars + 1)\")\" \"$i\")' $2 )))\n  done\n  echo \"$collisions\"", "  local n=$1\n\
    \  local x0 y0\n  local x y x0 y\n  local x1 y1\n\n  x0=`expr $n \\* $n - 1`\n\
    \  y0=`expr $n \\* $n - 1`\n  x=1\n  y=1\n  while [ $x -lt $n ]; do\n    sleep\
    \ 0.1 # Sleep 0.1 seconds to ensure cars get settled\n    x1=`expr $x + $n - 1`\n\
    \    y1=`expr $y + $n - 1`\n    if [[ $(( `expr $x0 \\+ $y0 \\< $x1 \\+ $y1` ))\
    \ -ne 0 ]]; then\n      ((collision_counter ++))\n      echo \"Collision at ($x,$y)\
    \ and ($x1,$y1)\"\n    fi\n    x=$x1\n    y=$y1\n  done", "    local line1=$1\n\
    \    local line2=$2\n    local n=$3\n\n    # $line1 contains n cars, each of which\
    \ moves left.  Each car will move\n    # left for exactly one step.\n    # $line2\
    \ contains n cars, each of which moves right.  Each car will move\n    # right\
    \ for exactly one step.\n    #\n    # The colliding pairs begin in the middle,\
    \ and work their way outward.\n\n    local col1=0\n    local col2=0\n\n    # find\
    \ colliding pairs\n    for (( i=1; i<=$((n-1)); i++ )); do\n        local xleft=$line1[i]\n\
    \        local xright=$line2[i]\n\n        local xstart=$(( $i*n ))\n        local\
    \ xend=$(( $i*n+n ))\n        local xmid=$(($xstart+$xend)/2)\n\n        if [\
    \ $i -ne $((n-1)) ]; then\n            local xleft2=$line1[$((i-1))]\n       \
    \     local xright2=$line2[$((i-1))]\n\n            local xstart2=$(( ($i-1)*n\
    \ ))\n            local xend2=$(( ($i-1)*n+n ))\n            local xmid2=$(($xstart2+$xend2)/2)\n\
    \n            local xdiff=$(($xmid-xleft))\n            local xdiff2=$(($xmid2-xright))\n\
    \        else\n            local xdiff=$(( $xleft-$xmid ))\n            local\
    \ xdiff2=$(( $xright-$xmid2 ))\n        fi\n\n        if [ $xdiff -gt $xdiff2\
    \ ]; then\n            local xleft2=$line1[$i]\n            local xright2=$line2[$i]\n\
    \n            local xstart2=$(( i*n ))\n            local xend2=$(( i*n+n ))\n\
    \            local xmid2=$(($xstart2+$xend2)/2)\n\n            local xdiff3=$(($xmid2-xright))\n\
    \            local xdiff4=$(($xmid-xleft))\n        else\n            local xdiff3=$((\
    \ $xmid2-$xmid ))\n            local xdiff4=$(( $xmid-$xleft2 ))\n        fi\n\
    \n        local xdiff5=$(($xdiff+xdiff3))\n        local xdiff6=$(($xdiff2+$xdiff4))\n\
    \n        if [ $xdiff5 -le $x", "  local n=$1\n  local num_collisions=0\n  local\
    \ last_left_speed\n  local last_right_speed\n  local left_speed_count\n  local\
    \ right_speed_count\n\n  local left_speed_offset\n  local right_speed_offset\n\
    \  local left_speed\n  local right_speed\n  local left_collision\n  local right_collision\n\
    \n  local i\n\n  for (( i=0; i<n; i++ )); do\n    last_left_speed=0\n    last_right_speed=0\n\
    \    left_speed_count=0\n    right_speed_count=0\n    left_speed_offset=-1\n \
    \   right_speed_offset=1\n    left_speed=0\n    right_speed=0\n    left_collision=0\n\
    \    right_collision=0\n    sleep 1\n    while (( left_speed_count<n )); do\n\
    \      left_speed=(( $(car $(( $i+$left_speed_offset ))) == $(car $(( $i+$(( $i+$left_speed_offset\
    \ )) % $n )) )) ? $(( $left_speed + 1 )) : $left_speed)\n      left_speed_count=((\
    \ $(car $(( $i+$left_speed_offset ))) == $(car $(( $i+$(( $i+$left_speed_offset\
    \ )) % $n )) )) ? $(( $left_speed_count + 1 )) : $left_speed_count)\n      sleep\
    \ 1\n    done\n\n    while (( right_speed_count<n )); do\n      right_speed=((\
    \ $(car $(( $i+$right_speed_offset ))) == $(car $(( $i+$(( $i+$right_speed_offset\
    \ )) % $n )) )) ? $(( $right_speed + 1 )) : $right_speed)\n      right_speed_count=((\
    \ $(car $(( $i+$right_speed_offset ))) == $(car $(( $i+$(( $i+$right_speed_offset\
    \ )) % $n )) )) ? $(( $right_speed_count + 1 )) : $right_speed_count)\n      sleep\
    \ 1\n    done\n\n    (( $left_speed == $right_speed )) && {\n      (( $left_speed\
    \ < $last_left_speed )) && {\n        (( $left_collision == 0 )) && {\n      \
    \    (( $left_speed > 0 )) && {\n            (( $left_speed + $(( $left_speed\
    \ > $last_left_speed )) )) && {\n              (( $left_collision == 1 )) && {\n\
    \                num_collisions=$(( $num_collisions + 1 ))\n              }\n\
    \            }\n          }\n        }\n      }\n      (( $left_speed > $last_left_speed\
    \ )) && {\n        ((", "  local N=$1\n  local LEFT\n  local RIGHT\n  local COLLISIONS\n\
    \  LEFT=0\n  RIGHT=`expr $N - 1`\n  COLLISIONS=0\n  # We start with the assumption\
    \ that if two cars collide, they will move in\n  # opposite directions.  The algorithm\
    \ works by assuming that when cars collide,\n  # the cars move in the same direction.\n\
    \  # In order for the collision check to work, these cars need to move in the\n\
    \  # same direction every time.  That means we need to keep track of the direction\n\
    \  # that the cars are moving in.\n  #\n  # We keep track of that by using the\
    \ left and right variables.  They're just\n  # indices into an array, and they\
    \ keep track of what direction the cars are\n  # moving in from left to right.\n\
    \  while [ $LEFT -le $RIGHT ]\n  do\n    while [ $LEFT -le $RIGHT ]\n    do\n\
    \      # Move cars left to right\n      while [ $LEFT -le $RIGHT ]\n      do\n\
    \        local J=$(( LEFT - $RIGHT ))\n        if [ ${CARS[$LEFT]} != ${CARS[$J]}\
    \ ]\n        then\n          COLLISIONS=$((COLLISIONS + 1))\n        fi\n    \
    \    local M=$(( $LEFT + $RIGHT ))\n        local K=$(( $LEFT + 1 ))\n       \
    \ local L=$(( $LEFT + $RIGHT ))\n        if [ ${CARS[$K]} != ${CARS[$M]} ]\n \
    \       then\n          COLLISIONS=$((COLLISIONS + 1))\n        fi\n        local\
    \ P=$(( $K + 1 ))\n        local N=$(( $K + $J ))\n        LEFT=$(( $L + $J ))\n\
    \        if [ ${CARS[$N]} != ${CARS[$L]} ]\n        then\n          COLLISIONS=$((COLLISIONS\
    \ + 1))\n        fi\n        RIGHT=$(( $P - $J ))\n        if [ ${CARS[$P]} !=\
    \ ${CARS[$N]} ]\n        then\n          COLLISIONS=$((COLLISIONS + 1))\n    \
    \    fi\n      done\n      # Move cars right to left\n      while [ $LEFT -le\
    \ $RIGHT ]\n      do\n        local J=$(( RIGHT - $LEFT ))\n        if [ ${CARS[$J]}\
    \ != ${CARS[$RIGHT]} ", "    local n=$1\n    local m\n    m=`expr $n \\* 4`\n\
    \    local i\n    for i in `seq 0 $(( $n - 1 ))`\n    do\n        for j in `seq\
    \ 0 $(( $n - 1 ))`\n        do\n            if (( $(j + 1 ) < $n && $(( $j + 1\
    \ )) >= $i )); then\n                (( $m ))\n            fi\n        done\n\
    \    done", "    local n\n    n=$1\n    local i\n    local j\n    local collisions=0\n\
    \    # set range from 0 to n-1\n    for i in {0..$((n-2)); do\n        collisions=$((collisions+((i>0)?0:0)))\n\
    \        for j in {0..$((n-2)); do\n            if ((i==j) && ((j>0)) && ((j<i)))\
    \ {\n                collisions=$((collisions+1))\n            fi\n        done\n\
    \    done\n    echo $collisions", "  local N=$1\n  while [ $N -gt 0 ]\n  do\n\
    \    while [ $N -gt 0 ]\n    do\n      local n=$((N-1))\n      local m=$((n-1))\n\
    \      local i=1\n      while [ $i -le $n ]\n      do\n        local j=$((i-1))\n\
    \        ((i%2==0)) && break\n        local i\n        ((i++))\n      done\n \
    \     ((i%2==0)) && break\n      ((j%2==0)) && break\n      ((m%2==0)) && break\n\
    \      ((n%2==0)) && break\n      # A car at point n and m collides.\n      #\
    \ If n < m and n > m, then one of them is moving left and the other is moving\
    \ right.\n      # If n < m, then n is moving left and m is moving right.\n   \
    \   local l=$((N-n))\n      local r=$((N-m))\n      ((l > r)) && m=$((N-m))\n\
    \      local c=$((m-1))\n      # $1 is either 0 or 1\n      if [ $1 -eq 0 ]\n\
    \      then\n        # Point n is moving left.\n        if [ $m -eq 1 ]\n    \
    \    then\n          ((c++))\n        else\n          ((c--))\n        fi\n  \
    \    elif [ $1 -eq 1 ]\n      then\n        # Point m is moving right.\n     \
    \   if [ $n -eq 1 ]\n        then\n          ((c--))\n        else\n         \
    \ ((c++))\n        fi\n      fi\n      ((c==1)) && break\n      # Point c is on\
    \ the line.\n      ((c%2==0)) && break\n      # $2 was a point on the line before\
    \ this collision.\n      # This collision is done.\n      N=$((2*N+m))\n    done\n\
    \    ((N>0)) && break\n  done", "    local num_col\n    local num_collisions=0\n\
    \    for (( num_col = 0; num_col <= $1; num_col++ )); do\n        local first_car=${num_col}\n\
    \        local last_car=${num_col}\n        for (( num_col = num_col+1; num_col\
    \ <= $1; num_col++ )); do\n            local second_car=${num_col}\n         \
    \   if [[ $((num_col - first_car)) -gt $((num_col - second_car)) ]]; then\n  \
    \              local collision\n                collision=true\n             \
    \   for (( num_col = first_car; num_col <= second_car; num_col++ )); do\n    \
    \                if [[ $((num_col - first_car)) -gt $((num_col - second_car))\
    \ ]]; then\n                        collision=false\n                        break\n\
    \                    fi\n                done\n                if [[ $collision\
    \ = true ]]; then\n                    num_collisions=$((num_collisions + 1))\n\
    \                    break\n                fi\n            fi\n        done\n\
    \    done\n    echo \"$num_collisions\"", "  local n=$1\n  for i in $(seq 1 $n);\
    \ do\n    car_move \"$1\" $i 0 $i 0\n  done", "    local n=$1\n    local car_races=($2)\n\
    \    local max_time=$3\n    # Start with collision detection and time initialization\
    \ at 1 sec\n    local collided_cars=0\n    local start_time=$(date +%s)\n    local\
    \ timestamp=$(date +%s)\n    # Loop through each car\n    for ((i = 0; i < n;\
    \ ++i)); do\n        local car_id\n        car_id=${car_races[i]}\n        # Check\
    \ if this car collided with each other car\n        for ((j = i + 1; j < n; ++j));\
    \ do\n            local other_car_id\n            other_car_id=${car_races[j]}\n\
    \            # Check if this car collided with other\n            if [[ \"$car_id\"\
    \ != \"$other_car_id\" ]]; then\n                # Check if car collision time\
    \ is greater than max_time\n                if [[ \"$((timestamp - start_time))\
    \ -gt $max_time\" ]]; then\n                    collided_cars=$((collided_cars\
    \ + 1))\n                fi\n            fi\n        done\n    done\n    echo\
    \ \"$collided_cars\"", "  n=$1\n  collisions=0\n  left=left\n  right=right\n \
    \ for i in `seq 1 ${n}`; do\n    # Find which car we're colliding with\n    left=`expr\
    \ ${left} + ${left}%4`\n    right=`expr ${right} + ${right}%4`\n    # If they're\
    \ colliding, then output the collision and stop\n    if [[ $((${left}+${right}))\
    \ -ge 8 ]]; then\n      collisions=$((${collisions}+1))\n      break\n    fi\n\
    \  done\n  echo \"${collisions}\"", "    local -i collision_count i\n    collision_count=0\n\
    \    for (( i=1; i<=$1; i++ )); do\n        local j=0\n        while (( $j<$i\
    \ )); do\n            local j=$(( $j+1 ))\n            (( collision_count++ ))\n\
    \        done\n    done\n    echo $collision_count", "    local num_races=${1:-1}\n\
    \    local num_iterations=${2:-1}\n    local num_cars=${3:-1}\n    local num_cars_left=${4:-1}\n\
    \    local num_cars_right=${5:-1}\n    local left_cars_left=${6:-1}\n    local\
    \ right_cars_right=${7:-1}\n    local max_speed=${8:-1}\n    local max_speeds=${9:-1}\n\
    \    local max_speeds_left=${10:-1}\n    local max_speeds_right=${11:-1}\n   \
    \ local num_cars_left_final=${12:-1}\n    local num_cars_right_final=${13:-1}\n\
    \    local car_x=${14:-1}\n    local car_y=${15:-1}\n    local car_z=${16:-1}\n\
    \    local car_speed_left=${17:-1}\n    local car_speed_right=${18:-1}\n    local\
    \ car_time_left=${19:-1}\n    local car_time_right=${20:-1}\n    local car_collisions=${21:-1}\n\
    \    local car_x=$((car_x + car_speed_right))\n    local car_y=$((car_y + car_speed_left))\n\
    \    local car_time_left=$((car_time_left + 1))\n    local car_time_right=$((car_time_right\
    \ + 1))\n    local car_x=$((car_x + car_speed_right))\n    local car_y=$((car_y\
    \ + car_speed_left))\n    local car_time_left=$((car_time_left + 1))\n    local\
    \ car_time_right=$((car_time_right + 1))\n    local car_x=$((car_x + car_speed_right))\n\
    \    local car_y=$((car_y + car_speed_left))\n    local car_time_left=$((car_time_left\
    \ + 1))\n    local car_time_right=$((car_time_right + 1))\n    local car_x=$((car_x\
    \ + car_speed_right))\n    local car_y=$((car_y + car_speed_left))\n    local\
    \ car_time_left=$((car_time_left + 1))\n    local car_time_right=$((car_time_right\
    \ + 1))\n    local car_x=$((car_x + car_speed_right))\n    local car_y=$((car_y\
    \ + car_speed_left))\n    local car_time_left=$((car_time_left + ", "    local\
    \ cars_left_to_right_distance=$(( $2 * $1 ))\n    local cars_right_to_left_distance=$((\
    \ $2 * $1 ))\n    local cars_colliding=0\n    local cars_left_to_right_distance2=$((\
    \ $2 * $1 ))\n\n    local cars_right_to_left_distance2=$(( $2 * $1 ))\n    local\
    \ cars_left_to_right_distance3=$(( $2 * $1 ))\n    local cars_right_to_left_distance3=$((\
    \ $2 * $1 ))\n    local cars_left_to_right_distance4=$(( $2 * $1 ))\n    local\
    \ cars_right_to_left_distance4=$(( $2 * $1 ))\n\n    local cars_left_to_right_distance5=$((\
    \ $2 * $1 ))\n    local cars_right_to_left_distance5=$(( $2 * $1 ))\n    local\
    \ cars_left_to_right_distance6=$(( $2 * $1 ))\n    local cars_right_to_left_distance6=$((\
    \ $2 * $1 ))\n\n    local cars_left_to_right_distance7=$(( $2 * $1 ))\n    local\
    \ cars_right_to_left_distance7=$(( $2 * $1 ))\n    local cars_left_to_right_distance8=$((\
    \ $2 * $1 ))\n    local cars_right_to_left_distance8=$(( $2 * $1 ))\n\n    local\
    \ cars_left_to_right_distance9=$(( $2 * $1 ))\n    local cars_right_to_left_distance9=$((\
    \ $2 * $1 ))\n    local cars_left_to_right_distance10=$(( $2 * $1 ))\n    local\
    \ cars_right_to_left_distance10=$(( $2 * $1 ))\n\n    for (( i=1; i <= 10; i++\
    \ )); do\n        local left_distance=$(( $i - 1 ))\n        local right_distance=$((\
    \ $i + 1 ))\n        local cars_colliding2=0\n        local cars_colliding3=0\n\
    \        local cars_colliding4=0\n        local cars_colliding5=0\n        local\
    \ cars_colliding6=0\n        local cars_colliding7=0\n        local cars_colliding8=0\n\
    \        local cars_colliding9=0\n        local cars_colliding10=0\n\n       \
    \ local cars_colliding11=0\n        local cars_colliding12=0\n        local cars_colliding13=0\n\
    \        local cars_colliding14=0\n        local cars_colliding15=0\n        local\
    \ cars_colli", "    local n=$1\n\n    local collided_cars=$((n * (n + 1) / 2))\n\
    \n    local collision_check=1\n    local car1\n    local car2\n    local car3\n\
    \n    while [ \"$collision_check\" -le \"$collided_cars\" ]\n    do\n        car1=\"\
    car\"\n        car2=\"car\"\n        car3=\"car\"\n\n        car1=$(( $RANDOM\
    \ % n ))\n        car2=$(( $RANDOM % n ))\n        car3=$(( $RANDOM % n ))\n\n\
    \        if [ \"$car1\" = \"$car2\" ]\n        then\n            (( car1 += 1\
    \ ))\n        else\n            (( car2 += 1 ))\n        fi\n\n        if [ \"\
    $car1\" = \"$car3\" ]\n        then\n            (( car1 += 1 ))\n        else\n\
    \            (( car3 += 1 ))\n        fi\n\n        if [ \"$car2\" = \"$car3\"\
    \ ]\n        then\n            (( car2 += 1 ))\n        else\n            (( car3\
    \ += 1 ))\n        fi\n\n        if [ \"$car1\" = \"$car2\" ]\n        then\n\
    \            (( car1 += 1 ))\n        else\n            (( car2 += 1 ))\n    \
    \    fi\n\n        if [ \"$car1\" = \"$car3\" ]\n        then\n            ((\
    \ car1 += 1 ))\n        else\n            (( car3 += 1 ))\n        fi\n\n    \
    \    if [ \"$car2\" = \"$car3\" ]\n        then\n            (( car2 += 1 ))\n\
    \        else\n            (( car3 += 1 ))\n        fi\n\n        if [ \"$car1\"\
    \ = \"$car3\" ]\n        then\n            (( car1 += 1 ))\n        else\n   \
    \         (( car3 += 1 ))\n        fi\n\n        if [ \"$car2\" = \"$car3\" ]\n\
    \        then\n            (( car2 += 1 ))\n        else\n            (( car3\
    \ += 1 ))\n        fi\n\n        if [ \"$car1\" = \"$car3\" ]\n        then\n\
    \            (( car1 += 1 ))\n        else\n            (( car3 += 1 ))\n    \
    \    fi\n\n        if [ \"$car2\" = \"$car3\" ]\n        then\n            ((\
    \ car2 += 1 ))\n        else\n            (( car3 += 1 ))\n        fi\n\n    \
    \    collision_check=$(( collision_check + 1 ))\n    done\n\n    echo \"$collision_check\"",
  "  i=1\n  car1=${1}\n  car2=${car1}\n  while true\n    do\n      if [ ${i} -eq ${i}\
    \ ]\n        then\n          echo \"${car1} ${car2}\"\n          i=${i}\n    \
    \    fi\n      car2=${car2}\n      i=${i}-1\n      ((i%2)==0)\n    done", "  local\
    \ n=$1\n  local car cars\n  local colliding collidings count\n  cars=($(cars_in_straight\
    \ ${n}))\n\n  # Count the number of times the cars collide with each other.\n\
    \  collidings=($(for car in ${cars[*]}; do \\\n    colliding=$(car_has_collision\
    \ ${car} ${cars[@]:$((${#cars[@]}-1)):1}); \\\n    echo $colliding;done))\n  #\
    \ This loop counts the number of times the cars collide.\n  for (( count = 0;\
    \ ${#collidings[*]}; count++ ))\n  do\n    (( colliding=collidings[$count] ))\n\
    \    (( collidings[$count]=$colliding ))\n    (( n+=1 ))\n  done\n  echo $n",
  "    local n=$1\n    local max_n=$n\n    while [ $n -le $max_n ]; do\n        local\
    \ collision=0\n        local left_to_right_collision=0\n        local right_to_left_collision=0\n\
    \        local left_collision=0\n        local right_collision=0\n        local\
    \ left_to_left_collision=0\n        local right_to_right_collision=0\n       \
    \ local count=0\n        local count_collisions=0\n        local count_right_collisions=0\n\
    \        local count_left_collisions=0\n        local count_right_to_left_collisions=0\n\
    \        local count_left_to_right_collisions=0\n        local count_right_to_left_to_right_collisions=0\n\
    \        local count_left_to_right_to_left_collisions=0\n        local left_to_left_collision_counter=0\
    \ \n        local right_to_left_collision_counter=0 \n        local left_collision_counter=0\
    \ \n        local right_collision_counter=0 \n        local left_to_left_collision_counter_left=0\
    \ \n        local left_to_left_collision_counter_right=0 \n        local right_to_left_collision_counter_left=0\
    \ \n        local right_to_left_collision_counter_right=0 \n        local left_collision_counter_left=0\
    \ \n        local left_collision_counter_right=0 \n        local right_collision_counter_left=0\
    \ \n        local right_collision_counter_right=0 \n        local left_to_left_collision_counter_left_right=0\
    \ \n        local right_to_left_collision_counter_left_right=0 \n        local\
    \ left_to_right_collision_counter_left_right=0 \n        local right_to_right_collision_counter_left_right=0\
    \ \n        local left_to_left_collision_counter_left_left=0 \n        local right_to_left_collision_counter_left_left=0\
    \ \n        local left_to_right_collision_counter_left_left=0 \n        local\
    \ right_to_right_collision_counter_left_left=0 \n        local left_to_left_collision_counter_right_right=0\
    \ \n        local right_to_left_collision_counter_right_right=0 \n        local\
    \ left_to_right_collision_counter_right_right=0 \n        local left_to_left_collision_counter_right_left=0\
    \ \n        local right_to_left_collision_counter_right_left=0 \n        local\
    \ left_to_right_collision_counter_right_left=0 \n        local right_to_right_collision_counter_right_left=0\n\
    \        local left_to_left_collision_counter_left_right=0 \n        local right_to_left_collision_counter_left_right=0\
    \ \n        local left_to_right_collision_counter_left_right=0 \n        local\
    \ right_to_right_", "\techo \"$(cat /tmp/car | wc -c)\"\n\techo \"$(cat /tmp/car\
    \ | sort -rn  | tail -n1 | awk '{print $1}')\"", "  local n=$1\n  local -r count=0\n\
    \  # We set count to 1 before entering the while loop,\n  # so we don't have to\
    \ worry about the condition being true\n  # at the start.\n  count=1\n  while\
    \ [ $count -lt $n ]\n  do\n    local -r x=$(( $RANDOM % $2 ))\n    local -r y=$((\
    \ $RANDOM % $2 ))\n    local -r z=$(( $RANDOM % $2 ))\n    (( count++ ))\n   \
    \ if [ $x -eq $y ] && [ $y -eq $z ]\n    then\n      # Collision detected.\n \
    \     (( count = count + 1 ))\n    fi\n  done\n  echo \"$count\"", "  n=$1\n \
    \ (( collision_count++ ))\n  echo \"$n cars are colliding against each other in\
    \ a straight line at the speed of $n\"\n  echo \"$n cars are colliding against\
    \ each other in a straight line at the speed of $n\"\n  echo \"$n cars are colliding\
    \ against each other in a straight line at the speed of $n\"", "  local n=$1\n\
    \  local car1=$2\n  local car2=$3\n  local car1_speed=$4\n  local car2_speed=$5\n\
    \  local car1_pos=$6\n  local car2_pos=$7\n  local car1_start_x=$8\n  local car1_start_y=$9\n\
    \  local car2_start_x=$10\n  local car2_start_y=$11\n  local car1_end_x=$12\n\
    \  local car1_end_y=$13\n  local car2_end_x=$14\n  local car2_end_y=$15\n  local\
    \ car_start=$(car_name_of_start $car1)\n  local car_end=$(car_name_of_start $car2)\n\
    \n  local collides=0\n  local collisions=0\n  local collision_speed=0\n  local\
    \ car_speed_1=0\n  local car_speed_2=0\n  local car_start_1=0\n  local car_start_2=0\n\
    \  local car_end_1=0\n  local car_end_2=0\n\n  local collision_x=$(printf \"%d.%d\\\
    n\" $car1_start_x $car1_end_x)\n  local collision_y=$(printf \"%d.%d\\n\" $car1_start_y\
    \ $car1_end_y)\n\n  local collision_x_2=$(printf \"%d.%d\\n\" $car2_start_x $car2_end_x)\n\
    \  local collision_y_2=$(printf \"%d.%d\\n\" $car2_start_y $car2_end_y)\n\n  local\
    \ collision_speed_x=$(printf \"%d.%d\\n\" $car1_speed $car2_speed)\n  local collision_speed_y=$(printf\
    \ \"%d.%d\\n\" $car1_speed $car2_speed)\n\n  if [ \"$collision_speed_x\" -ge \"\
    $collision_speed_y\" ]; then\n    collision_speed_x=$(cat $car_start | grep -w\
    \ \"speed\" | cut -d \" \" -f 2 | cut -d \":\" -f 1)\n    collision_speed_y=$(cat\
    \ $car_start | grep -w \"speed\" | cut -d \" \" -f 2 | cut -d \":\" -f 2)\n  fi\n\
    \  local collision_speed_x_2=$(printf \"%d.%d\\n\" $car1_speed $car2_speed)\n\
    \  local collision_speed_y_2=$(printf \"%d.%d\\n\" $car1_speed $car2_speed)\n\n\
    \  if [ \"$collision_speed_x_2\" -ge \"$collision_speed_y_2\" ]; then\n    collision",
  "    local n=$1\n\n    local collision_count=0\n    local count=0\n    local a\n\
    \    local b\n    local c\n\n    while [[ $count -lt $n ]]; do\n        (( count\
    \ += 1))\n        a=$(( $RANDOM % $n ))\n        b=$(( $RANDOM % $n ))\n     \
    \   c=$(( $RANDOM % $n ))\n\n        if [[ \"$a\" -eq \"$b\" && \"$b\" -eq \"\
    $c\" ]]; then\n            (( collision_count += 1 ))\n        fi\n\n        if\
    \ [[ \"$a\" -eq \"$c\" && \"$c\" -eq \"$b\" ]]; then\n            (( collision_count\
    \ += 1 ))\n        fi\n    done\n\n    echo \"$collision_count\"", "  # The colliding\
    \ cars are stored in an array called \"colliding\".\n  colliding=()\n  # The cars\
    \ which have collided are stored in an array called \"colliding\".\n  colliding=($colliding)\n\
    \  # The cars which have collided are stored in an array called \"colliding\"\
    .\n  for i in $(seq 1 $1); do\n    for j in $(seq 1 $1);  do\n      if [[ ${colliding[i]}\
    \ != ${colliding[j]} ]]; then\n        collision_count=$((collision_count+1))\n\
    \      fi\n    done\n  done", "  [ $# -ne 1 ] && echo \"Usage: `basename $0` <n>\"\
    \ && exit 2\n  \n  local n=$1\n  # We start out with two cars that are very far\
    \ from each other.\n  # They are both \"facing toward\" the leftmost car.\n  local\
    \ left_car=$(( n+1 ))\n  local right_car=$(( n+1 ))\n\n  # \"Fast forward\" a\
    \ little bit so that we start out with two cars\n  # that are \"too close\".\n\
    \  local left_speed=20\n  local right_speed=20\n\n  # The \"collision\" counter\
    \ is initially 0.\n  local collision_count=0\n\n  # Loop until we find one where\
    \ both cars are \"colliding.\"\n  while [ $left_car -le $n ]; do\n    local left_car_speed=$((\
    \ left_speed+right_speed ))\n    local right_car_speed=$(( right_speed+left_speed\
    \ ))\n\n    echo \"left_car=$left_car right_car=$right_car left_speed=$left_car_speed\
    \ right_speed=$right_car_speed\"\n\n    # If either car has a speed that is too\
    \ slow to move, stop.\n    if [[ $left_car_speed -eq 0 ]] || [[ $right_car_speed\
    \ -eq 0 ]]; then\n      echo \"No collision.\"\n      break\n    fi\n\n    echo\
    \ \"left_car_speed=$left_car_speed right_car_speed=$right_car_speed\"\n\n    #\
    \ If the left car has a speed that is too slow to move, stop.\n    # If the right\
    \ car has a speed that is too slow to move, stop.\n    if [[ $left_car_speed -eq\
    \ 20 ]] || [[ $right_car_speed -eq 20 ]]; then\n      echo \"No collision.\"\n\
    \      break\n    fi\n\n    # If the left car hits the right car, they collide.\n\
    \    # But we only count this if the distance between the two\n    # cars is less\
    \ than the distance between the left and right\n    # cars.\n    # This is to\
    \ prevent the function from taking too long\n    # to return a collision.\n  \
    \  if [ `diff --brief $left_car $right_car | awk '{print $3}'` -gt $(( left_speed\
    \ + right_speed )) ]; then\n      echo \"Collision!\"\n      # We count this collision.\n\
    \      collision_count=$(( collision_count+1 ))\n      # Move both cars forward\
    \ so that they won't collide again.\n      left_speed=$(( left_speed + right_speed\
    \ ))\n", "  # A set of $1 cars, $2 cars, $3 cars, $4 cars, and $5 cars are being\
    \ driven to\n  # $6 cars respectively.  All cars are moving at their normal speed,\
    \ but $2 cars\n  # are colliding.  What is the smallest $5 cars that will collide?\n\
    \  local n=$1\n  local m=$2\n  local k=$3\n  local l=$4\n  local p=$5\n  local\
    \ q=$6\n  local r=$(( $n - $m ))\n\n  # The next line computes the difference\
    \ between the first $n and last $n\n  # cars.\n  local x= $(( $l - $n ))\n\n \
    \ # The next line is another way of writing (( $x % $k )).  It counts the number\n\
    \  # of times $x is a multiple of $k, and assigns that number to $r.\n  local\
    \ y= $(( $x % $k ))\n\n  # The next line computes the distance between $p and\
    \ the collision.\n  local w=$(( $p - ( $x * $y / $k )))\n\n  # The next line computes\
    \ the distance between $p and $q.\n  local v=$(( $q - $p ))\n\n  # The next line\
    \ computes the distance between $q and $r.\n  local u=$(( $r - $q ))\n\n  # The\
    \ next line computes the difference between $q and $r.  It counts the number\n\
    \  # of times $r is a multiple of $q.  That value is assigned to $u.\n  local\
    \ z=$(( $r * $q / $k ))\n\n  # The next line counts the number of times $q is\
    \ a multiple of $p.  That value\n  # is assigned to $v.\n  local a=$(( $q * $p\
    \ / $k ))\n\n  # The next line counts the number of times $r is a multiple of\
    \ $q.  That value\n  # is assigned to $w.\n  local b=$(( $r * $q / $k ))\n\n \
    \ # The next line counts the number of times $q is a multiple of $p.  That value\n\
    \  # is assigned to $y.\n  local c=$(( $q * $p / $k ))\n\n  # The next line computes\
    \ the difference between $q and $p.  It counts the number\n  # of times $p is\
    \ a multiple of $q.  That value is assigned to $z.\n  local d=$(( $p * $q / $k\
    \ ))\n\n  # The next line counts the number of times $p is a multiple of ", " \
    \ local n=$1\n  # $2 is a string describing the starting position\n  # $3 is a\
    \ string describing the ending position\n  local starting_pos=(${2//,/ })\n  local\
    \ ending_pos=(${3//,/ })\n\n  # $4 is a string describing the speed\n  # $5 is\
    \ a string describing the start position\n  # $6 is a string describing the end\
    \ position\n  local speed=(${4//,/ })\n  local starting_pos=(${5//,/ })\n  local\
    \ ending_pos=(${6//,/ })\n\n  # This array is $n elements long.\n  local i\n\n\
    \  local j\n\n  local collisions=0\n\n  # The two starting positions are the same\
    \ (they were passed in from previous calls).\n  for i in \"${!starting_pos[@]}\"\
    ; do\n    # Check if the two positions collide, i.e. if they would remain perfectly\
    \ still\n    # when moving from $starting_pos[i] to $ending_pos[i].\n    local\
    \ j\n    for j in \"${!starting_pos[@]}\"; do\n      if (( i == j )); then\n \
    \       continue\n      fi\n\n      local dist_sq=${(${starting_pos[$i]}-${starting_pos[$j]})**2}\n\
    \      if (( dist_sq >= (${speed[$i]}**2 + ${speed[$j]}**2) )); then\n       \
    \ collisions=$((collisions + 1))\n        ((j--))\n      fi\n    done\n  done\n\
    \n  echo $collisions", "  n=$1\n  i=1\n  j=2\n  collision_count=0\n  while [ $i\
    \ -le $n ]; do\n    collision_count=$((collision_count+1))\n    while [ $j -le\
    \ $n ]; do\n      if [[ $(( ($j - i) % 2)) -eq 0 ]]; then\n        if [[ $(car_race_left_to_right[\
    \ $i ]) == $(car_race_left_to_right[ $j ]) ]]; then\n          collision_count=$((collision_count+1))\n\
    \        fi\n      fi\n      if [[ $(( ($j - i) % 2)) -eq 1 ]]; then\n       \
    \ if [[ $(car_race_right_to_left[ $i ]) == $(car_race_right_to_left[ $j ]) ]];\
    \ then\n          collision_count=$((collision_count+1))\n        fi\n      fi\n\
    \      if [ $(( ($j - i)) -gt $(( ($n - j)) )) ]; then break; fi\n      j=$((j+1))\n\
    \    done\n    i=$((i+1))\n  done\n  echo $collision_count", "\tlocal num_collisions=$1\n\
    \tlocal num_cars=$2\n\tlocal max_cars=$3\n\tlocal car_speed=$4\n\tlocal car_x=$5\n\
    \tlocal car_y=$6\n\tlocal car_x_next=$7\n\tlocal car_y_next=$8\n\tlocal car_collisions=0\n\
    \tlocal car_distance=1\n\n\twhile [ $(car_distance < max_cars) ]; do\n\t\t((car_collisions++))\n\
    \t\t((car_distance+=car_speed))\n\n\t\tif [ $(car_collisions) == 1 ]; then\n\t\
    \t\t((car_collisions=0))\n\t\t\t((car_distance--))\n\t\tfi\n\n\t\tif [ $(car_collisions)\
    \ -ge $num_collisions ]; then\n\t\t\tbreak\n\t\tfi\n\n\t\tif [[ $(car_collisions)\
    \ -ge 1 ]]; then\n\t\t\t((car_collisions=0))\n\t\tfi\n\n\t\t# If car hasn't moved\
    \ since last check, then it's still in collision.\n\t\tif [ $(car_collisions)\
    \ == 0 ]; then\n\t\t\tif [ $(car_distance) -ge 3 ]; then\n\t\t\t\t((car_collisions++))\n\
    \t\t\tfi\n\n\t\t\t((car_distance--))\n\t\tfi\n\n\t\tif [ $(car_collisions) -ge\
    \ $num_collisions ]; then\n\t\t\tbreak\n\t\tfi\n\n\t\tif [ $(car_collisions) -ge\
    \ 1 ]; then\n\t\t\t((car_collisions=0))\n\t\tfi\n\n\t\t# If the car has moved\
    \ further than max speed since last check,\n\t\t# then it's not in collision.\n\
    \t\tif [ $(car_collisions) -ge $num_collisions ]; then\n\t\t\tbreak\n\t\tfi\n\n\
    \t\tif [[ $(car_collisions) -ge 1 ]]; then\n\t\t\t((car_collisions=0))\n\t\tfi\n\
    \n\t\t((car_distance+=car_speed))\n\tdone\n\n\techo \"$car_collisions\"", "  local\
    \ n=$1\n  local c\n  local p\n  local q\n  local k\n  local j\n  local i\n  local\
    \ cj\n  local pj\n  local qj\n  local kj\n  local ji\n  local cjp\n  local pjp\n\
    \  local qjp\n  local kjp\n  local ijp\n  local cjk\n  local pjk\n  local qjk\n\
    \  local kjk\n  local ijk\n  local ijl\n  local iil\n  local ijm\n  local ijn\n\
    \  local ijp\n  local ijq\n  local ijk\n  local ijs\n  local ijt\n  local ijp\n\
    \  local ijr\n  local ijk\n  local ijh\n  local ijg\n  local ijf\n  local ijd\n\
    \  local ijc\n  local ijb\n  local ija\n  local ija\n  local ije\n  local ijd\n\
    \  local ijc\n  local ijb\n  local ija\n  local ija\n  local ije\n  local ijd\n\
    \  local ijc\n  local ijb\n  local ija\n  local ija\n  local ije\n  local ijd\n\
    \  local ijc\n  local ijb\n  local ija\n  local ija\n  local ije\n  local ijd\n\
    \  local ijc\n  local ijb\n  local ija\n  local ija\n  local ije\n  local ijd\n\
    \  local ijc\n  local ijb\n  local ija\n  local ija\n  local ije\n  local ijd\n\
    \  local ijc\n  local ijb\n  local ija\n  local ija\n  local ije\n  local ijd\n\
    \  local ijc\n  local ijb\n  local ija\n  local ija\n  local ije\n  local ijd\n\
    \  local ijc\n  local ijb\n  local ija\n  local ija\n  local ije\n  local ijd\n\
    \  local ijc\n  local ijb\n  local ija\n  local ija\n  local ije\n  local ijd\n\
    \  local ijc\n  local ijb\n  local ija\n  local ija\n  local ije", "    local\
    \ n=$1\n\n    # Initialize variables we'll need\n    local n_collided=0\n    local\
    \ n_colliding_left=0\n    local n_colliding_right=0\n\n    # Initialize position\
    \ and direction\n    local x=0\n    local y=0\n    local dir=1\n\n    # Simulate\
    \ until we're done\n    while [ 1 ]; do\n        # Increment position\n      \
    \  x=$((x+dir))\n\n        # Move in a straight line\n        local x_left=$((x+dir))\n\
    \        local x_right=$((x-dir))\n\n        # Increment direction\n        dir=dir*-1\n\
    \n        # Check to see if we're done\n        if (( x==0 )); then\n        \
    \    # We're done\n            break\n        fi\n\n        # Check to see if\
    \ we've collided with any cars\n        if (( x_left==0 )); then\n           \
    \ # We're now colliding with the left car\n            n_colliding_left=$((n_colliding_left+1))\n\
    \        fi\n        if (( x_right==0 )); then\n            # We're now colliding\
    \ with the right car\n            n_colliding_right=$((n_colliding_right+1))\n\
    \        fi\n    done\n\n    # Return the number of collisions\n    echo \"${n_colliding}\
    \ collisions in ${n_cars} cars\"", "  local x=0\n  local y=0\n  local t=0\n  local\
    \ n=$1\n\n  while [ $x -lt $n ]; do\n    (( x++ ))\n    while [ $y -lt $n ]; do\n\
    \      (( y++ ))\n      t=$(( t + 1 ))\n    done\n  done\n  echo $t", "    local\
    \ n=$1\n    local collide_left=0\n    local collide_right=0\n    for (( i=1; i<n;\
    \ i++ )); do\n        # Move car i from left to right.\n        for (( j=i; j>0;\
    \ j-- )); do\n            # Move car j from right to left.\n            for ((\
    \ k=0; k<j; k++ )); do\n                # Collision happens when the cars collide.\n\
    \                if [ $(( i+k )) -eq $(( j+k )) ]; then\n                    collide_left=$((\
    \ collide_left+1 ))\n                    collide_right=$(( collide_right+1 ))\n\
    \                fi\n            done\n        done\n    done\n    echo $collide_left\
    \ $collide_right", "\tlocal collisions=0\n\tfor (( i=0; i<$1; i++ )); do\n\t\t\
    for (( j=$1; j<$i; j++ )); do\n\t\t\tcollisions=$(( $collisions + $2 ))\n\t\t\
    done\n\tdone\n\techo $collisions", "\tlocal n=$1\n\tlocal a=($(seq -s' ' -n $n\
    \ $((2 * n + 1))));\n\tlocal b=($(seq -s' ' -n $n $((2 * n + 1))))\n\tfor ((i=0;\
    \ i < $n; i++)); do\n\t\tlocal j=$(($i + 1))\n\t\tlocal k=$(($n - $i))\n\t\tfor\
    \ ((j=0; j < $n; j++)); do\n\t\t\tlocal c=$(($j + 1))\n\t\t\tlocal d=$(($n - $j))\n\
    \t\t\tif [[ ${a[$i]} -le ${a[$j]}\n\t\t\t\t&& ${b[$i]} -ge ${b[$j]}\n\t\t\t\t\
    && ${b[$i]} -le ${b[$c]}\n\t\t\t\t&& ${a[$i]} -ge ${a[$c]} ]]; then\n\t\t\t\t\
    if (([[ ${a[$i]} -le ${a[$k]}\n\t\t\t\t\t&& ${b[$i]} -le ${b[$k]}\n\t\t\t\t\t\
    && ${b[$i]} -ge ${b[$j]}\n\t\t\t\t\t&& ${a[$i]} -ge ${a[$j]} ]]; then\n\t\t\t\t\
    \t((collisions++))\n\t\t\t\tfi)\n\t\t\tfi\n\t\tdone\n\tdone", "  local cars\n\
    \  local car_count\n  local i\n  local first_car\n  local second_car\n  local\
    \ collisions\n  local speed\n  local speed_increment\n  local speed_step\n\n \
    \ cars=$1\n  speed=$2\n  speed_increment=$3\n  speed_step=$4\n\n  collisions=0\n\
    \  first_car=1\n  while [[ $first_car -le $cars ]]; do\n    # Find out where the\
    \ first car is going to end up\n    first_car=$((first_car + 1))\n    # Find out\
    \ where the second car is going to end up\n    second_car=$((second_car - 1))\n\
    \    # See if the two cars are colliding\n    if [ $((first_car - second_car))\
    \ -gt 0 ]; then\n      collisions=$((collisions + 1))\n    fi\n  done\n\n  echo\
    \ ${collisions}", "    NUM_CARS=$1\n    NUM_RACES=$2\n    NUM_COLLIDING=$3\n \
    \   COLLIDING=$4\n    COLLIDING_LEFT=$5\n    COLLIDING_RIGHT=$6\n\n    # Move\
    \ the cars so that they don't collide.\n    NUM_CARS_LEFT=${NUM_CARS%${NUM_RACES}}\n\
    \    NUM_CARS_RIGHT=${NUM_CARS/${NUM_RACES}}\n    NUM_CARS_RIGHT=${NUM_CARS_RIGHT}-1\n\
    \n    if [ \"${NUM_CARS}\" -ge \"${NUM_RACES}\" ]\n    then\n        # There are\
    \ ${NUM_CARS} cars left.\n        # There will be ${NUM_CARS_LEFT} cars driving\
    \ left.\n        # There will be ${NUM_CARS_RIGHT} cars driving right.\n     \
    \   # Initialize variables for driving left\n        left=0\n        right=0\n\
    \n        # Initialize variables for colliding and colliding left\n        colliding=0\n\
    \        colliding_left=0\n\n        # Initialize the speed of the cars\n    \
    \    left_speed=${LEFT_CAR_SPEED}\n        right_speed=${RIGHT_CAR_SPEED}\n\n\
    \        while true\n        do\n            # Drive the cars\n            if\
    \ [ $left -lt \"$NUM_CARS_LEFT\" ]\n            then\n                LEFT=$((left+1))\n\
    \                LEFT_SPEED=$((LEFT_SPEED+1))\n                echo \"$left car\
    \ is driving LEFT\"\n            else\n                LEFT=$NUM_CARS_LEFT\n \
    \               LEFT_SPEED=$((LEFT_SPEED-1))\n                echo \"$NUM_CARS_LEFT\
    \ cars are driving LEFT\"\n            fi\n            if [ $right -lt \"$NUM_CARS_RIGHT\"\
    \ ]\n            then\n                RIGHT=$((right+1))\n                RIGHT_SPEED=$((RIGHT_SPEED+1))\n\
    \                echo \"$right car is driving RIGHT\"\n            else\n    \
    \            RIGHT=$NUM_CARS_RIGHT\n                RIGHT_SPEED=$((RIGHT_SPEED-1))\n\
    \                echo \"$NUM_CARS_RIGHT cars are driving RIGHT\"\n           \
    \ fi\n\n            # Test for collisions with the left set\n            if [\
    \ $COLLIDING -lt \"$NUM_COLLIDING\" ]\n            then\n                if [\
    \ $left -lt \"$COLLIDING_LEFT\" ]\n                then\n                    COLLIDING=$((COLLIDING+1))\n\
    \                    COLLIDING_LEFT=$((COLLIDING_LEFT+1))\n                  \
    \  echo \"$left car is colliding ", '    python solve_race_collision.py $1 $2',
  "  local car coll_cnt\n  car=${1:-0}\n  while ((car)); do\n    ((coll_cnt++))\n\
    \    ((car--))\n  done\n  echo $coll_cnt", "    local n=$1\n    # $2 stores the\
    \ number of cars driving left and right\n    # $3 stores the number of cars driving\
    \ left and right\n    local collision=0\n    local left_count=0\n    local right_count=0\n\
    \    local left=(\"${!2}\")\n    local right=(\"${!3}\")\n    # cars in each set\n\
    \    local cars=(\"${!1}\")\n    local cnum=${#cars[@]}\n    local left_cars=(\"\
    ${!4}\")\n    local left_cnum=${#left_cars[@]}\n    local right_cars=(\"${!5}\"\
    )\n    local right_cnum=${#right_cars[@]}\n    for (( i=0; i<$cnum; i++ )); do\n\
    \        for (( j=0; j<$left_cnum; j++ )); do\n            local left_car=(\"\
    ${!left_cars[j]}\")\n            local left_index=$(echo \"${left_cars[$((j+1)%$left_cnum)]}\"\
    \ | awk '{print $1}')\n            local right_car=(\"${!right_cars[$((j+1)%$right_cnum)]}\"\
    )\n            local right_index=$(echo \"${right_cars[$((j+1)%$right_cnum)]}\"\
    \ | awk '{print $1}')\n            local speed=$(cars[$i] $left_cnum $right_cnum)\n\
    \            local collided=$(($(echo \"$left_index > $right_index\"|bc)))\n \
    \           if ((collided != 0)); then\n                collision=$((collision\
    \ + 1))\n            else\n                collision=$((collision + 0))\n    \
    \        fi\n        done\n    done\n    echo \"$collision\"", "  (( n ))\n  ((\
    \ n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  ((\
    \ n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  ((\
    \ n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  ((\
    \ n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  ((\
    \ n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  ((\
    \ n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  ((\
    \ n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  ((\
    \ n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  ((\
    \ n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  ((\
    \ n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  ((\
    \ n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  ((\
    \ n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  (( n ))\n  ((",
  "    local n=$1\n    local x1 x2 y1 y2 x3 y3 x4 y4 x5 y5\n    local x y c1 c2 i\
    \ j k d k1 k2 p1 p2 p3 p4 p5\n    local a b\n    local dx dy da db\n\n    # x1\
    \ x2 y1 y2 x3 y3 x4 y4 x5 y5\n    local -a x1=($1 $1 $2 $2 $3 $3 $4 $4 $5 $5)\n\
    \    local -a x2=($2 $3 $4 $5 $1 $1 $2 $3 $4 $5)\n    local -a y1=($3 $4 $5 $1\
    \ $1 $2 $3 $4 $5 $1)\n    local -a y2=($4 $5 $1 $1 $2 $3 $4 $5 $1 $1)\n    local\
    \ -a x3=($4 $5 $1 $2 $3 $4 $5 $1 $1 $2)\n    local -a y3=($5 $1 $1 $2 $3 $4 $5\
    \ $1 $1 $2)\n    local -a x4=($5 $1 $2 $3 $4 $5 $1 $1 $2 $3)\n    local -a y4=($1\
    \ $1 $2 $3 $4 $5 $1 $1 $2 $3)\n    local -a x5=($1 $1 $2 $3 $4 $5 $1 $1 $2 $3)\n\
    \n    # x1 x2 x3 x4 x5 y1 y2 y3 y4 y5\n    local -a x=($x1 $x2 $x3 $x4 $x5)\n\
    \    local -a y=($y1 $y2 $y3 $y4 $y5)\n\n    # Cars that are nearly overlapping.\n\
    \    a=( $(( ($1 >>1) ^ ($2 >>1) ^ ($3 >>1) ^ ($4 >>1) ^ ($5 >>1) ^ ($6 >>1) ^\
    \ ($7 >>1) ^ ($8 >>1) ))\n    b=( $(( ($1 >>2) ^ ($2 >>2) ^ ($3 >>2) ^ ($4 >>2)\
    \ ^ ($5 >>2) ^ ($6 >>2) ^ ($7 >>2) ", "        local x\n        local y\n\n  \
    \      local i\n        local n\n        local m\n        local collisions\n \
    \       local cols_a\n        local cols_b\n\n        local car_a\n        local\
    \ car_b\n\n        ((collisions = 0))\n        for (( i = 0 ; i < $1 ; i++ ));\
    \ do\n                for (( n = 0 ; n < $1 ; n++ )); do\n                   \
    \     for (( m = 0 ; m < $1 ; m++ )); do\n                                car_a=${car_list[${i}][${n}]}\n\
    \                                car_b=${car_list[${i}][${m}]}\n             \
    \                   if ((${car_a} <= ${car_b}) && (${car_a} >= ${car_b})); then\n\
    \                                        collisions=$((collisions + 1))\n    \
    \                                    (( ${collisions} < 5 ))\n               \
    \                 fi\n                        done\n                done\n   \
    \     done\n        echo $collisions", "  local iter=$1\n  local max_iter=$2\n\
    \  local car_x_left\n  local car_x_right\n  local car_y_left\n  local car_y_right\n\
    \  local dist\n  local car_race_iter\n  local prev_dist\n  local prev_car_x_left\n\
    \  local prev_car_x_right\n  local prev_car_y_left\n  local prev_car_y_right\n\
    \n  # The initial x position of all cars\n  car_x_left=50\n  car_x_right=150\n\
    \  car_y_left=0\n  car_y_right=0\n\n  prev_dist=0\n  prev_car_x_left=0\n  prev_car_x_right=0\n\
    \  prev_car_y_left=0\n  prev_car_y_right=0\n\n  # A variable indicating whether\
    \ a car collided during the previous iteration\n  collided=0\n\n  while [ $iter\
    \ -le $max_iter ]; do\n    # Find the distance between each car and the next car.\n\
    \    # Note that we could use any distance metric we want.  For example,\n   \
    \ # we could use Pythagoras to find the distance between two cars,\n    # but\
    \ that's less efficient since we need to compute both sides of the\n    # Pythagoras\
    \ equation (the x distance).\n    dist=$((($(car_x_right - car_x_left)+$(car_y_right\
    \ - car_y_left))**2))\n\n    if [ $dist -eq $prev_dist ]; then\n      # No collision\
    \ on the previous iteration.  Just move to next car.\n      ((iter++))\n     \
    \ ((collided++))\n    else\n      # A collision on the previous iteration.  Calculate\
    \ the distance\n      # between the cars.  If the distance between the cars is\
    \ less\n      # than the previous distance (which is also less than $prev_dist),\n\
    \      # then a collision has occurred and we need to add 1 to $collided.\n  \
    \    prev_dist=$dist\n      prev_car_x_left=$car_x_left\n      prev_car_x_right=$car_x_right\n\
    \      prev_car_y_left=$car_y_left\n      prev_car_y_right=$car_y_right\n\n  \
    \    # Collision detection\n      if [ $(car_x_right - car_x_left) -gt 0 ]; then\n\
    \        if [ $(car_y_right - car_y_left) -gt 0 ]; then\n          ((collided++))\n\
    \        fi\n      fi\n\n      ((collided++))\n    fi\n\n    # Move the cars and\
    \ reset their positions.\n    car", "  # Simulate some random data.\n  local n\n\
    \  n=$1\n  # The speed of the two cars.\n  local speed\n  speed=$2\n  # The horizontal\
    \ speed of the cars.\n  local horiz_speed\n  horiz_speed=$3\n  # The number of\
    \ cars colliding.\n  local n_collisions\n  n_collisions=0\n\n  # The distance\
    \ traveled by one car since the last collision.\n  local x\n  x=0\n\n  # The last\
    \ collision time.\n  local time\n  time=$(date +%s)\n  # The time when the next\
    \ car collides.\n  local next_time\n  next_time=$(date +%s)\n\n  # The time when\
    \ the previous car collides.\n  local previous_time\n  previous_time=$(date +%s)\n\
    \n  local cars_collide\n  cars_collide=0\n\n  # The number of cars just moving\
    \ left to right.\n  local left\n  left=0\n\n  # The number of cars just moving\
    \ right to left.\n  local right\n  right=0\n\n  # The cars currently in motion.\n\
    \  local in_motion\n  in_motion=()\n\n  # The cars currently in collision.\n \
    \ local colliding\n  colliding=()\n\n  while [ $n -gt 0 ]; do\n    cars_collide=$((\
    \ $n + $(n * $(n+1)) / 2))\n    while [ $n -gt 0 ]; do\n      # The current time\
    \ plus the speed of the car.\n      time=$(date +%s )\n      x=$(( $speed * $time\
    \ ))\n      # Keep the car in motion at all times.\n      in_motion=( ${in_motion[@]}\
    \ $time )\n      # Keep track of the number of cars colliding.\n      colliding=(\
    \ ${colliding[@]} $cars_collide )\n      # The car just stops.\n      if [ $x\
    \ -gt $horiz_speed ]; then\n        x=$horiz_speed\n      fi\n      # The car\
    \ just starts moving right to left.\n      if [ $x -lt 0 ]; then\n        left=$n\n\
    \      fi\n      # The car just starts moving left to right.\n      if [ $x -ge\
    \ 0 ]; then\n        right=$n\n      fi\n      # Update the number of cars colliding.\n\
    \      n_collisions=$(( $n_collisions + $cars_collide ))\n      # Advance to the\
    \ next car.\n      n=$(( $n - 1 ))\n    done\n    # Advance to the next car.\n\
    \    n=$(( $", "  local n=$1\n  local x=0\n  local y=0\n  local x1=100\n  local\
    \ y1=100\n  local x2=100\n  local y2=100\n  local mx=100\n  local my=100\n  local\
    \ myx=100\n  local myy=100\n  local dx=100\n  local dy=100\n  local dt=100\n \
    \ local collisions=0\n  local i\n\n  for ((i=1; i<=$n; i++)); do\n    if [[ $i\
    \ -eq 1 ]]; then\n      x=100\n      y=100\n      x1=$(x+$dx)\n      y1=$(y+$dy)\n\
    \      x2=$(x+$dx)\n      y2=$(y+$dy)\n      my=$y\n      myx=$x\n      myy=$y\n\
    \      mx=$(x+$dx)\n      myy=$(y+$dy)\n      dx=$((10*$i))\n      dy=$((10*$i))\n\
    \      dt=$((5*$i))\n      [[ -n $2 ]] && collisions=$((collisions+$(car_race_collision\
    \ $2 $myx $myy)))\n      [[ -n $3 ]] && collisions=$((collisions+$(car_race_collision\
    \ $3 $mxx $myy)))\n    else\n      x=$(x1+$dx)\n      y=$(y1+$dy)\n      x1=$(x+$dx)\n\
    \      y1=$(y+$dy)\n      x2=$(x+$dx)\n      y2=$(y+$dy)\n      my=$y\n      myx=$x\n\
    \      myy=$y\n      mx=$(x+$dx)\n      myy=$(y+$dy)\n      dx=$((10*$i))\n  \
    \    dy=$((10*$i))\n      dt=$((5*$i))\n      [[ -n $2 ]] && collisions=$((collisions+$(car_race_collision\
    \ $2 $myx $myy)))\n      [[ -n $3 ]] && collisions=$((collisions+$(car_race_collision\
    \ $3 $mxx $myy)))\n    fi\n  done\n  [[ -n $2 ]] && collisions=$((collisions+$(car_race_collision\
    \ $2 $myx $myy)))\n  [[ -n $3 ]] && collisions=$((collisions+$(car_ra", "  declare\
    \ -i n i\n  n=$1\n  i=0\n  while [ $n -gt 0 ] ; do\n    (( n=n-1 ))\n    (( i++\
    \ ))\n  done\n  echo $i", "    local n=$1\n    local i\n    local count\n\n  \
    \  # first make a list of all possible pairs of cars\n    local pair_list\n  \
    \  for ((i = 0; i < n; i++))\n    do\n        for ((j = i + 1; j < n; j++))\n\
    \        do\n            if [[ $((i - j) % 2) != 0 ]]; then\n                pair_list=\"\
    ${pair_list},${i},${j}\"\n            fi\n        done\n    done\n\n    # now\
    \ count the number of collisions\n    count=0\n    for p in $pair_list\n    do\n\
    \        local i\n        local j\n        local c\n        local x\n        local\
    \ y\n\n        # first make a list of all possible pairs of cars\n        local\
    \ pair_list\n        for ((i = 0; i < n; i++))\n        do\n            for ((j\
    \ = i + 1; j < n; j++))\n            do\n                if [[ $((i - j) % 2)\
    \ != 0 ]]; then\n                    pair_list=\"${pair_list},${i},${j}\"\n  \
    \              fi\n            done\n        done\n\n        # count the number\
    \ of collisions\n        local count=0\n        for p in $pair_list\n        do\n\
    \            local i\n            local j\n\n            # find the intersection\
    \ of p and each pair of cars\n            local c=0\n            local x\n   \
    \         local y\n            for ((i = 0; i < n; i++))\n            do\n   \
    \             for ((j = i + 1; j < n; j++))\n                do\n            \
    \        if [[ \"${p}\" == ${i} && \"${p}\" == ${j} ]]; then\n               \
    \         c=`expr $c + 1 \\* 2`\n                    fi\n                    if\
    \ [[ \"${p}\" == ${j} && \"${p}\" == ${i} ]]; then\n                        c=`expr\
    \ $c + 1 \\* 2`\n                    fi\n                done\n            done\n\
    \n            # now check that the intersection is within 1 pixel\n          \
    \  if [[ \"${c}\" -ge 4 ]]; then\n                x=`expr $x \\+ 2`\n        \
    \        y=`expr $y \\+ 2`\n\n                # now count the number of collisions\n\
    \                for ((i = 0; i < n; i++))\n                do\n             \
    \       for ((j = i + 1; j < n; j++))\n                    do\n              \
    \          if [[ \"${p}\" == ${i} && \"${p}\" == ${j} ]]; then\n             \
    \               c=`expr $c + 1 \\* 2`\n                        fi\n          \
    \              if [[ \"${p}\" == ${j} && \"${p}\" == ${i} ]]; then\n         \
    \                   c=`expr $c + 1 \\* 2`\n                        fi\n      \
    \              done\n                done\n            fi\n        done\n\n  \
    \      # finally, count the number of collisions\n        count=`expr $", "  n=$1\n\
    \  cars=$2\n  while [ $n -gt 0 ]; do\n    collisions=0\n    for ((i=1;i<$n;++i));\
    \ do\n      if (( $(cars=$(expr $cars - 1) > 0 ))); then\n        if (( $(cars=$(expr\
    \ $cars + 1) > 0 )); then\n          collisions=$(( collisions + 1 ))\n      \
    \  fi\n      fi\n    done\n    echo $collisions\n    (( n = n -1 ))\n  done",
  "  n=$1\n  # let the cars move infinitely quickly one at a time\n  sleep 1\n  #\
    \ start with the left car\n  i=0\n  lcar=$(cat /dev/null | head -n $((n*2)) |\
    \ tail -n $((n*2)) | sort -n | head -n 1)\n  while [ $i -lt $((n*2)) ]; do\n \
    \   # move the left car right one space\n    lcar=$(cat /dev/null | head -n $((i))\
    \ | tail -n $((n)) | sort -n | head -n 1)\n    # move the right car left one space\n\
    \    rcar=$(cat /dev/null | tail -n $((n)) | head -n $((i*2)) | sort -n | tail\
    \ -n 1)\n    if [ $lcar != $rcar ]; then\n      echo $((i*2)+1)\n      break\n\
    \    fi\n    i=$((i+1))\n  done\n  echo $((i*2)+1)", "    local count=0\n    local\
    \ i1\n    local i2\n    local x1\n    local x2\n    local y1\n    local y2\n \
    \   local c\n    local h\n    local m\n    local l\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local x1\n    local y1\n    local\
    \ x2\n    local y2\n    local z1\n    local z2\n    local i\n    local j\n   \
    \ local k\n\n    i1=$1\n    i=$((i1-1))\n    j=$((i-1))\n    k=$(seq -s \"${i1}\"\
    \ \"$((${i1}+1))\")\n    while [[ ${k} == *\"$i\"* ]]; do\n        c=$(seq -s\
    \ \"${k}\" \"$((${k}+1))\")\n        x1=$(echo \"${c}\" | sed -e 's/-//g')\n \
    \       y1=$(echo \"${c}\" | sed -e 's/-/+/g')\n        z1=$(echo \"${c}\" | sed\
    \ -e 's/+/\\//g')\n        x2=$(echo \"${c}\" | sed -e 's/-//g')\n        y2=$(echo\
    \ \"${c}\" | sed -e 's/-/+/g')\n        z2=$(echo \"${c}\" | sed -e 's/+/\\//g')\n\
    \        x=$(echo \"${x1} ${x2}\" | tr -s ' ' , | sed -e 's/,//g')\n        y=$(echo\
    \ \"${y1} ${y2}\" | tr -s ' ' , | sed -e 's/,//g')\n        z=$(echo \"${z1} ${z2}\"\
    \ | tr -s ' ' , | sed -e 's/,//g')\n        m=$(echo \"${x} ${y} ${z}\" | tr -d\
    \ '\\n' | sed -e 's/,//g')\n        l=$(echo \"${x} ${y} ${z}\" | tr -s ' ' |\
    \ sed -e 's/,//g')\n        p=$(echo \"${l}\" | tr -d '\\n' | sed -e 's/,//g')\n\
    \        q=$(echo \"${p}\" | tr -d '\\n' | sed -e 's/,//g')\n        r=$(echo\
    \ \"${q}\" | tr -d '\\n' | sed -e 's/,//g')\n        s=$(echo \"${r}\" | tr",
  "  local i\n  local x\n  local y\n  local z\n  local j\n  local n\n  local collision_points\n\
    \  local collision_count\n  local collision\n  local speed\n  local speed2\n \
    \ local speed_factor\n  local collision_points\n  local collision\n  local direction\n\
    \  local direction2\n  local direction_factor\n  local collision_points\n  local\
    \ collision\n  local collision_points\n  local collision\n  local direction\n\
    \  local direction2\n  local direction_factor\n  local collision_points\n  local\
    \ collision\n  local collision_points\n  local collision\n  local direction\n\
    \  local direction2\n  local direction_factor\n  local collision_points\n  local\
    \ collision\n  local collision_points\n  local collision\n  local direction\n\
    \  local direction2\n  local direction_factor\n  local collision_points\n  local\
    \ collision\n  local collision_points\n  local collision\n  local direction\n\
    \  local direction2\n  local direction_factor\n  local collision_points\n  local\
    \ collision\n  local collision_points\n  local collision\n  local direction\n\
    \  local direction2\n  local direction_factor\n  local collision_points\n  local\
    \ collision\n  local collision_points\n  local collision\n  local direction\n\
    \  local direction2\n  local direction_factor\n  local collision_points\n  local\
    \ collision\n  local collision_points\n  local collision\n  local direction\n\
    \  local direction2\n  local direction_factor\n  local collision_points\n  local\
    \ collision\n  local collision_points\n  local collision\n  local direction\n\
    \  local direction2\n  local direction_factor\n  local collision_points\n  local\
    \ collision\n  local collision_points\n  local collision\n  local direction\n\
    \  local direction2\n  local direction_factor\n  local collision_points\n  local\
    \ collision\n  local collision_points\n  local collision\n  local direction\n\
    \  local direction2\n  local direction_factor\n  local collision_points\n  local\
    \ collision\n  local collision_points\n  local collision\n  local direction\n\
    \  local direction2\n  local direction_factor\n  local collision_points\n  local\
    \ collision\n  local collision_points\n  local collision\n  local direction\n\
    \  local direction2\n  local direction_factor\n  local collision_points\n  local\
    \ collision\n  local collision_points\n  local collision\n  local direction\n\
    \  local direction", "    local n=${1:-0}\n\n    # set n to 1 instead of 0 since\
    \ we want n=0 to collide with n=1\n    # and we want the first collision to be\
    \ counted.\n    local collisions=0\n\n    local i\n    local j\n    local collision\n\
    \    local speed\n    local new_speed\n    local x\n    local y\n\n    speed=5\n\
    \    while [ $n -ge 1 ]; do\n        x=$RANDOM\n        y=$RANDOM\n        collision=0\n\
    \        if [ $x -gt $y ]; then\n            # car j is moving right to left while\
    \ car i is moving left to right\n            # check collision\n            for\
    \ ((j=n;j>=0;j--)); do\n                if [ $j -gt 0 ]; then\n              \
    \      collision=$((collision+1))\n                    # if we're still colliding,\
    \ check speed\n                    if [ $collision -gt 1 ]; then\n           \
    \             new_speed=$((speed-1))\n                        # if the cars are\
    \ moving too fast, stop.\n                        if [ $new_speed -le 0 ]; then\n\
    \                            new_speed=0\n                        fi\n       \
    \                 speed=$new_speed\n                    fi\n                fi\n\
    \            done\n        fi\n        # if we still have no collisions\n    \
    \    if [ $collision -eq 0 ]; then\n            collisions=$((collisions+1))\n\
    \            i=$((n+1))\n            n=$((n-1))\n        fi\n        echo $collisions\n\
    \    done", "  local n=$1\n  for i in $(seq $n); do\n    local left=$(($i / 4))\n\
    \    local right=$(($i % 4))\n    local left2=$(($left + 1))\n    local right2=$(($right\
    \ + 1))\n    if [ $left -le $n ] && [ $right -ge $n ] && \\\n       [ $left2 -le\
    \ $n ] && [ $right2 -ge $n ]; then\n      local left_collisions=$((\n        ${collision_count_car_race\
    \ $left}\n        - ${collision_count_car_race $left2}\n        - ${collision_count_car_race\
    \ $right2}))\n      local right_collisions=$((\n        ${collision_count_car_race\
    \ $right}\n        - ${collision_count_car_race $right2}\n        - ${collision_count_car_race\
    \ $left2}))\n      echo $((\n        ($left_collisions + $right_collisions) /\
    \ 2\n      ))\n    fi\n  done", "        local N=$1\n        local i=0\n     \
    \   local j=0\n        local c\n        while [ $i -lt $N ] ; do\n           \
    \     j=`expr $i + $j`\n                c=`expr $i \\* $j`\n                if\
    \ [ $c -lt $N ]; then\n                        i=$j\n                        j=`expr\
    \ $i + $j`\n                        c=`expr $i \\* $j`\n                     \
    \   echo $c\n                        i=$j\n                fi\n        done",
  "  read -p \"Enter the value for n (positive integer):\" n\n  while (( ! $n ));\
    \ do\n    read -p \"You must enter a positive integer: \" n\n  done\n  local num_collisions=0\n\
    \  while (( $n )); do\n    if (( $n % 2 )); then\n      num_collisions=$(( $num_collisions\
    \ + $(( $n - 1 )%$n ) ))\n    fi\n    (( n = $(( n / 2 )) ))\n  done\n  printf\
    \ \"There are %d cars colliding in race.\\n\" $num_collisions", "\tlocal cars=$1\n\
    \tlocal num_collisions=0\n\tlocal i=2\n\twhile [ $i -lt $cars ]; do\n\t\twhile\
    \ [ $i -lt $cars ]; do\n\t\t\tlocal j=$(( i + cars ))\n\t\t\tlocal car=$(( j +\
    \ cars ))\n\t\t\tlocal distance=$(expr $(echo \"$i $j - $car * $car\" | bc -l))\n\
    \t\t\tif [ $distance -eq 0 ]; then\n\t\t\t\t(( num_collisions += 1 ))\n\t\t\t\t\
    break\n\t\t\tfi\n\t\t\t(( i += 1 ))\n\t\tdone\n\t\t(( i += 1 ))\n\tdone\n\techo\
    \ $num_collisions", "# Our simulation is just like our racetrack.\n# We just keep\
    \ track of all cars in a set and make them collide.\n# If we go over $1, we output\
    \ that the cars collide.\n# It starts with $1 and then adds one for each collision.\n\
    # It doesn't matter how hard the collisions are, just that there is one more collision\n\
    # after $1 cars are finished.\n  local n=$1\n  local car_count=$n\n  local collision_count=0\n\
    \  # Make $n sets of cars\n  for i in $(seq 0 $(( n - 1 ))); do\n    # Start with\
    \ one car and add a car to the right each time.\n    local car_1=$(expr ${car_count}+1)\n\
    \    local car_2=$(( car_1 + 1 ))\n    echo ${car_1} ${car_2}\n    # Make a collision.\n\
    \    car_2_collision=$(wc -l <<< \"1 0 0 0 0 0 0 0 0 0 0 0\"| bc -l | awk '{print\
    \ $1}')\n    echo ${car_2_collision}\n    if [ $car_2_collision -ne 0 ]; then\
    \ collision_count=$(( collision_count + 1 )); fi\n    car_count=$(( car_count\
    \ + 1 ))\n  done\n  echo ${collision_count}", "    local race_cars=$1\n    # A\
    \ collision occurs if the set of cars moving left to right collides with the\n\
    \    # set moving left to left.\n    for i in $(seq $race_cars); do\n        local\
    \ right\n        local left\n        if [ $race_cars -gt 1 ]; then\n         \
    \   local ii=$(( race_cars - 1 ))\n            right=\"cars-$ii\"\n          \
    \  left=\"cars-$(( race_cars - 1 ))\"\n        else\n            right=\"cars\"\
    \n            left=\"cars\"\n        fi\n        local right_i=$(( race_cars -\
    \ 1 ))\n        local left_i=$(( race_cars - 1 ))\n        while [ -n \"$right\"\
    \ ] && [ -n \"$left\" ]; do\n            local right_collision=`car_collision\
    \ \"$right\"`\n            if [ $right_collision -ne 0 ]; then\n             \
    \   echo $right_collision\n                race_collision=$(( race_collision +\
    \ 1 ))\n                left=\"cars-$(( left_i + 1 ))\"\n            fi\n    \
    \        local left_collision=`car_collision \"$left\"`\n            if [ $left_collision\
    \ -ne 0 ]; then\n                echo $left_collision\n                race_collision=$((\
    \ race_collision + 1 ))\n                right=\"cars-$(( right_i + 1 ))\"\n \
    \           fi\n            left_i=$(( left_i + 1 ))\n            right_i=$((\
    \ right_i + 1 ))\n        done\n    done\n    echo $race_collision", "    local\
    \ n=$1\n    local n_iters=$2\n    local car other\n\n    for (( i=1; i<=$n_iters;\
    \ i++ )); do\n        # Pick two random cars we haven't seen before.\n       \
    \ other=$(( $RANDOM % $n ))\n        car=$(( $RANDOM % $n ))\n\n        # Pick\
    \ an angle that's uniformly distributed.\n        local angle=$(( 360 / $n ))\n\
    \        local counter=0\n\n        while [[ ! -z \"${CAR_COLLISIONS[$car,$other]}\"\
    \ ]] \\\n          && [[ ${CAR_COLLISIONS[$car,$other]} -eq 0 ]]; do\n       \
    \     ((counter++))\n            local u=$(( $RANDOM % 2 ))\n            local\
    \ v=$(( $RANDOM % 2 ))\n            local u_p=$(( u * $angle + $angle / 2 ))\n\
    \            local v_p=$(( v * $angle + $angle / 2 ))\n            other=$(( $RANDOM\
    \ % $n ))\n            car=$(( $RANDOM % $n ))\n            if (( $u_p == 0 &&\
    \ $v_p == 0 )); then\n                (( u_p == 1 )) && (( v_p == 1 ))\n     \
    \       fi\n            local collision_angle_rad=$(( 180 / $n ))\n          \
    \  local collision_angle=$(( collision_angle_rad * $counter ))\n            #\
    \ Make sure the collision angles are inside the car's range\n            local\
    \ collision_angle_rad=$(( collision_angle_rad * $counter ))\n            local\
    \ collision_angle=$(( collision_angle_rad * $counter ))\n            local collision_angle_p=$((\
    \ collision_angle * $angle + $angle / 2 ))\n            if (( $collision_angle\
    \ < $(car-$other) || $collision_angle > $(car+$other) ));\n            then continue\n\
    \            fi\n            # Make sure the collision angles are inside the car's\
    \ range\n            local collision_angle_rad=$(( collision_angle_rad * $counter\
    \ ))\n            local collision_angle=$(( collision_angle_rad * $counter ))\n\
    \            local collision_angle_p=$(( collision_angle * $angle + $angle / 2\
    \ ))\n            if (( $collision_angle_p == 0 )); then\n                if ((\
    \ $collision_angle_p < $(car-$other) || $collision_angle_p == $(car", "  echo\
    \ $(find \"${CAR_HOME}/Cars_Race\" -type f -name '*$*' -exec awk -F\"[()]\" '{OFS=\"\
    \\\\\\\";print $1, $3, $4\" \"$5}' {} \\; | sort -k 2 | uniq -c | sort -nr | sed\
    \ -e 's/^ *//g' -e 's/ *$//g' | tail -n 1)", "  local NUM_COLLISIONS\n  # Simulate\
    \ each of the $1 cars colliding with the rest of the cars.\n  # Each time there\
    \ is a collision, increment $NUM_COLLISIONS.\n  # We start counting at the beginning,\
    \ so this number will be one greater.\n  NUM_COLLISIONS=1\n  for i in $(seq 1\
    \ $1); do\n    while true; do\n      NUM_COLLISIONS=$(($NUM_COLLISIONS + 1))\n\
    \      true\n    done\n  done\n  echo $NUM_COLLISIONS", "  local n=$1\n  local\
    \ collisions=0\n  while [ $n -gt 0 ]; do\n    if [ $n -eq 1 ]; then\n      local\
    \ collisions=$collisions + 1\n      echo \"$collisions collisions found\"\n  \
    \    break\n    fi\n    local collisions=$collisions + 1\n    local j=$(( $n-1\
    \ ))\n    local i\n    local x\n    local y\n    local speed=$(( 2*$(n-1) ))\n\
    \    while [ $j -gt 0 ]; do\n      i=$(( $j-1 ))\n      x=$(( 2*$j+1 ))\n    \
    \  y=$(( 2*$i+1 ))\n      if [ $x -gt $n ]; then\n        x=$(( $n-1 ))\n    \
    \  fi\n      if [ $y -gt $n ]; then\n        y=$(( $n-1 ))\n      fi\n      collisions=$collisions\
    \ + 1\n      # echo \"$n $i $x $y\"\n      local xx xxx yyyy yyy xxx yyy\n   \
    \   # echo \"$n $i $x $y\"\n      xxx=$(( $xx + ($i-$j)*$speed ))\n      xxx=$((\
    \ $xxx % 2 ))\n      yyyy=$(( $yyyy + ($j-$i)*$speed ))\n      yyyy=$(( $yyyy\
    \ % 2 ))\n      yyy=$(( $yyy + ($i-$j)*$speed ))\n      yyy=$(( $yyy % 2 ))\n\
    \      xx =$(( $xx + (2*$i-$j)*$speed ))\n      xx =$(( $xx % 2 ))\n      yy =$((\
    \ $yy + (2*$j-$i)*$speed ))\n      yy =$(( $yy % 2 ))\n      # echo \"$n $i $x\
    \ $y\"\n      if [ $xx -eq 0 ]; then\n        echo \"$n $i $x $y collides with\
    \ $j\"\n      fi\n      if [ $yy -eq 0 ]; then\n        echo \"$n $i $x $y collides\
    \ with $i\"\n      fi\n      if [ $xx -eq $yy ]; then\n        echo \"$n $i $x\
    \ $y collides with $x\"\n      fi\n      if [ $xx -eq 0 ] || [ $yy -eq 0 ]; then\n\
    \        echo \"$n $i $x $y collides with $y\"\n      fi\n", " local collision_num=0;\n\
    \ for (( c=$1; c<=$NUM_CARS; c+=1 ));\n  do\n   for (( r=$NUM_CARS; r>=$1; r-=1\
    \ ));\n   do\n    collision_num=$(echo \"$collision_num + $(car_collision \"$c\"\
    \ \"$r\")\" | bc -l );\n   done\n  done\n  echo $collision_num;", "\t# This function\
    \ finds the number of collisions between two sets of\n\t# infinitely sturdy cars.\n\
    \n\tlet i=\"$1\"\n\tlet j=\"$2\"\n\tlet collisions=0\n\tlet x=\"$((${i} + 1))\"\
    \n\tlet y=\"$((${j} + 1))\"\n\tlet a=\"$((${i} + ${j} - 1))\"\n\tlet b=\"$((${i}\
    \ + ${j} + 1))\"\n\tlet c=\"$((${i} + ${j} + ${i} + ${j} + 1))\"\n\tlet d=\"$((${i}\
    \ + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j}\
    \ + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i}\
    \ + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j}\
    \ + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i}\
    \ + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j}\
    \ + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i}\
    \ + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j}\
    \ + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i}\
    \ + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j} + ${i} + ${j", "    local n=$1\n\
    \    # $2 has a value of 1 if the left car moved more to the right than the right\n\
    \    # car; otherwise it has a value of 0.\n    local l=`echo \"$n $2\" |\n  \
    \      awk '{print $1}'`\n    local r=`echo \"$n $2\" |\n        awk '{print $3}'`\n\
    \    local result=0\n    while [[ $l -lt r ]]; do\n        result=$((result+1))\n\
    \        l=$((l+1))\n    done\n    echo $result", "  if [ $1 = 1 ]; then\n   \
    \ exit 1\n  fi\n\n  for i in `seq 1 $2`; do\n    let car_length=$((car_length\
    \ + 1))\n  done\n  ((collisions=collisions + 1))\n  echo \"$collisions collisions\
    \ detected in car_race_collision()\"", "\tlocal n=$1\n\tlocal simultaneous_collisions=0\n\
    \tlocal collisions=0\n\n\t(( n > 0 )) || {\n\t\techo \"Usage: $0 n\" >&2\n\t\t\
    exit 2\n\t}\n\n\tlocal directions=(\n\t\t1\n\t\t1\n\t\t-1\n\t\t-1\n\t)\n\n\tfor\
    \ i in $(seq 1 $n); do\n\t\t(( i )) || continue\n\t\tlocal car1=${directions[$((\
    \ $RANDOM % 4 ))]}\n\t\tlocal car2=${directions[$(( $RANDOM % 4 ))]}\n\t\tlocal\
    \ dist1=$(( $RANDOM % 1000 ))\n\t\tlocal dist2=$(( $RANDOM % 1000 ))\n\n\t\tlocal\
    \ car1_pos=${sim:get_position(car1)}\n\t\tlocal car2_pos=${sim:get_position(car2)}\n\
    \n\t\tlocal distance1=$(echo $(( $car1_pos - $car2_pos )) | bc)\n\n\t\tif [ $distance1\
    \ -ge $dist2 ]; then\n\t\t\tcollisions=$(( $collisions + 1 ))\n\t\telse\n\t\t\t\
    simultaneous_collisions=$(( $simultaneous_collisions + 1 ))\n\t\tfi\n\tdone\n\n\
    \techo \"$simultaneous_collisions, $collisions\"", "# Write your code here.\n",
  "  local car_count=$1\n  local collision_count=0\n  local collision_start\n  local\
    \ collision_end\n  local i\n  local j\n  local collision\n  local collision_start\n\
    \  local collision_end\n  local collision_start_pos\n  local collision_end_pos\n\
    \  local car_start\n  local car_end\n  local collision_start_pos\n  local collision_end_pos\n\
    \  local car_start_pos\n  local car_end_pos\n  local car_start_pos_previous\n\
    \  local car_end_pos_previous\n  local car_start_pos_next\n  local car_end_pos_next\n\
    \  local car_start_pos_previous\n  local car_end_pos_previous\n  local car_start_pos\n\
    \  local car_end_pos\n  local car_start_pos_previous\n  local car_end_pos_previous\n\
    \  local car_start_pos_next\n  local car_end_pos_next\n  for (( i = 1; i <= car_count;\
    \ i++ )); do\n    car_start_pos=$(( $i * CAR_RADIUS + CAR_START_POS_DELTA ))\n\
    \    car_end_pos=$(( $i * CAR_RADIUS + CAR_START_POS_DELTA ))\n    collision_start_pos=$((\
    \ $i * CAR_RADIUS + CAR_START_POS_DELTA - CAR_START_POS_DELTA ))\n    collision_end_pos=$((\
    \ $i * CAR_RADIUS + CAR_START_POS_DELTA - CAR_START_POS_DELTA ))\n    for (( j\
    \ = 2; j <= car_count; j++ )); do\n      car_start_pos=$(( $j * CAR_RADIUS + CAR_START_POS_DELTA\
    \ ))\n      car_end_pos=$(( $j * CAR_RADIUS + CAR_START_POS_DELTA ))\n      collision_start_pos=$((\
    \ $j * CAR_RADIUS + CAR_START_POS_DELTA - CAR_START_POS_DELTA ))\n      collision_end_pos=$((\
    \ $j * CAR_RADIUS + CAR_START_POS_DELTA - CAR_START_POS_DELTA ))\n      if [[\
    \ $i -eq j ]]; then\n        (( collision_count += 1 ))\n        continue\n  \
    \    fi\n      if [[ ! -e \"$CAR_START_POS_FILE\" ]] \\\n       && [[ ! -e \"\
    $CAR_END_POS_FILE\" ]] \\", "  n=$1\n  [ $n -gt $(nc) ] || return 0\n  s=0\n \
    \ for i in {1..n}\n  do\n    for j in {i+1..n}\n    do\n      s=`expr $s + $((i*n\
    \ + j*n + n*(n-i)*(n-j)))`\n    done\n  done\n  echo $s", "    local n=$1\n  \
    \  local collision_counter=1\n    local i_start\n    local i\n    local j\n  \
    \  local start_i_min\n    local end_i_min\n    local start_i_max\n    local end_i_max\n\
    \    local i_min\n    local i_max\n    local j_min \n    local j_max\n    local\
    \ start_i \n    local end_i \n    local start_j\n    local end_j\n    local start_i\n\
    \    local end_i\n    local start_j\n    local end_j\n    local collision_counter\n\
    \    local i\n    local j\n    local x_min\n    local x_max\n    local y_min\n\
    \    local y_max\n    local x_min_max\n    local y_min_max\n    local x_min_j\n\
    \    local x_max_j\n    local y_min_j\n    local y_max_j\n    local x_min_i\n\
    \    local x_max_i\n    local y_min_i\n    local y_max_i\n    local start_i_min\n\
    \    local start_i_max\n    local end_i_min\n    local end_i_max\n    local start_j_min\n\
    \    local start_j_max\n    local end_j_min\n    local end_j_max\n    local x_min\n\
    \    local x_max\n    local y_min\n    local y_max\n    local i\n    local j\n\
    \    local x_min\n    local x_max\n    local y_min\n    local y_max\n    local\
    \ x_min_max\n    local y_min_max\n    local x_min_j\n    local x_max_j\n    local\
    \ y_min_j\n    local y_max_j\n    local x_min_i\n    local x_max_i\n    local\
    \ y_min_i\n    local y_max_i\n    local collision_counter\n    local x_min\n \
    \   local x_max\n    local y_min\n    local y_max\n    local start_i_min\n   \
    \ local start_i_max\n    local end_i_min\n    local end_i_max\n    local start_j_min\n\
    \    local start_j_max\n    local end_j_min\n    local end_j_max\n    local i\n\
    \    local j\n    local x_min\n    local x_max\n    local y_min\n    local y_max\n\
    \    local i\n    local j\n    local x_min\n    local x_max\n    local y_min\n\
    \    local y_max\n    local start_i_min\n    local start_i_max\n    local end_i_min\n\
    \    local end_", "    local n=\"$1\"\n    echo \"$((n*(n-1)/2))\" |\n    {\n\
    \        for ((i=0; i<n; ++i)); do\n            local j=0\n            local k=$((n-i-1))\n\
    \            echo \"$((i*(n-i)/2))\"\n            for ((j=0; j<k; ++j)); do\n\
    \                echo \"$((i*j))\"\n            done\n        done\n    } |\n\
    \    uniq -c", "    local n\n    while ((n > 0)); do\n        ((n--))\n      \
    \  if ((n > 0)); then\n            ((n=(n+1)))\n        fi\n    done", "  N=$1\n\
    \  i=1\n  j=0\n  while [ $i -le $N ]\n  do\n    j=$(( $j + $i ))\n    i=$(( $i\
    \ + 1 ))\n  done\n  echo $j", "    \n    local n=$1\n\n    # n <= 0\n    if [\
    \ $n -lt 1 ]\n    then\n        echo \"$0: invalid argument to car_race_collision:\
    \ $n\" >&2\n        return 1\n    fi\n\n    # make collision count an accumulator\n\
    \    local collision_count \n    collision_count=0\n    \n    # count cars that\
    \ collide\n    while [ $n -gt 0 ]; do\n        collision_count=$((collision_count+1))\n\
    \        \n        local collision_count_tmp=$collision_count\n        \n    \
    \    # find two cars whose trajectories don't collide \n        # $n cars are\
    \ colliding if the following two tests are both true:\n        #   1. The first\
    \ pair of cars aren't moving\n        #   2. The second pair of cars aren't moving\
    \ left to right\n        for ((j=0; j<$n; j++)); do\n            \n          \
    \  local j1=$((j+1))\n            \n            if [ $j1 -eq $j ]\n          \
    \  then\n                local j2=j\n            else\n                local j2=$((j+1))\n\
    \            fi\n            \n            # Cars $j and $j1 are colliding if\
    \ they have different speeds\n            if [ $j -ne $j1 ]\n            then\n\
    \                # cars $j and $j1 are colliding if their trajectories are moving\
    \ left to right\n                local collision_test=`get_collision_test $j $j1\
    \ $collision_count_tmp $collision_count`\n                \n                if\
    \ [ -z \"$collision_test\" ]\n                then\n                    collision_count=$((collision_count+1))\n\
    \                else\n                    collision_count=$collision_test\n \
    \               fi\n            fi\n        done\n        \n        n=$((n-$collision_count))\n\
    \    done\n\n    echo \"$collision_count\"", "    local n=$1\n    local collisions=0\n\
    \    local i\n\n    # $2 is a vector of integers indicating the directions\n \
    \   # a car will travel.\n    local x\n    local y\n    local dir\n\n    # $3\
    \ is a vector of integers indicating the speeds of cars\n    # in a given collision.\n\
    \    local xold\n    local yold\n    local dirold\n\n    local xc\n    local yc\n\
    \    local dirc\n\n    local xnew\n    local ynew\n    local dirnew\n\n    # $4\
    \ is a vector of integers indicating whether a car is\n    # colliding with another\
    \ car.\n    local colliding\n    local i\n\n    for (( i = 0; i <= n; i++ ));\
    \ do\n        x=$((i+1))\n        y=$((i+1))\n        dir=`expr $i \\* 2`\n\n\
    \        xold=$((i+1))\n        yold=$((i+1))\n        dirold=`expr $i \\* 2`\n\
    \n        xc=$((i+1))\n        yc=$((i+1))\n        dirc=`expr $i \\* 2`\n\n \
    \       xnew=$((i+1))\n        ynew=$((i+1))\n        dirnew=`expr $i \\* 2`\n\
    \n        colliding=$(( 0 ))\n\n        for (( j = 0; j <= n; j++ )); do\n   \
    \         # Check if car $i collides with car $j\n            local xj=$((j+1))\n\
    \            local yj=$((j+1))\n            local dirj=`expr $j \\* 2`\n\n   \
    \         if [ $(( i )) -ne $(( j )) ]; then\n                # If colliding with\
    \ car  $j\n                if [ $(( i )) -eq $(( j  )) ]; then\n             \
    \       # Collision only occurs when $i and $j are at same location\n        \
    \            if [ $x -eq $xj ] && [ $y -eq $yj ]; then\n                     \
    \   if [ $dir -eq $dirj ]; then\n                            colliding=$(( 1 ))\n\
    \                            break\n                        fi\n             \
    \       fi\n                fi\n\n                # If colliding with car  $i\n\
    \                if [ $x -eq $xj ]; then\n                    if [ $dir -eq $dirj\
    \ ]; then\n                        colliding=$(( 1 ))\n                      \
    \  break\n                    fi\n                fi\n            fi\n       \
    \ done\n\n        if [ $colliding -eq 0 ]; then\n            collisions=$(( collisions\
    \ + 1 ))\n        fi\n    done", "\tlocal i\n\tlocal first_race\n\tlocal second_race\n\
    \tlocal count\n\tlocal count1\n\tlocal count2\n\tlocal count3\n\tlocal count4\n\
    \n\tfirst_race=$1\n\tsecond_race=$2\n\tcount=0\n\tcount1=$((first_race))\n\tcount2=$((first_race))\n\
    \tcount3=$((first_race))\n\tcount4=$((second_race))\n\tfor i in $(seq 1 $((first_race)));\
    \ do\n\t\tcount=$((count + $((count1 * $((count1-1))))));\n\t\tcount1=$((count1\
    \ - 1))\n\tdone\n\tcount=$((count + $((count2 * $((count2-1))))));\n\tcount2=$((count2\
    \ - 1))\n\tfor i in $(seq 1 $((second_race))); do\n\t\tcount=$((count + $((count3\
    \ * $((count3-1))))));\n\t\tcount3=$((count3 - 1))\n\tdone\n\tfor i in $(seq 1\
    \ $((second_race))); do\n\t\tcount=$((count + $((count4 * $((count4-1))))));\n\
    \t\tcount4=$((count4 - 1))\n\tdone\n\techo $((count));", " local cars=$1\n local\
    \ car_collision_count=0\n local car other_car\n local i=0\n local max_car_speed=${max_car_speed:-10}\n\
    \ local min_car_speed=${max_car_speed:-5}\n\n while [ $i -lt $cars ]; do\n   car=$((\
    \ $i + $cars ))\n   other_car=$(( $i - $cars ))\n   # If the cars are moving at\
    \ unpredictable speeds, they could collide.\n   if (( ${car_speeds[$car]} < $min_car_speed\
    \ )) ; then\n     # If car $car has moved past its minimum speed,\n     if ((\
    \ ${car_speeds[$car]} > $max_car_speed )) ; then\n       # Then it could collide.\n\
    \       if (( $other_car > -1 )) ; then\n         car_collision_count=$(( car_collision_count\
    \ + 1 ))\n       fi\n     fi\n   fi\n   i=$(( i + 1 ))\n done\n echo \"$car_collision_count\"",
  "  n=$1\n  car_race_left_to_right $n\n  car_race_right_to_left $n", "    local car\
    \ j\n    local collisions=0\n    \n    for ((j=1; j<$1; j++))\n    do\n      \
    \ for ((i=0; i<$1; i++)); do\n           if (($i+$j == $1)); then\n          \
    \     collisions=$collisions+1\n           fi\n       done\n    done\n\n    return\
    \ $collisions", "  local NUM_CARS=$1\n  # Make sure there are enough cars to get\
    \ a good race condition.\n  if [[ $NUM_CARS -lt 2 ]]; then\n    echo \"$NUM_CARS\
    \ < 2\" >&2\n    return 1\n  fi\n\n  local COLLISIONS=0\n  local STARTING_CARS=$NUM_CARS\n\
    \n  # Loop through all starting cars and try and move them all right.\n  while\
    \ [ $STARTING_CARS -gt 1 ]; do\n    local FIRST_RIGHT=$(( $STARTING_CARS - 1 ))\n\
    \    local SECOND_RIGHT=$(( $STARTING_CARS ))\n\n    # If we can't move any of\
    \ the starting cars, something is wrong.\n    if [ $STARTING_CARS -eq 1 ]; then\n\
    \      echo \"STARTING_CARS was 1\" >&2\n      return 1\n    fi\n\n    # If we\
    \ can't move the second car, something is wrong.\n    if [ $SECOND_RIGHT -eq $NUM_CARS\
    \ ]; then\n      echo \"SECOND_RIGHT is $SECOND_RIGHT\" >&2\n      return 1\n\
    \    fi\n\n    # Move one car to the right, then one car to the left.\n    local\
    \ LEFT=$(( $FIRST_RIGHT - 1 ))\n    local RIGHT=$(( $FIRST_RIGHT ))\n    local\
    \ LEFT_MOVE=1\n    local RIGHT_MOVE=1\n\n    while true; do\n      # Move cars\
    \ one at a time; if the first one is at its destination,\n      # all others have\
    \ moved too far and cannot move any further.\n      local FIRST_LEFT=$(( $FIRST_RIGHT\
    \ - 1 ))\n      local SECOND_LEFT=$(( $FIRST_RIGHT ))\n      local FIRST_MOVE=1\n\
    \      local SECOND_MOVE=1\n\n      while true; do\n        # Move cars one at\
    \ a time; if the first one is at its destination,\n        # all others have moved\
    \ too far and cannot move any further.\n        local FIRST_MOVE=1\n        local\
    \ SECOND_MOVE=1\n\n        local FIRST_LEFT=$(( $FIRST_RIGHT - 1 ))\n        local\
    \ SECOND_LEFT=$(( $FIRST_RIGHT ))\n\n        if [ $FIRST_LEFT -eq $LEFT ]; then\n\
    \          # The cars can't move any further; the second one has moved far.\n\
    \          FIRST_MOVE=1\n        fi\n\n        if [ $SECOND_LEFT -eq $LEFT ];\
    \ then\n          # The cars can't move any further; the second one has moved\
    \ far.\n          SECOND_MOVE=1\n        fi\n\n", "\t# See http://en.wikipedia.org/wiki/One_Dimensional_Collision_Detection\n\
    \tn=$1\n\tx1 y1 x2 y2\n\tx1=$RANDOM\n\ty1=$RANDOM\n\tx2=$RANDOM\n\ty2=$RANDOM\n\
    \tfor i in $(seq 1 \"$n\")\n\tdo\n\t\tx1=$(($x1 + $RANDOM))\n\t\ty1=$(($y1 + $RANDOM))\n\
    \t\tx2=$(($x2 + $RANDOM))\n\t\ty2=$(($y2 + $RANDOM))\n\t\tif [ $((y1 > n)) -eq\
    \ 1 ] && [ $((y2 > n)) -eq 1 ] && [ $((x1 > n)) -eq 1 ] && [ $((x2 > n)) -eq 1\
    \ ]\n\t\tthen\n\t\t\tbreak\n\t\tfi\n\tdone\n\t# http://en.wikipedia.org/wiki/Manhattan_distance\n\
    \tdistance=$(($x2 - $x1)) + $(($y2 - $y1))\n\techo \"$distance\"", "    (( $#\
    \ < 1 )) && return 1\n    (( $# > 2 )) && return 0\n    local cars=${1}\n    local\
    \ collides=0\n    local i\n    local j\n    local moves\n    local move\n    local\
    \ speeds\n    local speed\n    local other\n    local other_speeds\n    local\
    \ other_speed\n    local other_speed_other\n    local other_speed_other2\n   \
    \ local other_speed_other2\n    local other_speed_other3\n    local other_speed_other3\n\
    \    local other_speed_other4\n    local other_speed_other4\n    local other_speed_other5\n\
    \    local other_speed_other5\n    local other_speed_other6\n    local other_speed_other6\n\
    \    local other_speed_other7\n    local other_speed_other7\n    local other_speed_other8\n\
    \    local other_speed_other8\n    local other_speed_other9\n    local other_speed_other9\n\
    \    local other_speed_other10\n    local other_speed_other10\n    local other_speed_other11\n\
    \    local other_speed_other11\n    local other_speed_other12\n    local other_speed_other12\n\
    \    local other_speed_other13\n    local other_speed_other13\n    local other_speed_other14\n\
    \    local other_speed_other14\n    local other_speed_other15\n    local other_speed_other15\n\
    \    local other_speed_other16\n    local other_speed_other16\n    local other_speed_other17\n\
    \    local other_speed_other17\n    local other_speed_other18\n    local other_speed_other18\n\
    \    local other_speed_other19\n    local other_speed_other19\n    local other_speed_other20\n\
    \    local other_speed_other20\n    local other_speed_other21\n    local other_speed_other21\n\
    \    local other_speed_other22\n    local other_speed_other22\n    local other_speed_other23\n\
    \    local other_speed_other23\n    local other_speed_other24\n    local other_speed_other24\n\
    \    local other_speed_other25\n    local other_speed_other25\n    local other_speed_other26\n\
    \    local other_speed_other26\n    local other_speed_other27\n    local other_speed_other27\n\
    \    local other_speed_other28\n    local other_speed_other28\n    local other_speed_other29\n\
    \    local other_speed_other29\n    local other_speed_other30\n    local other_speed_other30\n\
    \    local other_speed_other31\n    local other_speed_other31\n    local other_speed_other32\n\
    \    local other_speed_", "  local n=$1\n  local n_x=10\n  local n_y=10\n  local\
    \ dx=0.01\n  local dy=0.01\n  local t=0\n  local n_collisions=0\n  while [ $t\
    \ -lt n ]; do\n    local x=$(( $n_x*t ))\n    local y=$(( $n_y*t ))\n    local\
    \ x_max=$(( $n_x*t ))\n    local y_max=$(( $n_y*t ))\n    local x_min=$(( $n_x*t\
    \ ))\n    local y_min=$(( $n_y*t ))\n    local r=$(( $(( $n_x*$n_y*t )) ))\n\n\
    \    local xr=$(echo \"$x+$dx*($t+1)\" | bc)\n    local yr=$(echo \"$y+$dy*($t+1)\"\
    \ | bc)\n    local x_max=$(echo \"$xr | bc -l\")\n    local y_max=$(echo \"$yr\
    \ | bc -l\")\n    local x_min=$(echo \"$xr - $dx*($t+1)\" | bc)\n    local y_min=$(echo\
    \ \"$yr - $dy*($t+1)\" | bc)\n    local n_collisions=$(( $n_collisions + $(r >\
    \ $n_x*$n_y ) ))\n    local t=$(( $t+1 ))\n  done\n  return $n_collisions", " \
    \   local i\n    local count=0\n    local left=$1\n    local right=$(($left -\
    \ 1))\n    local direction\n    local left_speed\n    local right_speed\n    local\
    \ left_count\n    local right_count\n    local left_count\n    local right_count\n\
    \    local i\n    local j\n    local first_step\n    local last_step\n    local\
    \ speed\n    local speeds\n    local speed\n    local i\n    local first_step\n\
    \    local last_step\n    local speed\n    local speeds\n    local speed\n   \
    \ local i\n    local first_step\n    local last_step\n    local speed\n    local\
    \ speeds\n    local speed\n    local i\n    local first_step\n    local last_step\n\
    \    local speed\n    local speeds\n    local speed\n    local i\n    local first_step\n\
    \    local last_step\n    local speed\n    local speeds\n    local speed\n   \
    \ local i\n    local first_step\n    local last_step\n    local speed\n    local\
    \ speeds\n    local speed\n    local j\n    local first_step\n    local last_step\n\
    \    local speed\n    local speeds\n    local speed\n    local i\n    local first_step\n\
    \    local last_step\n    local speed\n    local speeds\n    local speed\n   \
    \ local j\n    local first_step\n    local last_step\n    local speed\n    local\
    \ speeds\n    local speed\n    local i\n    local first_step\n    local last_step\n\
    \    local speed\n    local speeds\n    local speed\n    local j\n    local first_step\n\
    \    local last_step\n    local speed\n    local speeds\n    local speed\n   \
    \ local i\n    local first_step\n    local last_step\n    local speed\n    local\
    \ speeds\n    local speed\n    local j\n    local first_step\n    local last_step\n\
    \    local speed\n    local speeds\n    local speed\n    local i\n    local first_step\n\
    \    local last_step\n    local speed\n    local speeds\n    local speed\n   \
    \ local j\n    local first_step\n    local last_step\n    local speed\n    local\
    \ speeds\n    local speed\n    local i\n    local first_step\n    local last_step\n\
    \    local speed\n    local speeds\n    local speed\n    local j\n    local first_step\n\
    \    local last_step\n    local speed\n", "    local n=$1\n    local speed=1\n\
    \    local car_1_x=`expr ${speed}*$((n/2))`\n    local car_2_x=`expr ${speed}*$((n/2))`\n\
    \n    # car_1_y must be between 0 and 100\n    # car_2_y must be between 0 and\
    \ 100\n    local car_1_y=$RANDOM\n    local car_2_y=$RANDOM\n\n    # cars move\
    \ forward by 1 each step\n    # cars move backward by -1 each step\n    local\
    \ move_1=1\n    local move_2=1\n    local car_1_x_adjust=`expr ${move_1}*$((n/2))`\n\
    \    local car_2_x_adjust=`expr ${move_2}*$((n/2))`\n\n    # check each collision,\
    \ outputting collision count if necessary\n    local car_1_hit=0\n    local car_2_hit=0\n\
    \    while [[ $car_1_x == \"$car_2_x\" && $car_1_y == \"$car_2_y\" ]]\n    do\n\
    \        car_1_x=`expr ${car_1_x} - $car_1_x_adjust`\n        car_2_x=`expr ${car_2_x}\
    \ - $car_2_x_adjust`\n        car_1_y=$RANDOM\n        car_2_y=$RANDOM\n     \
    \   ((car_1_hit+=(${car_1_hit}))&1)\n        ((car_2_hit+=(${car_2_hit}))&1)\n\
    \    done\n\n    # output\n    echo $car_1_hit", "    local car_number=$1\n  \
    \  local left_speed=0\n    local right_speed=0\n    local left_speed_x=0\n   \
    \ local right_speed_x=0\n    local left_speed_y=0\n    local right_speed_y=0\n\
    \    local car1_x\n    local car1_y\n    local car2_x\n    local car2_y\n    local\
    \ car1_x\n    local car1_y\n    local car2_x\n    local car2_y\n    local car1_x\n\
    \    local car1_y\n    local car2_x\n    local car2_y\n    local car1_x\n    local\
    \ car1_y\n    local car2_x\n    local car2_y\n    local car1_x\n    local car1_y\n\
    \    local car2_x\n    local car2_y\n    local car1_x\n    local car1_y\n    local\
    \ car2_x\n    local car2_y\n    local car1_x\n    local car1_y\n    local car2_x\n\
    \    local car2_y\n    local car1_x\n    local car1_y\n    local car2_x\n    local\
    \ car2_y\n    local car1_x\n    local car1_y\n    local car2_x\n    local car2_y\n\
    \    local car1_x\n    local car1_y\n    local car2_x\n    local car2_y\n    local\
    \ car1_x\n    local car1_y\n    local car2_x\n    local car2_y\n    local car1_x\n\
    \    local car1_y\n    local car2_x\n    local car2_y\n    local car1_x\n    local\
    \ car1_y\n    local car2_x\n    local car2_y\n    local car1_x\n    local car1_y\n\
    \    local car2_x\n    local car2_y\n    local car1_x\n    local car1_y\n    local\
    \ car2_x\n    local car2_y\n    local car1_x\n    local car1_y\n    local car2_x\n\
    \    local car2_y\n    local car1_x\n    local car1_y\n    local car2_x\n    local\
    \ car2_y\n    local car1_x\n    local car1_y\n    local car2_x\n    local car2_y\n\
    \    local car1_x\n    local car1_y\n    local car2_x\n    local car2_y\n    local\
    \ car1_x\n    local ", "  local n=$(echo \"$1\" | bc)\n  local i\n  local collisions=0\n\
    \  for ((i=1; i<=$((n+1)); i++)) ; do\n    local j\n    local collisions_with_car=0\n\
    \    for ((j=1; j<=$((n+1)); j++)) ; do\n      collisions_with_car=$((collisions_with_car+1))\n\
    \    done\n    ((collisions=$collisions+1))\n    ((collisions=$collisions-collisions_with_car))\n\
    \  done\n  echo \"$collisions\"", "\t\n\tdeclare -i i\n\t\n\t# Loop through all\
    \ possible combinations of cars, pick the first that collides\n\tfor i in {1..$1}\
    \ {\n\t\t\n\t\tdeclare -i j\n\t\tfor j in {1..$1} {\n\t\t\n\t\t\t# Each car collides\
    \ its previous car in exactly one turn.  (We\n\t\t\t# are assuming each car drives\
    \ continuously until it hits\n\t\t\t# another car.)\n\t\t\t#\n\t\t\t# So, if the\
    \ distance between cars i and j is m, then\n\t\t\t# m^2 - m is the distance from\
    \ cars i and j that collide\n\t\t\tdeclare -i distance=0\n\t\t\tif (( ( $(( $i\
    \ - 1 )) < $j )) && (( $(( $j - 1 )) < $i ))) {\n\t\t\t\tdistance=$(( $(( $i -\
    \ 1 )) * ( $(( $i - 1 )) )) - ( $(( $j - 1 )) * ( $(( $j - 1 )) )) )\n\t\t\t}\n\
    \t\t\t\n\t\t\t# If the distance is less than or equal to m, then collision\n\t\
    \t\tif (( $distance <= $(( $i * $i )) )) {\n\t\t\t\t\n\t\t\t\t# Save the index\
    \ of the first colliding car\n\t\t\t\tdeclare -i collided_car\n\t\t\t\tif (( $collided_car\
    \ = -1 )) {\n\t\t\t\t\tcollided_car=$i\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t# Break out\
    \ of the inner loop\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t# Break\
    \ out of the outer loop\n\t\tbreak\n\t}\n\t\n\t# Return the number of collisions\n\
    \techo $collided_car", "    local n=$1\n    local tamano\n    local coxia\n  \
    \  local d\n    local i\n    local j\n    local k\n    local dta\n    local e\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    ", "  local n=$1\n  local collisions=0\n\
    \  local left=0\n  local right=$((n-1))\n  for ((i=0; i<n; i++)); do\n    while\
    \ ((i<left)); do\n      ((collisions++))\n      ((i++))\n    done\n    while ((i>right));\
    \ do\n      ((collisions++))\n      ((i--))\n    done\n  done\n  echo $collisions",
  "  local i collisions\n  collisions=0\n  for i in $(seq 0 $1);do\n    for j in $(seq\
    \ 1 $1);do\n      if [[ $((i - j)) -gt 0 ]]; then\n        if [[ $((i + j)) -gt\
    \ 0 ]]; then\n          collisions=$((collisions + 1))\n        fi\n      fi\n\
    \    done\n  done\n  echo $collisions", "    local n=$1\n\n    local left_race_cars\n\
    \    local right_race_cars\n    local other_cars\n\n    local left_collisions\n\
    \    local right_collisions\n    local other_collisions\n\n    if [ $n -eq 1 ];\
    \ then\n        left_race_cars=${left_race_cars:-}\n        right_race_cars=${right_race_cars:-}\n\
    \        other_cars=${other_cars:-}\n    else\n        left_race_cars=\" \"\n\
    \        right_race_cars=\" \"\n        other_cars=\" \"\n        local i=1\n\
    \        while [ $i -le $n ]; do\n            left_race_cars=\"${left_race_cars}${left_race_cars:+\
    \ }$i\"\n            right_race_cars=\"${right_race_cars}${right_race_cars:+ }$i\"\
    \n            other_cars=\"${other_cars}${other_cars:+ }$i\"\n            i=$((\
    \ $i + 1 ))\n        done\n    fi\n    if [ \"${left_race_cars}\" != \"\" ]; then\
    \ left_collisions=1; fi\n    if [ \"${right_race_cars}\" != \"\" ]; then right_collisions=1;\
    \ fi\n    if [ \"${other_cars}\" != \"\" ]; then other_collisions=1; fi\n    echo\
    \ \"$(( left_collisions + right_collisions + other_collisions + 1 ))\"", "  local\
    \ n=$1\n  local -r car_num=5\n  local -r car_max=$((n - 1))\n  local -r num_collisions=0\n\
    \  while (( num_collisions < car_max )); do\n    local -i i\n    local -i car_pos\n\
    \    # randomly choose two cars\n    i=$(( RANDOM % car_num ))\n    car_pos=$((\
    \ RANDOM % car_num ))\n    if (( car_pos == i )); then\n      i=$(( RANDOM % car_num\
    \ ))\n      car_pos=$(( RANDOM % car_num ))\n    fi\n    # move the first car\n\
    \    car_race_left $(( i - 1 )) $car_pos\n    # move the second car\n    car_race_right\
    \ $(( i + 1 )) $car_pos\n    # check if cars collide\n    (( num_collisions +=\
    \ (car_race_left $(( i + 1 )) $car_pos) >\n      (car_race_right $(( i - 1 ))\
    \ $car_pos) ))\n  done\n  echo $num_collisions", "  local i=$1\n  local collision=0\n\
    \  local total=1\n  local prev=$(expr $i - 1)\n  local next=$(expr $i + 1)\n \
    \ local prevdir\n  local nextdir\n  local prevdiff\n  local nextdiff\n\n  while\
    \ [ $i -le $n ];\n  do\n    prev=$(expr $i - 1)\n    next=$(expr $i + 1)\n\n \
    \   prevdir=$(dir $prev)\n    nextdir=$(dir $next)\n\n    prevdiff=$(expr $prevdir\
    \ - $prev)\n    nextdiff=$(expr $nextdir - $next)\n\n    if (( $prevdiff < 0 ));\n\
    \    then\n      (( prevdiff += 360 ))\n    fi\n\n    if (( $nextdiff < 0 ));\n\
    \    then\n      (( nextdiff += 360 ))\n    fi\n\n    if (( prevdir == nextdir\
    \ ));\n    then\n      (( prevdiff += 180 ))\n    fi\n\n    collision=$(( $collision\
    \ + $prevdiff + $nextdiff ))\n\n    i=$(expr $i + 1)\n  done\n\n  echo $collision",
  "\tlocal n=$1\n\tlocal collisions=0\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal c\n\
    \tlocal s\n\n\t# generate a list of cars one after another (first is left, second\
    \ right)\n\tlocal first_car\n\tfirst_car=\"$(\n\t\tfor i in {1..n}; do\n\t\t\t\
    printf \"%d\" $i\n\t\tdone\n\t)\"\n\n\t# generate a list of cars one after another\
    \ (first is right, second left)\n\tlocal second_car\n\tsecond_car=\"$(\n\t\tfor\
    \ i in {1..n}; do\n\t\t\tprintf \"-%d\" $i\n\t\tdone\n\t)\"\n\n\techo -n \" ${first_car}...\"\
    \n\techo -n \" ${second_car}...\"\n\n\t# while both cars are moving, keep generating\
    \ collisions\n\twhile (( $(wc -l < \"$HOME/scratch/cclenshaw_projects/car_collision/car_race.txt\"\
    ) < 2*n )); do\n\n\t\t# randomly pick two cars\n\t\tlocal choice1\n\t\tlocal choice2\n\
    \t\tchoice1=$( shuf -i 1-$n )\n\t\tchoice2=$( shuf -i 1-$n )\n\n\t\t# generate\
    \ collision\n\t\ti=$(echo $choice1 | sed 's/\\([0-9]*\\)$/& & \\1/')\n\t\tj=$(echo\
    \ $choice2 | sed 's/\\([0-9]*\\)$/& & \\1/')\n\t\ts=$( echo ${first_car}${second_car}\
    \ | sed \"s/$i $j/${first_car}${second_car}${i}${j}/\" )\n\n\t\t# if collision,\
    \ increment collision counter\n\t\tif [[ $s == ${first_car}${second_car}${i}${j}\
    \ ]]; then\n\t\t\t((collisions++))\n\t\tfi\n\n\t\t# swap cars\n\t\tfirst_car=\"\
    ${first_car}${choice1}\"\n\t\tsecond_car=\"${second_car}${choice2}\"\n\tdone\n\
    \n\techo \"${collisions}\"", "  echo $(echo \"$1\" | awk '{print $1^1}')", "\t\
    local i\n\tlocal n\n\tlocal result\n\tlocal imax\n\timax=$1\n\tresult=0\n\tfor\
    \ (( i=0; i<$imax; i++ )); do\n\t\tlocal i_min\n\t\tlocal i_max\n\t\ti_min=$((\
    \ i+1 ))\n\t\ti_max=$(( i+2 ))\n\t\tn=$(( n+1 ))\n\t\t(( n%2 )) && result=$((\
    \ result+1 ))\n\t\tfor (( j=$i_min; j<$i_max; j++ )); do\n\t\t\tlocal j_min\n\t\
    \t\tlocal j_max\n\t\t\tj_min=$(( j+1 ))\n\t\t\tj_max=$(( j+2 ))\n\t\t\tif [ \"\
    $i\" -gt \"$j\" ]; then\n\t\t\t\tif [ \"$i\" -eq \"$j\" ]; then\n\t\t\t\t\tcontinue\n\
    \t\t\t\tfi\n\t\t\t\tlocal a\n\t\t\t\tlocal b\n\t\t\t\ta=$(( i*$n ))\n\t\t\t\t\
    b=$(( j*$n ))\n\t\t\t\t(( a*$n )) && result=$(( result+1 ))\n\t\t\t\t(( b*$n ))\
    \ && result=$(( result+1 ))\n\t\t\tfi\n\t\tdone\n\tdone\n\techo $result", "  \
    \  local i\n    local n\n    local collisions\n    local n0\n    local n1\n  \
    \  local j\n    local k\n    local c\n    local x0\n    local y0\n    local t1\n\
    \    local t2\n    local z0\n    local z1\n    local x0_c\n    local y0_c\n  \
    \  local z0_c\n    local z1_c\n    local x_c\n    local y_c\n    local z_c\n \
    \   local j_c\n    local k_c\n    local x_c_l\n    local y_c_l\n    local z_c_l\n\
    \    local x_c_r\n    local y_c_r\n    local z_c_r\n    local x_c_u\n    local\
    \ y_c_u\n    local z_c_u\n    local x_c_f\n    local y_c_f\n    local z_c_f\n\
    \    local x_c_s\n    local y_c_s\n    local z_c_s\n    local x_c_e\n    local\
    \ y_c_e\n    local z_c_e\n    local x_c_w\n    local y_c_w\n    local z_c_w\n\
    \    local x_c_n\n    local y_c_n\n    local z_c_n\n    local x_c_ne\n    local\
    \ y_c_ne\n    local z_c_ne\n    local x_c_nw\n    local y_c_nw\n    local z_c_nw\n\
    \    local x_c_se\n    local y_c_se\n    local z_c_se\n    local x_c_sw\n    local\
    \ y_c_sw\n    local z_c_sw\n    local x_c_nwse\n    local y_c_nwse\n    local\
    \ z_c_nwse\n    local x_c_nwsw\n    local y_c_nwsw\n    local z_c_nwsw\n    local\
    \ x_c_nwne\n    local y_c_nwne\n    local z_c_nwne\n    local x_c_nesw\n    local\
    \ y_c_nesw\n    local z_c_nesw\n    local x_c_sesw\n    local y_c_sesw\n    local\
    \ z_c_sesw\n    local x_c_swnw\n    local y_c_swnw\n    local z_c_swnw\n    local\
    \ x_c_swnwse\n    local y_c_swnwse\n    local z_c_swnwse\n    local x_c_swnwsw\n\
    \    local y_c_swnwsw\n    local z_c_swnwsw\n    local x_c_swn", "\tlocal n=$1\n\
    \tlocal t\n\tlocal i car1 car2\n\tlocal count=0\n\tlocal direction=R\n\tlocal\
    \ speed\n\n\twhile (( n )) ; do\n\t\tspeed=1\n\t\twhile (( speed <= N )) ; do\n\
    \t\t\tcar1=$(( ( n - 1 ) % N ))\n\t\t\tcar2=$(( ( n - 2 ) % N ))\n\t\t\tt=$((\
    \ t0 + ( $(( 10 * $(( ( $(( speed / N )) % 10 )) )) )))\n\t\t\twhile (( t <= T\
    \ )) ; do\n\t\t\t\techo ${cars[$car1]}\n\t\t\t\techo ${cars[$car2]}\n\t\t\t\t\
    echo ${cars[$t]}\n\t\t\t\techo ${cars[$(( t + speed ))]}\n\t\t\t\t(( count++ ))\n\
    \t\t\t\tdirection=$(( direction + 1 ))\n\t\t\t\tif (( direction > R )) ; then\n\
    \t\t\t\t\tdirection=L\n\t\t\t\telif (( direction < L )) ; then\n\t\t\t\t\tdirection=R\n\
    \t\t\t\tfi\n\t\t\t\tspeed=$(( speed + 1 ))\n\t\t\t\tif (( speed > N )) ; then\n\
    \t\t\t\t\tspeed=N\n\t\t\t\telif (( speed < N )) ; then\n\t\t\t\t\tspeed=N\n\t\t\
    \t\tfi\n\t\t\t\tt=$(( t + speed ))\n\t\t\tdone\n\t\tdone\n\t\tn=$(( n - 1 ))\n\
    \tdone\n\techo \"${count}\"", "  # Convert the number to a binary string, with\
    \ one bit per digit\n  # (which we count from right to left).  Then count the\
    \ bits in the most\n  # significant bit position.\n  #\n  # Note that this assumes\
    \ that $1 is negative.\n  # In a positive integer, the bits are numbered from\
    \ the most\n  # significant bit to the least significant bit.\n  local -n bits=$((2#$1))\n\
    \  local -n bit_count=0\n  while (( bits )); do\n    (( bit_count++ ))\n    bits=$(echo\
    \ $bits >> 1)\n  done\n  # Now convert the binary string to a decimal number.\n\
    \  # Note that this assumes that $bit_count is positive.\n  # In a positive number,\
    \ the decimal number is equal to the sum of the\n  # corresponding binary digits.\n\
    \  echo $((10#$bit_count)) | bc", "    local n=$1\n    local i\n\n    # Initialize\
    \ a counter that counts the number of collisions.\n    counter=0\n    # Move all\
    \ the cars left or right; then run them through the race against each other.\n\
    \    for i in $(seq 1 $n); do\n        local j\n        # Move the car left or\
    \ right in the opposite direction of its current movement.\n        j=$((i-1))\n\
    \        local distance=$(distance_left $j $i)\n        if [ $distance -gt 0 ];\
    \ then\n            counter=$((counter + 1))\n        fi\n        distance=$(distance_right\
    \ $j $i)\n        if [ $distance -gt 0 ]; then\n            counter=$((counter\
    \ + 1))\n        fi\n    done\n    echo \"$counter\"", "    local n i\n    local\
    \ collision_count\n    local start\n    local end\n    local first_collision\n\
    \n    # Initialize the first collision count.\n    collision_count=0\n\n    #\
    \ Initialize a start time to measure how long the first race ran for.\n    start=$(date\
    \ +%s)\n\n    # Initialize an end time that doesn't count time taken to do all\
    \ the collision\n    # tests.\n    end=$((start + $1))\n\n    # Initialize a flag\
    \ for whether we're in a collision.\n    local first_collision=0\n\n    # Loop\
    \ through the number of iterations.\n    while [ $(( $(date +%s) - start )) -gt\
    \ $end ]\n    do\n        # Find the cars that collide with the first car.\n \
    \       first_collision=$(car_collision_count 1)\n\n        # If we found a collision,\
    \ increment the collision count.\n        if [ $first_collision -gt 0 ]\n    \
    \    then\n            collision_count=$(($collision_count + $first_collision))\n\
    \        fi\n\n        # Loop through the cars and figure out which car collided\
    \ with\n        # which car.\n        for i in $(seq $(( ${#car_array[@]} - 1\
    \ ))); do\n            # If we haven't found a collision for the current car,\n\
    \            # increment the collision count.\n            if [ $collision_count\
    \ -eq 0 ]\n            then\n                collision_count=$(($collision_count\
    \ + 1))\n            fi\n\n            # If the current car doesn't collide with\
    \ the first car,\n            # increment the collision count.\n            if\
    \ [ $i -eq 1 ]\n            then\n                collision_count=$(($collision_count\
    \ + 1))\n            fi\n\n            # If the current car collides with the\
    \ previous car,\n            # increment the collision count.\n            if\
    \ [ $(( $(date +%s) - car_time_array[$(( i - 1 ))] )) -gt $(( $(date +%s) - car_time_array[$i]\
    \ )) ]\n            then\n                collision_count=$(($collision_count\
    \ + 1))\n            fi\n\n            # If the current car collides with the\
    \ next car,\n            # increment the collision count.\n            if [ $((\
    \ $(date +%s) - car_time_array[$(( i + 1 ))] )) -gt $(( $(date +%s) - car_time_array[$i]\
    \ )) ]\n            then\n                collision_count=$(($collision_count\
    \ + 1))\n            fi\n        done\n\n        # Advance to the next car.\n\
    \        (( i++ ))\n    done\n\n    # Print out the collision count (should be\
    \ 0).\n    echo \"$collision_count\"", "  local iterations=$1\n  local max_collisions=0\n\
    \  local i\n  local j\n  local car\n  local collision\n  local collisions\n  local\
    \ collision_count\n  local total_count\n  local total_collisions\n  local total_collision_count\n\
    \  local max_speed\n  local max_collision\n  local max_collision_speed\n  local\
    \ current_speed\n  local collision_speed\n  local collision_speeds\n  local collision_speeds_count\n\
    \  local collision_speeds_counts\n  local collision_speeds\n  local collision_speed\n\
    \  local collision_speeds_count\n  local collision_speeds_count_2\n  local speed\n\
    \  local speed_count\n  local speed_counts\n  local speed_counts_2\n  local speed_count\n\
    \  local speeds\n  local speed_counts\n  local speed_count_2\n  local speed_count_2\n\
    \  local speed_counts_2\n  local speed_counts\n  local speed\n  local speeds\n\
    \  local speeds_count\n  local speeds\n  local speed_count\n  local speed_count\n\
    \  local speed_count_2\n  local speed_counts_2\n  local speed_count\n  local speed_count_2\n\
    \  local speeds\n  local speeds\n  local speed_count\n  local speeds\n  local\
    \ speed_count\n  local speed_count\n  local speed_counts_2\n  local speed_counts\n\
    \  local speed_count_2\n  local speed_count\n  local speed_count\n  local speed_counts\n\
    \  local speed_count_2\n  local speed_count\n  local speeds\n  local speeds\n\
    \  local speed_count\n  local speed_count\n  local speed_counts\n  local speed_count_2\n\
    \  local speed_counts\n  local speed_count_2\n  local speed_count\n  local speed_count\n\
    \  local speeds\n  local speeds\n  local speed_count\n  local speed_count\n  local\
    \ speed_counts\n  local speed_count_2\n  local speed_count\n  local speed_count\n\
    \  local speed_count\n  local speeds\n  local speeds\n  local speed_count\n  local\
    \ speed_count\n  local speed_counts\n  local speed_count_2\n  local speed_counts\n\
    \  local speed_count_2\n  local speed_count\n  local speeds\n  local speeds\n\
    \  local speed_count\n  local speed_count\n  local speed_counts\n  local speed_count_2\n\
    \  local speed_", "  local n=$1\n  local i=$1\n  local j=$(( $i - $n + 1 ))\n\
    \  while [ $i -le $n ]; do\n    while [ $j -le $n ]; do\n      [ $i -le $n ] &&\
    \ [ $j -le $n ] && return\n      [ $i -le $n ] && return\n      [ $j -le $n ]\
    \ && return\n      [ $(( i + 1 )) -eq $(( $n + 1 )) ] && return\n      [ $(( j\
    \ + 1 )) -eq $(( $n + 1 )) ] && return\n      j=$(( $j + 1 ))\n    done\n    i=$((\
    \ $i + 1 ))\n  done", "  local cars_left_to_right=\"$1\"\n  local cars_right_to_left=\"\
    $2\"\n  local cars_collisions=\"$3\"\n  local cars_collisions_sum=0\n  local cars_collisions_count_variable=0\n\
    \  local cars_left_to_right_collisions_count_variable=0\n  local cars_right_to_left_collisions_count_variable=0\n\
    \  while true; do\n    local cars_left_to_right_collisions=$((cars_collisions_count_variable+1))\n\
    \    local cars_right_to_left_collisions=$((cars_collisions_count_variable+1))\n\
    \    local cars_collisions_count_variable=\"$((cars_collisions_count_variable+1))\"\
    \n    local cars_collisions_sum=\"$((cars_collisions_sum+cars_collisions_count_variable))\"\
    \n    if [ \"$cars_collisions_sum\" -gt \"$cars_collisions\" ]; then\n      local\
    \ cars_left_to_right_collisions_count_variable=\"$((cars_left_to_right_collisions_count_variable+1))\"\
    \n      local cars_right_to_left_collisions_count_variable=\"$((cars_right_to_left_collisions_count_variable+1))\"\
    \n      local cars_collisions=\"$((cars_collisions+cars_collisions_count_variable))\"\
    \n      local cars_collisions_sum=\"$((cars_collisions_sum+cars_collisions_count_variable))\"\
    \n      local cars_left_to_right_collisions=\"$((cars_left_to_right_collisions+cars_left_to_right_collisions_count_variable))\"\
    \n      local cars_right_to_left_collisions=\"$((cars_right_to_left_collisions+cars_right_to_left_collisions_count_variable))\"\
    \n      local cars_left_to_right_collisions_count_variable=\"$((cars_left_to_right_collisions_count_variable+1))\"\
    \n      local cars_right_to_left_collisions_count_variable=\"$((cars_right_to_left_collisions_count_variable+1))\"\
    \n    fi\n  done\n  echo \"$cars_collisions\"", "    local n=$1\n    local m=$2\n\
    \    local mx=$3\n    local my_index=$4\n    local my_left_index=$5\n    local\
    \ my_right_index=$6\n\n    for ((i=1; i<$n; i++)); do\n        local x=$((i *\
    \ $mx))\n        local left_x=$(((i-1) * $mx))\n        local right_x=$(((i) *\
    \ $mx))\n        local c=0\n        for ((j=0; j<$m; j++)); do\n            local\
    \ left_y=$((j * $my_left_index))\n            local right_y=$((j * $my_right_index))\n\
    \            if ((left_x < $right_x && left_y <= right_y) ||\n               \
    \     (right_x < $left_x && right_y <= left_y)) {\n                c=$((c+1))\n\
    \            fi\n        done\n        echo $((c))\n    done", "\tlet collisions=0\n\
    \tlet collision_limit=$1\n\tlet limit=$(( $collision_limit * 2 ))\n\n\tfor ((\
    \ c = 0; c < $collision_limit; c++ )); do\n\t\tlet collisions=collisions+$(( $collision_limit\
    \ - c ))\n\tdone\n\n\treturn $collisions", "   if [ $1 -eq 1 ] ; then\n      echo\
    \ \"0\"\n   elif [ $1 -eq 2 ] ; then\n      echo \"0\"\n   else\n      echo \"\
    1\"\n   fi", "  local count\n  count=0\n  local max_cars=$1\n  while [ $count\
    \ -le $max_cars ]\n  do\n    while read p1 p2; do\n      local p1x\n      p1x=$(($p1))\n\
    \      local p2x\n      p2x=$(($p2))\n      if [[ $p1x -lt $p2x ]]; then\n   \
    \     echo \"$p1x $p2x\"\n        ((count=count+1))\n      fi\n    done < $TEST/input/road-test\n\
    \n  done < $TEST/input/road-test\n  echo \"$count collisions\"", "  local n=$1\n\
    \  while [[ $n -le 1 ]]; do\n    local left_index=$((n - 1))\n    local right_index=$((n\
    \ - 2))\n    local car_left=${car_list[${left_index}]}\n    local car_right=${car_list[${right_index}]}\n\
    \    local speed=${car_list[${left_index}]:0:2}\n    local direction=${car_list[${right_index}]:0:1}\n\
    \    local left_car=${car_list[${left_index}]}\n    local right_car=${car_list[${right_index}]}\n\
    \    local max_speed=6\n    local max_speed_index=-1\n    local max_speed_car=\"\
    \"\n    local max_speed_car_index=$((n - 1))\n    for ((i=1; i <= ${max_speed_index};\
    \ i++) {\n      local speed=${car_list[$((n - i)):0:2}\n      if [ \"$speed\"\
    \ -gt \"$max_speed\" ]; then\n        max_speed_car=${car_list[$((n - i)):0:2}\n\
    \        max_speed_car_index=$((n - i))\n      fi\n    }\n    if [[ \"$direction\"\
    \ == \"L\" ]]; then\n      if [ \"$speed\" -eq \"$max_speed\" ] || [ \"$speed\"\
    \ -gt \"$max_speed_car\" ]; then\n        ((collision_count++))\n      fi\n  \
    \  else\n      if [ \"$speed\" -eq \"$max_speed\" ] || [ \"$speed\" -gt \"$max_speed_car\"\
    \ ]; then\n        ((collision_count++))\n      fi\n    fi\n    ((n--))\n  done",
  "  local n=$1\n  for i in $(seq 0 $n)\n  do\n    local xpos1=$RANDOM\n    local\
    \ xpos2=$RANDOM\n    while [ $(( ${xpos1} > ${xpos2} )) -eq 0 ]\n    do\n    \
    \  local ypos1=$RANDOM\n      local ypos2=$RANDOM\n      while [ $(( ${ypos1}\
    \ > ${ypos2} )) -eq 0 ]\n      do\n        local zpos1=$RANDOM\n        local\
    \ zpos2=$RANDOM\n        while [ $(( ${zpos1} > ${zpos2} )) -eq 0 ]\n        do\n\
    \          sleep 0.2\n          local xpos3=$RANDOM\n          local xpos4=$RANDOM\n\
    \          while [ $(( ${xpos3} > ${xpos4} )) -eq 0 ]\n          do\n        \
    \    sleep 0.2\n            local ypos3=$RANDOM\n            local ypos4=$RANDOM\n\
    \            while [ $(( ${ypos3} > ${ypos4} )) -eq 0 ]\n            do\n    \
    \          sleep 0.2\n              local zpos3=$RANDOM\n              local zpos4=$RANDOM\n\
    \              while [ $(( ${zpos3} > ${zpos4} )) -eq 0 ]\n              do\n\
    \                sleep 0.2\n                (( ${xpos1} == ${xpos2}) &\n     \
    \             ( ${xpos3} == ${xpos4} ) &\n                  ( ${ypos1} == ${ypos2})\
    \ &\n                  ( ${ypos3} == ${ypos4} ) &\n                  ( ${zpos1}\
    \ == ${zpos2}) &\n                  ( ${zpos3} == ${zpos4} )\n               \
    \ )\n              done\n            done\n          done\n        done\n    \
    \  done\n    done\n    (( ${xpos1} > ${xpos2} )) &\n      (( ${xpos1} > ${xpos3}\
    \ )) &\n      (( ${xpos1} > ${xpos4} )) &\n      (( ${xpos3} > ${xpos2} )) &\n\
    \      (( ${xpos3} > ${xpos4} )) &\n      (( ${ypos1} > ${ypos2} )) &\n      ((\
    \ ${ypos1} > ${ypos3} )) &\n      (( ${ypos1} > ${ypos", "  local i\n\n  (( i\
    \ = $1 ))\n\n  local max\n  local min\n  local minmin\n  local maxmax\n  local\
    \ diff\n  local diffmax\n  local minminmin\n  local minmaxmax\n  local minmaxmin\n\
    \  local maxminmin\n\n  max=$(( $(expr $(expr $i / 4) ) - 1 ))\n  min=$(( $(expr\
    \ $(expr $i / 4)) - 1 ))\n  minmin=$(( $(expr $(expr $i / 8)) - 1 ))\n  maxmax=$((\
    \ $(expr $(expr $i / 4)) - 2 ))\n  diff=$(( $(expr $i / 4) ))\n  diffmax=$(( $(expr\
    \ $(expr $i / 8)) - 2 ))\n  minminmin=$(( $(expr $(expr $i / 16)) - 2 ))\n  minmaxmax=$((\
    \ $(expr $(expr $i / 16)) - 1 ))\n  minmaxmin=$(( $(expr $(expr $i / 32)) - 1\
    \ ))\n  maxminmin=$(( $(expr $(expr $i / 32)) - 2 ))\n\n  # minmaxmin is always\
    \ within minmaxmax\n  (( i == $maxmin ))\n  (( i == $minmax ))\n  (( i == $minmaxmin\
    \ ))\n  (( i == $maxminmin ))\n  (( i == $maxmaxmin ))\n\n  # minmaxmax is always\
    \ within minmaxmin\n  (( i == $maxmin ))\n  (( i == $minmax ))\n  (( i == $minmaxmax\
    \ ))\n  (( i == $maxminmax ))\n\n  # minmaxmin is always within maxminmin\n  ((\
    \ i == $maxmin ))\n  (( i == $minmax ))\n  (( i == $maxminmin ))\n  (( i == $maxmaxmin\
    \ ))\n\n  # minmaxmax is always within maxminmax\n  (( i == $maxmin ))\n  (( i\
    \ == $minmax ))\n  (( i == $minmaxmax ))\n  (( i == $maxminmax ))\n\n  # minmaxmin\
    \ is always within maxmaxmin\n  (( i == $maxmin ))\n  (( i == $minmax ))\n  ((\
    \ i == $minmaxmin ))\n  (( i == $maxmaxmin ))\n\n  # minmaxmax is always within\
    \ maxmaxmax\n  (( i == $max", "  # A function which counts collisions.\n  local\
    \ counter=0\n  local i\n  local car1\n  local car2\n  local collision_point\n\
    \  local car1_x\n  local car1_y\n  local car2_x\n  local car2_y\n  local car1_speed\n\
    \  local car2_speed\n  local car1_distance\n  local car2_distance\n  local direction\n\
    \  local result\n  local car1_start_x\n  local car1_start_y\n  local car2_start_x\n\
    \  local car2_start_y\n  local x\n  local y\n  local speed\n  local distance\n\
    \  local start_x\n  local start_y\n  local x_diff\n  local y_diff\n  local car1_end_x\n\
    \  local car1_end_y\n  local car2_end_x\n  local car2_end_y\n  local car_race_start=$1\n\
    \  local car_race_end=$2\n  car_race_start=$((car_race_start))\n  car_race_end=$((car_race_end))\n\
    \  car1=$(expr $car_race_start + 1)\n  car2=$(expr $car_race_end + 1)\n  for ((car1_i=car1;\
    \ ((car1_i <= car_race_end) && (car1_i >= car_race_start));\n       (car1_i++));\
    \ do\n    car1_x=$(expr $car1_i * $car_race_start)\n    car1_y=$(expr $car1_i\
    \ * $car_race_start + $car_race_start)\n    car1_speed=$(expr $car1_i * $car_race_start\
    \ + $car_race_start + 1)\n    car1_distance=$(expr $car1_i * $car_race_start +\
    \ $car_race_start + $car_race_start + 1)\n    car1_start_x=$(expr $car1_i * $car_race_start\
    \ + $car_race_start + 2)\n    car1_start_y=$(expr $car1_i * $car_race_start +\
    \ $car_race_start + 3)\n    car1_end_x=$(expr $car1_i * $car_race_start + $car_race_start\
    \ + $car_race_start + 4)\n    car1_end_y=$(expr $car1_i * $car_race_start + $car_race_start\
    \ + $car_race_start + 5)\n    for ((car2_i=car2; ((car2_i <= ", "\tlocal n=$1\n\
    \t\n\tlocal t=$2\n\tlocal f=$3\n\t\n\t# Set up n cars\n\tlocal x y=0 z=0 car1x=0\
    \ car1y=0 car1z=0\n\tlocal cars=()\n\tfor (( i=0; i<$n; ++i )); do\n\t\tx=$i*10\n\
    \t\ty=$y*10\n\t\tz=$z*10\n\t\tcar1x=$car1x*10\n\t\tcar1y=$car1y*10\n\t\tcar1z=$car1z*10\n\
    \t\tlocal car2x=$car2x*10\n\t\tlocal car2y=$car2y*10\n\t\tlocal car2z=$car2z*10\n\
    \t\t\n\t\tcar1x=$(( car1x + $z ))\n\t\tcar1y=$(( car1y + $y ))\n\t\tcar1z=$((\
    \ car1z + $x ))\n\t\t\n\t\tcar2x=$(( car2x + $z ))\n\t\tcar2y=$(( car2y + $y ))\n\
    \t\tcar2z=$(( car2z + $x ))\n\t\t\n\t\tlocal car1x_int=$(( car1x + $car2x ))\n\
    \t\tlocal car1y_int=$(( car1y + $car2y ))\n\t\tlocal car1z_int=$(( car1z + $car2z\
    \ ))\n\t\t\n\t\tlocal car2x_int=$(( car2x + $car1x ))\n\t\tlocal car2y_int=$((\
    \ car2y + $car1y ))\n\t\tlocal car2z_int=$(( car2z + $car1z ))\n\t\t\n\t\tlocal\
    \ car1_int=$(( $car1_int + $car2_int ))\n\t\tlocal car2_int=$(( $car2_int + $car1_int\
    \ ))\n\t\t\n\t\tlocal car1x_int_int=$(( $car1x_int + $car2x_int ))\n\t\tlocal\
    \ car1y_int_int=$(( $car1y_int + $car2y_int ))\n\t\tlocal car1z_int_int=$(( $car1z_int\
    \ + $car2z_int ))\n\t\t\n\t\tlocal car2x_int_int=$(( $car2x_int + $car1x_int ))\n\
    \t\tlocal car2y_int_int=$(( $car2y_int + $car1y_int ))\n\t\tlocal car2", "  local\
    \ n=$1\n  local i\n  local colliding\n  colliding=0\n  for (( i=0; i<n; i++ ));\
    \ do\n    colliding=$(($colliding + $(( $(n-i)) )))\n  done\n  echo $colliding",
  "  local n=$1\n  local car_collision_count=0\n  local car_collision_limit=$((2*n-1))\n\
    \  local car_left\n  local car_right\n  local car_left_index\n  local car_right_index\n\
    \  local car_left_value\n  local car_right_value\n  local car\n  local car_left\n\
    \  local car_right\n  local car_left_index\n  local car_right_index\n  local car_left_value\n\
    \  local car_right_value\n  local car\n  local car_left\n  local car_right\n \
    \ local car_left_index\n  local car_right_index\n  local car_left_value\n  local\
    \ car_right_value\n  local car\n  local car_left\n  local car_right\n  local car_left_index\n\
    \  local car_right_index\n  local car_left_value\n  local car_right_value\n  local\
    \ car\n  local car_left\n  local car_right\n  local car_left_index\n  local car_right_index\n\
    \  local car_left_value\n  local car_right_value\n  local car\n  local car_left\n\
    \  local car_right\n  local car_left_index\n  local car_right_index\n  local car_left_value\n\
    \  local car_right_value\n  local car\n  local car_left\n  local car_right\n \
    \ local car_left_index\n  local car_right_index\n  local car_left_value\n  local\
    \ car_right_value\n  local car\n  local car_left\n  local car_right\n  local car_left_index\n\
    \  local car_right_index\n  local car_left_value\n  local car_right_value\n  local\
    \ car\n  local car_left\n  local car_right\n  local car_left_index\n  local car_right_index\n\
    \  local car_left_value\n  local car_right_value\n  local car\n  local car_left\n\
    \  local car_right\n  local car_left_index\n  local car_right_index\n  local car_left_value\n\
    \  local car_right_value\n  local car\n  local car_left\n  local car_right\n \
    \ local car_left_index\n  local car_right_index\n  local car_left_value\n  local\
    \ car_right_value\n  local car\n  ", "  local cars_left_to_right=($(echo \"$1\"\
    \ | sed -e 's/\\(.*\\)//g' | uniq))\n  local cars_right_to_left=($(echo \"$1\"\
    \ | sed -e 's/^.\\{1,\\}//g' | uniq))\n  local number_of_collisions=0\n  for ((car_left_to_right=0;\
    \ car_left_to_right < ${#cars_left_to_right}; car_left_to_right++)); do\n    for\
    \ ((car_right_to_left=0; car_right_to_left < ${#cars_right_to_left}; car_right_to_left++));\
    \ do\n      if [[ ${cars_left_to_right} == ${cars_right_to_left} ]]; then\n  \
    \      ((number_of_collisions++))\n      fi\n    done\n  done\n  echo $number_of_collisions",
  "  local car_count=$1\n\n  local speed\n  speed=10\n\n  # The collision variables\
    \ will hold arrays with different positions for the\n  # cars in the race.\n \
    \ # The cars are initialized to all be on top of each other.\n  # The first car\
    \ collided with is at array[2]\n  # The second car collided with is at array[3]\n\
    \  # The third car collided with is at array[0]\n  # The fourth car collided with\
    \ is at array[1]\n  # The fifth car collided with is at array[4]\n  # The sixth\
    \ car collided with is at array[5]\n  # The seventh car collided with is at array[6]\n\
    \  # The eighth car collided with is at array[7]\n  # The ninth car collided with\
    \ is at array[8]\n  # The tenth car collided with is at array[9]\n  local collision_count=0\n\
    \  collision_count=$(\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local collision_count\n    local collision_count\n    local collision_count\n\
    \    local ", "  # The cars start out moving in a straight line.\n  local n x1\
    \ x2\n  n=$1\n  x1=$2\n  x2=$3\n  local m1 m2 m3 m4\n  # We have a list of cars.\
    \  Each car has a position and velocity.\n  # The positions are all positive.\
    \  The velocities are all positive.\n  # We start out with the list of cars as\
    \ follows:\n  m1=$(echo \"$x1 * n\" | bc)\n  m2=$(echo \"$x2 * n\" | bc)\n  m3=$(echo\
    \ \"$x1 * n - $x2 * n\" | bc)\n  m4=$(echo \"$x1 * n - $x2 * n + $x1 * n\" | bc)\n\
    \  # For each car, we've already added it to m1 and m2, so now we need to add\
    \ m3 and m4.\n  echo $(( (m3 + m4) / 2 ))", "\t# Get parameters\n\tlocal num_cars=$1\n\
    \tlocal time_sleep=1\n\tlocal time_stall_max=100\n\tlocal time_stall_min=1\n\t\
    local time_stall_ratio=10\n\tlocal time_collision_max=500\n\tlocal time_collision_min=1\n\
    \tlocal time_collision_ratio=10\n\tlocal time_collision_min_length=10\n\tlocal\
    \ time_collision_max_length=1\n\tlocal time_collision_min_speed=10\n\tlocal time_collision_max_speed=100\n\
    \tlocal time_collision_stall_speed=500\n\n\t# Initialize variables\n\tlocal total_collisions=0\n\
    \tlocal stall_count=0\n\tlocal collision_count=0\n\tlocal time_stall_count=0\n\
    \tlocal time_collision_count=0\n\tlocal max_stall_count=0\n\tlocal min_stall_count=0\n\
    \tlocal max_collision_count=0\n\tlocal min_collision_count=0\n\tlocal max_stall_speed=0\n\
    \tlocal min_stall_speed=0\n\tlocal max_collision_speed=0\n\tlocal min_collision_speed=0\n\
    \tlocal max_collision_speed_max=0\n\tlocal min_collision_speed_max=0\n\tlocal\
    \ max_collision_speed_min=0\n\tlocal min_collision_speed_min=0\n\tlocal max_stall_speed_max=0\n\
    \tlocal min_stall_speed_max=0\n\tlocal max_collision_speed_max=0\n\tlocal min_collision_speed_max=0\n\
    \tlocal max_collision_speed_min=0\n\tlocal min_collision_speed_min=0\n\tlocal\
    \ max_stall_speed_min=0\n\tlocal min_stall_speed_min=0\n\tlocal min_collision_length_min=0\n\
    \tlocal max_collision_length_min=0\n\tlocal max_collision_length_max=0\n\tlocal\
    \ min_collision_speed_min=0\n\tlocal max_stall_speed_min=0\n\tlocal min_stall_speed_min=0\n\
    \tlocal min_collision_speed_min=0\n\tlocal max_collision_speed_max=0\n\tlocal\
    \ min_collision_speed_max=0\n\tlocal max_stall_speed_max=0\n\tlocal min_stall_speed_max=0\n\
    \tlocal min_collision_speed_max=0\n\tlocal max_collision_speed_min=0\n\tlocal\
    \ min_collision_speed_min=0\n\tlocal max_stall_speed_min=0\n\tlocal min_stall_speed_min=0\n\
    \tlocal min_collision_speed_min=0\n\tlocal max_collision_speed_min=0\n\tlocal\
    \ min_collision_speed_min=0\n\tlocal max_stall_speed_max=0\n\tlocal min_stall_speed_max=0",
  "    (( $# != 1 )) && return 1\n\n    (( ! is_integer \"$1\" && return 1 )) && return\
    \ 1\n    car_race \"$1\"", "    local n=$1\n    # See if any pair of cars collide.\n\
    \    local collisions=0\n    local i\n    local j\n    local direction=0\n   \
    \ for (( i=0; i<n; i++ )); do\n        for (( j=0; j<n; j++ )); do\n         \
    \   if [ $i == $j ]; then\n                continue\n            fi\n        \
    \    if [ $i -eq 0 ] && [ $j -eq 1 ]; then\n                continue\n       \
    \     fi\n            if [ $i -eq 1 ] && [ $j -eq 0 ]; then\n                continue\n\
    \            fi\n            if [ $i -eq 0 ] && [ $j -eq 0 ]; then\n         \
    \       continue\n            fi\n            # Determine which direction each\
    \ car travels\n            if [ $i -eq 0 ]; then\n                direction=right\n\
    \            else\n                direction=left\n            fi\n          \
    \  if [ $j -eq 1 ]; then\n                direction=left\n            else\n \
    \               direction=right\n            fi\n            # Determine the movement\
    \ of both cars.\n            local x1=$(( n * i ))\n            local x2=$(( n\
    \ * j ))\n            local x1x2 # Variable to hold the distance between these\
    \ two cars.\n            local dx # Difference in position\n            local\
    \ dy\n            local dx2\n            local dy2\n            # Determine the\
    \ distance between these two cars.\n            if [ $direction -eq left ]; then\n\
    \                x1x2=$(( x1 * x2 ))\n                dx=$(( x2 - x1 ))\n    \
    \            dx=$(( dx - dx1x2 ))\n                dy=$(( x1 - x2 ))\n       \
    \     else\n                x1x2=$(( x1 * x2 ))\n                dx=$(( x2 - x1\
    \ ))\n                dx=$(( dx - dx1x2 ))\n                dy=$(( x1 - x2 ))\n\
    \            fi\n            dx2=$(( dy * x2 ))\n            dy2=$(( dy * x2 ))\n\
    \            \n            if [ $dx -eq 0 ]; then\n                if [ $direction\
    \ -eq left ]; then\n                    if [ $dx2 -gt $dx ]; then\n          \
    \              collisions=$(( collisions + 1 ))\n                        echo\
    \ -n \"collision count is $collisions\"\n                    fi\n            \
    \    elif [ $direction -eq right ]; then\n                    if [ $dx2  -gt $dx\
    \ ]; then\n                        collisions=$(( collisions + 1 ))\n        \
    \                echo -n \"collision count is $collisions\"\n                \
    \    fi", "  local n=$1\n  local j=0\n  local i\n  for ((i=1; i<=$n; i++)); do\n\
    \    local j\n    for ((j=0; j<i; j++)); do\n      local collisions\n      collisions=$(echo\
    \ \"$collisions\" | awk -v j=$j '{ print $j \" \" $i }' |\n                  \
    \    sort -n | uniq -c | sort -nr | awk '{ print $2 }')\n      if [ ! -z \"$collisions\"\
    \ ]; then\n        echo \"$collisions\"\n        break\n      fi\n    done\n \
    \ done", "  local n=$1\n  local dir\n  local dir_num\n  local collision=0\n  for\
    \ ((i = 0; i < n; i++))\n  do\n    dir=`expr $i \\* 3`\n    dir_num=`expr $dir\
    \ \\* 3`\n    ((dir_num))\n    collision=$((collision + \\\n      ((${DIRS[$dir_num]}\
    \ -\"${DIRS[$dir]}\")) \\\n      ))\n  done\n  ((${collision}))", "  local n=$1\n\
    \  # Create a table of right and left distances in pixels.\n  local x_coord=\n\
    \  local y_coord=\n  local left_distance=\n  local right_distance=\n  local left_collision_count=\n\
    \  local right_collision_count=\n  local collided_x_coord=\n  local collided_y_coord=\n\
    \  local collided_left_distance=\n  local collided_right_distance=\n  local collided_left_collision_count=\n\
    \  local collided_right_collision_count=\n\n  # Set the cars speed to the same\
    \ value, and also set the distance to the same value.\n  local speed=\n  local\
    \ distance=\n  local left_distance=\n  local right_distance=\n\n  while true;\
    \ do\n    # Increment the speed by the increment in the x direction.\n    speed=$(($speed\
    \ + $increment))\n    distance=$(($distance + $increment))\n\n    # If the car\
    \ has collided with any car, increment the collision count and\n    # also set\
    \ that car's speed/distance to the speed and distance of the collided car.\n \
    \   if [ $distance -le $distance ]; then\n      left_collision_count=$(($left_collision_count\
    \ + 1))\n      left_distance=$(($left_distance + $speed))\n      collided_x_coord=$(($left_distance\
    \ + $speed))\n      collided_y_coord=$(($y_coord))\n      collided_left_distance=$(($left_distance))\n\
    \      collided_right_distance=$(($right_distance))\n      collided_left_collision_count=$(($left_collision_count))\n\
    \      collided_right_collision_count=$(($right_collision_count))\n      speed=$(($speed))\n\
    \      distance=$(($distance))\n      ((left_collision_count++))\n      ((right_collision_count++))\n\
    \      ((left_distance++))\n      ((right_distance++))\n    elif [ $distance -gt\
    \ $distance ]; then\n      right_collision_count=$(($right_collision_count + 1))\n\
    \      right_distance=$(($right_distance + $speed))\n      collided_x_coord=$(($right_distance\
    \ + $speed))\n      collided_y_coord=$(($y_coord))\n      collided_left_distance=$(($left_distance))\n\
    \      collided_right_distance=$(($right_distance))\n      collided_left_collision_count=$(($left_collision_count))\n\
    \      collided_right_collision_count=$(($right_collision_count))\n      speed=$(($speed))\n\
    \      distance=$(($distance))\n      ((right_collision_count++))\n      ((left_collision_count++))\n\
    \      ((left_distance++", "  local n=$1\n  local i j\n  local collisions=0\n\
    \  for (( i=0; i<n; i++ )); do\n    for (( j=i+1; j<n; j++ )); do\n      local\
    \ dx=$(car1pos $i $j | bc)\n      local dy=$(car2pos $i $j | bc)\n      if (($dx\
    \ != dx) || ($dy != dy)) {\n        collisions=$((collisions + 1))\n        break\n\
    \      fi\n    done\n  done\n  echo $collisions", "    local n=$1\n    local n_1=`expr\
    \ $n % 2`\n    local n_2=`expr $n / 2`\n    local j=1\n    local i\n    for i\
    \ in `seq $n_1`\n    do\n        local collisions=0\n        for j in `seq $n_2`\n\
    \        do\n            if [ $i -eq 0 ] && [ $j -eq 0 ]\n            then\n \
    \               collisions=1\n                break\n            fi\n        \
    \    if [ $i -eq 0 ] && [ $j -eq $(( n - 1 )) ]\n            then\n          \
    \      collisions=1\n                break\n            fi\n            if [ $i\
    \ -eq $(( n - 1 )) ] && [ $j -eq 0 ]\n            then\n                collisions=1\n\
    \                break\n            fi\n            if [ $i -eq $(( n - 1 )) ]\
    \ && [ $j -eq $(( n - 1 )) ]\n            then\n                collisions=1\n\
    \                break\n            fi\n        done\n        if [ $collisions\
    \ -eq 0 ]\n        then\n            echo \"$j\"\n            break\n        fi\n\
    \    done", "    [ $# -lt 1 ] || die \"car_race_collision needs at least one argument\"\
    \n    local -i n=$1\n    local -i i\n\n    # $2 and $3 are integers, $4 is a string\n\
    \    local -i j=$2\n    local -i k=$3\n\n    local -i i_max=$(( n + 1 ))\n   \
    \ local -i j_max=$(( k + 1 ))\n\n    local i j k j k i\n\n    local i_collisions=0\n\
    \    local j_collisions=0\n    local k_collisions=0\n\n    # $2 and $3 are integers,\
    \ $4 is a string\n    local -i i_start=$2\n    local -i j_start=$3\n\n    # $2\
    \ and $3 are integers, $4 is a string\n    local -i i_stop=$2\n    local -i j_stop=$3\n\
    \n    local -i i_start=$(( i_start + 1 ))\n    local -i j_start=$(( j_start +\
    \ 1 ))\n\n    local -i i_stop=$(( i_stop + 1 ))\n    local -i j_stop=$(( j_stop\
    \ + 1 ))\n\n    local i\n    local j\n    local k\n\n    # $1 is a string\n  \
    \  local i_t\n    local j_t\n    local k_t\n\n    local -i i\n    local j\n  \
    \  local k\n\n    # $1 is a string\n    local i_t\n    local j_t\n    local k_t\n\
    \n    local -i i\n    local j\n    local k\n\n    # $1 is a string\n    local\
    \ i_t\n    local j_t\n    local k_t\n\n    local -i i\n    local j\n    local\
    \ k\n\n    local i\n    local j\n    local k\n\n    # $1 is a string\n    local\
    \ i_t\n    local j_t\n    local k_t\n\n    local -i i\n    local j\n    local\
    \ k\n\n    local i\n    local j\n    local k\n\n    # $1 is a string\n    local\
    \ i_t\n    local j_t\n    local k_t\n\n    local -i i\n    local j\n    local\
    \ k\n\n    local i\n    local j\n    local k\n\n    # $1 is a string\n    local\
    \ i_t\n    local j_t\n    local k_t\n\n    local -i i\n    local j\n    local\
    \ k\n\n    local i\n    local j\n    local k\n\n    local i\n    local j\n   \
    \ local k\n\n    # $1 is a string\n    local i", "  n=$1\n  cd $(dirname $BASH_SOURCE)\n\
    \  source ./common.sh\n  local result=0\n  local car other_car\n  trap EXIT INT\n\
    \  for (( i=0; i<n; i++ )); do\n    other_car=`expr $i + 2 \\* $n`\n    car=\"\
    car $i\"\n    python $1 $other_car $car\n    local status=\"$?\"\n    if [ \"\
    $status\" == \"0\" ]; then\n      ((result+=1))\n    fi\n  done\n  echo \"$result\"",
  "  local n=\"$1\"\n  (( n-- ))\n  local i\n  for i in \"${!n}\"; do\n    if [[ $((${n}+i))\
    \ -gt $((${n})) ]]; then\n      local j\n      for j in \"${!i}\"; do\n      \
    \  if [[ $((${i}+j)) -gt $((${i})) ]]; then\n          (( n ))\n          break\n\
    \        fi\n      done\n      break\n    fi\n  done", "  local n=$1\n  local\
    \ left_cars=$((n-1))\n  local right_cars=$((n-1))\n  local total_collisions=0\n\
    \  local collision_left_to_right=false\n  local collision_right_to_left=false\n\
    \  for (( i=1; i<n; i++ )); do\n    for (( j=1; j<n; j++ )); do\n      if (( i\
    \ !=$((j-1)) && j !=$((i-1)) )) ; then\n        if (( i !=$((j-1)) && ( j !=$((i-1))\
    \ )) ; then\n          if (( j==left_cars ) && ( i==right_cars )) ; then\n   \
    \         collision_left_to_right=true\n          else\n            collision_right_to_left=true\n\
    \          fi\n        fi\n      fi\n    done\n  done\n  if (( collision_left_to_right\
    \ == true )) ; then\n    (( total_collisions = total_collisions + 1 ))\n  fi\n\
    \  if (( collision_right_to_left == true )) ; then\n    (( total_collisions =\
    \ total_collisions + 1 ))\n  fi\n  echo $total_collisions", "    if [[ $1 -gt\
    \ 0 ]] ; then\n        local n=$1\n        local j\n        local i\n\n      \
    \  if [[ $n -eq 1 ]] ; then\n            return $n\n        fi\n        shift\n\
    \        for (( i=0 ; i<$n ; i++ )); do\n            local d=1\n            local\
    \ j=i+$d\n            while [[ \"$j\" -gt $n ]] ; do\n                j=$(( $j\
    \ + $d ))\n                (( d=d+1 ))\n            done\n            local j1=$(expr\
    \ $j - 1)\n            local j2=$(expr $j + 1)\n            while [[ \"$j1\" -gt\
    \ 0 ]] ; do\n                if [[ \"$j2\" -gt $n ]] ; then\n                \
    \    local j1=$j1-1\n                    local j2=$j2-1\n                    continue\n\
    \                fi\n                if [[ \"$(cat $j1)\" != \"$(cat $j2)\" ]]\
    \ ; then\n                    echo \"$i\"\n                    return $(( $i +\
    \ 1 ))\n                fi\n                j1=$j1-1\n            done\n     \
    \   done\n    fi", "  i=1\n  until [ $i -gt $1 ]; do\n      i=1\n      until [\
    \ ! $i -eq 1 ]; do\n          i=$(( i + 1 ))\n          echo \"$i collisions\"\
    \n      done\n  done", "    local num_collisions=0\n    local i\n\n    for i in\
    \ $(seq 0 $(($1 - 1))); do\n        if [ $(eval \"echo ${!i}_right\") ]; then\n\
    \            num_collisions=$(($num_collisions + 1))\n        fi\n    done\n \
    \   return $(($num_collisions))", "  local n=$1\n  local num_collisions=0\n\n\
    \  # Initialize an \"infinite\" distance variable called 'distance'.\n  local\
    \ distance=0\n\n  # Initialize an \"infinite\" current variable called 'current'.\n\
    \  local current=0\n\n  # Move right until a collision is detected.\n  while [\
    \ $current -le $n ]; do\n    current=$(( $current + 1 ))\n\n    # Move left until\
    \ a collision is detected.\n    while [ $current -le $n ]; do\n      current=$((\
    \ $current + 1 ))\n\n      # Move forward until a collision is detected.\n   \
    \   while [ $current -le $n ]; do\n        current=$(( $current + 1 ))\n\n   \
    \     distance=$(( distance + 1 ))\n\n      done\n    done\n\n    num_collisions=$((\
    \ $num_collisions + 1 ))\n  done\n\n  echo $num_collisions", "  declare -i car_1\
    \ car_2\n  declare -i num_collisions i\n  declare -a race_arr race_arr_tmp\n\n\
    \  num_collisions=0\n  race_arr=( $2 )\n  race_arr_tmp=( $1 )\n  i=0\n  while\
    \ [ $i -lt ${#race_arr[@]} ]; do\n    car_1=${race_arr[$i]}\n    car_2=${race_arr_tmp[$i]}\n\
    \    # If the cars are perfectly aligned they collide no matter what direction\n\
    \    if [ ${car_1} != ${car_2} ]; then\n      if (( ${car_1} < ${car_2} )); then\n\
    \        num_collisions=$(( num_collisions + 1 ))\n      elif (( ${car_1} > ${car_2}\
    \ )); then\n        num_collisions=$(( num_collisions + 1 ))\n      else\n   \
    \     # They are perfectly aligned but in opposite directions so no collision\n\
    \        # is possible unless we move them a bit\n        num_collisions=$(( num_collisions\
    \ + 1 ))\n      fi\n    fi\n    i=$(( i + 1 ))\n  done\n  echo $num_collisions",
  "  local NUM_CARS=$1\n  local DIR_LEFT=right\n  local DIR_RIGHT=left\n  local CROSSING_TIME_MIN=10\n\
    \  local CROSSING_TIME_MAX=1000\n  local TIME_STEP=10\n  local TIME_BETWEEN_TRIES=1000\n\
    \  local TIME_BETWEEN_CARS=2\n  local NUM_CARS_TO_REPEAT=10\n  local CROSSING_TIMES=()\n\
    \  local NUM_TRIES=0\n  local NUM_TRIES_LEFT=0\n  local NUM_TRIES_RIGHT=0\n  local\
    \ NUM_COLLISIONS=0\n  local TIME_LEFT=$((TIME_STEP*DIR_LEFT))\n  local TIME_RIGHT=$((TIME_STEP*DIR_RIGHT))\n\
    \  local TIME_LEFT1=$((TIME_STEP*DIR_LEFT))\n  local TIME_RIGHT1=$((TIME_STEP*DIR_RIGHT))\n\
    \n  local LEFT=$((TIME_LEFT*NUM_CARS));\n  local RIGHT=$((TIME_RIGHT*NUM_CARS));\n\
    \  local LEFT1=$((TIME_LEFT1*NUM_CARS));\n  local RIGHT1=$((TIME_RIGHT1*NUM_CARS));\n\
    \  while [ $NUM_TRIES == 0 ]\n  do\n    # First, choose two cars at random to\
    \ collide.\n    local NUM_LEFT=`expr $((RANDOM % NUM_CARS))`;\n    local NUM_RIGHT=`expr\
    \ $((RANDOM % NUM_CARS))`;\n\n    local TIME_LEFT_COLLISION=`expr $(( $LEFT -\
    \ $NUM_LEFT*$TIME_STEP ))`\n    local TIME_RIGHT_COLLISION=`expr $(( $RIGHT -\
    \ $NUM_RIGHT*$TIME_STEP ))`\n\n    local TIME_LEFT1_COLLISION=`expr $(( $LEFT1\
    \ - $NUM_LEFT*$TIME_STEP ))`\n    local TIME_RIGHT1_COLLISION=`expr $(( $RIGHT1\
    \ - $NUM_RIGHT*$TIME_STEP ))`\n\n    # Now keep moving the collision cars around\
    \ in a straight line, until they\n    # collide.\n    while [ $NUM_TRIES_LEFT\
    \ -eq 0 ]\n    do\n      # Set the left car to collide at the current time.\n\
    \      local TIME_LEFT_COLLISION_TOLERANCE=`expr $(( $TIME_LEFT_COLLISION - TIME_BETWEEN_CARS\
    \ ))`\n      local TIME_LEFT_COLLISION_TOLER", "  if [ $1 -gt $2 ]\n  then\n \
    \   echo \"$1 is greater than or equal to $2\";\n  else\n    echo \"$1 is less\
    \ than or equal to $2\";\n  fi", "  # Sort $1 cars by distance from each other\n\
    \  sort -n $1 |\n  # Get the set of indices indicating which cars in the sorted\
    \ set are colliding\n  awk '{print NR - 1}' |\n  # Get the set of cars to collide\n\
    \  grep -v '^#' |\n  # Find the collisions for each set of colliding cars\n  xargs\
    \ -n 1 -P $1 grep -q Collision", '  # Write your solution here', "\tlet \"$1\"\
    \ > 0;\n\tlet \"$1\" < 100;\n\tlet \"$1\" > $CARS;\n\tlet \"$1\" < $CARS;\n\t\
    let \"$1\" > $CARS * 100;\n\tlet \"$1\" < $CARS * 100;\n\tlet \"$1\" > $CARS *\
    \ $CARS;\n\tlet \"$1\" < $CARS * $CARS;\n\tlet \"$1\" > $CARS * $CARS * 100;\n\
    \tlet \"$1\" < $CARS * $CARS * 100;\n\tlet \"$1\" > $CARS * $CARS * $CARS;\n\t\
    let \"$1\" < $CARS * $CARS * $CARS;\n\tlet \"$1\" > $CARS * $CARS * $CARS * 100;\n\
    \tlet \"$1\" < $CARS * $CARS * $CARS * 100;\n\tlet \"$1\" > $CARS * $CARS * $CARS\
    \ * $CARS;\n\tlet \"$1\" < $CARS * $CARS * $CARS * $CARS;\n\tlet \"$1\" > $CARS\
    \ * $CARS * $CARS * $CARS * 100;\n\tlet \"$1\" < $CARS * $CARS * $CARS * $CARS\
    \ * 100;\n\tlet \"$1\" > $CARS * $CARS * $CARS * $CARS * $CARS;\n\tlet \"$1\"\
    \ < $CARS * $CARS * $CARS * $CARS * $CARS;\n\tlet \"$1\" > $CARS * $CARS * $CARS\
    \ * $CARS * $CARS * 100;\n\tlet \"$1\" < $CARS * $CARS * $CARS * $CARS * $CARS\
    \ * 100;\n\tlet \"$1\" > $CARS * $CARS * $CARS * $CARS * $CARS * $CARS;\n\tlet\
    \ \"$1\" < $CARS * $CARS * $CARS * $CARS * $CARS * $CARS;\n\tlet \"$1\" > $CARS\
    \ * $CARS * $CARS * $CARS * $CARS * $CARS * 100;\n\tlet \"$1\" < $CARS * $CARS\
    \ * $CARS * $CARS * $CARS * $CARS * 100;\n\tlet \"$1\" > $", "    local n=$1\n\
    \    local i\n    local j\n    local k\n    local collisions\n    local total\n\
    \    local distance\n    local distance0\n    local distance1\n    local i0\n\
    \    local i1\n    local j0\n    local j1\n    local k0\n    local k1\n    local\
    \ x0\n    local x1\n    local y0\n    local y1\n    local x0i\n    local x1i\n\
    \    local y0j\n    local y1j\n    local x0k\n    local x1k\n    local y10\n \
    \   local y11\n    local y20\n    local y21\n    local x0i0\n    local x1i0\n\
    \    local y0j0\n    local y1j0\n    local x0i1\n    local x1i1\n    local y0j1\n\
    \    local y1j1\n    local x0i2\n    local x1i2\n    local y0j2\n    local y1j2\n\
    \    local x0i3\n    local x1i3\n    local y0j3\n    local y1j3\n    local x0i4\n\
    \    local x1i4\n    local y0j4\n    local y1j4\n    local x0i5\n    local x1i5\n\
    \    local y0j5\n    local y1j5\n    local x0i6\n    local x1i6\n    local y0j6\n\
    \    local y1j6\n    local x0i7\n    local x1i7\n    local y0j7\n    local y1j7\n\
    \    local x0i8\n    local x1i8\n    local y0j8\n    local y1j8\n    local x0i9\n\
    \    local x1i9\n    local y0j9\n    local y1j9\n    local x0i10\n    local x1i10\n\
    \    local y0j10\n    local y1j10\n    local x0i11\n    local x1i11\n    local\
    \ y0j11\n    local y1j11\n    local x0i12\n    local x1i12\n    local y0j12\n\
    \    local y1j12\n    local x0i13\n    local x1i13\n    local y0j13\n    local\
    \ y1j13\n    local x0i14\n    local x1i14\n    local y0j14\n    local y1j14\n\
    \    local x0i15\n    local x1i15\n    local y0j15\n    local ", "    local i\n\
    \n    # Initialize variables we'll need\n    local cars=$1\n    local car1=$2\n\
    \    local car2=$3\n    local collisions=0\n\n    # Move the cars one at a time\
    \ until they collide\n    for (( i=1; i<cars ; i++ )); do\n        if [ $(( i\
    \ - 1 )) -eq $(( i-1 )) ]; then\n            local j=$(( i - 2 ))\n        else\n\
    \            local j=$i\n        fi\n        local car1_x=$(( car1_x + car1_speed\
    \ ))\n        local car2_x=$(( car2_x + car2_speed ))\n        if [ $(( j - 1\
    \ )) -eq $(( j - 2 )) ]; then\n            local k=$(( j - 2 ))\n        else\n\
    \            local k=$j\n        fi\n        local car1_y=$(( car1_y + car1_speed\
    \ ))\n        local car2_y=$(( car2_y + car2_speed ))\n        if [ $(( k - 1\
    \ )) -eq $(( k - 2 )) ]; then\n            local l=$(( k - 2 ))\n        else\n\
    \            local l=$k\n        fi\n        local car1_dx=$(( car1_dx + car1_speed\
    \ ))\n        local car2_dx=$(( car2_dx + car2_speed ))\n        if [ $(( l -\
    \ 1 )) -eq $(( l - 2 )) ]; then\n            local m=$(( l - 2 ))\n        else\n\
    \            local m=$l\n        fi\n        local car1_dy=$(( car1_dy + car1_speed\
    \ ))\n        local car2_dy=$(( car2_dy + car2_speed ))\n\n        # Check for\
    \ collision\n        local x_diff=$(( car1_x - car2_x ))\n        local y_diff=$((\
    \ car1_y - car2_y ))\n        if [ $x_diff -gt $(( car1_dx )) ]; then\n      \
    \      collisions=$(( $collisions + 1 ))\n        elif [ $y_diff -gt $(( car1_dy\
    \ )) ]; then\n            collisions=$(( $collisions + 1 ))\n        elif [ $x_diff\
    \ -lt $(( car1_dx )) ]; then\n            collisions=$(( $collisions + 1 ))\n\
    \        elif [ $y_diff -lt $(( car1_dy )) ]; then\n            collisions=$((\
    \ $collisions + 1 ))\n        else\n            collisions=$(( $collisions + 1\
    \ ))\n", "\tlocal n=$1\n\tlocal car_left=(${1}{1:n})\n\tlocal car_right=(${1}{n+1})\n\
    \n\tlocal collisions=0\n\tlocal car_x_offset=`echo $car_left | awk '{print $2}'`\n\
    \tlocal car_y_offset=`echo $car_left | awk '{print $3}'`\n\n\t# The $car_x_offset\
    \ and $car_y_offset are offsets relative to the car's position\n\t# in the x or\
    \ y directions, respectively.\n\t# We will use these offsets to find the exact\
    \ position of two cars so they\n\t# can collide\n\tfor (( car_num=1; car_num<n+1;\
    \ car_num++ )); do\n\t\tlocal car_left=(${1}{1:n})\n\t\tlocal car_right=(${1}{n+1+car_num})\n\
    \n\t\tlocal car_x=`echo $car_left | awk '{print $1}'`\n\t\tlocal car_y=`echo $car_left\
    \ | awk '{print $2}'`\n\n\t\tlocal car_x_offset=`echo $car_left | awk '{print\
    \ $2}'`\n\t\tlocal car_y_offset=`echo $car_left | awk '{print $3}'`\n\n\t\t# $car_right\
    \ and $car_left are offsets relative to the car's position\n\t\t# in the x or\
    \ y directions, respectively.\n\t\t# We will use these offsets to find the exact\
    \ position of two cars so they\n\t\t# can collide\n\t\tfor (( car_offset_num=1;\
    \ car_offset_num<n+1; car_offset_num++ )); do\n\t\t\tlocal car_left=(${1}{1:n})\n\
    \t\t\tlocal car_right=(${1}{n+1+car_offset_num})\n\n\t\t\tlocal car_x=`echo $car_left\
    \ | awk '{print $1}'`\n\t\t\tlocal car_y=`echo $car_left | awk '{print $2}'`\n\
    \n\t\t\tlocal car_x_offset=`echo $car_left | awk '{print $2}'`\n\t\t\tlocal car_y_offset=`echo\
    \ $car_left | awk '{print $3}'`\n\n\t\t\t# The two cars collides if one car is\
    \ standing still and the other is moving\n\t\t\t# in the opposite direction of\
    \ that moving car.\n\t\t\tif [[ \"$car_left\" == \"$car_right\" ]]; then\n\t\t\
    \t\tlocal car_x_offset_left=`echo $car_left | awk '{print $", "    local n=$1\n\
    \    local race_cars=($(seq 1 ${n}))\n    local race_cars_reversed=($(seq ${n}\
    \ 1))\n    local collisions=0\n    for (( i = ${#race_cars[@]} - 1; i >= 0; i--\
    \ )); do\n        for (( j = (${#race_cars[@]} - 2); j >= 0; j-- )); do\n    \
    \        # collision with the previous car\n            if (( j + 1 ) -ne ${#race_cars[@]}\
    \ ) ; then\n                if [ $( ${race_cars[i]} ${race_cars[${j+1}]} ) -eq\
    \ 0 ]; then\n                    collisions=$((collisions+1));\n             \
    \   fi\n            fi\n            # collision with the next car\n          \
    \  if (( j - 1 ) -ne 0 ) ; then\n                if [ $( ${race_cars[i]} ${race_cars[${j-1}]}\
    \ ) -eq 0 ]; then\n                    collisions=$((collisions+1));\n       \
    \         fi\n            fi\n        done\n    done\n    echo \"$collisions\"",
  "    local collision_count\n    local i\n    local j\n    collision_count=0\n  \
    \  for i in $(seq 1 $1); do\n        for j in $(seq 1 $1); do\n            if\
    \ [[ $(( ($i - 1) % $2) -eq 0 ) -a $(( ($i - 1) % $1) -eq 0 )]]; then\n      \
    \          if [[ $(( ($j - 1) % $2) -eq 0 ) -a $(( ($j - 1) % $1) -eq 0 )]]; then\n\
    \                    if [[ (($i + 1) % $2) -eq 0 -a ($( ($i + 1) % $1) -eq 0)\
    \ ]]; then #Right and Left\n                        collision_count=$((collision_count\
    \ + 1))\n                    fi\n                fi\n            fi\n        done\n\
    \    done\n    echo \"collision_count=$collision_count\"", "  local n=$1\n  while\
    \ (( n <= 0 )); do\n    local car1=$(printf '%.3d' $(( RANDOM % 3 )))\n    local\
    \ car2=$(printf '%.3d' $(( RANDOM % 3 )))\n    local car1pos=$(printf '%.3d' $((\
    \ RANDOM % 3 )))\n    local car2pos=$(printf '%.3d' $(( RANDOM % 3 )))\n    local\
    \ xpos1=$(printf '%.3d' $(( RANDOM % 3 )))\n    local xpos2=$(printf '%.3d' $((\
    \ RANDOM % 3 )))\n    local ypos1=$(printf '%.3d' $(( RANDOM % 3 )))\n    local\
    \ ypos2=$(printf '%.3d' $(( RANDOM % 3 )))\n    local zpos1=$(printf '%.3d' $((\
    \ RANDOM % 3 )))\n    local zpos2=$(printf '%.3d' $(( RANDOM % 3 )))\n    local\
    \ xvel1=$(printf '%.3d' $(( RANDOM % 3 )))\n    local xvel2=$(printf '%.3d' $((\
    \ RANDOM % 3 )))\n    local yvel1=$(printf '%.3d' $(( RANDOM % 3 )))\n    local\
    \ yvel2=$(printf '%.3d' $(( RANDOM % 3 )))\n    local zvel1=$(printf '%.3d' $((\
    \ RANDOM % 3 )))\n    local zvel2=$(printf '%.3d' $(( RANDOM % 3 )))\n    local\
    \ xdir1=$(printf '%.3d' $(( RANDOM % 3 )))\n    local xdir2=$(printf '%.3d' $((\
    \ RANDOM % 3 )))\n    local ydir1=$(printf '%.3d' $(( RANDOM % 3 )))\n    local\
    \ ydir2=$(printf '%.3d' $(( RANDOM % 3 )))\n    local zdir1=$(printf '%.3d' $((\
    \ RANDOM % 3 )))\n    local zdir2=$(printf '%.3d' $(( RANDOM % 3 )))\n    if ((\
    \ car1 == car2 )); then\n      (( n = n + 1 ))\n    else if (( car1 > car2 ));\
    \ then\n      (( car1 = car1 - 2 ))\n      (( car2 = car2 + 2 ))\n      (( n =\
    \ n + 1 ))\n", "    local n=$1\n    local left_car=$2\n    local right_car=$3\n\
    \    local collisions=0\n    local colliding_car=$4\n    local max_speed=$5\n\
    \    local left_speed=$6\n    local right_speed=$7\n\n    for i in $(seq 1 $n);\
    \ do\n        # left cars move at a constant speed\n        local left_speed=$max_speed\n\
    \        # right cars move at a constant speed\n        local right_speed=$max_speed\n\
    \        for j in $(seq 1 $n); do\n            # set left cars speed to zero\n\
    \            left_speed=0\n            # set right cars speed to zero\n      \
    \      right_speed=0\n            # let them collide\n            if [ $j -ne\
    \ $i ]; then\n                # if they don't collide...\n                if [\
    \ $j -eq $left_car ]; then\n                    # move the left cars away from\
    \ colliding car\n                    local left_speed=$(car $left_car speed $colliding_car\
    \ $left_speed)\n                    local left_speed=$(car $left_car speed $colliding_car\
    \ $left_speed)\n                elif [ $j -eq $right_car ]; then\n           \
    \         # move the right cars away from colliding car\n                    local\
    \ right_speed=$(car $right_car speed $colliding_car $right_speed)\n          \
    \          local right_speed=$(car $right_car speed $colliding_car $right_speed)\n\
    \                else\n                    # neither car will collide with each\
    \ other\n                    local left_speed=$(car $left_car speed $colliding_car\
    \ $left_speed)\n                    local right_speed=$(car $right_car speed $colliding_car\
    \ $right_speed)\n                fi\n                # if either car collides,\
    \ increment the collision count\n                if [ $left_speed -gt $right_speed\
    \ ]; then\n                    let collisions=$collisions+1\n                fi\n\
    \            fi\n        done\n    done\n\n    # return collisions\n    return\
    \ $collisions", "\tlocal n=$1\n\tlocal car_left=\"car_$((RANDOM % n) + 1)\"\n\t\
    local car_right=\"car_$((RANDOM % n) + 1)\"\n\tlocal cars_left=(\"${!car_left}\"\
    )\n\tlocal cars_right=(\"${!car_right}\")\n\tlocal cars_left_count=${#cars_left[@]}\n\
    \tlocal cars_right_count=${#cars_right[@]}\n\tlocal cars_collide_count=0\n\tlocal\
    \ cars_left_index\n\tlocal cars_right_index\n\tlocal cars_diff\n\tlocal cars_left_speed\n\
    \tlocal cars_right_speed\n\tlocal cars_max_speed\n\tlocal cars_left_speed_index\n\
    \tlocal cars_right_speed_index\n\tlocal cars_speed\n\tlocal cars_speed_index\n\
    \tlocal cars_speeds\n\tlocal cars_speed_index\n\tlocal cars_speed_left\n\tlocal\
    \ cars_speed_right\n\tlocal cars_speed_diff\n\tlocal cars_speed_diff_left\n\t\
    local cars_speed_diff_right\n\tlocal cars_collision\n\tlocal cars_collision_index\n\
    \tlocal cars_collision_speed\n\tlocal cars_collision_speeds\n\tlocal cars_collision_speed_index\n\
    \tlocal cars_collision_speed_left\n\tlocal cars_collision_speed_right\n\tlocal\
    \ cars_collision_speed_diff\n\tlocal cars_collision_speed_diff_left\n\tlocal cars_collision_speed_diff_right\n\
    \tlocal cars_collision_speeds\n\tlocal cars_collision_speeds_index\n\tlocal cars_collision_speeds_index\n\
    \tlocal cars_collision_speeds_speed\n\tlocal cars_collision_speeds_speed_left\n\
    \tlocal cars_collision_speeds_speed_right\n\tlocal cars_collision_speeds_speed_diff\n\
    \tlocal cars_collision_speeds_speed_diff_left\n\tlocal cars_collision_speeds_speed_diff_right\n\
    \tlocal cars_collision_speeds_speed\n\tlocal cars_collision_speeds_speed_left\n\
    \tlocal cars_collision_speeds_speed_right\n\tlocal cars_collision_speeds_speed_diff\n\
    \tlocal cars_collision_speeds_speed_diff_left\n\tlocal cars_collision_speeds_speed_diff_right\n\
    \tlocal cars_collision_speeds_speed\n\tlocal cars_collision_speeds_speed_left\n\
    \tlocal cars_collision_speeds_speed_right\n\tlocal car", "  local n=\"$1\"\n \
    \ while true; do\n    car_left \"${n}\"\n    car_right \"${n}\"\n    local t=$((\
    \ RANDOM % 10 ))\n    local c\n    for c in \"${!cars[@]}\"; do\n      if [[ $t\
    \ -eq 0 && $cars[$c] == $cars[$((c+1))] && \\\n           $cars[$c] != $cars[$((c+2))]\
    \ ]]; then\n        echo \"$((c+1))\"\n        return\n      fi\n    done\n  done",
  "  local c=0\n  for i in {1..$1} {\n    for j in {2..$1} {\n      collision_test\
    \ ($i $j)\n    }\n  }\n  echo $c", "    # How many times the race car collides\
    \ with the racing car.\n    local race_collision_count=0\n\n    # Loop over n\
    \ cars.\n    for (( car_number=1;  car_number <= $1;  car_number++ )); do\n  \
    \      # Loop over n cars.\n        for (( other_car_number=$(car_number + 1);\
    \  other_car_number <= $1;  other_car_number++ )); do\n\n            # If the\
    \ cars are perfectly straight and move in the same speed, they are \n        \
    \    # not colliding.\n            if (( car_number == other_car_number )); then\n\
    \                continue\n            fi\n\n            # If the two cars are\
    \ already colliding, add one collision.\n            if [[ $(cars_collided $car_number\
    \ $other_car_number) == \"YES\" ]];then\n                race_collision_count=$(($race_collision_count\
    \ + 1))\n                continue\n            fi\n\n            # If the cars\
    \ are moving right to left and move right to left, they \n            # collide.\n\
    \            if [[ $(cars_moving $car_number $other_car_number) == \"LEFT\" ]];then\n\
    \                cars_collided $car_number $other_car_number=\"YES\"\n       \
    \         race_collision_count=$(($race_collision_count + 1))\n              \
    \  continue\n            fi\n\n            # If the cars are moving left to right\
    \ and move left to right, they \n            # collide.\n            if [[ $(cars_moving\
    \ $car_number $other_car_number) == \"RIGHT\" ]];then\n                cars_collided\
    \ $car_number $other_car_number=\"YES\"\n                race_collision_count=$(($race_collision_count\
    \ + 1))\n                continue\n            fi\n        done\n    done\n\n\
    \    echo $race_collision_count", "  n=$1\n  i=1\n  while (( i < n )); do\n  \
    \  i=$(($i+1))\n    c=0\n    for j in $(seq 0 $(($n-i-1))); do\n      if [[ $(($i+$j))\
    \ -lt $n ]]; then\n        ((c++))\n      fi\n    done\n    echo $c\n  done",
  "  local n car1_index car2_index\n  local i\n  local collisions=0\n  while (( n\
    \ > 0 )); do\n    car1_index=$(( ${#car1s[@]} - 1 ))\n    car2_index=$(( ${#car2s[@]}\
    \ - 1 ))\n    if [[ \"$car1_index\" == \"$car2_index\" ]]; then\n      (( n--\
    \ ))\n    else\n      # If the cars collide, decrement n by 1 and append the two\
    \ collision positions\n      # to our array.\n      collisions=$(( ${collisions}\
    \ + 1 ))\n      (( car1s[$car1_index]=${car1s[$car1_index]} - 1 ))\n      (( car2s[$car2_index]=${car2s[$car2_index]}\
    \ - 1 ))\n    fi\n  done\n  echo \"$collisions\"", "    local n=$1\n    echo \"\
    $((n*(2*n-1))) cars collide simultaneously with $((2*n-1)) cars\"", "    echo\
    \ $(date +%F_%H-%M-%S)\n    echo \"  car_race_collision()\" >> $LOG_FILE 2>&1\n\
    \    python -c '\nimport sys\nimport time\nimport math\n\nN=sys.argv[1]\nN_LEFT\
    \ = N/2 - 1\nN_RIGHT = N/2\n\ncars = []\nfor i in range(N):\n    cars.append({\"\
    x\": float(N*math.cos(i*2.0*math.pi)/N), \"y\": float(N*math.sin(i*2.0*math.pi)/N),\
    \ \"color\": \"green\"})\ncars[0][\"color\"] = \"yellow\"\ncars[N-1][\"color\"\
    ] = \"red\"\n\n# Keep a record of which cars are moving left and right\nleft_cars\
    \ = []\nright_cars = []\nfor k in range(N):\n    if k > N_LEFT:\n        left_cars.append(cars[k])\n\
    \    if k < N_LEFT:\n        right_cars.append(cars[k])\n\n# Keep track of the\
    \ cars colliding with each other\ncar_collision_counter = {}\nfor k in range(N):\n\
    \    for i in range(N):\n        for j in range(N):\n            # Calculate how\
    \ far away the cars are from each other\n            delta_x = (cars[i][\"x\"\
    ] - cars[j][\"x\"])\n            delta_y = (cars[i][\"y\"] - cars[j][\"y\"])\n\
    \            # Calculate the distance between the cars\n            distance =\
    \ (delta_x**2 + delta_y**2)**0.5\n            # If the distance is greater than\
    \ some threshold, increment the collision counter\n            if distance > 2.0:\n\
    \                if k not in car_collision_counter:\n                    car_collision_counter[k]\
    \ = 0\n                car_collision_counter[k] += 1\n                print \"\
    Collision occurred at \", cars[i][\"color\"], cars[j][\"color\"], distance\n \
    \   time.sleep(1)\n\nfor car in cars:\n    car[\"x\"] = float(car[\"x\"]*2)\n\
    \    car[\"y\"] = float(car[\"y\"]*2)\n\nprint \"Total number of collisions: \"\
    , len(car_collision_counter.keys())\nfor k in car_collision_counter:\n    print\
    \ \"Collision count for car \", k, \"is \", car_collision_counter[k]\n' $1 >>\
    \ $LOG_FILE 2>&1\n    echo $(date +%F_%H-%M-%S)", "    set -e\n\n    # How many\
    \ cars move to left and right?\n    nleft=$((${1}%${2}))\n    nright=$((${1}%${3}))\n\
    \n    # What is the maximum distance the cars need to travel before they collide?\n\
    \    maxdist=$((${nright}*${nright}+${nleft}*${nleft}-${nleft}*${nleft}))\n\n\
    \    # What is the minimum distance the cars need to travel before they collide?\n\
    \    mindist=$((${nright}*${nright}+${nleft}*${nleft}-${nleft}*${nleft}))\n\n\
    \    # Are there more collisions than collision rate?\n    # Yes, if nleft >=\
    \ nright and mindist >= maxdist.\n    # No, otherwise there's a good chance the\
    \ cars don't collide.\n    numcollision=$(($(($nleft+$nright)) >= $(($mindist+$maxdist))\
    \ \\\n            && $nleft >= $nright && $mindist >= $maxdist))\n    # Output\
    \ the number of collisions.\n    echo \"$numcollision\"", "  local i\n  local\
    \ j\n  local n\n  local collisions\n  local x\n  local y\n  local first_line\n\
    \  local second_line\n  local diff\n  local speed\n  local a\n  local b\n  local\
    \ c\n  local d\n  local first_collision\n  local second_collision\n\n  speed=1\n\
    \n  x=$1\n  y=$2\n  n=$3\n  first_line=$(echo \"$((${x} - ${y}))\" | bc)\n  second_line=$(echo\
    \ \"$((${y} - ${x}))\" | bc)\n\n  collisions=0\n\n  first_collision=$((${first_line}\
    \ - ${second_line}))\n  if [ ${first_collision} -gt ${n} ]; then\n    first_collision=0\n\
    \  fi\n\n  second_collision=$((${second_line} - ${first_line}))\n  if [ ${second_collision}\
    \ -gt ${n} ]; then\n    second_collision=0\n  fi\n\n  while [ ${first_collision}\
    \ -ne ${second_collision} ]; do\n    a=$((${first_collision}%${n}))\n    b=$((${second_collision}%${n}))\n\
    \    c=$((${first_collision}/${n}))\n    d=$((${second_collision}/${n}))\n\n \
    \   if [ $a -eq 0 ]; then\n      x=${x} + ${speed}\n      first_collision=$((${first_collision}+1))\n\
    \    else\n      x=${x} - ${speed}\n      first_collision=$((${first_collision}-1))\n\
    \    fi\n\n    if [ $b -eq 0 ]; then\n      y=${y} + ${speed}\n      second_collision=$((${second_collision}+1))\n\
    \    else\n      y=${y} - ${speed}\n      second_collision=$((${second_collision}-1))\n\
    \    fi\n\n    if [ $c -eq 0 ]; then\n      x=${x} + ${speed}\n      first_collision=$((${first_collision}+1))\n\
    \    else\n      x=${x} - ${speed}\n      first_collision=$((${first_collision}-1))\n\
    \    fi\n\n    if [ $d -eq 0 ]; then\n      y=${y} + ${speed}\n      second_collision=$((${second_collision}+1))\n\
    \    else\n      y=${y} - ${speed}\n      second_collision=$((${second_collision}-1))\n\
    \    fi\n\n    diff=$(echo \"$((${first_collision} - ${second_collision}))\" |\
    \ bc)\n    if [ ${diff} -gt ${n} ]; then\n      diff=$((", "    local n=$1\n \
    \   echo \"$(($n * ($n * $n - 1)) / 2) collisions\"", "  local n=$1\n  for i in\
    \ `seq 1 $n`\n  do\n    local car_i_x_1=`expr $car_x_1 +  $car_speed_1 `\n   \
    \ local car_i_x_2=`expr $car_x_2 +  $car_speed_2 `\n    local car_i_y_1=`expr\
    \ $car_y_1 +  $car_speed_1 `\n    local car_i_y_2=`expr $car_y_2 +  $car_speed_2\
    \ `\n    local car_i_speed_1=`expr $car_speed_1 `\n    local car_i_speed_2=`expr\
    \ $car_speed_2 `\n    local car_i_speed_1_x_1=`expr $car_speed_1_x_1 +  $car_speed_1_x_2\
    \ `\n    local car_i_speed_1_x_2=`expr $car_speed_1_x_2 +  $car_speed_1_x_1 `\n\
    \    local car_i_speed_1_y_1=`expr $car_speed_1_y_1 +  $car_speed_1_y_2 `\n  \
    \  local car_i_speed_1_y_2=`expr $car_speed_1_y_2 +  $car_speed_1_y_1 `\n    local\
    \ car_i_speed_2_x_1=`expr $car_speed_2_x_1 +  $car_speed_2_x_2 `\n    local car_i_speed_2_x_2=`expr\
    \ $car_speed_2_x_2 +  $car_speed_2_x_1 `\n    local car_i_speed_2_y_1=`expr $car_speed_2_y_1\
    \ +  $car_speed_2_y_2 `\n    local car_i_speed_2_y_2=`expr $car_speed_2_y_2 +\
    \  $car_speed_2_y_1 `\n    local car_i_x_3=`expr $car_x_3 +  $car_speed_1 `\n\
    \    local car_i_x_4=`expr $car_x_4 +  $car_speed_2 `\n    local car_i_y_3=`expr\
    \ $car_y_3 +  $car_speed_1 `\n    local car_i_y_4=`expr $car_y_4 +  $car_speed_2\
    \ `\n    local car_i_speed_3=`expr $car_speed_3 `\n    local car_i_speed_4=`expr\
    \ $car_speed_4 `\n    local car_i_speed_3_x_3=`expr $car_speed_3_x_3 +  $car_speed_3_x_4\
    \ `", "    local n\n    while (( \"$#\" )); do\n        n=$1\n        (( n <=\
    \ 0 )) && return 0\n        (( n > MAX_N )) && return 0\n        local s\n   \
    \     s=0\n        local i\n        for ((i=1; i<n; i++)); do\n            if\
    \ (( $i == 1 )); then\n                s=\"$s\"$i\n            else\n        \
    \        s=\"$s$i\"\n            fi\n        done\n        (( n > 1 )) && return\
    \ 0\n        (( n == 1 )) && return 0\n        (( \"$s\" = \"$s\"$((n - 2)) ))\
    \ && return 0\n        for ((j=n; j > 1; j--)); do\n            s=\"$s\"$j\n \
    \       done\n        for ((j=n; j > 1; j--)); do\n            if (( s == \"$s\"\
    $((n - 2)) )) && return 0\n        done\n    done\n    return 1", "\twhile true;\
    \ do\n\t\tx=0\n\t\ty=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\t\
    \tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\
    \t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\
    \t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\
    \t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\
    \t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\
    \t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\
    \t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\
    \t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\
    \t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\
    \t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\
    \t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\
    \t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\
    \t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\
    \t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\
    \t\tcollide_y=0\n\t\tcollide_car=0\n\t\tcollide_x=0\n\t\tcollide_y=0\n\t\tcollide_car=0\n\
    \t\tcollide_x", "  n=$1\n  car_race=`awk \"BEGIN {n=$1}; {print $0}\" ${PARENT_DIR}/race/car_race`\n\
    \n  collisions=0\n\n  # The collisions loop below finds collisions\n  while read\
    \ line; do\n    # ignore comment lines\n    [[ \"${line}\" == #* ]] && continue\n\
    \    cars=`awk \"BEGIN {n=$1}; {print \\$1}\" ${line}`\n\n    # Each car has its\
    \ own array of collisions\n    collisions=$((collisions + ${#cars[@]}))\n  done\
    \ < <(grep -o '^[^#].*' ${car_race})\n\n  echo \"$collisions\"", '  echo $1',
  "  local j=0\n  local p\n  local q\n  for p=$(( $1 )) ; do\n    for q=$(( $1 ))\
    \ ; do\n      if (( $p > $q )) ; then\n        (( ${p} > ${q} )) && printf '%d\
    \ ' \"$(( ${q} + 1 ))\"\n      fi\n    done\n  done\n  printf '\\n' \"$j\"", " \
    \ cat <<EOF\n$(cat $2)\nEOF", "    # Store the value of the left car.\n    local\
    \ left=$1\n    # Store the value of the right car.\n    local right=$2\n    #\
    \ Store the value of the car that has collided.\n    local collided=$3\n    #\
    \ Iterate through the car array.  Keep track of how many cars we have seen\n \
    \   # so far, and how many collisions we have already seen.\n    local n=0\n \
    \   local cnt=0\n    for (( c=$left; c<=$right; c++ )); do\n        if [[ ${car_array[c]}\
    \ != ${car_array[c+1]} ]]; then\n            # If the current car we are checking\
    \ has not collided with\n            # either the left or the right car, then\
    \ add it to the array.\n            car_array[c]=$(cnt++)\n            ${car_array[c]}=$(cnt++)\n\
    \            ${car_array[c]}=$(cnt++)\n        fi\n    done\n    # If the left\
    \ car did not collide with the right car, then add that\n    # car number to the\
    \ collision array.\n    if [ ${left} != ${right} ]; then\n        ${collided}=$(cnt++)\n\
    \    fi\n    # Return the number of collisions.\n    echo $((cnt))", "  local\
    \ n\n  (( n = $1 ))\n  local -i counter\n  local -i collisions\n  local -i last_collision\n\
    \  local i k\n\n  local first_car\n  local second_car\n  local car1\n  local car2\n\
    \  local car1_distance\n  local car2_distance\n  local car1_distance_inside\n\
    \  local car2_distance_inside\n  local car1_angle_inside\n  local car2_angle_inside\n\
    \  local car1_angle\n  local car2_angle\n  local car1_speed\n  local car2_speed\n\
    \n  for i in $(seq 0 $(( (n - 1) / 2 ))); do\n    car1_distance=$(( $2 + ($3 +\
    \ $4) * $i ))\n    car2_distance=$(( $2 + ($5 + $6) * $i ))\n    car1_distance_inside=$((\
    \ $2 + ($7 + $8) * $i ))\n    car2_distance_inside=$(( $2 + ($9 + $10) * $i ))\n\
    \    car1_angle=$(( $1 + ($11 + $12) * $i ))\n    car2_angle=$(( $1 + ($13 + $14)\
    \ * $i ))\n    car1_speed=$(( $1 + ($15 + $16) * $i ))\n    car2_speed=$(( $1\
    \ + ($17 + $18) * $i ))\n\n    car1=$(( $2 + ($3 + $4) * $i ))\n    car2=$(( $5\
    \ + $6) * $i ))\n\n    first_car=$(( $car1 + $car2 ))\n    second_car=$(( $car1\
    \ - $car2 ))\n\n    collisions=0\n    last_collision=$(( $n + 1 ))\n    while\
    \ (( $first_car <= $n )) && (( $last_collision > $n )); do\n      if (( $(cat\
    \ $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat\
    \ $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat\
    \ $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat $(cat\
    \ $(cat $(cat $(cat $(cat $(c", "    local n=$1\n    local x\n    local y\n  \
    \  local s\n    local t1\n    local t2\n    local i\n    local j\n    local x\n\
    \    local y\n    local s\n    local t1\n    local t2\n    local i\n    local\
    \ j\n    local o\n    local c\n    local b\n    local d\n    local k\n    local\
    \ t\n    local a\n    local i\n    local j\n    local n\n    local m\n    local\
    \ l\n    local i\n    local j\n    local n\n    local m\n    local l\n    local\
    \ i\n    local j\n    local o\n    local c\n    local b\n    local d\n    local\
    \ k\n    local t\n    local a\n    local i\n    local j\n    local n\n    local\
    \ m\n    local l\n    local i\n    local j\n    local n\n    local m\n    local\
    \ l\n    local i\n    local j\n    local o\n    local c\n    local b\n    local\
    \ d\n    local k\n    local t\n    local a\n    local i\n    local j\n    local\
    \ n\n    local m\n    local l\n    local i\n    local j\n    local n\n    local\
    \ m\n    local l\n    local i\n    local j\n    local o\n    local c\n    local\
    \ b\n    local d\n    local k\n    local t\n    local a\n    local i\n    local\
    \ j\n    local n\n    local m\n    local l\n    local i\n    local j\n    local\
    \ n\n    local m\n    local l\n    local i\n    local j\n    local o\n    local\
    \ c\n    local b\n    local d\n    local k\n    local t\n    local a\n    local\
    \ i\n    local j\n    local n\n    local m\n    local l\n    local i\n    local\
    \ j\n    local n\n    local m\n    local l\n    local i\n    local j\n    local\
    \ o\n    local c\n    local b\n    local d\n    local k\n    local t\n    local\
    \ a\n    local i\n    local j\n    local n\n    local m\n    local l\n    local\
    \ i\n    local j\n    local n\n    local m\n    local l\n    local ", '    echo
    $1 $(./car_race_collision_solver.sh $1 $2 $3)', "    let n=$1\n    let collisions=0\n\
    \    let collision_prob=1.0\n    while [ $n -gt 0 ]; do\n        let collisions=collisions+1\n\
    \        let collision_prob=$((collision_prob + .5))\n        let n=$((n - 1))\n\
    \        let collision_prob=$((collision_prob * 2))\n    done\n    echo $collisions",
  "    set -- $1 \"$@\"\n    local n=0\n    for ((c=0; c<$1; c++)); do\n\tcase $2\
    \ in\n\t    right) local b=1;;\n\t    left) local a=1;;\n\t    both) local b=1;;\n\
    \t    *) echo \"$0: invalid car type: $2\" >&2; return 1;;\n\tesac\n\tlocal m=$(bc\
    \ <<< $((b^a)))\n\tif ((m>0)); then\n\t    ((n+=1))\n\t    case $b in a | grep\
    \ -v \"^$((c-1))$\"); then b=1; else a=1; fi;;\n\tesac\n    done\n    echo \"\
    $n\"", "    cd $HOME\n    local n=$1\n    local left_cars=$(($n - 1))\n    local\
    \ right_cars=$n\n    local left_collisions=0\n    local right_collisions=0\n\n\
    \    echo \"left_cars = $left_cars\"\n    echo \"right_cars = $right_cars\"\n\n\
    \    for (( i=1; i<=$n; i++ )); do\n        echo \"left_cars $i\"\n        echo\
    \ \"right_cars $i\"\n        echo \"left_collisions $left_collisions\"\n     \
    \   echo \"right_collisions $right_collisions\"\n\n        sleep $(( RANDOM %\
    \ 2 ))\n\n        left_cars=$(($left_cars - 1))\n\n        if [[ $(( RANDOM %\
    \ 2 )) -eq 0 ]]; then\n            (( left_collisions += 1 ))\n        else\n\
    \            (( right_collisions += 1 ))\n        fi\n    done\n\n    echo \"\
    left_collisions = $left_collisions\"\n    echo \"right_collisions = $right_collisions\"",
  "  n=$1\n  for i in $(seq 1 $n); do\n    for j in $(seq 0 $(( n - 1 - i ))); do\n\
    \      python \"$@\" $i $j\n      (( collisions ++ ))\n    done\n  done\n  echo\
    \ \"$collisions\"", "  local n=$1\n  local left_to_right=\"0 $((2*n))\"\n  local\
    \ right_to_left=\"$(echo \"2*n - 1\" | bc)\"\n  echo \"$(($(echo \"$(cat colliding_cars)\"\
    \ | head -n $((n+1)) |\n        sort | uniq | wc -l) - ((${#left_to_right[@]}\
    \ + ${#right_to_left[@]})%$((n))))\"", "    # Find all possible sets of two cars.\n\
    \    # Two cars collide if their velocity vectors differ in all but the direction\n\
    \    # of the smaller velocity vector.\n    # That is, if one car's velocity is\
    \ (100, 200) and the other is (200, 100),\n    # the collision is because the\
    \ smaller velocity is reversed in the\n    # x direction.\n    # With the input\
    \ of 2 cars, we get the first collision -- one whose velocity\n    # vectors all\
    \ differ in the x direction.\n    # Now we see that the second car is colliding.\n\
    \    # With the input of 4 cars, we get the second collision -- one whose velocity\n\
    \    # vectors all differ in the y direction.\n    # ...\n    # The process repeats\
    \ until we run out of cars to check!\n    local i j k l m n p\n    local cars=$((\
    \ $1 ))\n    while [ $cars -gt 0 ]; do\n        # Move the cars to the left until\
    \ no collision is detected.\n        j=0\n        while [ $j -lt $cars ]; do\n\
    \            m=$(( j + 1 ))\n            i=$(( m - 1 ))\n            k=$(( m +\
    \ 1 ))\n            while [ $k -lt $cars ]; do\n                l=$(( k + 1 ))\n\
    \                n=$(( l + 1 ))\n                p=$(( n + 1 ))\n            \
    \    # If the two cars are colliding, stop.\n                if [ \"$(vector_differ_by_dir\
    \ \"$(car_velocity \"$m\" \"$p\")\" \"$(car_velocity \"$k\" \"$p\")\")\" == \"\
    true\" ]; then\n                    [ $cars -eq 1 ] && echo \"$p is colliding\
    \ with $n\"\n                    return 0\n                fi\n              \
    \  k=$(( k + 1 ))\n            done\n            j=$(( j + 1 ))\n        done\n\
    \        [ $cars -eq 1 ] && echo \"$1 has collided\"\n        cars=$(expr $cars\
    \ - 1)\n    done\n    return 1", "  local count=0\n  local i=0\n  while [ $i -lt\
    \ $1 ]; do\n    local j=$(( i + 1 ))\n    while [ $j -lt $1 ]; do\n      if [\
    \ $j -eq $(( j - 1 )) ]; then\n        count=$(expr $count + 1)\n      else\n\
    \        if [ $i -eq $(( i + 1 )) ]; then\n          count=$(expr $count + 1)\n\
    \        fi\n      fi\n      j=$(( i + 1 ))\n    done\n    i=$(( i + 1 ))\n  done\n\
    \  echo $count", "  local NUM=$1\n  local STRAIGHT=$2\n  local COLLISIONS=$3\n\
    \  local LEFT=$4\n  local RIGHT=$5\n  local NUM_COLS=$6\n  local STRAIGHT_COLLISIONS=$7\n\
    \  local LEFT_COLLISIONS=$8\n  local RIGHT_COLLISIONS=$9\n  local STRAIGHT_HITS=$10\n\
    \  local LEFT_HITS=$11\n  local RIGHT_HITS=$12\n  local STRAIGHT_BREAKS=$13\n\
    \  local LEFT_BREAKS=$14\n  local RIGHT_BREAKS=$15\n  local STRAIGHT_STURDY=$16\n\
    \  local LEFT_STURDY=$17\n  local RIGHT_STURDY=$18\n  local STRAIGHT_BREAK_STURDY=$19\n\
    \  local LEFT_BREAK_STURDY=$20\n  local RIGHT_BREAK_STURDY=$21\n  local STRAIGHT_STURDY_BREAK=$22\n\
    \  local LEFT_STURDY_BREAK=$23\n  local RIGHT_STURDY_BREAK=$24\n  local STRAIGHT_BREAK_STURDY_BREAK=$25\n\
    \  local LEFT_BREAK_STURDY_BREAK=$26\n  local RIGHT_BREAK_STURDY_BREAK=$27\n \
    \ local STRAIGHT_STURDY_BREAK_STURDY=$28\n  local LEFT_STURDY_BREAK_STURDY=$29\n\
    \  local RIGHT_STURDY_BREAK_STURDY=$30\n  local STRAIGHT_BREAK_STURDY_BREAK_STURDY=$31\n\
    \  local LEFT_BREAK_STURDY_BREAK_STURDY=$32\n  local RIGHT_BREAK_STURDY_BREAK_STURDY=$33\n\
    \  local STRAIGHT_STURDY_BREAK_STURDY_BREAK=$34\n  local LEFT_STURDY_BREAK_STURDY_BREAK=$35\n\
    \  local RIGHT_STURDY_BREAK_STURDY_BREAK=$36\n  local STRAIGHT_STURDY_BREAK_STURDY_BREAK_STURDY=$37\n\
    \  local LEFT_STURDY_BREAK_STURDY_BRE", "  local n=$1\n  local -A race_collisions\n\
    \  local cars_left\n  local cars_right\n\n  cars_left=(\n    $(\n      for ((i=1;\
    \ i<=$((n-1)); ++i)); do\n        local c\n        c=$((RANDOM % n + 1))\n   \
    \     echo \"$c\"\n      done\n    )\n  )\n\n  cars_right=(\n    $(\n      for\
    \ ((i=1; i<=$((n-1)); ++i)); do\n        local c\n        c=$((RANDOM % n + 1))\n\
    \        echo \"$c\"\n      done\n    )\n  )\n\n  for ((i=0;i<$n;++i)); do\n \
    \   local c=$((RANDOM % n + 1))\n    if [[ ${cars_left[i]} != ${cars_right[c]}\
    \ ]]; then\n      race_collisions[$i]=1\n    fi\n  done", "\tlet collisions=0\n\
    \t\n\tcar1=$1\n\tcar2=$((car1+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar2=$((car2+1))\n\tlet collisions=collisions+($(car_distance\
    \ $car1 $car2|bc))\n\t\n\tcar", '        echo "$1 cars are colliding."', "  #\
    \ Input parameter checking.\n  if [[ ! $1 =~ ^[0-9]+$ ]]; then\n    echo \"ERROR:\
    \ car_race_collision called with $1 argument which is not an integer.\"\n    exit\
    \ 1\n  fi\n  # The cars are numbered from right to left; hence this subroutine\
    \ will output a number larger than $n.\n  n=$1\n  # Set up the initial conditions\
    \ for the simulation.\n  car_num=${n}\n  car_left_num=${car_num}\n  car_right_num=${car_num}\n\
    \  # Run the simulation until a collision occurs.\n  while true; do\n    # Set\
    \ the initial speed.\n    speed=${speed:-500}\n    # Set the initial positions.\n\
    \    car_left=${car_left_pos}\n    car_right=${car_right_pos}\n    # Set the initial\
    \ velocities.\n    car_left_velocity=${car_left_velocity}\n    car_right_velocity=${car_right_velocity}\n\
    \    # Output the initial positions.\n    echo \"${car_left}\"\n    echo \"${car_right}\"\
    \n    # Set the initial status.\n    collision=\"false\"\n    # Iterate over all\
    \ the cars.\n    for ((car_num=${car_num}; car_num>0; car_num--)); do\n      #\
    \ Get the new position.\n      car_left_pos=${car_left_pos}+${car_left_velocity}\n\
    \      car_right_pos=${car_right_pos}+${car_right_velocity}\n      # Get a copy\
    \ of the current velocity, and set the velocity to be 0.\n      car_left_velocity=${car_left_velocity}\n\
    \      car_right_velocity=${car_right_velocity}\n      # Get a copy of the current\
    \ status, and set the status to be false.\n      collision=${collision}\n    \
    \  # Set the new positions.\n      car_left=${car_left_pos}\n      car_right=${car_right_pos}\n\
    \      # Output the new positions.\n      echo \"${car_left}\"\n      echo \"\
    ${car_right}\"\n      # Check the new positions for collisions.\n      if [[ ${car_left}\
    \ -gt ${car_right} ]]; then\n        collision=\"true\"\n        echo \"${car_num}\
    \ collision at ${car_left} with ${car_right}\"\n        break\n      fi\n    done\n\
    \    # Output the status.\n    echo \"${collision}\"\n    if [[ ${collision} ==\
    \ \"true\" ]]; then\n      echo \"Car collision at ${car_left_num} with ${car_right_num}\"\
    \n      break\n    fi\n    # Output the new ", "   local -i n=$1\n   # if cars\
    \ move left and right in a straight line then there will be no collisions\n  \
    \ if ((n < 2)); then\n      echo 0\n   else\n      local -i collisions=0\n   \
    \   local -i j=0\n      local -i j0=0\n      local -i j1=0\n      local -i j2=0\n\
    \      local -i j3=0\n      local -i j4=0\n      local -i j5=0\n      local -i\
    \ j6=0\n      local -i j7=0\n      local -i j8=0\n      local -i j9=0\n      local\
    \ -i j10=0\n      local -i j11=0\n      local -i j12=0\n      local -i j13=0\n\
    \      local -i j14=0\n      local -i j15=0\n      local -i j16=0\n      local\
    \ -i j17=0\n      local -i j18=0\n      local -i j19=0\n      local -i j20=0\n\
    \      local -i j21=0\n      local -i j22=0\n      local -i j23=0\n      local\
    \ -i j24=0\n      local -i j25=0\n      local -i j26=0\n      local -i j27=0\n\
    \      local -i j28=0\n      local -i j29=0\n      local -i j30=0\n      local\
    \ -i j31=0\n      local -i j32=0\n      local -i j33=0\n      local -i j34=0\n\
    \      local -i j35=0\n      local -i j36=0\n      local -i j37=0\n      local\
    \ -i j38=0\n      local -i j39=0\n      local -i j40=0\n      local -i j41=0\n\
    \      local -i j42=0\n      local -i j43=0\n      local -i j44=0\n      local\
    \ -i j45=0\n      local -i j46=0\n      local -i j47=0\n      local -i j48=0\n\
    \      local -i j49=0\n      local -i j50=0\n      local -i j51=0\n      local\
    \ -i j52=0\n      local -i j53=0\n      local -i j54=0\n      local -i j55=0\n\
    \      local -i j56=0\n      local -i j57=0\n      local -i j58=0\n      local\
    \ -i j59=0\n      local -i j60=0\n      local -i j61=0\n      local -i j62=0\n\
    \      local -i j63=0\n      local -i j64=0\n      local -i j", "  # Convert the\
    \ input argument to an integer if it is not one already\n  input=\"${1:?argument\
    \ 1 must be an integer}\"\n  input=${input:-\"1\"}\n  input=${input:-\"0\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"0\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n  input=${input:-\"-1\"}\n\
    \  input=${input:-\"-1\"}\n  input=${", "    local n=$1\n    local c\n    local\
    \ car1\n    local car2\n    local x_start\n    local x_end\n    local i\n    local\
    \ j\n    local x_start_c\n    local x_end_c\n    local car1_c\n    local car2_c\n\
    \n    local collisions\n    local x_collisions\n    local y_collisions\n    local\
    \ x_start_collisions\n    local x_end_collisions\n    local car1_collisions\n\
    \    local car2_collisions\n\n    local x_start_c\n    local x_end_c\n    local\
    \ car1_c\n    local car2_c\n\n    local x_collision\n    local y_collision\n \
    \   local x_start_collision\n    local x_end_collision\n\n    for (( i = -1 ;\
    \ i <= n ; i++ )); do\n\n        c=$(( $i + $n))\n        if (( $c < 0 )); then\n\
    \            c=$(( $c - n))\n        fi\n\n        car1=${CARS[$(( $i + 1 ))]}\n\
    \        car2=${CARS[$(( $c ))]}\n\n        (( i == 0 )) && x_start=${car1}\n\
    \        (( c == 0 )) && x_end=${car1}\n        x_start_c=${CARS[$(( $i - 1 ))]}\n\
    \        x_end_c=${CARS[$(( $i + 1 ))]}\n        (( i == 0 )) && car1_c=${CARS[$((\
    \ 1 + $n - 1 ))]}\n        (( c == 0 )) && car2_c=${CARS[$(( 1 + $n - 1 ))]}\n\
    \n        (( i == 0 )) && x_start_collisions=${CARS[$(( 1 + $n - 2 ))]}\n    \
    \    (( c == 0 )) && x_end_collisions=${CARS[$(( 1 + $n - 2 ))]}\n        x_start_collisions=${CARS[$((\
    \ $i - 1 ))]}\n        x_end_collisions=${CARS[$(( $i + 1 ))]}\n\n        (( i\
    \ == 0 )) && car1_collisions=${CARS[$(( 1 + $n - 1 ))]}\n        (( c == 0 ))\
    \ && car2_collisions=${CARS[$(( 1 + $n - 1 ))]}\n        car1_collisions=${CARS[$((\
    \ $i - 1 ))]}\n        car2_collisions=${CARS[$(( $i + 1 ))]}\n\n        (( i\
    \ == 0 )) && y_collisions=${car1}\n        (( c == 0 )) && y_collisions=${car1}\n\
    \        (( i == 1 "]
stop_tokens:
- "\n}"
