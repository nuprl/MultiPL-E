name: HumanEval_71_triangle_area
language: sh
prompt: "#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return\
  \ the area of\n# the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n# than the third side.\n# Example:\n\
  # >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\"\
  \ \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an\
  \ integer\ntriangle_area() {\n"
tests: "}\n\ncandidate() {\n    triangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"3\" \"4\" \"5\") = \"6.0\" ]]\n    [[ $(candidate \"1\" \"\
  2\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"4\" \"8\" \"5\") = \"8.18\" ]]\n \
  \   [[ $(candidate \"2\" \"2\" \"2\") = \"1.73\" ]]\n    [[ $(candidate \"1\" \"\
  2\" \"3\") = \"-1\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"16.25\" ]]\n\
  \    [[ $(candidate \"2\" \"6\" \"3\") = \"-1\" ]]\n    [[ $(candidate \"1\" \"\
  1\" \"1\") = \"0.43\" ]]\n    [[ $(candidate \"2\" \"2\" \"10\") = \"-1\" ]]\n}\n\
  \nrun_test"
completions: ["    local a=\"$1\"\n    local b=\"$2\"\n    local c=\"$3\"\n    \n\
    \    if [ \"$a\" -le \"$b\" ] || [ \"$a\" -le \"$c\" ] || [ \"$b\" -le \"$c\"\
    \ ]; then\n        return 0\n    fi\n    \n    local s1=\"$((a + b))\"\n    local\
    \ s2=\"$((a + c))\"\n    local s3=\"$((b + c))\"\n    \n    if [ \"$s1\" -le \"\
    $s2\" ] || [ \"$s2\" -le \"$s3\" ]; then\n        return 0\n    fi\n    \n   \
    \ local sum=\"$((s1 + s2 + s3))\"\n    local result=\"$(echo \"$sum / 2\"|bc)\"\
    \n    \n    # round to two decimals\n    if [ \"$result\" -eq \"0\" ]; then\n\
    \        result=\"-1.0\"\n    fi\n    \n    echo \"$result\"", "  if [[ $(( $1\
    \ + $2 )) -ge $(( $3 + $2 )) ]];then\n    (( $area += $(( $1 + $2 ))  * $(( $1\
    \ + $2 ))  * $(( $3 + $2 ))  ))\n  else\n    (( $(echo \"$1 $2 $3\" | awk '{print\
    \ $1 + $2 + $3}') < 0 ))\n  fi\n  echo \"$area\"", "\tlength=$1\n\tside2=$2\n\t\
    side3=$3\n\tside1=$((side2 + side3))\n\techo $((side1*length/2))", "  local a=`expr\
    \ $1 \\* $1 \\+ $2 \\* $2`\n  local b=`expr $2 \\* $2 \\+ $3 \\* $3`\n  local\
    \ c=`expr $a \\+ $b`\n  if [ $c -gt 0 ]\n  then\n    echo \"$c\"\n  else\n   \
    \ echo \"-1\"\n  fi", "\tif [ $1 = $2 ] && [ $2 = $3 ]; then\n\t\techo \"$((($1\
    \ * $2) + ($2 * $3)))\"\n\telse\n\t\techo \"-1\"\n\tfi", '  printf "%.2f" $((
    ($1 + $2 + $3) / 2 ))', "    local a b c \n    a=$1\n    b=$2\n    c=$3\n    #\
    \ check if sum of any two sides is greater than third\n    if (( $a + $b ) > $c\
    \ )\n    then\n        echo \"$(( 2 * $a * b * 100 ))\"\n    else\n        echo\
    \ \"-1\"\n    fi", "  sum=$((($1+$2+$3)/2))\n  if (( $sum > $3 ))\n  then\n  \
    \  (( sum = $3 ))\n  fi\n  echo $(( 10#$sum * $(( $sum % 10 )) + $(( $sum % 10\
    \ )) ))", "\t(( $( expr \"$1 + $2 + $3\" : '+([0-9]*\\\\.[0-9]+)' ) )) \\\n\t\
    | bc", "  local side l1 l2 l3\n  local sum\n  side=$1\n  l1=$(expr $1 \\* 2)\n\
    \  l2=$(expr $1 \\* 3)\n  l3=$(expr $2 \\* 3)\n  sum=$((l1+l2+l3))\n  [ $sum -gt\
    \ $side ] && sum=$((l1+l3-(l2-l1)))\n  printf '%.2f' \"$sum\"", "    local side1=$1\n\
    \    local side2=$2\n    local side3=$3\n    if (($side1 + $side2 > $side3));\
    \ then\n        local sides=$((($side1 + $side2 > $side3) ? $side1 + $side2 :\
    \ $side3))\n        echo \"$((sides/2))\"\n    else\n        echo \"-1\"\n   \
    \ fi", "  if (( $1 + $2 > $3 )); then\n    echo $(( ($1 + $2) * $3 / 2 ))\n  else\n\
    \    return -1\n  fi", "    local a=$1\n    local b=$2\n    local c=$3\n    if\
    \ [ $a -lt $b ] || [ $b -lt $c ] || [ $c -lt $a ] ; then\n        return -1\n\
    \    fi\n    echo \"$(( a * b ) / c)\"", "    local area=\"$(( $(echo \"$2*$3\"\
    \ | bc) + $(( ($(echo \"$1+$3\" | bc) / 2) ))*0.5 )\"\n    case \"$area\" in\n\
    \        *)\n            echo \"$area\"\n        ;;\n    esac", "  if [ \"$1\"\
    \ -ge \"$2\" ]; then\n    if [ \"$1\" -ge \"$3\" ]; then\n      echo \"$(($1 +\
    \ $2 + $3) / 2)\"\n    else\n      echo \"-1\"\n    fi\n  else\n    if [ \"$2\"\
    \ -ge \"$3\" ]; then\n      echo \"$(($1 + $2 + $3) / 2)\"\n    else\n      echo\
    \ \"-1\"\n    fi\n  fi", "\techo \"$(($2 * $3)) / $(($1 + $2 + $3))\"", "  echo\
    \ \"$1 $2 $3\" | grep -q '^([[:digit:]]+)($|[[:space:]]*)$' &&\n  echo \"${BASH_REMATCH[1]}${BASH_REMATCH[2]}\"\
    \ | bc && echo \"$((${BASH_REMATCH[1]}*${BASH_REMATCH[2]})/4)\"", "  triangle_length=`expr\
    \ \"$1\" \\* \"$2\"`\n  legnth1=`expr \"$triangle_length\" \\* \"$3\"`\n  legnth2=`expr\
    \ \"$triangle_length\" \\* \"$2\"`\n  legnth3=`expr \"$triangle_length\" \\* \"\
    $1\"`\n  echo $legnth1 + $legnth2 + $legnth3", "  if [ \"$2\" -gt \"$3\" ]; then\n\
    \    echo $(( ($2 + $3) * .5 ))\n  else\n    echo $(( ($2 + $3) * 2 ))\n  fi",
  "    if [ $(( $(echo $3 | bc) + $(echo $2 | bc) + $(echo $1 | bc) )) -gt $(( $(echo\
    \ $2 | bc) + $(echo $3 | bc) )) ]; then\n        echo \"$(( $(echo $3 | bc) +\
    \ $(echo $2 | bc) + $(echo $1 | bc) ))\"\n    else\n        echo \"-1\"\n    fi",
  "    a=`expr $1 \\* $2`\n    b=`expr $1 \\* $3`\n    c=`expr $2 \\* $3`\n    # Only\
    \ three sides given\n    if [ $a -eq 0 -o $b -eq 0 -o $c -eq 0 ]; then\n     \
    \   return -1\n    fi\n    if [ $b -gt $c ]; then\n        if [ $a -gt $b ]; then\n\
    \            echo $a\n        fi\n        echo $(( ${a} * $c / $b ))\n    else\n\
    \        echo $(( ${a} * $c / $b ))\n        echo $(( ${a} * $b / $c ))\n    fi",
  "  # Check if all arguments are integers and if all arguments are greater than 0\n\
    \  local num_args first_arg second_arg third_arg\n  num_args=$(echo $@ | wc -w)\n\
    \  if [ \"$num_args\" -ne \"3\" ]\n  then\n    return -1\n  fi\n  first_arg=$(echo\
    \ $1 | cut -d'i' -f1)\n  second_arg=$(echo $2 | cut -d'i' -f1)\n  third_arg=$(echo\
    \ $3 | cut -d'i' -f1)\n  \n  # Check if the first argument is greater than 0\n\
    \  if [ \"$first_arg\" -eq \"0\" ]\n  then\n    return -1\n  fi\n\n  # Check if\
    \ the first argument is greater than or equal to the second argument\n  if [ \"\
    $first_arg\" -gt \"$second_arg\" ]\n  then\n    return -1\n  fi\n\n  # Check if\
    \ the second argument is greater than or equal to the third argument\n  if [ \"\
    $second_arg\" -gt \"$third_arg\" ]\n  then\n    return -1\n  fi\n\n  # If all\
    \ three arguments are equal, calculate the area of a triangle and round it to\
    \ two decimal places.\n  # If all arguments are greater than 0, calculate an area\
    \ of a triangle and round it to two decimal places.\n  if [ \"$first_arg\" -eq\
    \ \"$third_arg\" ]\n  then\n    arear=$(echo \"$first_arg*$second_arg\" | bc -w)\n\
    \    echo $arear\n  else\n    arear=$(echo \"$first_arg*$second_arg*$third_arg\"\
    \ | bc -w)\n    echo $arear\n  fi", "  local L1 L2 L3\n  L1=$(echo \"$1\" | tr\
    \ '\\n' ' ')\n  L2=$(echo \"$2\" | tr '\\n' ' ')\n  L3=$(echo \"$3\" | tr '\\\
    n' ' ')\n  if [ $L1 + $L2 -ge $L3 ]; then\n    echo $(( $L1 * $L2 ))\n  else\n\
    \    echo $(( -1 ))\n  fi", "\tif [ $# -ne 3 ]; then\n\t\techo \"Bad parameters\
    \ to triangle_area()\"\n\t\texit 1\n\tfi\n\t(( sum=$1 + $2 + $3 ))\n\tif [ $sum\
    \ -gt $3 ]; then\n\t\techo $(( ($sum / $3) | bc ))\n\telse\n\t\techo \"-1\"\n\t\
    fi", "  if [ \"$#\" -lt 3 ]; then\n    echo \"Usage: $(basename $0) <1st side\
    \ length> <2nd side length> <3rd side length>\"\n    exit -1\n  fi\n\n  # Test\
    \ to see if all arguments are numbers.\n  if ! [[ $1 =~ ^[0-9]+$ ]]; then\n  \
    \  echo \"Usage: $(basename $0) <1st side length> <2nd side length> <3rd side\
    \ length>\"\n    exit -1\n  fi\n  if ! [[ $2 =~ ^[0-9]+$ ]]; then\n    echo \"\
    Usage: $(basename $0) <1st side length> <2nd side length> <3rd side length>\"\n\
    \    exit -1\n  fi\n  if ! [[ $3 =~ ^[0-9]+$ ]]; then\n    echo \"Usage: $(basename\
    \ $0) <1st side length> <2nd side length> <3rd side length>\"\n    exit -1\n \
    \ fi\n\n  a=$1\n  b=$2\n  c=$3\n  if [[ $a -gt $b || $a -gt $c || $b -gt $c ]];\
    \ then\n    # Two sides are equal\n    if [ $a -eq $b ]; then\n      # One side\
    \ is greater than the other\n      if [ $a -eq $c ]; then\n        echo \"$a $a\
    \ $a\"\n      else\n        echo \"$a $c $c\"\n      fi\n    else\n      echo\
    \ \"$a $b $b\"\n    fi\n  else\n    if [ $a -eq $c ]; then\n      # One side is\
    \ greater than the other\n      echo \"$a $c $c\"\n    else\n      echo \"$a $b\
    \ $b\"\n    fi\n  fi", "    (( \"$1\" < 0 )) && return -1\n    (( \"$2\" < 0 ))\
    \ && return -1\n    (( \"$3\" < 0 )) && return -1\n    \n    (( \"$1+$2\" > \"\
    $3\" )) && return -1\n\n    (( \"$1+$3\" > \"$2+$3\" )) && return -1\n\n    ((\
    \ \"$2+$3\" > \"$1+$3\" )) && return -1\n    \n    \n    (( \"$(( $2 * $2 + $3\
    \ * $3 ))\" > \"$(( $1 * $1 + $3 * $3 ))\" )) && return -1\n    \n    (( \"$((\
    \ $1 * $1 + $2 * $2 ))\" > \"$(( $2 * $2 + $3 * $3 ))\" )) && return -1\n    \n\
    \    \n    (( \"$(( $1 * $1 + $2 * $2 ))\" > \"$(( $2 * $2 + $3 * $3 ))\" )) &&\
    \ return -1\n    \n    (( \"$(( $1 * $1 + $2 * $2 ))\" > \"$(( $2 * $2 + $3 *\
    \ $3 ))\" )) && return -1\n    \n    \n    (( \"$(( $2 * $2 + $3 * $3 ))\" > \"\
    $(( $1 * $1 + $2 * $2 ))\" )) && return -1\n    \n    \n    (( \"$(( $1 * $1 +\
    \ $2 * $2 ))\" > \"$(( $2 * $2 + $3 * $3 ))\" )) && return -1\n    \n    \n  \
    \  (( \"$(( $1 * $1 + $2 * $2 ))\" > \"$(( $2 * $2 + $3 * $3 ))\" )) && return\
    \ -1\n    \n    (( \"$(( $1 * $1 + $2 * $2 ))\" > \"$(( $2 * $2 + $3 * $3 ))\"\
    \ )) && return -1\n    \n    \n    (( \"$(( $2 * $2 + $3 * $3 ))\" > \"$(( $1\
    \ * $1 + $2 * $2 ))\" )) && return -1\n    \n    \n    (( \"$(( $1 * $1 + $2 *\
    \ $2 ))\" > \"$(( $2 * $2 + $3 * $3 ))\" )) && return -1\n    \n    (( \"$(( $1\
    \ * $1 + $2 * $2 ))\" > \"$(( $2 * $2 + $3 * $3 ))\" )) && return -1\n    \n \
    \   (( \"$(( $2 * $2 + $3 * $3 ))\" > \"$(( $1 * $1 + $2 * $2 ))\" )) && return\
    \ -1\n    \n    \n    (( \"$(( $1 * $1 + $2 * $2 ))\" > \"$(( $", "    local side1=$(echo\
    \ $1 | awk '{print $1*$2}')\n    local side2=$(echo $2 | awk '{print $1*$2}')\n\
    \    local side3=$(echo $3 | awk '{print $1*$2}')\n    local area\n    if (($side1+$side2+$side3)\
    \ > $side3)\n    then\n        area=$((($side1*$side1)+($side2*$side2)+($side3*$side3))/2)\n\
    \    else\n        area=$((($side1*$side1)+($side2*$side2)+($side3*$side3)))\n\
    \    fi\n    echo $area", '    echo $(( $1 + $2 + $3 ))', "  a=$1\n  b=$2\n  c=$3\n\
    \  if [ $a -ge $b ] && [ $b -ge $c ] && [ $c -ge $a ]\n    then\n      echo \"\
    $(( (a*a + b*b + c*c)/2 ))\"\n  else\n    echo \"-1\"\n  fi", "\tlocal side_1\
    \ side_2 side_3\n\n\tside_1=$(echo $1 | awk '{ printf \"%.2f\", $1 }')\n\tside_2=$(echo\
    \ $2 | awk '{ printf \"%.2f\", $2 }')\n\tside_3=$(echo $3 | awk '{ printf \"%.2f\"\
    , $3 }')\n\n\tif (( $(echo \"$side_1 + $side_2 > $side_3\" | bc -l) )); then\n\
    \t\techo \"$side_1 + $side_2 > $side_3\"\n\t\techo \"$side_1 + $side_2 + $side_3\"\
    \n\telse\n\t\techo \"$side_1 + $side_2 + $side_3 != $side_1 + $side_2 + $side_3\"\
    \n\t\techo \"-1\"\n\tfi", "  if [ $(( ($1 + $2) > $3) ]; then \n    if [ $(( ($1\
    \ + $3) > $2) ]; then \n      echo $(( (($1 + $2) * $3) / 2)) \n    else \n  \
    \    echo $(( (($1 + $3) * $2) / 2)) \n    fi \n  else \n    echo -1 \n  fi ",
  "  length=$(python -c \"import math; import sys; sys.exit(sum(map(int, sys.argv[1].split('\
    \ '))))\")\n  if [ $length -gt $3 ]\n  then\n    length=$(python -c \"import math;\
    \ import sys; sys.exit(sum(map(int, sys.argv[2].split(' '))))\")\n    if [ $length\
    \ -gt $3 ]\n    then\n      length=$(python -c \"import math; import sys; sys.exit(sum(map(int,\
    \ sys.argv[3].split(' '))))\")\n      if [ $length -gt $3 ]\n      then\n    \
    \    echo $((length / 2))\n      else\n        echo -1\n      fi\n    else\n \
    \     echo -1\n    fi\n  else\n    echo -1\n  fi", "    local a b c d e\n    a=$1\n\
    \    b=$2\n    c=$3\n    \n    e=$((a + b + c))\n\n    # check if a valid triangle\
    \ \n    if [ $e -ge $((a + b) ) ] && [ $e -ge $((b + c) ) ] && [ $e -ge $((c +\
    \ a) ) ]; then\n        echo \"$(( a * b ))\"\n    else\n        echo \"-1\"\n\
    \    fi", "\tlocal triangle_sides_length=${1}\n\tlocal triangle_sides_length_2=${2}\n\
    \tlocal triangle_sides_length_2=${3}\n\tif [ \"$triangle_sides_length\" -eq \"\
    $triangle_sides_length_2\" ]\n\t\tthen echo \"$triangle_sides_length\"\n\t\telse\
    \ echo \"-1\"\n\tfi", "        local sides=$1 \n        local base=$2\n      \
    \  local height=$3\n        local area=$((base*height))\n        if [ $area -gt\
    \ 0 ]; then\n                echo \"$(awk -v sides=$sides -v base=$base -v height=$height\
    \ 'BEGIN {print sides*base*height}')\" | bc\n        else\n                echo\
    \ \"-1\"\n        fi", "  local side1=$1\n  local side2=$2\n  local side3=$3\n\
    \  if [[ $side1 -ge 0 ]] && [[ $side2 -ge 0 ]] && [[ $side3 -ge 0 ]]\n  then\n\
    \    if [[ $side1 + $side2 -ge $side3 ]]\n    then\n      echo $(( $side1 + $side2\
    \ - $side3 ))\n    else\n      echo $(( -1 ))\n    fi\n  else\n    echo $(( -1\
    \ ))\n  fi", "    local len1 len2 len3 result\n    len1=$1\n    len2=$2\n    len3=$3\n\
    \    if [ $len1 -ge 0 ] && [ $len2 -ge 0 ] && [ $len3 -ge 0 ]; then\n        result=$(echo\
    \ \"scale=2; ($len1+$len2+$len3)/2\" | bc)\n        echo \"$result\"\n    else\n\
    \        echo \"-1\"\n    fi", "  if [ $# -eq 0 ]\n  then\n    echo \"Usage: `basename\
    \ $0` <Length1> <Length2> <Length3>\"\n    return -1\n  fi\n  local Length1 Length2\
    \ Length3\n  local Area\n  Length1=$1\n  Length2=$2\n  Length3=$3\n  Area=$((\
    \ $Length1 * $Length2 + $Length2 * $Length3 ))\n  local decimalPoint=$(echo $Area\
    \ | awk '{printf \"%2.2f\\n\", $1*$1/2}')\n  echo \"$decimalPoint\"\n  return\
    \ 0", "  (( $1 > 0 && $2 > 0 && $3 > 0 && $1 + $2 > $3 )) || return -1\n  echo\
    \ \"$(( $1 * $1 ))\"\n  echo \"$(( $2 * $2 ))\"\n  echo \"$(( $3 * $3 ))\"", " \
    \   area_a=$(expr $1 / 2)\n    area_b=$(expr $2 / 2)\n    area_c=$(expr $3 / 2)\n\
    \    if [ $area_a -gt $area_b ] || [ $area_a -gt $area_c ] ; then\n        area_s=$(expr\
    \ $area_a + $area_b - $area_c)\n    elif [ $area_b -gt $area_c ] ; then\n    \
    \    area_s=$(expr $area_a + $area_c - $area_b)\n    elif [ $area_c -gt $area_b\
    \ ] ; then\n        area_s=$(expr $area_a + $area_b - $area_c)\n    fi\n    if\
    \ [ $area_s -lt 1 ] ; then area_s=-1; fi\n    echo \"$area_s\"", "    local len1=$1\n\
    \    local len2=$2\n    local len3=$3\n    local sum1=$((len1+len2))\n    local\
    \ sum2=$((len2+len3))\n    local sum3=$((len1+len3))\n    if [[ ${sum1..3} -gt\
    \ ${sum2..3} ]]; then\n        echo \"$sum1\"\n    elif [[ ${sum2..3} -gt ${sum3..3}\
    \ ]]; then\n        echo \"$sum2\"\n    else\n        echo \"$sum3\"\n    fi",
  "\tlocal side side1 side2\n\tlocal result\n\n\t# Avoid division by zero\n\tif [\
    \ $2 -eq 0 ]; then\n\t\techo -1\n\t\treturn\n\tfi\n\n\tlocal sides=$(( ($2 + $3)\
    \ / 2 ))\n\tside1=`expr $1 \\* $sides`\n\tside2=`expr $2 \\* $sides`\n\n\tif [\
    \ $side1 > $side2 ]; then\n\t\tresult=$(( `expr $side1 \\* $side1` / `expr $side2\
    \ \\* $side2` ))\n\telse\n\t\tresult=$(( `expr $side1 \\* $side2` / `expr $side2\
    \ \\* $side1` ))\n\tfi\n\techo $result", "    if [ $# -eq 3 ]; then\n        local\
    \ a=$1\n        local b=$2\n        local c=$3\n        if [ \"$a\" == \"$c\"\
    \ ] && [ \"$b\" == \"$a\" ]; then\n            echo \"0\"\n        elif [ \"$a\"\
    \ > \"$c\" ] && [ \"$b\" > \"$a\" ]; then\n            echo \"$(( ($a * ($b -\
    \ $a) / ($c - $a) )))\"\n        elif [ \"$a\" > \"$b\" ] && [ \"$b\" > \"$c\"\
    \ ]; then\n            echo \"$(( ($a * ($b - $c) / ($a - $c) )))\"\n        else\n\
    \            echo \"-1\"\n        fi\n    else\n        echo \"-1\"\n    fi",
  "\tlocal side1=$1\n\tlocal side2=$2\n\tlocal side3=$3\n\tlocal area\n\n\tif (( ${side1}\
    \ <= ${side2} && ${side1} <= ${side3} && ${side2} <= ${side3} ))\n\tthen\n\t\t\
    area=$((${side1} * ${side1} * ${side2} / 3))\n\telse\n\t\tarea=\"-1\"\n\tfi\n\n\
    \techo \"$area\"", "    if (($1 -gt $2)); then\n        echo -1\n    else\n  \
    \      echo \"scale=2; $((($1*$1+$2*$2+$3*$3)/2))\"\n    fi", "  # Convert sides\
    \ to float values\n  echo \"$1\" \"$2\" \"$3\" | xargs -I % echo $(( 100*($1 $2)/($1\
    \ $3 $2) ))", "\t# Return area rounded up to 2 decimal points\n\t# $1 is an integer\n\
    \t# $2 is an integer\n\t# $3 is an integer\n\t# Return area rounded up to 2 decimal\
    \ points\n\tlocal side1=$1\n\tlocal side2=$2\n\tlocal side3=$3\n\tif [ $side1\
    \ = $side2 ] && [ $side1 = $side3 ]\n\tthen\n\t\techo $((side1 + side2 + side3)\
    \ / 2.0)\n\telif [ $side1 -gt $side2 ] && [ $side1 -gt $side3 ]\n\tthen\n\t\t\
    echo $((side1 + side2 + side3) / 2.0)\n\telif [ $side2 -gt $side3 ]\n\tthen\n\t\
    \techo $((side1 + side2 + side3) / 2.0)\n\telse\n\t\techo $((side1 + side2 + side3)\
    \ / 2.0)\n\tfi", "    local first_side=$1\n    local second_side=$2\n    local\
    \ third_side=$3\n    local sum=$((first_side + second_side + third_side))\n  \
    \  if [[ $first_side -gt $third_side && $second_side -gt $third_side && $third_side\
    \ -gt $first_side ]]; then\n        echo \"$sum\"\n        echo \"$((sum / 2.0))\"\
    \n    elif [[ $first_side -gt $third_side && $second_side -gt $first_side && $third_side\
    \ -gt $second_side ]]; then\n        echo \"$sum\"\n        echo \"$((sum / 2.0))\"\
    \n    elif [[ $second_side -gt $first_side && $third_side -gt $second_side &&\
    \ $third_side -gt $first_side ]]; then\n        echo \"$sum\"\n        echo \"\
    $((sum / 2.0))\"\n    elif [[ $second_side -gt $first_side && $third_side -gt\
    \ $second_side && $third_side -gt $third_side ]]; then\n        echo \"$sum\"\n\
    \        echo \"$((sum / 2.0))\"\n    else\n        echo \"-1\"\n    fi", "\t\
    len1=$1\n\tlen2=$2\n\tlen3=$3\n\tif (( len1 -eq 0 )) || (( len2 -eq 0 )) || ((\
    \ len3 -eq 0 ))\n\tthen\n\t\treturn -1\n\telse\n\t\tarea_of_triangle=$(( len1*len1\
    \ + len2*len2 + len3*len3 ))\n\t\tif (( area_of_triangle > len3 )) ; then\n\t\t\
    \tarea_of_triangle=$(( len3*len3 ))\n\t\tfi\n\tfi\n\techo $area_of_triangle",
  "  local a=$1\n  local b=$2\n  local c=$3\n  if (( b > c )); then\n    b=$c\n  fi\n\
    \  if (( c > a )); then\n    c=$a\n  fi\n  if (( b < c )); then\n    c=$b\n  fi\n\
    \  if (( a + c < b )); then\n    if (( a + c > c )); then\n      if (( a + b >\
    \ c )); then\n        echo $(a*b*c/4)\n      else\n        echo \"-1\"\n     \
    \ fi\n    else\n      echo \"-1\"\n    fi\n  else\n    echo \"-1\"\n  fi", " \
    \   local side_1 \"$1\"\n    local side_2 \"$2\"\n    local side_3 \"$3\"\n  \
    \  local area \n\n    local i\n    local length\n    local valid_side\n    \n\
    \    # Make sure we are not using negative lengths\n    if [[ \"$side_1\" == \"\
    0\" ]]; then\n        side_1=\"-1\"\n    fi\n    if [[ \"$side_2\" == \"0\" ]];\
    \ then\n        side_2=\"-1\"\n    fi\n    if [[ \"$side_3\" == \"0\" ]]; then\n\
    \        side_3=\"-1\"\n    fi\n\n    length=\"$(( (side_1 + side_2 + side_3)\
    \ / 2 ))\"\n    if [[ \"$side_1\" == \"-1\" || \"$side_2\" == \"-1\" || \"$side_3\"\
    \ == \"-1\" ]]; then\n        area=\"-1\"\n        return ${area}\n    else\n\
    \        valid_side=\"$((side_1 + side_2 + side_3))\"\n        if [[ \"$length\"\
    \ -gt \"$valid_side\" ]]; then\n            area=\"$((side_1 * side_2 * side_3))\"\
    \n        else\n            area=\"-1\"\n        fi\n        return ${area}\n\
    \    fi", "    side_1=$1\n    side_1_length=$((side_1*2))\n    side_1_length=$(echo\
    \ \"$side_1_length\" | bc)\n    side_1_length=$(echo \"$side_1_length/3\" | bc)\n\
    \    side_1_length=$(echo \"$side_1_length+$side_1_length\" | bc)\n    side_1_length=$(echo\
    \ \"$side_1_length*3\" | bc)\n\n    side_2=$2\n    side_2_length=$((side_2*2))\n\
    \    side_2_length=$(echo \"$side_2_length\" | bc)\n    side_2_length=$(echo \"\
    $side_2_length/3\" | bc)\n    side_2_length=$(echo \"$side_2_length+$side_2_length\"\
    \ | bc)\n    side_2_length=$(echo \"$side_2_length*3\" | bc)\n\n    side_3=$3\n\
    \    side_3_length=$((side_3*2))\n    side_3_length=$(echo \"$side_3_length\"\
    \ | bc)\n    side_3_length=$(echo \"$side_3_length/3\" | bc)\n    side_3_length=$(echo\
    \ \"$side_3_length+$side_3_length\" | bc)\n    side_3_length=$(echo \"$side_3_length*3\"\
    \ | bc)\n\n    if [ $side_1_length -ge $side_2_length && $side_1_length -ge $side_3_length\
    \ ]; then\n        echo \"$side_1_length\"\n    elif [ $side_2_length -ge $side_3_length\
    \ && $side_2_length -ge $side_1_length ]; then\n        echo \"$side_2_length\"\
    \n    elif [ $side_3_length -ge $side_1_length && $side_3_length -ge $side_2_length\
    \ ]; then\n        echo \"$side_3_length\"\n    else\n        echo \"-1\"\n  \
    \  fi", "\tlet length=${1:?}\n\tlet lenght2=${2:?}\n\tlet length3=${3:?}\n\tif\
    \ [[ $((length + lenght2 + length3)) -gt $((length*length*length)) ]]; then\n\t\
    \techo \"$((length*length*length))\"\n\telse\n\t\techo \"-1\"\n\tfi", "    local\
    \ l1 l2 l3\n    l1=$(echo \"$1\" | tr -d '[:space:]')\n    l2=$(echo \"$2\" |\
    \ tr -d '[:space:]')\n    l3=$(echo \"$3\" | tr -d '[:space:]')\n    if [[ $l3\
    \ -eq 0 ]]; then\n        echo \"$l1 $l2 0\"\n    elif [[ $l1 -eq 0 ]]; then\n\
    \        echo \"0 $l2 $l3\"\n    elif [[ $l2 -eq 0 ]]; then\n        echo \"$l1\
    \ 0 $l3\"\n    elif [[ $l1 -gt $l2 ]]; then\n        echo \"-1\"\n    else\n \
    \       echo \"$(echo \"$l1 + $l2\" | bc -l)\"\n    fi", "  local a b c\n  local\
    \ valid=true\n  a=$1\n  b=$2\n  c=$3\n  ((valid=(b<=c)) && echo \"$a\" \"*\" \"\
    $b\" \"/\" \"$c\" || echo \"-1\")", "    local l1 l2 l3\n    l1=$1\n    l2=$2\n\
    \    l3=$3\n    if [ $((l1+l2+l3)) -gt $((l1+l2+l3+l2+l1)) ]; then\n        echo\
    \ \"$l1 $l2 $l3\"\n        ((l1+l2+l3)) & echo \"$((l1*l2*(l2+l3)/((l1*l2)+l3)))\
    \ & $((l1*((l2)+l3)*((l2+l3)/((l1*l2)+l3)))/((l1*l2)+l3)) + l2*((l1+l2+l3)*((l2+l3)/((l1*l2)+l3)))/((l1*l2)+l3))\"\
    \n    else\n        echo \"-1\"\n    fi", "  local triangle_length=\"$1\"\n  local\
    \ side1=\"$2\"\n  local side2=\"$3\"\n  local sum=\"${side1+side2}\" \n  local\
    \ area=`expr $sum / $triangle_length`\n  if [ $area -gt $side3 ]; then\n    echo\
    \ \"$area\"\n  else\n    echo \"-1\"\n  fi", "    local side_1=$1\n    local side_2=$2\n\
    \    local side_3=$3\n    # Triangle sides can have values of 1 or greater, so\
    \ check side lengths\n    if [ \"$side_1\" -lt 1 ] || [ \"$side_2\" -lt 1 ] ||\
    \ [ \"$side_3\" -lt 1 ]; then\n        echo \"$side_1,$side_2,$side_3 not valid\"\
    \n        exit 1\n    fi\n    # Sum of two sides must be greater than the third\
    \ side\n    if [ $(( side_1 + side_2 )) -gt $side_3 ]; then\n        echo \"side_1\
    \ + side_2 > $side_3\"\n        exit 1\n    fi\n    # Now sum of the two sides\
    \ can be greater than the third side, so divide \n    # the total of the two sides\
    \ by the third side and round to 2 decimal places \n    # to determine area\n\
    \    local result=$(echo \"scale=2; $side_1 + $side_2 / $side_3\" | bc)\n    if\
    \ [ \"${result}\" -gt \"10\" ]; then\n        echo \"Result is greater than 10\"\
    \n        exit 1\n    fi\n    echo \"$result\"", "\tlocal a=${1%?}\n\tlocal b=${2%?}\n\
    \tlocal c=${3%?}\n\n\t# Valid triangle if either a + b > c or b + c > a\n\t# If\
    \ only one side is non-zero, then the other is non-zero also\n\t# so only one\
    \ side can be non-zero and the other is 0\n\t# Example: \n\t# - triangle_area\
    \ \"1\" \"2\" \"3\"\n\t# - triangle_area \"3\" \"4\" \"5\"\n\t# - triangle_area\
    \ \"4\" \"5\" \"1\"\n\tif [[ $(expr $a + $b >  $c) ]]\n\t\tthen\n\t\t\tif [[ $(expr\
    \ $b + $c >  $a) ]]\n\t\t\t\tthen\n\t\t\t\t  echo $(printf '%.2f' $(awk 'BEGIN{printf(\"\
    %.2f\",$1*$1-$2*$2+$3*$3)}END{printf \"\\n\"}'));\n\t\t\telse \n\t\t\t\techo \"\
    -1\";\n\t\t\tfi\n\telse \n\t\tif [[ $(expr $b + $c >  $a) ]]\n\t\t\tthen\n\t\t\
    \t echo $(printf '%.2f' $(awk 'BEGIN{printf(\"%.2f\",$1*$1+$2*$2-$3*$3)}END{printf\
    \ \"\\n\"}'));\n\t\telse \n\t\t\techo \"-1\";\n\t\tfi\n\tfi", "    local length\
    \ length2 length3\n    length=$1\n    length2=$2\n    length3=$3\n\n    # check\
    \ if sum is greater than third side\n    if [ $((length+length2+length3)) -gt\
    \ $length3 ];\n        then echo \"-1\"\n    elif [ $((length+length2+length3))\
    \ -lt $length3 ];\n        then echo \"0\"\n    elif [ $((length2+length3)) -lt\
    \ $length2 ];\n        then echo \"-1\"\n    else\n        # sum greater than\
    \ third side, so area is half the length of the triangle\n        echo \"$length\
    \ / 2\"\n    fi", "  local triangle1=$1\n  local triangle2=$2\n  local triangle3=$3\n\
    \  \n  # Test if triangle1 is greater than or equal to triangle2\n  if ((triangle1\
    \ > triangle2) || (triangle1 < triangle2)); then\n    echo \"$triangle1 $triangle2\
    \ $triangle3 not a valid triangle to form a side\"\n    return -1\n  fi\n  # Test\
    \ if triangle2 is greater than or equal to triangle3\n  if ((triangle2 > triangle3)\
    \ || (triangle2 < triangle3)); then\n    echo \"$triangle1 $triangle2 $triangle3\
    \ not a valid triangle to form a side\"\n    return -1\n  fi\n  # Test if triangle1\
    \ is greater than or equal to triangle3\n  if ((triangle1 > triangle3) || (triangle1\
    \ < triangle3)); then\n    echo \"$triangle1 $triangle2 $triangle3 not a valid\
    \ triangle to form a side\"\n    return -1\n  fi\n  \n  # Test if triangle1 is\
    \ equal to triangle2\n  if ((triangle1 == triangle2) || (triangle1 == triangle3))\
    \ return 1\n  # Test if triangle2 is equal to triangle3\n  if ((triangle2 == triangle3)\
    \ || (triangle2 == triangle1)) return 1\n  \n  # Test if triangle1 is greater\
    \ than or equal to triangle2\n  if ((triangle1 > triangle2) || (triangle1 < triangle2));\
    \ then\n    echo \"$triangle1 $triangle2 $triangle3 not a valid triangle to form\
    \ a side\"\n    return -1\n  fi\n  # Test if triangle2 is greater than or equal\
    \ to triangle3\n  if ((triangle2 > triangle3) || (triangle2 < triangle3)); then\n\
    \    echo \"$triangle1 $triangle2 $triangle3 not a valid triangle to form a side\"\
    \n    return -1\n  fi\n  # Test if triangle1 is greater than or equal to triangle3\n\
    \  if ((triangle1 > triangle3) || (triangle1 < triangle3)); then\n    echo \"\
    $triangle1 $triangle2 $triangle3 not a valid triangle to form a side\"\n    return\
    \ -1\n  fi\n  \n  # Test if triangle1 is equal to triangle2\n  if ((triangle1\
    \ == triangle2) || (triangle1 == triangle3)) return 1\n  # Test if triangle2 is\
    \ equal to triangle3\n  if ((triangle2 == triangle3) || (triangle2 == triangle1))\
    \ return 1\n  \n  # Test if triangle1 is greater than or equal to triangle2\n\
    \  if ((triangle1 > triangle2) || (triangle1 < triangle2)); then\n    echo \"\
    $triangle1 $triangle2 $triangle3 not a valid triangle to form a side\"\n    return\
    \ -1\n  fi\n  # Test if triangle2 is greater than or equal to triangle3\n  if\
    \ ((triangle2 > triangle3) || (triangle2 < triangle3)); then", "    local a b\
    \ c \n    a=$1; b=$2; c=$3\n    if (( $a + $b <= $c )); then \n        echo 0\n\
    \    elif (( $a + $c <= $b )); then \n        echo $(( $a + $b * $c / $a ))\n\
    \    elif (( $b + $c <= $a )); then \n        echo $(( $b + $c * $a / $b ))\n\
    \    else\n        echo -1\n    fi", "\tlocal a b c\n\ta=$1\n\tb=$2\n\tc=$3\n\t\
    # Verify that the three sides make triangle\n\tif [ $a -eq $b ] && [ $b -eq $c\
    \ ] ; then\n\t\t# Check if a triangle exists\n\t\tif [ $a -eq $b ] ; then\n\t\t\
    \tif [ $c -eq $b ] ; then\n\t\t\t\techo \"0\"\n\t\t\telse\n\t\t\t\techo \"0\"\n\
    \t\t\tfi\n\t\telif [ $c -eq $b ] ; then\n\t\t\techo \"0\"\n\t\telse\n\t\t\techo\
    \ \"0\"\n\t\tfi\n\telse\n\t\techo \"0\"\n\tfi", "  if (( $# < 3 )); then\n   \
    \ echo -1\n  else\n    # Calculate area of the triangle using the Pythagorean\
    \ formula\n    echo $(( ($1 * $1) + ($2 * $2) + ($3 * $3) ))\n  fi", "  local\
    \ side a b c\n  if [ $# != 3 ] ; then\n    echo \"Usage: $(basename $0) <s> <b>\
    \ <c>\"\n    return -1\n  fi\n  # Initialize variables\n  a=$1\n  b=$2\n  c=$3\n\
    \  # Check whether a,b,c are all numbers\n  if ! [[ $a =~ ^[0-9]+$ ]] ; then\n\
    \    echo \"$a is not a number\"\n    return -1\n  fi\n  if ! [[ $b =~ ^[0-9]+$\
    \ ]] ; then\n    echo \"$b is not a number\"\n    return -1\n  fi\n  if ! [[ $c\
    \ =~ ^[0-9]+$ ]] ; then\n    echo \"$c is not a number\"\n    return -1\n  fi\n\
    \  # Check whether a,b,c are all positive\n  if ! [[ $a -gt 0 ]] ; then\n    echo\
    \ \"$a is negative\"\n    return -1\n  fi\n  if ! [[ $b -gt 0 ]] ; then\n    echo\
    \ \"$b is negative\"\n    return -1\n  fi\n  if ! [[ $c -gt 0 ]] ; then\n    echo\
    \ \"$c is negative\"\n    return -1\n  fi\n  # Check if a,b and c are equal\n\
    \  if [[ $(expr $a + $b + $c | bc) == 0 ]]; then\n    echo \"Triangle is 0\"\n\
    \    return 0\n  fi\n  # Check if a,b,c are equal or opposite\n  if [[ $(expr\
    \ $a - $b - $c | bc) == 0 ]]; then\n    echo \"Triangle is 0\"\n    return 0\n\
    \  fi\n  # Check if any of a,b or c are equal\n  if [[ $(expr $a - $b | bc) ==\
    \ 0 ]]; then\n    echo \"Triangle is 0\"\n    return 0\n  fi\n  # Check if any\
    \ of a,b or c are equal\n  if [[ $(expr $b - $c | bc) == 0 ]]; then\n    echo\
    \ \"Triangle is 0\"\n    return 0\n  fi\n  # Check if any of a,b or c are equal\n\
    \  if [[ $(expr $c - $a | bc) == 0 ]]; then\n    echo \"Triangle is 0\"\n    return\
    \ 0\n  fi\n  # If a,b,c are equal or opposite or greater than the third side,\
    \ \n  # then return area of triangle\n  if [[ $(expr $a - $b | bc) == 0 ]]; then\n\
    \    echo \"Triangle is 0\"\n    return 0\n  fi\n  if [[ $(expr $b - $c | bc)\
    \ == 0 ]]; then\n    echo \"Triangle is 0\"\n    return 0\n  fi\n  if [[ $(expr\
    \ $c - ", "    local lengths\n    local first\n    local second\n    local third\n\
    \    lengths=(\"${@}\")\n    first=${lengths[0]}\n    second=${lengths[1]}\n \
    \   third=${lengths[2]}\n    if [[ $first -gt $third ]]; then\n        echo \"\
    $(( $third * $third))\"\n    elif [[ $second -gt $third ]]; then\n        echo\
    \ \"$(( $third * $second ))\"\n    elif [[ $first -gt $second ]]; then\n     \
    \   echo \"$(( $second * $first ))\"\n    else\n        echo \"$(( $first * $first\
    \ ))\"\n    fi", "    side_length=$1\n    side_length2=$2\n    side_length3=$3\n\
    \    echo $side_length+$side_length2+$side_length3 | bc", "    length=$1\n   \
    \ width=$2\n    height=$3\n    if [ $((length + width + height)) -gt $((length\
    \ * width + height * length)) ]\n    then\n        echo \"$((length * width *\
    \ height / 2))\"\n    else\n        echo \"-1\"\n    fi", "    # Check if all\
    \ arguments are integers\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]] || ! [[ \"$2\" =~\
    \ ^[0-9]+$ ]] || ! [[ \"$3\" =~ ^[0-9]+$ ]]; then\n        echo \"Usage: $(basename\
    \ ${BASH_SOURCE[0]}):<filename> <triangle 1 side> <triangle 2 side> <triangle\
    \ 3 side>\"\n        exit 1\n    fi\n    # Check if all three arguments are different\n\
    \    if [[ ${#1} -gt 1 ]] || [[ ${#2} -gt 1 ]] || [[ ${#3} -gt 1 ]]; then\n  \
    \      echo \"Usage: $(basename ${BASH_SOURCE[0]}):<filename> <triangle 1 side>\
    \ <triangle 2 side> <triangle 3 side>\"\n        exit 1\n    fi\n    # Get the\
    \ three sides\n    side_one=$1\n    side_two=$2\n    side_three=$3\n    if [[\
    \ \"$side_one\" -gt \"$side_two\" ]]; then\n        side_two=\"$side_one\"\n \
    \       side_one=\"$side_three\"\n        side_three=\"$side_two\"\n    fi\n \
    \   if [[ \"$side_one\" -gt \"$side_three\" ]]; then\n        side_three=\"$side_one\"\
    \n        side_one=\"$side_two\"\n        side_two=\"$side_three\"\n    fi\n \
    \   triangle_one_area=$((side_one*side_one+side_two*side_two+side_three*side_three))\n\
    \    if [[ \"$triangle_one_area\" -gt \"$side_three\" ]]; then\n        triangle_one_area=\"\
    $side_three\"\n    fi\n    echo $((triangle_one_area))", "  local side1=$(echo\
    \ \"$1\" | bc)\n  local side2=$(echo \"$2\" | bc)\n  local side3=$(echo \"$3\"\
    \ | bc)\n\n  if (( \"$side1 + $side2 > $side3\" )) ; then\n    echo $(echo \"\
    $side1 + $side2 > $side3\" | bc)\n  else\n    echo -1\n  fi", "    sum=$(($1 +\
    \ $2 + $3))\n    if [ $sum -gt $3 ]\n    then\n        echo $((($sum * $sum) /\
    \ (2 * ($3 * $3))))\n    else\n        echo -1\n    fi", '    (( $1 * $1 ) + (
    $2 * $2 ) + ( $3 * $3 )) | bc', "  (( $#==3 )) && echo \"$(( $1 + $2 + $3 ))\"\
    \ || return\n  (( $#==2 )) && echo \"$(( $1 + $2 ))\" || return\n  (( $#==1 ))\
    \ && echo \"$(( $1 * $2 ))\" || return\n  (( $#==0 )) && echo \"-1\" || return",
  "  (( sum=$1+$2 ))\n  (( sum=$sum+$3 ))\n  (( a=$sum/2 ))\n  # This next line is\
    \ probably unnecessary, but it is what my professor was told me to do\n  if [\
    \ $a == $1 ] && [ $a == $2 ] && [ $a == $3 ]; then\n    return $a\n  else\n  \
    \  return -1\n  fi", "\t[ \"$1\" -eq 0 ] && echo \"Error: Length cannot be zero\
    \ to form a triangle\" && exit -1\n\t[ \"$2\" -eq 0 ] && echo \"Error: Length\
    \ cannot be zero to form a triangle\" && exit -1\n\t[ \"$3\" -eq 0 ] && echo \"\
    Error: Length cannot be zero to form a triangle\" && exit -1\n\t[ \"$1\" -gt \"\
    $2\" ] && echo \"Error: Length of first side is greater than the second side\"\
    \ && exit -1\n\t[ \"$2\" -gt \"$3\" ] && echo \"Error: Length of second side is\
    \ greater than the third side\" && exit -1\n\t[ \"$3\" -eq \"$1\" ] || [ \"$3\"\
    \ -eq \"$2\" ] || [ \"$3\" -eq \"$3\" ]\n\tprintf \"%.2f\"  $(echo \"$3 * $2 *\
    \ $3 - $1 * $2 * $1 - $1 * $2 * $2 - $3 * $1 - $2 * $3 - $3 * $2\" | bc -l)",
  "    a=$1\n    b=$2\n    c=$3\n    if [ $a -gt $b ] || [ $b -gt $c ] || [ $c -gt\
    \ $a ]; then\n        echo \"-1\"\n    elif [ $a + $b + $c -eq $b ]; then\n  \
    \      echo $((($a + $b)/2))\n    elif [ $a + $b -eq $c ]; then\n        echo\
    \ $((($a + $b)/2))\n    elif [ $b + $c -eq $a ]; then\n        echo $((($b + $c)/2))\n\
    \    else\n        echo \"-1\"\n    fi", "    local A=$1; local B=$2; local C=$3\n\
    \    local SAB=$((A * B))\n    local SAC=$((A * C))\n    local SAD=$((B * C))\n\
    \    if [ \"$SAB\" -gt \"$SAC\" ] && [ \"$SAB\" -gt \"$SAD\" ]; then \n      \
    \  echo \"$((SAB / 2))\"\n    elif [ \"$SAC\" -gt \"$SAD\" ] && [ \"$SAC\" -gt\
    \ \"$SAB\" ]; then \n        echo \"$((SAC / 2))\"\n    else\n        echo \"\
    -1\"\n    fi", "  local sideA=$1\n  local sideB=$2\n  local sideC=$3\n  local\
    \ sum=$(expr `echo ${sideA}+${sideB}+${sideC}` \\\n    | awk '{ print $1 }')\n\
    \  local total=$(expr `echo ${sum}*2` \\\n    | awk '{ print $1 }')\n  if [[ ${sideA}\
    \ -lt ${sideB} && ${sideA} -lt ${sideC} ]]; then\n    return ${total}\n  elif\
    \ [[ ${sideB} -lt ${sideA} && ${sideB} -lt ${sideC} ]]; then\n    return ${total}\n\
    \  elif [[ ${sideC} -lt ${sideA} && ${sideC} -lt ${sideB} ]]; then\n    return\
    \ ${total}\n  elif [[ ${sideA} -lt ${sideB} && ${sideA} -lt ${sideC} ]]; then\n\
    \    return ${total}\n  elif [[ ${sideB} -lt ${sideC} && ${sideB} -lt ${sideA}\
    \ ]]; then\n    return ${total}\n  elif [[ ${sideC} -lt ${sideB} && ${sideC} -lt\
    \ ${sideA} ]]; then\n    return ${total}\n  else\n    return -1\n  fi", "  local\
    \ l1 l2 l3 l4 l5 l6 l7 l8 l9 l10\n  l1=$1\n  l2=$2\n  l3=$3\n  if [[ $((l1 + l2\
    \ + l3)) -gt $((l4 + l5 + l6)) ]] && \\\n     [[ $((l1 + l2 + l3)) -gt $((l4 +\
    \ l5 + l6)) ]] && \\\n     [[ $((l1 + l2 + l3)) -gt $((l4 + l5 + l6)) ]]\n  then\n\
    \    l4=$(($l2 + $l3))\n    l5=$(($l2 + $l3))\n    l6=$(($l2 + $l3))\n  else\n\
    \    l4=$(($l2 + $l3))\n    l5=$(($l2 + $l3))\n    l6=$(($l2 + $l3))\n    l7=$(($l2\
    \ + $l3))\n  fi\n  if [[ $((l5 + l6 + l7)) -gt $((l8 + l9 + l10)) ]] && \\\n \
    \    [[ $((l5 + l6 + l7)) -gt $((l8 + l9 + l10)) ]] && \\\n     [[ $((l5 + l6\
    \ + l7)) -gt $((l8 + l9 + l10)) ]]\n  then\n    l8=$(($l5 + $l7))\n    l9=$(($l5\
    \ + $l7))\n    l10=$(($l5 + $l7))\n  else\n    l8=$(($l5 + $l7))\n    l9=$(($l5\
    \ + $l7))\n    l10=$(($l5 + $l7))\n    l11=$(($l5 + $l7))\n  fi\n  echo \"$((l1\
    \ + l4 + l8 + l11))\"", " local length length1 length2 length3\n local a\n length=$1\n\
    \ length1=$2\n length2=$3\n length3=`expr $length1 + $length2 - $length`\n if\
    \ [ $length3 < $length ]; then\n  echo \"-1\"\n  return 1\n elif [ $length3 <\
    \ $length2 ]; then\n  echo \"0\"\n  return 1\n elif [ $length3 < $length1 ]; then\n\
    \  echo \"0\"\n  return 1\n fi\n if (( $length + $length2 + $length3 <= 4)) ;\
    \ then\n  echo \"$((($length * $length * $length) / 2))\"\n  return 0\n fi\n for\
    \ a in $(seq 1 $length) ; do\n  if (( $a < $length1 )) ; then\n   if (( $a < $length2\
    \ )) ; then\n    if (( $a < $length3 )) ; then\n     if (( $length == $a )) ;\
    \ then\n      echo \"0\"\n     fi\n     if (( $length == $length1 )) ; then\n\
    \      echo \"0\"\n     fi\n     if (( $length == $length2 )) ; then\n      echo\
    \ \"0\"\n     fi\n     if (( $length == $length3 )) ; then\n      echo \"0\"\n\
    \     fi\n     if (( $length1 == $a )) ; then\n      echo \"0\"\n     fi\n   \
    \  if (( $length1 == $length2 )) ; then\n      echo \"0\"\n     fi\n     if ((\
    \ $length1 == $length3 )) ; then\n      echo \"0\"\n     fi\n     if (( $length2\
    \ == $a )) ; then\n      echo \"0\"\n     fi\n     if (( $length2 == $length3\
    \ )) ; then\n      echo \"0\"\n     fi\n     if (( $length2 == $length1 )) ; then\n\
    \      echo \"0\"\n     fi\n    fi\n   fi\n  fi\n done\n echo \"-1\"\n return\
    \ 1", "    if (( $(echo \"$1 + $2 > $3\" | bc -l) )); then\n        echo \"$((($1\
    \ * $2 + $3) * .5))\" | bc -l \n    else\n        echo \"-1\"\n    fi", "  if\
    \ (( $2 > $3 )); then\n    echo $(( $1/$2 * $3 ))\n  else\n    if (( $3 > $1 ));\
    \ then\n      echo $(( $1/$2 * $3 ))\n    else\n      echo $(( -1 * $1/$2 * $3\
    \ ))\n    fi\n  fi", "  declare -i s1 s2 s3\n  # First check that all arguments\
    \ are integers\n  if [ \"$1\" -gt \"$2\" ] || [ \"$1\" -gt \"$3\" ] || [ \"$2\"\
    \ -gt \"$3\" ]\n  then\n    echo \"Error - invalid triangle arguments\"\n    exit\
    \ 1\n  fi\n  # Check that the sum of any two sides is greater than the third side\n\
    \  s1=$(expr $1 + $2)\n  s2=$(expr $3 + $2)\n  s3=$(expr $3 + $1)\n  # Check for\
    \ valid triangle\n  if [ $s1 -gt $s2 ] || [ $s1 -gt $s3 ] || [ $s2 -gt $s3 ]\n\
    \  then\n    echo \"Invalid triangle $1 $2 $3\"\n    exit 1\n  else\n    echo\
    \ \"$(( s1 * s2 * s3 ))\"\n  fi", "    if [[ \"$1\" -ge \"$2\" ]]; then\n    \
    \    if [[ \"$2\" -ge \"$3\" ]]; then\n            area=$((($1+$2+$3)/2))\n  \
    \          echo \"${area%.*}\"\n        else\n            echo \"-1\"\n      \
    \  fi\n    else\n        echo \"-1\"\n    fi", " local a b c\n a=$1; b=$2; c=$3\n\
    \ if [ $a -eq 0 ] || [ $b -eq 0 ] || [ $c -eq 0 ]; then\n   return -1\n fi\n local\
    \ b1 b2 c1 c2 area\n b1=$b; b2=$(echo $b|bc); c1=$(echo $c|bc); c2=$(echo $c|bc)\n\
    \ if [ $b1 -lt $c2 ] || [ $c1 -lt $b2 ]; then\n   return -1\n fi\n if [ $a -gt\
    \ $c1 ] && [ $b -gt $c2 ] && [ $c -gt $b1 ]; then\n   area=$(( $a * b * $c ))\n\
    \ elif [ $a -gt $c1 ] && [ $b -gt $c2 ]; then\n   area=$(( $a * b2 ))\n elif [\
    \ $a -gt $c2 ] && [ $b -gt $c1 ]; then\n   area=$(( $b * b1 ))\n elif [ $a -gt\
    \ $c1 ] && [ $b -gt $c2 ]; then\n   area=$(( $b1 * $c ))\n elif [ $a -gt $c2 ]\
    \ && [ $b -gt $c1 ]; then\n   area=$(( $b1 * $b2 ))\n elif [ $a -gt $c2 ] && [\
    \ $b -gt $c1 ]; then\n   area=$(( $c1 * $b2 ))\n fi\n echo $(awk 'BEGIN {printf\
    \ \"%.2f\"; exit ! (area < 0)}')", "    if [ \"$2\" -gt \"$3\" ]\n        then\n\
    \            echo \"$(( $2 * $2 + $3 * $3 ))\"\n        fi\n    return 0", " \
    \   local length_1 length_2 length_3\n    length_1=$1\n    length_2=$2\n    length_3=$3\n\
    \    local area\n    \n    # Check if three sides are valid\n    if ((${length_1}<${length_2})\
    \ && (${length_1}<${length_3})); then\n        # Valid triangle\n        local\
    \ sum\n        sum=${length_1}+${length_2}\n        if [[ ${sum} == ${length_3}\
    \ ]]; then\n            area=${length_1}*${length_2}\n            echo \"$(area\
    \ < .2)\" \n        else\n            echo \"-1\"\n        fi\n    else\n    \
    \    # Not valid triangle\n        echo \"-1\"\n    fi", "\t[[ $(echo \"$1 + $2\
    \ > $3\" | bc -l) == 1 ]] && echo \"$((($1 + $2) * $2))\" \n\t[[ \"$((($1 + $2)\
    \ * $2))\" -lt \"$3\" ]] && echo \"-1\" ", "  local length=$1\n  local base=$2\n\
    \  local width=$3\n  local len=$((length * base))\n  if [[ $((len % width)) -gt\
    \ 0 ]]; then\n    echo $((len / width))\n  else\n    echo -1\n  fi", "  local\
    \ l=$1\n  local t=$2\n  local r=$3\n  if (( l > t )); then\n    if (( r < 0 ));\
    \ then\n      return -1\n    fi\n  else\n    if (( r > 0 )); then\n      return\
    \ -1\n    fi\n  fi\n  local p1=$(\n    (( p=$l*$l/2 )) \n    (( p=$p+$l*( (l+r)/2\
    \ ) ))\n    (( p=$p+$l*( (l-t)/2 ) ))\n    (( p=$p+$l*( (t-r)/2 ) ))\n    p=$(p+(l+r)/2)\n\
    \  )\n  local p2=$(\n    (( p=$l*$l/2 ))\n    (( p=$p+$l*( (l+r)/2 ) ))\n    ((\
    \ p=$p+$l*( (l-t)/2 ) ))\n    (( p=$p+$l*( (t-r)/2 ) ))\n    p=$(p+(l+r)/2)\n\
    \  )\n  local p3=$(\n    (( p=$l*$l/2 ))\n    (( p=$p+$l*( (l+r)/2 ) ))\n    ((\
    \ p=$p+$l*( (l-t)/2 ) ))\n    (( p=$p+$l*( (t-r)/2 ) ))\n    p=$(p+(l+r)/2)\n\
    \  )\n  local s=$(\n    (( s=$p*$p/2 ))\n    (( s=$s+$p*( (p1+p2)/2 ) ))\n   \
    \ (( s=$s+$p*( (p1+p3)/2 ) ))\n    (( s=$s+$p*( (p2+p3)/2 ) ))\n    (( s=$s+$p*(\
    \ (p1+p2)/2 ) ))\n    (( s=$s+$p*( (p1+p3)/2 ) ))\n    (( s=$s+$p*( (p3+p2)/2\
    \ ) ))\n    (( s=$s+$p*( (p2+p3)/2 ) ))\n    (( s=$s+$p*( (p3+p1)/2 ) ))\n  )\n\
    \  local area=$(\n    (( area=$s/4 ))\n    (( area=$area+$s/4 ))\n    (( area=$area+$s/4\
    \ ))\n    (( area=$area+$s/4 ))\n    (( ", "  (( $3 <= $1 + $2 )) && \\\n    ((\
    \ ($1 + $2) <= $3 )) && \\\n    ( $( echo $( echo $1 $2 + $3 | bc) )", "    local\
    \ side side1 side2\n    side1=$1; side2=$2; side3=$3\n    if ((${side1} + ${side2}\
    \ + ${side3}) -gt ${side1}); then\n        echo \"${side1}\"\n    elif ((${side1}\
    \ + ${side2} + ${side3}) -gt ${side2}); then\n        echo \"${side2}\"\n    elif\
    \ ((${side1} + ${side2} + ${side3}) -gt ${side3}); then\n        echo \"${side3}\"\
    \n    else\n        echo \"-1\"\n    fi", "\tdeclare -i a b c\n\tlet a=$1 * $1\n\
    \tlet b=$2 * $2\n\tlet c=$3 * $3\n\tlet total=a * b * c\n\tif (( total > 0 ));\
    \ then \n\t\tlet square_of_area=a*b*c\n\t\tlet square_of_side_area=$((square_of_area/a))\n\
    \t\tlet square_of_side_b=$((square_of_area/b))\n\t\tlet square_of_side_a=$((square_of_area/c))\n\
    \t\tlet rounded_area=((square_of_side_a + square_of_side_b + square_of_side_area))/2\n\
    \t\techo $rounded_area\n\telse \n\t\techo \"-1\"\n\tfi", "\t# triangle_area returns\
    \ the sum of three sides of an triangle\n\t# If any two sides are equal, return\
    \ -1\n\t# Otherwise, return the sum of the two sides\n\n\t# if all three sides\
    \ are equal, return 0\n\tif (( $1 == $2 ) && ( $1 == $3 )); then\n\t\treturn 0\n\
    \tfi\n\n\t# Check if $2 > $3\n\tif [ $2 -gt $3 ]; then \n\t\techo \"$3 is not\
    \ greater than $2\" >&2\n\t\treturn -1\n\tfi\n\n\t# Check if $1 > $3\n\tif [ $1\
    \ -gt $3 ]; then \n\t\techo \"$2 is not greater than $1\" >&2\n\t\treturn -1\n\
    \tfi\n\n\t# Check if $1 equals $3\n\tif [ $1 -eq $3 ]; then \n\t\techo \"all sides\
    \ are equal\" >&2\n\t\treturn 0\n\tfi\n\n\t# Check if $1 > $2\n\tif [ $1 -gt $2\
    \ ]; then \n\t\techo \"$1 is greater than $2\" >&2\n\t\treturn -1\n\tfi\n\n\t\
    # Check if $2 > $1\n\tif [ $2 -gt $1 ]; then \n\t\techo \"$2 is greater than $1\"\
    \ >&2\n\t\treturn -1\n\tfi\n\t\n\t# All checks passed\n\tsum=$(( $1 + $2 + $3\
    \ ))\n\techo \"$sum equals the sum of three sides of the triangle\" >&2\n\treturn\
    \ $sum", "\tlet sum=$1 + $2\n\tif [[ `expr $sum > $3` ]]; then\n\t\techo \"$((\
    \ $sum * $sum / 2 ))\"\n\telse\n\t\techo \"-1\"\n\tfi", "    local len1=$1\n \
    \   local len2=$2\n    local len3=$3\n    local sum=$(( (len1 * len2) + (len2\
    \ * len3) + (len3 * len1) ))\n    if [ \"$sum\" -gt \"$len3\" ]; then\n      \
    \  return -1\n    else\n        echo \"scale=2; $sum / 4\"\n    fi", "    local\
    \ a b\n    local len1 len2 len3\n    read a b <<< \"$1\"\n    read len1 len2 <<<\
    \ \"$2\"\n    read len3 <<< \"$3\"\n    if [[ $a -gt $b && $a -gt $c ]]; then\n\
    \        echo \"$(awk 'BEGIN{print \"'$a'\"}{print $1+$2+$3}')\"\n    elif [[\
    \ $c -gt $b && $c -gt $a ]]; then\n        echo \"$(awk 'BEGIN{print \"'$c'\"\
    }{print $1+$2+$3}')\"\n    elif [[ $a -gt $b && $c -gt $a ]]; then\n        echo\
    \ \"$(awk 'BEGIN{print \"'$a'\"}{print $1+$2+$3}')\"\n    elif [[ $b -gt $c &&\
    \ $c -gt $a ]]; then\n        echo \"$(awk 'BEGIN{print \"'$b'\"}{print $1+$2+$3}')\"\
    \n    elif [[ $b -gt $c && $a -gt $b ]]; then\n        echo \"$(awk 'BEGIN{print\
    \ \"'$b'\"}{print $1+$2+$3}')\"\n    elif [[ $c -gt $b && $a -gt $b ]]; then\n\
    \        echo \"$(awk 'BEGIN{print \"'$c'\"}{print $1+$2+$3}')\"\n    elif [[\
    \ $c -gt $b && $b -gt $a ]]; then\n        echo \"$(awk 'BEGIN{print \"'$c'\"\
    }{print $1+$2+$3}')\"\n    else\n        echo \"-1\"\n    fi", "    local side1=$1\
    \ \n    local side2=$2\n    local side3=$3\n    local s1 s2 s3 \n    local area\
    \ \n    \n    # Check if any sides are equal\n    if [ \"$side1\" = \"$side2\"\
    \ ] || [ \"$side1\" = \"$side3\" ]; then\n        echo \"-1\"\n        return\n\
    \    fi\n\n    # Check if any sides are greater\n    if [ \"$side1\" -gt \"$side2\"\
    \ ]; then\n        if [ \"$side2\" -gt \"$side3\" ]; then\n            echo \"\
    -1\"\n            return\n        fi\n        side3=$side2\n        side2=$side1\n\
    \        side1=$side3\n    fi\n\n    # Calculate area of triangle\n    area=$((side1*side2*side3))\n\
    \n    # Round the area up to 2 decimal points\n    echo $(awk 'BEGIN{printf \"\
    %0.2f\\n\",'$area'}')", "\tlocal a b\n\tlet \"a=$1\"\n\tlet \"b=$2\"\n\tlet \"\
    c=$3\"\n\n\tif (( ( $a + $b > $c )) && ( ( $a + $c > $b )) && ( ( $b + $c > $a\
    \ )) )\n\tthen\n\t\techo $(($a / $b * $c))\n\telse\n\t\techo -1\n\tfi", "    side1=$1\n\
    \    side2=$2\n    side3=$3\n    if [ $side1 + $side2 > $side3 ]; then\n     \
    \   echo \"$side1 + $side2 is greater than $side3\"\n        echo \"$side1 + $side2\
    \ is greater than $side3\"\n        return -1\n    elif [ $side1 + $side2 <= $side3\
    \ ]; then\n        echo \"$side1 + $side2 is less than or equal to $side3\"\n\
    \        echo \"$side1 + $side2 is less than or equal to $side3\"\n        return\
    \ -1\n    elif [ $side1 + $side2 == $side3 ]; then\n        echo \"$side1 + $side2\
    \ is equal to $side3\"\n        echo \"$side1 + $side2 is equal to $side3\"\n\
    \        return 0\n    fi", "\tlocal length sum\n\tlocal side1 side2 side3\n\t\
    if [[ -z $1 || -z $2 || -z $3 ]]; then\n\t\treturn -1\n\tfi\n\n\tlength=$(echo\
    \ \"$(($1+$2+$3))\" | bc)\n\tsum=$((length*length))\n\tif [ $sum -gt $((side1=length*$1))\
    \ ]; then\n\t\tsum=$((side1+side2))\n\t\tif [ $sum -gt $((side2=length*$2)) ];\
    \ then\n\t\t\tsum=$((side2+side3))\n\t\t\tif [ $sum -gt $((side3=length*$3)) ];\
    \ then\n\t\t\t\techo $((side1*side2*side3))\n\t\t\tfi\n\t\tfi\n\tfi", '  echo
    "$(( (($1 + $2) + ($1 + $3)) - ($2 + $3) ))"', "    local A=$1\n    local B=$2\n\
    \    local C=$3\n    # Get the length of side A\n    local SA=`echo \"$A - $B\
    \ - $C\" | bc`\n    # Get the length of side B\n    local SB=`echo \"$B - $A -\
    \ $C\" | bc`\n    # Get the length of side C\n    local SC=`echo \"$C - $A - $B\"\
    \ | bc`\n    # If the sum of sides is less than 0, then we know that it is not\
    \ valid\n    if [ $SA -lt 0 ] || [ $SB -lt 0 ] || [ $SC -lt 0 ]; then\n      \
    \  echo -1\n    else\n        echo \"$(( SA * SC - ABS( SB + SC ) ))\"\n    fi",
  "    local triangle_length=$1\n    local side_a=$2\n    local side_b=$3\n    local\
    \ area_rounded=0\n    if [ $((side_a + side_b + triangle_length)) -eq $((side_b\
    \ + triangle_length + side_a)) ]; then\n        area_rounded=$((triangle_length*triangle_length))\n\
    \    elif [ $((side_a + triangle_length + side_b)) -eq $((triangle_length + side_a\
    \ + side_b)) ]; then\n        area_rounded=$((triangle_length*triangle_length))\n\
    \    elif [ $((side_b + triangle_length + side_a)) -eq $((triangle_length + side_b\
    \ + side_a)) ]; then\n        area_rounded=$((triangle_length*triangle_length))\n\
    \    else\n        area_rounded=-1\n    fi\n    echo $area_rounded", "  a=$(expr\
    \ $1 + $2)\n  b=$(expr $2 + $3)\n  c=$(expr $3 + $1)\n  if (( b < a && b < c ))\n\
    \  then\n    echo \"$(( ($1 + $2 + $3)/2))\"\n  else\n    echo \"-1\"\n  fi",
  "        (( a = $1 )); \n        (( b = $2 ));\n        (( c = $3 ));\n        if\
    \ (( a+b > c )) {\n                (( area = ((a*b*1.)/2) ))\n               \
    \ echo \"$area\"\n        }", "  if [ $# -lt 2 ] || [ $# -gt 3 ]; then \n    return\
    \ -1\n  fi\n  local sides=$1\n  local sides2=$2\n  local sides3=$3\n  local area\n\
    \  \n  local firstSide=$(echo \"$sides | cut -d'm' -f1\")\n  local secondSide=$(echo\
    \ \"$sides | cut -d'm' -f2\")\n  local thirdSide=$(echo \"$sides | cut -d'm' -f3\"\
    )\n  local firstSideSum=$(echo \"$firstSide + $secondSide\" | bc -l)\n  local\
    \ secondSideSum=$(echo \"$secondSide + $thirdSide\" | bc -l)\n  local thirdSideSum=$(echo\
    \ \"$thirdSide + $firstSide\" | bc -l)\n  \n  if (( $firstSideSum > $thirdSideSum\
    \ )); then\n    area=$(echo \"$firstSide * $secondSide\" | bc -l)\n  else\n  \
    \  area=$(echo \"$thirdSide * $firstSide\" | bc -l)\n  fi\n  \n  echo \"$area\"",
  "  local a=$1\n  local b=$2\n  local c=$3\n  \n  (( $a + $b ) > $c || ( $a + $c\
    \ ) > $b || ( $b + $c ) > $a ))\n  echo \"$(( a + b )) + $(( a + c )) > $(( b\
    \ + c ))\"\n  echo \"$(( a + b )) + $(( b + c )) > $(( c + b ))\"\n  echo \"$((\
    \ b + c )) + $(( c + b )) > $(( a + b ))\"\n  echo \"$(( b + c )) + $(( a + b\
    \ )) > $(( a + c ))\"\n  echo \"$(( a + b )) + $(( a + c )) > $(( c + b ))\"\n\
    \  echo \"$(( a + b )) + $(( b + c )) > $(( c + b ))\"\n  echo \"$(( a + b ))\
    \ + $(( a + c )) > $(( c + b ))\"\n  echo \"$(( a + b )) + $(( b + c )) > $((\
    \ c + b ))\"\n  echo \"$(( a + b )) + $(( a + c )) > $(( c + b ))\"\n  echo \"\
    $(( a + b )) + $(( b + c )) > $(( c + b ))\"\n  echo \"$(( a + b )) + $(( a +\
    \ c )) > $(( c + b ))\"\n  echo \"$(( a + b )) + $(( b + c )) > $(( c + b ))\"\
    \n  echo \"$(( a + b )) + $(( a + c )) > $(( c + b ))\"\n  echo \"$(( a + b ))\
    \ + $(( b + c )) > $(( c + b ))\"\n  echo \"$(( a + b )) + $(( a + c )) > $((\
    \ c + b ))\"\n  echo \"$(( a + b )) + $(( b + c )) > $(( c + b ))\"\n  echo \"\
    $(( a + b )) + $(( a + c )) > $(( c + b ))\"\n  echo \"$(( a + b )) + $(( b +\
    \ c )) > $(( c + b ))\"\n  echo \"$(( a + b )) + $(( a + c )) > $(( c + b ", " \
    \ if [ $1 -gt $2 ] || [ $2 -gt $3 ]; then\n    exit 1\n  fi\n  \n  area_sum=$((\
    \ ($1 + $2) / 2  )  )\n  if [ $area_sum -gt $3 ]; then\n    area_sum=$3\n  fi\n\
    \  echo $area_sum", "  area=$((($1 * $2) * $3));\n  if [[ \"$area\" -gt \"$3\"\
    \ ]]; then\n    echo $(echo \"$area\" | bc)\n  else\n    echo -1\n  fi", "   \
    \ local l1 l2 l3 r1 r2 r3\n    l1=$(echo $1 | cut -d x -f1)\n    l2=$(echo $1\
    \ | cut -d x -f2)\n    l3=$(echo $1 | cut -d x -f3)\n    r1=$(echo $2 | cut -d\
    \ x -f1)\n    r2=$(echo $2 | cut -d x -f2)\n    r3=$(echo $2 | cut -d x -f3)\n\
    \    if (( $(expr $l1 + $l2 + $l3 > $r1 + $r2 + $r3) )); then\n        echo $((($l1\
    \ * $r2) + ($l2 * $r3) + ($l3 * $r1)))\n    else\n        echo -1\n    fi", " \
    \ if [ $# -ne 3 ] ; then\n    return -1\n  fi\n  if [ \"$1\" -gt \"$2\" ] && [\
    \ \"$2\" -gt \"$3\" ] ; then\n    sum=$(($1 + $2 + $3))\n  else\n    return -1\n\
    \  fi\n  num=$(echo \"$sum*($1/2)\" | bc)\n  if [ $num -gt \"$3\" ] ; then\n \
    \   echo \"$sum\"\n  else\n    return -1\n  fi", "    local a b\n    a=$1\n  \
    \  b=$2\n    c=$3\n    if [ \"$a\" -gt \"$b\" ] || [ \"$b\" -gt \"$c\" ] || [\
    \ \"$a\" -gt \"$c\" ]; then\n        echo \"-1\"\n    else\n        echo \"$(echo\
    \ \"scale=2;($a*$b)/($c*$a)\" | bc)\"\n    fi", "    local a=$1\n    local b=$2\n\
    \    local c=$3\n\n    if [ $a -eq $b ] || [ $a -eq $c ] || [ $b -eq $c ]; then\n\
    \        echo \"-1\"\n    else\n        local rad=($(($b * $c)))\n        local\
    \ sum=$(($a + $b + $c))\n        local num=$(($rad * $sum))\n        local result=$(($num\
    \ / $rad))\n        local area=`echo \"scale=2;$result\" | bc -l`\n        echo\
    \ $area\n    fi", "    local a=\"$1\"\n    local b=\"$2\"\n    local c=\"$3\"\n\
    \    local sum\n    local m\n    if [ \"$a\" -gt \"$b\" ] && [ \"$a\" -gt \"$c\"\
    \ ]; then\n        if [ \"$b\" -gt \"$c\" ]; then\n            sum=$(($a + $b))\n\
    \        else\n            sum=$(($a + $c))\n        fi\n    elif [ \"$b\" -gt\
    \ \"$a\" ] && [ \"$b\" -gt \"$c\" ]; then\n        sum=$(($b + $c))\n    elif\
    \ [ \"$c\" -gt \"$a\" ] && [ \"$c\" -gt \"$b\" ]; then\n        sum=$(($c + $b))\n\
    \    else\n        echo \"error: sum is zero\"\n        exit 1\n    fi\n    if\
    \ [ \"$sum\" -eq \"$a\" ] || [ \"$sum\" -eq \"$b\" ] || [ \"$sum\" -eq \"$c\"\
    \ ]; then\n        echo \"$sum\"\n    else\n        echo \"$(awk 'BEGIN {print\
    \ ('\"$sum\"')}')\"\n    fi", "  # Check if all sides are positive\n  if (( $1\
    \ )) || (( $2 )) || (( $3 ))\n  then\n    if (( ( ( $1 + $2 ) > ( $3 )) )) \n\
    \    then\n      echo $(printf \"%0.2f\" $(( $1 * $2 ))) | bc -l \n    else\n\
    \      echo -1\n    fi\n  else\n    echo \"Invalid triangle length!\"\n  fi",
  "    length1=$(( $1 - 1 ))\n    length2=$(( $2 - 1 ))\n    length3=$(( $3 - 1 ))\n\
    \    area=$(( length1 * length2 * length3 ))\n    if [[ \"$area\" -gt \"$length3\"\
    \ ]]\n    then\n        echo \"$area\"\n    else\n        echo \"-1\"\n    fi",
  "    local len_1 len_2 len_3\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0\
    \ ]; then \n        return 1\n    else\n        len_1=$(echo \"$1 * $2\" | bc)\n\
    \        len_2=$(echo \"$1 * $3\" | bc)\n        len_3=$(echo \"$3 * $3\" | bc)\n\
    \    fi\n    if [[ ${len_1+len_2+len_3} == \"$len_1\" || ${len_1+len_2+len_3}\
    \ == \"$len_2\" || ${len_1+len_2+len_3} == \"$len_3\" ]];\n    then \n       \
    \ echo \"$len_1\"\n    else\n        echo \"-1\"\n    fi", "    set -- $1 $2 $3\n\
    \    local sum=$(( $1 + $2 ))\n    if [ $sum -ge $3 ]\n    then\n        echo\
    \ \"$(( $sum / 2 ))\"\n    else\n        echo \"-1\"\n    fi", "\tlet side1=$1\n\
    \tlet side2=$2\n\tlet side3=$3\n\tlet side1_plus_side2=$((side1+side2))\n\tlet\
    \ side2_plus_side3=$((side2+side3))\n\tif [[ \"$side1_plus_side2 -gt $side3\"\
    \ ]] || [[ \"$side2_plus_side3 -gt $side1\" ]]; then\n\t\tlet area_of_triangle=$((side1_plus_side2\
    \ + side2_plus_side3))\n\t\tlet rounded_area_of_triangle=$(awk 'BEGIN{print '$area_of_triangle'/2}')\n\
    \t\techo \"$rounded_area_of_triangle\"\n\telse\n\t\techo \"-1\"\n\tfi", "    area=$(expr\
    \ $1 / $2 * $3 + $2 / $3 * $1 - $3 / $1 * $2)\n    if [ $area -lt 0 ]\n    then\n\
    \        echo \"-1\"\n    else\n        echo \"$(awk 'BEGIN {printf \"%.2f\"}\
    \ {print $0}' <<< $area)\"\n    fi", "  # Check if all sides are positive\n  if\
    \ [ $1 -lt $2 ] || [ $1 -lt $3 ] || [ $2 -lt $3 ]\n  then\n    echo -1\n  else\n\
    \    echo `printf '%.2f' (($1 + $2 + $3) / 2)`\n  fi", "\t# Check if all three\
    \ sides are non-negative\n\t[ \"$1\" -le \"$2\" ] && [ \"$2\" -le \"$3\" ] &&\
    \ [ \"$3\" -le \"$4\" ] || exit 1\n\t\n\tsum_of_two=$(($1 + $2))\n\tsum_of_three=$(($3\
    \ + $4))\n\n\t# Check if any of the two sides is greater than the third side\n\
    \t[ \"$sum_of_two\" -gt \"$sum_of_three\" ] && exit -1 \n\n\techo \"$((($sum_of_two\
    \ * $sum_of_two) / 2))\"", "\tlocal a=\"$1\"\n\tlocal b=\"$2\"\n\tlocal c=\"$3\"\
    \n\tlocal sa sb sc sab sbb scc sabc\n\t\n\tsa=$(( $a + $b ))\n\tsb=$(( $b + $c\
    \ ))\n\tsc=$(( $c + $a ))\n\tsab=$(( 2 * $sa + $sb ))\n\tsbb=$(( 2 * $sb + $sc\
    \ ))\n\tscc=$(( 2 * $sc + $sa ))\n\tsabc=$(( 2 * $scc + $sb ))\n\t\n\techo \"\
    $sabc $sab $sabc $sab $sabc $sab $sabc $sab $sabc $sab $sabc $sabc $sab $sabc\
    \ $sab $sabc $sabc $sab $sabc $sabc $sab $sabc $sabc $sab $sabc $sabc $sabc $sab\
    \ $sabc $sabc $sab $sabc $sabc $sab $sabc $sabc $sabc $sab $sabc $sabc $sab $sabc\
    \ $sabc $sabc $sab $sabc $sabc $sabc $sab $sabc $sabc $sabc $sab $sabc $sabc $sabc\
    \ $sab $sabc $sabc $sabc $sab $sabc $sabc $sabc $sabc $sab $sabc $sabc $sabc $sabc\
    \ $sab $sabc $sabc $sabc $sabc $sab $sabc $sabc $sabc $sabc $sabc $sab $sabc $sabc\
    \ $sabc $sabc $sabc $sab $sabc $sabc $sabc $sabc $sabc $sabc $sabc $sab $sabc\
    \ $sabc $sabc $sabc $sabc ", "    local l1 l2 l3\n    l1=$1\n    l2=$2\n    l3=$3\n\
    \    if (( ${l1}+${l2}>${l3}))\n    then\n        echo \"${l1}+${l2}>${l3}\" \n\
    \    else\n        echo \"${l1}+${l2}<=${l3}\" \n    fi", "    length1=$(echo\
    \ $1 | awk '{print $1}')\n    length2=$(echo $2 | awk '{print $1}')\n    length3=$(echo\
    \ $3 | awk '{print $1}')\n    echo \"$((length1*(length1+length2)/2))\"\n    if\
    \ [[ \"$length1\" -gt \"$length2\" ]]\n        then\n            echo \"$((length1*(length1+length3)/2))\"\
    \n        else\n            echo \"$((length1*(length2+length3)/2))\"\n    fi",
  "  local side_1=$1\n  local side_2=$2\n  local side_3=$3\n  if [[ $side_1 -eq $side_2\
    \ ]]; then\n    if [[ $side_1 -eq $side_3 ]]; then\n      echo $((side_1 * side_2))\n\
    \      return 0\n    fi\n    if [[ $side_3 -eq $side_2 ]]; then\n      echo $((side_1\
    \ * side_3))\n      return 0\n    fi\n    echo $((side_1 * side_3))\n    echo\
    \ $((side_2 * side_3))\n    return 0\n  fi\n  echo $((side_1 * side_2))\n  echo\
    \ $((side_1 * side_3))\n  echo $((side_2 * side_3))\n  return 0", "  local a b\
    \ c d s e\n  # $1 is a number\n  # $2 is a number\n  # $3 is a number\n  # Get\
    \ the sum of $1 and $2\n  a=$1\n  b=$2\n  # Get the sum of $2 and $3\n  c=$2\n\
    \  d=$3\n  # Get the area of the triangle\n  s=$(awk 'BEGIN{\n    printf(\"%.0f\"\
    , $a * $a)\n    printf(\"%.0f\", $b * $b)\n    printf(\"%.0f\", $c * $c)\n  }'<<<\
    \ $a + $b + $c)\n  # Get the area of any side of the triangle\n  e=$(awk 'BEGIN{\n\
    \    printf(\"%.0f\", $a * $a)\n    printf(\"%.0f\", $b * $b)\n    printf(\"%.0f\"\
    , $c * $c)\n  }'<<< $a + $b)\n  # Get the area of any side of the triangle\n \
    \ f=$(awk 'BEGIN{\n    printf(\"%.0f\", $a * $a)\n    printf(\"%.0f\", $b * $b)\n\
    \    printf(\"%.0f\", $c * $c)\n  }'<<< $a)\n  # Get the area of any side of the\
    \ triangle\n  g=$(awk 'BEGIN{\n    printf(\"%.0f\", $a * $a)\n    printf(\"%.0f\"\
    , $b * $b)\n    printf(\"%.0f\", $c * $c)\n  }'<<< $b)\n  # Get the area of any\
    \ side of the triangle\n  h=$(awk 'BEGIN{\n    printf(\"%.0f\", $a * $a)\n   \
    \ printf(\"%.0f\", $b * $b)\n    printf(\"%.0f\", $c * $c)\n  }'<<< $c)\n  # Combine\
    \ all the areas to get a total area of triangle area\n  total=$((s + e + f + g\
    \ + h))\n  # Round the area to a total of 2 decimal points\n  total=$((total*100))/100\n\
    \  if [ \"$total\" -eq \"100\" ]\n  then\n    total=\"0.0\"\n  fi\n  echo \"$total\"",
  "    local length=$1\n    local width1=$2\n    local width2=$3\n    if (( width1+width2\
    \ >  length )); then \n        echo \"${width1}\"\n    elif (( width1+width2 <\
    \ length  )); then\n        echo \"${width2}\"\n    elif (( width2 > length  ));\
    \  then\n        echo \"${width1}\"\n    elif (( width1 < width2 ));  then\n \
    \       echo \"${width1}\"\n    else\n        echo \"-1\"\n    fi", "    local\
    \ length1=$(echo \"${1} * ${1}\" | bc)\n    local length2=$(echo \"${2} * ${2}\"\
    \ | bc)\n    local length3=$(echo \"${3} * ${3}\" | bc)\n    if [ $(( $length1\
    \ + $length2 + $length3 )) -gt $length3 ]\n    then\n        echo \"-1\"\n   \
    \ else\n        echo \"${length1} * ${length2} * ${length3}\"\n    fi", "    local\
    \ a=\"$1\"\n    local b=\"$2\"\n    local c=\"$3\"\n    local bsum=\"$(expr \"\
    $b\" \\* \"$c\")\"\n    local asum=\"$(expr \"$a\" \\* \"$c\")\"\n    if [ \"\
    $bsum\" -le \"$asum\" ]; then\n        echo \"$a * $c\"\n    else\n        echo\
    \ \"$a * $c\"\n    fi", "    local side_1=$1\n    local side_2=$2\n    local side_3=$3\n\
    \n    local area=$(echo \"scale=2; $side_1 + $side_2 + $side_3\" | bc)\n\n   \
    \ if [ ${#area} -gt 0 ] && [ ${#area} -ge 2 ] && [[ ${area%?} -gt ${side_3} ]];\n\
    \    then\n        echo \"${area%.*}\"\n    else\n        echo -1\n    fi", " \
    \   if [[ \"$1\" -eq \"$3\" ]]; then\n        echo \"$(( (($1/2)*(( $(echo \"\
    $1/$2\" | bc) )) ) + ($1/2) ))\"\n    else\n        echo \"-1\"\n    fi", "  \
    \  local L1 L2 L3\n    L1=$1\n    L2=$2\n    L3=$3\n\n    # if the two sides are\
    \ equal, they form a triangle with area 0\n    if (( L1 == L2 )); then\n     \
    \   return 0\n    fi\n\n    # if the two sides are not equal, they form a triangle\
    \ with area\n    # equal to the negative of the sum of their areas\n    if ((\
    \ L1 != L2 )); then\n        (( L1 == L2 )) && return $((-((L2+L3)/2)))\n    fi\n\
    \n    # if the three sides are equal, they form a triangle with area 0\n    if\
    \ (( L1 == L3 )); then\n        return 0\n    fi\n\n    # if the three sides are\
    \ not equal, they form a triangle with area\n    # equal to the negative of the\
    \ sum of their areas\n    if (( L1 != L3 )); then\n        (( L1 == L3 )) && return\
    \ $((-((L2+L3)/2)))\n    fi\n\n    # if the sum of the two sides is greater than\
    \ the third side, they \n    # form a triangle with area equal to the sum of the\
    \ two sides\n    if (( L2 + L3 > L1 )); then\n        (( L2 == L3 )) && return\
    \ $((L1+L2))\n    fi\n\n    # if the sum of the two sides is greater than the\
    \ third side, they \n    # form a triangle with area equal to the sum of the two\
    \ sides\n    if (( L3 + L2 > L1 )); then\n        (( L3 == L2 )) && return $((L1+L2))\n\
    \    fi", "\tarea_sum=$(( $1 + $2 + $3 ))\n\trounded_area_sum=$(printf \"%0.2f\"\
    \ $area_sum)\n\t[ \"$rounded_area_sum\" == \"$area_sum\" ] || return -1\n\techo\
    \ \"$rounded_area_sum\"", "    local length1=${1}\n    local length2=${2}\n  \
    \  local length3=${3}\n\n    if [ $length1 != $length2 ]; then\n        echo \"\
    ${length1}!=${length2}\"\n        return\n    fi\n\n    if [ $length2 != $length3\
    \ ]; then\n        echo \"${length2}!=${length3}\"\n        return\n    fi\n\n\
    \    if [ $length1 -lt $length2 -a $length2 -lt $length3 ]; then\n        echo\
    \ \"${length1}<${length2}<${length3}\"\n        return\n    fi\n\n    local lengthSum=${length1}\
    \ + ${length2}\n    local lengthSum2=${length1} + ${length3}\n\n    if [ $lengthSum\
    \ > $lengthSum2 ]; then\n        echo \"$lengthSum>$lengthSum2\"\n        return\n\
    \    fi\n\n    echo -1", "  local side1 side2 side3\n  read side1 side2 side3\n\
    \  local sum\n  if (( side1 + side2 + side3 ) -gt $3 )\n  then\n    sum=$(( $side1\
    \ + $side2 ))\n  else\n    sum=$(( $side3 + $side1 ))\n  fi\n  echo ${sum:0:2}",
  "  declare -i side1 side2 side3\n  read side1 side2 side3 <<< \"$1\"\n  (( side1\
    \ + side2 ) > side3 )) && \\\n  printf -v area '%.2d' \"$(( side1 * side2 * side3\
    \ / 2 ))\" || \\\n  printf -v area '-1'\n  printf \"$area\\n\"", "    # Initialize\
    \ a variable to hold area of triangle\n    triangle_area=0\n\n    # Check if the\
    \ sum of two sides is greater than the third side\n    if [ $(($1 + $2)) -gt $3\
    \ ]; then\n        triangle_area=$(echo \"($1 + $2) * 0.5\" | bc)\n    elif [\
    \ $(($2 + $3)) -gt $1 ]; then\n        triangle_area=$(echo \"($2 + $3) * 0.5\"\
    \ | bc)\n    else\n        echo \"-1\"\n    fi\n\n    # Return the area rounded\
    \ to 2 decimal points if triangle is a valid triangle\n    triangle_area=$(echo\
    \ \"$triangle_area\" | cut -c-2 | sed 's/^0\\(.\\)\\(.\\).*$/\\1/')\n    echo\
    \ \"$triangle_area\"", '  echo "$((( $(($1 + $2 - $3) * ($1 + $2 - $3)) + $(($1
    - $2 - $3) * ($1 - $2 - $3)) + $(($1 - $3 - $2) * ($1 - $3 - $2)) ) * 0.5))"',
  "    if [ $(($1+$2)+$3) -gt $(( $2*$3 )) ]\n    then\n        echo $(( $((($1+$2)+$3)*($1+$2))/2\
    \ ))\n    else\n        echo \"-1\"\n    fi", "    local length \n    local area\n\
    \    local side1 \n    local side2 \n    local side3\n    local error\n    \n\
    \    length=$(expr $2 + $3 + $1)\n    \n    if [[ $length -lt 3 ]]; then\n   \
    \     error=\"Expected triangle to have 3 sides.\" \n    elif [[ $length -lt 2\
    \ ]]; then\n        error=\"Expected triangle to have 2 sides.\" \n    else\n\
    \        side1=$(expr $2 / $3)\n        side2=$(expr $2 % $3)\n        side3=$(expr\
    \ $3 % $2)\n        if [[ $side1 -lt 0 || $side2 -lt 0 || $side3 -lt 0 ]]; then\n\
    \            error=\"Expected triangle to have non-negative sides.\"\n       \
    \ fi\n        area=$(( length * (side1 + side2 + side3) ))\n        if [[ $area\
    \ -lt 0 || $area -gt 360 ]]; then\n            error=\"Expected triangle to have\
    \ area in [0, 360).\"\n        fi\n    fi\n    \n    if [[ $error ]]; then\n \
    \       echo \"-1\"\n    else\n        echo \"$(awk 'BEGIN {printf \"%.02f\",'\"\
    $(awk 'BEGIN {printf \"%.02f\",'\"$(awk 'BEGIN {printf \"%.02f\",'\"$(awk 'BEGIN\
    \ {printf \"%.02f\",'\"$(awk 'BEGIN {printf \"%.02f\",'\"$(awk 'BEGIN {printf\
    \ \"%.02f\",'\"$(awk 'BEGIN {printf \"%.02f\",'\"$(awk 'BEGIN {printf \"%.02f\"\
    ,'\"$(awk 'BEGIN {printf \"%.02f\",'\"$(awk 'BEGIN {printf \"%.02f\",'\"$(awk\
    \ 'BEGIN {printf \"%.02f\",'\"$(awk 'BEGIN {printf \"%.02f\",'\"$(awk 'BEGIN {printf\
    \ \"%.02f\",'\"$(awk 'BEGIN {printf \"%.02f\",'\"$(awk 'BEGIN {printf \"%.02f\"\
    ,'\"$(awk 'BEGIN {printf \"%.02f\",'\"$(awk 'BEGIN {printf \"%.02f\",'\"$(awk\
    \ 'BEGIN {printf \"%.02f\",'\"$(awk 'BEGIN {printf \"%.02f\",'\"$(awk 'BEGIN {printf\
    \ \"%.02f\",'\"$(awk 'BEGIN {printf \"%.02f\",'\"$(awk 'BEGIN {printf \"%.02f\"\
    ,'\"$(awk 'BEGIN {printf \"%.02f\",'\"$(awk 'BEGIN {printf \"%.02f\",'\"$(awk\
    \ 'BEGIN {printf ", "  local A=$1\n  local B=$2\n  local C=$3\n  if (( $A < $B\
    \ + $C )); then\n    return -1\n  fi\n  echo \"$(( $A / $B * $C ))\" | bc -l",
  "    local s1 s2 s3\n    local res\n    local lengths\n\n    lengths=${1:?}\n  \
    \  s2=${2:?}\n    s3=${3:?}\n\n    if [ \"${lengths}\" -gt \"${s3}\" ]; then\n\
    \        res=\"${s2}\"\n    else\n        res=\"${s3}\"\n    fi\n\n    echo \"\
    ${res%.*}\"", "  (( $2 > $1 )) && return -1\n  (( $3 > $2 )) && return -1\n  ((\
    \ $(echo $2 + $3 | bc) > $1 )) && return -1\n  (( $(echo $1 + $3 | bc) > $2 ))\
    \ && return -1\n  # calculate the area of the triangle\n  echo $(echo $1/(sqrt($2**2\
    \ + $3**2))) | bc -l", "    local side sum\n    sum=$(( $1 + $2 ))\n    if [ $((\
    \ $sum + $3 )) -gt $3 ]; then\n        echo $(( $sum / 2 ))\n    else\n      \
    \  echo \"-1\"\n    fi", "  # Define local variables\n  local side1 side2 side3\n\
    \  local sum1 sum2 sum3\n\n  # Get input\n  read side1 side2 side3 <<<$(echo \"\
    $1\" \"$2\" \"$3\")\n\n  # Check if any inputs are negative\n  [ \"$side1\" -le\
    \ 0 ] && [ -n \"$side2\" ] && [ -n \"$side3\" ] || return -1\n\n  # Calculate\
    \ the sums of the sides\n  sum1=$(( $side1 + $side2 ))\n  sum2=$(( $side2 + $side3\
    \ ))\n  sum3=$(( $side1 + $side3 ))\n\n  # Check if any sums are greater than\
    \ the third side\n  [ \"$sum1\" -gt \"$sum2\" ] && [ \"$sum1\" -gt \"$sum3\" ]\
    \ || return -1\n\n  # Calculate the area of the triangle by pythagorean theorem\n\
    \  area=$((a+b+c))\n  \n  # Round to 2 decimal places and return\n  printf \"\
    $area\" | awk '{ printf (\"%.2f\\n\", $1) }'", "    if [ \"$1\" -gt \"$2\" ] ;\
    \ then\n        if [ \"$1\" -gt \"$3\" ] ; then\n            echo \"$(($1*($1\
    \ + $2)*2))\"\n        else\n            echo \"$(($1*$2))\"\n        fi\n   \
    \ else\n        if [ \"$3\" -gt \"$2\" ] ; then\n            echo \"-1\"\n   \
    \     else\n            echo \"-1\"\n        fi\n    fi", "\t(( $1 == $3 )) ||\
    \ (( $1 + $2 > $3 )) || (( $1 + $2 == $3 )) || return -1\n\t(( $1 == $2 )) ||\
    \ (( $1 + $2 > $3 )) || (( $1 + $2 == $3 )) || return -1\n\t(( $2 == $1 )) ||\
    \ (( $1 + $2 > $3 )) || (( $1 + $2 == $3 )) || return -1\n\t(( $2 == $3 )) ||\
    \ (( $1 + $2 > $3 )) || (( $1 + $2 == $3 )) || return -1\n\t(( $1 > $2 )) || ((\
    \ $1 + $2 > $3 )) || (( $1 + $2 == $3 )) || return -1\n\t(( $2 > $1 )) || (( $1\
    \ + $2 > $3 )) || (( $1 + $2 == $3 )) || return -1\n\t(( $1 > $3 )) || (( $1 +\
    \ $2 > $3 )) || (( $1 + $2 == $3 )) || return -1\n\t(( $3 > $1 )) || (( $1 + $2\
    \ > $3 )) || (( $1 + $2 == $3 )) || return -1\n\t(( $1 > $3 )) || (( $2 + $3 >\
    \ $4 )) || (( $2 + $3 == $4 )) || return -1\n\t(( $3 > $1 )) || (( $2 + $3 > $4\
    \ )) || (( $2 + $3 == $4 )) || return -1\n\t(( $1 > $3 )) || (( $2 + $3 > $4 ))\
    \ || (( $2 + $3 == $4 )) || return -1\n\t(( $3 > $1 )) || (( $2 + $3 > $4 )) ||\
    \ (( $2 + $3 == $4 )) || return -1\n\t(( $1 > $3 )) || (( $2 + $3 > $4 )) || ((\
    \ $2 + $3 == $4 )) || return -1\n\t(( $3 > $1 )) || (( $2 + $3 > $4 )) || (( $2\
    \ + $3 == $4 )) || return -1\n\t(( $1 > $3 )) || (( $2 + $3 > $4 )) || (( $2 +\
    \ $3 == $4 )) || return -1\n\t(( $3 > $1 )) || (( $2 + $3 > $4 )) || (( $2 + $3\
    \ == $4 )) || return -1\n\t(( $1 > $3 )) || (( $2 + $3 > $4 )) || (( $2 + $3 ==\
    \ $4 )) ", "  read length height1 height2 < <(printf \"%i %i %i\\n\" \"$1\" \"\
    $2\" \"$3\")\n  [[ $(( length + height1 + height2 )) -gt $(( length + height2\
    \ )) ]]", "    if [ $1 -eq 1 ]; then \n        return 0\n    elif [ $1 -eq 2 ];\
    \ then \n        if [ $2 -eq 1 ]; then \n            return 0\n        else\n\
    \            return -1\n        fi\n    elif [ $1 -eq 3 ]; then \n        if [\
    \ $2 -eq 2 ]; then \n            if [ $3 -eq 1 ]; then \n                return\
    \ 0\n            else\n                return -1\n            fi\n        elif\
    \ [ $2 -eq 3 ]; then \n            return 0\n        else\n            return\
    \ -1\n        fi\n    else\n        return -1\n    fi", "\t[ \"${#}\" -eq \"3\"\
    \ ] || return -1\n\n\t# Triangle area is always positive.\n\t# For example if\
    \ three sides are 10 and 20, the area is 40.\n\t# So if the sum of any two sides\
    \ is greater than the third side, \n\t# that means it is a valid triangle.\n\t\
    a=$(( ${1}+${2} ))\n\tb=$(( ${1}+${3} ))\n\tc=$(( ${2}+${3} ))\n\n\tarea=$(( a*b*c\
    \ ))\n\n\t# Round the area to 2 decimal places\n\techo ${area%.*}", "\t# get lengths\
    \ of sides\n\tlength1=$1\n\tlength2=$2\n\tlength3=$3\n\t\n\t# check if all three\
    \ sides are positive\n\tif [ $length1 < 0 ] || [ $length2 < 0 ] || [ $length3\
    \ < 0 ]; then\n\t\techo \"-1\"\n\t\treturn 1\n\tfi\n\t\n\t# get sides\n\tside1=$(echo\
    \ \"$length1\" | bc)\n\tside2=$(echo \"$length2\" | bc)\n\tside3=$(echo \"$length3\"\
    \ | bc)\n\n\t# check if sum of any two sides is greater than the third side\n\t\
    if [ $(echo \"$side1+$side2 > $side3\" | bc) ]; then\n\t\techo \"-1\"\n\t\treturn\
    \ 1\n\tfi\n\t\n\t# calculate area\n\tarea=$(echo \"(2 * $side1 * $side2) + (2\
    \ * $side2 * $side3) + ($side1 * $side3)\" | bc)\n\t\n\t# round if possible\n\t\
    echo \"$area\"\n\treturn 0", "    set -- $@\n    length=${1:-3}\n    side1=${2:-2}\n\
    \    side2=${3:-2}\n    if [ $side1 -gt $side2 ]; then\n        echo \"$(($side1*$side1/$length\
    \ + $side2*$side2/$length))\"\n    elif [ $side1 -eq $side2 ]; then\n        echo\
    \ \"$(($side1*$side1/$length))\"\n    elif [ $side1 -eq $side2 -a $side1 -eq $side3\
    \ ]; then\n        echo \"$(($side1*$side1/$length))\"\n    else\n        echo\
    \ \"-1\"\n    fi", "    local side1 side2 side3\n    side1=$1\n    side2=$2\n\
    \    side3=$3\n    if [ $side1 = $side2 ] && [ $side1 = $side3 ]; then\n     \
    \   echo \"$(( $(echo \"$side1 + $side2 + $side3\" | bc) / 3 ))\"\n    elif [\
    \ $side2 = $side3 ]; then\n        echo \"$(( $(echo \"$side1 + $side2 + $side3\"\
    \ | bc) / 2 ))\"\n    elif [ $side3 = $side1 ]; then\n        echo \"$(( $(echo\
    \ \"$side1 + $side2 + $side3\" | bc) / 2 ))\"\n    elif [ $side1 -gt $side3 ]\
    \ || [ $side2 -gt $side3 ] || [ $side3 -gt $side1 ]; then\n        echo \"-1\"\
    \n    else\n        echo \"-1\"\n    fi", "  local a b c length\n  length=$1;\
    \ shift\n  length=$1; shift\n  length=$1; shift\n  a=$1; shift\n  b=$1; shift\n\
    \  c=$1; shift\n  if [ $a -le $b ] && [ $b -le $c ] && [ $c -le $length ]\n  then\n\
    \    return $((a * b * c)/length)\n  else\n    return -1\n  fi", "    sideA=$1\n\
    \    sideB=$2\n    sideC=$3\n    \n    area=$(( (sideA*sideA) + (sideB*sideB)\
    \ + (sideC*sideC) ))\n    \n    if [ $area -lt $((sideA*sideB*sideC) ) ]\n   \
    \ then\n        echo \"$((area))\"\n    else\n        echo \"-1\"\n    fi", " \
    \ (( $1 )) || return -1\n  (( $2 )) || return -1\n  (( $3 )) || return -1\n  ((\
    \ $1 + $2 > $3 )) || return -1\n  (( $2 * $3 )) || return -1\n  (( $1 ) + ( $2\
    \ ) + ( $3 )) || return -1\n  (( $2 * $3 )) || return -1\n  echo \"$(( $1 * $2\
    \ * $3 ))\" | bc -l | cut -d\".\" -f2", '  echo "$(( $1 * $2 + $3 * $2 - 2 * $3
    ))"', "  local len1=$1\n  local len2=$2\n  local len3=$3\n  local sum\n  if [[\
    \ $len1 > $len2 ]] || [[ $len2 > $len3 ]] || [[ $len3 > $len1 ]]; then\n    echo\
    \ \"error: invalid triangle (triangles must have equal lengths)\"\n    return\
    \ -1\n  else\n    sum=$((len1*(len1+len2+len3))/2)\n    if [[ $sum -gt $len3 ]];\
    \ then\n      echo \"$sum\"\n    else\n      echo \"-1\"\n    fi\n  fi", "\t\n\
    \tLENGTH=$1\n\tSIDE1=$2\n\tSIDE2=$3\n\t\n\tSUM1=$((SIDE1+SIDE2))\n\tSUM2=$((SIDE2+SIDE1))\n\
    \tSUM3=$((SIDE1+SIDE3))\n\t\n\tif [ $SUM1 -gt $SUM2 ] && [ $SUM1 -gt $SUM3 ];\
    \ then \n\t\techo \"$((SUM1 / 2))\"\n\telse\n\t\techo \"-1\"\n\tfi", "\techo $((\
    \ $1 * $2 * $3 ))", "    local a=\"$1\"\n    local b=\"$2\"\n    local c=\"$3\"\
    \n    local d=0\n    local i=1\n\n    while [ \"${i}\" -le \"${a}\" ] || [ \"\
    ${i}\" -le \"${b}\" ] || [ \"${i}\" -le \"${c}\" ]; do\n        if [ \"${i}\"\
    \ -le \"${a}\" ]; then\n            (( d+=\"${i}\" ))\n        elif [ \"${i}\"\
    \ -le \"${b}\" ]; then\n            (( d+=\"${c}\" ))\n        elif [ \"${i}\"\
    \ -le \"${c}\" ]; then\n            (( d+=\"${b}\" ))\n        fi\n        ((\
    \ i++ ))\n    done\n    if [ \"${d}\" -gt \"${c}\" ]; then\n        (( d+=\"${c}\"\
    \ ))\n    elif [ \"${d}\" -gt \"${b}\" ]; then\n        (( d+=\"${b}\" ))\n  \
    \  elif [ \"${d}\" -gt \"${a}\" ]; then\n        (( d+=\"${a}\" ))\n    fi\n \
    \   echo \"${d%.*}\"", "  local triangle=\n  if [ \"$1\" -gt \"$3\" ] && [ \"\
    $2\" -gt \"$3\" ] && [ \"$1\" -gt \"$2\" ]; then\n    triangle=$(echo \"($1/$2)*$3\"\
    \ | bc -l )\n    echo \"$triangle\"\n  else\n    echo \"-1\"\n  fi", "  len1=$1\n\
    \  len2=$2\n  len3=$3\n  area_1=$((len1**2))\n  area_2=$((len2**2))\n  area_3=$((len3**2))\n\
    \  \n  area_sum=$(( $area_1 + $area_2 ))\n\n  if [[ $area_sum -gt $area_3 ]]\n\
    \  then\n    area_sum=$(( $area_1 + $area_2 ))\n  else\n    area_sum=$(( $area_3\
    \ + $area_2 ))\n  fi\n\n  echo $area_sum", "    if [ \"$1\" -gt \"$2\" ] && [\
    \ \"$2\" -gt \"$3\" ]\n    then\n        echo \"$(($1*($1+$2)+$3*(2*$1+2*$2+$3)/2))\"\
    \n    else\n        echo \"-1\"\n    fi", "  sides=$1\n  sides2=$2\n  sides3=$3\n\
    \  echo \"$sides$sides2$sides3\" | awk '{print $1/(sqrt($1*$1 + $2*$2 + $3*$3))}'",
  "\tlocal side1=$1\n\tlocal side2=$2\n\tlocal side3=$3\n\tlocal sum\n\tlocal area\n\
    \tlocal valid\n\n\tvalid=$(echo $(( (side1 + side2 + side3) | 0 )) | bc -l | grep\
    \ -E '^[+\\-]?[0-9]+\\.?[0-9]*$' && echo True || echo False)\n\n\tif [ \"$valid\"\
    \ = True ]; then\n\t\tsum=$(echo $(( (side1 + side2 + side3) | 0 )) | bc -l )\n\
    \t\tarea=$(echo \"$sum * $sum\" | bc -l)\n\t\techo \"$area\"\n\telse\n\t\techo\
    \ \"-1\"\n\tfi", "\tlocal l=$1\n\tlocal w=$2\n\tlocal h=$3\n\t\n\tif [ \"$l\"\
    \ -ne \"1\" -o \"$w\" -ne \"1\" -o \"$h\" -ne \"1\" ]; then\n\t\techo \"bad parameters\"\
    \ 1>&2\n\t\texit 1\n\tfi\n\t\n\tif [ $(( ($w + $h) - ($l - $w) )) -gt 0 ]; then\n\
    \t\techo \"bad parameters\" 1>&2\n\t\texit 1\n\tfi\n\t\n\techo -n \"3.14159265358979323846\"\
    \ # PI\n\tlocal PI_2_3=3.14159265358979323846\n\tlocal PI_2_4=6.283185307179586\n\
    \tlocal PI_2_5=3.1415926535897932\n\tlocal pi=`echo $(($PI_2_3 * $w))`\n\tlocal\
    \ pi2=`echo $(($PI_2_4 * $h))`\n\t\n\tif [ \"$pi\" -gt \"$pi2\" ]; then\n\t\t\
    echo \"bad parameters\" 1>&2\n\t\texit 1\n\tfi\n\t\n\tif [ $(( $w + $h )) -eq\
    \ \"$l\" ]; then\n\t\techo \"$((($w * $h))/$l)\"\n\telse\n\t\techo \"-1\"\n\t\
    fi", "    if [[ $(($1 + $2)) > $(($3 + $4)) ]] ; then\n        echo \"$((($1 +\
    \ $2) * $((3 - $2)))/$((3 * $2)))\"\n    else\n        echo \"-1\"\n    fi", " \
    \ local A=$1\n  local B=$2\n  local C=$3\n  local S1=$((A+B))\n  local S2=$((A+C))\n\
    \  local S3=$((B+C))\n  local S4=$((S1+S2))\n  if [ $S1 -eq 0 ]; then\n    echo\
    \ \"$S1\"\n  else\n    if [ $S2 -eq 0 ]; then\n      echo \"$S2\"\n    else\n\
    \      if [ $S3 -eq 0 ]; then\n        echo \"$S3\"\n      else\n        if [\
    \ $S4 -eq 0 ]; then\n          echo \"$S4\"\n        else\n          echo \"$(((S1+S2+S3)/2))\"\
    \n        fi\n      fi\n    fi\n  fi", "    local triangle_sides area\n    triangle_sides=$(echo\
    \ -n \"$1\" | xargs printf \"%$2\")\n    area=$(awk \"BEGIN {print ${triangle_sides[1]}\
    \ * ${triangle_sides[2]} * ${triangle_sides[3]}}\")\n    if [[ \"$area\" -gt \"\
    $3\" ]]; then\n        echo \"$(awk \"BEGIN {print (${triangle_sides[0]} * ${triangle_sides[1]}\
    \ - ${triangle_sides[1]} * ${triangle_sides[0]}) / 2}\")\"\n    else\n       \
    \ echo \"$area\"\n    fi", "    sideA=$1\n    sideB=$2\n    sideC=$3\n    if [[\
    \ $sideB > $sideA && $sideB > $sideC ]]\n    then\n        echo `expr $sideA +\
    \ $sideB + $sideC \\* 0.5`\n    elif [[ $sideA > $sideB && $sideA > $sideC ]]\n\
    \    then\n        echo `expr $sideA + $sideC + $sideB \\* 0.5`\n    elif [[ $sideB\
    \ > $sideC && $sideB > $sideA ]]\n    then\n        echo `expr $sideC + $sideA\
    \ + $sideB \\* 0.5`\n    else\n        echo -1\n    fi", "    a=$1\n    b=$2\n\
    \    c=$3\n    if [ \"$a\" -lt \"$b\" ] || [ \"$a\" -lt \"$c\" ] || [ \"$b\" -lt\
    \ \"$c\" ]\n    then\n        return 0\n    else\n        echo \"$((a+b+c)/2)\"\
    \n    fi", "\techo $(( $(( ${1:-0} * $(( ${2:-0} * $(( ${3:-0} + 1 ))) )) )))",
  "  echo \"$3 $2 $1\" >/tmp/area\n  tri=`cat /tmp/area |awk '{print $1/$2/$3}'`\n\
    \  if [[ \"$tri\" -gt \"1\" ]]; then\n    echo $tri\n  else\n    echo -1\n  fi",
  "    if [[ $1 -eq $2 || $1 -eq $3 ]]; then\n        return 0\n    else\n       \
    \ # $2 + $3\n        area_sides=$(( $1 + $2 ))\n        # $2 + $3 - $2\n     \
    \   area_tri=$(( $area_sides - $2 ))\n        # $area_tri + $3\n        area_tri_plus_sides=$((\
    \ $area_tri + $3 ))\n        # $area_tri_plus_sides / $2\n        area_tri_plus_sides_divide=$((\
    \ $area_tri_plus_sides / $2 ))\n        # $area_tri_plus_sides_divide / $3\n \
    \       area_tri_plus_sides_divide_divide=$(( $area_tri_plus_sides_divide / $3\
    \ ))\n        # $area_tri_plus_sides_divide_divide * $2\n        area_tri_plus_sides_divide_divide_multiply=$((\
    \ $area_tri_plus_sides_divide_divide * $2 ))\n        # $area_tri_plus_sides_divide_divide_multiply\
    \ + $3\n        area_tri_plus_sides_divide_divide_multiply_plus_three=$(( $area_tri_plus_sides_divide_divide_multiply\
    \ + $3 ))\n        # $area_tri_plus_sides_divide_divide_multiply_plus_three\n\
    \        area_tri_plus_sides_divide_divide_multiply_plus_three_area=$(( $area_tri_plus_sides_divide_divide_multiply_plus_three\
    \ ))\n        # $area_tri_plus_sides_divide_divide_multiply_plus_three_area /\
    \ $2\n        area_tri_plus_sides_divide_divide_multiply_plus_three_area_divide=$((\
    \ $area_tri_plus_sides_divide_divide_multiply_plus_three_area / $2 ))\n      \
    \  # $area_tri_plus_sides_divide_divide_multiply_plus_three_area_divide * $3\n\
    \        area_tri_plus_sides_divide_divide_multiply_plus_three_area_divide_multiply=$((\
    \ $area_tri_plus_sides_divide_divide_multiply_plus_three_area_divide * $3 ))\n\
    \        # $area_tri_plus_sides_divide_divide_multiply_plus_three_area_divide_multiply\
    \ * $2\n        area_tri_plus_sides_divide_divide_multiply_plus_three_area_divide_multiply_multiply=$((\
    \ $area_tri_plus_sides_divide_divide_multiply_plus_three_area_divide_multiply\
    \ * $2 ))\n        # $area_tri_plus_sides_divide", "    local side1=$1\n    local\
    \ side2=$2\n    local side3=$3\n\n    local length1=`echo $side1 | awk '{print\
    \ $1}'`\n    local length2=`echo $side2 | awk '{print $1}'`\n    local length3=`echo\
    \ $side3 | awk '{print $1}'`\n    if [[ $length1 == 0 || $length2 == 0 || $length3\
    \ == 0 ]]; then\n        return -1\n    fi\n    local sum1=$((length1 + length2))\n\
    \    local sum2=$((length1 + length3))\n    local sum3=$((length2 + length3))\n\
    \    if [[ $sum1 > $sum2 ]]; then\n        return -1\n    elif [[ $sum2 > $sum3\
    \ ]]; then\n        return -1\n    elif [[ $sum1 == $sum2 ]]; then\n        return\
    \ 0\n    elif [[ $sum1 == $sum3 ]]; then\n        return 0\n    elif [[ $sum2\
    \ == $sum3 ]]; then\n        return 1\n    fi\n", "    local a b c \n    a=$1\n\
    \    b=$2\n    c=$3\n\n    while [[ $a -ge $b && $a -ge $c && $b -ge $c ]]; do\n\
    \        let \"a -= b +c\"\n    done\n    echo $a", "\tif [[ $(($1+$2+$3)) -gt\
    \ $3 ]]; \n\tthen echo \"$((($1+$2+$3)*$2))\";\n\telse echo \"-1\";\n\tfi", " \
    \   local side1=$1\n    local side2=$2\n    local side3=$3\n    local area\n \
    \   \n    local side1Length=$((side1 - 1))\n    local side2Length=$((side2 - 1))\n\
    \    local side3Length=$((side3 - 1))\n    \n    local validTriangle\n    \n \
    \   validTriangle=0\n    \n    if ((side1Length == side2Length) && (side1Length\
    \ == side3Length)) {\n        validTriangle=1\n    elif ((side1Length == side2Length)\
    \ && (side3Length > side2Length)) {\n        validTriangle=2\n    elif ((side1Length\
    \ == side3Length) && (side2Length > side3Length)) {\n        validTriangle=3\n\
    \    }\n    \n    if [[ \"$validTriangle\" -eq \"1\" ]]\n    then\n        area=$((side1Length\
    \ * side2Length))\n    elif [[ \"$validTriangle\" -eq \"2\" ]]\n    then\n   \
    \     area=$((side1Length * side3Length))\n    elif [[ \"$validTriangle\" -eq\
    \ \"3\" ]]\n    then\n        area=$((side2Length * side3Length))\n    fi\n  \
    \  \n    if [[ \"$area\" -ne -1 ]]\n    then\n        area=$(awk 'BEGIN{print\
    \ \"$area\"}/1000000')\n    fi\n    \n    echo $(awk 'BEGIN{printf \"%0.2f\\n\"\
    , $area}'|bc)", "  (( $(( $1 + $2 )) )) > $(( $(( $1 + $3 )) )) && \\\n  (( $((\
    \ $1 + $2 )) )) > $(( $(( $1 + $3 )) )) && \\\n  (( $(( $1 + $2 )) )) > $(( $((\
    \ $1 + $3 )) ))", "\tsum=$(( $1 * $2 + $3 * $1 - $3 * $2 ))\n\twhile [[ $sum !=\
    \ 0 ]] ; do \n\t\t(( sum-- ))\n\tdone\n\techo $(( sum * 0.5 ))", "\techo $(echo\
    \ \"$1 $2 $3\" | awk '{if ($1 + $2 > $3) { print \"-1\" } else { printf \"%.2f\\\
    n\", $1/($1+$2+$3) }}')", "  local a=$1\n  local b=$2\n  local c=$3\n  \n  local\
    \ s1=`expr \"$a\" + \"$b\"`\n  local s2=`expr \"$b\" + \"$c\"`\n  local s3=`expr\
    \ \"$a\" + \"$c\"`\n  \n  local a1=`expr \"$a\" + \"$b\"`\n  local b1=`expr \"\
    $b\" + \"$c\"`\n  local c1=`expr \"$c\" + \"$a\"`\n  \n  local a2=`expr \"$a1\"\
    \ + \"$b1\"`\n  local b2=`expr \"$b1\" + \"$c1\"`\n  local c2=`expr \"$c1\" +\
    \ \"$a1\"`\n  \n  if [[ $((s1 + s2 + s3)) == $((b1 + b2 + c2)) ]]; then\n    echo\
    \ ${s1}.${s2}.${s3} > /dev/null 2>&1\n  else\n    echo -1\n  fi", "  if (( $(\
    \ echo \"$1 $2 $3\" | grep -Eq \"^[+-]?[0-9]+$\" ) ))\n  then\n    echo $( echo\
    \ \"$1 $2 $3\" | grep -Eq \"^[+-]?[0-9]+$\" | bc) - $( echo \"$2 $3 $1\" | grep\
    \ -Eq \"^[+-]?[0-9]+$\" | bc)\n  else\n    echo -1\n  fi", "  local a=`expr \"\
    $1\" \\* \"$1\" \\* \"$1\"`\n  local b=`expr \"$1\" \\* \"$2\" \\* \"$2\"`\n \
    \ local c=`expr \"$1\" \\* \"$3\" \\* \"$3\"`\n  if [ $a -eq $b ] || [ $a -eq\
    \ $c ] || [ $b -eq $c ] \n  then\n    local a=`expr \"$a\" / \"$b\"`\n    local\
    \ b=`expr \"$b\" / \"$c\"`\n    echo \"$a\"\n  else\n    echo \"-1\"\n  fi", " \
    \   local side_1=$1\n    local side_2=$2\n    local side_3=$3\n\n    local side_1_square=$(echo\
    \ \"$side_1\" | bc)\n    local side_2_square=$(echo \"$side_2\" | bc)\n    local\
    \ side_3_square=$(echo \"$side_3\" | bc)\n\n    if [[ ${side_1} -gt ${side_2}\
    \ && ${side_1} -gt ${side_3} ]]; then\n        echo \"${side_1}\"\n    elif [[\
    \ ${side_2} -gt ${side_1} && ${side_2} -gt ${side_3} ]]; then\n        echo \"\
    ${side_1}\"\n    elif [[ ${side_3} -gt ${side_1} && ${side_3} -gt ${side_2} ]];\
    \ then\n        echo \"${side_1}\"\n    elif [[ ${side_1} -gt ${side_2} && ${side_1}\
    \ -gt ${side_3} ]]; then\n        echo \"${side_3}\"\n    elif [[ ${side_2} -gt\
    \ ${side_1} && ${side_2} -gt ${side_3} ]]; then\n        echo \"${side_3}\"\n\
    \    elif [[ ${side_3} -gt ${side_1} && ${side_3} -gt ${side_2} ]]; then\n   \
    \     echo \"${side_3}\"\n    elif [[ ${side_1} -gt ${side_2} && ${side_1} -gt\
    \ ${side_3} ]]; then\n        echo \"${side_2}\"\n    elif [[ ${side_2} -gt ${side_1}\
    \ && ${side_2} -gt ${side_3} ]]; then\n        echo \"${side_2}\"\n    elif [[\
    \ ${side_3} -gt ${side_1} && ${side_3} -gt ${side_2} ]]; then\n        echo \"\
    ${side_2}\"\n    elif [[ ${side_1} -gt ${side_2} && ${side_1} -gt ${side_3} ]];\
    \ then\n        echo \"${side_1}\"\n    elif [[ ${side_2} -gt ${side_1} && ${side_2}\
    \ -gt ${side_3} ]]; then\n        echo \"${side_1}\"\n    elif [[ ${side_3} -gt\
    \ ${side_1} && ${side_3} -gt ${side_2} ]]; then\n        echo \"${side_1}\"\n\
    \    elif [[ ${side_1} -gt ${side_2} && ${side_1} -gt ${side_3} ]]; then\n   \
    \     echo \"${side_1}\"\n    elif [[ ${side_2} -gt ${side_1} && ${side_2} -gt\
    \ ${side_3} ]]; then\n        echo \"${side_1}\"\n    elif [[ ${side_3", "\tlength=${1}\n\
    \twidth1=${2}\n\twidth2=${3}\n\tlength1=${#length}\n\tlength2=${#width1}\n\tlength3=${#width2}\n\
    \tif(( ${length1} > ${length2} )) && (( ${length2> ${length3}) ); then\n\t\techo\
    \ \"${width1}*${width2}/(${width1}+${width2})\"\n\telif(( ${length2} > ${length3})\
    \ ); then\n\t\techo \"${width2}*${width3}/(${width2}+${width3})\"\n\telif(( ${length1}\
    \ > ${length3}) ); then\n\t\techo \"${width1}*${width3}/(${width1}+${width3})\"\
    \n\tfi", "    sum=$(( $(echo $1 | bc -l) + $(echo $2 | bc -l) + $(echo $3 | bc\
    \ -l) ))\n    if [ $(echo $sum | bc -l | grep -q \"^0\") ]; then\n        echo\
    \ \"0\"\n    elif [ $(( $sum % 2 )) -gt 0 ]; then\n        echo \"$(( $sum / 2\
    \ * $(( $sum / 2 )) ))\"\n    else\n        echo \"-1\"\n    fi", "  if (( $1\
    \ == \"1\" ) || ( $1 == \"2\" )); then\n    if (( $2 == \"1\" ) || ( $2 == \"\
    2\" )); then\n      (( ans = $3 * ($1 + $2) ))\n    else\n      (( ans = $3 *\
    \ $2 ))\n    fi\n  else\n    if (( $2 == \"1\" ) || ( $2 == \"2\" )); then\n \
    \     (( ans = $3 * ($1 + $2) ))\n    else\n      (( ans = -1 * $3 ))\n    fi\n\
    \  fi\n  (( ans = ans / 2 ))\n  echo \"$ans\"", "  local a=$(echo \"$1\"|bc)\n\
    \  local b=$(echo \"$2\"|bc)\n  local c=$(echo \"$3\"|bc)\n  echo \"$(( a*b -\
    \ b*c ))\"", "    local val1=$1\n    local val2=$2\n    local val3=$3\n\n    local\
    \ val4=$((val1 + val2 + val3))\n\n    local val5=$((val4%2))\n\n    if [ \"$val4\"\
    \ -gt \"$val3\" ] && [ \"$val5\" -eq \"0\" ]; then\n        echo $((val4 * 1.6))\n\
    \    else\n        echo \"-1\"\n    fi", "\tif (( \"$1\" -gt \"$3\" ) || ( \"\
    $1\" -eq \"$3\" ))\n\tthen\n\t\t(( \"$2\" < \"$3\" )) && return 0\n\t\t(( \"$2\"\
    \ > \"$3\" )) && return -1\n\telse\n\t\t(( \"$1\" < \"$2\" )) && return 0\n\t\t\
    (( \"$1\" > \"$2\" )) && return -1\n\tfi\n\treturn (( \"$1\" - \"$2\" ) * ( \"\
    $1\" - \"$3\" ))", "    local length1=$1\n    local length2=$2\n    local length3=$3\n\
    \n    local sum1=$((length1 + length2))\n    local sum2=$((length1 + length3))\n\
    \    local sum3=$((length2 + length3))\n\n    if [[ \"$sum1\" -gt \"$sum2\" ]]\
    \ && [[ \"$sum2\" -gt \"$sum3\" ]] ; then\n        echo \"$((length1 * length2\
    \ * length3))\"\n    else\n        echo \"-1\"\n    fi", "  local side_1 side_2\
    \ side_3\n  # Check if all three sides are positive numbers and if they are all\
    \ different\n  side_1=$1\n  side_2=$2\n  side_3=$3\n  local valid_1\n  local valid_2\n\
    \  local valid_3\n  # Check if three sides are different\n  if (( ${side_1} !=\
    \ ${side_2} )) && (( ${side_1} != ${side_3} ))\n  then\n    return -1\n  fi\n\
    \  # Check if any two sides are equal\n  if (( ${side_1} == ${side_2} ))\n  then\n\
    \    # Check if all three sides are equal\n    if (( ${side_1} != ${side_3} ))\n\
    \    then\n      return -1\n    fi\n    valid_1=$1\n    valid_2=$2\n    valid_3=$3\n\
    \  elif (( ${side_2} == ${side_3} ))\n  then\n    # Check if all three sides are\
    \ equal\n    if (( ${side_1} != ${side_3} ))\n    then\n      return -1\n    fi\n\
    \    valid_1=$1\n    valid_2=$2\n    valid_3=$3\n  else\n    return -1\n  fi\n\
    \  local sum\n  sum=$(expr \"$side_1 + $side_2 + $side_3\" - \"$valid_1 - $valid_2\
    \ - $valid_3\" )\n  # If sum is greater than the third side, the triangle is invalid.\n\
    \  if [ \"$sum\" -gt \"$side_3\" ]\n  then\n    return -1\n  fi\n  # Round the\
    \ sum of all sides to 2 decimal points\n  local rounded_sum=$(echo \"$sum\" |\
    \ bc)\n  echo $rounded_sum", "  local side1=${1:?Missing side 1 of triangle}\n\
    \  local side2=${2:?Missing side 2 of triangle}\n  local side3=${3:?Missing side\
    \ 3 of triangle}\n  \n  if [ \"$side1\" -gt \"$side2\" ] && [ \"$side1\" -gt \"\
    $side3\" ]; then\n    echo \"$((side1 + side2 + side3))\"\n  else\n    echo \"\
    -1\"\n  fi", "  local side1=\"$1\"\n  local side2=\"$2\"\n  local side3=\"$3\"\
    \n  local side4=\"$(echo \"$side1 + $side2 > $side3\" | bc)\"\n  echo \"$side4/2\"",
  "  (( $# = 1 )) && echo \"$2\" || echo \"-1\"\n  (( $# = 2 )) && echo \"$2\" ||\
    \ echo \"-1\"\n  (( $# = 3 )) && echo \"$1\" || echo \"-1\"\n  (( $# = 4 )) &&\
    \ echo \"$1\" || echo \"-1\"\n  (( $# = 5 )) && echo \"$1\" || echo \"-1\"\n \
    \ (( $# = 6 )) && echo \"$1\" || echo \"-1\"\n  (( $# = 7 )) && echo \"$1\" ||\
    \ echo \"-1\"\n  (( $# = 8 )) && echo \"$1\" || echo \"-1\"\n  (( $# = 9 )) &&\
    \ echo \"$1\" || echo \"-1\"\n  (( $# = 10 )) && echo \"$1\" || echo \"-1\"\n\
    \  (( $# = 11 )) && echo \"$1\" || echo \"-1\"\n  (( $# = 12 )) && echo \"$1\"\
    \ || echo \"-1\"\n  (( $# = 13 )) && echo \"$1\" || echo \"-1\"\n  (( $# = 14\
    \ )) && echo \"$1\" || echo \"-1\"\n  (( $# = 15 )) && echo \"$1\" || echo \"\
    -1\"\n  (( $# = 16 )) && echo \"$1\" || echo \"-1\"\n  (( $# = 17 )) && echo \"\
    $1\" || echo \"-1\"\n  (( $# = 18 )) && echo \"$1\" || echo \"-1\"\n  (( $# =\
    \ 19 )) && echo \"$1\" || echo \"-1\"\n  (( $# = 20 )) && echo \"$1\" || echo\
    \ \"-1\"\n  (( $# = 21 )) && echo \"$1\" || echo \"-1\"\n  (( $# = 22 )) && echo\
    \ \"$1\" || echo \"-1\"\n  (( $# = 23 )) && echo \"$1\" || echo \"-1\"\n  (( $#\
    \ = 24 )) && echo \"$1\" || echo \"-1\"\n  (( $# = 25 )) && echo \"$1\" || echo\
    \ \"-1\"\n  (( $# = 26 )) && echo \"$1\" || echo \"-1\"\n  (( $# = 27 )) && echo\
    \ \"$1\" || echo \"-1\"\n  (( $# = 28 )) && echo \"$1\" || echo \"-1\"\n  (( $#\
    \ = 29 )) && echo \"$1\" || echo \"-1\"\n  (( $# = 30 )) && echo \"$1\" || echo\
    \ \"-1\"\n  (( $# = 31 )) && echo \"$1\" || echo \"-1\"\n  (( $# = 32 )) && echo\
    \ \"$1\" || echo \"-1\"\n  ", "\tlet \"side1=$1\"\n\tlet \"side2=$2\"\n\tlet \"\
    side3=$3\"\n\tlet \"sum1=$side1 + $side2\"\n\tlet \"sum2=$side2 + $side3\"\n\t\
    let \"sum3=$side3 + $side1\"\n\tif [[ \"$sum1\" -gt \"$sum2\" ]]\n\tthen echo\
    \ \"$sum1\"\n\telif [[ \"$sum2\" -gt \"$sum3\" ]]\n\tthen echo \"$sum2\"\n\telse\n\
    \techo \"$sum3\"\n\tfi"]
stop_tokens:
- "\n}"
