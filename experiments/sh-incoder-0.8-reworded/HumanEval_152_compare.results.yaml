language: sh
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local score_string=$1\n\
    \  local guesses_string=$2\n  local score\n  local guesses\n  local result\n\n\
    \  local index=0\n  local current_score=0\n  local current_guess=0\n  local current_result=0\n\
    \  \n  result=($(printf '%s' \"${guesses_string}\" | tr ' ' \"\\n\"))\n\n  for\
    \ guess in \"${result[@]}\"; do\n    score=${score_string}\n    guesses=$(printf\
    \ '%s' \"${guesses_string}\" | tr ' ' \"\\n\" | grep -n \"${guess}\")\n    \n\
    \    if [ \"${guesses}\" -gt 0 ]; then\n      guesses=${guesses#*:}\n      score=${score%/*}\n\
    \      score=${score#/*}\n      guesses=${guesses%/*}\n      guesses=$(printf\
    \ '%s' \"${guesses}\" | tr ' ' \"\\n\" | sort -n)\n    \n      if [ \"$score\"\
    \ -eq 0 ]; then\n        current_score=0\n      else\n        current_score=$(echo\
    \ \"$score - ${guesses}\" | bc)\n      fi\n\n      if [ \"$current_score\" -eq\
    \ 0 ]; then\n        current_guess=0\n      else\n        current_guess=$(( current_guess\
    \ + 1 ))\n      fi\n\n      if [ \"$current_guess\" -eq \"${guesses}\" ]; then\n\
    \        current_result=0\n      else\n        current_result=$(( current_result\
    \ + abs( \"$current_guess\" - \"$score\" ) ))\n      fi\n    fi\n    \n    result[$index]=$((\
    \ $current_result ))\n    (( index++ ))\n  done\n\n  result\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpq4o8t6t7.sh: line 35: [: 1:1: integer expression expected

    /tmp/tmpq4o8t6t7.sh: line 35: [: 2:2

    5:2

    6:-2: integer expression expected

    /tmp/tmpq4o8t6t7.sh: line 35: [: 3:3: integer expression expected

    /tmp/tmpq4o8t6t7.sh: line 35: [: 4:4: integer expression expected

    /tmp/tmpq4o8t6t7.sh: line 35: [: 2:2

    5:2

    6:-2: integer expression expected

    Usage: grep [OPTION]... PATTERNS [FILE]...

    Try ''grep --help'' for more information.

    /tmp/tmpq4o8t6t7.sh: line 35: [: : integer expression expected

    /tmp/tmpq4o8t6t7.sh: line 65: result: command not found

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal -r scores=\"$1\"\n\
    \tlocal -r guesses=\"$2\"\n\tlocal -r results=()\n\tlocal index\n\tlocal score\n\
    \tlocal guess\n\tlocal difference\n\tlocal result\n\tlocal count\n\tfor index\
    \ in \"${!scores[@]}\"; do\n\t\tscore=\"${scores[$index]}\"\n\t\tguess=$(echo\
    \ \"${guesses[$index]}\" | tr -d ' ')\n\t\tif [[ \"${guess}\" == \"${score}\"\
    \ ]]; then\n\t\t\tresult=\"\\\"0\\\"\"\n\t\telse\n\t\t\tdifference=$((${score}\
    \ - ${guess}))\n\t\t\tresult=\"${difference}\"\n\t\tfi\n\t\tcount=$((${index}))\n\
    \t\tresults[$count]=\"${result}\"\n\tdone\n\techo \"${results[@]}\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo6g5j7nl.sh: line 33: 1 2 3 4 5 1 - 12342-2: syntax error in expression
    (error token is "2 3 4 5 1 - 12342-2")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal scores guesses diff\n\
    \tscores=$1; guesses=$2\n\tdiff=$(echo \"$guesses\" |\n\t\twhile read -r score;\
    \ do\n\t\t\tlet diff=${score}-${score}\n\t\t\tdiff=$((${diff}<0)?${diff}+${diff}:0)\n\
    \t\t\tprintf \"\\\"$diff\\\"\\n\"\n\t\tdone)\n\techo \"$diff\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dun_f4o.sh: command substitution: line 28: syntax error near unexpected
    token `?${diff}+${diff}:0''

    /tmp/tmp1dun_f4o.sh: command substitution: line 28: `(${diff}<0)?${diff}+${diff}:0''

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\n\
    \    scores=\"$1\"; shift\n    guesses=\"$1\"; shift\n\n    local i\n    local\
    \ diff\n    for ((i=0; i<${#guesses}; ++i)); do\n        diff=$((${scores[i]}-${guesses[i]}))\n\
    \        diff=$((${diff}<0 ? ${diff}+${#scores} : ${diff}))\n\n        if ((diff\
    \ == 0)); then\n            diff=$(echo \"$scores[i]-$guesses[i]\" | bc)\n   \
    \         diff =$((diff<0 ? diff+${#scores} : diff))\n        fi\n\n        if\
    \ ((diff < 0)); then\n            guesses[i]=${scores[i]}\n        else\n    \
    \        guesses[i]=${guesses[i]}\n        fi\n    done\n    echo \"$guesses\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnlq2_s9o.sh: line 25: 1 2 3 4 5 1-1 2 3 4 2 -2: syntax error in
    expression (error token is "2 3 4 5 1-1 2 3 4 2 -2")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  if [[ ${#1} != ${#2} ]];\
    \ then\n    echo \"Expected ${#1} entries, got ${#2}.\"\n    return 1\n  fi\n\
    \  local i diff diff diff diff diff\n  diff=0\n  for (( i = 0; i < ${#1}; i++\
    \ )); do\n    if [[ -z ${1[i]} ]]; then\n      diff=$(expr ${diff} + 1)\n    else\n\
    \      diff=$(expr ${diff} + ${abs(${1[i]} - ${2[i]})})\n    fi\n  done\n  if\
    \ (( diff != ${#1} )); then\n    echo \"${#1} entries not equal: ${1}\"\n    return\
    \ 1\n  fi\n  echo \"${#1} entries equal.\"\n  return 0\n}\n\ncandidate() {\n \
    \   compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\
    \ 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\"\
    \ \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2\
    \ -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0\
    \ 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local score guess diff\
    \ match\n    score=\"$1\"\n    guess=\"$2\"\n    # Your code goes here\n    diff\
    \ <(echo \"${guess}\" | sort -u ) <(echo \"${score}\" | sort -u )\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local score guess numscores\
    \ numguesses\n  score=$1\n  guess=$2\n  numscores=$(echo \"$score\" | wc -w)\n\
    \  numguesses=$(echo \"$guess\" | wc -w)\n  diff=\n  for (( i = 0; i <= numscores\
    \ - numguesses; i++ )); do\n    ((diff += $(($(echo \"$score\" | sed 's/ /-/g'\
    \ | sed 's/^/0/' | sed 's/$/0/' | sed \"s/$((i*numguesses))/$((numguesses-i))/\"\
    )))))\n  done\n  echo \"$diff\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  A=$1\n  B=$2\n  # Split\
    \ our lists into the number of lists needed, and an \"offset\" so our looping\
    \ logic\n  # doesn't get thrown off by empty entries in our arrays.\n  # We want\
    \ as many lists as there are items in each list - but we don't want to have\n\
    \  # an extra list at the end that only contains empty strings\n  N=$(echo $A\
    \ | wc -w)\n  OFFSET=$((N-1))\n  # The current score is the difference between\
    \ our last guess and our last score.\n  S=$B\n  \n  results=()\n\n  for ((i=0;\
    \ i < ${#A[@]}; i++)); do\n    # The current guess, minus the OFFSET of the last\
    \ guess is our current score\n    S=$(echo $S | awk '{print $(NF-1)}')\n    \n\
    \    # Skip the empty string if necessary\n    if [ ${S} = \"\" ]; then\n    \
    \  continue\n    fi\n    # If the current score is empty, then no guesses were\
    \ correct, just return an empty list.\n    if [ $S = \"0\" ]; then\n      results=()\n\
    \      break\n    fi\n    # Check if the current guess is correct, by checking\
    \ its offset against our score.\n    if [ \"${S}\" != \"${A[$((OFFSET+i))]}\"\
    \ ]; then\n      # Because we subtracted the offset from S, we have to add it\
    \ back here to compare\n      # correctly.\n      results=(\"${results[@]}\" \"\
    $((${#A[@]} - OFFSET))\")\n      break\n    fi\n  done\n  # If we didn't find\
    \ the correct number of matches, then return a 0-offset list\n  if [ ${#results[@]}\
    \ -ne ${#A[@]} ]; then\n    results=(\"${results[@]}\" 0)\n  fi\n  echo \"${results[@]}\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\t# Sanitize and check input\n\
    \ttest \"$#\" -eq 2 || return 1;\n\tlocal scores guesses diffs correct\n\tscores=$(IFS=$'\\\
    n'; echo $1 |sed 's/^ *//;s/ /\\n/g;s/\\n$//')\n\tguesses=$(IFS=$'\\n'; echo $2\
    \ |sed 's/^ *//;s/ /\\n/g;s/\\n$//')\n\tdiff -s \"$guesses\" \"$scores\" |\n\t\
    \twhile read a b && read c d; do\n\t\t\tif [ -n \"$a\" -a -n \"$b\" -a -n \"$c\"\
    \ -a -n \"$d\" ]; then\n\t\t\t\tdiffs+=$(echo \"$a - $b\"|bc)\n\t\t\t\tcorrect+=$(echo\
    \ \"$c - $d\"|bc)\n\t\t\telse\n\t\t\t\techo \"$guesses\"\n\t\t\t\techo \"$scores\"\
    \n\t\t\t\techo \"$diffs\"\n\t\t\t\techo \"$correct\"\n\t\t\t\treturn 1\n\t\t\t\
    fi\n\t\tdone\n\treturn 0\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0\
    \ 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0\
    \ 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate\
    \ \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'diff: 1

    2

    3

    4

    2

    -2: No such file or directory

    diff: 1

    2

    3

    4

    5

    1: No such file or directory

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local array1 array2 array1len\
    \ $((${#1}+1)) array2len $((${#2}+1)) i array1ix array2ix diff ix diff diff diffx\
    \ diffy diffx diffy sum\n    for (( i = 0; i < ${#1}; i++ )); do\n        array1[ix]=${array1[$i]}\n\
    \        array2[ix]=${array2[$i]}\n    done\n    array1len=${#array1[@]}\n   \
    \ array2len=${#array2[@]}\n    if [ \"$array1len\" -ne \"$array2len\" ]; then\n\
    \        echo \"Number of elements in arrays 1 and 2 are unequal\"\n        return\
    \ 1\n    elif [ \"$array1len\" -eq 0 ]; then\n        echo \"The arrays 1 and\
    \ 2 are both empty\"\n        return 0\n    fi\n    for (( i = 0; i < ${#array1[@]};\
    \ i++ )); do\n        if [ \"$array1[$i\" == \"0\" ]; then\n            echo \"\
    Array 1 has an index value of 0\"\n            return 1\n        fi\n        if\
    \ [ \"$array2[$i\" == \"0\" ]; then\n            echo \"Array 2 has an index value\
    \ of 0\"\n            return 1\n        fi\n    done\n    for (( i = 0; i < ${#array1[@]};\
    \ i++ )); do\n        array1ix=$i\n        array2ix=$i\n        for (( j = 0;\
    \ j < ${#array2[@]}; j++ )); do\n            if [ \"$array1[$i\" == \"$array2[$j\"\
    \ ] && $array1ix < \"$j\" ]; then\n                diff=$((${array1[$i]} - ${array2[$j]}))\n\
    \                diffx=$((${array1ix} - ${j}))\n                diffy=$((${i}\
    \ - ${j}))\n            fi\n        done\n    done\n    diff=$((${array1[$array1ix]}\
    \ - ${array2[$array2ix]}))\n    diffx=$((${array1ix} - ${array2ix}))\n    diffy=$((${i}\
    \ - ${array2ix}))\n    diff ${array1[$array1ix]} ${array2[$array2ix]}\n    diff\
    \ $((${array1ix}+${diffy}+${diffx})) $((${array1ix}+${diffy}+${diffx}+${array1len}))\n\
    \    diff $((${array1ix}+${diffy}+${diffx})) $((${array1ix}+${diffy}+\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpirdxd_h2.sh: line 58: unexpected EOF while looking for matching
    `)''

    /tmp/tmpirdxd_h2.sh: line 74: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local score guess result\
    \ distance\n    local i j\n    score=${1:-''}\n    guess=${2:-''}\n    result='(\"\
    ${@:3}\")'\n    distance=0\n    for ((i=0; i<${#score[@]}; i++ )); do\n      \
    \  for ((j=0; j<${#guess[@]}; j++ )); do\n            # if the two scores match,\
    \ then we're done\n            if [[ ${score[i]} == ${guess[j]} ]]; then\n   \
    \             return 0\n            else\n                # otherwise find the\
    \ absolute distance between them\n                distance=$(( ${score[i]} - ${guess[j]}\
    \ ))\n            fi\n        done\n    done\n    # now return the final result\n\
    \    return \"${result[@]:${#result[@]}-1:1}\"\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppu8ww76x.sh: line 31: 1 2 3 4 5 1 - 1 2 3 4 2 -2 : syntax error
    in expression (error token is "2 3 4 5 1 - 1 2 3 4 2 -2 ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  mapfile -t arr1 < <(printf\
    \ '%s\\n' \"${@}\")\n  mapfile -t arr2 < <(printf '%s\\n' \"${@}\")\n\n  declare\
    \ -i cnt=0\n  declare -a result\n  for i in \"${!arr1[@]}\"; do\n    cnt=$((cnt+1))\n\
    \    case \"${arr2[$i]}\" in\n      *\" ${arr1[$i]} \"*)\n        result[$cnt]=\"\
    ${arr1[$i]} ${arr2[$i]}\"\n        ;;\n      *)\n        result[$cnt]=\"${arr2[$i]}\"\
    \n        ;;\n    esac\n  done\n\n  printf '[\"%s\"]\\n' \"${result[@]}\"\n}\n\
    \ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local a\n  local b\n  local\
    \ len\n  local diff\n  local difflen\n  local i\n  local result\n  local i1\n\
    \  local i2\n  local len2\n  local adiff\n  local bdiff\n  local l\n  local j\n\
    \  local adifflen\n  local bdifflen\n  local j1\n  local j2\n  local difflen1\n\
    \  local difflen2\n  local resultlen\n  local r\n  local s1\n  local s2\n  local\
    \ t1\n  local t2\n  local u\n  local v\n  local w\n  local z\n  local wdiff\n\
    \  local wdifflen\n  local wu\n  local x\n  local y\n  local a\n  local b\n  adiff=$(echo\
    \ -n \"$1\" | tr \" \" \"\")\n  bdiff=$(echo -n \"$2\" | tr \" \" \"\")\n  resultlen=$(echo\
    \ \"${#adiff}\" | bc)\n  difflen1=$(echo \"${#adiff}\" | cut -c1-1)\n  difflen2=$(echo\
    \ \"${#bdiff}\" | cut -c1-1)\n  result=$(echo \"${#adiff}\" | tr \" \" \"\")\n\
    \  result=$(echo \"${#bdiff}\" | tr \" \" \"\")\n  if [[ ${#adiff} -gt ${#bdiff}\
    \ ]]; then\n    len2=$(echo \"${#adiff}\" | bc)\n    len1=$(echo \"${#bdiff}\"\
    \ | bc)\n    adifflen=${len2}\n    bdifflen=${len1}\n  else\n    len1=$(echo \"\
    ${#adiff}\" | bc)\n    len2=$(echo \"${#bdiff}\" | bc)\n    adifflen=${len1}\n\
    \    bdifflen=${len2}\n  fi\n  for ((i = 1; i <= ${#adiff}; i++)); do\n    a=$(echo\
    \ \"${adiff}\" | cut -c$(( ${i} - 1 ))- 1)\n    b=$(echo \"${bdiff}\" | cut -c$((\
    \ ${i} - 1 ))- 1)\n    if [[ ${result} = \"${a}\" ]]; then\n      result=$(( ${result}\
    \ - 1 ))\n      adifflen=$(( ${adifflen} - 1 ))\n    else\n      result=$(( ${result}\
    \ + 1 ))\n      adifflen=$(( ${adifflen} + 1 ))\n    fi\n  done\n  for ((\n}\n\
    \ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbplpxbwn.sh: line 84: unexpected EOF while looking for matching
    `)''

    /tmp/tmpbplpxbwn.sh: line 100: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local score guess\n  for\
    \ score in \"${@:2}\"; do\n    local guess=$(echo \"$score\" | sed -e \"s/ /\\\
    n/g\")\n    echo \"$score\" \"$guess\"\n  done\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local i j\n    local\
    \ arr arr1\n    local len1 len2\n    local score guesses\n    local diff\n   \
    \ local j\n    arr=( $1 )\n    arr1=( $2 )\n    len1=${#arr[@]}\n    len2=${#arr1[@]}\n\
    \    score=0\n    guesses=()\n    diff =\"\"\n    for (( i=1; i<=$(( len1-1 ));\
    \ i++ )); do\n        if [ ${arr[i]} -ne ${arr1[i]} ]; then\n            score=$((\
    \ $score + ${arr[i]} - ${arr1[i]} ))\n            guesses=( \"${guesses[@]}\"\
    \ $i )\n        fi\n    done\n    for (( j=1; j<=$(( len2-1 )); j++ )); do\n \
    \       if [ ${arr1[j]} -ne ${arr1[j]} ]; then\n            diff=$(( $diff + ${arr1[j]}\
    \ - ${arr1[j]} ))\n            guesses=( \"${guesses[@]}\" $j )\n        fi\n\
    \    done\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'diff: missing operand after ''=''

    diff: Try ''diff --help'' for more information.

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses result\
    \ score guess i j\n  scores=( $1 )\n  guesses=( $2 )\n  result=( $3 )\n  score=${scores[i]}\n\
    \  guess=${guesses[i]}\n  echo -n \"$score  $guess\"\n  for (( j=0; j<=$(( ${#scores[@]}\
    \ - 1 )); j++ )); do\n    (( result[j] = $(( ${result[j]} - ${score} )) )) ||\
    \ return $j\n  done\n  for (( j=0; j<=$(( ${#guesses[@]} - 1 )); j++ )); do\n\
    \    (( guesses[j] = $(( ${guesses[j]} - ${guess} )) )) || return $j\n  done\n\
    \  return 0\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores=($(echo\
    \ $1 $2 | tr ' ' ' '))\n    local guesses=($(echo $3 $4 | tr ' ' ' '))\n    local\
    \ length=${#scores[@]}\n    local results=()\n    for (( i = 0; i < length; i++\
    \ )); do\n        results+=($(echo $((${guesses[i]}${scores[i]})) $((${guesses[i+1]}${scores[i+1]}))\
    \ | sed 's/ /+/g' | bc | tr ' +-' '+-' | tr -d '.'))\n    done\n    echo ${results[@]}\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local guesses scores\
    \ score\n    scores=($(echo \"$1\" | tr -s ' '))\n    guesses=($(echo \"$2\" |\
    \ tr -s ' '))\n    local diff result\n    local j k\n    for j in \"${!guesses[@]}\"\
    ; do\n        if [[ \"$scores[j]\" == \"0\" ]]; then\n            result+=(\"\
    $guesses[j]\" \"0\")\n        elif [ \"$guesses[j]\" != \"$scores[j]\" ]; then\n\
    \            diff=$(( \"$guesses[j]\" - \"$scores[j]\" ))\n            result+=(\"\
    $guesses[j]\" \"$diff\")\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\
    \ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tfor i in $(seq 1 $((${#1})));\
    \ do\n\t\tif [ ${!i} -ne ${!i} ] ; then\n\t\t\techo \"$((${!i} - ${!i}))\"\n\t\
    \telse\n\t\t\techo \"0\"\n\t\tfi\n\tdone\n}\n\ncandidate() {\n    compare \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\"\
    ) = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") =\
    \ \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzxovuyv8.sh: line 19: [: too many arguments

    /tmp/tmpzxovuyv8.sh: line 19: [: too many arguments

    /tmp/tmpzxovuyv8.sh: line 20: - : syntax error: operand expected (error token
    is "- ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local score guess\n \
    \   local -n scoreArray=\"$1\" -n guessArray=\"$2\"\n    local diff diffIndex\
    \ diffs diffStr\n\n    # create an array of the scores and guesses\n    local\
    \ -a scores guesses i=0 \n    while read -r score guess; do\n        scores[$i]=\"\
    $score\"\n        guesses[$i]=\"$guess\"\n        ((i++))\n    done <<<\"$scoreArray\"\
    \ <<<\"$guessArray\"\n\n    diffs=()\n    diffIndex=0\n    for ((i=0; i<$#scores;\
    \ i++)); do\n        local diff diffStr\n        diffStr=$(diff --brief \"$guesses[i]\"\
    \ \"$scores[i]\")\n        if [[ \"$diffStr\" != \"\" ]]; then\n            diffs+=($diffIndex)\n\
    \            diffStr=\"${diffStr#* [}\"\n            diffStr=\"${diffStr%]}\"\n\
    \            diffIndex=$((diffIndex+1))\n        fi\n    done\n    echo \"${diffs[*]}\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpj_cxne4t.sh: line 19: local: `1 2 3 4 5 1'': invalid variable name
    for name reference

    /tmp/tmpj_cxne4t.sh: line 19: local: `-n'': not a valid identifier

    /tmp/tmpj_cxne4t.sh: line 19: local: `1 2 3 4 2 -2'': invalid variable name for
    name reference

    /tmp/tmpj_cxne4t.sh: line 32: ((: i<2scores: value too great for base (error token
    is "2scores")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local a b n d\n  a=($1)\n\
    \  b=($2)\n  n=${#a[@]}\n  d=${#b[@]}\n  local i j\n  local a0 a1 b0 b1 diff diff0\
    \ diff1 diff2 diff3 diff4\n  local i0 i1 j0 j1 diff diff0 diff1 diff2 diff3 diff4\n\
    \  local res\n  i=0\n  j=0\n  while [[ $i -le $n && $j -le $d ]]; do\n    [[ $a[$i]\
    \ == $b[$j] ]] || return \"$(compare2 $a[$i] $b[$j] $n $d)\"\n    let ++i\n  \
    \  let ++j\n  done\n  if [[ $i -le $n ]]; then\n    for i in $(seq 0 $((n - 1)))\n\
    \    do\n      diff=$(awk -v n=$n -v d=$d -v i=\"$i\" 'BEGIN{if($i==n){a=$(awk\
    \ -v n=$n -v d=$d -v j=\"$i\" 'BEGIN{for(k=j;k<=d;k++){a[k]=a[$k]}END{print a[$j]}'\
    \ <<<\"0 $n $n+1 $n $n+1 $n $n $n $n $n $n $n+1 $n $n+1 $n $n+1 $n $n $n+1 $n\
    \ $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n\
    \ $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1\
    \ $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n $n+1\
    \ $n $n+1 $n $n+1 $n $n+1 $n $n+1 $n \n}\n\ncandidate() {\n    compare \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\"\
    ) = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") =\
    \ \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg45kwvqf.sh: line 37: unexpected EOF while looking for matching
    `''''

    /tmp/tmpg45kwvqf.sh: line 53: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal a=\"$1\" b=\"$2\"\
    \n\t\n\tlocal max=${#a}\n\tlocal min=${#b}\n\n\tlocal i=0 j=0\n\tlocal result\n\
    \twhile [ $i -lt $min ]; do\n\t\tif [ \"${a[$i]}\" = \"${b[$j]}\" ]; then\n\t\t\
    \tresult+=(\"${b[$j]}\")\n\t\t\t((i++))\n\t\t\t((j++))\n\t\telif [ $i -lt $max\
    \ ] && [ \"${a[$i]}\" = \"${b[$j]}\" ]; then\n\t\t\tresult+=(\"${a[$i]}\")\n\t\
    \t\t((i++))\n\t\telse\n\t\t\tresult+=(\"${a[$i]}\")\n\t\t\t((i++))\n\t\t\tresult+=(\"\
    ${b[$j]}\")\n\t\t\t((j++))\n\t\tfi\n\tdone\n\t\n\tfor i in $(seq 0 $((${#b} -\
    \ 1)); do\n\t\tresult+=(\"${b[$i]}\")\n\tdone\n\t\n\tfor i in $(seq 0 $((${#a}\
    \ - 1)); do\n\t\tresult+=(\"${a[$i]}\")\n\tdone\n\n\tresult\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk8wky52y.sh: line 45: unexpected EOF while looking for matching
    `)''

    /tmp/tmpk8wky52y.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses\n\
    \  scores=${1:-}\n  guesses=${2:-}\n  local scores guesses score guess diff diff\
    \ scores guesses score guess diff diff scores guesses score guess diff diff scores\
    \ guesses score guess diff diff scores guesses score guess diff diff scores guesses\
    \ score guess diff diff scores guesses score guess diff diff scores guesses score\
    \ guess diff diff scores guesses score guess diff diff scores guesses score guess\
    \ diff diff scores guesses score guess diff diff scores guesses score guess diff\
    \ diff scores guesses score guess diff diff scores guesses score guess diff diff\
    \ scores guesses score guess diff diff scores guesses score guess diff diff scores\
    \ guesses score guess diff diff scores guesses score guess diff diff scores guesses\
    \ score guess diff diff scores guesses score guess diff diff scores guesses score\
    \ guess diff diff scores guesses score guess diff diff scores guesses score guess\
    \ diff diff scores guesses score guess diff diff scores guesses score guess diff\
    \ diff scores guesses score guess diff diff scores guesses score guess diff diff\
    \ scores guesses score guess diff diff scores guesses score guess diff diff scores\
    \ guesses score guess diff diff scores guesses score guess diff diff scores guesses\
    \ score guess diff diff scores guesses score guess diff diff scores guesses score\
    \ guess diff diff scores guesses score guess diff diff scores guesses score guess\
    \ diff diff scores guesses score guess diff diff scores guesses score guess diff\
    \ diff scores guesses score guess diff diff scores guesses score guess diff diff\
    \ scores guesses score guess diff diff scores guesses score guess diff diff scores\
    \ guesses score guess diff diff scores guesses score guess diff diff scores guesses\
    \ score guess diff diff scores guesses score guess diff diff scores guesses score\
    \ guess diff diff scores guesses score guess diff diff scores guesses score guess\
    \ diff diff scores guesses score guess diff diff scores guesses score guess diff\
    \ diff scores guesses score guess diff diff scores guesses score guess diff diff\
    \ scores guesses score guess diff diff scores guesses score guess diff diff scores\
    \ guesses score guess diff diff scores guesses score guess diff diff scores guesses\
    \ score guess diff diff scores guesses score guess diff diff scores guesses score\
    \ guess diff diff scores guesses score guess diff \n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\n\
    \    read -a scores < <(tr -s \" \" <<< \"$1\")\n    read -a guesses < <(tr -s\
    \ \" \" <<< \"$2\")\n    local i=0 j=0\n    local result=()\n    while ((i < ${#scores[@]}));\
    \ do\n        local scores-element=${scores[i]}\n        local guesses-element=${guesses[i]}\n\
    \        if ((${guesses-element} == ${scores-element})); then\n            result+=(\"\
    0\")\n        else\n            local diff=${guesses-element}-${scores-element}\n\
    \            if ((diff < 0)); then\n                result+=(\"$diff\")\n    \
    \        else\n                result+=(\"$diff\")\n            fi\n        fi\n\
    \        ((i++))\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5j6dvodv.sh: line 24: local: `scores-element=1'': not a valid identifier

    /tmp/tmp5j6dvodv.sh: line 25: local: `guesses-element=1'': not a valid identifier

    /tmp/tmp5j6dvodv.sh: line 24: local: `scores-element=2'': not a valid identifier

    /tmp/tmp5j6dvodv.sh: line 25: local: `guesses-element=2'': not a valid identifier

    /tmp/tmp5j6dvodv.sh: line 24: local: `scores-element=3'': not a valid identifier

    /tmp/tmp5j6dvodv.sh: line 25: local: `guesses-element=3'': not a valid identifier

    /tmp/tmp5j6dvodv.sh: line 24: local: `scores-element=4'': not a valid identifier

    /tmp/tmp5j6dvodv.sh: line 25: local: `guesses-element=4'': not a valid identifier

    /tmp/tmp5j6dvodv.sh: line 24: local: `scores-element=5'': not a valid identifier

    /tmp/tmp5j6dvodv.sh: line 25: local: `guesses-element=2'': not a valid identifier

    /tmp/tmp5j6dvodv.sh: line 24: local: `scores-element=1'': not a valid identifier

    /tmp/tmp5j6dvodv.sh: line 25: local: `guesses-element=-2'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\t# $1 is length $2 list\n\
    \tlen1=$(awk \"{print length($1)}\" \"${2}\")\n\t# $1 is length $2 list\n\tlen2=$(awk\
    \ \"{print length($1)}\" \"${1}\")\n\t\n\tlet \"max=$len1+len2-1\"\n\n\tfor i\
    \ in $(seq 0 \"$max\"); do\n\t\techo \"${2}[$i]=${1}[$i]\"\n\t\tif [[ \"${1}[$i]}\"\
    \ == \"${2}[$i]\" ]]; then\n\t\t\techo \"0\"\n\t\telse\n\t\t\techo \"$(echo \"\
    ${1}[$i]-${2}[$i]\" | bc)\"\n\t\tfi\n\tdone\n}\n\ncandidate() {\n    compare \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4\
    \ 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0\
    \ 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2\
    \ 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'awk: fatal: cannot open file `1 2 3 4 2 -2'' for reading (No such file
    or directory)

    awk: fatal: cannot open file `1 2 3 4 5 1'' for reading (No such file or directory)

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    declare -a arr1 arr2\n\
    \    arr1=( ${( echo \"$1\" | tr -s ' ' )}; )\n    arr2=( ${( echo \"$2\" | tr\
    \ -s ' ' )}; )\n    \n    # get the lengths of both arrays\n    len1=${#arr1[@]}\n\
    \    len2=${#arr2[@]}\n\n    # loop through both arrays until we run out of them\n\
    \    local i\n    for i in $(seq 0 $(( len1 - 1 ))); do\n        if [[ ${arr1[i]}\
    \ == ${arr2[i]} ]]; then\n            arr2[$i]=0\n            break\n        else\n\
    \            arr2[$i]=$(echo \"${arr2[$i]} - ${arr1[$i]}\" | bc)\n        fi\n\
    \    done\n    for i in $(seq 0 $(( len2 - 1 ))); do\n        if [[ ${arr2[i]}\
    \ == ${arr1[i]} ]]; then\n            arr1[$i]=0\n            break\n        else\n\
    \            arr1[$i]=$(echo \"${arr1[$i]} - ${arr2[$i]}\" | bc)\n        fi\n\
    \    done\n\n    arr=($(echo \"${arr1[@]}\" \"${arr2[@]}\" | tr ' ' \"\\n\"))\
    \ # turn them back into an array to return\n    printf '%s\\n' \"${arr[@]}\" #\
    \ print them back out with quotes\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") =\
    \ \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"\
    0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj_m2r9jw.sh: line 19: syntax error near unexpected token `;''

    /tmp/tmpj_m2r9jw.sh: line 19: `    arr1=( ${( echo "$1" | tr -s '' '' )}; )''

    /tmp/tmpj_m2r9jw.sh: line 20: syntax error near unexpected token `;''

    /tmp/tmpj_m2r9jw.sh: line 20: `    arr2=( ${( echo "$2" | tr -s '' '' )}; )''

    /tmp/tmpj_m2r9jw.sh: line 27: local: can only be used in a function

    /tmp/tmpj_m2r9jw.sh: line 47: syntax error near unexpected token `}''

    /tmp/tmpj_m2r9jw.sh: line 47: `}''

    '
  stdout: '

    '
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  # Your code here\n  declare\
    \ -a scores\n  declare -a guesses\n\n  read -r -a scores < <(echo $1)\n  read\
    \ -r -a guesses < <(echo $2)\n\n  # Your code here\n  mapfile -t guesses <<<$(echo\
    \ $guesses | tr ' ' ',')\n  mapfile -t scores <<<$(echo $scores | tr ' ' ',')\n\
    \n  # Your code here\n  declare -a result\n\n  for i in $(seq 0 $((${#guesses[*]}\
    \ - 1))); do\n    if [ ${guesses[i]} == ${scores[i]} ]; then\n        result[i]=\"\
    ${guesses[i]}\"\n    fi\n  done\n\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\
    \ 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\"\
    \ \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2\
    \ -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0\
    \ 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local score guess=($1\
    \ $2) best=0 best_score=0 best_guess=$(echo $1 | sed 's/ /+/g' |sort -rn |head\
    \ -1)\n    for ((i=0;i<$#;i++)); do\n        if [ ! -z \"${guess[i]}\" ] && [\
    \ \"$guess[i]\" -gt \"$score\" ]; then \n            best_score=$score\n     \
    \       best_guess=$(echo $guess[i] | sed 's/ /+/g' |sort -rn |head -1)\n    \
    \    fi\n        score=$(( $score + ${guess[i]} ))\n    done\n    [ $best_score\
    \ -eq $score ] && [ \"$best_guess\" -eq \"$best\" ] && echo \"$best_score\" ||\
    \ echo \"$best_score-$best\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5i7klh8s.sh: line 20: [: 1[i]: integer expression expected

    /tmp/tmp5i7klh8s.sh: line 20: [: 1[i]: integer expression expected

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal -n a=( \"$1\" )\n\
    \tlocal -n b=( \"$2\" )\n\tlocal x\n\tlocal y\n\tlocal i\n\tlocal j\n\tlocal answer\n\
    \tlocal guesses\n\tlocal scores\n\tlocal correct\n\tlocal difference\n\tlocal\
    \ diff\n\tlocal i\n\n\t# We need to know how many guesses we have. \n\t# The best\
    \ case scenario would be a 0 guess (we have the result of the last match)\n\t\
    # so we could use an if statement, but that would get really messy really fast\n\
    \t# so let's use a while loop. \n\tguesses=0\n\tscores=( \"$2\" )\n\tcorrect=(\
    \ \"0\" )\n\n\twhile (( \"$#\" )); do\n\t\tif [ \"$1\" ]\n\t\tthen\n\t\t\tguesses=\"\
    $guesses\"\n\t\telse\n\t\t\tguesses=\"$guesses\"\n\t\t\tbreak\n\t\tfi\n\t\tshift\n\
    \tdone\n\n\t# If the number of guesses is zero, we know the result is the last\
    \ element.\n\t# In this case we know that the result is the last element as well.\n\
    \tif (( \"$guesses\" == \"0\" )); then\n\t\tguesses=\"1\"\n\tfi\n\n\tfor (( i=0;\
    \ i<=\"$guesses\"; i++ ));do\n\t\tguesses=\"$guesses\"\n\t\tscores=( \"$scores\"\
    \ )\n\t\tcorrect=( \"0\" )\n\t\tx=( \"$a\" [i] )\n\t\ty=( \"$b\" [i] )\n\n\t\t\
    while (( \"$#\" )); do\n\t\t\tif [ \"$x\" ] \n\t\t\tthen\n\t\t\t\tx=\"$x\"\n\t\
    \t\t\tbreak\n\t\t\telif [ \"$y\" ] \n\t\t\tthen\n\t\t\t\ty=\"$y\"\n\t\t\t\tbreak\n\
    \t\t\tfi\n\t\t\tshift\n\t\tdone\n\n\t\tif [ \"$x\" == \"$y\" ] \n\t\tthen\n\t\t\
    \tcorrect=\"1\"\n\t\tfi\n\n\t\tdifference=$( echo \"$y - $x\" | bc )\n\t\tif [\
    \ \"$difference\" == \"0\" ]\n\t\tthen\n\t\t\tdifference=\"1\"\n\t\tfi\n\n\t\t\
    diff=\"$difference\"\n\t\tif [ \"$correct\" == \"0\" ]\n\t\tthen\n\t\t\tdiff=\"\
    $diff\"\n\t\tfi\n\n\t\tanswer=\"$diff\"\n\tdone\n\n\techo \"$answer\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyjp0f_c7.sh: line 18: local: a: reference variable cannot be an
    array

    /tmp/tmpyjp0f_c7.sh: line 19: local: b: reference variable cannot be an array

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal scores=$(echo \"\
    $1\" | tr ' ' '\\n' | sort -n)\n\tlocal guesses=$(echo \"$2\" | tr ' ' '\\n' |\
    \ sort -n)\n\tlocal result\n\tlocal i\n\tresult=()\n\tfor i in $(seq 0 $((${#scores[@]}-1))\
    \ ); do\n\t\tresult[$i]=$(echo \"${guesses[$i]}\" | cut -d ' ' -f 1)\n\tdone\n\
    \t\n\tfor i in $(seq 0 $((${#scores[@]}-1)) ); do\n\t\tif [[ ${result[$i]} !=\
    \ ${scores[$i]} ]]; then\n\t\t\tresult[$i]=$(echo \"${result[$i]} - ${scores[$i]}\"\
    \ | bc)\n\t\tfi\n\tdone\n\t\n\tfor i in $(seq 0 $((${#scores[@]}-1)) ); do\n\t\
    \tif [[ ${result[$i]} -eq ${scores[$i]} ]]; then\n\t\t\tresult[$i]=$(echo \"${result[$i]}\
    \ - ${scores[$i]}\" | bc)\n\t\tfi\n\tdone\n\t\n\techo ${result[@]}\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuomv054s.sh: line 34: [[: -2

    1

    2

    2

    3

    3

    1

    2

    3

    4

    5: syntax error in expression (error token is "1

    2

    2

    3

    3

    1

    2

    3

    4

    5")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses result\n\
    \  scores=$1\n  guesses=$2\n  result=()\n  for ((i=0; i < ${#guesses}; i++));\
    \ do\n    res=$(echo \"$guesses[i]\" | grep -qE '^-?[0-9]+$') && res=\"${res%\
    \ *}\"\n    if [[ $res ]]; then\n      result[i]=\"0\"\n    else\n      result[i]=\"\
    ${guesses[i]}\"\n    fi\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\
    \ 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\"\
    \ \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2\
    \ -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0\
    \ 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\t# split into single words\
    \ and strip space\n\tlocal -a scores=($1)\n\tlocal -a guesses=(${(s:;:)$2//[[:space:]]})\n\
    \tlocal -a offset=(${#scores[@]} + ${#guesses[@]} - 1)\n\t\n\t# check each guess\
    \ against corresponding score\n\tlocal idx score_i score_j offset_i offset_j\n\
    \tfor ((idx = 0; idx < ${#scores[@]}; ++idx)); do\n\t\tscore_i=\"${scores[idx]}\"\
    \n\t\tscore_j=\"${guesses[idx]}\"\n\t\tfor ((offset_i = 0; offset_i < ${#score_i};\
    \ ++offset_i)); do\n\t\t\t# find score's index (index - 1) in guesses\n\t\t\t\
    offset_j=\"${guesses[offset_i - 1]}\"\n\t\t\t\n\t\t\t# skip if guess is correct\
    \ or already wrong\n\t\t\tif [ \"$score_i\" -eq \"$score_j\" ] || [ \"$score_i\"\
    \ -eq \"0\" ] && [ \"$offset_j\" -eq \"$offset_i\" ]; then\n\t\t\t\tcontinue\n\
    \t\t\tfi\n\t\t\t\n\t\t\t# check if score and guess have same offset (no overlap)\n\
    \t\t\tif [ \"$score_i\" -eq \"0\" ] && [ \"$offset_i\" -eq \"$offset_j\" ]; then\n\
    \t\t\t\toffset[idx] += \"${offset_j - offset_i}\"\n\t\t\t\tcontinue\n\t\t\tfi\n\
    \t\t\t\n\t\t\t# check if score and guess have same offset and overlap (guess is\
    \ too close)\n\t\t\tif [ \"$score_i\" -eq \"0\" ] && [ \"$offset_i\" -lt \"$offset_j\"\
    \ ]; then\n\t\t\t\toffset[idx] += \"${#score_j}\"\n\t\t\t\tcontinue\n\t\t\tfi\n\
    \t\t\t\n\t\t\t# check if score and guess have same offset and overlap (guess is\
    \ too far from score)\n\t\t\tif [ \"$score_i\" -eq \"0\" ] && [ \"$offset_i\"\
    \ -gt \"$offset_j\" ]; then\n\t\t\t\toffset[idx] += \"${#score_i}\"\n\t\t\t\t\
    continue\n\t\t\tfi\n\t\tdone\n\tdone\n\t\n\t# return offset array\n\tlocal retval\n\
    \tlocal i j\n\tfor ((i = 0; i <= ${#offset[@]}; ++i)); do\n\t\tif [[ -z ${retval:=offset[i]}\
    \ ]]; then\n\t\t\tretval=offset[i]\n\t\tfi\n\tdone\n\t\n\treturn \"${retval//\\\
    \"}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[\
    \ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1\
    \ 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphphhvzp9.sh: line 20: ${(s:;:)$2//[[:space:]]}: bad substitution

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local guesses scores\n\
    \  local max_score\n  local diffs\n  local max_diffs\n  local max_diff\n  local\
    \ index\n  local result\n\n  # read in guesses\n  guesses=$(echo $1 | tr -s '\
    \ ' ,) \n\n  # read in scores\n  scores=$(echo $2 | tr -s ' ' ,) \n\n  # get max\
    \ score\n  max_score=$(echo $scores | sort -r | head -1)\n\n  # get diff between\
    \ max score and each score\n  diffs=$(echo $scores | sort -r | awk '{print $2\
    \ - $1}')\n\n  # get max diff\n  max_diff=$(echo $diffs | sort -r | head -1)\n\
    \n  # get max diffs\n  max_diffs=$(echo $diffs | sort -r | awk '{print $2}')\n\
    \n  # loop through all guesses\n  for index in $(seq 0 $((${#guesses} - 1)))\n\
    \  do\n    # check if current guess is the correct one\n    if [ \"$max_diff\"\
    \ = \"$max_diffs\" ]\n    then\n      # correct guess\n      result=\"$index 0\"\
    \n    else\n      # wrong guess\n      result=\"$index $(echo $max_score - $diffs\
    \ | awk '{print $1 \" \" $2}')\"\n    fi\n\n    # output the result\n    echo\
    \ \"$result\"\n  done\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  # use \"read -r\" to disable\
    \ bash magic handling of backslashes in strings.\n  read -r -a scores <<< \"$1\"\
    \n  read -r -a guesses <<< \"$2\"\n  results=()\n  for i in \"${!guesses[@]}\"\
    ; do\n    if [[ \"$guesses[i]\" == \"${scores[i]}\" ]]; then\n      results[$i]=\"\
    0\"\n    elif [[ \"$guesses[i]\" > \"${scores[i]}\" ]]; then\n      results[$i]=\"\
    1\"\n    else\n      results[$i]=\"${#scores[i]}-${#scores[i]}\"\n    fi\n  done\n\
    \  echo \"${results[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0\
    \ 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0\
    \ 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate\
    \ \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local a b\n    local\
    \ score scores scores\n    local guess guesses guesses\n    local diff diffs diffs\n\
    \    local i\n    local j\n    local m\n    local result\n    local s\n    local\
    \ u\n    local v\n    local diff\n    local a1 b1 c1\n    local score scores scores\n\
    \    local guess guesses guesses\n    local diff diffs diffs\n    local i\n  \
    \  local j\n    local m\n    local result\n    local s\n    local u\n    local\
    \ v\n    local diff\n\n    read -r -a a <<< \"$1\"\n    read -r -a b <<< \"$2\"\
    \n    local len=${#a[@]}\n\n    local c\n    local k\n    local i\n    local j\n\
    \    local m\n    local result\n\n    declare -a scores\n    scores=($(for ((i=1;\
    \ i<=len; i++)) do (printf %s \"-${a[i]}\") ; done))\n    scores=\"${scores[@]:1}\"\
    \n    declare -a guesses\n    guesses=($(for ((i=1; i<=len; i++)) do (printf %s\
    \ \"$a[$i]\") ; done))\n    guesses=\"${guesses[@]:1}\"\n\n    for ((i=0;i<len;i++))\
    \ do\n        if [ \"$a\" == \"$b\" ] ; then\n            guesses[i]=0\n     \
    \   else\n            diff=0\n            a1=\"${a[i]}\"\n            b1=\"${b[i]}\"\
    \n            c1=\"${scores[i]}\"\n            for ((j=0;j<len;j++)) do\n    \
    \            if [ \"$a\" == \"$b\" ] ; then\n                    diff=\"$diff$c1\"\
    \n                    guesses[j]=${guesses[j]%${guesses[j]#-*}}\n            \
    \    else\n                    diff=\"$diff${guesses[j]%${guesses[j]#-*}}\"\n\
    \                fi\n            done\n            guesses[i]=$diff\n        fi\n\
    \    done\n\n    diffs=(${guesses[@]})\n    for ((i=0;i<len;i++)) do\n       \
    \ diffs[i]=$(expr ${diffs[i]} - $guesses[i])\n    done\n    diffs=(${diffs[@]})\n\
    \    for ((i=0;i<len;i++)) do\n        if [ \"$diffs[i]\" -gt 0 ] ; then\n   \
    \         result=$result\"\\\"$diffs[i]\\\"\"\n        else\n            result=$result\"\
    \\\"0\"\n        fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'expr: non-integer argument

    expr: non-integer argument

    expr: non-integer argument

    expr: non-integer argument

    expr: non-integer argument

    expr: non-integer argument

    /tmp/tmp8lkhegbo.sh: line 87: [: [i]: integer expression expected

    /tmp/tmp8lkhegbo.sh: line 87: [: [i]: integer expression expected

    /tmp/tmp8lkhegbo.sh: line 87: [: [i]: integer expression expected

    /tmp/tmp8lkhegbo.sh: line 87: [: [i]: integer expression expected

    /tmp/tmp8lkhegbo.sh: line 87: [: [i]: integer expression expected

    /tmp/tmp8lkhegbo.sh: line 87: [: [i]: integer expression expected

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses\n\n\
    \  scores=\"${1// /}\"\n  guesses=\"${2// /}\"\n\n  # This variable keeps track\
    \ of how many matches have been made.\n  local count=0\n\n  # Iterate through\
    \ each of the guesses and count how many are correct\n  for (( i=1; i<${#guesses};\
    \ i++ )); do\n    # When the first item is greater than the second, we add 1 to\
    \ the counter\n    if [[ ${guesses[$i]} -gt ${scores[$i]} ]]; then\n      (( count+=1\
    \ ))\n    else\n      # The first item is less than the second, so we need to\
    \ subtract 1 from the counter\n      (( count-=1 ))\n    fi\n  done\n  \n  echo\
    \ $count\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses\n\
    \  IFS=' ' read -r -a scores <<< \"$1\"\n  IFS=' ' read -r -a guesses <<< \"$2\"\
    \n  results=()\n  for ((i=0; i < ${#scores[@]}; i++)); do\n    if [[ ${scores[i]}\
    \ == ${guesses[i]} ]]; then\n      results[$i]=0\n    elif (( ${scores[i]} > ${guesses[i]}\
    \ )); then\n      results[$i]=${guesses[i]}-${scores[i]}\n    else\n      results[$i]=${scores[i]}-${guesses[i]}\n\
    \    fi\n  done\n  printf '%s\\n' \"${results[@]}\"\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: -1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local guesses scores\n\
    \  read -p \"Guesses? \" guesses\n  read -p \"Scores? \" scores\n  while (( ${#guesses}\
    \ )) || (( ${#scores} )) ; do\n    local -i guess score\n    guess=$(echo $guesses\
    \ | sed 's/ /[[:space:]]+/g' | sort -u)\n    score=$(echo $scores | sed 's/ /[[:space:]]+/g'\
    \ | sort -u)\n    if (( ${#guess} > ${#score} )) ; then\n      echo \"Too many\
    \ guesses given, exiting\"\n      return 1\n    fi\n    guesses=$(echo $guesses\
    \ | sed 's/[[:space:]]//g')\n    scores=$(echo $scores | sed 's/[[:space:]]//g')\n\
    \  done\n  local max\n  for (( i = 0; i < ${#score}; i++ )) ; do\n    if (( ${#guesses}\
    \ < 1 )) ; then\n      echo \"Too few guesses given, exiting\"\n      return 1\n\
    \    fi\n    if (( ${#scores} < 1 )) ; then\n      echo \"Too few scores given,\
    \ exiting\"\n      return 1\n    fi\n    max=$(echo -n \"max(${#score},${#guesses})\"\
    \ | bc)\n    guesses=$(echo $guesses | sed 's/'$i'/'$i')\n    scores=$(echo $scores\
    \ | sed 's/'$i'/'$i')\n    echo -n \"${i}: \"\n    for (( j = 0; j < $max; j++\
    \ )) ; do\n      (( diff < 0 ? diff = -diff : $diff ))\n      diff=$(echo $diff\
    \ | bc )\n      diff=${diff:0:1}\n      (( diff < 0 ? diff = -diff : $diff ))\n\
    \      if (( guess == $j && score == $j )) ; then\n        echo 0\n      else\n\
    \        echo \"$diff\"\n      fi\n    done\n    echo\n  done\n  echo \n  return\
    \ 0\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate\
    \ \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"\
    1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3\
    \ 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=16 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=29 encoding='utf-8'>
  timestamp: 1660055399
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local a b\n  local i\n\
    \  local -a r\n  a=($1)\n  b=($2)\n  r=$(bc <<<\"scale=3; ${#a[@]}-${#b[@]}\"\
    )\n  for ((i=0; i < $r; i++)); do\n    if [ \"${a[i]}\" -gt \"${b[i]}\" ]; then\n\
    \      r[i]=0\n    elif [ \"${a[i]}\" -lt \"${b[i]}\" ]; then\n      r[i]=${a[i]}-${b[i]}\n\
    \    else\n      r[i]=0\n    fi\n  done\n  printf '[\"%s\"]' \"${r[@]}\"\n}\n\n\
    candidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\n\
    \    local i j diff score\n    \n    # Strip leading spaces from scores\n    scores=${1//+(\
    \ )}\n    guesses=${2//+( )}\n    \n    # Sort both arrays in descending order\n\
    \    # This is done to guarantee a correct first pass in order of the array\n\
    \    sort -n -r ${scores} > scores\n    sort -n -r ${guesses} > guesses\n    \n\
    \    # Iterate over all elements and store each difference between guess and score\n\
    \    # Note: This should NOT be done as a for loop, because it would make multiple\
    \ passes over these lists\n    i=0;\n    while [ $i -lt ${#guesses} ]; do\n  \
    \      diff=$(( $(echo \"${scores[i]} - ${guesses[i]}\" | bc) ))\n        # Check\
    \ if score is 0. If it is, the difference is the same as the guess. If not, we\
    \ need to subtract it.\n        if [ \"${scores[i]}\" -eq \"0\" ]; then\n    \
    \        # A guess of 0 is the same as no score\n            diff=0\n        fi\n\
    \        # Update the guess and score arrays\n        guesses[i]=${guesses[i]%\
    \ *}\n        scores[i]=${scores[i]% *}\n        guesses[i]=${guesses[i]#* }\n\
    \        scores[i]=${scores[i]#* }\n        (( i++ ))\n    done\n    \n    echo\
    \ \"${guesses[@]}\"\n    echo \"${scores[@]}\"\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'sort: invalid option -- ''2''

    Try ''sort --help'' for more information.

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    /tmp/tmp7hmpdyly.sh: line 36: [: 1 2 3 4 5 1: integer expression expected

    (standard_in) 2: syntax error

    /tmp/tmp7hmpdyly.sh: line 36: [: : integer expression expected

    (standard_in) 2: syntax error

    /tmp/tmp7hmpdyly.sh: line 36: [: : integer expression expected

    (standard_in) 2: syntax error

    /tmp/tmp7hmpdyly.sh: line 36: [: : integer expression expected

    (standard_in) 2: syntax error

    /tmp/tmp7hmpdyly.sh: line 36: [: : integer expression expected

    (standard_in) 2: syntax error

    /tmp/tmp7hmpdyly.sh: line 36: [: : integer expression expected

    (standard_in) 2: syntax error

    /tmp/tmp7hmpdyly.sh: line 36: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local -n score=\"$1\"\
    ; shift\n    local -n guess=\"$1\"; shift\n    # this loop just checks if a score\
    \ is out of bounds, not if it is correct\n    local -a result=()\n    local i\n\
    \    for ((i = 0; i < ${#score[@]}; i++)); do\n        result+=(\"${score[i]}\"\
    \ \"${guess[i]}\")\n    done\n    # add extra check by iterating over every possible\
    \ guess\n    for ((i = 0; i < ${#guess[@]}; i++)); do\n        # we only consider\
    \ correct guesses\n        if (( \"${guess[i]}\" == ${score[i]} )); then\n   \
    \         result+=(\"${guess[i]}\" \"0\")\n        else\n            result+=(\"\
    ${guess[i]}\" \"${abs(guess[i]-${score[i]})}\")\n        fi\n    done\n    # sort\
    \ the result by score\n    local -n sorted_result=\n    for ((i = 0; i < ${#result[@]};\
    \ i++)); do\n        sorted_result+=(\"${result[i]}\")\n    done\n    local -n\
    \ sorted_result2=\n    for ((i = 0; i < ${#sorted_result[@]}; i++)); do\n    \
    \    sorted_result2+=(\"${sorted_result[i]}\")\n    done\n    echo \"${sorted_result2[@]}\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7jisv9wu.sh: line 18: local: `1 2 3 4 5 1'': invalid variable name
    for name reference

    /tmp/tmp7jisv9wu.sh: line 19: local: `1 2 3 4 2 -2'': invalid variable name for
    name reference

    /tmp/tmp7jisv9wu.sh: line 36: local: `'': not a valid identifier

    /tmp/tmp7jisv9wu.sh: line 40: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\n\
    \    scores=$($(python -c \"\n        import sys\n        scores, guesses = map(str.split,\
    \ sys.stdin.readlines())\n        for score, guess in zip(scores, guesses):\n\
    \            score, guess = int(score), int(guess)\n            if score < 0 or\
    \ guess < 0:\n                yield 'not possible'\n            elif score ==\
    \ guess:\n                yield 'correct'\n            else:\n               \
    \ yield abs(score-guess)\n    \"))\n    echo $(printf \"[%s]\" ${scores[@]})\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "  File \"<string>\", line 2\n    import sys\n    ^\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local guesses=(\"${1[@]}\"\
    \ )\n    local scores=(\"${2[@]}\" )\n    local answers=( \"${guesses[@]}\" )\n\
    \    local results=()\n    for i in \"${!guesses[@]}\"; do\n        local score=\"\
    ${scores[i]}\"\n        local guessed=\"${guesses[i]}\"\n        results+=(\"\
    ${answers[i]} has guessed ${abs(score-guessed)}\")\n    done\n    echo -n \"${results[*]}\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp34czew_s.sh: line 18: ${1[@]}: bad substitution

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tset -- $1;\n\tset -- $2;\n\
    \tlocal array1 array2 array3 array4 array5 array6 result\n\t# We must make sure\
    \ the number of arguments is correct before we even start\n\t# looping through\
    \ them. Otherwise we might loop too far and get an error \n\t# at some point because\
    \ we'll try to access the variables which haven't been\n\t# defined yet.\n\tarray1=(\"\
    $@\");\n\twhile [ $# -gt 0 ]; do\n\t\t# We're not allowed to use bash builtin\
    \ expansion here because we have\n\t\t# to deal with whitespace.\n\t\tarray2=($@);\n\
    \t\tlocal i=0;\n\t\tfor (( i=0; i<${#array1[*]}; i++ )); do\n\t\t\t# Find the\
    \ index that has the highest value.\n\t\t\tlocal j=i;\n\t\t\tfor (( j=0; j<${#array2[*]};\
    \ j++ )); do\n\t\t\t\tif [ ${array2[j]} -ge ${array1[i]} ]; then\n\t\t\t\t\t#\
    \ We found the higher value. Do nothing.\n\t\t\t\t\tbreak\n\t\t\t\telif [ ${array2[j]}\
    \ -le ${array1[i]} ]; then\n\t\t\t\t\t# We found the lower value. Do nothing.\n\
    \t\t\t\t\tbreak\n\t\t\t\telif [ ${array2[j]} -gt ${array1[i]} -a ${array2[j]}\
    \ -le ${array1[i]} ]; then\n\t\t\t\t\t# Found the correct index. Do nothing.\n\
    \t\t\t\t\tbreak\n\t\t\t\telse\n\t\t\t\t\t# Found the higher value, but the lower\
    \ value is in front of it. \n\t\t\t\t\tj=i\n\t\t\t\tfi\n\t\t\tdone\n\t\t\t# If\
    \ the index we found is larger than the previous highest index, we remember that\n\
    \t\t\t# the highest value is already in array2[j] and we're at it again.\n\t\t\
    \tif [ $j -gt $i ]; then\n\t\t\t\t# We found a higher value. We are done.\n\t\t\
    \t\tbreak\n\t\t\tfi\n\t\tdone\n\t\t# We only need this statement if we're not\
    \ at our highest index. Otherwise we\n\t\t# are already at that index.\n\t\tif\
    \ [ $i -eq $(( ${#array1[*]} - 1 )) ]; then\n\t\t\t# The current value is equal\
    \ to the highest value. Remember that and move on to the next value.\n\t\t\tarray5=(\"\
    $@\");\n\t\t\ti=$(( ${#array1[*]} - 1 ))\n\t\telse\n\t\t\t# The current value\
    \ is higher than the highest value. Remember that and move on to the next value.\n\
    \t\t\tarray4=(\"$@\");\n\t\t\ti=$(( ${#array1[*]} - 1 ))\n\t\tfi\n\t\tarray3[i]=${array5[i]}\n\
    \t\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate\
    \ \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"\
    1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3\
    \ 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk1xnovc5.sh: line 69: syntax error near unexpected token `}''

    /tmp/tmpk1xnovc5.sh: line 69: `}''

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  echo \"$1 $2\" |\n    sed\
    \ 's/ /\\n/g' |\n    tr '\\n' ' ' |\n    sort -n -k1,1 -k2,2 |\n    paste -d '\
    \ ' - - |\n    sed 's/ -/\\n/g'\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local arr1=(\"${1//[^\
    \ ]}\")\n    local arr2=(\"${2//[^ ]}\")\n    local diff\n    for ((i=0; i<${#arr1[*]};\
    \ i++)); do\n        diff=${arr2[i]}\n        if [[ -z \"${arr1[i]}\" ]]; then\n\
    \            diff=0\n            break\n        fi\n        diff=$((diff - ${arr1[i]}))\n\
    \    done\n    for ((j=0; j<${#arr2[*]}; j++)); do\n        diff=$((diff + ${arr2[j]}))\n\
    \    done\n    echo \"$diff\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpciyijtdg.sh: line 27: diff -      : syntax error: operand expected
    (error token is "-      ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    echo \"$2\" | while read\
    \ -r score; do\n        if [[ \"$score\" == \"$1\" ]]; then\n            # Correct\
    \ guess\n            echo $0\n            return 0\n        fi\n    done\n   \
    \ # Incorrect guess\n    echo $0\n    echo $($(echo \"$2\" - \"$1\"))\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmhfsgt66.sh: line 27: 1: command not found

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local xs ys xs ys diffs\
    \ diffs diff\n    local i=0\n    local xs ys xs ys diffs diffs diff\n    xs=\"\
    ${@:2}\"\n    ys=\"${@:4}\"\n    while [ $i -lt $((${#xs}+1)) ]\n    do\n    \
    \    diffs=0\n        diff $((i)) $((i+1)) \n        if [ $diff -gt 0 ]\n    \
    \    then\n            diffs=$((diffs+1))\n        fi\n        i=$((i+1))\n  \
    \  done\n    diffs=$((${#diffs}-1))\n    echo $((diffs))\n}\n\ncandidate() {\n\
    \    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\
    \ 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\"\
    \ \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2\
    \ -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0\
    \ 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjfwyzso5.sh: line 27: [: -gt: unary operator expected

    /tmp/tmpjfwyzso5.sh: line 27: [: -gt: unary operator expected

    /tmp/tmpjfwyzso5.sh: line 27: [: -gt: unary operator expected

    /tmp/tmpjfwyzso5.sh: line 27: [: -gt: unary operator expected

    /tmp/tmpjfwyzso5.sh: line 27: [: -gt: unary operator expected

    /tmp/tmpjfwyzso5.sh: line 27: [: -gt: unary operator expected

    /tmp/tmpjfwyzso5.sh: line 27: [: -gt: unary operator expected

    /tmp/tmpjfwyzso5.sh: line 27: [: -gt: unary operator expected

    /tmp/tmpjfwyzso5.sh: line 27: [: -gt: unary operator expected

    /tmp/tmpjfwyzso5.sh: line 27: [: -gt: unary operator expected

    diff: 11: No such file or directory

    /tmp/tmpjfwyzso5.sh: line 27: [: -gt: unary operator expected

    diff: 11: No such file or directory

    diff: 12: No such file or directory

    /tmp/tmpjfwyzso5.sh: line 27: [: -gt: unary operator expected

    diff: 12: No such file or directory

    diff: 13: No such file or directory

    /tmp/tmpjfwyzso5.sh: line 27: [: -gt: unary operator expected

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  declare -a scores guesses\n\
    \  local score\n  local diff\n  local result\n\n  # strip out quotes\n  scores=($1)\n\
    \  guesses=(${1//\\\"/})\n\n  # loop through scores\n  for score in \"${scores[@]}\"\
    ; do\n    # loop through guesses\n    for guess in \"${guesses[@]}\"; do\n   \
    \   # if they match add the guess and score to a list\n      if [ \"$score\" =\
    \ \"$guess\" ]; then\n        result+=(\"$guess\")\n      else\n        # if they\
    \ don't match find the difference\n        diff=$(( ($score - $guess) | bc ))\n\
    \        # if the difference is greater than 0 then add the guess\n        # to\
    \ the result list\n        if [ \"$diff\" -gt 0 ]; then\n          result+=(\"\
    $diff\")\n        fi\n      fi\n    done\n  done\n\n  # return the result list\n\
    \  echo ${result[@]}\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local RESULT=($(sort \"\
    $1\" | uniq))\n  local GAP=($(sort \"$2\" | uniq))\n  # the difference between\
    \ the two arrays\n  local RESULTDIFF=($(echo \"$RESULT\" \\\n    | while read\
    \ -r LINE; do\n    case \"$LINE\" in \n      \"$GAP\") RESULTDIFF+=\"0\"; break;;\n\
    \      *) RESULTDIFF+=\"$(echo $RESULT | grep -q \"^$LINE$\") || echo $(echo $RESULT\
    \ | grep -Fq \"^$LINE$\") || echo $(echo $RESULT | sed \"s/^$LINE//\");;\n   \
    \ esac\n  done))\n  # The result array\n  echo \"${RESULTDIFF[@]}\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpex4qscr_.sh: line 41: unexpected EOF while looking for matching
    `"''

    /tmp/tmpex4qscr_.sh: line 45: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  if [ -z \"$1\" ]; then\
    \ exit 1; fi\n  if [ -z \"$2\" ]; then exit 1; fi\n  if [ ${#1} -ne ${#2} ]; then\
    \ exit 1; fi\n  local scores guesses\n  scores=$($1 tr '\\n' ' ')\n  guesses=$($2\
    \ tr '\\n' ' ')\n  local score\n  local guess\n  local distance\n  local result\n\
    \  local distance_count\n  local score_index\n  local guesses_index\n  local score_index\n\
    \  local guesses_index\n  local distance_count\n  local scores_index\n  local\
    \ guesses_index\n  local result\n  result=$($1 tr '\\n' ' ')\n  distance_count=0\n\
    \  for (( score_index = 0; score_index < ${#scores[@]};  score_index++ )); do\n\
    \    score=${scores[$score_index]}\n    for (( guesses_index = 0; guesses_index\
    \ < ${#guesses[@]};  guesses_index++ )); do\n      guess=${guesses[$guesses_index]}\n\
    \      distance=0\n      if [ \"$score\" -eq \"$guess\" ]; then \n        distance=0\n\
    \      elif [ \"$score\" -lt \"$guess\" ]; then \n        distance=$(( ${#guesses}\
    \ - guesses_index ))\n      elif [ \"$score\" -gt \"$guess\" ]; then \n      \
    \  distance=$(( guesses_index ))\n      fi\n      distance_count=$(( distance_count\
    \ + distance ))\n    done\n  done\n  distance_count=$(( distance_count + ${#scores[@]}\
    \ - ${#guesses[@]} ))\n  distance_count=$(( distance_count + ${#guesses[@]} -\
    \ ${#scores[@]} ))\n  for (( score_index = 0; score_index < ${#scores[@]};  score_index++\
    \ )); do\n    score=${scores[$score_index]}\n    for (( guesses_index = 0; guesses_index\
    \ < ${#guesses[@]};  guesses_index++ )); do\n      guess=${guesses[$guesses_index]}\n\
    \      distance=0\n      if [ \"$score\" -eq \"$guess\" ]; then \n        distance=0\n\
    \      elif [ \"$score\" -lt \"$guess\" ]; then \n        distance=$(( ${#guesses}\
    \ - guesses_index ))\n      elif [ \"$score\" -gt \"$guess\" ]; then \n      \
    \  distance=$(( guesses_index \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptoze1vo4.sh: line 66: unexpected EOF while looking for matching
    `)''

    /tmp/tmptoze1vo4.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local score_list guesses\
    \ score guess result result count\n    score_list=$1\n    guesses=$2\n    result=0\n\
    \    count=0\n    while IFS= read -r score; do\n        result=`expr $result +\
    \ $score`\n        ((count++))\n    done <<< \"$score_list\"\n    for guess in\
    \ $guesses; do\n        result=`expr $result - $guess`\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20182\u2019\nexpr: syntax error:\
    \ unexpected argument \u20181\u2019\nexpr: syntax error: unexpected argument \u2018\
    2\u2019\nexpr: syntax error: unexpected argument \u20183\u2019\nexpr: syntax error:\
    \ unexpected argument \u20184\u2019\nexpr: syntax error: unexpected argument \u2018\
    2\u2019\nexpr: syntax error: unexpected argument \u2018-2\u2019\n"
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    # Your code here\n  \
    \  diff <- list()\n    for(i in 1:length(scores)){\n        if(guess[i] == scores[i]){\n\
    \            diff[i] <- 0\n        } else {\n            diff[i] <- abs(guess[i]\
    \ - scores[i])\n        }\n    }\n    diff\n}\n\ncandidate() {\n    compare \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4\
    \ 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0\
    \ 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2\
    \ 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp05x_d2zv.sh: line 19: syntax error near unexpected token `(''

    /tmp/tmp05x_d2zv.sh: line 19: `    diff <- list()''

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local first=\"${1#*[![:space:]]}\"\
    \n  local second=\"${2#*[![:space:]]}\"\n  local firstArray=( ${first//[![:space:]]/\
    \ } )\n  local secondArray=( ${second//[![:space:]]/ } )\n  local diff result\n\
    \  local maxIndex\n  local minIndex\n  local i\n  local j\n  local diffIndex\n\
    \  \n  maxIndex=${#firstArray[@]}\n  minIndex=${#secondArray[@]}\n  for ((i=1;\
    \ i <= maxIndex; ++i));\n  do\n    diffIndex=0\n    for ((j=1; j <= minIndex;\
    \ ++j));\n    do\n      diff =$(( ${firstArray[$i]}-${secondArray[$j]} ))\n  \
    \    if (( diff < 0 )); then\n        diff=$(( ${firstArray[$i]}+${secondArray[$j]}\
    \ ))\n        diffIndex=$(( $diffIndex+1 ))\n      fi\n    done\n    result[$i]=$diffIndex\n\
    \  done\n  \n  result=( ${result[@]} )\n  return \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local score guess=$(echo\
    \ \"$2\" | tr -s ' ' ' ');\n    local guesses=$(echo \"$1\" | tr -s ' ' ' ');\n\
    \    local diff;\n    for ((i=0; i < ${#guesses}; i++)); do\n        local j;\n\
    \        for ((j=0; j < ${#score}; j++)); do\n            local diff=`echo \"\
    ${guesses[i]} - ${score[j]}\" | bc`\n            if [[ $diff -eq 0 ]]; then\n\
    \                diff=0\n                break;\n            else\n          \
    \      diff=${diff}\n            fi\n        done\n        guesses[i]=${diff}\n\
    \    done\n    echo \"${guesses}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") =\
    \ \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"\
    0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: -1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local x y diff scores\
    \ guesses\n    IFS=\" \"; for x in \"$@\" ; do scores=( $(echo \"$x\" | sed 's/^/0/;s/\
    \ /0/') ); done\n    for y in \"$@\" ; do guesses=( $(echo \"$y\" | sed 's/^/0/;s/\
    \ /0/') ); done\n    diff () {\n        local x y diff\n        IFS=\" \"; for\
    \ x in \"$@\" ; do y=( $(echo \"$x\" | sed 's/^/0/;s/ /0/') ); done\n        for\
    \ x in \"${!y[@]}\"; do diff \"$x\" \"${y[$x]}\" && echo \"$diff ${y[$x]}\" ||\
    \ echo \"$diff ${y[$x]} \"; done\n    }\n    diff \"$#\" \"$#\" && echo \"$diff\
    \ ${scores[@]}\" || echo \"$diff ${scores[@]} \"\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=15 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660055399
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores=$1\n   \
    \ local guesses=$2\n    local result\n\n    for (( i=1; i<${#scores[@]}; i++ ));\
    \ do\n        local score=${scores[$i]}\n        local guess=${guesses[$i]}\n\n\
    \        if [ \"${score}\" = \"${guess}\" ]; then\n            result=0\n    \
    \    else\n            result=${score}\n        fi\n    done\n\n    local index=0\n\
    \    local results=()\n\n    for (( i=1; i<${#scores[@]}; i++ )); do\n       \
    \ if [ \"${result}\" = \"0\" ]; then\n            results[$index]=\"${guesses[$i]}\"\
    \n        else\n            results[$index]=\"${result}\"\n        fi\n      \
    \  let index+=1\n    done\n\n    echo ${results[@]}\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\
    \ result\n    scores=${1//[[:space:]]/}\n    guesses=${2//[[:space:]]/}\n    local\
    \ numscores numguesses i\n    numscores=${#scores}\n    numguesses=${#guesses}\n\
    \    for ((i = 0; i<numguesses; i++)); do\n        result[i]=${guesses[i]}\n \
    \       if [[ ${scores[i]} == ${guesses[i]} ]]; then\n            result[i]=0\n\
    \        fi\n    done\n    for ((i = 0; i<numscores; i++)); do\n        result[numguesses+i]=${scores[i]}\n\
    \        if [[ ${guesses[i]} == ${scores[i]} ]]; then\n            result[numguesses+i]=0\n\
    \        fi\n    done\n    for ((i = 0; i<numguesses; i++)); do\n        if [[\
    \ ${result[i]} -gt 0 ]]; then\n            result[i]=${result[i]}\n        else\n\
    \            result[i]=$((${result[i]} - ${result[i-1]}))\n        fi\n    done\n\
    \    for ((i = 0; i<numscores; i++)); do\n        if [[ ${result[i]} -gt 0 ]];\
    \ then\n            result[i]=${result[i]}\n        else\n            result[i]=$((${result[i]}\
    \ - ${result[i-1]}))\n        fi\n    done\n}\n\ncandidate() {\n    compare \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4\
    \ 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0\
    \ 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2\
    \ 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal a=($1)\n\tlocal b=($2)\n\
    \tlocal r=1\n\tfor i in $(seq ${#a[@]}); do\n\t\tlocal j=0\n\t\twhile [ $i -le\
    \ ${#b[@]} ] && [ $j -le ${#a[@]} ]; do\n\t\t\tlocal diff=$(( ${a[$i]} - ${b[$j]}\
    \ ))\n\t\t\tlocal g=$(( ${a[$i]} + ${b[$j]} ))\n\t\t\tif [ $diff -eq 0 ]; then\n\
    \t\t\t\tr=0\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\tlocal g=$(( ${a[$i]} + ${b[$j]} ))\n\
    \t\t\tif [ $g -eq 0 ]; then\n\t\t\t\tr=0\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\tif [\
    \ $diff -gt 0 ]; then\n\t\t\t\tlocal diff=$(( ${a[$i]} - ${b[$j]} ))\n\t\t\t\t\
    if [ $diff -eq 0 ]; then\n\t\t\t\t\tbreak\n\t\t\t\telif [ $diff -gt 0 ]; then\n\
    \t\t\t\t\tlocal diff=$(( ${a[$i]} - ${b[$j]} ))\n\t\t\t\t\tif [ $diff -eq 0 ];\
    \ then\n\t\t\t\t\t\tbreak\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\tfi\n\t\t\tj=$(( j +\
    \ 1 ))\n\t\tdone\n\t\ti=$(( i + 1 ))\n\tdone\n\techo -n \"${a[@]}\"\n\twhile [\
    \ $i -le ${#a[@]} ]; do\n\t\techo -n \" \"\n\t\techo $(( ${a[$i]} ))\n\t\ti=$((\
    \ i + 1 ))\n\tdone\n\techo \"${b[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\"\
    ) = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") =\
    \ \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy6kvr4yh.sh: line 24: 5 -  : syntax error: operand expected (error
    token is "-  ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal -r score=$1\n\tlocal\
    \ -r guesses=$2\n\tlocal -r guess=$guess\n\tlocal -r scoreDiff=$(( score - guess\
    \ ))\n\tlocal -r diff=$(( guesses - guess ))\n\tlocal -r totalDiff=$(( scoreDiff\
    \ + diff ))\n\tlocal -r diffPercent=$(( totalDiff / guesses ))\n\tlocal -r totalPercent=$((\
    \ totalDiff / guess ))\n\tlocal -r percent=$(( totalPercent * 100 ))\n\tlocal\
    \ -r result\n\n\tresult=$( echo $percent )\n\t[ \"$result\" -gt 100 ] && result=$(\
    \ echo $result - 100 )\n\n\tprintf -v resultString '%d' \"$result\"\n\tprintf\
    \ -v diffString '%d' \"$diff\"\n\tprintf -v percentString '%d' \"$percent\"\n\n\
    \tresult=$( echo $resultString )\n\tdiff=$( echo $diffString )\n\tpercent=$( echo\
    \ $percentString )\n\n\tprintf -v resultString '[%s]' \"$result\"\n\tprintf -v\
    \ diffString '[%s]' \"$diff\"\n\tprintf -v percentString '[%s]' \"$percent\"\n\
    \n\tresult=$( echo \"$diffPercent%+$percentString\" )\n\t[ \"$result\" -gt 100\
    \ ] && result=$( echo \"$result%+$( echo $result - 100 )\" )\n\n\techo \"$result\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8zeha1kq.sh: line 21: 1 2 3 4 5 1: syntax error in expression (error
    token is "2 3 4 5 1")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local a b i len\n   \
    \ local diff tmp diffs arr\n\n    diffs=()\n    diff=0\n    IFS=\" $2\"\n\n  \
    \  for (( i=0; i<${#a[@]}; i++ )); do\n        if (( ${a[$i]} == ${b[$i]} ));\
    \ then\n            diff=0\n        else\n            diff=$(( ${a[$i]} - ${b[$i]}\
    \ ))\n        fi\n        diffs+=(\"$diff\")\n    done\n\n    echo \"${diffs[@]}\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses\n\
    \  local i j score guess diff result\n  scores=$1\n  guesses=$2\n  # read off\
    \ the first line\n  result=0\n  for ((i = 0; i < ${#scores[@]}; i++)) ; do\n \
    \   # read off the rest\n    score=${scores[i]}\n    guess=${guesses[i]}\n   \
    \ if (( score == 0 )); then\n      continue\n    fi\n    for ((j = i; j < ${#scores[@]};\
    \ j++)) ; do\n      diff=$(( (${scores[j]} - ${score}) | (${guesses[j]} - ${guess})\
    \ ))\n      if (( diff < 0 )); then\n        continue\n      fi\n      result=$((\
    \ result + diff ))\n    done\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n\
    \    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\
    \ 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\"\
    \ \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2\
    \ -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0\
    \ 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe8u0u1zz.sh: line 28: ((: 1 2 3 4 5 1: syntax error in expression
    (error token is "2 3 4 5 1")

    /tmp/tmpe8u0u1zz.sh: line 32: (1 2 3 4 5 1 - 1 2 3 4 5 1) | (1 2 3 4 2 -2 - 1
    2 3 4 2 -2) : missing `)'' (error token is "2 3 4 5 1 - 1 2 3 4 5 1) | (1 2 3
    4 2 -2 - 1 2 3 4 2 -2) ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local a b d diff i j\
    \ k l m n o p q r s t u v w x y z\n    a=\"${1% *}\"\n    b=\"${2% *}\"\n    diff=0\n\
    \    for ((i=1;i<${#a};i++)); do\n        d=-1\n        j=0 k=0\n        while\
    \ ((j<${#b})); do\n            ((k++))\n            # print out each letter\n\
    \            if ((i & (1<<j))); then\n                printf '%c' ${b[j]}\n  \
    \          else\n                printf '%c' ${a[j]}\n            fi\n       \
    \     j=$((j+1))\n            # if the letter is in the list, increment the count\n\
    \            if [[ ${b[j]} == ${a[i]} ]]; then\n                d=$((d+1))\n \
    \           fi\n        done\n        # print out difference\n        if ((i>1));\
    \ then\n            printf \"%d\" $d\n        fi\n        diff=$((diff+d))\n \
    \   done\n    # print out the total\n    printf \"%d\" $diff\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpetw37xo_.sh: line 55: warning: command substitution: ignored null
    byte in input

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 0
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  # if there are more arguments,\
    \ the comparison will fail\n  if [ $# -gt 2 ]; then\n    echo \"Wrong number of\
    \ arguments\"\n    exit 1\n  fi\n  # get arrays\n  firstArray=($1)\n  secondArray=($2)\n\
    \  # check arrays sizes\n  if [ ${#firstArray[@]} != ${#secondArray[@]} ]; then\n\
    \    echo \"Wrong number of arguments\"\n    exit 1\n  fi\n  # compare scores\n\
    \  diffArray=()\n  for ((i = 0; i<${#firstArray[@]}; i++)) {\n    if [ \"${firstArray[$i]}\"\
    \ == \"${secondArray[$i]}\" ]; then\n      diffArray+=(0)\n    else\n      diffArray+=($((${firstArray[$i]}\
    \ - ${secondArray[$i]})))\n    fi\n  }\n  # return diffArray\n  echo ${diffArray[@]}\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses\n\
    \  scores=$1\n  guesses=$2\n  local i diff diff diff index diff diff diff diff\n\
    \  i=0\n  while [ $i -lt $((${#scores[@]} - 1)) ]; do\n    diff=$((${scores[i]}\
    \ - ${guesses[i]}))\n    if [ \"${guesses[i]}\" -eq \"${scores[i]}\" ]; then\n\
    \      echo \"0\"\n    else\n      echo \"$diff\"\n    fi\n    i=$((i + 1))\n\
    \  done\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n  \
    \  [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2\
    \ 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local score_a=$1\n  \
    \  local score_b=$2\n    local diff\n\n    local index=0\n    local diffs=()\n\
    \    while [ \"$index\" -lt ${#score_a} ]; do\n        if [ \"$score_a\" == \"\
    $score_b\" ]; then\n            diffs=(\"${diffs[@]}\" \"$((${diffs[@]} + 0))\"\
    )\n            ((diffs[index++]))\n        elif [ \"$score_a\" == \"${score_b:$index}\"\
    \ ]; then\n            diffs=(\"${diffs[@]}\" \"$((${diffs[@]} + 0))\")\n    \
    \        ((diffs[index++]))\n        else\n            diffs=(\"${diffs[@]}\"\
    \ \"$((${diffs[@]} * abs(${score_b:$index} - ${score_a:$index})) ))\")\n     \
    \       ((diffs[index++]))\n        fi\n    done\n    diff \"${diffs[@]}\"\n}\n\
    \ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcmc9xwl4.sh: command substitution: line 32: syntax error near unexpected
    token `(''

    /tmp/tmpcmc9xwl4.sh: command substitution: line 32: `(${diffs[@]} * abs(${score_b:$index}
    - ${score_a:$index})) ''

    /tmp/tmpcmc9xwl4.sh: line 33: ((: ): syntax error: operand expected (error token
    is ")")

    /tmp/tmpcmc9xwl4.sh: command substitution: line 32: syntax error near unexpected
    token `(''

    /tmp/tmpcmc9xwl4.sh: command substitution: line 32: `(${diffs[@]} * abs(${score_b:$index}
    - ${score_a:$index})) ''

    /tmp/tmpcmc9xwl4.sh: line 33: ((: ): syntax error: operand expected (error token
    is ")")

    /tmp/tmpcmc9xwl4.sh: command substitution: line 32: syntax error near unexpected
    token `(''

    /tmp/tmpcmc9xwl4.sh: command substitution: line 32: `(${diffs[@]} * abs(${score_b:$index}
    - ${score_a:$index})) ''

    /tmp/tmpcmc9xwl4.sh: line 33: ((: ): syntax error: operand expected (error token
    is ")")

    /tmp/tmpcmc9xwl4.sh: command substitution: line 32: syntax error near unexpected
    token `(''

    /tmp/tmpcmc9xwl4.sh: command substitution: line 32: `(${diffs[@]} * abs(${score_b:$index}
    - ${score_a:$index})) ''

    /tmp/tmpcmc9xwl4.sh: line 33: ((: ): syntax error: operand expected (error token
    is ")")

    /tmp/tmpcmc9xwl4.sh: command substitution: line 32: syntax error near unexpected
    token `(''

    /tmp/tmpcmc9xwl4.sh: command substitution: line 32: `(${diffs[@]} * abs(${score_b:$index}
    - ${score_a:$index})) ''

    /tmp/tmpcmc9xwl4.sh: line 33: ((: ): syntax error: operand expected (error token
    is ")")

    /tmp/tmpcmc9xwl4.sh: command substitution: line 32: syntax error near unexpected
    token `(''

    /tmp/tmpcmc9xwl4.sh: command substitution: line 32: `(${diffs[@]} * abs(${score_b:$index}
    - ${score_a:$index})) ''

    /tmp/tmpcmc9xwl4.sh: line 33: ((: ): syntax error: operand expected (error token
    is ")")

    /tmp/tmpcmc9xwl4.sh: command substitution: line 32: syntax error near unexpected
    token `(''

    /tmp/tmpcmc9xwl4.sh: command substitution: line 32: `(${diffs[@]} * abs(${score_b:$index}
    - ${score_a:$index})) ''

    /tmp/tmpcmc9xwl4.sh: line 33: ((: ): syntax error: operand expected (error toke'
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal a b n l m\n\tread\
    \ -r l < <(printf \"%s\\n\" \"${1}\")\n\tread -r m < <(printf \"%s\\n\" \"${2}\"\
    )\n\tlocal diffs\n\tfor (( n=0 ; n < ${#l} ; n++ )); do\n\t\ta=\"${l}\"\n\t\t\
    b=\"${m}\"\n\t\t[[ \"${a}\" == \"${b}\" ]] && { diffs=\"${diffs}${diffs:+$diffs}\
    \ '0'\"; continue; }\n\t\t[[ ${#a} -ge 1 ]] && [[ ${#b} -ge 1 ]] && { diffs=\"\
    ${diffs}${diffs:+$diffs} '${#a} - ${#b}'\"; continue; }\n\t\t[[ ${#a} -ge 1 ]]\
    \ || [[ ${#b} -ge 1 ]] || { diffs=\"${diffs}${diffs:+$diffs} '${#a} - ${#b}'\"\
    ; continue; }\n\t\t[[ ${a} != ${b} ]] && { diffs=\"${diffs}${diffs:+$diffs} '${a}\
    \ - ${b}'\"; continue; }\n\t\t[[ ${a} == ${b} ]] && { diffs=\"${diffs}${diffs:+$diffs}\
    \ '0'\"; continue; }\n\t\t[[ ${a} < ${b} ]] && { diffs=\"${diffs}${diffs:+$diffs}\
    \ '${a} - ${b}'\"; continue; }\n\t\t[[ ${a} > ${b} ]] && { diffs=\"${diffs}${diffs:+$diffs}\
    \ '${b} - ${a}'\"; continue; }\n\tdone\n\techo \"${diffs}\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal array1=(${1//[[:space:]]/})\n\
    \tlocal array2=(${2//[[:space:]]/})\n\n\t# This would work but it doesn't make\
    \ as much sense\n\t# return $(\n\t# \t\tfor x in ${!array1[@]}; do\n\t# \t\t\t\
    printf \"[$(printf \"%s\" ${array1[$x]})]\" \"${array2[$x]}\"\n\t# \t\tdone\n\t\
    # \t)\n\t\n\t# This works and is very fast in most cases\n\t# return $(\n\t# \t\
    \tfor x in ${!array1[@]}; do\n\t# \t\t\tprintf \"[$(printf \"%s\" ${array1[$x]})]\"\
    \ \"${array2[$x]}\"\n\t# \t\tdone\n\t# \t)\n\n\t# This does work and is slightly\
    \ faster\n\t# return $(\n\t# \t\tfor x in ${!array1[@]}; do\n\t# \t\t\tprintf\
    \ \"[$(printf \"%s\" ${array1[$x]})]\" \"${array2[$x]}\"\n\t# \t\tdone\n\t# \t\
    | paste -d ',' -s -d, -s \n\t# \t)\n\n\t# This works but doesn't work at all\n\
    \t# return $(\n\t# \t\tfor x in ${!array1[@]}; do\n\t# \t\t\tprintf \"[$(printf\
    \ \"%s\" ${array1[$x]})]\" \"${array2[$x]}\"\n\t# \t\tdone\n\t# \t| paste -d ','\
    \ -s -d, -s\n\t# \t| awk '{print $1\"-\"$2}'\n\t# )\n\n\t# This is fast but doesn't\
    \ work at all\n\t# return $(\n\t# \t\tfor x in ${!array1[@]}; do\n\t# \t\t\tprintf\
    \ \"[$(printf \"%s\" ${array1[$x]})]\" \"${array2[$x]}\"\n\t# \t\tdone\n\t# \t\
    | paste -d ',' -s -d, -s\n\t# \t| awk '{print $1\"-\"$2}'\n\t# )\n\n\t# This works\
    \ but is slow\n\t# return $(\n\t# \t\tfor x in ${!array1[@]}; do\n\t# \t\t\tprintf\
    \ \"[$(printf \"%s\" ${array1[$x]})]\" \"${array2[$x]}\"\n\t# \t\tdone\n\t# \t\
    | paste -d ',' -s -d, -s\n\t# )\n\n\t# This works but is slow\n\t# return $(\n\
    \t# \t\tfor x in ${!array1[@]}; do\n\t# \t\t\tprintf \"[$(printf \"%s\" ${array1[$x]})]\"\
    \ \"${array2[$x]}\"\n\t# \t\tdone\n\t# \t| paste -d ',' -s -\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local _scores _guesses\
    \ _result _score _guess _index _diff _diff _diff1 _diff2\n  _scores=$(echo \"\
    $1\" | tr -s ' ')\n  _guesses=$(echo \"$2\" | tr -s ' ')\n  _result=($(echo \"\
    $_scores\" |awk '{for(i=1;i<=NF;i++){if($i==0){$i=\"-\"}}}1' |awk '{print $1,\
    \ $0}'))\n  for _index in $(seq 0 $((${#_scores}-1)) ); do\n    _score=${_scores[$_index]}\n\
    \    _guess=${_guesses[$_index]}\n    _diff=$((${_score}${_guess})) #diff in score\n\
    \    _diff1=$((${_guess}${_score})) #diff in guess\n    _diff2=$((${_diff}-${_diff1}))\
    \ #diff in score minus diff in guess\n    _result[$_index]=$(echo \"$_index\"\
    )\n  done\n  echo \"${_result[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\"\
    ) = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") =\
    \ \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxwg6n5qf.sh: line 25: 1 2 3 4 5 11 2 3 4 2 -2: syntax error in
    expression (error token is "2 3 4 5 11 2 3 4 2 -2")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\
    \ score guess difference result\n    scores=\"$1\"; guesses=\"$2\"\n    local\
    \ i\n    local len1=${#scores[@]}; len2=${#guesses[@]}\n    local diff\n    result=()\n\
    \    for ((i=0; i<len1; i++))\n    do\n        scores[i]=$(echo \"$scores[i]\"\
    \ | sed 's/ /\\n/g')\n        guesses[i]=$(echo \"$guesses[i]\" | sed 's/ /\\\
    n/g')\n    done\n    diff=0\n    for ((i=0; i<len2; i++))\n    do\n        diff=$((diff\
    \ + $(( $(( ${guesses[i]} - ${scores[i]} )) )))\n        if [ $diff -eq 0 ]\n\
    \        then\n            diff=0\n        else\n            diff=$(( ${guesses[i]}\
    \ - ${scores[i]} ))\n        fi\n    done\n    for ((i=0; i<len1; i++))\n    do\n\
    \        result[i]=$(( ${result[i]} + $diff ))\n    done\n    result[$((len2-1))]=$((\
    \ ${guesses[len2-1]} - ${scores[len2-1]} ))\n    echo \"${result[@]}\"\n}\n\n\
    candidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpczwxdc3h.sh: line 32: unexpected EOF while looking for matching
    `)''

    /tmp/tmpczwxdc3h.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\n\
    \    scores=$1\n    guesses=$2\n\n    local i j matchlen\n    matchlen=$((${#scores}\
    \ - ${#guesses}))\n    for i in $(seq 0 $((${#guesses} - 1))); do\n        j=$i\n\
    \        while [ \"$j\" -lt \"$matchlen\" ]; do\n            if [[ ${guesses[$j]}\
    \ -eq ${scores[$i]} ]]; then\n                j=$((j+1))\n            else\n \
    \               matchlen=$((matchlen - 1))\n            fi\n        done\n   \
    \     echo $((${guesses[i]} - ${scores[j]}))\n    done\n}\n\ncandidate() {\n \
    \   compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\
    \ 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\"\
    \ \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2\
    \ -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0\
    \ 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk4xk2dqy.sh: line 33: 1 2 3 4 2 -2 - 1 2 3 4 5 1: syntax error
    in expression (error token is "2 3 4 2 -2 - 1 2 3 4 5 1")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local guesses scores\
    \ offset score\n    guesses=( ${1//,/ } )\n    scores=( ${2//,/ } )\n    length=${#guesses[@]}\n\
    \    offset=0\n    for (( i=1; i<=length; ++i )); do\n        score=${scores[$i]}\n\
    \        if [ \"${guesses[$i]}\" == \"${score}\" ]; then\n            offset=$((\
    \ offset + 0 ))\n        else\n            offset=$(( offset + abs( score - ${guesses[$i]}\
    \ ) ))\n        fi\n    done\n    echo $offset\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg76k3dy0.sh: line 28: offset + abs( score - 5 ) : syntax error
    in expression (error token is "( score - 5 ) ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local i\n    local scores=$1\n\
    \    local guesses=$2\n    local score\n    local guess\n    local diff\n    local\
    \ result\n    local diffs\n    local diff\n    local diffslen\n    \n    scores=(\
    \ $scores )\n    guesses=( $guesses )\n\n    result=()\n    diffslen=$(expr ${#scores[@]}\
    \ - ${#guesses[@]})\n\n    for i in $(seq 0 $((${#scores[@]} - 1))); do\n    \
    \    score=${scores[i]}\n        guess=${guesses[i]}\n        diff=$(( ${score}\
    \ - ${guess} ))\n        result[i]=$(( diff < 0 ? -diff : $diff ))\n    done\n\
    \n    for i in $(seq 0 $((${#result[@]} - 1))); do\n        result[i]=${result[i]}${result[i+1]}\n\
    \    done\n\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\"\
    ) = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") =\
    \ \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local i scores guesses\
    \ answers result\n    scores=$1\n    guesses=$2\n    answers=$(printf \"%s\\n\"\
    \ \"${guesses}\" | grep -E -o \" [1-9]\")\n    for (( i = 0; i < ($(echo \"${#scores}\"\
    \ | tr -dc ' ') ) ; i++ )); do\n        result=$(( $(echo \"${scores:$i:1}\" |\
    \ tr -dc ' ') > $(echo \"${answers:$i:1}\" | tr -dc ' ') ))\n        if [ \"${result}\"\
    \ == \"0\" ]; then\n            result=$(( $(echo \"${scores:$i:1}\" | tr -dc\
    \ ' ') != $(echo \"${answers:$i:1}\" | tr -dc ' ') ))\n        fi\n        ((\
    \ results[i] += result ))\n    done\n    echo \"${results[@]}\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq2k_k2mj.sh: line 22: ((: i < ( ) : syntax error: operand expected
    (error token is ") ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\n\
    \    scores=$1; guesses=$2\n    local score guess diff diff diff diff diff diff\
    \ diff diff diff\n    for ((i=0; i < ${#scores}; i++)); do\n        diff=0\n \
    \       diff=`expr ${guesses[i]} - ${scores[i]}`\n        diff=`expr ${diff} +\
    \ ${diff} + ${diff}`\n        if (( ${diff} > 0 )); then\n            guess=${guesses[i]}\n\
    \        else\n            guess=${scores[i]}\n        fi\n        diff += diff\n\
    \        diff += diff\n        diff += diff\n        diff += diff\n        diff\
    \ += diff\n        diff += diff\n        diff += diff\n        diff += diff\n\
    \        diff += diff\n        diff += diff\n        diff += diff\n        diff\
    \ += diff\n        diff += diff\n        diff += diff\n        diff += diff\n\
    \        diff += diff\n        diff += diff\n        diff += diff\n        diff\
    \ += diff\n        diff += diff\n        diff += diff\n        diff += diff\n\
    \        diff += diff\n        diff += diff\n        diff += diff\n        diff\
    \ += diff\n        diff += diff\n        diff += diff\n        diff += diff\n\
    \        diff += diff\n        diff += diff\n        diff += diff\n        diff\
    \ += diff\n        diff += diff\n        diff += diff\n        diff += diff\n\
    \        diff += diff\n        diff += diff\n        diff += diff\n        diff\
    \ += diff\n        diff += diff\n        diff += diff\n        diff += diff\n\
    \        diff += diff\n        diff += diff\n        diff += diff\n        diff\
    \ += diff\n        diff += diff\n        diff += diff\n        diff += diff\n\
    \        diff += diff\n        diff += diff\n        diff += diff\n        diff\
    \ += diff\n        diff += diff\n        diff += diff\n        diff += diff\n\
    \        diff += diff\n        diff += diff\n        diff += diff\n        diff\
    \ += diff\n        diff += diff\n        diff += diff\n        diff += diff\n\
    \        diff += diff\n        diff += diff\n        diff += diff\n        diff\
    \ += diff\n        diff += diff\n        diff += diff\n        diff += diff\n\
    \        diff += diff\n        diff += diff\n        diff += diff\n        diff\
    \ += diff\n        diff += diff\n        diff += diff\n        diff += diff\n\
    \        diff += diff\n        diff += diff\n        \n}\n\ncandidate() {\n  \
    \  compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\"\
    \ \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"\
    0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\"\
    ) = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9b02gjg1.sh: line 111: syntax error near unexpected token `}''

    /tmp/tmp9b02gjg1.sh: line 111: `}''

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses result\n\
    \  local -r scores=\"$1\" guesses=\"$2\"\n  local -i n i\n  result=()\n  n=$#\n\
    \  result[n]=\"\\\"0\\\"\"\n  for ((i=n-1; i>0; i--)); do\n    if [ ${guesses[i-1]}\
    \ != ${guesses[i]} ]; then\n      if [ ${scores[i-1]} -eq ${scores[i]} ]; then\n\
    \        result[n]=\"0\"\n      else\n        result[n]=$(echo \"${scores[i-1]}\
    \ - ${scores[i]}\" | bc -l)\n      fi\n    fi\n  done\n  return\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmxjd7rsg.sh: line 25: [: too many arguments

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal score guessed result\n\
    \tscore=\"${1:-0 1 2 3 4 5 6 7}\"\n\tguessed=\"${2:-0 1 2 3 4 2 -2}\"\n\tresult=$(\"\
    ${3:-python} -c 'print(int(\" ${score} \" != int(\" ${guessed} \"))')\" 2>/dev/null)\n\
    \treturn\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    # parse arguments\n \
    \   IFS=' '\n    declare -i length\n    declare -a scores guesses i j\n    length=${#${1}}\n\
    \    scores=(${#${1}}); guesses=(\"${@:2}\")\n    # loop through scores and guesses\n\
    \    for ((i = 0; i < ${#scores[@]}; i++)); do\n        for ((j = 0; j < ${#guesses[@]};\
    \ j++)); do\n            # compare current guess to current score\n          \
    \  if [ ${guesses[j]} -eq ${scores[i]} ]; then\n                # if so, return\
    \ 0\n                echo 0\n                break\n            else\n       \
    \         # otherwise, calculate the difference of guess and score\n         \
    \       if [ ${guesses[j]} -eq ${scores[i]} ]; then\n                    echo\
    \ 0\n                    echo \"${guesses[j]} - ${scores[i]} is 0\"\n        \
    \        else\n                    echo $(echo \"${guesses[j]} - ${scores[i]}\"\
    \ | bc)\n                    echo \"${guesses[j]} - ${scores[i]} is $(echo \"\
    ${guesses[j]} - ${scores[i]}\" | bc)\"\n                fi\n                break\n\
    \            fi\n        done\n    done\n}\n\ncandidate() {\n    compare \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\"\
    ) = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") =\
    \ \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp42_xe0w3.sh: line 22: ${#${1}}: bad substitution

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\
    \ scores guesses diff\n\n    scores=${1}\n    guesses=${2}\n    scores=$(echo\
    \ \"$scores\" |tr -s ' ')\n    guesses=$(echo \"$guesses\" |tr -s ' ')\n\n   \
    \ diff=$( printf '[\"%s\"]' \"${guesses[@]}\" )\n    diff =$(echo \"$guesses\"\
    \ |grep -w \"$scores\" |awk -F: '{print $2}')\n    echo \"$diff\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'diff: missing operand after ''=''

    diff: Try ''diff --help'' for more information.

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: -1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\n\
    \    # $1 is the scores list\n    # $2 is the guesses list\n    local i=0 scoresIndex\n\
    \    local j=0 guessesIndex\n    local diff score\n    scoresIndex=0\n    guessesIndex=0\n\
    \    while (( scoresIndex < ${#1} )) || (( guessesIndex < ${#2} ))\n    do\n \
    \       if (( ${#1}[${scoresIndex}] == \"0\" )) \n        then\n            guessesIndex=$((\
    \ guessesIndex + 1 ))\n            continue\n        fi\n        scoresIndex=$((\
    \ scoresIndex + 1 ))\n    done\n    scoresIndex=0\n    guessesIndex=0\n    while\
    \ (( scoresIndex < ${#1} )) || (( guessesIndex < ${#2} ))\n    do\n        if\
    \ (( ${#1}[${scoresIndex}] == \"0\" )) \n        then\n            guessesIndex=$((\
    \ guessesIndex + 1 ))\n            continue\n        fi\n        score=$(echo\
    \ $1 | cut -d \" \" -f ${scoresIndex})\n        guess=$(echo $2 | cut -d \" \"\
    \ -f ${guessesIndex})\n        diff=$(($guess - $score))\n        echo $diff\n\
    \        guessesIndex=$(( guessesIndex + 1 ))\n        scoresIndex=$(( scoresIndex\
    \ + 1 ))\n    done\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=47 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=21 encoding='utf-8'>
  timestamp: 1660055399
- exit_code: 0
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal a b\n\ta=($1)\n\t\
    b=($2)\n\tdeclare -a res\n\tfor i in \"${!a[@]}\"; do\n\t\t[[ \"$a[$i]\" -eq \"\
    $b[$i]\" ]] && res[$i]=0 || res[$i]=$(( ${a[$i]} - ${b[$i]} ))\n\tdone\n\techo\
    \ \"${res[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpv2vu4mo_.sh: line 23: [[: 1[0]: syntax error: invalid arithmetic
    operator (error token is "[0]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 1[1]: syntax error: invalid arithmetic operator
    (error token is "[1]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 1[2]: syntax error: invalid arithmetic operator
    (error token is "[2]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 1[3]: syntax error: invalid arithmetic operator
    (error token is "[3]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 1[4]: syntax error: invalid arithmetic operator
    (error token is "[4]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 1[5]: syntax error: invalid arithmetic operator
    (error token is "[5]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 0[0]: syntax error: invalid arithmetic operator
    (error token is "[0]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 0[1]: syntax error: invalid arithmetic operator
    (error token is "[1]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 0[2]: syntax error: invalid arithmetic operator
    (error token is "[2]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 0[3]: syntax error: invalid arithmetic operator
    (error token is "[3]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 0[4]: syntax error: invalid arithmetic operator
    (error token is "[4]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 0[5]: syntax error: invalid arithmetic operator
    (error token is "[5]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 1[0]: syntax error: invalid arithmetic operator
    (error token is "[0]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 1[1]: syntax error: invalid arithmetic operator
    (error token is "[1]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 1[2]: syntax error: invalid arithmetic operator
    (error token is "[2]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 1[0]: syntax error: invalid arithmetic operator
    (error token is "[0]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 1[1]: syntax error: invalid arithmetic operator
    (error token is "[1]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 1[2]: syntax error: invalid arithmetic operator
    (error token is "[2]")

    /tmp/tmpv2vu4mo_.sh: line 23: [[: 1[3]: syntax error: invalid arithmetic operator
    (error token is "[3]")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    if [[ $1 =~ $2 ]]\n \
    \   then\n        echo \"0\"\n    elif [[ $1 =~ $([[:digit:]]+)$ ]]\n    then\n\
    \        echo \"$(($1-$2))\"\n    else\n        echo \"$(($1-$([[:digit:]]+$([[:digit:]]+)$([[:digit:]]+)$([[:digit:]]+)))\"\
    \n    fi\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoho5ur5a.sh: line 38: unexpected EOF while looking for matching
    `"''

    /tmp/tmpoho5ur5a.sh: line 42: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    # initialize our variables\n\
    \    local i j\n    local len=$((${#1} - ${#2}))\n    local scores guesses\n \
    \   # read in both strings, and make them numbers\n    local IFS=' ' read -a scores\
    \ <<< \"$1\"\n    local IFS=' ' read -a guesses <<< \"$2\"\n    \n    # set our\
    \ counter to zero for our loop condition\n    i=0\n    # loop through both arrays\
    \ until we run out of one\n    while [ $i -lt ${#scores[@]} ]\n    do\n      \
    \  # check if our counter value is equal to the length of our scores array\n \
    \       if [ $i -eq ${#scores[@]} ]\n        then\n            # if we reach the\
    \ end of the scores array\n            break\n        fi\n        # loop through\
    \ our guesses array\n        for j in \"${!guesses[@]}\"\n        do\n       \
    \     # check if our counter value is equal to the length of our scores array\n\
    \            if [ $i -eq ${#guesses[@]} ]\n            then\n                #\
    \ if we reach the end of the scores array\n                break\n           \
    \ fi\n            # if the guess and score are equal, we have a match\n      \
    \      if [ ${scores[$i]} = ${guesses[$j]} ]\n            then\n             \
    \   # increase the counter by one\n                ((i++))\n                break\n\
    \            fi\n        done\n    done\n    # if the counter equals our length\
    \ of the scores array\n    if [ $i -eq ${#scores[@]} ]\n    then\n        # return\
    \ the empty array\n        local output\n        output=()\n        return output\n\
    \    fi\n    \n    # initialize an empty array to store our outputs\n    local\
    \ output\n    output=()\n    # go through our scores array\n    for j in \"${!scores[@]}\"\
    \n    do\n        # if our guess was correct\n        if [ ${guesses[$j]} = $${scores[$i]}\
    \ ]\n        then\n            # add the value to our output array\n         \
    \   output+=(\"$i\")\n            break\n        fi\n    done\n    # return the\
    \ output array\n    local output\n    output=(\"${output[@]}\")\n    return \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp77a0d6nx.sh: line 23: local: `-a'': not a valid identifier

    /tmp/tmp77a0d6nx.sh: line 24: local: `-a'': not a valid identifier

    /tmp/tmp77a0d6nx.sh: line 61: return: output: numeric argument required

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local guesses\n  local\
    \ scores\n\n  guesses=$($@)\n  scores=$($@)\n  local num_scores=$#\n  local num_guesses=$(($num_scores\
    \ - 1))\n  local result\n\n  if ((num_guesses > 0)); then\n    result=(\"${guesses[@]}\"\
    \ \"${scores[@]}\")\n    local i\n    for ((i = 0; i < num_guesses; i++)); do\n\
    \      if ((result[i] != result[i+1]));then\n        result[i]=$(echo \"${result[i]}\"\
    \ | sed 's/^-//')\n        result[i+1]=$(echo \"${result[i+1]}\" | sed 's/^-//')\n\
    \      fi\n    done\n    result[$num_guesses]=\"\\\"${result[$num_guesses]}\\\"\
    \"\n  else\n    result=(\"${guesses[@]}\" \"${scores[@]}\")\n  fi\n\n  return\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfzazd6t4.sh: line 21: 1: command not found

    /tmp/tmpfzazd6t4.sh: line 22: 1: command not found

    /tmp/tmpfzazd6t4.sh: line 41: return: : numeric argument required

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local a b c d\n  a=$1\n\
    \  b=$2\n  c=()\n  d=()\n  for i in $a;do\n     case \"$i\" in\n         0) c=(\
    \ $(c+1) $i)\n           ;;\n         1) d=( $(d+1) $i)\n           ;;\n     \
    \    2) c=( $(c+1) $i)\n           ;;\n         3) d=( $(d+1) $i)\n          \
    \ ;;\n         4) d=( $(d+1) $i)\n           ;;\n         5) d=( $(d+1) $i)\n\
    \           ;;\n         6) d=( $(d+1) $i)\n           ;;\n         7) d=( $(d+1)\
    \ $i)\n           ;;\n         8) d=( $(d+1) $i)\n           ;;\n         9) d=(\
    \ $(d+1) $i)\n           ;;\n         10) d=( $(d+1) $i)\n           ;;\n    \
    \     11) d=( $(d+1) $i)\n           ;;\n         12) d=( $(d+1) $i)\n       \
    \    ;;\n         13) d=( $(d+1) $i)\n           ;;\n         14) d=( $(d+1) $i)\n\
    \           ;;\n         15) d=( $(d+1) $i)\n           ;;\n         16) d=( $(d+1)\
    \ $i)\n           ;;\n         17) d=( $(d+1) $i)\n           ;;\n         18)\
    \ d=( $(d+1) $i)\n           ;;\n         19) d=( $(d+1) $i)\n           ;;\n\
    \         20) d=( $(d+1) $i)\n           ;;\n         21) d=( $(d+1) $i)\n   \
    \        ;;\n         22) d=( $(d+1) $i)\n           ;;\n         23) d=( $(d+1)\
    \ $i)\n           ;;\n         24) d=( $(d+1) $i)\n           ;;\n         25)\
    \ d=( $(d+1) $i)\n           ;;\n         26) d=( $(d+1) $i)\n           ;;\n\
    \         27) d=( $(d+1) $i)\n           ;;\n         28) d=( $(d+1) $i)\n   \
    \        ;;\n         29) d=( $(d+1) $i)\n           ;;\n         30) d=( $(d+1)\
    \ $i)\n           ;;\n         31) d=( $(d+1) $i)\n           ;;\n         32)\
    \ d=\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate\
    \ \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"\
    1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3\
    \ 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnq5r_7ap.sh: line 90: syntax error near unexpected token `}''

    /tmp/tmpnq5r_7ap.sh: line 90: `}''

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local score guess diff\
    \ diff len\n    score=$1; shift\n    guess=$@; shift\n    diff=0\n    for len\
    \ in $(seq 1 $#); do\n        diff=$(($diff + $(expr \"$guess\" - $score)))\n\
    \        score=$(($score - $(expr \"$guess\" - $score)))\n        guess=$(echo\
    \ \"$guess $score\" | sort -n | tail -n1)\n    done\n    echo $diff\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  arr1=${1//[[ \\t]/}\n \
    \ arr2=${2//[[ \\t]/}\n  diff <(printf '%s\\n' \"${arr1[@]}\" | sort -n) <(printf\
    \ '%s\\n' \"${arr2[@]}\" | sort -n)\n}\n\ncandidate() {\n    compare \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\"\
    ) = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") =\
    \ \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores=$1\n   \
    \ local guesses=$2\n\n    local score\n    local guess\n\n    local results\n\n\
    \    results=()\n    for score in $scores; do\n        local guess\n        for\
    \ guess in $guesses; do\n            if [ ${score} == ${guess} ] ; then\n    \
    \            if [ ${guess} == ${score} ] ; then\n                    results[${#results}]=0\n\
    \                else\n                    results[${#results}]=${guess} - ${score}\n\
    \                fi\n                break\n            fi\n        done\n   \
    \ done\n\n    printf '%s\\n' \"${results[@]}\"\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    # split the strings into\
    \ lists of numbers\n    IFS=$' \\t\\n' read -r -a arr1 <<< \"$1\"\n    IFS=$'\
    \ \\t\\n' read -r -a arr2 <<< \"$2\"\n    # loop through every pair\n    for ((i\
    \ = 0; i < ${#arr1[*]}; ++i)); do\n        for ((j = 0; j < ${#arr2[*]}; ++j));\
    \ do\n            if [[ ${arr1[i]} != ${arr2[j]} ]]; then\n                # return\
    \ difference\n                echo \"${arr1[i]} - ${arr2[j]}\"\n             \
    \   return 0\n            fi\n        done\n    done\n    # all matches have been\
    \ found\n    return 1\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local guesses scores\
    \ correct offset i len\n    guesses=( $1 )\n    scores=( $2 )\n    offset=1\n\
    \    len=${#guesses}\n    correct=false\n    \n    \n    for (( i = 0; i < len;\
    \ i++ )); do\n        if [[ -n \"${guesses[i]}\" ]]; then\n            if [[ \"\
    ${guesses[i]}\" == \"${scores[i]}\" ]]; then\n                correct=true\n \
    \           fi\n            offset=$((offset+1))\n        fi\n    done\n    \n\
    \    if [[ \"${correct}\" == true ]]; then\n        correct=\"0\"\n    else\n\
    \        correct=$(( $offset ))\n    fi\n    \n    for (( i = 0; i < len; i++\
    \ )); do\n        if [[ -n \"${guesses[i]}\" ]]; then\n            if [[ \"${guesses[i]}\"\
    \ == \"${scores[i]}\" ]]; then\n                correct=false\n            fi\n\
    \        fi\n    done\n    \n    return \"$correct\"\n}\n\ncandidate() {\n   \
    \ compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\"\
    \ \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"\
    0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\"\
    ) = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxp8hx9tp.sh: line 49: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local -n score=$1\n \
    \   local -n guess=$2\n    local result=($(\n        local -a score; local -a\
    \ guess\n        local i=0\n        while [ $i -lt $#score ]; do score[$i]=$((${score[$i]}+${guess[$i]}))\n\
    \        done\n        if [ ${#score[@]} -gt ${#guess[@]} ]; then echo \"guesses\
    \ must be of equal length\"; return 1; fi\n        for i in ${!score[@]}; do if\
    \ [ ${score[i]} -gt ${guess[i]} ]; then result[i]=$((${score[i]}-${guess[i]}))\n\
    \        fi done\n    ))\n    declare -a distance\n    for i in ${!result[@]};\
    \ do distance[$i]=$((${result[i]}))\n    done\n    printf '['\n    for i in ${!distance[@]};\
    \ do printf '\"%d\"' ${distance[i]}; done\n    printf ']'\n}\n\ncandidate() {\n\
    \    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\
    \ 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\"\
    \ \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2\
    \ -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0\
    \ 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpq6lptb9q.sh: line 18: local: `1 2 3 4 5 1'': invalid variable name
    for name reference

    /tmp/tmpq6lptb9q.sh: line 19: local: `1 2 3 4 2 -2'': invalid variable name for
    name reference

    /tmp/tmpq6lptb9q.sh: line 31: [: 2score: integer expression expected

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local -n A=(\"${1//\"\
    \ \"/}\")\n    local -n B=(\"${2//\" \"/}\")\n\n    echo \"${#A[@]} == ${#B[@]}\"\
    \n    for i in \"${!A[@]}\"; do\n        local -n A=$A[i]\n        local -n B=$B[i]\n\
    \        local a\n        local b\n        if [[ $B == 0 ]]; then\n          \
    \  echo \"$A - $B == 0\"\n            echo \"$A - $B = 0\"\n            echo \"\
    $A - $B = 0\"\n            echo \"$A - $B = 0\"\n            echo \"$A - $B =\
    \ 0\"\n            echo \"$A - $B = 0\"\n        else\n            echo \"$A -\
    \ $B = $((a-b))\"\n            echo \"$A - $B = $((a-b))\"\n            echo \"\
    $A - $B = $((a-b))\"\n            echo \"$A - $B = $((a-b))\"\n            echo\
    \ \"$A - $B = $((a-b))\"\n            echo \"$A - $B = $((a-b))\"\n        fi\n\
    \    done\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo3lw3ox0.sh: line 18: local: A: reference variable cannot be an
    array

    /tmp/tmpo3lw3ox0.sh: line 19: local: B: reference variable cannot be an array

    /tmp/tmpo3lw3ox0.sh: line 23: local: `123451[i]'': invalid variable name for name
    reference

    /tmp/tmpo3lw3ox0.sh: line 24: local: `12342-2[i]'': invalid variable name for
    name reference

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses\n\
    \  local n i j diff score\n  score=$(($(($#scores -lt $#guesses)+1))) #count up\
    \ from the length of the arrays\n  guesses=($(echo \"$2\" | sed -e 's/ /\\n/g'))\n\
    \  scores=$(($(($#scores -lt $#guesses)+1))) #count up from the length of the\
    \ arrays\n  while [ $i -lt $scores ]; do # for each of the scores\n    diff=$(echo\
    \ \"$guess\" | awk '{print $1 - $score}')\n    if (( $diff > 0 )); then # if diff\
    \ is positive\n      guesses[i]=$diff\n      (( i=i+1 )) #move on to the next\
    \ score\n    else # otherwise, if diff is negative\n      guesses[i]=$(echo \"\
    $diff\" | bc)\n      (( i=i+1 )) #move on to the next score\n    fi\n  done\n\
    \  return\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0lupowof.sh: command substitution: line 20: syntax error near unexpected
    token `+1''

    /tmp/tmp0lupowof.sh: command substitution: line 20: `($#scores -lt $#guesses)+1''

    /tmp/tmp0lupowof.sh: command substitution: line 22: syntax error near unexpected
    token `+1''

    /tmp/tmp0lupowof.sh: command substitution: line 22: `($#scores -lt $#guesses)+1''

    /tmp/tmp0lupowof.sh: line 23: [: -lt: unary operator expected

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\
    \ score\n    scores=${1:--;}\n    guesses=${2:--;}\n    local result=0\n    for\
    \ ((i=0; i<${#scores[@]}; i++)); do\n        score ${scores[i]}\n        if [[\
    \ $score == \"--\" ]]; then\n            result=${result}\n        fi\n    done\n\
    \    for ((i=0; i<${#guesses[@]}; i++)); do\n        guess=${guesses[i]}\n   \
    \     if [[ $guess == \"--\" ]]; then\n            result=${result}\n        fi\n\
    \    done\n    if [[ $result == 0 ]]; then\n        result=$(expr ${result} -\
    \ ${#scores[@]})\n    fi\n    for ((i=0; i<${#guesses[@]}; i++)); do\n       \
    \ if [[ $guesses[i] == \"--\" ]]; then\n            result=${result}\n       \
    \ fi\n    done\n    if [[ $result == 0 ]]; then\n        result=$(expr ${result}\
    \ - ${#guesses[@]})\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxaqnlaw5.sh: line 23: score: command not found

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\n\
    \    scores=$1\n    guesses=$2\n    local nscores=$#scores\n    local nguesses=$#guesses\n\
    \    local index\n    local score\n    local guessed\n    for (( index=0; index<nscores;\
    \ index++ )); do\n        score=${scores[$index]} \n        guessed=${guesses[$index]}\
    \ \n        if [[ \"${score}\" -eq \"${guessed}\" ]]; then\n            guessed=\"\
    ${score}\"\n        fi\n        echo \"${index}. ${score} -> ${guessed}\"\n  \
    \  done\n    for (( index=0; index<nguesses; index++ )); do\n        guessed=${guesses[$index]}\
    \ \n        guessed=${guessed}\n        echo \"${index}. ${guessed} -> ${score}\"\
    \n    done\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpp2ghodpb.sh: line 26: ((: 2scores: value too great for base (error
    token is "2scores")

    /tmp/tmpp2ghodpb.sh: line 34: ((: 2guesses: value too great for base (error token
    is "2guesses")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  declare -A scores\n  declare\
    \ -A guesses\n  declare -a result\n\n  for i in $(seq 0 $((${#@}-1))); do\n  \
    \  scores[$i]=$1[i]\n    guesses[$i]=$2[i]\n  done\n\n  for i in $(seq 0 $((${#@}-1)));\
    \ do\n    result[$i]=$(echo ${guesses[$i]} ${scores[$i]} | bc -l)\n  done\n\n\
    \  for i in $(seq 0 $((${#@}-1))); do\n    echo \"${guesses[$i]} ${scores[$i]}\
    \ => ${result[$i]}\"\n  done\n\n  for i in $(seq 0 $((${#@}-1))); do\n    if [\
    \ ${guesses[$i]} = \"${scores[$i]}\" ]; then\n      echo 0\n    else\n      echo\
    \ $((${result[$i]} - ${scores[$i]}))\n    fi\n  done\n}\n\ncandidate() {\n   \
    \ compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\"\
    \ \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"\
    0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\"\
    ) = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    /tmp/tmpc_qipo9l.sh: line 36: [: too many arguments

    /tmp/tmpc_qipo9l.sh: line 39: - 1 2 3 4 5 1[i]: syntax error in expression (error
    token is "2 3 4 5 1[i]")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal score guess\n\tlocal\
    \ -n arr=\n\tlocal -n index=0\n\twhile [ $# -gt 0 ]; do\n\t\tscore=$1\n\t\tshift\n\
    \t\twhile [ $# -gt 0 ]; do\n\t\t\tguess=$1\n\t\t\tshift\n\t\t\tarr[$index]=$(compareGuessed\
    \ $score $guess &>/dev/null || compareResult $guess $score &>/dev/null)\n\t\t\
    done\n\t\tindex=$((index+1))\n\tdone\n\techo \"${arr[@]}\"\n}\n\ncandidate() {\n\
    \    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\
    \ 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\"\
    \ \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2\
    \ -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0\
    \ 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfdnz8va9.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpfdnz8va9.sh: line 20: local: `0'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local a=\"$1\" b=\"$2\"\
    \n  local len1=${#a} len2=${#b}\n  local diffs=()\n\n  if [ ${len1} -ne ${len2}\
    \ ]; then\n    echo \"The lengths of both lists do not match.\"\n    return 1\n\
    \  fi\n\n  for i in $(seq 0 $(($len1 - 1))); do\n    local score=${a[i]}\n   \
    \ local guess=${b[i]}\n    # echo \"$score $guess\"\n    if [ -z \"$score\" ];\
    \ then\n      diffs+=(0)\n    else\n      diffs+=($(diff --brief \"$score\" \"\
    $guess\"))\n    fi\n  done\n  # echo \"${diffs[*]}\"\n  echo \"${diffs[*]}\"\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal scores guesses result\n\
    \tscores=$(echo $1 | tr ' ' '\\n' | sort -n | uniq)\n\tguesses=$(echo $2 | tr\
    \ ' ' '\\n' | sort -n | uniq)\n\tresult=$(echo $scores | awk '{print $1}')\n\t\
    for i in $(seq 0 $(($#scores-1))); do\n\t\tlet result=$((result-$(echo $guesses\
    \ | grep $scores[$i])))\n\t\tlet result=$((result-$(echo $guesses | grep $scores[$i])))\n\
    \tdone\n\techo $(echo $result | awk '{printf \"\\\"%d\\\"\", abs($1)}')\n}\n\n\
    candidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqeoqdwm9.sh: line 22: 2scores: value too great for base (error
    token is "2scores")

    awk: cmd. line:1: (FILENAME=- FNR=1) fatal: function `abs'' not defined

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\n\
    \    scores=$1\n    guesses=$2\n    # create temporary file\n    tempfile=$(mktemp)\n\
    \    # loop through both lists\n    for (( i = 0; i<${#scores}; i++ )); do\n \
    \       for (( j=0; j<${#guesses}; j++ )); do\n            if [ ${scores[$i]}\
    \ -eq ${guesses[$j]} ]; then\n                if [ $(echo \"$i $j\" | grep -i\
    \ \"^[0-9]\") ]; then\n                    echo \"$i\"\n                else\n\
    \                    echo \"$j\"\n                fi\n                break\n\
    \            fi\n        done\n    done\n    exit\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 27: [: 1: unary operator expected

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 27: [: 2: unary operator expected

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 27: [: 3: unary operator expected

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 27: [: 4: unary operator expected

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 27: [: 5: unary operator expected

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 27: [: 6: unary operator expected

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 27: [: 7: unary operator expected

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 27: [: 8: unary operator expected

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 27: [: 9: unary operator expected

    /tmp/tmp8x87kl4x.sh: line 26: [: too many arguments

    /tmp/tmp8x87kl4x.sh: line 27: [: 10: unary operator expected

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  # $1 is the guesses\n \
    \ # $2 is the scores\n  # return an array of the same length denoting how far\
    \ off each guess was. If they have guessed correctly,\n  # the value is 0, and\
    \ if not, the value is the absolute difference between the guess and the score.\n\
    \  IFS=' ' read -r -a guess < <(echo \"$1\")\n  IFS=' ' read -r -a score < <(echo\
    \ \"$2\")\n  mapfile -t guess < <(echo \"${guess[@]}\")\n  mapfile -t score <\
    \ <(echo \"${score[@]}\")\n  local result\n  for ((i=0; i<${#guess[@]}; i++));\
    \ do\n    local diff=$((${score[i]} - ${guess[i]}))\n    if [[ ${diff} == 0 ]];\
    \ then\n      result=\"$i\"\n    else\n      result=\"$diff\"\n    fi\n  done\n\
    \  echo \"${result[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0\
    \ 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0\
    \ 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate\
    \ \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphp_z0pcg.sh: line 28: 1 2 3 4 2 -2 - 1 2 3 4 5 1: syntax error
    in expression (error token is "2 3 4 2 -2 - 1 2 3 4 5 1")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    if [[ \"$#\" -ne 2 ]];\
    \ then\n        echo \"Usage: $(basename $0) <list-1> <list-2>\"\n        exit\
    \ 1\n    fi\n    \n    if [[ \"$1\" =~ \" \" ]]; then\n        echo \"Illegal\
    \ list: No whitespace.\" >&2\n        exit 1\n    fi\n    \n    declare -A arrA\n\
    \    declare -A arrB\n    \n    # Iterate through both lists, storing scores and\
    \ guesses\n    i=0\n    \n    IFS=$'\\n'\n    for val in $*; do\n        arrA[$i]=$val\n\
    \        (( i++ ))\n    done\n    IFS=\n\n    i=0\n    \n    IFS=$'\\n'\n    for\
    \ val in $*; do\n        arrB[$i]=$val\n        (( i++ ))\n    done\n    IFS=\n\
    \n    # Iterate through both lists, storing scores and guesses\n    declare -i\
    \ i\n    for val in \"${!arrA[@]}\"; do\n        # Guessed correctly\n       \
    \ if [[ -z ${arrB[$val]} ]]; then\n            echo \"0\"\n        # Not guessed\
    \ correctly\n        else\n            echo \"${arrB[$val] - arrA[$val]}\"\n \
    \       fi\n    done\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'Illegal list: No whitespace.

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local score guesses\n\
    \    score=\"${1#*=} ${2#*=} \" # Get rid of everything up to the first space\n\
    \    guesses=$( echo \"$1\" | sed \"s/ /, /g\" | sed \"s/^/\\\"/g\" | sed \"s/$/\\\
    \"/g\" | paste -s -d,)\n    local result=( )\n    for i in $(seq 0 ${#score[@]});\
    \ do\n        local guess=\"${guesses[i]}\"\n        local score=\"${score[i]}\"\
    \n        if [[ \"$score\" == \"\" ]]; then\n            result+=(\"\\\"${guess}\\\
    \"\") # Don't add blank guesses\n        elif [[ ${guess:0:1} == \"-\" ]]; then\n\
    \            result+=(\"\\\"${guess}\\\"\") # Don't add negative guesses\n   \
    \     elif (( guess == score )); then\n            result+=(\"\\\"0\\\"\")\n \
    \       else\n            result+=(\"\\\"${score:=$(echo \"$score - $guess\" |\
    \ bc)}\\\"\")\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7jw_nxc2.sh: line 29: ((: "1, 2, 3, 4, 5, 1": syntax error: operand
    expected (error token is ""1, 2, 3, 4, 5, 1"")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    # remove blanks\n   \
    \ local i a b\n    for ((a=0; a<${#1[@]}; a++));\n    do\n\t[[ ${#b[@]} -eq 0\
    \ ]] && b=\"${1}\"\n\t[[ ${#b[@]} -eq 0 ]] && break\n\t[[ ${b[$a]} -eq 0 ]] ||\
    \ b[$a]=\"${b[$a]}\"\n    done\n    # sort list by number\n    local j k n\n \
    \   for ((a=0; a<${#1[@]}; a++));\n    do\n\tj=$a\n\tk=a\n\twhile ((j<${#b[@]}\
    \ && b[j]>0)); do\n\t    ((k--))\n\t    j=$((k+1))\n\tdone\n\t((k--))\n\twhile\
    \ ((j>0) && (b[j]<0)); do\n\t    ((k--))\n\t    j=$((k+1))\n\tdone\n\tb[$k]=\"\
    ${b[$j]}\"\n    done\n    # remove blanks\n    local i\n    for ((a=0; a<${#1[@]};\
    \ a++));\n    do\n\t[[ ${#b[@]} -eq 0 ]] && b=\"${1}\"\n\t[[ ${#b[@]} -eq 0 ]]\
    \ && break\n\t[[ ${b[$a]} -eq 0 ]] || b[$a]=\"${b[$a]}\"\n    done\n    local\
    \ j\n    for ((a=0; a<${#1[@]}; a++));\n    do\n\tj=$a\n\twhile ((j>0) && (b[j]<0));\
    \ do\n\t    ((j--))\n\tdone\n\tb[$j]=\"${b[$j]}\"\n    done\n    # sort list by\
    \ number\n    local k n\n    for ((a=0; a<${#1[@]}; a++));\n    do\n\tk=a\n\t\
    while ((k<${#b[@]} && b[k]>0)); do\n\t    ((k++))\n\tdone\n\t((k++))\n\twhile\
    \ ((k<${#b[@]} && b[k]<0)); do\n\t    ((k++))\n\tdone\n\tb[$k]=\"${b[$k]}\"\n\
    \    done\n    # convert array to string\n    local tmp\n    for ((a=0; a<${#1[@]};\
    \ a++));\n    do\n\t\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx8uphqqc.sh: line 79: syntax error near unexpected token `}''

    /tmp/tmpx8uphqqc.sh: line 79: `}''

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local -a scores\n  local\
    \ -a guesses\n  local -r lines=$#\n\n  if [ $# -ne 2 ]; then\n    echo \"Usage:\
    \ $0 [scores] [guesses]\"\n    exit 1\n  fi\n  scores=$1\n  guesses=$2\n\n  echo\
    \ \"Comparing $scores to $guesses\"\n  local i j\n  local -a score\n  local -a\
    \ guesses\n  local offset\n  local diff\n  local err\n\n  # create an array of\
    \ the scores and guesses\n  while (( i < $lines )); do\n    score=( \"${scores}\"\
    \ ); guesses=( \"${guesses}\" )\n    (( i++ ))\n    score[i]=${score[i]#*=} #\
    \ remove leading spaces\n    guesses[i]=${guesses[i]#*=} # remove leading spaces\n\
    \  done\n\n  # compare them and collect results\n  for (( i = 0; i < $lines; i++\
    \ )); do\n    diff=0\n    if (( guesses[i] == score[i] )); then\n      offset=0\n\
    \    else\n      offset=$(( guesses[i] - score[i] ))\n      if (( offset < 0 ));\
    \ then\n        offset=$(( $offset + $lines ))\n      fi\n    fi\n    err=\"$i\
    \ : $diff : $offset\"\n    echo \"$err\"\n    (( diffs[${#diffs}] )=( $diff ))\n\
    \  done\n\n  echo -n \"\"\n  echo -n \"Scores : \"\n  declare -p scores\n  echo\
    \ -n \"Guesses : \"\n  declare -p guesses\n  echo -n \"Diffs  : \"\n  declare\
    \ -p diffs\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw8h1ve50.sh: line 58: syntax error near unexpected token `=''

    /tmp/tmpw8h1ve50.sh: line 58: `    (( diffs[${#diffs}] )=( $diff ))''

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  declare -i i j \n  local\
    \ -a arr1 arr2\n  local -a arr1length arr2length\n  local -a array\n\n  arr1length=${#arr1[@]}\n\
    \  arr2length=${#arr2[@]}\n\n  arr1=( ${arr1// / } )\n  arr2=( ${arr2// / } )\n\
    \n  # create array of correct length\n  array=()\n  for ((i=0;i<${#arr1[@]};++i));\
    \ do\n    array+=(\"0\")\n  done\n\n  # determine if all guesses are correct\n\
    \  for ((j=0;j<${#arr1[@]};++j)); do\n    array[j]=${arr2[j]}\n  done\n\n  # determine\
    \ if the array is completely correct\n  if ((${#array[@]}==0)); then\n    echo\
    \ \"0\"\n    return\n  fi\n\n  # set correct and incorrect guesses\n  correct=0\n\
    \  wrong=0\n\n  # determine number of incorrectly guessed guesses\n  for ((i=0;i<${#arr1[@]};++i));\
    \ do\n    if [[ ${array[i]} == \"0\" ]]; then\n      wrong=$((wrong+1))\n    else\n\
    \      correct=$((correct+1))\n    fi\n  done\n\n  # return array of correct guesses\n\
    \  echo \"${arr1[@]}\"\n  echo \"${arr2[@]}\"\n  echo \"$wrong\"\n  echo \"$correct\"\
    \n  echo \"$wrong/$correct\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    # $1 is list\n    # $2\
    \ is list\n\n    local list result\n    local i\n    local diff\n\n    list=(\
    \ \"$1\" )\n    result=( \"$2\" )\n\n    for ((i=0; i<${#list[@]}; i++)); do\n\
    \        # echo $i $list[$i]\n        if [ \"$list[$i]\" == \"$result[$i]\" ];\
    \ then\n            # echo 0\n            diff =0\n        else\n            diff\
    \ =\"$(( $list[$i] - $result[$i] ))\"\n            # echo ${diff}\n        fi\n\
    \        # echo $diff\n        result[$i]=$diff\n    done\n\n    printf \"%s\\\
    n\" \"${result[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0y_9lji3.sh: line 34: 1 2 3 4 5 1[0] - 1 2 3 4 2 -2[0] : syntax
    error in expression (error token is "2 3 4 5 1[0] - 1 2 3 4 2 -2[0] ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local score guess\n  score=${1//\
    \ /}\n  guess=${2// /}\n  local result offset\n  local diff\n  result=\"\"\n \
    \ offset=0\n  for ((i=1; i<$#; i++)); do\n    if [ $guess = $score ]; then\n \
    \     diff=\"0\"\n      break\n    fi\n    diff=$((diff + $guess - $score))\n\
    \  done\n  for ((i=1; i<$#; i++)); do\n    if [ $guess = $score ]; then\n    \
    \  offset=$((offset + 1))\n      break\n    fi\n  done\n  result=$(echo $guess\
    \ | tr -d '-')\n  if [ $offset -eq 1 ]; then\n    result=\"${result} \\\"$diff\\\
    \"\"\n  else\n    result=\"${result} \\\"$diff\\\", \\\"$diff\\\"\"\n  fi\n  echo\
    \ $result\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  if [[ \"$#\" -ne 2 ]];\
    \ then\n    echo \"Invalid input: compare takes two arguments\"\n    exit 1\n\
    \  fi\n\n  local score\n  local guess\n  local diff\n  local result\n\n  # parse\
    \ first argument\n  local lines=( $1 )\n  # parse second argument\n  local glines=(\
    \ $2 )\n\n  local index\n\n  # go through each element in both lists and compare\
    \ them\n  for index in \"${!lines[@]}\"; do\n    score=${lines[index]}\n    guess=${glines[index]}\n\
    \    diff=$(( abs( ${score} - ${guess} ) ))\n    result=$(( $result $diff ))\n\
    \  done\n\n  # return result\n  echo $result\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfmaf4cpm.sh: line 39: abs( 1 - 1 ) : syntax error in expression
    (error token is "( 1 - 1 ) ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  # split $1 into array of\
    \ strings\n  mapfile -t arr1 <<< \"$1\"\n  # split $2 into array of strings\n\
    \  mapfile -t arr2 <<< \"$2\"\n\n  # store number of elements in each array\n\
    \  n1=${#arr1[*]}\n  n2=${#arr2[*]}\n\n  # create empty array to store result\n\
    \  res=()\n\n  # loop through each array\n  for ((i=0; i < n1; i++)); do\n   \
    \ # store current index in result array\n    res[$i]=''\n  done\n\n  # check whether\
    \ each guess in arr1 was in arr2\n  for ((i=0; i < n1; i++)); do\n    # check\
    \ whether current element in arr1 is in arr2\n    arr2Exists=false\n    for ((j=0;\
    \ j < n2; j++)); do\n      arr2Exists=$arr2Exists || [[ \"${arr2[j]}\" == \"${arr1[i]}\"\
    \ ]]\n    done\n    if [ \"${arr2Exists}\" == \"true\" ]; then\n      # set result\
    \ to 0 (incorrect guess)\n      res[i]=\"0\"\n    else\n      # set result to\
    \ difference between score and guess (correct guess)\n      res[i]=${arr2[i]}-${arr1[i]}\n\
    \    fi\n  done\n\n  # return result array\n  printf '%s\\n' \"${res[@]}\"\n}\n\
    \ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal -a scores\n\tlocal\
    \ -a guesses\n\tlocal -a result\n\tlocal i score guess\n\tscores=($1)\n\tguesses=(${@:2})\
    \ \n\tfor ((i = 0; i < ${#scores[@]}; ++i)); do\n\t\tscore=${scores[i]}\n\t\t\
    guess=${guesses[i]}\n\t\t((result[i] = (abs((score - guess) | 0)))) \n\tdone\n\
    \techo \"${result[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0\
    \ 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0\
    \ 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate\
    \ \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1dh44wj3.sh: line 27: ((: result[i] = (abs((score - guess) | 0)):
    missing `)'' (error token is "((score - guess) | 0))")

    /tmp/tmp1dh44wj3.sh: line 27: ((: result[i] = (abs((score - guess) | 0)): missing
    `)'' (error token is "((score - guess) | 0))")

    /tmp/tmp1dh44wj3.sh: line 27: ((: result[i] = (abs((score - guess) | 0)): missing
    `)'' (error token is "((score - guess) | 0))")

    /tmp/tmp1dh44wj3.sh: line 27: ((: result[i] = (abs((score - guess) | 0)): missing
    `)'' (error token is "((score - guess) | 0))")

    /tmp/tmp1dh44wj3.sh: line 27: ((: result[i] = (abs((score - guess) | 0)): missing
    `)'' (error token is "((score - guess) | 0))")

    /tmp/tmp1dh44wj3.sh: line 27: ((: result[i] = (abs((score - guess) | 0)): missing
    `)'' (error token is "((score - guess) | 0))")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  echo \"$1 $2\" | sort -u\
    \ | xargs -n 1 | while read score; do\n    score=$( echo \"$score\" | sed 's/^0\\\
    ([0-9]*\\)$/\"\\1\"/g' )\n    guess=$( echo \"$2\" | sed 's/^0\\([0-9]*\\)$/\"\
    \\1\"/g' )\n    if [ \"$score\" -eq \"$guess\" ]\n    then\n      echo \"0\"\n\
    \    elif [ \"$score\" -gt \"$guess\" ]\n    then\n      echo \"$(($score - $guess))\"\
    \n    else\n      echo \"$(($guess - $score))\"\n    fi\n  done\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwp9ns3ka.sh: line 21: [: 1 2 3 4 2 -2: integer expression expected

    /tmp/tmpwp9ns3ka.sh: line 24: [: 1 2 3 4 2 -2: integer expression expected

    /tmp/tmpwp9ns3ka.sh: line 28: 1 2 3 4 2 -2 - 1: syntax error in expression (error
    token is "2 3 4 2 -2 - 1")

    xargs: echo: terminated by signal 13

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses\n\
    \  scores=$1\n  guesses=$2\n  \n  local diff\n  diff=()\n\n  # get length of both\
    \ lists and calculate diff array\n  local len\n  len=`echo \"${scores}\" | wc\
    \ -l | awk '{print $1}'`\n  \n  for ((i=0; i<${#scores[@]}; i++)); do\n    diff[i]=0\n\
    \    # compare with guesses list\n    if [[ ${guesses[$i]} == ${scores[$i]} ]];\
    \ then\n      # no difference needed, so no diff stored\n      diff[i]=0\n   \
    \ else\n      # difference between score and guess, is absolute difference\n \
    \     diff[i]=$((${guesses[$i]} - ${scores[$i]}))\n    fi\n  done\n\n  # return\
    \ diff array \n  for ((i=0; i<${#diff[@]}; i++)); do\n    if [[ ${diff[$i]} -lt\
    \ 0 ]]; then\n      diff[$i]=0\n    fi\n  done\n\n  echo ${diff[@]}\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdcfcy_u8.sh: line 37: 1 2 3 4 2 -2 - 1 2 3 4 5 1: syntax error
    in expression (error token is "2 3 4 2 -2 - 1 2 3 4 5 1")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local score_str=$1\n\
    \    local guesses_str=$2\n    # split score_str into words\n    local scores=($score_str)\n\
    \    # split guesses_str into words\n    local guesses=(${guesses_str//\" \" })\n\
    \    \n    # compare the score to each guess\n    for i in $(seq 0 \"${#scores[@]}\"\
    )\n    do\n        if [[ \"${guesses[i]}\" == \"${scores[i]}\" ]]\n        then\n\
    \            # guess and score match correctly\n            return 0\n       \
    \ else\n            # guess is wrong\n            local diff_i=$(($i-1))\n   \
    \         local diff_j=$(($i))\n            local diff=$(($scores[$i] - $guesses[$diff_j]))\n\
    \            local diff_j=$(($i))\n            local diff=$(($guesses[$diff_i]\
    \ - $scores[$diff_j]))\n            \n            local diff=$(($diff - $guesses[$i]))\n\
    \            \n            local diff=$(($diff - $scores[$i]))\n            \n\
    \            local diff=$(($diff - $guesses[$diff_i]))\n            \n       \
    \     local diff=$(($diff - $scores[$diff_i]))\n            \n            local\
    \ diff=$(($diff - $guesses[$i]))\n            \n            local diff=$(($diff\
    \ - $scores[$i]))\n            \n            local diff=$(($diff - $guesses[$diff_i]))\n\
    \            \n            local diff=$(($diff - $scores[$diff_i]))\n        \
    \    \n            local diff=$(($diff - $guesses[$i]))\n            \n      \
    \      local diff=$(($diff - $scores[$i]))\n            \n            local diff=$(($diff\
    \ - $guesses[$diff_i]))\n            \n            local diff=$(($diff - $scores[$diff_i]))\n\
    \            \n            local diff=$(($diff - $guesses[$i]))\n            \n\
    \            local diff=$(($diff - $scores[$i]))\n            \n            local\
    \ diff=$(($diff - $guesses[$diff_i]))\n            \n            local diff=$(($diff\
    \ - $scores[$diff_i]))\n            \n            local diff=$(($diff - $guesses[$i]))\n\
    \            \n            local diff=$(($diff - $scores[$i]))\n            \n\
    \            local diff=$(($diff - $guesses[$diff_i]))\n            \n       \
    \     local diff=$(($diff - $scores[$diff_i]))\n            \n            local\
    \ diff=$(($diff - \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvmhh3zs5.sh: line 80: unexpected EOF while looking for matching
    `)''

    /tmp/tmpvmhh3zs5.sh: line 96: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores=$1\n   \
    \ local guesses=$2\n    # Initialize scores to an array of 0s denoting how far\
    \ off each guess was\n    local answers=$(for i in $(seq 0 $#guesses); do echo\
    \ $(($(eval echo \\${$i}) - $(eval echo \\${scores})))\"; done)\n    # Sum all\
    \ guesses up and subtract from all scores\n    local result=$(echo $answers |\
    \ tr -d '[[:space:]]' | xargs -n 1 echo)\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_8w5gxet.sh: line 36: unexpected EOF while looking for matching
    `"''

    /tmp/tmp_8w5gxet.sh: line 40: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local result=\"\"\n \
    \   local score_count=0\n    local score_guess=0\n    local score_total=0\n  \
    \  local guesses\n    local score_list_len\n    local score_list_guesses\n   \
    \ local guesses_list_len\n    local guesses_list_guesses\n    local score_list_tmp\n\
    \    local guesses_list_tmp\n    local guess\n    local score\n    local guesses\n\
    \    local score_list_len_str\n    local guesses_list_len_str\n    local score_list_guesses_str\n\
    \    local guesses_list_guesses_str\n    local score_tmp\n    local guesses_tmp\n\
    \    local score_list_tmp_idx\n    local guesses_list_tmp_idx\n    local score_list_tmp_idx_str\n\
    \    local guesses_list_tmp_idx_str\n    local score_list_tmp_idx_guess\n    local\
    \ guesses_list_tmp_idx_guess\n    local score_list_tmp_idx_guess_str\n    local\
    \ guesses_list_tmp_idx_guess_str\n    local score_list_tmp_idx_guess_int\n   \
    \ local guesses_list_tmp_idx_guess_int\n    local score_list_tmp_idx_guess_int_str\n\
    \    local guesses_list_tmp_idx_guess_int_str\n    local score_list_tmp_idx_guess_int_guess\n\
    \    local guesses_list_tmp_idx_guess_int_guess\n    local score_list_tmp_idx_guess_int_guess_str\n\
    \    local guesses_list_tmp_idx_guess_int_guess_str\n    local score_list_tmp_idx_guess_int_guess_int\n\
    \    local guesses_list_tmp_idx_guess_int_guess_int\n    local score_list_tmp_idx_guess_int_guess_int_str\n\
    \    local guesses_list_tmp_idx_guess_int_guess_int_str\n    local score_list_tmp_idx_guess_int_guess_int_guess\n\
    \    local guesses_list_tmp_idx_guess_int_guess_int_guess\n    local score_list_tmp_idx_guess_int_guess_int_guess_str\n\
    \    local guesses_list_tmp_idx_guess_int_guess_int_guess_str\n    local score_list_tmp_idx_guess_int_guess_int_guess_int\n\
    \    local guesses_list_tmp_idx_guess_int_guess_int_guess_int\n    local score_list_tmp_idx_guess_int_guess_int_guess_int_str\n\
    \    local guesses_list_tmp_idx_guess_int_guess_int_guess_int_str\n    local score_list_tmp_idx_guess_int_guess_int_guess_int_guess\n\
    \    local guesses_list_tmp_idx_guess_int_guess_int_guess_int_guess\n    local\
    \ score_list_tmp_idx_guess_int_guess_int_guess_int_guess_int\n    local guesses_list_tmp_idx_guess_int_guess_\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local i j diff result\n\
    \    local a=(${1// /})\n    local b=(${2// /})\n    local len=${#a[*]}\n    local\
    \ count=0\n    for ((i=1; i<$len; i++))\n    do\n        diff =${a[$i] - $b[$i]}\n\
    \        \n        # check to see if this was a correct guess\n        if ((diff\
    \ > 0)); then\n            # correct guess, we found a difference of more than\
    \ 0\n            result[$i]=$diff\n            count=$((count+1))\n        else\
    \ \n            # incorrect guess, we found a difference of 0\n            result[$i]=0\n\
    \            count=$((count+1))\n        fi\n    done\n    \n    # check to see\
    \ if all values were correct (all are positive)\n    if ((count == $len)) ; then\n\
    \        # all values were correct\n        return 0\n    else \n        # some\
    \ values were incorrect, return the abs difference\n        return ${result[@]}\n\
    \    fi\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n  \
    \  [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2\
    \ 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\
    \ score difference output\n    IFS=$'\\n' read -a scores <<< \"$1\"\n    IFS=$'\\\
    n' read -a guesses <<< \"$2\"\n    for ((i=0; i<${#scores[@]}; ++i)); do\n   \
    \     score=${scores[$i]}\n        guess=${guesses[$i]}\n        difference=$((\
    \ guess - score ))\n        output+=($difference)\n    done\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppc25ag53.sh: line 24: 1 2 3 4 2 -2: syntax error in expression
    (error token is "2 3 4 2 -2")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: -1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local result=\"$(\n   \
    \ ( \n      IFS=' '\n      mapfile -t result\n      mapfile -t guess\n      echo\
    \ \"${result[*]}\" \\\n        | sort -r \\\n        | awk '\n          BEGIN\
    \ {\n            for(a in result) {\n              printf \"%s%s\", result[a],\
    \ (a == guess[NR]) ? \"\\n\" : \" \";\n            }\n          }\n          END\
    \ {\n            for(a in result) {\n              printf \"%s\", (result[a] !=\
    \ guess[NR]) ? result[a] : \"0\";\n            }\n          }\n        ' \\\n\
    \    )\n    )\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=11 encoding='utf-8'>
  timestamp: 1660055399
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    # Convert to arrays for\
    \ easy comparison later\n    local scores guesses maxscore\n    local index j\
    \ $((${#1[@]}-1))\n    local score\n    # Convert $1 to an array by splitting\
    \ on whitespace or commas\n    IFS=', ' read -a scores <<< \"$1\"\n    # Convert\
    \ $2 to an array by splitting on whitespace or commas\n    IFS=', ' read -a guesses\
    \ <<< \"$2\"\n    # Iterate through each array and find correct match\n    # NOTE:\
    \ This assumes the two arrays are the same length (same number of indices)\n \
    \   local correct\n    for index in \"${!scores[@]}\"; do\n        score=${scores[index]}\
    \ # current score\n        guess=${guesses[index]} # current guess\n        #\
    \ Check if score and guess are correct\n        if [ \"$score\" == \"$guess\"\
    \ ] ; then\n            # Score was correct, therefore correct is 0\n        \
    \    correct=0\n        else\n            # Check if score is correct and guess\
    \ is incorrect\n            if [ \"$score\" == \"$maxscore\" ] ; then\n      \
    \          # Score is correct and guess was wrong\n                correct=0\n\
    \            else\n                # Score is correct but guess was incorrect\n\
    \                correct=$(expr \"$score\" - \"$guess\")\n            fi\n   \
    \     fi\n        # Update max score if this is the correct score\n        maxscore=$(expr\
    \ \"$maxscore\" + \"$correct\")\n    done\n    # Convert $maxscore to string\n\
    \    maxscore=$(expr \"$maxscore\" + \"$((${#scores[@]}-1))\")\n    # Return results\n\
    \    printf \"\\\"%s\\\"\\n\" \"$maxscore\"\n}\n\ncandidate() {\n    compare \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4\
    \ 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0\
    \ 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2\
    \ 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp52ll1283.sh: line 20: ${#1[@]}-1: bad substitution

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n        local scores=(\"\
    $@\")\n        local guesses=(\"$@\")\n        local i=${#scores[@]}\n       \
    \ local j=${#guesses[@]}\n        local diffs=()\n        local diff=0\n     \
    \   while [ $i -ge 0 -a $j -ge 0 ]; do\n                if [ $i == $j ]; then\
    \ \n                        # Both are empty\n                        diff=0\n\
    \                else\n                        if [[ ${guesses[$i]} -eq ${scores[$j]}\
    \ ]]; then\n                                # both are the same\n            \
    \                    diff=0\n                        elif [[ ${guesses[$i]} -lt\
    \ ${scores[$j]} ]]; then\n                                # guess is better\n\
    \                                diff=1 \n                        elif [[ ${guesses[$i]}\
    \ -gt ${scores[$j]} ]]; then\n                                # guess is better\n\
    \                                diff=-1\n                        else\n     \
    \                           # they guessed too far apart\n                   \
    \             diff=-1\n                        fi\n                fi\n      \
    \          diffs+=($diff)\n                ((i--))\n                ((j--))\n\
    \        done\n        # Remove the last \"0\" if the guesses don't encompass\
    \ the whole array\n        if [ $i -ge 0 ]; then diffs+=($diff); fi\n        if\
    \ [ $j -ge 0 ]; then diffs+=($diff); fi\n        echo ${diffs[@]}\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local guesses=(\"${!2[@]}\"\
    )\n  local scores=(\"${!1[@]}\")\n  # we start with the first element of the scores\n\
    \  local i\n  for ((i=0; i<${#scores[@]}; i++)); do\n    if [[ ${scores[i]} ==\
    \ ${guesses[i]} ]]; then\n      # the guessed score matches the current score\n\
    \      echo 0\n      # we break out of this loop\n      break\n    else\n    \
    \  # the guessed score does not match the current score\n      echo $(echo \"\
    $guesses[i]-$scores[i]\" | bc -l)\n      # we continue with the next score in\
    \ the scores\n    fi\n  done\n  # we add the remaining guesses that were not matched\n\
    \  for i in $(seq ${#guesses[@]} ${#scores[@]}); do\n    echo $(echo \"${guesses[i]}-$scores[i]\"\
    \ | bc -l)\n  done\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp56qgm5cs.sh: line 18: ${!2[@]}: bad substitution

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local score guessed output\n\
    \    score=\"$1\"\n    guessed=\"$2\"\n    local max=$((${#score} - 1))\n    for\
    \ (( i=1; i<=$max; i++ )); do\n        output[i]=$(( $(echo \"$score - $guessed\"\
    \ | bc) ))\n    done\n    return \"${output[@]}\"\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    /tmp/tmpw9tbxcau.sh: line 25: return: too many arguments

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local -r A=$1\n  local\
    \ -r B=$2\n  echo \"$A\" > /tmp/a\n  echo \"$B\" > /tmp/b\n  comm -23 /tmp/a /tmp/b\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local -n a=$1\n  local\
    \ -n b=$2\n  local -a res=()\n  local -n numlines=${#a[@]}\n  local -n numchars=${#b[@]}\n\
    \  local -i numcols=$((numchars/numlines))\n  local -i i=0\n  local j=0\n  local\
    \ maxj=0\n  local maxscore=0\n  local maxscoreindex=0\n  local maxjindex=0\n \
    \ local -a maxscore\n  local -a maxscoreindex\n  local -a maxjindex\n  local -a\
    \ maxj\n\n  # Iterate over lines\n  for ((i=1; i <= numlines; i++)); do\n    if\
    \ (( i%numcols == 0 )); then\n      # Iterate over columns\n      j=0\n      while\
    \ (( j<numchars ) && ( i<numlines )); do\n        (( j++ ))\n        (( i++ ))\n\
    \        if (( b[((i-1)*numcols+j)] == a[i-1])); then\n          (( res[i-1]+=($(b[((i-1)*numcols+j)])-$(a[i-1]))\
    \ ))\n        else\n          (( res[i-1]+=(abs($(b[((i-1)*numcols+j)]-$(a[i-1])))\
    \ ))\n        fi\n      done\n      if (( j < numchars )); then\n        j=$((numchars-1))\n\
    \        (( res[i-1]+=(abs($(b[((i-1)*numcols+j)]-$(a[i-1]))) )) )\n      fi\n\
    \    fi\n  done\n\n  # Iterate over columns\n  for (( i=0; i<numlines ; i++));\
    \ do\n    if (( i%numcols == 0 )); then\n      # Iterate over lines\n      j=0\n\
    \      while (( j<numchars ) && ( i<numlines )); do\n        (( j++ ))\n     \
    \   (( i++ ))\n        if (( b[((i-1)*numcols+j)] == a[i-1])); then\n        \
    \  (( res[i-2]+=($(b[((i-1)*numcols+j)])-$(a[i-2]))) )\n        else\n       \
    \   (( res[i-2]+=(abs($(b[((i-1)*numcols+j)]-$(a[i-2]))) ))\n        fi\n    \
    \  done\n      if (( j < numchars )); then\n        j=$((numchars-1))\n      \
    \  (( res[i-2]+=(abs($(b[((i-1)*numcol\n}\n\ncandidate() {\n    compare \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\"\
    ) = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") =\
    \ \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnh441dac.sh: line 46: syntax error near unexpected token `(''

    /tmp/tmpnh441dac.sh: line 46: `( res[i-1]+=(abs($(b[((i-1)*numcols+j)]-$(a[i-1])))
    ))''

    /tmp/tmpnh441dac.sh: line 47: syntax error near unexpected token `fi''

    /tmp/tmpnh441dac.sh: line 47: `        fi''

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local a b\n    # split\
    \ $1 into a and b\n    a=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n    b=$(echo\
    \ \"$2\" | tr '[:upper:]' '[:lower:]')\n    local diff r\n    diff=$(echo \"$a\"\
    \ | wc -l | xargs printf \"-%d\")\n    diff=$(echo \"$b\" | wc -l | xargs printf\
    \ \"-%d\")\n    if [ $diff -ne $((${#a} + ${#b})) ] ; then\n        return 1\n\
    \    fi\n    r=$(echo \"$a\" | xargs printf \"%d \")\n    r=$(echo \"$b\" | xargs\
    \ printf \"%d \")\n    for i in $(seq 0 $((${#a} - 1)) ; do\n        (( i == 0\
    \ )) && r=\"$r $r$diff\"\n        (( i < $((${#b} - 1)) )) && r=\"$r $r$(echo\
    \ \"$a\" | xargs printf \"%d \" \"$i\" \"$diff\")\"\n    done\n    for i in $(seq\
    \ 0 $((${#b} - 1)) ; do\n        (( i == 0 )) && r=\"$r $r$diff\"\n        ((\
    \ i < $((${#a} - 1)) )) && r=\"$r $r$(echo \"$b\" | xargs printf \"%d \" \"$i\"\
    \ \"$diff\")\"\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    compare \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4\
    \ 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0\
    \ 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2\
    \ 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbzeo7hl1.sh: line 34: unexpected EOF while looking for matching
    `)''

    /tmp/tmpbzeo7hl1.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  if [ \"$#\" -ne 2 ]\n \
    \ then\n    echo $1 $2\n    echo \"ERROR: Incorrect number of arguments. Usage:\
    \ compare <array1> <array2>\"\n    return 1\n  fi\n  \n  local array1=()\n  local\
    \ array2=()\n  \n  for ((i = 0; i < ${#1}; i++)); do\n    array1+=( ${1[i]} )\n\
    \  done\n  \n  for ((i = 0; i < ${#2}; i++)); do\n    array2+=( ${2[i]} )\n  done\n\
    \  \n  local result=()\n  local max=$((${#array1[*]} - 1))\n  \n  local i\n  for\
    \ ((i = 0; i < max; i++)); do\n    local diff=0\n    local index=0\n    local\
    \ score=${array2[i]}\n    while ((index < ${#array1[*]})) && (diff -lt 0); do\n\
    \      ((diff+=$((${array2[i]} - ${array1[index]})))) \n      ((index++))\n  \
    \  done\n    \n    if ((diff > 0))\n    then\n      result+=( \"${diff}\" )\n\
    \    else\n      result+=( \"${abs($score-$array2[i])}\" )\n    fi\n  done\n \
    \ \n  echo ${result[@]}\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0\
    \ 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0\
    \ 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate\
    \ \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcj0ypyd_.sh: line 29: ${1[i]}: bad substitution

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local i j score guess result\
    \ answers len\n  scores=\"$1\" guesses=\"$2\"\n  result=()\n  len=${#scores[@]}\n\
    \  answers=()\n  # for each score, get the best guess to compare it to\n  for\
    \ i in $(seq 0 $(($len-1))); do\n    if [ -z \"${guesses[$i]}\" ]; then\n    \
    \  # if this is the last guess, just append it to the result array\n      (( answers[$i]\
    \ += scores ))\n    else\n      # otherwise get the best guess by taking the best\
    \ score and guessing it\n      score=${scores[$i]}\n      guess=${guesses[$i]}\n\
    \      (( answers[$i] += score - guess ))\n    fi\n  done\n  # return the result\
    \ array\n  for i in $(seq 0 $(($len-1))); do\n    if [ -z \"${guesses[$i]}\" ];\
    \ then\n      result[i]=$(( answers[$i] ))\n    else\n      result[i]=$(( result[i]\
    \ < answers[$i] ?\n        $(( answers[$i] - scores )) :\n        $(( answers[$i]\
    \ - guesses )) ))\n    fi\n  done\n  echo ${result[@]}\n}\n\ncandidate() {\n \
    \   compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\
    \ 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\"\
    \ \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2\
    \ -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0\
    \ 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvy9fe1_8.sh: line 32: ((: 1 2 3 4 5 1: syntax error in expression
    (error token is "2 3 4 5 1")

    /tmp/tmpvy9fe1_8.sh: line 42: 1 2 3 4 5 1: syntax error in expression (error token
    is "2 3 4 5 1")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\
    \ result score difference count\n    scores=$1\n    guesses=$2\n    # count is\
    \ the number of different scores we are comparing\n    count=$(expr $(wc -l <<<\
    \ ${scores}) -2 \\* 2)\n    # create a list of all possible score combinations\n\
    \    combinations=$(seq 1 ${count})\n    # populate the result array with zeros\
    \ for each guess index\n    result=()\n    \n    # for each score in combinations\
    \ \n    for combination in \"${combinations[@]}\"\n    do\n        # skip the\
    \ first combination\n        if [ \"$combination\" -ne \"1\" ]\n        then\n\
    \            # populate the result with zeros for the index position\n       \
    \     index=$(expr $combination - 1)\n            result+=(\"0\")\n        else\n\
    \            # populate the result with zeros for the index position\n       \
    \     index=$(expr $combination \\* 2)\n            result+=(\"0\")\n        fi\n\
    \        \n        # for each guess...\n        for guess in \"${guesses[@]}\"\
    \n        do\n            # ...if the guess is equal to the score for that index...\n\
    \            if [ \"$guess\" == \"${scores[combination]}\" ]\n            then\n\
    \                # ...then update the result with ones for the index position\n\
    \                result[index]+=1\n            else\n                # otherwise,\
    \ update the result with zeros for the index position\n                result[index]+=0\n\
    \            fi\n        done\n    done\n    # return an array\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u2018-2\u2019\n"
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  # The first thing we do\
    \ is parse our arguments.\n  local -a scores=$1\n  local -a guesses=$2\n  local\
    \ nscores=$#\n  local nguesses=$#\n  [ $nscores -ne $nguesses ] && return 1\n\
    \  local -a score\n  local -a guesses\n  local -i j=0\n  while (( $# > 0 )) ;\
    \ do\n    case $1 in\n      -* | *)\n        break\n        ;;\n    esac\n   \
    \ (( ++j ))\n    scores[$j]=$1\n    guesses[$j]=$2\n    shift\n    shift\n  done\n\
    \  # Now we sort the arrays into order.\n  sort -n ${scores[@]} > ${scores[0]}\n\
    \  sort -n ${guesses[@]} > ${guesses[0]}\n  # And loop through the scores and\
    \ guesses to compute the final answer\n  local result\n  local max\n  local score\n\
    \  local guess\n  local diff\n  local i\n  local j\n  local c\n  local k\n  local\
    \ t\n  local m\n  local s\n  local p\n  local r\n  max=$(head -1 ${scores[0]})\n\
    \  for (( i=0; i<nscores; i++ )) ; do\n    score=${scores[$i]}\n    guess=${guesses[$i]}\n\
    \    if [ \"$score\" -eq \"$max\" ] || [ \"$guess\" -eq \"$max\" ]; then\n   \
    \   result=\"${result} ${score}\"\n    elif [ \"$score\" -eq 0 ]; then\n     \
    \ result=\"${result} ${score}\"\n    elif [ \"$guess\" -eq 0 ]; then\n      result=\"\
    ${result} ${guess}\"\n    else\n      # We know that all of these cases must hold\n\
    \      if [ \"$guess\" -lt \"$score\" ]; then\n        result=\"${result} ${guess}\"\
    \n      elif [ \"$guess\" -gt \"$score\" ]; then\n        result=\"${result} ${score}\"\
    \n      else\n        result=\"${result} ${score} ${guess}\"\n      fi\n    fi\n\
    \  done\n  # Now that we know our final answer, we loop through our guesses one\
    \ more time.\n  j=0\n  for (( i=0; i<nguesses; i++ )) ; do\n    guess=${guesses[$i]}\n\
    \    diff=0\n    for (( j=0; j<nscores; j++ )) ; do\n      score=${scores[$j]}\n\
    \      # We know that all of these cases must hold\n      if [ \"$\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2hfdj14a.sh: line 98: unexpected EOF while looking for matching
    `"''

    /tmp/tmp2hfdj14a.sh: line 102: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local a b i\n  a=$1\n \
    \ shift\n  b=$1\n  shift\n\n  local astr \"b\"str\n  local numA numB numB numC\
    \ diff\n  numA=`echo $a | wc -w`\n  numB=`echo $b | wc -w`\n  numC=$((numA > numB\
    \ ? numA : numB))\n\n  astr=`echo $a | sed 's/ /\",\"/g'`\n  bstr=`echo $b | sed\
    \ 's/ /\",\"/g'`\n\n  diff () {\n    local i diff\n    local j\n    diff=\n  \
    \  for ((i = 0; i <= $numC; i++)); do\n      for ((j = 0; j <= $numC; j++)); do\n\
    \        [ $j -eq $i ] && diff=\"-${diff}\"\n      done\n    done\n    echo $diff\n\
    \  }\n\n  echo \"$numC\"\n  echo \"$numA\"\n  echo \"$numB\"\n  echo \"$astr\"\
    \n  echo \"$bstr\"\n  echo \"$diff\"\n  echo \"$a\"\n  echo \"$b\"\n  echo \"\
    $astr\"\n  echo \"$bstr\"\n\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses\n\
    \  scores=$(echo $1 | sed 's/ /\\n/g' | sort -u)\n  guesses=$(echo $2 | sed 's/\
    \ /\\n/g' | sort -u)\n  local diff i\n  diff=\n  for ((i=0; i<${#scores[@]}; i++));\
    \ do\n    case \"${scores[i]}\" in\n      \"${guesses[i]}\") diff =0 ;;\n    \
    \  *) diff =$(echo $((${guesses[i]} - ${scores[i]})) | bc)\n    ;;\n    esac\n\
    \  done\n  for ((i=0; i<${#scores[@]}; i++)); do\n    case \"${scores[i]}\" in\n\
    \      \"${guesses[i]}\") diff =0 ;;\n      *) diff =$(echo $((${guesses[i]} -\
    \ ${scores[i]})) | bc)\n    ;;\n    esac\n  done\n  echo \"$diff\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz0cnh5bk.sh: line 26: 1

    -2

    2

    3

    4 - 1

    2

    3

    4

    5: syntax error in expression (error token is "2

    3

    4 - 1

    2

    3

    4

    5")

    diff: missing operand after ''=''

    diff: Try ''diff --help'' for more information.

    /tmp/tmpz0cnh5bk.sh: line 33: 1

    -2

    2

    3

    4 - 1

    2

    3

    4

    5: syntax error in expression (error token is "2

    3

    4 - 1

    2

    3

    4

    5")

    diff: missing operand after ''=''

    diff: Try ''diff --help'' for more information.

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local arr1=(\"${1// /}\"\
    )\n    local arr2=(\"${2// /}\")\n    local numGuesses=${#arr1[@]}\n    local\
    \ diffs=()\n\n    # Check for correct number of matches and create diffs array\
    \ for later\n    if (( \"${#arr1[@]}\" != \"${#arr2[@]}\" )); then\n        return\
    \ \n    fi\n\n    # Initialize result array\n    for i in $(seq 0 \"${#arr1[@]}\"\
    \ ); do\n        diffs[$i]=0\n    done\n\n    # Calculate diffs\n    for (( i\
    \ = 0; i <= numGuesses; i++ )); do\n        if [[ ${arr1[$i]} == ${arr2[$i]} ]];\
    \ then\n            diffs[$i]=0\n        else\n            diffs[$i]=$(( (${arr1[$i]}\
    \ > ${arr2[$i]} ) ? ${arr1[$i]} - ${arr2[$i]} : ${arr2[$i]} - ${arr1[$i]} ))\n\
    \        fi\n    done\n\n    # Print result\n    for (( i = 0; i <= numGuesses;\
    \ i++ )); do\n        echo -n \"\\\"$diffs[$i]\\\"$(( i < numGuesses ? \",\" :\
    \ \" \"))\n    done\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzec6l7d8.sh: line 57: unexpected EOF while looking for matching
    `"''

    /tmp/tmpzec6l7d8.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local a b i=1 diff;\n \
    \ a=$1\n  b=$2\n  while [ $i -le $(( ${#a} - 1 )) ]; do\n    diff=$(( ${b[i]}\
    \ - ${a[i]} ));\n    if [ \"${diff}\" -eq 0 ]; then\n      echo \"${a[i]}\"\n\
    \    elif [ \"$diff\" -gt 0 ]; then\n      echo \"${a[i]} ${b[i]}\"\n    else\n\
    \      echo \"${a[i]} ${b[i]} ${diff}\"\n    fi\n    i=$(( i + 1 ));\n  done\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2x_pagvj.sh: line 22: -  : syntax error: operand expected (error
    token is "-  ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local -n array1=${1:-\"\
    1 2 3 4 5 1\"}\n    local -n array2=${2:-\"1 2 3 4 2 -2\"}\n    local -n output\n\
    \    local count\n    local j\n    local k\n    for j in $(seq 0 ${#array2});\
    \ do\n        if (( ${array2[j]} == 0 )); then\n            continue\n       \
    \ fi\n        count=0\n        for k in $(seq 0 ${#array1}); do\n            if\
    \ (( ${array1[k]} != ${array2[j]} )); then\n                if (( ${array1[k]}\
    \ > ${array2[j]} )); then\n                    let \"count += ${array1[k]} - ${array2[j]}\"\
    \n                elif (( ${array1[k]} < ${array2[j]} )); then\n             \
    \       let \"count += ${array2[j]} - ${array1[k]}\"\n                else\n \
    \                   let \"count += 1\"\n                fi\n            fi\n \
    \       done\n        (( count > 0 && count <= ${array2[j]} - ${array1[j]} ))\
    \ && output+=($(printf \"%${j}d\" ${count}))\n    done\n    echo -n \"${output[@]}\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdw916mqg.sh: line 18: local: `1 2 3 4 5 1'': invalid variable name
    for name reference

    /tmp/tmpdw916mqg.sh: line 19: local: `1 2 3 4 2 -2'': invalid variable name for
    name reference

    /tmp/tmpdw916mqg.sh: line 25: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    /tmp/tmpdw916mqg.sh: line 30: ((: !=  : syntax error: operand expected (error
    token is "!=  ")

    /tmp/tmpdw916mqg.sh: line 40: ((: count > 0 && count <=  -  : syntax error: operand
    expected (error token is "-  ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: -1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local SCORES GUESSES\
    \ SCORE GUESS ABSOLUTE\n\n    read -r -a SCORES\n    read -r -a GUESSES\n\n  \
    \  for i in $(seq 0 ${#SCORES[@]} -1)\n    do\n        SCORE=\"${SCORES[$i]}\"\
    \n        GUESS=\"${GUESSES[$i]}\"\n\n        ABSOLUTE=`expr $SCORE - $GUESS`\n\
    \n        if [ \"${SCORES[$i]}\" != \"${GUESSES[$i]}\" ]\n        then\n     \
    \       echo \"$SCORES[$i]\"\n        fi\n    done\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=40 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=13 encoding='utf-8'>
  timestamp: 1660055399
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores=$1\n   \
    \ local guesses=$2\n    local score\n    local guess\n    local output\n    local\
    \ index\n\n    local maxScore\n    local maxIndex\n\n    # find the max score\
    \ and the index\n    maxScore=$(cat <<EOF\n$(echo \"$scores\" | tr \"\\n\" \"\
    \ \")\nEOF\n)\n    maxIndex=$(echo \"$scores\" | tr \"\\n\" \" \" | awk '{print\
    \ $1}' | sort -n | tail -n 1)\n\n    # find the correct index\n    for ((index\
    \ = 0; index < ${#guesses}; index++)); do\n        score=$(echo \"$scores\" |\
    \ tr \"\\n\" \" \" | awk '{print $index}')\n        guess=$(echo \"$guesses\"\
    \ | tr \"\\n\" \" \" | awk '{print $index}')\n        output=$(echo \"$score\"\
    \ | sed \"s/$maxScore/$guess/\")\n        if [[ ${output} -eq ${guess} ]]; then\n\
    \            break\n        fi\n    done\n    # return the results\n    echo \"\
    $output\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: {print $index}

    awk: cmd. line:1:              ^ syntax error

    awk: cmd. line:1: {print $index}

    awk: cmd. line:1:              ^ syntax error

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\n\
    \    local score guesses\n    scores=${1//[^ ]/}\n    guesses=${2//[^ ]/}\n  \
    \  for (( i = 1; i <= ${#scores}; i++ )); do\n        score=${scores:$i:1}\n \
    \       guess=${guesses:$i:1}\n        dif=$(( ($score - $guess) % 10 ))\n   \
    \     if [ $dif -eq 0 ]; then\n            echo \"$dif\"\n        else\n     \
    \       echo \"$dif\"\n        fi\n    done\n}\n\ncandidate() {\n    compare \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4\
    \ 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0\
    \ 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2\
    \ 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplplrfxjp.sh: line 25: (  -  ) % 10 : syntax error: operand expected
    (error token is ") % 10 ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    # split $1 into an array\
    \ of strings like '1 2 3 4 5 1'\n    local arr1=($(echo \"$1\" | sed 's/ /\\n/g'))\n\
    \    # split $2 into an array of strings like '1 2 3 4 2 -2'\n    local arr2=($(echo\
    \ \"$2\" | sed 's/ /\\n/g'))\n    # initialize an empty array where we will store\
    \ the result\n    local arr3\n    # loop through each item in arr1\n    for ((\
    \ i = 0; i<${#arr1[@]}; i++ )); do\n        arr3[i]=0\n        local diff\n  \
    \      diff=$(( ${arr1[i]}${arr2[i]} - ${arr1[i]} - ${arr2[i]} ))\n        arr3[i]=$((\
    \ ${arr3[i]} + ${diff} ))\n    done\n    # print the result array\n    echo \"\
    ${arr3[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local -a scores\n  local\
    \ -a guesses\n  local -a difference\n  local -a score\n  local -a guesses\n  local\
    \ -a difference\n  local -i j\n  local -i k\n  local -i m\n  local -i n\n  local\
    \ -i i\n  local -i wrong\n  local -i j\n  local -i k\n  local -i m\n  local -i\
    \ n\n  local -i i\n  local -i score\n  local -i score_idx\n  local -i guess_idx\n\
    \  local -i guess_idx\n  local -a score\n  local -a guesses\n  local -a difference\n\
    \  local -a result\n  local -a score_idx\n  local -a guess_idx\n  local -a guess_idx\n\
    \  local -i numscores\n  local -i numguesses\n  local -i numdifferences\n  local\
    \ -a scores\n  local -a guesses\n  local -a difference\n  local -a result\n\n\
    \  scores=(${1// / })\n  guesses=(${2// / })\n  num=${#scores[@]}\n  num=${#guesses[@]}\n\
    \  numdifferences=$((num - numguesses))\n  difference=(${guesses[@]} - ${scores[@]})\n\
    \  if [ ${#difference[@]} -gt 0 ]; then\n    difference=(${guesses[@]} - ${scores[@]})\n\
    \  fi\n  result=()\n  for ((i=0; i<numdifferences; i++)); do\n    result+=(0)\n\
    \  done\n  for ((i=0; i<numdifferences; i++)); do\n    if [ \"${guesses[i]}\"\
    \ == \"${difference[i]}\" ]; then\n      result[i]=0\n      wrong=false\n    else\n\
    \      result[i]=${difference[i]}\n      wrong=true\n    fi\n  done\n  if [ -z\
    \ \"$wrong\" ]; then\n    return\n  else\n    return \"$result\"\n  fi\n}\n\n\
    candidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local a b c d e\n   \
    \ a=${1%\" \"*}\n    b=${2%\" \"*}\n    [[ \"${#a}\" -gt \"${#b}\" ]] && b=${a%\"\
    \ \"*}\n    c=\"${a// / }\"\n    d=\"${b// / }\"\n    e=\"${c// / }\"\n    c=${c//\
    \ / }\n    d=${d// / }\n    e=${e// / }\n    echo ${#a}\n    echo ${#b}\n    echo\
    \ ${#c}\n    echo ${#d}\n    echo ${#e}\n    echo ${#a[@]}\n    echo ${#b[@]}\n\
    \    echo ${#c[@]}\n    echo ${#d[@]}\n    echo ${#e[@]}\n    echo ${#a[*]}\n\
    \    echo ${#b[*]}\n    echo ${#c[*]}\n    echo ${#d[*]}\n    echo ${#e[*]}\n\
    \    echo ${#a[@]}\n    echo ${#b[@]}\n    echo ${#c[@]}\n    echo ${#d[@]}\n\
    \    echo ${#e[@]}\n    echo ${#a[*]}\n    echo ${#b[*]}\n    echo ${#c[*]}\n\
    \    echo ${#d[*]}\n    echo ${#e[*]}\n}\n\ncandidate() {\n    compare \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\"\
    ) = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") =\
    \ \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal a=\"$1\"\n\tlocal\
    \ b=\"$2\"\n\tlocal -a result\n\n\tresult=()\n\tfor (( i=1; i<${#a[@]}; i++ ));\
    \ do\n\t\tlocal g=\"${a[$i]}\"\n\t\tlocal s=\"${b[$i]}\"\n\t\tif [[ ! ${g} =~\
    \ ^-?[[:digit:]]+$ ]]; then\n\t\t\tresult+=(\"${s}\")\n\t\telse\n\t\t\tresult+=(\"\
    ${s}\")\n\t\tfi\n\tdone\n\n\techo \"${result[@]}\"\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: -1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses\n\
    \  scores=$1\n  guesses=$2\n\n  local output\n  output=$( IFS= ; echo \"$scores\"\
    \ | grep -Eo \"[0-9]*\")\n  output+=$( IFS= ; echo \"$guesses\" | grep -Eo \"\
    [0-9]*\")\n\n  while [ -n \"$output\" ]\n  do\n    local score\n    score=$( IFS=\
    \ ; echo \"$output\" | grep -Eo \"[0-9]*\")\n    local guess\n    guess=$( IFS=\
    \ ; echo \"$guesses\" | grep -Eo \"[0-9]*\")\n\n    if [ \"$score\" -eq \"0\"\
    \ ]\n    then\n      echo \"$guess\"\n    elif [ \"$score\" -gt \"$guess\" ]\n\
    \    then\n      echo \"$guess\"\n    elif [ \"$score\" -lt \"$guess\" ]\n   \
    \ then\n      echo \"$score\"\n    fi\n\n    output=$( IFS= ; echo \"$output\"\
    \ | grep -Eo \"[0-9]*\")\n    guesses=$( IFS= ; echo \"$guesses\" | grep -Eo \"\
    [0-9]*\")\n  done\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=25 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660055399
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local first=\"$(echo\
    \ \"$1\" | tr ' ' \",\" | tr '\\n' ',')\"\n    local second=\"$(echo \"$2\" |\
    \ tr ' ' \",\" | tr '\\n' ',')\"\n    local diff\n\n    # compare every two elements\
    \ \n    for (( i=1; i<${#first}; i++ )); do\n        [[ \"${first:$i:1}\" == \"\
    ${second:$i:1}\" ]] && diff=\"$diff\" \"$i\" || diff=\"$diff $(echo \"${first:$i:1}\
    \ - ${second:$i:1}\" | bc -l | sed -e 's/^.//' -e 's/^-//')\"\n    done\n\n  \
    \  echo \"$diff\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyi6voxmw.sh: line 24: 1: command not found

    (standard_in) 1: syntax error

    /tmp/tmpyi6voxmw.sh: line 24: 2: command not found

    /tmp/tmpyi6voxmw.sh: line 24: 3: command not found

    (standard_in) 1: syntax error

    /tmp/tmpyi6voxmw.sh: line 24: 4: command not found

    /tmp/tmpyi6voxmw.sh: line 24: 5: command not found

    (standard_in) 1: syntax error

    /tmp/tmpyi6voxmw.sh: line 24: 6: command not found

    /tmp/tmpyi6voxmw.sh: line 24: 7: command not found

    (standard_in) 1: syntax error

    /tmp/tmpyi6voxmw.sh: line 24: 9: command not found

    (standard_in) 1: syntax error

    (standard_in) 2: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    score=$1\n    guess=$2\n\
    \    diff () { \n        if (( \"$#\" == 1 )); then\n            echo $1\n   \
    \     else\n            echo $1 $2 | bc -l\n        fi\n    }\n    diff $(sort\
    \ -u <<< $score | sed 's/ .*//') $(sort -u <<< $guess | sed 's/ .*//')\n}\n\n\
    candidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\
    \ out\n    IFS=$'\\n' read -a scores <<< \"$1\"\n    IFS=$'\\n' read -a guesses\
    \ <<< \"$2\"\n    declare -a out\n    for ((i = 0; i < ${#scores[@]}; i++)); do\n\
    \        (( found=0 ))\n        for ((j = 0; j < ${#guesses[@]}; j++)); do\n \
    \           (( found++ ))\n            out[$((i))]=\"$found\"\n            ((\
    \ diff = ${guesses[$j]} - ${scores[$i]} ))\n        done\n    done\n    printf\
    \ '%s\\n' \"${out[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0\
    \ 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0\
    \ 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate\
    \ \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkx4btv5z.sh: line 27: ((: diff = 1 2 3 4 2 -2 - 1 2 3 4 5 1 : syntax
    error in expression (error token is "2 3 4 2 -2 - 1 2 3 4 5 1 ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local a\n    a=( $1 )\n\
    \    local b\n    b=( $2 )\n    local i\n    i=0\n    while [ $i -lt ${#a[@]}\
    \ ]; do\n        i=$(( i + 1 ))\n        if [ $(( ${a[ $i ]} - ${b[ $i ]} )) -gt\
    \ 0 ]; then\n            echo \"${a[$i]} ${b[$i]} ${a[$i]} - ${b[$i]} ${a[$i]}\
    \ - ${b[$i]}\"\n        else\n            echo \"${a[$i]} ${b[$i]} ${a[$i]} -\
    \ ${b[$i]} ${a[$i]} + ${b[$i]}\"\n        fi\n    done\n}\n\ncandidate() {\n \
    \   compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\
    \ 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\"\
    \ \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2\
    \ -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0\
    \ 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgfohluz_.sh: line 26: -  : syntax error: operand expected (error
    token is "-  ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\n\
    \    IFS=$'\\n'\n    scores=($1)\n    guesses=(${1// *})\n    scores=($guesses)\n\
    \    local i=0 \n    local total=0\n    local err=0\n    local result\n    for\
    \ ((i=0;i<${#scores[@]};i++)); do\n        local score=${scores[$i]}\n       \
    \ local guess=${guesses[$i]}\n        if [ \"$score\" = \"$guess\" ]; then\n \
    \           result=\"0\"\n        else\n            result=$(echo \"$score - $guess\"\
    \ | bc)\n            if [ $result -eq 0 ]; then\n                result=\"0\"\n\
    \            else\n                result=$(echo \"$result + $score\" | bc)\n\
    \            fi\n        fi\n        if [ \"$result\" = \"0\" ]; then\n      \
    \      err=$((err + 1))\n        else\n            total=$((total + 1))\n    \
    \    fi\n    done\n    IFS=$' \\t\\n'\n    echo $total \"-\" $err \"=\" $total-$err\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local a b i\n  a=( $1 )\n\
    \  b=( $2 )\n  for ((i=0; i<${#a[@]}; ++i)); do\n    # Compare with each element\
    \ of the second array\n    # $i holds the index of the element from the second\
    \ array\n    if [[ \"${b[$i]}\" != \"${a[$i]}\" ]]; then\n      echo \"$i: $a[$i]\
    \ is different than $b[$i]\"\n      echo \"${a[@]}\"\n      echo \"${b[@]}\"\n\
    \      exit 1 # exit immediately\n    fi\n  done\n  echo \"$i: $a[$i] is same\
    \ as $b[$i]\"\n  echo \"${a[@]}\"\n  echo \"${b[@]}\"\n}\n\ncandidate() {\n  \
    \  compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\"\
    \ \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"\
    0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\"\
    ) = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: -1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    # read input from stdin\n\
    \    read -p 'Enter your two arrays of scores: ' scores1 scores2\n\n    # convert\
    \ to arrays\n    scores1=(\"${scores1//$'\\n'/}\")\n    scores2=(\"${scores2//$'\\\
    n'/}\")\n\n    length=${#scores1[@]}\n    scores1[$length]=${scores1[$length]}\n\
    \    scores2[$length]=${scores2[$length]}\n\n    # convert guesses to arrays\n\
    \    guesses=(\"${guesses//$'\\n'/}\")\n    guesses[$length]=${guesses[$length]}\n\
    \    guesses[$length]=${guesses[$length]}\n\n    # convert answers to arrays\n\
    \    answers=(\"${answers//$'\\n'/}\")\n    answers[$length]=${answers[$length]}\n\
    \n    # loop through all guesses (assuming they all have same length)\n    correctCount=0\n\
    \    for ((i=0;i<${#guesses[@]};++i)); do\n        # compare scores\n        if\
    \ ((${scores1[$i]} > ${scores2[$i]})); then\n            # answer is wrong\n \
    \           answers[$i]=${answers[$i]}\n        else\n            # answer is\
    \ the same\n            answers[$i]=${guesses[$i]}\n        fi\n        # increment\
    \ number of correct guesses\n        ((correctCount+=1))\n    done\n\n    # return\
    \ arrays\n    correctAnswers=(\"${answers[@]}\")\n    correctAnswers=(\"${correctAnswers[@]}\"\
    )\n\n    # convert results to string\n    correctAnswers=($(printf \"\\\"%s\\\"\
    \" \"${correctAnswers[@]}\"))\n    correctAnswers=(\"${correctAnswers[@]}\")\n\
    \n    # print result\n    printf \"%s\\n\" \"${correctAnswers[@]}\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=55 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=51 encoding='utf-8'>
  timestamp: 1660055399
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local score guess\n\n\
    \    score=$(python -c \"print $1; print ${2%$1}\")\n    guess=$(python -c \"\
    print ${1%$2}\")\n    \n    if [ ${#score} -eq ${#guess} ]\n    then\n       \
    \ return 0\n    else\n        diff <(echo \"${guess}\") <(echo \"${score}\")\n\
    \    fi\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n  \
    \  [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2\
    \ 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "  File \"<string>\", line 1\n    print 1 2 3 4 5 1; print 1 2 3 4 2 -2\n\
    \            ^\nSyntaxError: invalid syntax\n  File \"<string>\", line 1\n   \
    \ print 1 2 3 4 5 1\n            ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\
    \ score guess i j k\n    scores=( $1 )\n    guesses=( $2 )\n    for ((i=1; i<${#scores[@]};\
    \ i++)); do\n        guess=${guesses[i]}\n        score=${scores[i]}\n       \
    \ for ((j=1; j<${#guesses}; j++)); do\n            k=${guesses[j]}\n         \
    \   if [ \"$guess\" -eq \"$k\" ]; then\n                scores[i]=$score\n   \
    \             break\n            fi\n            scores[i]=$(( scores - guess\
    \ ))\n        done\n    done\n    printf '%s\\n' \"${scores[@]}\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal scores guesses\n\t\
    scores=$1\n\tguesses=$2\n\tlocal score\n\tlocal guess\n\tlocal diff\n\tlocal i\n\
    \tlocal j\n\tlocal k\n\tlocal length\n\tlocal diffs\n\tlocal diff\n\tlocal total\n\
    \tlocal total_diff\n\tlocal total_length\n\tlocal max_diff\n\tlocal max_index\n\
    \tlocal max_score\n\tlocal max_guesses\n\tlocal junk\n\tlocal match\n\tlocal match_index\n\
    \tlocal m\n\tlocal max_match_length\n\tlocal max_match_index\n\tlocal max_match_score\n\
    \tlocal max_match_guesses\n\tlocal lengths\n\tlocal l\n\tlocal score_index\n\t\
    local score_length\n\tlocal s\n\tlocal scores\n\tlocal score\n\tlocal guesses_length\n\
    \tlocal guesses_index\n\tlocal guesses\n\tlocal guesses_guesses\n\tlocal i\n\t\
    local l\n\tlocal m\n\tlocal max_guesses_length\n\tlocal max_guesses_index\n\t\
    local max_guesses_score\n\tlocal max_guesses_guesses\n\tlocal max_length\n\tlocal\
    \ max_length_index\n\tlocal max_length_score\n\tlocal max_length_guesses\n\tlocal\
    \ max_score_index\n\tlocal max_score_length\n\tlocal max_score_guesses\n\tlocal\
    \ max_score\n\tlocal length\n\tlocal n\n\tlocal p\n\tlocal score_index\n\tlocal\
    \ score_length\n\tlocal s\n\tlocal score\n\tlocal guesses_length\n\tlocal guesses_index\n\
    \tlocal guesses\n\tlocal guesses_guesses\n\tlocal j\n\tlocal max_guesses_length\n\
    \tlocal max_guesses_index\n\tlocal max_guesses_score\n\tlocal max_guesses_guesses\n\
    \tlocal max_length\n\tlocal max_length_index\n\tlocal max_length_score\n\tlocal\
    \ max_length_guesses\n\tlocal max_score_index\n\tlocal max_score_length\n\tlocal\
    \ max_score_guesses\n\tlocal max_score\n\tlocal length\n\tlocal l\n\tlocal m\n\
    \tlocal match_index\n\tlocal max_match_index\n\tlocal max_match_score\n\tlocal\
    \ max_match_length\n\tlocal max_match_guesses\n\tlocal lengths\n\tlocal l\n\t\
    local score_index\n\tlocal score_length\n\tlocal s\n\tlocal score\n\tlocal guesses_length\n\
    \tlocal guesses_index\n\tlocal guesses\n\t\n}\n\ncandidate() {\n    compare \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4\
    \ 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0\
    \ 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2\
    \ 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\n\
    \    scores=$1\n    guesses=$2\n\n    # Convert strings to ints\n    scores=(\
    \ ${scores//[^0-9]/ } )\n    guesses=( ${guesses//[^0-9]/ } )\n\n    # Count matches\
    \ and find max length\n    local n \n    n=${#scores[@]}\n    n=$(( n > 0 ? n\
    \ : 1 ))\n\n    local i\n    i=0\n    local diff\n    diff=0\n    while [ $i -lt\
    \ $n ]; do\n        if [[ ${guesses[$i]} == ${scores[$i]} ]]; then\n         \
    \   diff=0\n        else\n            diff=$(( ${guesses[$i]} - ${scores[$i]}\
    \ ))\n        fi\n        i=$(( i+1 ))\n    done\n\n    # Return array\n    local\
    \ retval\n    retval=()\n    while [ $i -lt $n ]; do\n        if [[ ${guesses[$i]}\
    \ == ${scores[$i]} ]]; then\n            retval+=( ${diff} )\n        else\n \
    \           retval+=( $diff )\n        fi\n        i=$(( i+1 ))\n    done\n  \
    \  echo $retval\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local i j k n m diff diff\
    \ j k m\n  diff=0\n  for ((i=0; i < ${#1[@]}; i++)); do\n    for ((j=0; j < ${#1[@]};\
    \ j++)); do\n      if [[ ${1[i]} -gt ${1[j]} ]]; then\n        ((diff=diff+1))\n\
    \      fi\n    done\n  done\n  m=0\n  for ((i=0; i < ${#1[@]}; i++)); do\n   \
    \ for ((j=0; j < ${#1[@]}; j++)); do\n      if [[ ${1[i]} -eq ${1[j]} ]]; then\n\
    \        if [[ ${2[i]} -eq ${2[j]} ]]; then\n          ((m=0))\n        else\n\
    \          ((m=m+1))\n        fi\n      fi\n    done\n  done\n  k=0\n  for ((i=0;\
    \ i < ${#1[@]}; i++)); do\n    for ((j=0; j < ${#1[@]}; j++)); do\n      if [[\
    \ ${1[i]} -eq ${1[j]} ]]; then\n        if [[ ${2[i]} -eq ${2[j]} ]]; then\n \
    \         if [[ ${1[i]} -gt ${1[j]} ]]; then\n            if [[ ${2[i]} -gt ${2[j]}\
    \ ]]; then\n              ((k=k+1))\n            else\n              ((k=k-1))\n\
    \            fi\n          else\n            ((k=k-1))\n          fi\n       \
    \ fi\n      fi\n    done\n  done\n  if ((diff == m && k==0)); then\n    echo \"\
    0\"\n  else\n    echo \"${diff}\"\n  fi\n}\n\ncandidate() {\n    compare \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\"\
    ) = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") =\
    \ \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqlslckvq.sh: line 21: i < ${#1[@]}: bad substitution

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local -n scores=$1\n\
    \    local -n guesses=$2\n    local result\n    local offset\n    local i\n  \
    \  \n    # initialize results\n    offset=0\n    for (( i=0; i < ${#guesses};\
    \ i++ )); do\n        result[${i}]=${offset}\n        offset=$((offset + guesses[i]))\n\
    \    done\n    \n    for (( i=0; i < ${#scores}; i++ )); do\n        if (( ${guesses[$i]}\
    \ != ${scores[$i]} )); then\n            local diff=$((${guesses[$i]} - ${scores[$i]}))\n\
    \            result[${i}]=${diff}\n        fi\n    done\n    \n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuuyeyk89.sh: line 18: local: `1 2 3 4 5 1'': invalid variable name
    for name reference

    /tmp/tmpuuyeyk89.sh: line 19: local: `1 2 3 4 2 -2'': invalid variable name for
    name reference

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses\n\
    \  local score guess diff diffs diffs_string\n  local i j\n  scores=$1\n  guesses=$2\n\
    \  for i in \"${!scores[@]}\"; do\n    score=${scores[i]}\n    guess=${guesses[i]}\n\
    \    diffs=()\n    for j in \"${!guesses[@]}\"; do\n      if [[ \"${score}\" ==\
    \ \"${guesses}\" ]]; then\n        diffs[${j}]=0\n      else\n        diffs[${j}]=`echo\
    \ \"${guess} - ${score}\" | bc`\n      fi\n    done\n    diffs_string=`printf\
    \ '%\"d\\n' \"${diffs[@]}\"`\n    diffs_string=${diffs_string//$'\\n'/}\n    echo\
    \ $diffs_string\n  done\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0\
    \ 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0\
    \ 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate\
    \ \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    /tmp/tmptlrieidx.sh: line 34: printf: `"'': invalid format character

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\n\
    \    scores=$1\n    guesses=$2\n\n    # Make sure they have the same length\n\
    \    [ $#scores -ne $#guesses ] && echo >&2 \"Usage: $(basename $0) [SCORES GUESSES]\"\
    \ 1>&2\n    \n    \n    local i j diff score guess guess guesses score score score\
    \ diffs diff\n    \n    diff=0\n    guesses=( ${guesses[@]} )\n    scores=( ${scores[@]}\
    \ )\n    \n    # Process each guess from right to left\n    for i in \"${!guesses[@]}\"\
    ; do\n        diffs=()\n        \n        # Process each score from left to right\n\
    \        for j in \"${!scores[@]}\"; do\n            \n            # Process each\
    \ guess for each score\n            score=${scores[j]}\n            guess=${guesses[j]}\n\
    \            \n            # Compare with current score\n            if [ ${score}\
    \ -gt ${guess} ]; then\n                # If current score is bigger, ignore this\
    \ score\n                continue\n            else\n                # Otherwise,\
    \ compare\n                diff=$(( ${diff} + abs( $(( ${guess} - ${score} ))\
    \ ) ))\n            fi\n        done\n        \n        # If we've already found\
    \ a diff and that guess is bigger, ignore this guess\n        diff && diffs=(\
    \ ${diffs[@]} ) && continue\n        \n        # Add the diff\n        diffs=(\
    \ ${diffs[@]} \"$diff\" )\n    done\n    \n    # Return the diffs\n    printf\
    \ '[\"%s\"]' \"${diffs[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1h_7qmx1.sh: line 23: [: 2scores: integer expression expected

    /tmp/tmp1h_7qmx1.sh: line 49: 0 + abs( 0 ) : syntax error in expression (error
    token is "( 0 ) ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local -n scores=$1; shift\n\
    \  local -n guesses=$1; shift\n  local -n result=$1; shift\n\n  local -a scores2=()\n\
    \  local -a guesses2=()\n  local i\n  local j\n  local k\n  local l\n  local num_scores=$#scores\n\
    \  local num_guesses=$#guesses\n\n  [[ \"${num_scores}\" -gt \"${num_guesses}\"\
    \ ]] && return 1\n  \n  # Reverse the scores\n  for ((i=num_scores; i>0; i--));\
    \ do\n    scores2[${i}-1]=${scores[${i}-1]}\n  done\n\n  # Reverse the guesses\n\
    \  for ((j=num_guesses; j>0; j--)); do\n    guesses2[${j}-1]=${guesses[${j}-1]}\n\
    \  done\n\n  # Count the number of \"0\" and \"+\" and store them as guesses\n\
    \  for ((k=num_scores-1; k>=0; k--)); do\n    if ((scores2[k]==0)); then\n   \
    \   guesses2[k]=-1\n    else\n      guesses2[k]=${scores2[k]-guesses2[k]}\n  \
    \  fi\n  done\n\n  # Compare the guesses and scores\n  for ((l=0; l<num_scores;\
    \ l++)); do\n    result[l]=${guesses2[l]}\n    if [[ ${guesses2[l]} -eq 0 ]];\
    \ then\n      if [[ ${scores2[l]} -eq 0 ]]; then\n        result[l]=\n      else\n\
    \        result[l]=${scores2[l]-scores2[l]}\n      fi\n    fi\n  done\n\n  # Put\
    \ the result back in original order\n  for ((i=num_scores; i>0; i--)); do\n  \
    \  ${result[i]}=${result[i-1]}\n  done\n\n  IFS=$'\\n' read -r -d '' -a result\
    \ < <(\n    echo \"${result[@]}\"\n  )\n  echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp91onliza.sh: line 18: local: `1 2 3 4 5 1'': invalid variable name
    for name reference

    /tmp/tmp91onliza.sh: line 19: local: `1 2 3 4 2 -2'': invalid variable name for
    name reference

    /tmp/tmp91onliza.sh: line 20: local: `'': not a valid identifier

    /tmp/tmp91onliza.sh: line 31: [[: 0scores: value too great for base (error token
    is "0scores")

    /tmp/tmp91onliza.sh: line 34: ((: 0scores: value too great for base (error token
    is "0scores")

    /tmp/tmp91onliza.sh: line 39: ((: 0guesses: value too great for base (error token
    is "0guesses")

    /tmp/tmp91onliza.sh: line 44: ((: 0scores: value too great for base (error token
    is "0scores")

    /tmp/tmp91onliza.sh: line 53: ((: 0scores: value too great for base (error token
    is "0scores")

    /tmp/tmp91onliza.sh: line 65: ((: 0scores: value too great for base (error token
    is "0scores")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local a b\n    a=( $1\
    \ )\n    b=( $2 )\n    local n i\n    local diff diffsum\n    local s\n    for\
    \ ((i=0;i<${#a[@]};i++)); do\n        diff=0\n        diffsum=0\n        for ((n=0;n<${#a[@]};n++));\
    \ do\n            diff=${#a[$n]} #we know the length of the arrays so no more\
    \ need to worry about arrays\n            diffsum=${diffsum}${a[$n]} #no need\
    \ to worry about arrays again\n            if ((diff == 0)); then\n          \
    \      diffsum=0\n            else\n                diffsum=$((${diffsum} + ${a[$n]}\
    \ )) #need to worry about arrays again here\n            fi\n            diff=$((diff\
    \ - ${#b[$n]} )) #need to worry about arrays again here\n        done\n      \
    \  if ((diff == 0)); then\n            diffsum=0\n        else\n            diffsum=$((${diffsum}\
    \ + ${b[$i]} ))\n        fi\n        diff=$((diff - ${#b[$i]} ))\n        diffsum=$((${diffsum}\
    \ + ${b[$i]} ))\n        diffsum=$((${diffsum} + ${b[$i]} ))\n        diffsum=$((${diffsum}\
    \ + ${b[$i]} ))\n        diffsum=$((${diffsum} + ${b[$i]} ))\n        diffsum=$((${diffsum}\
    \ + ${b[$i]} ))\n        diffsum=$((${diffsum} + ${b[$i]} ))\n        diffsum=$((${diffsum}\
    \ + ${b[$i]} ))\n        diffsum=$((${diffsum} + ${b[$i]} ))\n        diffsum=$((${diffsum}\
    \ + ${b[$i]} ))\n        diffsum=$((${diffsum} + ${b[$i]} ))\n        diffsum=$((${diffsum}\
    \ + ${b[$i]} ))\n        diffsum=$((${diffsum} + ${b[$i]} ))\n        diffsum=$((${diffsum}\
    \ + ${b[$i]} ))\n        diffsum=$((${diffsum} + ${b[$i]} ))\n        diffsum=$((${diffsum}\
    \ + ${b[$i]} ))\n        diffsum=$((${diffsum} + ${b[$i]} ))\n        diffsum=$((\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0do3x5c1.sh: line 59: unexpected EOF while looking for matching
    `)''

    /tmp/tmp0do3x5c1.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local x y\n    local\
    \ -a scores guesses\n    local -a result difference\n    local -i index score_sum\n\
    \    \n    scores=( $1 )\n    guesses=( $2 )\n    \n    # initialize the return\
    \ values\n    result=( $(for index in ${!scores[@]}; do echo -n \"\"; done) )\n\
    \    difference=( $(for index in ${!guesses[@]}; do echo -n \"\"; done) )\n  \
    \  \n    for index in ${!score[@]}; do\n        score_sum=0\n        # calculate\
    \ the score\n        for index in ${!score[@]}; do\n            if [ $index ==\
    \ $index ]; then\n                score_sum=$(($score_sum + ${scores[$index]}))\n\
    \            else\n                score_sum=$(($score_sum + ${scores[$index]}-${guesses[$index]}))\n\
    \            fi\n        done\n        # calculate the difference\n        difference[$index]=${guesses[$index]}-${scores[$index]}\n\
    \        \n        # update the return values\n        result[$index]=$(expr ${score_sum}\
    \ - ${difference[$index]})\n    done\n    \n    # now return the values\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local g1 g2\n  g1=$1\n\
    \  g2=$2\n  local -a scores\n  local -a guesses\n  scores=( $( echo \"$g1\" |\
    \ tr \" \" \"+\" ) )\n  guesses=( $( echo \"$g2\" | tr \" \" \"+\" ) )\n  declare\
    \ -a ans=()\n  for (( i=0; i < ${#scores[@]} && i < ${#guesses[@]} ); i++ )\n\
    \  do\n    if (( \"${guesses[i]}\" == \"${scores[i]}\" )); then\n      ans[i]=0\n\
    \    else\n      ans[i]=$(( \"${guesses[i]}\" - \"${scores[i]}\" ))\n    fi\n\
    \  done\n  echo \"${ans[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsa8kbqaa.sh: line 26: syntax error near `;''

    /tmp/tmpsa8kbqaa.sh: line 26: `  for (( i=0; i < ${#scores[@]} && i < ${#guesses[@]}
    ); i++ )''

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\
    \ score guessed difference\n    scores=( $1 )\n    guesses=( $2 )\n    difference=()\n\
    \    for (( i=1; i<\"${#scores[@]}\"; i++ )); do\n        guessed=false\n    \
    \    guess=${guesses[i]}\n        score=${scores[i]}\n        # you do not need\
    \ to compare \"0 1 0 0\"\n        if [[ ${#score} == 0 ]]; then\n            continue\n\
    \        fi\n        for (( j=0; j<\"${#guesses}\"; j++ )); do\n            if\
    \ [[ \"${guesses[j]}\" == \"${guess}\" ]]; then\n                # the guess is\
    \ correct\n                guessed=true\n                score=${score}\n    \
    \        fi\n        done\n        if [[ \"$guessed\" == \"false\" ]]; then\n\
    \            # the guessed value is false\n            difference=( \"${difference[@]}\"\
    \ \"$score\")\n        fi\n    done\n    echo \"${difference[@]}\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local _compare _score\
    \ _scores \"_scores\" \"_compare\" _guesses _diff\n    local i\n    local count=0\n\
    \    _scores=$1\n    _guesses=$2\n    for ((i=0; i<${#_scores[@]}; i++)); do\n\
    \        ((count += ${_scores[$i]} == ${_guesses[$i]}))\n    done\n    # return\
    \ results\n    for ((i=0; i<${#_scores[@]}; i++)); do\n        _diff=$(echo \"\
    ${_scores[$i]} - ${_guesses[$i]}\" | bc -l)\n        if (( ${_diff} == 0 )); then\n\
    \            _compare=\"$_compare$(( ${count} - 1 ))\"\n        else\n       \
    \     _compare=\"$_compare$(( ${_diff} ))\"\n        fi\n    done\n    # return\
    \ results\n    echo \"$_compare\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") =\
    \ \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"\
    0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnmc8jfiw.sh: line 24: ((: count += 1 2 3 4 5 1 == 1 2 3 4 2 -2:
    syntax error in expression (error token is "2 3 4 5 1 == 1 2 3 4 2 -2")

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    /tmp/tmpnmc8jfiw.sh: line 29: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local i score guess result\
    \ j\n    local num1=$1\n    local num2=$2\n    local i score guess result j\n\
    \    local num3=$3\n    local num4=$4\n    local score guess result j\n    local\
    \ num5=$5\n    local num6=$6\n    # return an empty array if the lengths are not\
    \ equal\n    if [ ${#num1} != ${#num2} ] || [ ${#num3} != ${#num4} ] || [ ${#num5}\
    \ != ${#num6} ]; then\n        return \"0\"\n    fi\n    for ((i=0;i < ${#num1};++i));\
    \ do\n        result=`echo \"${num1}[i] + ${num2}[i]\" | bc -l`\n        guess=`echo\
    \ \"${num1}[i] * ${num2}[i]\" | bc -l`\n        for ((j=0;j < ${#num3};++j));\
    \ do\n            score=`echo \"${num3}[j] - ${num4}[j]\" | bc -l`\n         \
    \   if [ \"${num3[j]}\" -gt \"${num4[j]}\" ]; then\n                echo \"${num3}[j]\
    \ - ${num4}[j] should be bigger\"\n                return \"0\"\n            fi\n\
    \            if [ \"${num3[j]}\" -lt \"${num4[j]}\" ]; then\n                echo\
    \ \"${num3}[j] - ${num4}[j] should be smaller\"\n                return \"0\"\n\
    \            fi\n            if [ \"${num3[j]}\" == \"${num4[j]}\" ]; then\n \
    \               if [ \"${num5[j]}\" -gt \"${num6[j]}\" ]; then\n             \
    \       echo \"${num5[j]} - ${num6[j]} should be bigger\"\n                  \
    \  return \"0\"\n                fi\n                if [ \"${num5[j]}\" -lt \"\
    ${num6[j]}\" ]; then\n                    echo \"${num5[j]} - ${num6[j]} should\
    \ be smaller\"\n                    return \"0\"\n                fi\n       \
    \         if [ \"${num5[j]}\" == \"${num6[j]}\" ]; then\n                    echo\
    \ \"${num5[j]} + ${num6[j]} should be equal\"\n                    return \"0\"\
    \n                fi\n            fi\n        done\n    done\n    echo \"${num1}\
    \ + ${num2} should be equal\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local score guess score\
    \ score result diff output\n  score=( $1 )\n  guess=( $2 )\n  result=()\n  for\
    \ (( i = 0; i < ${#score[@]}; ++i )); do\n    diff=( 0 )\n    for (( j = 0 ; j\
    \ < ${#guess[@]}; ++j )); do\n      if [ ${score[i]} -gt ${guess[j]} ]; then\n\
    \tdiff=( $diff ${guess[j]} )\n      fi\n    done\n    result+=( ${diff} )\n  done\n\
    \  output=$( printf \"%s:\" ${result[@]} )\n  output=${output:1}\n  output=${output:0:-1}\n\
    \  output=${output:0:-1}\n  echo \"$output\"\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal scores guesses\n\t\
    scores=$(IFS=' ' read -r -a scores < <(echo \"$1\"|tr ' ' '\\n'))\n\tguesses=$(IFS='\
    \ ' read -r -a guesses < <(echo \"$2\"|tr ' ' '\\n'))\n\tlet \"guessesCount=${#guesses[@]}\"\
    \n\tlet \"scoresCount=${#scores[@]}\"\n\tlet \"resultCount=0\"\n\tlet \"maxScore=${scoresCount}\"\
    \n\t\n\tfor i in $(seq 0 \"$guessesCount\"); do\n\t\tresult=$((maxScore - abs(${scores[$i]}\
    \ - ${guesses[$i]})))\n\t\tif [[ $result -lt 0 ]]; then\n\t\t\tresult=${result}\n\
    \t\tfi\n\t\tresult[$i]=\"$result\"\n\t\tlet resultCount++\n\tdone\n\t\n\techo\
    \ -n '['\n\tfor i in $(seq 0 \"$resultCount\"); do\n\t\techo \"\\\"${result[i]}\\\
    \",\"\n\tdone\n\techo ']'\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0\
    \ 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0\
    \ 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate\
    \ \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbp5rnmj9.sh: line 27: maxScore - abs( - ): syntax error in expression
    (error token is "( - )")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n        local scores guesses\
    \ diff score guess i\n        scores=$1\n        guesses=$2\n        for (( i=0;\
    \ i<${#scores}; i++ )); do\n                score=${scores[i]}\n             \
    \   guess=${guesses[i]}\n                if [[ ${score} -eq 0 ]]; then\n     \
    \                   diff+=$guess\n                else\n                     \
    \   diff+=$(expr $guess - $score)\n                fi\n        done\n        echo\
    \ \"$diff\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmp8k9qnydm.sh: line 24: [[: 1 2 3 4 5 1: syntax error in expression\
    \ (error token is \"2 3 4 5 1\")\nexpr: syntax error: unexpected argument \u2018\
    2\u2019\n"
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  declare -a nums=${1:-\"\
    0 1 2 3 4 5 6\"}\n  declare -a guesses=${2:-\"6 5 4 3 2 1 0\"}\n  declare -a numslen=${#nums[@]}\n\
    \  declare -a guesseslen=${#guesses[@]}\n  # Make sure we have two arrays \n \
    \ [[ $numslen -ne $guesseslen ]] && echo \"Not same length!\" && return\n  declare\
    \ -a ret\n  for ((i=0; i<$guesseslen; i++))\n  do\n    # Take difference between\
    \ guess and score\n    diff=$(( ${guesses[i]} ${nums[i]} - ${nums[i]} ))\n   \
    \ # Don't take difference of 0, return 0 for every other value\n    [[ \"$diff\"\
    \ -eq 0 ]] && diff=0 || diff\n    # Put the result in ret\n    ( ret+=($diff)\
    \ ) || return 1\n  done\n  ret\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6w7rke6j.sh: line 28: 1 2 3 4 2 -2 1 2 3 4 5 1 - 1 2 3 4 5 1 :
    syntax error in expression (error token is "2 3 4 2 -2 1 2 3 4 5 1 - 1 2 3 4 5
    1 ")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses\n\n\
    \  read scores guesses <<< \"$1\"\n  echo \"$guesses\" | sort | uniq | sed 's/^/\"\
    /; s/$/ /;' | while read line; do\n    local guesses score\n    guesses=$(echo\
    \ \"$line\" | sed 's/ /\"/; s/$/\"/')\n    score=$(echo \"$line\" | sed 's/ /\"\
    /; s/$/\"/')\n    echo \"$score\" \"$guesses\"\n  done\n}\n\ncandidate() {\n \
    \   compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\
    \ 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\"\
    \ \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2\
    \ -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0\
    \ 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local i j\n    for ((i=0;i<${#$1};++i));\
    \ do\n        local -n scores=\"${!i}\"\n        for ((j=i+1;j<${#$1};++j)); do\n\
    \            local -n guesses=\"${!j}\"\n            if [[ \"$scores\" == \"$guesses\"\
    \ ]]; then\n                echo \"0\"\n            elif [[ ! \"$scores\" -eq\
    \ \"$guesses\" ]]; then\n                echo \"${!j} - ${!i}\"\n            fi\n\
    \        done\n    done\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0\
    \ 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0\
    \ 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate\
    \ \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8lqxzev_.sh: line 21: i<${#$1}: bad substitution

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\
    \ i j diff jk max\n    # convert each number in $1 into a number\n    scores=(\
    \ $1 )\n    guesses=( $2 )\n\n    # count the correct guesses\n    max=$((${#scores[@]}\
    \ + ${#guesses[@]}))\n    diff () {\n        local i j diff max\n        for ((i\
    \ = 0; i < max; i++) { diff+=$((${scores[$(($i-1))]} == ${guesses[$i]}?0:${scores[$(($i-1))]}\
    \ - ${guesses[$i]})) } ); do\n        done\n    }\n\n    # find how many guesses\
    \ we have\n    for ((i = 0; i < max; i++) { diff+=$((${scores[$(($i-1))]} == ${guesses[$i]}?0:(${scores[$(($i-1))]}\
    \ - ${guesses[$i]}))) } ); do\n    done\n    # compare each guess to each score\
    \ and output the results\n    for ((i = 0; i < max; i++) { j=0; j+=diff; diff=0;\
    \ }); do\n        j+=$((${scores[$(($i-1))]} == ${guesses[$i]}?0:(${scores[$(($i-1))]}\
    \ - ${guesses[$i]})))\n        if ((j != 0)); then\n            diff += $((${guesses[$i]}\
    \ != ${scores[$(($i-1))]}?0:(${guesses[$i]} - ${scores[$(($i-1))]})))\n      \
    \  fi\n    done\n    # return the final result\n    for ((i = 0; i < max; i++)\
    \ { diff += $((${guesses[$i]} != ${scores[$(($i-1))]}?0:(${guesses[$i]} - ${scores[$(($i-1))]})))\
    \ } ); do\n        diff += $((${guesses[$i]} != ${scores[$(($i-1))]}?0:(${guesses[$i]}\
    \ - ${scores[$(($i-1))]})))\n    done\n    echo \"$diff\"\n}\n\ncandidate() {\n\
    \    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\
    \ 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\"\
    \ \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2\
    \ -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0\
    \ 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3dp0jk6j.sh: line 27: syntax error near `{''

    /tmp/tmp3dp0jk6j.sh: line 27: `        for ((i = 0; i < max; i++) { diff+=$((${scores[$(($i-1))]}
    == ${guesses[$i]}?0:${scores[$(($i-1))]} - ${guesses[$i]})) } ); do''

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local array=$1\n    local\
    \ array2=$2\n    local result=$( declare -A )\n    local i\n    local j\n    local\
    \ k\n    local result1\n    local result2\n    local a\n    local b\n    local\
    \ diff\n    local aC=0\n    local bC=0\n    local diff2\n    local aS=false\n\
    \    local bS=false\n    local diff2S\n\n    # Count for correct guess by number\
    \ of matches\n    for ((i=0;i<${#array};++i)); do\n        ((aC+=${array[$i]}))\n\
    \        ((bC+=${array2[$i]}))\n    done\n    \n    # Count for incorrect guess\
    \ by number of matches\n    for ((i=0;i<${#array};++i)); do\n        if ((${array[$i]}\
    \ == ${array2[$i]})); then\n            aS=true\n        fi\n    done\n    \n\
    \    for ((i=0;i<${#array2};++i)); do\n        if ((${array2[$i]} == ${array2[$i]}));\
    \ then\n            bS=true\n        fi\n    done\n    \n    \n    if ${aS}; then\n\
    \        aS=true\n    fi\n    if ${bS}; then\n        bS=true\n    fi\n\n    #\
    \ Count for correct guess by number of matches with second array\n    for ((i=0;i<${#array};++i));\
    \ do\n        ((diff+=${array[$i]} - ${array2[$i]}))\n    done\n    \n    for\
    \ ((i=0;i<${#array2};++i)); do\n        if ((${array2[$i]} == ${array2[$i]}));\
    \ then\n            diff2S=true\n        fi\n    done\n    \n    for ((i=0;i<${#array2};++i));\
    \ do\n        if ((${array2[$i]} == ${array2[$i]})); then\n            diff2S=true\n\
    \        fi\n    done\n    \n    for ((i=0;i<${#array2};++i)); do\n        if\
    \ ((${array2[$i]} == ${array2[$i]})); then\n            diff2S=true\n        fi\n\
    \    done\n    \n    for ((i=0;i<${#array2};++i)); do\n        if ((${array2[$i]}\
    \ == ${array2[$i]})); then\n            diff2S=true\n        fi\n    done\n  \
    \  \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate\
    \ \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"\
    1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3\
    \ 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxlnuh15z.sh: line 38: ((: aC+=1 2 3 4 5 1: syntax error in expression
    (error token is "2 3 4 5 1")

    /tmp/tmpxlnuh15z.sh: line 39: ((: bC+=1 2 3 4 2 -2: syntax error in expression
    (error token is "2 3 4 2 -2")

    /tmp/tmpxlnuh15z.sh: line 38: ((: aC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 39: ((: bC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 38: ((: aC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 39: ((: bC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 38: ((: aC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 39: ((: bC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 38: ((: aC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 39: ((: bC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 38: ((: aC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 39: ((: bC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 38: ((: aC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 39: ((: bC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 38: ((: aC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 39: ((: bC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 38: ((: aC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 39: ((: bC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 38: ((: aC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 39: ((: bC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 38: ((: aC+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpxlnuh15z.sh: line 39: ((: bC+=: syntax error: operand exp'
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local a=$1\n    local\
    \ b=$2\n    local c\n\n    for ((i = 0; i < ${#a}; i++)); do\n        c=\"${a[i]}\
    \ ${b[i]}\"\n        if [[ ${#c} == ${#a[i]} ]]; then\n            if [[ ${a[$i]}\
    \ -eq ${b[$i]} ]]; then\n                echo \"$c\"\n            else\n     \
    \           echo \"$((${b[$i]} - ${a[$i]}))\"\n            fi\n        else\n\
    \            echo \"0\"\n        fi\n    done\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\
    \ result\n    scores=$1\n    guesses=$2\n    result=()\n    local i=0\n    local\
    \ n\n    local l\n    local nscores\n    local nguesses\n    local correct\n \
    \   \n    nscores=`echo $scores | tr -dc ' ' | wc -l`\n    nguesses=`echo $guesses\
    \ | tr -dc ' ' | wc -l`\n    for ((i=0; i<$nscores; i++)); do\n        l=`echo\
    \ $scores | sed \"s/^$i //\"`\n        n=`echo $guesses | sed \"s/^$i //\"`\n\
    \        correct=`echo $guesses | sed \"s/^$i //\" | sed \"s/ $//\"`\n       \
    \ if [ $l -eq $n ]; then\n            result[i]=\"\\\"$correct\\\"\"\n       \
    \ else\n            result[i]=\"$(($l - $n)) \\\"$correct\\\"\"\n        fi\n\
    \        i=$(($i+1))\n    done\n    for ((i=0; i<$nguesses; i++)); do\n      \
    \  l=`echo $guesses | sed \"s/^$i //\"`\n        n=`echo $scores | sed \"s/^$i\
    \ //\"`\n        correct=`echo $scores | sed \"s/^$i //\" | sed \"s/ $//\"`\n\
    \        result[i]=\"$(($l - $n)) \\\"$correct\\\"\"\n        i=$(($i+1))\n  \
    \  done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") =\
    \ \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"\
    0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local a=$1\n    local\
    \ b=$2\n    local result\n    local count\n    local i\n    local j\n\n    # count\
    \ the number of elements in the list\n    count=$#\n    for i in $(seq 0 $count);\
    \ do \n        eval \"count=$((count + 1))\"\n    done\n    for i in $(seq 0 $count);\
    \ do \n        eval \"count=$((count - 1))\"\n    done\n    \n    # if the arrays\
    \ are of equal length, then compare them directly\n    if (($count == $#) && ($count\
    \ == $#)) {\n        for i in $(seq 0 $#); do \n            for j in $(seq 0 $#);\
    \ do \n                eval \"result=$((a - b))\"\n                if ((result\
    \ > 0)); then \n                    eval \"result=$((result * -1))\"\n       \
    \         fi\n                echo $result\n            done\n        done\n \
    \   }\n\n    # if the arrays are of different length, then compare them one pair\
    \ at a time\n    if [ $count -eq $# ]; then\n        for i in $(seq 0 $#); do\
    \ \n            eval \"result=$((b - a))\"\n            if ((result > 0)); then\
    \ \n                eval \"result=$((result * -1))\"\n            fi\n       \
    \     echo $result\n        done\n    fi\n\n}\n\ncandidate() {\n    compare \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4\
    \ 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0\
    \ 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2\
    \ 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4lazv8jc.sh: line 35: syntax error near unexpected token `{''

    /tmp/tmp4lazv8jc.sh: line 35: `    if (($count == $#) && ($count == $#)) {''

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local score guess diff\
    \ diff diff scores scores diff diffs diffs count\n\n    diffs=()\n    diff=0\n\
    \    scores=()\n    score=0\n    count=0\n    for score in \"$1\"; do\n      \
    \  if [ \"$count\" -eq \"$#\" ]; then\n            diffs+=(\"$diff\")\n      \
    \      diff=0\n            scores+=(\"$score\")\n            score=0\n       \
    \     count=0\n            continue\n        fi\n\n        guess=\"\"\n      \
    \  for guess in \"$2\"; do\n            if [ \"$count\" -eq \"$#\" ]; then\n \
    \               diffs+=(\"$diff\")\n                diff=0\n                scores+=(\"\
    $score\")\n                score=0\n                count=0\n                continue\n\
    \            fi\n\n            diff=$(echo \"$score - $guess\" | bc -l )\n   \
    \         if [ \"$diff\" = \"$score\" ]; then\n                diffs+=(\"$diff\"\
    )\n            else\n                diffs+=(\"$diff\")\n                diff=$diff\n\
    \            fi\n            scores+=(\"$score\")\n            score=$score\n\
    \            count=$(( $count + 1 ))\n        done\n    done\n\n    echo \"$diffs\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local score\n    local\
    \ guess\n    local diff\n    local i\n    local len\n    local len2\n    local\
    \ res\n\n    score=$1\n    guess=$2\n    diff=`expr $(echo \"$guess - $score\"\
    \ | bc)`\n    len=${#score}\n    len2=${#guess}\n    res=()\n    for ((i=1; i<len2;\
    \ ++i)); do\n        res[i]=`expr $diff\"*\"`\n    done\n    res[len]=\"`expr\
    \ $diff`\"\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") =\
    \ \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"\
    0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    expr: missing operand

    Try ''expr --help'' for more information.

    expr: missing operand

    Try ''expr --help'' for more information.

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    declare -a scores\n \
    \   declare -a guesses\n    declare -a errors\n    declare -i score guess\n  \
    \  local nscores=$#\n    local nguesses=$#\n    for (( i=0; i<${#scores[@]}; i++\
    \ )); do\n        score=${scores[i]}\n        guess=${guesses[i]}\n        ((errors[$i])=$((${guess[$i]}=$((${score}=~${guess[$i]}+${score})>${score}?${guess[$i]}:${score}))))\
    \ \n    done\n    for (( i=0; i<${#errors[@]}; i++ )); do\n        if (( errors[$i]!=0));\
    \ then\n            guesses[$i]=${guesses[$i]}\n            scores[$i]=${scores[$i]}\n\
    \        fi\n    done\n    for (( i=0; i<${#scores[@]}; i++ )); do\n        echo\
    \ \"${guesses[$i]}\"\n    done\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9qaqsadc.sh: line 27: syntax error near unexpected token `=$((${guess[$i]}=$((${score}=~${guess[$i]}+${score})>${score}?${guess[$i]}:${score})))''

    /tmp/tmp9qaqsadc.sh: line 27: `        ((errors[$i])=$((${guess[$i]}=$((${score}=~${guess[$i]}+${score})>${score}?${guess[$i]}:${score}))))
    ''

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  # Your code here\n  local\
    \ scores guesses\n  scores=$1; guesses=$2\n\n  local len=${#scores[@]}\n  local\
    \ result=()\n\n  # This loop iterates through the length of the two arrays simultaneously,\
    \ to compare\n  # the values in both arrays.\n  for (( i=0; i<${len}; i++ ));\
    \ do\n    local j=0\n    local resultStr=\n\n    # If the score and guess are\
    \ the same, we return 0, otherwise we return the\n    # difference between the\
    \ scores and the guess. We use abs to find the absolute\n    # difference between\
    \ the guess and the score.\n    if [ ${scores[i]} == ${guesses[i]} ] ; then\n\
    \      resultStr=\"0\"\n    else\n      resultStr=\"${abs($(echo \"${guesses[i]}\
    \ - ${scores[i]}\" | bc -l))}\"\n    fi\n    result[i]=\"${resultStr}\"\n  done\n\
    \n  printf '[\"%s\"]' \"${result[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\"\
    ) = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") =\
    \ \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp55yehty4.sh: line 34: [: too many arguments

    /tmp/tmp55yehty4.sh: line 37: ${abs($(echo "${guesses[i]} - ${scores[i]}" | bc
    -l))}: bad substitution

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal scores guesses diff\
    \ score guess i\n\tscores=( $1 )\n\tguesses=( $2 )\n\tdiff=()\n\tfor i in \"${!scores[@]}\"\
    ; do\n\t\tscore=${scores[i]}\n\t\tguess=${guesses[i]}\n\t\tif [ \"$guess\" ==\
    \ \"$score\" ]; then\n\t\t\tdiff+=( '\"0\"' )\n\t\telif [ \"$guess\" == \"$score\"\
    \ -a \"$guess\" -gt \"$score\" ]; then\n\t\t\tdiff+=( '\"1'  )\n\t\telif [ \"\
    $guess\" == \"$score\" -a \"$guess\" -lt \"$score\" ]; then\n\t\t\tdiff+=( '\"\
    -1\"' )\n\t\telse\n\t\t\tdiff+=( '\"$(abs $guess - $score)\"' )\n\t\tfi\n\tdone\n\
    \tprintf '%s\\n' \"${diff[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local arr1 arr2\n   \
    \ local i\n    local j\n\n    arr1=( $(echo $1 | sed \"s/ /' '/g\") )\n    arr2=(\
    \ $(echo $2 | sed \"s/ /' '/g\") )\n\n    i=${#arr1[@]}\n    j=${#arr2[@]}\n \
    \   while [ $i -le $j ]; do\n        arr1[$i]=$(printf \"%i\" $arr1[$i])\n   \
    \     arr2[$i]=$(printf \"%i\" $arr2[$i])\n        let i++\n        let j--\n\
    \    done\n\n    arr1=( $(echo $arr1 | sort -r) )\n    arr2=( $(echo $arr2 | sort\
    \ -r) )\n\n    i=${#arr1[@]}\n    j=${#arr2[@]}\n    while [ $i -le $j ]; do\n\
    \        if [ \"$arr1[$i]\" -eq \"$arr2[$i]\" ] ; then\n            arr1[$i]=0\n\
    \        else\n            arr1[$i]=$(echo \"abs($arr1[$i] - $arr2[$i])\" | bc)\n\
    \        fi\n        let i++\n        let j--\n    done\n\n    arr1=( $(echo $arr1\
    \ | sort -r) )\n    arr2=( $(echo $arr2 | sort -r) )\n    \n    printf \"${arr1[*]}\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_u748urk.sh: line 28: printf: 1''[6]: invalid number

    /tmp/tmp_u748urk.sh: line 29: printf: 1''[6]: invalid number

    /tmp/tmp_u748urk.sh: line 40: [: 1''[1]: integer expression expected

    (standard_in) 1: illegal character: ''

    (standard_in) 1: syntax error

    (standard_in) 1: illegal character: ''

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local a b x diff diff\
    \ i n result w\n    n=$#\n    if [ $n -lt 2 -o $n -gt 4 ] ; then\n        echo\
    \ \"Too few arguments\"\n    elif [ $n -eq 2 ] ; then\n        w=$1\n        w=$(echo\
    \ $w | tr -d ' ')\n        w=$(echo $w | sed 's/^[[:space:]]*//g')\n        w=$(echo\
    \ $w | sed 's/[[:space:]]*$//g')\n        w=$(echo $w | sed 's/^[[:space:]]*//g')\n\
    \        w=$(echo $w | sed 's/[[:space:]]*$//g')\n        w=$(echo $w | sed 's/^-[[:space:]]*//g')\n\
    \        w=$(echo $w | sed 's/-[[:space:]]*$//g')\n        b=$2\n        b=$(echo\
    \ $b | tr -d ' ')\n        b=$(echo $b | sed 's/^[[:space:]]*//g')\n        b=$(echo\
    \ $b | sed 's/[[:space:]]*$//g')\n        b=$(echo $b | sed 's/^[[:space:]]*//g')\n\
    \        b=$(echo $b | sed 's/[[:space:]]*$//g')\n        b=$(echo $b | sed 's/^-[[:space:]]*//g')\n\
    \        b=$(echo $b | sed 's/-[[:space:]]*$//g')\n    else\n        w=$1\n  \
    \      w=$(echo $w | tr -d ' ')\n        w=$(echo $w | sed 's/^[[:space:]]*//g')\n\
    \        w=$(echo $w | sed 's/[[:space:]]*$//g')\n        w=$(echo $w | sed 's/^[[:space:]]*//g')\n\
    \        w=$(echo $w | sed 's/[[:space:]]*$//g')\n        w=$(echo $w | sed 's/^-[[:space:]]*//g')\n\
    \        w=$(echo $w | sed 's/-[[:space:]]*$//g')\n        b=$2\n        b=$(echo\
    \ $b | tr -d ' ')\n        b=$(echo $b | sed 's/^[[:space:]]*//g')\n        b=$(echo\
    \ $b | sed 's/[[:space:]]*$//g')\n        b=$(echo $b | sed 's/^[[:space:]]*//g')\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpupcpcpdg.sh: line 53: syntax error near unexpected token `}''

    /tmp/tmpupcpcpdg.sh: line 53: `}''

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores=\"$1\"\n \
    \ local guesses=\"$2\"\n  local result\n\n  # split the scores and guesses into\
    \ arrays of numbers and strings, respectively\n  local scores_arr=($scores)\n\
    \  local guesses_arr=($guesses)\n\n  # initialize results array\n  result=($(for\
    \ i in ${!scores_arr[@]}; do echo 0; done))\n\n  # for each index from 0 to number\
    \ of guesses\n  for i in ${!guesses_arr[@]}; do\n    # for each index from 0 to\
    \ number of scores\n    for j in ${!scores_arr[@]}; do\n      local score=${scores_arr[$j]}\n\
    \      local guess=${guesses_arr[$j]}\n      result[i]=$(( result[i] + abs( ${guess}\
    \ - ${score} } )))\n    done\n  done\n\n  # return result\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcg8qe46q.sh: line 35: result[i] + abs( 1 - 1 } ): syntax error
    in expression (error token is "( 1 - 1 } )")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local a b i j k l m n\n\
    \    a=$1\n    b=$2\n    len1=${#a}\n    len2=${#b}\n    ans=()\n    for (( i=0;\
    \ i<len1; i++ )); do\n        m=${a[i]}\n        n=${b[i]}\n        if [ $m -ne\
    \ $n ]; then\n            ans+=(\"$((abs($m-b[i])))\")\n        else\n       \
    \     ans+=(\"$m\")\n        fi\n    done\n    return \"${ans[@]}\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphspor1uy.sh: line 27: [: too many arguments

    /tmp/tmphspor1uy.sh: line 28: abs(-b[i]): syntax error in expression (error token
    is "(-b[i])")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local a b score diff\
    \ guess i j\n    for ((i=0; i<${#1}; i++)); do\n        score=$(echo $1 $2 | cut\
    \ -d' ' -f $i)\n        guess=$(echo $2 | cut -d' ' -f $i)\n        if [ -z \"\
    $score\" -o -z \"$guess\" ]; then\n            diff=0\n        else\n        \
    \    diff=$(echo $score | awk '{print ($1-$2)}')\n            diff=$(($diff >\
    \ 0 ? $diff : abs($diff)))\n        fi\n        a+=$(($diff > 0 ? 1 : 0))\n  \
    \      b+=$(($diff > 0 ? 1 : 0))\n    done\n    diff =$(($a > $b ? $a : $b))\n\
    \    diff =$(($diff > 0 ? 1 : 0))\n    diff =$(($diff < 0 ? -1 : 0))\n    echo\
    \ \"$diff\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    /tmp/tmp77cmetoj.sh: line 26: 1 > 0 ? 1 : abs(1): syntax error in expression (error
    token is "(1)")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    # Convert the arguments\
    \ to numbers\n    local scores guesses\n    scores=${1//[!0-9]}\n    guesses=${2//[!0-9]}\n\
    \n    # Loop over every possible guess and compute the difference with the original\
    \ score\n    local diff score\n    local i j\n    for ((i = 0; i <= ${#guesses};\
    \ i++))\n    do\n\tfor ((j = 1; j <= ${#scores}; j++))\n\tdo\n\t    diff=$(expr\
    \ ${guesses[i]} - ${scores[j]})\n\t    echo \"${diff}\"\n\tdone\n    done\n}\n\
    \ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: missing argument after \u2018-\u2019\nexpr: syntax\
    \ error: missing argument after \u2018-\u2019\nexpr: syntax error: missing argument\
    \ after \u2018-\u2019\nexpr: syntax error: missing argument after \u2018-\u2019\
    \nexpr: syntax error: missing argument after \u2018-\u2019\nexpr: syntax error:\
    \ missing argument after \u2018-\u2019\n"
  stdout: ''
  timestamp: 1660055395
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local -n array1=${1:-array}\n\
    \    local -n array2=${2:-array}\n    local -n result=${3:-result}\n    local\
    \ -n i\n    local -n j\n    local -n score1\n    local -n score2\n    local -n\
    \ guess1\n    local -n guess2\n    local -n diff\n    local -n num\n    local\
    \ -n num2\n    local -n num3\n    local -n num4\n    local -n num5\n\n    local\
    \ num1\n    local num2\n    local num3\n    local num4\n    local num5\n    local\
    \ num6\n    local num7\n    local num8\n\n    for (( i = 1; i <= ${#array1}; i++\
    \ )); do\n        for (( j = 1; j <= ${#array2}; j++ )); do\n            score1=${array1[$i]}\n\
    \            score2=${array2[$j]}\n            guess1=${result[$i]}\n        \
    \    guess2=${result[$j]}\n            diff=$(( $guess1 - $score1 ))\n       \
    \     diff=$(( diff > 0 ? diff : -diff ))\n            diff=$(( diff < 0 ? diff\
    \ : -diff ))\n\n            num1=${diff}\n            num2=${guess1}\n       \
    \     num3=${guess2}\n            num4=$(( $num1 - $num2 ))\n            num5=$((\
    \ num4 > 0 ? num4 : -num4 ))\n            num5=$(( num5 > 0 ? num5 : -num5 ))\n\
    \n            num6=${guess1}\n            num7=${guess2}\n            num8=$((\
    \ $num6 - $num7 ))\n            num8=$(( num8 > 0 ? num8 : -num8 ))\n\n      \
    \      result[$i]=$num5\n            result[$j]=$num8\n        done\n    done\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfuxv99p4.sh: line 18: local: `1 2 3 4 5 1'': invalid variable name
    for name reference

    /tmp/tmpfuxv99p4.sh: line 19: local: `1 2 3 4 2 -2'': invalid variable name for
    name reference

    /tmp/tmpfuxv99p4.sh: line 20: local: warning: result: circular name reference

    /tmp/tmpfuxv99p4.sh: line 20: warning: result: circular name reference

    /tmp/tmpfuxv99p4.sh: line 44: ((: `1'': not a valid identifier

    /tmp/tmpfuxv99p4.sh: line 44: ((: `1'': not a valid identifier

    /tmp/tmpfuxv99p4.sh: line 45: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores=($1)\n \
    \   local guesses=($2)\n\n    local i scores guesses\n    declare -A scores\n\
    \    declare -A guesses\n\n    for i; do\n        scores[$i]=${scores[i]}\n  \
    \      guesses[$i]=${guesses[i]}\n    done\n\n    local score\n    local guess\n\
    \    local difference\n\n    local result\n    local output\n\n    for (( i =\
    \ 0; i <= ${#scores[@]}; i++ )); do\n        score =\"${scores[i]}\"\n       \
    \ guess  =\"${guesses[i]}\"\n        difference=`expr $guess \\- $score`\n\n \
    \       case \"$difference\" in\n            0)\n                result=0\n  \
    \              output=\"\\\"$result\\\"\"\n                break\n           \
    \     ;;\n            *)\n                difference=`expr $difference \\* -1`\n\
    \                result=`expr $result \\+ $difference`\n                output=\"\
    \\\"$difference\\\"\"\n                break\n                ;;\n        esac\n\
    \    done\n    echo \"$output\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4ciijdsq.sh: line 22: declare: scores: cannot convert indexed to
    associative array

    /tmp/tmp4ciijdsq.sh: line 23: declare: guesses: cannot convert indexed to associative
    array

    /tmp/tmp4ciijdsq.sh: line 26: 1 2 3 4 5 1: syntax error in expression (error token
    is "2 3 4 5 1")

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local a b\n    for ((i=0;\
    \ i<${#a[@]}; i++))\n    do\n        [[ \"${a[$i]}\" == \"${b[$i]}\" ]] && echo\
    \ \"0\" || echo \"${abs($a[$i]-$b[$i])}\"\n    done\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local A=( $( echo \"\
    $1\" | tr ' ' '\\n' ) )\n    local B=( $( echo \"$2\" | tr ' ' '\\n' ) )\n   \
    \ local C=( $( for i in \"${!A[@]}\"; do echo \"${A[$i]} ${B[$i]}\"; done ) )\n\
    \    echo \"${C[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n\
    \    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n  \
    \  [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\tlocal scores guesses offsets\
    \ scores offsets scores offset guess score diff\n\tlocal i j k k1 k2 k3 k4 k5\
    \ k6 k7 k8 k9 k10 k11 k12\n\tlocal n maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets maxScores maxOffsets\
    \ maxScores maxOffsets maxScores maxOffsets maxScores max\n}\n\ncandidate() {\n\
    \    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\
    \ 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\"\
    \ \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2\
    \ -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0\
    \ 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  A=($1)\n  B=($2)\n  for\
    \ ((i=0; i<${#A[@]}; i++))\n  do\n     echo \"${B[i]} ${A[i]}\"\n  done\n}\n\n\
    candidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local scores guesses\n\
    \    scores=$1\n    guesses=$2\n\n    local len $i $j\n\n    len=${#scores[@]}\n\
    \n    for((i=0;i<len;++i)); do\n        for((j=0;j<len;++j)); do\n           \
    \ if [[ ${scores[i]} == ${guesses[j]} ]]; then\n                echo \"0\"\n \
    \               break\n            fi\n        done\n    done\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\t# the return variable\n\
    \tlocal result\n\t# split the arrays into their elements\n\tlocal scores guesses\n\
    \t# split the first list into scores and guesses\n\tIFS=\" \" scores=($1) guesses=(${@:2..})\n\
    \t# we know that scores is of equal length to guesses\n\tlocal i j\n\tfor (( i\
    \ = 0; i < ${#scores[@]} && i < ${#guesses[@]} ); ++i )\n\tdo\n\t\t# for each\
    \ element of scores, see if it matches the element of guesses\n\t\tif [ ${scores[i]}\
    \ = ${guesses[i]} ]; then\n\t\t\t# if the guesses match, add it to the result\n\
    \t\t\tresult+=(${i})\n\t\telse\n\t\t\t# if the guesses don't match, then subtract\
    \ its absolute difference from the score\n\t\t\tresult+=(${#scores[@]}-1)\n\t\t\
    fi\n\tdone\n\t# if the number of matches is the same, we have a perfect match\n\
    \tif [ ${#result[@]} -eq ${#scores[@]} ]; then\n\t\tresult=(\"0\")\n\tfi\n\t#\
    \ return our result\n\techo \"${result[@]}\"\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmp97f1jbfa.sh: line 26: syntax error near `;'\n/tmp/tmp97f1jbfa.sh:\
    \ line 26: `\tfor (( i = 0; i < ${#scores[@]} && i < ${#guesses[@]} ); ++i )'\n"
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n\t\n\t# make sure they are\
    \ both arrays\n\t[[ ${#} -eq 0 ]] && echo \"ERROR: $1 must be an array\" && exit\
    \ 1\n\t[[ ${#} -eq 0 ]] && echo \"ERROR: $2 must be an array\" && exit 1\n\n\t\
    # make sure both arrays have the same number of values\n\t[[ ${#${#1}[@]} -eq\
    \ ${#${#2}[@]} ]] || { echo \"ERROR: $1 and $2 must have the same number of values\"\
    \ && exit 1; }\n\n\t# return result\n\ti=0\n\tresult=()\n\twhile [ $i -lt ${#1}\
    \ ]\n\tdo\n\t\tj=0\n\t\twhile [ $j -lt ${#2} ]\n\t\tdo\n\t\t\t# if both are equal\
    \ just return 0\n\t\t\t[[ \"${#1}[$i]\" -eq \"${#2}[$j]\" ]] && result+=(\"0\"\
    ) && return 0\n\t\t\t# if one is greater then the other return difference\n\t\t\
    \t[[ \"${#1}[$i]\" -gt \"${#2}[$j]\" ]] && ((result+=(\"$(echo ${#1}[$i]-${#2}[$j])\"\
    ))) || result+=(\"$(echo ${#2}[$j]-${#1}[$i])\")\n\t\t\tj=$((j+1))\n\t\tdone\n\
    \t\ti=$((i+1))\n\tdone\n\treturn \"${result[@]}\"\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmcpmj1l0.sh: line 24: ${#${#1}[@]}: bad substitution

    '
  stdout: ''
  timestamp: 1660055395
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local i j k diff diff diff\
    \ diff diff diff diff diff diff\n  local -a scores=(\"$@\")\n  local -a guesses=(\"\
    $@\")\n\n  local -a counts\n  for ((i=0; i<${#scores[@]}; i++)); do\n    counts[${i}]=0\n\
    \  done\n  for ((i=0; i<${#scores[@]}; i++)); do\n    counts[${i}]=$((${counts[${i}]}+1))\n\
    \  done\n\n  for i in \"${!counts[@]}\"; do\n    diff=0\n    diff=${scores[i]}\n\
    \    for j in \"${!counts[@]}\"; do\n      if [[ ${counts[${i}]} -gt ${counts[${j}]}\
    \ ]]; then\n        diff=${diff}+${diff}-${diff}\n      elif [[ ${counts[${i}]}\
    \ -lt ${counts[${j}]} ]]; then\n        diff=${diff}+${diff}\n      fi\n    done\n\
    \    guesses[i]=${diff}\n  done\n\n  for i in \"${!guesses[@]}\"; do\n    diff\
    \ =$(echo \"${guesses[i]} - ${scores[i]}\" | bc -l)\n  done\n\n  for i in \"${!guesses[@]}\"\
    ; do\n    diff =$(echo \"${guesses[i]} - ${scores[i]}\" | bc -l)\n    guesses[i]=${diff}\n\
    \  done\n\n  echo ${guesses}\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    diff: missing operand after ''=''

    diff: Try ''diff --help'' for more information.

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    diff: missing operand after ''=''

    diff: Try ''diff --help'' for more information.

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    diff: missing operand after ''=''

    diff: Try ''diff --help'' for more information.

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    diff: missing operand after ''=''

    diff: Try ''diff --help'' for more information.

    '
  stdout: ''
  timestamp: 1660055394
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    declare -a scores\n \
    \   declare -a guesses\n    declare -a result\n\n    IFS=' ' read -ra scores <<<\
    \ \"$1\"\n    IFS=' ' read -ra guesses <<< \"$2\"\n    len=${#scores[*]}\n\n \
    \   for ((i=1; i<=len; i++)); do\n        if [[ ${scores[i]} -gt ${guesses[i]}\
    \ ]]; then\n            result[i]=`echo \"${scores[i]} - ${guesses[i]}\" | bc`\n\
    \        elif [[ ${scores[i]} -lt ${guesses[i]} ]]; then\n            result[i]=`echo\
    \ \"${guesses[i]} - ${scores[i]}\" | bc`\n        fi\n    done\n\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
- exit_code: -1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n    local guesses; read guesses;\
    \ local scores; read scores;\n    local difference; local match;\n\n    local\
    \ -n scores=\"scores\"; local -n guesses=\"guesses\";\n    for ((i=0;i<${#scores[*]};++i));\
    \ do\n        match=${guesses[i]};\n        difference=${scores[i]} - ${match};\n\
    \        if (( \"${difference}\" < 0)); then\n            guesses[i]=${match};\n\
    \        fi;\n    done;\n    for ((i=0;i<${#guesses[*]};++i)); do\n        guesses[i]=${guesses[i]};\n\
    \    done;\n    echo \"${guesses[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\"\
    ) = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") =\
    \ \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=31 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=12 encoding='utf-8'>
  timestamp: 1660055399
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"\
    ', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\"\
    )\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated\
    \ list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses result\n\
    \  scores=$1\n  guesses=$2\n  for ((i=0;i<${#scores[@]};++i)); do\n    result=\"\
    ${guesses[i]}\"\n    if [ \"${guesses[i]}\" == \"${scores[i]}\" ]; then\n    \
    \  result=\"${result} \"\n    fi\n    echo \"${result}${result}\"\n  done\n}\n\
    \ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055394
