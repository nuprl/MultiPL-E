language: sh
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=\"$1\"\n    shift=\"$2\"\n    if\
    \ [ \"$shift\" -gt \"$#x\" ]; then\n        x=\"$x$*\"\n        shift=\"$(( ${#x}\
    \ - 1))\"\n    fi\n    while [ \"$shift\" -gt 0 ] && [ \"$#x\" -gt 0 ]; do\n \
    \       eval \"x=$(x<<1)\"\n        shift=\"$(( ${#x} - 1))\"\n    done\n    echo\
    \ \"$x\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph7jfd3vc.sh: line 15: [: 2x: integer expression expected

    /tmp/tmph7jfd3vc.sh: line 19: [: 2x: integer expression expected

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local -r x=\"$1\"\n  shift\n  local\
    \ -r shift=\"$1\"\n  local -r digits=\"\"\n\n  while (( \"$#\" > shift )); do\n\
    \    (( shift += 1 ))\n    digits+=\"$1\"\n  done\n  (( \"$#\" -= shift ))\n\n\
    \  # If the shift > number of digits, reverse the digits.\n  if (( \"${#digits}\"\
    \ > shift )); then\n    digits=\"${digits#?}\"\n    digits=${digits%?}\n  fi\n\
    \n  printf \"%s\" \"$digits\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxu6r7q7o.sh: line 22: ((: 1 -= shift : attempted assignment to
    non-variable (error token is "-= shift ")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x shift result\n    x=${1%%/*}\n\
    \    shift\n    result=\"\"\n    for (( shift=${#x}; shift > 0; shift-- )); do\n\
    \        digit=${x%/*}\n        digit=${digit:0:1}\n        result=$digit$result\n\
    \        x=${x#*/}\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local i\n    shift\n    i=$1\n   \
    \ shift\n    if [[ ${#i} -gt 0 ]]; then\n        while (( ${#i} > 0 )); do\n \
    \           i=$(expr ${i} + $2)\n        done\n    fi\n    echo \"$i\"\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: missing argument after \u2018+\u2019\n"
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local n=$1\n  shift\n  local r=$1\n\
    \  local s=$2\n  for ((i=$s; i<=n; i+=$s)); do\n    r=$(( r * 10 + ( i % 10 ))\
    \ )\n    i=$(( i - 1 ))\n  done\n  echo $r\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdpmfo6_z.sh: line 17: ((: i=: syntax error: operand expected (error
    token is "=")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tif [[ $# -lt 2 ]]; then\n\t\treturn\
    \ 1;\n\tfi\n\n\tlocal orig=$1\n\tlocal shift=$2\n\n\tlocal len=${#orig}\n\tlocal\
    \ shiftLength=$(( len*shift ))\n\tlocal last=\n\tlocal ret=\n\n\tfor i in $(seq\
    \ 0 $shiftLength); do\n\t\tlast=$(( ${orig:$i:1}*10+${orig:$((i+1)):1} ))\n\t\t\
    ret=$(( ${ret}${last:1}*${last:1} ))\n\tdone\n\n\tif [[ $ret =~ ^[0-9]+$ ]]; then\n\
    \t\techo $ret\n\telse\n\t\techo ${orig:0:$shiftLength:1}\n\tfi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp95hctq3a.sh: line 27: 0* : syntax error: operand expected (error
    token is "* ")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    if [ \"$shift\" -gt \"0\" ]; then\n        local newx=\"$(x<<$shift)\"\
    \n        local len=\"${#newx}\"\n        local reversed=\"${newx%$x}\"\n    \
    \    shift\n        echo \"$reversed$(cyclic_shift $len $shift)\"\n    else\n\
    \        local newx=\"$(x<<$shift)\"\n        echo \"$newx\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp407jp1oc.sh: line 17: warning: here-document at line 17 delimited
    by end-of-file (wanted `$shift'')

    /tmp/tmp407jp1oc.sh: line 17: warning: here-document at line 17 delimited by end-of-file
    (wanted `$shift'')

    /tmp/tmp407jp1oc.sh: line 16: warning: here-document at line 16 delimited by end-of-file
    (wanted `$shift'')

    /tmp/tmp407jp1oc.sh: line 16: x: command not found

    /tmp/tmp407jp1oc.sh: line 20: cyclic_shift: command not found

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x shift ndigits digits\n  x=$2\n\
    \  shift=$1\n  ndigits=$(perl -le 'print \"($x)\"'|grep -Eo '[[:digit:]]+'|wc\
    \ -l)\n  digits=$(x|perl -ne '/(^|.)(.{$ndigits}$)/'|sed 's/.\\(.\\)/\\1/g')\n\
    \  echo \"$((10#$digits * $shift))\"\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1v79c4zu.sh: line 17: x: command not found

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=\"${1:0:$((${#1} + ${#2}))}\"\n\
    \    shift\n    echo -n \"${x:${#x}:1}\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  # Shift left by one digit.\n  # \"12\"\
    \ -> \"11\"\n  local x=\"$1\"\n  local shift=\"$2\"\n  shift \"$shift\"\n  local\
    \ result=\"$x\"\n  local i\n  while [[ \"$result\" =~ ^[0-9]+$ ]]; do\n    i=\"\
    $((${#result}-1+${shift}))\"\n    shift \"$shift\"\n    result=\"$result[${#result}-1]\"\
    \n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local var=\"$1\";\n    local shift=\"\
    $2\";\n    local result=\"1\";\n    shift;\n    for (( i = shift, j = 9; i <=\
    \ 0; i-=2, j++ ))\n    do\n        result=\"${result}$j\";\n    done;\n    for\
    \ (( j = (shift - 1); j <= 9; j-=2, i++ ))\n    do\n        result=\"${result}${i}\"\
    ;\n    done;\n    echo ${result};\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=24 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=19 encoding='utf-8'>
  timestamp: 1660057531
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x shift retval\n    shift=3\n\
    \    x=\"$1\"\n    shift \"$2\"\n    shift-=1\n    while (( shift >= 0 )) ; do\n\
    \        (( x = (( x * 10 ) + $shift )) )\n        shift=3\n    done\n    retval=$(\
    \ printf \"%0${#x}d\" \"$x\")\n    shift=3\n    while (( shift >= 0 )) ; do\n\
    \        shift=$(( shift * 10 ))\n    done\n    echo \"$retval\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqr74afjl.sh: line 19: syntax error near unexpected token `(''

    /tmp/tmpqr74afjl.sh: line 19: `( x = (( x * 10 ) + $shift )) ''

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=$1\n    shift=$2\n    if [[ $x =~\
    \ ([0-9]+) ]]\n    then\n        echo \"${BASH_REMATCH[1]}\"\n    else\n     \
    \   echo \"$x\"\n    fi\n    if [ \"$shift\" -gt \"${#x}\" ]\n    then\n     \
    \   echo -n $x | rev | cut -c 1-${#x}\n    else\n        echo -n $x\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x shift result\n  x=\"${1}\"\n\
    \  shift=\"${2}\"\n  result=\"$(echo \"$x\" | awk '{printf \"%d%2d%s\", $1,$2+$1,$0}'\
    \ )\"\n  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x shift result\n    # Shift\
    \ $1 right by $2\n    for shift $(($(($#+1)*$2+1))); do x=\"$(echo $x | cut -c$shift)\"\
    ; done\n    # Shift $1 left by $2\n    for shift $(($#-$(($#-1))+1))); do x=\"\
    $(echo $x | cut -c$shift)\"; done\n    # Return $x\n    echo \"$x\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9oql9civ.sh: line 15: syntax error near unexpected token `$(($(($#+1)*$2+1)))''

    /tmp/tmp9oql9civ.sh: line 15: `    for shift $(($(($#+1)*$2+1))); do x="$(echo
    $x | cut -c$shift)"; done''

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # Assumes $1 is a single integer\n\
    \    # Assumes $2 is greater than $1\n    # Assumes $1 is evenly divisible by\
    \ $2\n    local digits=$(( ( ( $1 - $2 ) / 2 ) ))\n    # Assumes $2 is a positive\
    \ integer\n    # Assumes $2 > $1\n    # Assumes $2 evenly divisible by $1\n  \
    \  local digit=$(( ( $digits % $1 ) + $2 ))\n    # Assumes $2 is a positive integer\n\
    \    # Assumes $2 > $1\n    # Assumes $2 evenly divisible by $1\n    local digits=$((\
    \ ( $digits / $1 ) + $2 ))\n    # Assumes $2 > $1\n    # Assumes $2 evenly divisible\
    \ by $1\n    local digit=$(( ( $digits % $1 ) + $2 ))\n    # Assumes $2 is a positive\
    \ integer\n    # Assumes $2 > $1\n    # Assumes $2 evenly divisible by $1\n  \
    \  local digits=$(( ( $digits / $1 ) + $2 ))\n    # Assumes $2 > $1\n    # Assumes\
    \ $2 evenly divisible by $1\n    local digit=$(( ( $digits % $1 ) + $2 ))\n  \
    \  # Assumes $2 is a positive integer\n    # Assumes $2 > $1\n    # Assumes $2\
    \ evenly divisible by $1\n    local digits=$(( ( $digits / $1 ) + $2 ))\n    #\
    \ Assumes $2 > $1\n    # Assumes $2 evenly divisible by $1\n    local digit=$((\
    \ ( $digits % $1 ) + $2 ))\n    # Assumes $2 is a positive integer\n    # Assumes\
    \ $2 > $1\n    # Assumes $2 evenly divisible by $1\n    local digits=$(( ( $digits\
    \ / $1 ) + $2 ))\n    # Assumes $2 > $1\n    # Assumes $2 evenly divisible by\
    \ $1\n    local digit=$(( ( $digits % $1 ) + $2 ))\n    # Assumes $2 is a positive\
    \ integer\n    # Assumes $2 > $1\n    # Assumes $2 evenly divisible by $1\n  \
    \  local digits=$(( ( $digits / $1 ) + $2 ))\n    # Assumes $2 > $1\n    # Assumes\
    \ $2 even\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # https://stackoverflow.com/a/2975180/1763544\n\
    \    local -r x=\"$1\"\n    local -r shift=\"$2\"\n    shift -- \"$shift\" 2>\
    \ /dev/null || return\n    local -r num_digits=$(( ${#x} / 10 ))\n    local -r\
    \ digits=$( IFS=$'\\n' arr=($(\n        while read -r digit; do\n            [[\
    \ $digit = $x ]] && return\n            (( ${#digits} -= 1 ))\n            echo\
    \ \"$digit\"\n        done <<< \"$(echo $x | sed -E 's/([0-9]+$)/\\1/')\"\n  \
    \  ))\n    [[ ${#digits} -lt 10 ]] || return \"${digits[@]:10}\"\n    echo \"\
    ${digits[@]:0:10}\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptjv47jym.sh: line 18: unexpected EOF while looking for matching
    `)''

    /tmp/tmptjv47jym.sh: line 43: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal IFS=$2\n\tlocal x=\"$1\"\n\tlocal\
    \ shift=\"$2\"\n\n\t# Shift by one and count the digits. Then shift again by one\n\
    \t# and keep counting digits. This will leave the last digit shifted\n\t# and\
    \ unchanged, and the first digit moved to the end.\n\tlocal len=0\n\tlocal rem\n\
    \tlocal res\n\twhile [[ \"$x\" > 0 ]]; do\n\t\trem=$((x%10))\n\t\tx=$((x/10))\n\
    \t\tlen=$((len+1))\n\t\tshift\n\tdone\n\n\t# Return digits reversed\n\tif [[ \"\
    $shift\" -eq \"$len\" ]]; then return \"$res\"; fi\n\tshift\n\tres=$x\n\twhile\
    \ [[ \"$shift\" -lt \"$len\" ]]; do\n\t\tres=$((10#$res + $((rem*$shift))))\n\t\
    \tshift\n\tdone\n\treturn \"$res\"\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660057531
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  shift=$(($shift > $((${#x}-1) | bc)) || $shift shift || 1)\n  echo \"$(bc\
    \ <<< \"$x\" <<< $(perl -e 'print reverse ' $(echo \"obase=16; $x % $shift\"|\
    \ bc -l | awk '{print $1,$1}')) )\"\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplwut4spy.sh: line 15: 3-1: command not found

    /tmp/tmplwut4spy.sh: line 15: $((${#x}-1) | bc): ambiguous redirect

    /tmp/tmplwut4spy.sh: line 15: 2: command not found

    /tmp/tmplwut4spy.sh: line 15: 1: command not found

    (standard_in) 2: syntax error

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  x=\"$1\" shift=\"$2\"\n  local digits=$((\
    \ 10#$x ))\n  local i\n  local result\n  if (( digits < $shift )) ; then\n   \
    \ while (( digits >= $shift )) ; do\n      i=$(( digits + $shift - 1 ))\n    \
    \  result=$result$i\n      digits=$(( digits - $shift ))\n    done\n    result=$result$i\n\
    \  else\n    while (( digits > $shift )) ; do\n      i=$(( digits + $shift - 1\
    \ ))\n      result=$result$i\n      digits=$(( digits - $shift ))\n    done\n\
    \    result=$result$i\n  fi\n  printf \"$result\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    if [[ $shift -gt ${#x} ]]; then\n        shift\n    fi\n    local result\n\
    \    for (( n=$((${#x}+${shift}))\n            ; ((n>0)) && [ $n -gt 0 ]\n   \
    \         ; n-- )\n    do\n        result=$((${result} ${x:$n:1}))\n    done\n\
    \    echo ${result:0:$((${#result} - $shift))}\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa3k_e0bz.sh: line 21: syntax error near `)''

    /tmp/tmpa3k_e0bz.sh: line 21: `            ; n-- )''

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local IFS=$1\n    local shift=$2\n\
    \    local len=${#n}\n    while ((len-- > 0)); do\n        eval \"_$((len + 1))=$((${n}\
    \ % 10 + 10))\"\n        ((n = n / 10))\n    done\n    printf \"%s${_${len}}\"\
    \ \"$n\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6il_iw9c.sh: line 20: %s${_${len}}: bad substitution

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x shift ret\n  x=${1%%$2}\n  shift=${#x}\n\
    \  ret=\n\n  # Shift while adding next digit from right to left\n  while [ $shift\
    \ -gt 0 ]\n  do\n    [ $shift -eq 0 ] && break\n    (( shift -= 1 ))\n    (( ret\
    \ += ${x:$shift:1} ))\n  done\n  echo $ret\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local result\n  local i\n  for i in $(seq -w ${#x} ${shift}); do\n    result=$(printf\
    \ ${x%%-*})\n    x=\"${x##*-}\"\n    x=\"${result}${x}\"\n  done\n  echo \"$x\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len\n    local i\n\n    len=\"${#x}\"\n\n    # Handle special\
    \ case of no digits in string\n    if [ \"${len}\" = \"0\" ]; then\n        return\
    \ \"\"\n    fi\n\n    # Handle negative numbers by shifting left\n    if [ \"\
    ${x}\" -lt \"0\" ]; then\n        x=\"-${x}\"\n        shift\n    fi\n\n    #\
    \ Handle positive numbers\n    len=$(( (len - 1) / 2 ))\n\n    if [ \"${shift}\"\
    \ = \"0\" ]; then\n        # shift to the left\n        x=\"${x%?}\"\n    else\n\
    \        # shift to the right\n        x=\"${x#*${shift}}${x%%${shift}}\"\n  \
    \  fi\n\n    # Circular shift\n    for i in $(seq 0 $((len - 1))); do\n      \
    \  # Append char to right\n        x=\"${x}${x##*${shift}}\"\n\n        # Remove\
    \ char to left\n        x=\"${x%%?}\"\n\n        # Remove last char\n        x=\"\
    ${x#?}\"\n    done\n    echo \"$x\"\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  # The code for this function is in circular_shift_main.sh.\n\
    \  local -r x=$1\n  local -r shift=$2\n  shift\n  local -r digits=$((${#x} + ${#shift}))\n\
    \  if ((${digits})); then\n    local -r tmp\n    local -r digit\n    for ((digit=0;\
    \ digit < ${#shift}; digit++)); do\n      digit=${digits:${digit}:1}\n      digit=${digit:0:1}\n\
    \      tmp=${digit}${tmp}\n    done\n    shift\n    shift\n    shift\n    local\
    \ -r result\n    result=${tmp}${digit}${result}\n    if [ \"${shift}\" -gt \"\
    ${digits}\" ]; then\n      shift ${shift:-1}\n    fi\n    echo \"${result}\"\n\
    \  else\n    echo \"${x}\"\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe6csdrge.sh: line 21: digit: readonly variable

    /tmp/tmpe6csdrge.sh: line 30: result: readonly variable

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local rs=\"\"\n  local i\n\n  for ((i=${#x}; i>=0; i=$((i-1)))); do\n    local\
    \ c=\"${x:$i:1}\"\n    case \"$c\" in\n      \"0\")\n        (( i % shift ))\n\
    \        ;;\n      \"1\")\n        rs=\"${rs}0\"\n        ;;\n      \"2\")\n \
    \       rs=\"${rs}1\"\n        ;;\n      \"3\")\n        rs=\"${rs}2\"\n     \
    \   ;;\n      \"4\")\n        rs=\"${rs}3\"\n        ;;\n      \"5\")\n      \
    \  rs=\"${rs}4\"\n        ;;\n      \"6\")\n        rs=\"${rs}5\"\n        ;;\n\
    \      \"7\")\n        rs=\"${rs}6\"\n        ;;\n      \"8\")\n        rs=\"\
    ${rs}7\"\n        ;;\n      \"9\")\n        rs=\"${rs}8\"\n        ;;\n      \"\
    a\")\n        rs=\"${rs}9\"\n        ;;\n      \"b\")\n        rs=\"${rs}a\"\n\
    \        ;;\n      \"c\")\n        rs=\"${rs}b\"\n        ;;\n      \"d\")\n \
    \       rs=\"${rs}c\"\n        ;;\n      \"e\")\n        rs=\"${rs}d\"\n     \
    \   ;;\n      \"f\")\n        rs=\"${rs}e\"\n        ;;\n      *)\n        rs=\"\
    ${rs}${c}\"\n        ;;\n    esac\n  done\n  echo \"$rs\"\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal -a x=(\"$@\")\n\tlocal shift result\n\
    \tfor (( shift=((${#x[0]})-1); shift > 0; shift-- )); do\n\t\tresult+=\"${x[$shift]}\"\
    \n\tdone\n\techo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    # Check if shift is negative, if so return digits reversed\n    if [\
    \ \"$shift\" -lt 0 ]; then\n        shift=$((-shift))\n        echo \"$x\" | rev\n\
    \    else\n        # Find string length before shift\n        len=${#x}\n    \
    \    echo \"${x:0:$((len-shift))}\" | rev\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local i=\"$1\"\n  shift\n  local j=\"\
    $1\"\n  shift\n  local k=\"$1\"\n  shift\n  local m=\"$1\"\n  shift\n  local n=\"\
    $1\"\n  shift\n  if (( m * 2 <= i )) ; then\n    if (( k > n )) ; then\n     \
    \ k=n\n    fi\n    local tmp=${i//$j/$k}\n    i=${tmp/$m}\n  else\n    local tmp=${i//$j/$k}\n\
    \    i=${tmp/$m}\n  fi\n  echo \"$i\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -r x=\"${1}\"\n    local -r\
    \ shift=\"${2}\"\n    local -r nchars=${#x}\n    local -r num_digits=${nchars/${#shift}}\n\
    \    local -r reversed=\"$(echo \"$x\" | rev | cut -c1-${num_digits} | rev)\"\n\
    \    local -r output=\"$reversed${reversed:${#shift}:$num_digits}${shift}\"\n\
    \    echo \"${output}\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  x=$1\n  shift=$2\n  shift && x=${x%$1}$x\n\
    \  echo ${x:${#x}}\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    if [ \"${#x}\" -lt \"$shift\" ]; then\n        x=\"$x$((${#x} - ${shift}))\"\
    \n    else\n        local digits=$(echo \"$x\" | sed \"s/^0*//;s/$/0/g;s/^0*//;s/$/0/g;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/^0*//;s/\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxnrfackh.sh: line 31: unexpected EOF while looking for matching
    `"''

    /tmp/tmpxnrfackh.sh: line 35: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local -r digits=$1 shift=$2\n  local\
    \ digits_len=${#digits}\n  local -i ret=0\n  local -i i\n\n  if (( shift > digits_len\
    \ )) ; then\n    shift\n  else\n    for i in $(seq 1 $shift) ; do\n      (( ret\
    \ += ${digits#$'0'} * ${shift} * ${digits_len} ))\n      shift\n    done\n  fi\n\
    \n  echo ${ret}\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local num=\"${1:0:1}\"\n  local shift=\"\
    ${2:0:1}\"\n  local result\n  if (( ${#num} > ${#shift} )) ; then\n    echo \"\
    ${num:${#shift}:${#num}}\" > /tmp/circular_shift\n    echo \"${shift:0:1}\" |\
    \ rev | cut -c - /tmp/circular_shift > /tmp/circular_shift\n    echo \"${num:0:${#shift}}\"\
    \n  else :\n    echo \"${num:0:${#shift}}\"\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local num=$1\n  shift\n  local shift=$1\n\
    \  local result=\"\"\n  while [ -n \"${1:-}\" ]; do\n    result=\"${result}${1:0:${shift}}\"\
    \n    shift\n  done\n  echo ${result}\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local digits=$(( ${1#} + ${2#} > ${#1}\
    \ ? ${1#} : ${2#} ))\n  local shift=$(( ${1#} + ${2#} > ${#1} ? ${2#} : ${1#}\
    \ ))\n  local result=0\n  while [ $shift -gt $(( digits - 1 )) ]; do\n    shift\
    \ 2\n    result=$(( result * 10 + ${1#} ))\n  done\n  if [ $shift -lt $(( digits\
    \ - 1 )) ]; then\n    result=$(( result * 10 + ${1#} ))\n  fi\n  printf \"%d\"\
    \ $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n        local x=$1;\n        local shift=$2\n\
    \        local output\n        if [[ \"${x}\" =~ ^[0-9]+$ ]]; then\n         \
    \       for (( i=1 ; i <= shift; i++ )); do\n                        output=\"\
    ${output}${x:$(( x - ${x:$(( ${x#$1}${i#1} ))} ))}\"\n                done\n \
    \               output=\"${output:$(( x - ${x:$(( ${x#$1}${shift}${1}${1}${1}\
    \ ))} ))}\"\n        fi\n        echo \"${output}\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5qekma18.sh: line 20: x -  : syntax error: operand expected (error
    token is "-  ")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local result\n\n    if (( shift < 0 )); then\n        shift=$(( ${#x}\
    \ + shift ))\n    fi\n\n    for (( shift; shift > 0; shift-- )); do\n        result=\"\
    $result${x%?}\"\n        x=\"${x#?}\"\n    done\n\n    echo \"$result\"\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i shift len=\"${#1}\"\n   \
    \ shift\n    shift\n    len=$((len+shift))\n    if [ $len -gt $((${#1} % ${#2}))\
    \ ]; then\n        shift\n        len=$((len+shift))\n    fi\n    local -r -i\
    \ str\n    local i\n    local str\n    for ((i = 0; i <= len; i++)) do\n     \
    \   str=\"${1:$i:1}${2:$i:1}\"\n        eval \"str=\\\"$str\\\"\"\n        eval\
    \ echo \"$str\"\n    done\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbgwtsywp.sh: line 17: 0 % 0: division by 0 (error token is "0")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local number=$1\n  local shift=$2\n\
    \  local digits=\"\"\n  if [[ $number < 0 ]]; then\n    # Negative number: reverse\
    \ the digits\n    shift=$(( ${#number} + shift ))\n    number=-${number}\n  fi\n\
    \  # First digit\n  if [[ $number < 10 ]]; then\n    digits=$number\n  else\n\
    \    digits=$(( $number % 10 ))\n  fi\n  # Shift digits right and append the new\
    \ digit\n  shift=$(( ${#number} + shift ))\n  digits=$(( ${#number} + $shift ))\n\
    \  number=$(( $number / 10 ))\n  while [[ $number > 0 ]]; do\n    digits=$(( $digits\
    \ * 10 ))\n    shift=$(( ${#number} + shift ))\n    number=$(( $number / 10 ))\n\
    \  done\n  # Pad the digits with zeros\n  for (( i=1; i <= ${#digits}; i++ ));\
    \ do\n    if [[ $number > 0 ]]; then\n      digits=$(( $digits * 10 ))\n     \
    \ shift=$(( ${#number} + shift ))\n      number=$(( $number / 10 ))\n    fi\n\
    \  done\n  echo $digits\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal i shift len\n\tshift=$1\n\tshift=$(($(($1\
    \ + $shift - 1) % $shift)%$shift))\n\tlen=$(($shift - $shift))\n\t(( len == 0\
    \ )) && return $1 || return $(eval echo \"$((${1#0}$shift))\")\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0fhekggq.sh: command substitution: line 15: syntax error near unexpected
    token `%''

    /tmp/tmp0fhekggq.sh: command substitution: line 15: `($1 + $shift - 1) % $shift''

    /tmp/tmp0fhekggq.sh: line 15: %100: syntax error: operand expected (error token
    is "%100")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal x=$1;\n\tlocal shift=$2;\n\n\t\
    local digits=$(( ${#x} / ${#shift} ));\n\tif [[ $digits > $2 ]]; then\n\t\tlocal\
    \ result=$( echo \"$x\" | sed \"s/^${shift}//g\" | sed \"s/${shift}//g\");\n\t\
    else\n\t\tlocal result=$( echo \"$x\" | sed \"s/^.*${shift}//g\" | sed \"s/${shift}.*//g\"\
    );\n\tfi\n\n\techo \"$result\";\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local _n shift result\n    local i\
    \ ret\n    shift\n    shift\n    for (( i = ${#1} / 2 + 1; i <= ${#1}; i++ ));\
    \ do\n        _n=$(( ${#1} % 2 == 0 && ${#1} % i == 0 ? ${#1} / i : ${#1} / 2\
    \ - 1 ))\n        shift\n        result+=${1:$_n}\n    done\n    ret=${result%?}\n\
    \    shift $(( ${#result} ))\n    shift\n    return $ret\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i n shift r\n    n=$1\n   \
    \ shift=$2\n    r=\"\"\n    while [ $n -gt 0 ]; do\n        r=$(( n%10 + r ))\n\
    \        n=`expr $n / 10`\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n   \
    \ circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x shift result i\n\n    x=$1\n\
    \    shift=$2\n\n    if [ \"$shift\" -gt \"$x\" ]; then\n        i=$((x - shift))\n\
    \        result=$(x<<$i)\n    else\n        i=$((-shift))\n        result=$(x>>$i)\n\
    \    fi\n    if [ \"$shift\" -gt \"0\" ]; then\n        result=$(( result<<1 ))\n\
    \    fi\n    if [ \"$shift\" -lt \"0\" ]; then\n        result=$(( result>>1 ))\n\
    \    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpio_hwwvj.sh: line 23: x: command not found

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=$(( ${#x} / 2 ))\n    if [ ${shift} -gt ${#len} ] ; then\n\
    \        shift=$(( ${#len} ))\n    fi\n    echo \"${x%?}\"\n    for i in $(seq\
    \ 1 ${shift}); do\n        local tmp=\"${x}\"\n        local pos=${#tmp}\n   \
    \     local m=${tmp:pos:1}\n        tmp=${tmp:0:pos-1}\n        tmp=${tmp}${m:1}\n\
    \        echo \"${tmp}\"\n    done\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  # $1 is an integer\n  # $2 is an integer\n\
    \  local -r i=\"$1\"\n  local -r shift=\"$2\"\n  local -r result\n  local -r digits_str=\"\
    $(printf \"%0${shift}d\" \"$i\")\"\n  shift \"$shift\"\n  if [ \"$shift\" -lt\
    \ \"$#\" ]; then\n    result=\"${digits_str}\"\n  else\n    result=\"$(\"$1\"\
    \ <<<\"$(printf \"%s\\n\" \"$digits_str\" \"$shift\")\")\"\n  fi\n  echo \"${result}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbripa83z.sh: line 23: : command not found

    /tmp/tmpbripa83z.sh: line 23: result: readonly variable

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # Split $1 into an array of digits\n\
    \    local IFS=. read -a a <<< \"$1\"\n    # If the argument doesn't start with\
    \ 0\n    if [ \"${a[0]}\" != \"0\" ]; then\n        # We need to add leading zeros\
    \ to $2, if necessary\n        local b=${a[1]}\n        shift a\n        if [\
    \ \"$#\" -eq 0 ]; then\n            local c=${a[1]}\n        else\n          \
    \  local c=0\n        fi\n        while [ \"$c\" -gt \"$b\" ]; do\n          \
    \  a+=( 0 )\n            shift a\n        done\n    else\n        local c=${a[0]}\n\
    \    fi\n    # Shift $c to the left $2\n    for (( c=$c; c>0; c--)); do\n    \
    \    a+=( 0 )\n    done\n    # Put digits into $1\n    while [ \"$#\" -gt 0 ];\
    \ do\n        local digit=${a[$#]}\n        a=( \"${a[@]:0:$#-1}\" )\n       \
    \ a[$#]=$digit\n    done\n    # Re-join array into a string\n    local IFS=\n\
    \    echo \"${a[@]}\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=44 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=32 encoding='utf-8'>
  timestamp: 1660057531
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal number=$1\n\tshift\n\tlocal shift=$1\n\
    \tshift\n\tlocal newNumber=$((number<<shift))\n\tshift\n\tnewNumber=$newNumber\
    \ $((shift - 1))\n\techo ${newNumber}\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmgm0u1n5.sh: line 19: 1: command not found

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local i shift result count\n    shift=10\n\
    \    result=$1\n    shift=$2\n    for ((i=1; i<=$2; i++))\n    do\n        count=$(($shift\
    \ - $count))\n        result=$(($result * $shift))\n        shift=$count\n   \
    \ done\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe03183vc.sh: line 19: 2 - : syntax error: operand expected (error
    token is "- ")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -r x=$1 shift=$2\n    local\
    \ digits=${#x}\n    local -r res=${x:-$((10#$digits)--$shift)}\n    local i digit\n\
    \    for (( i=1; i<=$(( digits-$shift )); i++ )); do\n        digit=$(( $i >=\
    \ $digits ? $digits : $i ))\n        x=${x:0:$digit}${x:$digit:1}\n    done\n\
    \    echo \"$x\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8issttpz.sh: line 19: x: readonly variable

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local result=\"\"\n  local len=$((${#x} + ${shift}))\n  for i in $(seq 1 $((${#x}\
    \ - ${shift})))\n  do\n    result+=\"${x:$i:1}\"\n  done\n  echo ${result%?}\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1 shift=$2\n    # Handle\
    \ negative numbers by reversing them\n    if [[ $x =~ ^-([0-9]+) ]]; then\n  \
    \      x=${x#-}\n        shift\n    fi\n    local num=\"$x\" res=\"\"\n    local\
    \ len=${#num}\n    shift\n    # Circular shift the digits\n    while (( len >\
    \ 0 )); do\n        res=\"${res}${num%?}\"\n        num=${num/#$(( shift + 1 ))}\n\
    \        shift\n        len=${#num}\n    done\n    # Now reverse the digits if\
    \ shift > number of digits\n    if [[ $shift -gt $len ]]; then\n        rev=${res:1:$len}\n\
    \        res=${rev:$(($len-$shift))}\n    fi\n    echo \"$res\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=47 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=29 encoding='utf-8'>
  timestamp: 1660057531
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal -i num=\"$1\"\n\tlocal -i shift=\"\
    $2\"\n\tlocal -n string=\"$3\"\n\tlocal -n result=\"$4\"\n\tshift \"$shift\"\n\
    \tlocal -i size=\"$(( (${#string} - 1) / ${#number} ))\"\n\tlocal -i num1=\"$num\"\
    \n\tlocal -i num2=\"$num\"\n\tlocal -i j\n\tresult=\"$(IFS=\"\"; for (( j = 0;\
    \ j < ${#string} - 1; j++ )); do echo \"${string:$j:1}\"; done)\" # reverse the\
    \ digits\n\tresult=\"$(( ${result} * ${#number} ))\"\n\tresult=\"$(( ${result}\
    \ / ${#number} ))\"\n\tresult=\"$(IFS=\"$num\"; for (( i = 0; i < ${size}; i++\
    \ )); do echo \"${result:$(( (${num1} + i + ${size} - 1) % (${num1} + ${size}\
    \ - ${shift}) )):1}\"; done)\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp36hcba3t.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp36hcba3t.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp36hcba3t.sh: line 18: (0 - 1) / 0 : division by 0 (error token is "0 ")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x shift str\n    x=${1:-0}\n\
    \    shift=${2:-0}\n    str=$(x|bc)\n    shift=$((${shift}-1))\n    while [ $shift\
    \ -gt 0 ]; do\n        (( ${str:$shift} = ${str:$shift} - 1 ))\n        str=$(x|bc)\n\
    \        shift=$((${shift}-1))\n    done\n    printf \"%s\" \"$str\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpam2z52v7.sh: line 16: x: command not found

    /tmp/tmpam2z52v7.sh: line 19: ((: =  - 1 : syntax error: operand expected (error
    token is "=  - 1 ")

    /tmp/tmpam2z52v7.sh: line 20: x: command not found

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits=\"$2\"\n    shift\n \
    \   if [ \"$1\" -gt \"$digits\" ]; then\n        echo \"$1\"\n        return\n\
    \    fi\n    local tmp=\"\"\n    while [ \"$1\" -gt 0 ]; do\n        tmp=$((tmp\
    \ * 10 + $(echo \"$1\" | cut -c \"$digits\")))\n        shift\n    done\n    local\
    \ output=$(echo \"$tmp\" | sed -e 's/^[123456789]\\{1,\\}//')\n    echo $output\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5tdj97z6.sh: line 21: tmp * 10 + : syntax error: operand expected
    (error token is "+ ")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits=${1:?}\n    local shift=${2:?}\n\
    \    local result=\n    for (( index=0; index < ${#digits}; index++ )); do\n \
    \       result=$((${result}${digits:index:$shift:1}))\n    done\n    if [[ ${#result}\
    \ -eq ${#digits} ]]; then\n        result=${result%?}\n    fi\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcwfld77m.sh: line 17: digits: 2:1: syntax error in expression (error
    token is ":1")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local ret=\"\"\n  local lastchar=\"1\"\n  local lastdigit=\"1\"\n  local i\n\
    \  shift\n\n  while [[ $x -lt 10 ]]; do\n    lastdigit=\"$lastdigit$x\"\n    x=\"\
    $(( $x / 10 ))\"\n  done\n\n  (( shift > $lastdigit )) && shift\n  (( shift -=\
    \ $lastdigit ))\n\n  while [[ $lastdigit -ge 0 ]]; do\n    lastchar=\"$lastchar$lastdigit\"\
    \n    lastdigit=\"$(( $lastdigit / 10 ))\"\n  done\n\n  while [[ $lastchar -lt\
    \ $shift ]]; do\n    lastchar=\"$lastchar$x\"\n    x=\"$(( $x / 10 ))\"\n  done\n\
    \n  while [[ $x -gt 0 ]]; do\n    ret=\"$ret$x\"\n    x=\"$(( $x / 10 ))\"\n \
    \ done\n\n  echo $ret\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=45 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=39 encoding='utf-8'>
  timestamp: 1660057531
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local integer shift string\n    integer=${1}\n\
    \    shift=${2}\n    if [[ ${#string} < 2 ]]; then\n        echo \"error: not\
    \ enough parameters to circular_shift\"\n        echo \"usage: $(basename ${0})\
    \ integer shift\"\n        return 1\n    fi\n    string=$(echo \"${integer}\"\
    \ | sed \"s/^\\([0-9]\\)/\\$(echo \"${integer}\" | bc)\\1/g\")\n    integer=$(($(echo\
    \ \"${string}\" | bc) - ${shift}))\n    string=$(echo \"${string}\" | sed \"s/^\\\
    (\\([0-9]\\)\\)/\\$(echo \"${integer}\" | bc)\\1/g\")\n    string=$(echo \"${string}\"\
    \ | sed \"s/\\([0-9]\\)\\([0-9]\\)/\\$(echo \"${integer}\" | bc)\\2/g\")\n   \
    \ string=$(echo \"${string}\" | sed \"s/\\([0-9]\\)$/\\$(echo \"${integer}\" |\
    \ bc)$/g\")\n    string=$(echo \"${string}\" | sed \"s/^[0-9]//g\")\n    echo\
    \ ${string}\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local -r digit=$1\n  local -r shift=$2\n\
    \  local -r num_digits=$(( ${#digit} / 2 ))\n  local -r shift_bits=$(( (${#shift}\
    \ % 2) ))\n  local -r digit_values=( \"${!num_digits}\" )\n  local -r digit_count=0\n\
    \n  for (( i = 0; i < ${#digit_values[@]}; i++ )); do\n    if (( ${#digit_values[$i]}\
    \ > 0 )); then\n      digit_values[$i]=$(( ${digit_values[$i]} / 10 ))\n    fi\n\
    \  done\n\n  for (( i = 0; i < ${#digit_values[@]}; i++ )); do\n    if (( ${#digit_values[$i]}\
    \ > 0 )); then\n      digit_count=$(( digit_count + 1 ))\n    fi\n  done\n  if\
    \ (( ${digit_count} > 0 )); then\n    shift $(( shift_bits ))\n  else\n    shift=0\n\
    \  fi\n\n  echo \"${digit_values[@]:-${#digit}}\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpczqr3d24.sh: line 22: digit_values: readonly variable

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  shift\n  number=$1\n  shift\n  echo\
    \ \"${number%$2} ${number#$2}\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tif [ $# -ne 2 ]; then\n\t\techo \"Usage:\
    \ $0 integer integer\"\n\t\texit 1\n\tfi\n\n\techo \"${1:0:$2}${1:2:$((${#1}-$2))}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x shift res\n  x=\"${1#?}\"\n\
    \  shift=\"${2#?}\"\n  shift=\"${shift:-1}\"\n  res=()\n  while (( \"${#x}\" >\
    \ 0 )); do\n    local tmp\n    tmp=\"${x:0:${#x}}\"\n    x=\"${x:${#x}}\"\n  \
    \  res+=( \"$tmp\" )\n  done\n  printf -v \"${FUNCNAME}::res\" '%s' \"${res[*]}\"\
    \n  echo \"${res[*]}\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu58crdpv.sh: line 24: printf: `circular_shift::res'': not a valid
    identifier

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits\n\n    if ! [[ $x =~ ^[0-9]+$ ]]; then\n        echo \"\
    Circular_shift expects integer: $1\"\n        echo \"Usage: $(basename $0) <integer>\
    \ <integer>\"\n        return 1\n    fi\n\n    if ! [[ $shift =~ ^[0-9]+$ ]];\
    \ then\n        echo \"Circular_shift expects integer: $2\"\n        echo \"Usage:\
    \ $(basename $0) <integer> <integer>\"\n        return 1\n    fi\n\n    digits=${x#0}\n\
    \    shift=$((shift-1))\n\n    if ! [[ $shift -gt ${#digits}]]; then\n       \
    \ echo \"Circular_shift expects integer greater than number of digits: $shift\"\
    \n        return 1\n    fi\n\n    shift $shift\n    digits=${digits%${digits#0}}\n\
    \    shift\n\n    echo ${digits%${digits#0}}\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcg470j9x.sh: line 32: syntax error in conditional expression: unexpected
    token `;''

    /tmp/tmpcg470j9x.sh: line 32: syntax error near `;''

    /tmp/tmpcg470j9x.sh: line 32: `    if ! [[ $shift -gt ${#digits}]]; then''

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local n=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$n\" | sed -e 's/^0*//g' | tr -d \"[:digit:]\")\n  \
    \  local digitslen=$(echo \"$digits\" | wc -w)\n    (( shift >= $digitslen ))\
    \ && shift=$digitslen\n    (( shift < 1 )) && shift=1\n    echo \"$digits\"|sed\
    \ -e 's/^/'\"$(( $digitslen - ($shift - 1) ))\"'\"'\"$shift\"'/g'\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # Sanitize the inputs.\n    # First\
    \ test that we have the required number of arguments.\n    [ \"${#}\" -eq 2 ]\
    \ || { echo \"Usage: $(basename $0) number shift\" >&2; exit 1; }\n    shift\n\
    \    shift\n    # Now loop through the digits from most significant to least and\
    \ put\n    # the digits in reverse order.\n    for (( c=$1; c>0; )); do\n    \
    \    (( c*=10 ))\n        (( c+=$2 ))\n    done\n    echo $c\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl_sj4nm5.sh: line 20: ((: c=: syntax error: operand expected (error
    token is "=")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n\n    if [ \"$shift\" -gt \"${#x}\" ]; then\n        # $1 is greater than\
    \ $2, so reverse $1 and $2.\n        echo \"${1:0:$shift}${2:$(( ${#1} - $shift\
    \ ))}${1:$#1}\"\n    else\n        # $1 is not greater than $2, so $1 is equal\
    \ to $2.\n        echo \"$2\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal digits=$1\n\tshift=$2\n\tlocal\
    \ digits_length=$((${#digits} - $((${#shift}))))\n\tlocal digits_reversed=\"${digits:0:$digits_length}\"\
    \n\n\tfor i in $(seq 0 $((${#digits_reversed}-1))); do\n\t\tlocal digit=${digits_reversed##*$i}\n\
    \t\tdigits_reversed=\"${digits_reversed%$i}$digit\"\n\tdone\n\n\tprintf \"%s\"\
    \ \"$digits_reversed\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    shift\n    local\
    \ digit=\"$1\"\n    local shift=\"$2\"\n\n    local out=0\n\n    while [[ $shift\
    \ -gt 0 ]]; do\n        ((out+=digit))\n        digit=\"$(($out%10))\"\n     \
    \   out=\"$((out//10))\"\n        shift\n    done\n\n    echo \"$out\"\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x shift result\n  x=\"${1}\"\n\
    \  shift=\"${2}\"\n  result=\"$(\n    IFS=\"$IFS\"\n    x=\"${x//$1/$shift}\"\n\
    \    x=\"${x//$shift/$1}\"\n    IFS=\"$IFS\"\n    echo \"$x\"\n  )\"\n  if [[\
    \ $shift -lt 0 ]]; then\n    echo \"$result\"\n  else\n    echo \"$result $shift\"\
    \n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local a=\"$1\"\n    local b=\"$2\"\
    \n    if [ $# -eq 2 ] ; then\n        echo $(($((($a<<$b)|($a>>$b)))%$((10#$a%10#$b))))\n\
    \    else\n        echo \"$a\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp40d2anmd.sh: line 16: 409%0: division by 0 (error token is "0")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local input=$1\n    local shift=$2\n\
    \    # If the shift is greater than number of digits, return the digits reversed.\n\
    \    if [ $shift -gt $input ]; then\n        local output=0\n        for (( i=0;\
    \ i <= $shift; i++ )); do\n            output=$(( $output * 10 )) $( echo \"$input\"\
    \ | awk -v digit=\"$i\" '{ print (($digit * $2) + $digit) }')\n        done\n\
    \        echo \"$output\"\n    else\n        local output=0\n        for (( i\
    \ = 0; i <= $shift; i++ )); do\n            output=$(( $output * 10 )) $( echo\
    \ \"$input\" | awk -v digit=\"$i\" '{ print (($digit * $2) + $digit) }')\n   \
    \     done\n        echo \"$output\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd9ii4uxe.sh: line 25: 100: command not found

    /tmp/tmpd9ii4uxe.sh: line 25: 100: command not found

    /tmp/tmpd9ii4uxe.sh: line 25: 0: command not found

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -r x=\"$1\"\n    local -r shift=\"\
    $2\"\n    if [ \"${#x}\" -le \"${#shift}\" ] ; then\n        echo \"${x:0:$((\
    \ ${#x} - $shift ))}\"\n        return\n    fi\n\n    local -r last=\"$(( ${#x}\
    \ - 1 ))\"\n    local -r lastlen=\"$(( ${#shift} - 1 ))\"\n    local -r lastlast=\"\
    ${x:$last:$lastlen}\"\n    local -r first=\"${x:0:$last}\"\n    local -r reverse=\"\
    ${first:0:$lastlast}\"\n    local -r lastfirst=\"${first:$lastlast:$(( ${#reverse}\
    \ - $lastlen ))}\"\n    local -r lastfirstlen=\"$(( ${#lastfirst} - 1 ))\"\n \
    \   local -r lastfirstfirst=\"${lastfirst:0:$lastfirstlen}\"\n    local -r reversereverse=\"\
    ${reverse:0:$lastfirstlen}\"\n    local -r reversereversefirst=\"${reverse:$lastfirstlen:-$lastfirstlen}\"\
    \n\n    local -r lastfirstlast=\"${lastfirstfirst:0:$(( ${#reversereverse} - $lastfirstlen\
    \ ))}\"\n    local -r lastlastfirst=\"${reversereverse:$lastfirstlen:-$lastfirstlen}\"\
    \n    local -r reversereversereverse=\"${reversereverse:0:$(( ${#lastlastfirst}\
    \ - $lastfirstlen ))}\"\n    local -r lastfirstreverse=\"${lastlastfirst:$lastfirstlen:-$lastfirstlen}\"\
    \n\n    local -r all=\"${reversereversefirst}$lastfirstlast$lastlastfirst$reversereversereverse$lastfirstreverse\"\
    \n    echo \"${all:$(( ${#all} - $(( ${#lastlastfirst} - $(( ${#lastfirstfirst}\
    \ - $(( ${#reversereverse} - $(( ${#reversefirst} - $(( ${#lastfirstlast} - $((\
    \ ${#lastfirstfirst} - $(( ${#last} - $(( ${#first} - $(( ${#lastfirst} - $((\
    \ ${#shift} - 1 ))) ))) )) )) )) )) ))}\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptb83hqx3.sh: line 50: unexpected EOF while looking for matching
    `"''

    /tmp/tmptb83hqx3.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=$1; shift=$2; tmp=$1; shift=$((\
    \ shift % $2 )); tmp=$( echo $x | cut -c -$shift )\n    echo $tmp\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: invalid decreasing range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"${1}\"\n    local shift=\"\
    ${2}\"\n    local len=\"${#x}\"\n    if [ -z \"$shift\" ]; then\n        shift\n\
    \        shift\n        shift\n    fi\n    local out=\"$(echo $x | sed -e \"s/^\\\
    (.\\)/\\1$(echo \"$shift\" | bc)/\")\"\n    if [ \"$len\" -gt \"$shift\" ]; then\n\
    \        out=\"$out$(echo \"$out\" | sed -e \"s/^\\(.\\{${shift}\\}\\)/\\1$(echo\
    \ \"$len\" | bc)/\")\"\n    fi\n    echo \"$out\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x shift str\n    x=\"$1\"\n\
    \    shift=\"$2\"\n    str=\"0\"\n    while [ \"$shift\" -gt \"$#\" ]; do\n  \
    \      (( shift-- ))\n        str=\"$str$x\"\n    done\n    echo \"$str\"\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=$1\n    shift=$2\n    if [ $shift\
    \ -eq 0 ] ; then\n        if [ \"${#x}\" -eq 0 ] ; then\n            return 0\n\
    \        fi\n        echo -n ${x%?}\n    elif [ $shift -gt ${#x} ] ; then\n  \
    \      # reverse digits from the right side\n        x=\"${x%%?}\"\n        echo\
    \ -n ${x%?}\n        for (( i = $(( ${#x} -1 )); i >=0 ; i-- )); do\n        \
    \    echo -n \"${x%?}\"\n        done\n    else\n        # shift left by shift\
    \ digits to the left side\n        x=\"${x%?}\"\n        for (( i = $(( ${#x}\
    \ -1 )); i >=0 ; i-- )); do\n            x=\"${x%?}\"\n        done\n        echo\
    \ -n \"$x\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=\"$1\"\n    shift=\"$2\"\n\n   \
    \ # Make sure shift is at least 1\n    if [ \"$shift\" -lt 1 ]; then\n       \
    \ shift=1\n    fi\n\n    # Get the length of the number\n    len=${#x}\n\n   \
    \ # Make sure shifting left does not go past the end of the string\n    if [ \"\
    $shift\" -gt \"$len\" ]; then\n        shift=$len\n    fi\n\n    # Do the shift\n\
    \    num=$(echo \"$x\" | cut -c1-\"$shift\")\n    num=$(echo \"$num\" | rev |\
    \ cut -c1-\"$shift\")\n    echo \"$num\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # $1 is the integer to be shifted\n\
    \    # $2 is the number of digits to shift by.\n\n    # Shift right $2 digits:\n\
    \    # $1 % (10 ^ 2) is the number of digits in $1\n    # $1 in base 10 is $1\
    \ / (10 ^ 2)\n    # $1 = $1 / (10 ^ 2) * (10 ^ $2)\n    # $1 = $1 / (10 ^ 2) *\
    \ (10 ^ 0)\n    # $1 = $1 / (10 ^ 0) * (10 ^ $2) (truncated to integer because\
    \ we need\n    # to truncate the remainder later)\n    # $1 = $1 / (10 ^ 0) *\
    \ (10 ^ 0)\n    # $1 = $1 / (10 ^ 0) * 1\n    # $1 = $1\n    # $1 / (10 ^ 0) *\
    \ (10 ^ 1)\n    # $1 = $1 / (10 ^ 1)\n    # $1 = $1 * 10\n    # $1 = $1 * 10 +\
    \ $1\n    # $1 = $1 * 10 + $1\n    # $1 = $1 * 10 + $1 + $1\n    # $1 is now $1\n\
    \    # $1 = $1 * 10 + $1 / (10 ^ 1)\n    # $1 is now $1 * (10 ^ 1)\n    # $1 is\
    \ now $1 * (10 ^ 0) + $1 / (10 ^ 0)\n    # $1 is now $1 * (10 ^ 0) + $1 (truncated\
    \ to integer because we need\n    # to truncate the remainder later)\n    # $1\
    \ is now $1 * (10 ^ 0) + $1\n    # $1 is now $1 * (10 ^ 0) + $1 + $1\n    # $1\
    \ is now $1 * (10 ^ 0)\n    # $1 is now $1 * (10 ^ 0) + $1 (truncated to integer\
    \ because we need\n    # to truncate the remainder later)\n    # $1 is now $1\
    \ * (10 ^ 0) + $1\n    # $1 is now $1\n    # $1 is now $1 + 1\n    # $1 is now\
    \ $1 + 1\n    # $1 is now $1 + 1\n    # $1 is now $1 + 1\n    # $1 is now $1 +\
    \ 1\n    # $1 is now $1 + 1\n    # $1 is now $1 + 1\n    # $1 is now $1 + 1\n\
    \    # $1 is now $1 + 1\n    # $1 is now $1 + 1\n    # $1 is now $1 + 1\n    #\
    \ $1 is now $1 + 1\n    # $1 is now $1 + 1\n    # $1 is now $1 + 1\n    # $1 is\
    \ now $1 + 1\n    # $1 is now $1 + 1\n    # $1 is now $1 + 1\n    # $1 is now\
    \ $1 + 1\n    # $1 is now $1 + 1\n    # $1 is now $1 + 1\n    # $1 is now $\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnijcfj0t.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmpnijcfj0t.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x\n    local shift\n    local\
    \ result\n    shift=$1\n    shift=$((${#1}-${#2}))\n    ${#1} > ${#2} || {\n \
    \       echo \"ERROR: integer arguments should be of same length\" >&2\n     \
    \   return 1\n    }\n    IFS=- read -r x <<<\"$2\"\n    result=${#x}\n    for\
    \ ((i=1 ; i<${#x} ; i++)); do\n        (( result -= shift ))\n        result=`expr\
    \ ${result} + ${#x} + 1`\n    done\n    echo \"$x$(( ${#x} - 1 ))\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpft0n3l58.sh: line 18: 3: command not found

    ERROR: integer arguments should be of same length

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # Remove leading and trailing whitespace\n\
    \    # Remove leading and trailing zeroes\n    # Shift right with circular shift\n\
    \    local x shift result\n    x=\"${1#?}\"\n    shift\n    shift\n    result=$((${x}${SHIFT_BY_FORWARD}${x}${SHIFT_BY_BACKWARD}))\n\
    \    shift\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits=$(( (${#x} + ${shift}) - 1 ))\n  if (( ${#x} < ${#shift} ))\n\
    \  then\n    echo ${x%?}\n  else\n    local digits=$(( (${#x} + ${shift}) - 1\
    \ ))\n    for ((i=${digits}; i>1; i--))\n    do\n      local d=$(expr ${x%?} %\
    \ 10)\n      x=$(expr ${x%?} / 10)\n      echo ${d%?}\n    done\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u201810\u2019\nexpr: syntax error:\
    \ unexpected argument \u201810\u2019\nexpr: syntax error: unexpected argument\
    \ \u201810\u2019\nexpr: syntax error: unexpected argument \u201810\u2019\n"
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local num_digits=\"$1\"\n    local\
    \ shift=\"$2\"\n    local digits=$(seq 1 $num_digits)\n    local i=$num_digits\n\
    \    while (( $i > 0 )); do\n        local digit=\"${digits:$i:1}\"\n        digit=\"\
    ${digit:0:$shift}\"\n        digits=\"$digit$digits\"\n        ((i--))\n    done\n\
    \    echo $digits\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # Make sure $1 is integer\n    test\
    \ \"$1\" = '${1%??}' || return 1\n    # Make sure $2 is integer\n    test \"$2\"\
    \ = '${2%??}' || return 1\n    # Make sure $1 < $2\n    test \"$1\" -gt \"$2\"\
    \ || return 1\n    # Make sure $1 is within range of the integer\n    test -z\
    \ \"$3\" || return 1\n    test \"$3\" -lt \"$1\" || return 1\n    test \"$3\"\
    \ -gt \"$2\" || return 1\n    # Do the shift\n    local i shift result\n    #\
    \ Shift $1 by $2 and set i to $3\n    i=$3\n    while [ \"$i\" -gt \"$2\" ]; do\n\
    \        shift\n        i=$(( $i + 1 ))\n    done\n    # Do the loop\n    for\
    \ (( ; ; )); do\n        result=\"$1\" \"$i\"\n        if [ \"$result\" = \"$2\"\
    \ ]; then\n            result=\"$result$3\"\n            break\n        elif [\
    \ \"$result\" = \"$1\" ]; then\n            result=\"$result$3\"\n           \
    \ break\n        fi\n        shift\n        i=$(( $i - 1 ))\n    done\n    # Return\
    \ the result\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  if [ $shift -lt $((${#x})) ]\n  then\n    echo $(echo ${x} | cut -c${shift}-)\n\
    \  else\n    echo $(echo ${x} | cut -c${shift}-${#x})\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal x=\"$1\"\n\tlocal shift=\"$2\"\
    \n\tif [ -z \"$shift\" ]; then\n\t\tshift=0\n\tfi\n\tlocal digits=0\n\tlocal digits_max=${#x}\n\
    \tlocal digits_reversed=0\n\tfor (( digits_remaining = ${#x} + shift; digits_remaining\
    \ > 0; digits_remaining -= ${#x} + shift )); do\n\t\tlocal digit=\"${x:$digits_reversed}\"\
    \n\t\tdigits_reversed=$((digits_reversed + ${#digit}))\n\t\tdigits=$((digits+1))\n\
    \tdone\n\techo \"$digits\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local i\n  local num_digits\n  local\
    \ shift\n\n  shift=\"$1\"\n  shift=\"$2\"\n  num_digits=`echo $shift | wc -w`\n\
    \  if [ $shift -gt $num_digits ] ; then\n    shift=$num_digits\n  fi\n  shift\
    \ `expr $1 - $num_digits`\n  for ((i = 0; i <= $num_digits; ++i)); do\n    local\
    \ digit=$((10#$shift))\n    if [ $i == $num_digits ] ; then\n      digit=$((10#$num_digits))\n\
    \    fi\n    shift=$((`expr $shift + 1`))\n    echo -n \"$digit\"\n  done\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits=\"${1:?missing first\
    \ argument}\"\n    local shift=\"${2:?missing second argument}\"\n    shift\n\
    \    local num=\"${digits:0:-$shift}\"\n    local rest=\"${digits:-$shift}\"\n\
    \    shift\n    echo \"$num$rest\"\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  x=$1\n  shift=$2\n  i=1\n  while [[\
    \ $x -gt 0 ]]; do\n    x=$(( x / 10 ))\n    shift=$(( shift / 10 ))\n    let i=$i+1\n\
    \  done\n  echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    if [ $shift -gt $(( $# )) ]; then\n        shift\n    fi\n    x=$(echo\
    \ $x | rev | cut -c$(( 1 + shift )) | rev)\n    echo \"$x\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local N=$1 shift shift\n    local\
    \ digits=$(echo $N | tr [[:digit:]] ' ') #Get digits as an array\n    shift $shift\
    \ #Shift the digits to the right\n    local i\n    for (( i=1; i<$(( ${#digits}-1\
    \ )); i++ )); do\n        digits=${digits:0:i}$2$((${digits:i:i})) #Circular shift\
    \ the digits\n    done\n    echo ${digits:0:$((${#digits}-$shift))} #Return digits\
    \ reversed\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: "tr: extra operand \u20184\u2019\nTry 'tr --help' for more information.\n\
    /tmp/tmpsrtxqtuz.sh: line 20: 0-: syntax error: operand expected (error token\
    \ is \"-\")\n"
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [ $1 -lt 10 ]\n    then\n     \
    \   echo \"$2\"\n    elif [ $1 -gt 10 ]\n    then\n        echo \"${1/$2/$((10#$1))}\"\
    \n    else\n        echo \"$1\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local digits=$1\n  local shift=$2\n\
    \  local result=\"\"\n  local i=${#digits}\n  while (( $i > 0 )); do\n    (( ${#result}\
    \ < ${#shift} )) && result+=\"0\"\n    result+=${digits:$i:1}\n    (( $i < ${#digits}\
    \ )) && digits=${digits:0:i}\n    (( ${shift} > ${#digits} )) && shift=${#digits}\n\
    \    (( ${shift} < ${#result} )); shift=$(( ${shift} - ${#result} ))\n    i=$((\
    \ ${i} - 1 ))\n  done\n  echo $result\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # $1 is an integer\n    # $2 is an\
    \ integer\n    # $3 is the shift amount, an integer\n    # $4 is a string\n  \
    \  local x=\"$1\"\n    local shift=\"$2\"\n    local shiftstr=$(( shift % 10 ))\n\
    \    local str=\"$x\"\n    local i=0\n    # Iterate through the digits, shifting\
    \ the left one to the right\n    # by shift digits, appending the new digit\n\
    \    # and shifting the right one to the left by shift digits\n    while [ $i\
    \ -lt ${#x} ]\n    do\n        if [ $(( i + shift )) -lt ${#x} ]; then\n     \
    \       str=\"${str:0:$shift}${shiftstr:$(( $shiftstr - 1 ))}${str:$(( i + 1 ))}\"\
    \n        fi\n        shiftstr=$(( shiftstr + shift % 10 ))\n        shift=$((\
    \ shift / 10 ))\n        i=$(( i + 1 ))\n    done\n    echo \"$str\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local -r x=$1\n  local -r shift=$2\n\
    \  # shift is negative, so we need to account for that.\n  if [ \"$shift\" -lt\
    \ 0 ]; then\n    shift=$((-shift))\n  fi\n  # Shift one digit at a time, and shift\
    \ back to the beginning of the number\n  # when done shifting. Shifting to the\
    \ beginning of the number is the same\n  # as truncating.\n  local -r shifted=$((10#$((\
    \ (((10#$x - $shift) % $shift) % $shift) >> 1 )) % $shift))\n  # return $shifted\
    \ if we only had a single digit to shift, else $shifting\n  # The $x is then shifted\
    \ $shift digits left and appended to the end.\n  # This works in bash, zsh, and\
    \ ksh, bash also supports this syntax but\n  # zsh does not.\n  # $x is shifted\
    \ $shift digits to the right and appended onto the end of $x\n  if [ \"$shift\"\
    \ -gt 1 ]; then\n    local -r remainder=$(( $x / $shift ))\n    local -r shifted_tail=$((\
    \ 10#$(( 10#$shifted + $shift - $remainder )) ))\n    # shift $x right by 1 digit\n\
    \    # Example: 123 -> 124, 125 -> 126, 127 -> 128\n    #           012 -> 013,\
    \ 014 -> 015, 016 -> 017\n    #           123 -> 234, 125 -> 345, 127 -> 456\n\
    \    local -r shifted_tail_digit=$(( $(( $shifted_tail % 10 )) ))\n    # Example:\
    \ shift=3 -> 123, shift=4 -> 234, shift=5 -> 345, shift=6 -> 456, shift=7 -> 789\n\
    \    #           shift=0 -> 0123, shift=1 -> 0234, shift=2 -> 0345, shift=3 ->\
    \ 0456\n    # shift one digit to the right, add it to $shifted_tail, and shift\
    \ left\n    # Example: 123 -> 234, 125 -> 345, 127 -> 456, 123 -> 789, 012 ->\
    \ 0345, 013 -> 0456\n    # $shifted_tail is shifted $shift digits to the right\
    \ (including the 0) and\n    # appended to the end of $shifted_tail_digit\n  \
    \  local -r remainder_tail=$(( $remainder + $shift ))\n    local -r shifted_tail_digit=$((\
    \ 10#$shifted_tail + $shifted_tail_digit ))\n    local -r \n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3w83cf6l.sh: line 45: syntax error near unexpected token `}''

    /tmp/tmp3w83cf6l.sh: line 45: `}''

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ str=''\n  while [ \"$x\" -gt 0 ]; do\n    local digit=$(( $x % 10 ))\n    x=$((\
    \ $x / 10 ))\n    str=$(($digit $str))\n  done\n  if [ \"$shift\" -gt \"$x\" ];\
    \ then\n    shift=$(( $shift - $x ))\n    str=$(( ${str:(-1)} ))\n  else\n   \
    \ shift=$(( $shift + $x ))\n  fi\n  while [ \"$shift\" -gt \"0\" ]; do\n    local\
    \ digit=$(( $shift % 10 ))\n    shift=$(( $shift / 10 ))\n    str=$(($digit $str))\n\
    \  done\n  echo $str\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmuhl34hn.sh: line 19: 0 0: syntax error in expression (error token
    is "0")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local n=$1 shift=$2\n    local digits=$((${n}+${shift}))\n\
    \    local digits=$((${digits}-1))\n    while ((${digits}>0)); do\n        echo\
    \ -n ${n} >> ${digits}\n        n=${n} ${shift}\n        shift\n        digits=$((${digits}-1))\n\
    \    done\n    echo ${n}\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmppo9iuunj.sh: line 18: 2: command not found

    /tmp/tmp'
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  x=$1\n  shift=$2\n  len=${#x}\n  if\
    \ [ \"$shift\" -gt \"$len\" ] ; then\n    shift=$len\n  fi\n  echo \"${x:0:$shift}\"\
    ${x:$shift:$len}\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal x=\"$1\" shift=\"$2\"\n\tlocal\
    \ len=\"$(( $# + shift ))\"\n\tlocal tmp\n\tif (( x > $len )) ; then\n\t\ttmp=\"\
    $1\"\n\t\tshift\n\t\tshift\n\t\tx=$tmp\n\tfi\n\tlocal d\n\tlocal -i i=0\n\tlocal\
    \ -r str=\"\"\n\tlocal -r char\n\n\twhile (( i <= len )) ; do\n\t\tchar=\"$((\
    \ ${x} * 10 + $i ))\"\n\t\td=\"$(( ${char} - $shift ))\"\n\t\tstr=\"${str:0:$((\
    \ $len - ($i + $d)) )}${char:$d:1}\"\n\t\t(( i += $d ))\n\tdone\n\n\techo \"$str\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxg_qwolu.sh: line 28: char: readonly variable

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if (( $2 > $1 )); then\n    echo $1\
    \ | while (( $1 > 0 )); do\n      echo $2 | while (( $2 > 0 )); do\n        echo\
    \ $1 | $(($1+$2)) | $(($1--))\n      done\n    done\n  else\n    echo $2 | while\
    \ (( $1 > 0 )); do\n      echo $1 | while (( $2 > 0 )); do\n        echo $2 |\
    \ $(($1+$2)) | $(($1--))\n      done\n    done\n  fi\n}\n\ncandidate() {\n   \
    \ circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=31 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=25 encoding='utf-8'>
  timestamp: 1660057531
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i shift n\n    shift=${1:?'missing\
    \ first argument'}\n    shift=${shift:=1}\n    shift=${shift:=$((${#1}))}\n  \
    \  for (( n=0; n<${#1}; n++ )); do\n        ((n+=shift))\n        printf '%02d'\
    \ \"${1:$n:2}\"\n    done\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x shift result\n  x=$2\n  shift=$1\n\
    \  result=$(( (x % 10) + x % 10) % 10)\n  while [[ $shift -gt ${#x} ]]\n  do\n\
    \    shift\n    result=$(( result + x % 10 ))\n    x=$(( x / 10 ))\n  done\n \
    \ echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=18 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=14 encoding='utf-8'>
  timestamp: 1660057531
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local i=$1\n  local shift=$2\n  local\
    \ maxlen=$(( (${#i}+shift) % $(( 10#$shift )) ))\n\n  (( $maxlen == 0 )) && maxlen=$((\
    \ ${#i} + $shift ))\n  (( $maxlen == 0 )) && maxlen=1\n\n  local str=''\n  local\
    \ digit\n  local reverse\n\n  while (( $i < $maxlen )) {\n    reverse=$(($i%10))\n\
    \    digit=${i:$i:1}\n    i=$(( $i / 10 ))\n\n    str=\"${str}$reverse${digit}\"\
    \n  }\n\n  printf \"%s\" \"$str\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppfmj4akh.sh: line 24: syntax error near unexpected token `{''

    /tmp/tmppfmj4akh.sh: line 24: `  while (( $i < $maxlen )) {''

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local i\n    local shift=$(( ${#1}\
    \ > ${#2} ? ${#1} : ${#2} ))\n    local str=\n    for (( i = 0; i < shift; i++\
    \ )); do\n        str=\"${str}${1}${2:$(( ${#1} - i + 1))}\"\n    done\n    str=\"\
    ${str:0:(${#1} - shift)}\"\n    echo \"${str}\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x shift result\n    if [ \"\
    $1\" = \"0\" ]; then\n        result=\"$2\"\n        shift\n    elif [ \"$1\"\
    \ = \"$2\" ]; then\n        result=\"$1\"\n        shift\n    else\n        x=\"\
    $1\"\n        shift\n        shift\n        result=$(echo \"$x $x $x $x $x $x\
    \ $x $x $x $x $x $x\" | bc -l | tail -n +$(($#-1)))\n    fi\n    printf \"%s\\\
    n\" \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "tail: invalid number of lines: \u2018+-1\u2019\n(standard_in) 1: syntax\
    \ error\n"
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local -r input=$1\n  local -r shift=$2\n\
    \  local -r length=${#input}\n  (( length >= shift )) && shift || return $input\n\
    \n  local -r res=\"\"\n  local -r digit=\"${input:0:$shift}\"\n  for (( i=1; i\
    \ <= $shift; i++ )); do\n    res=\"${digit},${res}\"\n    digit=\"${input:$shift:1}\"\
    \n  done\n  res=\"${digit},${res}\"\n  echo \"${res::-2}\"\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmps6swzevz.sh: line 21: res: readonly variable

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local -r num=\"$1\"\n  local -r shift=\"\
    $2\"\n  local -r result\n  (( shift = shift % 10 ))\n  result=$(( num / 10 ))\n\
    \  if [[ ${shift} -gt ${#num} ]]; then\n    shift\n    result=$(( num - 10 * result\
    \ ))\n  else\n    result=$(( result * 10 + num ))\n  fi\n  printf \"%${shift}d\"\
    \ \"${result}\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmps2z4hfsn.sh: line 16: shift: readonly variable

    /tmp/tmps2z4hfsn.sh: line 17: result: readonly variable

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n\n\
    \    echo \"${1:0:${#x}}${1:${#x}:$shift}${1:${#x}:${#x}}\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x shift rev_str\n    x=${1//[^0-9]}\n\
    \    shift=${2//[^0-9]}\n    if [ \"${#x}\" -ne \"${#shift}\" ]; then\n      \
    \  echo \"Invalid input\"\n        return 1\n    fi\n    while [ $shift -gt 0\
    \ ]; do\n        rev_str=$( echo -n \"${x%?}\" )\n        x=$( printf '%0${#shift}d'\
    \ $(( 10#$x % 10#$shift )) )\n        rev_str=$( printf '%0${#shift}d' $(( 10#$rev_str\
    \ % 10#$shift )) )\n        shift=$(( shift-1 ))\n    done\n    printf '%s\\n'\
    \ \"$rev_str\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local -r digits=$1\n  local -r shift=$2\n\
    \  local -r shiftstr=\"$shift\"\n  local -r shiftstr=\"${shiftstr:-$shift}\"\n\
    \  local -r shiftstr=\"${shiftstr#-}\"\n  local -r num=\"${digits#0}$shiftstr\"\
    \n  local -r num=\"${num%0}\"\n  echo \"${num}\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvr3bpg4n.sh: line 16: local: shiftstr: readonly variable

    /tmp/tmpvr3bpg4n.sh: line 17: local: shiftstr: readonly variable

    /tmp/tmpvr3bpg4n.sh: line 19: local: num: readonly variable

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local NUM=${1}\n  shift\n  local NUM1=$(python\
    \ -c \"import struct; print '%x' % struct.Struct('I').unpack('%x' % ${NUM})[0]\"\
    )\n  local NUM2=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM3=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM4=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM5=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM6=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM7=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM8=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM9=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM10=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM11=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM12=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM13=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM14=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM15=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM16=$(python -c \"import struct; print '%x' % struct.Struct('I').unpack('%x'\
    \ % ${NUM})[0]\")\n  local NUM17=$(python -c \n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6xbko40m.sh: line 31: unexpected EOF while looking for matching
    `)''

    /tmp/tmp6xbko40m.sh: line 48: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i result=${1};\n    local -i\
    \ shift=${2};\n    # If the shift is greater than the number of digits, return\
    \ the\n    # digits reversed\n    if [ ${#result} -gt ${#shift} ] ; then\n   \
    \     shift\n        shift\n        result=$(printf \"%${#result}s\" ${result})\n\
    \    fi\n    # Do the circular shift\n    while [ $shift -gt 0 ]; do\n       \
    \ result=${result}${result#???}\n        shift\n    done\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=61 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=56 encoding='utf-8'>
  timestamp: 1660057531
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  shift \"$(expr \"$#\" \"$shift\" 2>/dev/null)\"\n  echo \"$x\" | sed \"s/^$((\
    \ $x - 1 )) \\([0-9]*$\\)/\\1$(( $x + 1 ))/;s/^$(( $x + 1 )) \\([0-9]*$\\)/\\\
    1$(( $x - 1 ))/\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8r_se488.sh: line 15: shift: : numeric argument required

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [ -z \"$2\" ]; then\n    echo \"\
    $1\" | bc | sed \"s/^.*=//g\" | tr -d \"()\"\n  else\n    echo \"$2\" | bc | sed\
    \ \"s/^.*=//g\" | tr -d \"()\"\n  fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [ $# -ne 2 ] ; then\n        echo\
    \ \"usage: circular_shift <digit> [shift]\"\n        return 1\n    fi\n\n    #\
    \ Convert to an array\n    IFS=. read -a num $1\n    length=${#num[@]}\n\n   \
    \ # Circular shift\n    if [ \"${#num[@]}\" -gt $2 ]; then\n        for ((i=length-1;i>=$2;i--));\
    \ do\n            num[$i]=$num[$i+1]\n        done\n        length=${#num[@]}\n\
    \    fi\n\n    # Reverse the array and convert to string\n    for ((i=0; i<$length;\
    \ i++)); do\n        num[i]=${num[$i]:0:1}\n    done\n    IFS=- IFS=.\n    num=${num[@]}\n\
    \n    # Convert back to string\n    for ((i=length-1;i>=0;i--)); do\n        num+=(${num[$i]})\n\
    \    done\n    IFS=.\n    echo \"${num[@]}\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprvutfpel.sh: line 19: read: `100'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local var=$1\n    local shift=$2\n\
    \    local count=0\n    local digits=${#var}\n    if [ $digits -gt $shift ] ;\
    \ then\n        shift\n        var=${var:0:$shift}\n        var=${var%?}\n   \
    \ fi\n    local digits=${#var}\n    while [ $digits -gt $shift ] ; do\n      \
    \  var=${var:0:$shift}\n        var=${var%?}\n        shift\n        shift\n \
    \       digits=${#var}\n    done\n    shift\n    echo $var\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -r x=$1\n    local -r shift=$2\n\
    \    # Make sure shift is greater than or equal to zero\n    if [ \"$shift\" -eq\
    \ \"$(( x - 1 ))\" ];\n    then\n        return $x\n    fi\n    local -r digits_left=$((\
    \ x - shift ))\n    local -r digits_right=$(( x - 1 ))\n    local -r reversed_digits=$(echo\
    \ \"$digits_left$digits_right\" | bc)\n    # Make sure the number is positive\n\
    \    if [ \"$digits_left\" -lt 0 ];\n    then\n        echo \"$reversed_digits\"\
    \n        return\n    fi\n    local -r digits=$(echo \"$reversed_digits\" | sed\
    \ -e 's/^0//' -e 's/$/0/g')\n    local -r remainder=$(echo \"$digits\" | sed -e\
    \ 's/^0*$//' -e 's/^0*//')\n    if [ \"$digits_right\" -lt \"$digits_left\" ];\n\
    \    then\n        echo \"$reversed_digits\"\n        return\n    fi\n    echo\
    \ \"$digits$remainder\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x shift str\n  IFS=\"$(printf\
    \ '%o' \"$1\") \" read -r x shift str\n  (( ${#str} -= ${#shift} ))\n  echo ${str:0:${#x}}\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=41 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=34 encoding='utf-8'>
  timestamp: 1660057531
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [[ -z \"$1\" ]] || [[ -z \"$2\"\
    \ ]]; then\n        echo \"Circular shift expects 2 parameters\" >&2\n       \
    \ return 1\n    fi\n    local x\n    local shift\n    shift\n    x=\"$1\"\n  \
    \  while (( shift > $((${#x})) ));\n    do\n        x=\"${x##*${1}}\"\n      \
    \  shift\n    done\n    echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal -r x=\"$1\"\n\tshift\n\tlocal\
    \ -r shift=\"$1\"\n\tlocal -r digits=$(( ${#x} / ${#shift} ))\n\tlocal -r result=\"\
    \"\n\tlocal -r k\n\tfor (( k=0 ; k<$shift ; k++ )); do\n\t\tresult=\"$result ${x:((${#result}*$k)):$((${#result}*($k+1))-$((${#result}*($k+1))))}\"\
    \n\tdone\n\tprintf \"%s\" \"$result\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpve8imxlf.sh: line 19: k: readonly variable

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i shift retval\n    shift;\
    \ shift\n\n    # Handle invalid shift values (-ve shift value)\n    if [ \"$shift\"\
    \ -eq \"-$#1\" ]; then\n        shift\n        retval=\"$1\"\n    else\n     \
    \   shift \"$shift\"\n        while [ \"$shift\" -gt \"$#1\" ]; do\n         \
    \   retval=\"$retval$1\"\n            shift\n        done\n    fi\n    shift\n\
    \    echo \"$retval\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd_0v2dp6.sh: line 17: [: : integer expression expected

    /tmp/tmpd_0v2dp6.sh: line 21: shift: : numeric argument required

    /tmp/tmpd_0v2dp6.sh: line 22: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local NUM=\"${1:?Missing integer input\
    \ for circular_shift}\"\n    local SHIFT=\"${2:?Missing integer input for circular_shift}\"\
    \n    shift\n    local DIGITS=\"${NUM:${#NUM}-1}\"\n    shift\n    echo \"${NUM:0:${DIGITS}}${NUM:${DIGITS}:${#NUM}}${NUM:${#NUM}}${SHIFT}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [ \"X${2}\" == \"X\" ] ; then\n \
    \   echo ${1}\n  else\n    digits=$(echo \"X${1}\" | sed \"s/X/${2}/\")\n    shift=$(echo\
    \ \"X${1}\" | awk -F. '{printf \"%.0f\", $1+%s}' \\\n          | bc -l)\n    shift=${#digits}\n\
    \    echo \"$digits\"\n    echo \"$shift\"\n    echo \"${digits:${shift}:1}\"\n\
    \  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: {printf "%.0f", $1+%s}

    awk: cmd. line:1:                    ^ syntax error

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local n shift s\n  n=$1\n  shift=$2\n\
    \  s=0\n  if [ \"$shift\" -lt \"$n\" ]\n  then\n    while [ \"$shift\" -ge \"\
    $n\" ]\n    do\n      s=\"$(( s + 1 ))$s\"\n      shift=\"$(( shift - 1 ))\"\n\
    \    done\n  else\n    while [ \"$shift\" -lt \"$n\" ]\n    do\n      s=\"$((\
    \ s - 1 ))$s\"\n      shift=\"$(( shift + 1 ))\"\n    done\n  fi\n  echo \"$s\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=\"${1}\"\n    shift=\"${2}\"\n \
    \   shiftAmount=$(( ${#x} % ${#shift} ))\n    printf '%s\\n' \"${x:0:-${shiftAmount}}${x:-${#x}}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local i=\"${1%%-*}\"\n    local shift=\"\
    ${1##*-}\"\n    local result=\"\"\n    if [ \"$shift\" -gt \"$i\" ]; then\n  \
    \      shift\n        result=\"$(circular_shift \"$i\" \"$shift\")\"\n    else\n\
    \        while [ \"${i}\" -gt \"$shift\" ]; do\n            result=\"$(echo \"\
    ${i}\" | cut -b1-$((${shift}-1))).${result}\"\n            shift\n        done\n\
    \        result=\"${i}.${result}\"\n    fi\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits=$1 shift=$2\n    shift\
    \ $shift\n    echo \"$digits\" | rev | cut -d- -f1\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [ \"${#}\" -gt \"1\" ]; then\n\
    \        x=$1\n        shift\n        result=\"\"\n        shift $(( ${#x} > ${#shift}\
    \ ? ${#shift} : ${#x} ))\n        for (( c=0; c<${#result}; c++ )); do\n     \
    \       result=$(echo $result $(expr ${x:$c} + $shift))\n        done\n      \
    \  echo ${result}\n    else\n        x=$1\n        result=$(echo $x | rev | cut\
    \ -c${#x})\n        echo ${result}\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # Circular shift the digits of the\
    \ integer x, shift the digits right by shift\n    # and return the result as a\
    \ string.\n    # If shift > number of digits, return digits reversed.\n    # >>>\
    \ $(circular_shift \"12\" \"1\")\n    # \"21\"\n    # >>> $(circular_shift \"\
    12\" \"2\")\n    # \"12\"\n    local digits=\"${1}\"\n    local shift=\"${2}\"\
    \n\n    # Truncate the decimal part of an integer\n    local decimal=\"${digits%.*}\"\
    \n    local digits=\"${digits#*.}\"\n\n    # Shift the digits right by the shift\
    \ amount\n    local result=\"${digits}${digits:0:$shift}${decimal}\"\n    if [\
    \ \"$shift\" -gt \"${#result}\" ] ; then\n        result=\"${result:0:$shift}\"\
    \n    fi\n\n    # Return the result as an integer\n    local decimal=\"${result%.*}\"\
    \n    local result=\"${result#*.}\"\n\n    # Return the result\n    echo \"${result}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [ $# -lt 2 ] || [ \"$2\" = 0 ];\
    \ then\n        echo \"\"\n        return\n    fi\n    shift\n    x=\"$1\"\n \
    \   shift \"$2\"\n    x=\"0$x\"\n    shift\n    echo \"$x\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv2fcthe2.sh: line 19: shift: : numeric argument required

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  shift;\n  local digits=$(echo \"$1\"\
    \ | rev | sed \"s/.$//\");\n  local shift=\"$2\";\n  if [[ -z \"$shift\" ]]; then\n\
    \    shift=$[${#digits}-1]\n  fi\n  echo \"${digits:$shift}\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local i shift c\n  shift=\"$2\"\n  shift=$(expr\
    \ \"$shift\" - 1)\n  while (( \"$#\" -gt 0 )); do\n    c=\"$1\"\n    i=1\n   \
    \ while (( \"$i\" -lt \"$shift\" )) && [[ \"$c\" =~ ^([0-9]+)(.*)$ ]]; do\n  \
    \    c=\"${BASH_REMATCH[1]}${BASH_REMATCH[2]}\"\n      (( i++ ))\n    done\n \
    \   shift=\"$i\"\n    i=$(expr \"$i\" + 1 )\n    eval echo \"$c\"\n  done\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpiyk710dx.sh: line 16: ((: 2 -gt 0 : syntax error in expression
    (error token is "0 ")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local result\n    local digit\n    # Shift result to the left by shift,\
    \ return leading zeros as\n    # zero-padded strings.\n    while [ \"$(expr \"\
    $shift\" \" \" \"$x\")\" -lt \"$x\" ]\n    do\n        result=\"$result$(x%10)\"\
    \n        shift\n        x=$(( x / 10 ))\n    done\n    # Shift result right by\
    \ shift, return trailing zeros as zero-padded\n    # strings.\n    while [ \"\
    $(expr \"$shift\" \" \" \"$x\")\" -gt \"$x\" ]\n    do\n        digit=$(( x /\
    \ 10 ))\n        result=\"$digit$result\"\n        x=$(( x % 10 ))\n        shift\n\
    \    done\n    # Strip trailing zeros from result and return.\n    result=\"${result%?}\"\
    \n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u2018 \u2019\n/tmp/tmpx8vsbc5x.sh:\
    \ line 19: [: : integer expression expected\nexpr: syntax error: unexpected argument\
    \ \u2018 \u2019\n/tmp/tmpx8vsbc5x.sh: line 27: [: : integer expression expected\n"
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal digits=$1 shift=$2\n\tlocal reversed=0\n\
    \n\twhile ((shift > 0)); do\n\t\t((reversed = (reversed * 10) + $digits))\n\t\t\
    ((shift = shift - 1))\n\tdone\n\n\tprintf \"%${#reversed}d\" \"$reversed\"\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local input=\"${1:?}\"\n    local\
    \ shift=\"${2:?}\"\n    if [ \"${#input}\" -lt \"2\" ] ; then\n        echo \"\
    ${input}\"\n        return\n    fi\n    local input_digits=\"${input:0:${#input}}\"\
    \n    local shift_digits=\"${input:${#input_digits}}\"\n    if [ \"$shift\" -ge\
    \ \"${#input_digits}\" ] ; then\n        echo \"${input_digits%?}\"\n        return\n\
    \    fi\n    local output_digits=\n    for (( i = 0 ; i <= shift ; i++ )); do\n\
    \        output_digits=\"${output_digits}${input_digits}\"\n    done\n    echo\
    \ \"${output_digits%?}\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [ $# -lt 2 ]\n  then\n    echo \"\
    Error: You must provide 2 integers as arguments\";\n    exit 1;\n  fi\n  if [\
    \ -z \"$2\" ]\n  then\n    echo \"Error: You must provide a shift value as second\
    \ argument\";\n    exit 1;\n  fi\n  shift\n  shift $(($2-1))\n  echo $1 $2\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe0odn93a.sh: line 24: shift: -1: shift count out of range

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    shift\n    local digits=\"${x:0:$((${#x} + $shift))}\"\n    local tail=\"\
    ${x:$((${#x} + $shift))}\"\n    echo $tail | $( [ \"${digits:0:1}\" == \"0\" ]\
    \ && echo \"echo -n '-'\" || echo \"echo -n '+'\" ) | $( echo \"echo ${digits}${tail}\"\
    \ )\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # Extract the second argument as an\
    \ integer\n    shift=$1\n    # Extract the current number as an integer\n    current=$2\n\
    \n    # Extract the current digits as an array\n    digits=${current:0:$shift}\n\
    \n    # Extract the last digits as an array\n    last=${current:$shift:1}\n\n\
    \    # Perform circular shifting of the last digit\n    last=$last$last\n\n  \
    \  # Append last and digits to digits\n    digits=${digits:0:$shift}${last}${digits:$shift}\n\
    \n    # Append shift to last and digits\n    last=$last$shift\n\n    # Append\
    \ digits to digits\n    digits=${digits:0:$shift}${digits}${digits:$shift}\n\n\
    \    # Return digits reversed\n    echo \"$digits\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  # Trim $1 from trailing zeros and leading\
    \ zeros using bash string manipulation\n  # (${variable#*$'\\001'})\n  # (${variable##*$'\\\
    001'})\n  # (${variable%$'\\001'})\n  # (${variable%%$'\\001'})\n\n  # Get length\
    \ of $2\n  len=${#2}\n\n  # If length of $2 is less than or equal to zero, return\
    \ $1 as-is\n  if [[ $len == 0 ]] ; then\n    return $1\n  fi\n\n  # Get length\
    \ of $1\n  len=${#1}\n\n  # If $1 is zero, return $1\n  if [[ $len == 0 ]] ; then\n\
    \    return $1\n  fi\n\n  # If $2 is zero, return $1 with leading zeros removed\n\
    \  if [[ $len == 0 ]] ; then\n    len=$((len-1))\n  fi\n\n  # Circular shift the\
    \ first $len digits left and store result in $1\n  # (${1#*$'\\001'})\n  printf\
    \ \"%0${len}d\" ${1#*$'\\001'} >>$1\n\n  # Circular shift $1 by one and store\
    \ result in $2\n  # (${1##*$'\\001'})\n  printf \"%0${len}d\" ${1##*$'\\001'}\
    \ >>$2\n\n  # Remove leading zeros from $1\n  # (${1%$'\\001'})\n  printf \"%0${len}d\"\
    \ ${1%$'\\001'} >>$1\n\n  # Return $1\n  return $1\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\" shift=\"$2\"\n  local\
    \ digits=$(( ${#x} + shift ))\n  if [[ ${digits} -lt ${#x} ]]; then\n    shift\n\
    \  fi\n  echo ${x%%??}${x#????}\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  # We use Bash 4's associative array\
    \ functionality to store the\n  # digits of the integer in an array variable\n\
    \  declare -A digits\n  digits[$1]=$2\n  # Now we shift the digits right by $2\
    \ and store them in $digits.\n  shift $2 >&${digits[$1]}\n  # Now we reverse the\
    \ digits\n  revdigits=()\n  for (( i = ${#digits[$1]}; i > 1; i-- )) ; do\n  \
    \  revdigits+=(\"${digits[$i]}\")\n  done\n  # Now we join them together and return\n\
    \  printf '%s\\n' \"${revdigits[@]}\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphnhg4lty.sh: line 21: $1]: bad array subscript

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal x=\"${1:?missing an integer}\"\
    \n\tlocal shift=\"${2:?missing an integer, must be > ${#x}}\"\n\tlocal ret\n\t\
    local i\n\tlocal dig\n\tlocal new\n\tshift\n\tret=\"$x\"\n\tshift\n\tfor (( i=0;\
    \ i<${#ret}; i++ )); do\n\t\tdig=\"${ret:$i:1}\"\n\t\tnew=$(( ${ret:$i:1} + shift\
    \ ))\n\t\tnew=${new:0:1}${new:1}\n\t\tret=\"${ret:0:$i}${new}\"\n\tdone\n\techo\
    \ \"$ret\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n   local x=\"$1\"\n   local shift=\"$2\"\
    \n   local result\n   # Use $result to return the result of the circular shift\
    \ operation\n   result=\"0\"\n   while (( shift >= 0 )); do\n      result=\"$result${x}\"\
    \n      shift=`expr $shift - 1`\n   done\n   printf \"%s\" \"$result\"\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits=(${x//[0-9]/ })\n  (( ${#digits} > shift )) && digits=${digits[@]:0:shift}${digits[@]:shift:}\n\
    \  (( shift )) && shift\n  echo \"${digits[@]}\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local output\n\n  if [[ $shift -lt 0 || $shift -gt $(( ${#x} % $shift )) ]];\
    \ then\n    echo \"Error: shift $shift is out of range\" >&2\n    return 1\n \
    \ fi\n\n  output=\"$(\"$@\" -- \"${x//$shift/$(( $(( ${#x} / $shift )) ))}\")\n\
    \  output=\"${output:0:$(( ${#x} % $shift ))}\"\n  echo \"$output\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8msehloc.sh: line 37: unexpected EOF while looking for matching
    `"''

    /tmp/tmp8msehloc.sh: line 41: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local -i start=$1 shift=$2\n  shift\n\
    \  local -i len=$1\n  local -i digits=$2\n  shift\n  local -i result\n  local\
    \ -i shift\n  local digit\n  local -i digit\n  local digits\n  local letter\n\
    \  local letter\n\n  if [ \"$shift\" -lt \"$len\" ]\n  then\n    shift\n    digits=$((len-$shift))\n\
    \    shift $digits\n  else\n    shift\n    digits=$((shift))\n    shift\n  fi\n\
    \n  result=$1\n  shift\n  while [ \"${digits:-0}\" -gt 0 ]\n  do\n    digit=$((\
    \ ${digits:-0} % 10 ))\n    letter=$(( ${digits:-0} / 10 ))\n    result=$(( ${result:-0}\
    \ * 10 ) + ( ${digit:-0} + ${letter:-0} ))\n    digits=$(( ${digits:-0} - ${letter:-0}\
    \ ))\n  done\n\n  printf \"%${digits}s\" \"$result\"\n}\n\ncandidate() {\n   \
    \ circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=49 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=28 encoding='utf-8'>
  timestamp: 1660057531
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n   local -i shift=$2\n   local -i i\n\
    \   local -r digits=$1\n   shift\n\n   for ((i=1; i<=$#; i+=shift)) do\n     \
    \ (( digits = digits*10 + $i ))\n   done\n\n   echo \"$digits\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd9ldajks.sh: line 19: digits: readonly variable

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i x shift result\n    x=$1\n\
    \    shift=$2\n    result=$( printf \"%0$(( ${#x} + shift ))d\" $x )\n    shift=$((\
    \ shift - ${#result} ))\n    printf \"%s\" \"$result\"\n}\n\ncandidate() {\n \
    \   circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits\n  local tail\n  local i\n  local result\n\n  digits=$(( ${#x}\
    \ / ${#shift} ))\n  tail=${#x} % ${#shift}\n  result=$(x= x= i=0 shift result=\"\
    \")\n\n  for (( ; i <= $(( digits )); )); do\n    digit=$(( ${x:$i:1} * ${#shift}\
    \ ))\n    i=$(( i + $shift ))\n    result+=$(( ${digit:0:1} + ${digit:1:1} ))\n\
    \  done\n\n  printf \"%${#tail}s%s\" \"$result\" \"$tail\"\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdaje1ha7.sh: line 21: fg: no job control

    /tmp/tmpdaje1ha7.sh: line 22: shift: result=: numeric argument required

    /tmp/tmpdaje1ha7.sh: line 27: 1 +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x shift result\n    shift=$1\n\
    \    shift=$(($shift - 1))\n    x=$1\n    result=$(echo \"$x\" | sed \"s/^\\(\\\
    (.\\)\\{${shift}\\}\\).*/\\1/\")\n    x=$(echo \"$x\" | sed \"s/^.\\(\\(\\(.*\\\
    )\\{${shift}\\}\\).*\\)/\\1/\")\n    result=$(echo \"$result\" | sed \"s/^\\(\\\
    (.\\)\\{${shift}\\}\\).*/\\1/\")\n    return $result\n}\n\ncandidate() {\n   \
    \ circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local digits=$1\n  local shift=$2\n\
    \  if [ $shift -lt 0 ]; then\n    shift $((-shift))\n  fi\n  local res\n  local\
    \ digits_length\n  digits_length=$((${#digits} - $shift))\n  res=${digits:0:$digits_length}\n\
    \  res=${res:1}\n  if [ $shift -gt $((${#res} - 1)) ]; then\n    res=${res:0:$shift}\n\
    \  fi\n  printf '%s' \"$res\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x shift result\n    shift=$1\n\
    \    x=${1%%-*}\n    result=$((x = $((10#$((${#x}+$shift))%10#$((${#x}+$shift)))))\n\
    \    if [ $x -gt 0 ] ; then\n        result=$((10#$((${#result})+$shift))%10#$((${#result})+$shift))\n\
    \    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq0n0nrtq.sh: line 16: unexpected EOF while looking for matching
    `)''

    /tmp/tmpq0n0nrtq.sh: line 37: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local number=$1\n    local shift=$2\n\
    \    local digits=\"\"\n    if [[ -z \"$shift\" ]]; then\n        shift=$(( $#number\
    \ ))\n    fi\n    for (( digit=0; digit < $shift ; digit++ )); do\n        digits=${digits}\"\
    ${number%?}\"\n        number=${number//??}\n    done\n    digits=${digits//?}\n\
    \    digits=${digits// /}\n    echo $digits\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n        local integer shift\n        integer=\"\
    $1\"\n        shift=\"$2\"\n        local digits\n        digits=$(echo $integer\
    \ | tr [a-z] [A-Z])\n        (( shift > ${#digits} )) && shift=${#digits}\n  \
    \      echo \"${digits:0:$shift}${digits:$shift}\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "tr: extra operand \u2018[A-Z]\u2019\nTry 'tr --help' for more information.\n"
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  shift\n  local result=\"\"\n  local\
    \ shift=$1\n  local digits=$2\n  if (( $digits <= 0 )); then\n    shift\n    return\
    \ $1\n  fi\n  while (( $digits > 0 )); do\n    result=$(( 10#$result + 10#$shift\
    \ ))\n    shift\n  done\n  return $result\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpej45b2qv.sh: line 17: ((: <= 0 : syntax error: operand expected
    (error token is "<= 0 ")

    /tmp/tmpej45b2qv.sh: line 21: ((: > 0 : syntax error: operand expected (error
    token is "> 0 ")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -r x=\"$1\"\n    local -r shift=\"\
    $2\"\n    local -r digits=${#x}\n    local -r shiftLength=$((shift))\n    local\
    \ -r result=\"\"\n    while [[ $shift -lt $shiftLength ]]; do\n        result=\"\
    $(echo \"${x}\" | sed \"s/\\(.\\)\\(${digits}\\)/\\1${shift}\\3/\")\"\n      \
    \  shift $shiftLength\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n  \
    \  circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -r x=$1\n    local -r shift=$2\n\
    \    shift $(( shift - 1 ))\n    local output\n    (( x <= 0 )) || return $x\n\
    \    output=$(( x / $shift ))\n    x=$(( x % $shift ))\n    (( shift > x )) &&\
    \ output=$(( x - $shift )) || output=$(( $shift - x ))\n    echo $output\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local number=$1\n    shift\n    local\
    \ shift=$2\n    local output=\"\"\n    local count=0\n\n    while [[ \"$number\"\
    \ -gt 0 ]]; do\n        ((count++))\n        output+=\"${number%10}\"\n      \
    \  number=${number//${number#???}}\n    done\n    # Deal with left overs\n   \
    \ [[ \"$shift\" -lt \"$count\" ]] && shift\n    shift\n    # Shift digits over\n\
    \    count=0\n    while [[ \"$shift\" -gt 0 ]]; do\n        output+=\"${output#???}\"\
    \n        shift\n    ((count++))\n    done\n    output+=\"${output#???}\"\n  \
    \  shift\n    # Circular-shift digits back\n    shift\n    count=0\n    while\
    \ [[ \"$shift\" -gt 0 ]]; do\n        output+=\"${number%10}\"\n        number=${number//${number#???}}\n\
    \    done\n    output+=\"${output#???}\"\n    shift\n    output\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=9 encoding='utf-8'>
  timestamp: 1660057531
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -r digits=\"${1}\"\n    local\
    \ -r shift=\"${2}\"\n    shift \"${shift}\"\n    if [[ \"${digits}\" =~ ^[0-9]+$\
    \ ]]; then\n        local -r digits_length=${#digits}\n        if [[ \"${shift}\"\
    \ -gt \"${digits_length}\" ]]; then\n            echo \"${digits:0:${digits_length}}${digits:${digits_length}:1}\"\
    \n        else\n            echo \"${digits:0:${shift}}${digits:shift}:1\"\n \
    \       fi\n    else\n        echo \"${digits}\"\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  shift\n  local len=$(( ${#1} > ${#2}\
    \ ? ${#1} : ${#2} ))\n  local i\n  local tmp\n  local result\n\n  for (( i = 1;\
    \ i <= len; i++ )); do\n    local tmp=$(( ${1:$i:1} % 10 ))\n    shift 1\n   \
    \ local j\n    for (( j = 1; j <= i; j++ )); do\n      local tmp2=$(( ${2:$j:1}\
    \ % 10 ))\n      result+=(${1:$i:$j:1})\n    done\n    result+=(${tmp:$i:1})\n\
    \  done\n  echo \"${result}\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv4dzpw02.sh: line 20: % 10 : syntax error: operand expected (error
    token is "% 10 ")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local number=$1\n  local shift=$2\n\n\
    \  local string=$number\n  if (( shift > ${#number} )); then\n    shift\n  fi\n\
    \n  while (( shift > 0 )); do\n    string=${string:0:1}${string:1:$(($#string\
    \ - 1))}\n    (( shift -- ))\n  done\n\n  echo $string\n}\n\ncandidate() {\n \
    \   circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiidb3mhk.sh: line 22: 2string: value too great for base (error
    token is "2string")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [ $# -ne 2 ]\n  then\n    echo \"\
    Usage: $0 $1 $2\"\n  fi\n  \n  x=\"$1\"\n  shift=\"$2\"\n  \n  (( x = x * $2 ))\n\
    \  (( x /= 10 ))\n  (( x += $1 ))\n  \n  echo $x\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local d=0\n  local shift=$2\n  while\
    \ [ -z \"$shift\" ]\n  do\n    shift\n    d=$(( d + 1 ))\n  done\n  local digits=$(\
    \ printf %0$d $1)\n  local reversed=$(echo $digits | sed -r 's/(..)(..)/\\1\\\
    2/g')\n  shift\n  echo $( echo \"$digits\" | sed -r 's/(..)(..)/\\1\\2/g' |\n\
    \    sed -r -e 's/^/'$shift'/' -e 's/^/'$reversed'/' -e 's/$/')\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpay7ycnsr.sh: line 20: printf: `%00'': missing format character

    sed: -e expression #3, char 4: unterminated `s'' command

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i shift digits=$2\n    local\
    \ -i c\n    c=0\n    shift\n    for (( ; shift; shift=c-1 ))\n    do\n       \
    \ digit=$1\n        (( c++ ))\n        (( digits=${digits:0:c}${digit:1} ${digits:c}\
    \ ))\n    done\n    echo ${digits:0:1}\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tshift\n\tlocal x shift result\n\tx=\"\
    $1\"\n\tshift\n\tif [ \"$x\" -eq 0 ]; then \n\t\treturn \"$1\"\n\telif [ \"$shift\"\
    \ -lt \"$#x\" ]; then \n\t\tresult=\"$x\"\n\telse\n\t\tshift\n\t\tresult=\"$(\
    \ echo \"$x\" | sed -e \"s/.${1}..${1}..${1}/g\" -e \"s/.${1}..${1}..${1}$/${1}..${1}..${1}/g\"\
    \ )\"\n\tfi\n\tshift\n\treturn $( echo \"$result\" | sed -e \"s/.${1}..${1}..${1}/g\"\
    \ -e \"s/.${1}..${1}..${1}$/${1}..${1}..${1}/g\" )\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe3yww40c.sh: line 19: [: : integer expression expected

    sed: -e expression #1, char 9: unterminated `s'' command

    sed: -e expression #1, char 9: unterminated `s'' command

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    if [ \"$shift\" -gt \"10\" ]; then\n        shift\n    fi\n    echo\
    \ \"$x\" | while read -r num; do\n        echo -n \"$(( $num % 10 ))\"\n    done\n\
    \    echo \"$x\" | while read -r num; do\n        echo -n \"$(( $num % 10 ))\"\
    \n    done | tail -n \"$shift\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  shift\n  local digits=$( echo $1 | sed\
    \ 's/\\(.*\\)//g' )\n  local digits_reverse=$( echo $digits | rev | sed 's/\\\
    (.*\\)//g' )\n  echo $( echo $digits_reverse | awk -v shift=$2 -v len=$(( 10#$1\
    \ )) '{ printf \"%s\", ($1+shift)%len }' )\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits=\"\"\n  local last\n  local digit\n  last=$(( ${#x} % $shift\
    \ ))\n  (( shift < last )) || shift=$last\n  digits=$(echo \"$x\" | sed -n \"\
    s/^\\(\\([0-9]*\\)$shift\\([0-9]*\\).*/\\2\\1/p\")\n  echo \"$x\" | sed \"s/^\\\
    (\\([0-9]*\\)$shift\\([0-9]*\\).*/\\1$digits\\2/\" \n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 35: Unmatched ( or \(

    sed: -e expression #1, char 34: Unmatched ( or \(

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal x\n\tlocal shift\n\tx=\"$1\"\n\
    \tshift=\"$2\"\n\tlocal xbase\n\txbase=\"$1\"\n\tlocal result\n\tresult=\"\"\n\
    \twhile [ \"$x\" -gt 0 ]; do\n\t\tresult=\"$x\"\n\t\tx=\"$(( x / 10 ))\"\n\tdone\n\
    \techo \"$result\"\n\tshift\n\tx=\"$xbase\"\n\twhile [ \"$shift\" -gt 0 ]; do\n\
    \t\tx=\"$(( x * 10 ))\"\n\t\tshift\n\tdone\n\techo \"$x\"\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=38 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=22 encoding='utf-8'>
  timestamp: 1660057531
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x shift num\n  x=$1\n  shift=$2\n\
    \  num=$(echo $x | cut -c -$shift)\n  while (( shift > 0 )) ; do\n    x=$(echo\
    \ \"$x\" | cut -c $(( shift - 1 )))\n    shift=$(($shift - 1))\n  done\n  echo\
    \ \"$x\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'cut: byte/character positions are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i shift=$1\n    local -i digits=$2\n\
    \    local -r digit=$(echo \"$digits\" | awk '{print substr($1,$2,1)}')\n    local\
    \ -r last_digit=$(echo \"$digits\" | awk '{print substr($1,$2+1,1)}')\n    local\
    \ -r digits=(${digits// / })\n    local -r shifted_digits=(${digits:0:$shift})\n\
    \    shifted_digits+=${digit:0:$shift}\n    shifted_digits+=${digit:$shift}\n\
    \    shifted_digits+=${last_digit:0:$shift}\n    shifted_digits+=${last_digit:$shift}\n\
    \    shifted_digits+=${digit:$shift}\n    shifted_digits+=${last_digit:$shift}\n\
    \    echo \"${shifted_digits}\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_kwd1arn.sh: line 19: shifted_digits: readonly variable

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=$1\n    shift=$2\n    if [ $shift\
    \ -le ${#x} ]; then\n        # Handle negative shift with reversed string\n  \
    \      len=${#x}\n        shift $(( len + shift ))\n        echo $x$(( len + shift\
    \ ))\n    else\n        echo $x\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i x=\"${1}\"\n    local -i\
    \ shift=\"${2}\"\n    if [[ \"${#x}\" -lt \"${shift}\" ]]; then\n        echo\
    \ \"${x}\"\n    elif [[ \"${#x}\" -eq \"${shift}\" ]]; then\n        echo \"${x%?}\"\
    \n    else\n        local digits=(${x})\n        local tmp\n        for ((i =\
    \ 0; i < ${shift}; i++)); do\n            tmp=${digits[i]}\n            digits[i]=${digits[${#digits}-1]}\n\
    \            digits[${#digits}-1]=${tmp}\n        done\n        echo \"${digits[@]}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  # Check if shift is out of range\n \
    \ if (( $2 > ${#1} )); then\n    # Return empty string\n    return $1\n  fi\n\n\
    \  # Shift digit by shift and add new digit\n  echo \"${1:0:$1}${2:$((${#1}+$2))}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local n=$1\n  local shift=$2\n\n  local\
    \ digits=${n}\n  local result=${digits}\n  if [[ $shift -gt ${#digits} ]]; then\n\
    \    shift=${#digits}\n  fi\n  shift=$((shift-1))\n\n  for ((i=0;i< ${#result};i++));do\n\
    \    ((${digits}))\n    if [ $i == ${shift} ]; then\n        digits=${result}\n\
    \    else\n        ((${digits}))\n        result=$((${result}+${digits}))\n  \
    \  fi\n  done\n  echo ${result}\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"${1:?argument 1 missing}\"\
    \n    local shift=\"${2:?argument 2 missing}\"\n    if [[ ${#x} -lt ${#shift}\
    \ ]]; then\n        echo \"${x}\"\n        return\n    fi\n    local y\n    local\
    \ rest\n    local len\n    len=\"${#shift}\"\n    shift\n    while ((${#x} >=\
    \ ${len})); do\n        y=\"${x:$((${len}-1))}\"\n        rest=\"${x:0:((${len}-1))}\"\
    \n        x=\"${y}\"\n        x=\"${rest}\"\n        shift\n    done\n    y=${x}\n\
    \    shift\n    echo \"${y}\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits=$1\n    local shift=$2\n\
    \    shift=$(( $shift + $(( ${#digits} % $shift )) ))\n    echo $(( ${digits%%?}\
    \ + ${shift} * ${digits#?} ))\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x shift result\n\n    # $1 is\
    \ expected to be an integer\n    shift\n\n    # $2 is expected to be an integer\n\
    \    shift\n\n    x=\"$1\"\n    shift\n    result=\"$x\"\n    while (( \"$shift\"\
    \ > 0 ));\n    do\n        (( x = x * 10 ))\n        result=\"$result$x\"\n  \
    \      shift\n    done\n    if [ \"$shift\" -eq 0 ]\n    then\n        shift\n\
    \        result=\"$result$x\"\n    fi\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1s45i2z1.sh: line 24: ((: > 0 : syntax error: operand expected
    (error token is "> 0 ")

    /tmp/tmp1s45i2z1.sh: line 30: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [ $# -eq 2 ]; then\n        local\
    \ digits=$((10#$1))\n        local shift=$2\n        local result\n        if\
    \ [ $shift -lt $digits ]; then\n            result=`echo $((10#$1))${((10#$2)):0}`\n\
    \        else\n            local digits1=$(echo $((10#$shift))${1:0:$shift})\n\
    \            local digits2=$(echo $((10#$shift))${1:$shift:1})\n            result=`echo\
    \ $digits1 $digits2`\n        fi\n        echo $result\n    else\n        echo\
    \ \"error: invalid argument given for function $FUNCNAME\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpf0l_89o7.sh: line 18: $((10#$1))${((10#$2)):0}: bad substitution

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local str=\"\"\n    if [[ $x =~ \"^[[:digit:]]+$\" ]];then\n        local\
    \ length=\"${#x}\"\n        local i=0\n        while [ $i -lt $length ];do\n \
    \           local rem=$(($length-1-$i))\n            local digit=${x:$i:1}\n \
    \           local j=0\n            local remainder=0\n            local str=\"\
    \"\n            while [ $j -le $shift ];do\n                local digit=${digit:0:1}\n\
    \                local remainder=$((10*remainder+$digit))\n                local\
    \ j=$(($j+1))\n            done\n            if [ $remainder -gt $(($length%$shift))\
    \ ];then\n                local remainder=$(($length%$shift))\n              \
    \  while [ $remainder -gt 0 ];do\n                    local digit=${digit:0:1}\n\
    \                    local remainder=$(($remainder-1))\n                    local\
    \ j=0\n                    while [ $j -le $shift ];do\n                      \
    \  local digit=${digit:0:1}\n                        local remainder=$(($remainder-1))\n\
    \                        local j=$(($j+1))\n                    done\n       \
    \             remainder=$(($remainder+1))\n                done\n            fi\n\
    \            str=$(($str$digit))\n            i=$(($i+1))\n        done\n    \
    \    echo $str\n    else\n        echo \"$x\"\n    fi\n}\n\ncandidate() {\n  \
    \  circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    shift=$(( $1 <<< $2 ));\n    echo\
    \ $(( $1 / $2 ))\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn7qb18yr.sh: line 13: 100 <<< 2 : syntax error: operand expected
    (error token is "< 2 ")

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  x=$(($1))\n  shift=$(($2))\n  if [[\
    \ ${#x} -gt ${#shift} ]]; then\n    shift=${#x}\n  fi\n  echo ${x%${x#0}$(expr\
    \ ${shift} + 1)}\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal x=$1\n\tlocal shift=$2\n\tlocal\
    \ tmp\n\tlocal digits\n\tlocal result\n\n\t# shift digits to right of shift, put\
    \ digits into result string\n\twhile ((x-- > 0)); do\n\t\ttmp=$((10#$x%10))\n\t\
    \tdigits=${digits:0:$shift}${tmp}${digits:$shift:}\n\tdone\n\n\tresult=${digits:0:$shift}${digits:$shift}\n\
    \techo $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [ $# -ne 2 ]\n  then\n    echo \"\
    Usage: $0 numer shift\"\n    echo \"$0 Usage: $0 numer shift\"\n  else\n    #\
    \ reverse the digits of the integer\n    local IFS=\"-\" shift\n    local x=$1\
    \ result=\"$(echo \"$x\" | rev | cut -c1- | rev)\"\n    if [ \"$shift\" -gt \"\
    0\" ]\n    then\n      result=\"$(echo \"$result\" | cut -c$(( ${#result} - 1\
    \ ))- )\"\n    fi\n    echo \"$result\"\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsi0rlys6.sh: line 21: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local i shift len\n  shift $(( ${#1}\
    \ >> $2 )) 1\n  len=$(( ${#1} - $shift ))\n  i=1\n  while (( i < len )) ; do\n\
    \    local c=$( printf '%c' $( echo $1 | sed \"s/\\(.\\)\\(.*\\)/\\1${i}$2/g\"\
    \ ))\n    shift\n    i=$(( i + 1 ))\n    echo \"$c\"\n  done\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbp3tqjtq.sh: line 14: shift: too many arguments

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local n=$1; shift=$1; local x; x=$((\
    \ $(echo $(( $n % $2 )) )) ); n=$(echo $n | bc); echo \"$x$n\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpowutffd7.sh: line 13: 0: command not found

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n\n\
    \    if [ \"$shift\" -gt ${#x} ]; then\n\tshift=${#x}\n    fi\n\n    local digits=\"\
    \"\n    local len=${#x}\n    local j=0\n    while [ $j -le $shift ] ; do\n\tdigits=${x%?}${digits}\n\
    \tx=${x#?}\n\tj=$(( j + 1 ))\n    done\n    echo \"$digits\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local -i n=\"$1\"\n  local -i s=\"$2\"\
    \n  local -i result\n  local -i i\n  result=\"$(echo \"${n}\" | sed -r 's/(.{$s})/\\\
    1/')\"\n  if (( n <= s ))\n  then\n    for i in $(seq 0 $(( $s - 1 ))); do\n \
    \     result=\"$(echo \"${result}\" | sed -r 's/^(.{$i})/\\2/;s/(.*)/\\1/')\"\n\
    \    done\n    result=\"$(echo \"${result}\" | sed -r 's/(.*)/\\1/')\"\n  fi\n\
    \  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 13: Invalid content of \{\}

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n\tlocal shift=$1\n\tshift=$2\n\tshift\
    \ $(( 10#$shift ))\n\t(( $# > 1 )) && shift\n\techo $@\n}\n\ncandidate() {\n \
    \   circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local n=$1\n    local shift=$2\n \
    \   local reversed\n    if [ \"$shift\" -gt \"$n\" ]; then\n        reversed=$(($n\
    \ - $shift))\n        shift=$(($n + $shift))\n    else\n        reversed=0\n \
    \   fi\n    local result\n    for ((i=$reversed; i >= 0; i--)); do\n        result=$((result\
    \ * 10 + $1))\n        shift\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -r x=\"${1:?Usage: $(basename\
    \ $0)} <integer> <integer>\"\n    local -r shift=\"${2:?Usage: $(basename $0)}\
    \ <integer> <integer>\"\n    (( shift < ${#x} )) && shift || shift=$((${#x} -\
    \ 1))\n    local -r digits=$(echo \"$x\" | sed 's/\\(.\\)\\(.\\)/\\1\\2/g')\n\
    \    local -r digits_length=${#digits}\n    local -r digits_string=${digits:0:$((shift\
    \ - 1))}\n    local -r digits_string_reversed=$(echo \"${digits_string}\" | sed\
    \ 's/^\\(.\\)\\(.*\\)/\\2\\1/')\n    local -r res=\"${digits_string_reversed}\"\
    \n    # $res should always have a trailing '0', except in the case of $shift ==\
    \ 0.\n    # Otherwise the final 0 is omitted.\n    (( $shift == 0 )) && res=\"\
    $digits_string\" || res=\"$digits_string0$res\"\n    echo \"$res\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp401r_pku.sh: line 15: ((: 2 <integer> <integer>: syntax error:
    operand expected (error token is "<integer>")

    /tmp/tmp401r_pku.sh: line 15: shift: readonly variable

    '
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits=${1}\n    local shift=${2}\n\
    \    local digits_len=${#digits}\n    local shift_len=${#shift}\n    if [ $shift_len\
    \ -gt $digits_len ]; then\n        echo \"$shift not enough digits to circular\
    \ shift: $digits has $digits_len digits, $shift has $shift_len\"\n        return\
    \ 1\n    fi\n    local digits_slice\n    digits_slice=$( echo $digits | cut -c1-\
    \ )\n    local shift_slice\n    shift_slice=$( echo $shift | cut -c1- )\n    local\
    \ sliced_digits\n    sliced_digits=$( echo \"$digits_slice$shift_slice\" | paste\
    \ -s -d \"\" )\n    echo \"$sliced_digits\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=$1\n    shift=$2\n    shift $shift\n\
    \    printf \"%0*d${1}\" $shift $x | sed \"s/.//g\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i shift value\n    shift=$((\
    \ $# > 1 ? $1 : 0 ))\n    shift=$(( shift > 8 ? 8 : shift ))\n    value=\"0\"\n\
    \    while (( shift > 0 )) ; do\n        value=$(( ${value#0}${1}${value%${value#0}}))\n\
    \        shift=$(( shift - 1))\n    done\n    echo \"${value%$1}\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local digits=$1\n  local shift=$2\n\
    \  local result=\"\"\n\n  while [ -z \"$shift\" ]; do\n    shift\n    shift\n\
    \  done\n\n  local digits_count=$(echo \"$digits\" | wc -c)\n  local digits_shift=$(echo\
    \ \"$shift\" | wc -c)\n\n  # If the number of digits to shift to is greater than\
    \ the number of digits\n  # in the number we're shifting by, the digits are shifted\
    \ in the reverse\n  # order because of the way the number is represented in the\
    \ file.\n  if [ \"$digits_shift\" -gt \"$digits_count\" ]; then\n    digits=$(\
    \ echo $digits | rev | cut -c1-$digits_count | rev )\n  fi\n\n  # Shift the digits\
    \ right by $shift and add the digits that we shifted out\n  # to the result string.\n\
    \  echo \"$digits\" | while read digit; do\n    result=\"$digit$result\"\n  done\n\
    \n  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local integer=\"$1\"\n    shift\n\
    \    local digits=\"${integer}\"\n    while (( ${#digits} > 0 )); do\n       \
    \ digits=$(echo \"${digits}1\" | bc)\n    done\n    echo \"${digits}\"\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=30 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=16 encoding='utf-8'>
  timestamp: 1660057531
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # Still an improvement would be to\
    \ make a string out of the parameters\n    # as they are already strings and we\
    \ don't want to make them into integers\n    # again\n    local a=\"${1}\"\n \
    \   local shift=\"${2}\"\n    local n=\"${#a}\"\n    local remainder=\"$((n %\
    \ shift))\"\n    local new_str=\"\"\n\n    # If the remainder is zero, return\
    \ the string as-is\n    # otherwise the string is shifted right and we append\
    \ the remainder of the number\n    # to it.\n    if [ \"$remainder\" == \"0\"\
    \ ]; then\n        echo \"$a\"\n    else\n        (( remainder--))\n        local\
    \ last_digit=\"$a\"\n        new_str=\"$last_digit\"\n        for ((i = 1; i <\
    \ shift ; i++ )) ; do\n            new_str=\"$last_digit$new_str\"\n        done\n\
    \    fi\n    echo $new_str\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local result\n    local digit\n    local digit_reversed\n    local i\n\
    \    shift\n    digit=\"$x\"\n    digit_reversed=\"$digit\"\n    for ((i = 0;\
    \ i <= shift; i++)); do\n        digit=\"$((digit*10+1))\"\n        digit_reversed=\"\
    $((digit_reversed*10+1))\"\n    done\n    echo \"$digit_reversed\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057526
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    shift\n    local\
    \ shift=\"$2\"\n    local output=\"\"\n    # Handle shifting > 10 digits by adding\
    \ zeroes and padding to\n    # multiple of $shift digits.\n    while (( shift\
    \ > 10 )); do\n        (( shift -= 10 ))\n        output=\"$output0\"\n    done\n\
    \    # Shift the digits right by shift.\n    output=\"${output:$shift:1}\"\n \
    \   # Append leading zeroes to handle shifting > 10 digits by adding to the\n\
    \    # leading digits.\n    output=\"0$output\"\n    while (( \"$shift\" > 0 ));\
    \ do\n        (( shift-- ))\n        output=\"$output$x\"\n    done\n    # Return\
    \ output with leading zeroes removed.\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphc5klfv5.sh: line 28: ((: > 0 : syntax error: operand expected
    (error token is "> 0 ")

    '
  stdout: ''
  timestamp: 1660057526
