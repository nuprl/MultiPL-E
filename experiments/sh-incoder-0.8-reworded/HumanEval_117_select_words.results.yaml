language: sh
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal s=$1\n\tlocal n=$2\n\tIFS='' read -ra WORDS <<< \"$s\"\n\tlocal words=()\n\
    \tlocal word\n\tfor word in \"${WORDS[@]}\"; do\n\t\tif [[ $word =~ $n ]]; then\n\
    \t\t\twords=(\"${words[@]}\" \"$word\")\n\t\tfi\n\tdone\n\techo ${words[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local num=\"$2\"\n    local wordlist=\"\"\n\n\
    \    # Check if string and num are valid inputs\n    if [ -z \"$string\" -o -z\
    \ \"$num\" ] \n    then\n        echo \"Invalid inputs: string and num should\
    \ be provided.\"\n        return\n    fi\n\n    # Check if num is greater than\
    \ 0 and less than the length of the string\n    if [ \"$num\" -gt 0 ] -a [ \"\
    $num\" -lt \"$string\" ] \n    then\n        echo \"Invalid input: num should\
    \ be less than string length.\"\n        return\n    fi\n\n    # Loop through\
    \ the string and append strings that contain $num\n    # consonants to the list\n\
    \    for i in \"${string//[^ ]/}\"; do\n        [[ \"$i\" =~ \"$num\" ]] && wordlist=\"\
    $wordlist $i\"\n    done\n\n    echo \"$wordlist\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbnpmxrfr.sh: line 34: [: too many arguments

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=\"$1\"\n    local n=\"$2\"\n    local res=()\n\n    if [ -z\
    \ \"$str\" ]; then\n        return res\n    fi\n\n    local first_word=\"$(echo\
    \ $str | awk -F\" \" '{ print $1 }')\"\n    local second_word=\"$(echo $str |\
    \ awk -F\" \" '{ print $2 }')\"\n\n    # Check if first_word length is equal to\
    \ n\n    if [ \"${#first_word}\" -eq \"${n}\" ]; then\n        local consonants=(a\
    \ e i o u y Ae Ii Oo Uu Yy H T K Z S X D X f V J J f f f f f f f f f f f f f f\
    \ f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f\
    \ f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f\
    \ f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f\
    \ f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f\
    \ f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f\
    \ f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f\
    \ f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f\
    \ f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f\
    \ f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f f\
    \ f f f f f f f f f f f f f f f f f f f f f f f f f f f f \n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfku0qceo.sh: line 38: syntax error near unexpected token `(''

    /tmp/tmpfku0qceo.sh: line 38: `candidate() {''

    /tmp/tmpfku0qceo.sh: line 39: select_words: command not found

    /tmp/tmpfku0qceo.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmpfku0qceo.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s_=$1\n    local n_=$2\n    local res\n    local i\n    local j\n\
    \    local k\n    local s\n    local word\n    local words\n    local word\n \
    \   local words\n    local s_w\n    local word\n    local words\n\n    if [ -z\
    \ \"$s_\" ]; then\n        return res\n    fi\n\n    words=()\n    word=''\n \
    \   s=$(echo $s_ | sed -E 's/[[:alpha:]]+[[:space:]]+//g')\n    for i in $(seq\
    \ 0 $((${#s}-$n_))); do\n        s_w=${s:$i:$n_}\n        j=$(echo $s_w | wc -l)\n\
    \        for ((k=0; k<$j; k++)); do\n            if [[ $s_w =~ ([[:alpha:]]${n:$k})\
    \ ]]; then\n                word+=$1\n            fi\n        done\n        word=${word//\
    \ /}\n        words+=(\"$word\")\n    done\n    echo \"${words[*]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    declare -a wordlist\n    declare -i i\n    declare -i k\n    declare\
    \ -i n\n\n    if [ \"$1\" == \"\" ]; then\n        echo \"error: string cannot\
    \ be empty\" >&2\n        return 1\n    fi\n\n    if [ \"$2\" == \"0\" ]; then\n\
    \        echo \"error: no occurrence of n allowed\" >&2\n        return 1\n  \
    \  fi\n\n    for (( i = 1; i <= $2; i++ )); do\n        for (( k = 0; k < ${#$1}\
    \ && k<${#wordlist[*]};k++ )); do\n            if [[ \"${wordlist[$k]}\" == \"\
    ${1:k:i}\" ]]; then\n                wordlist[$k]=\"${1:k:i}\"\n             \
    \   break\n            fi\n        done\n    done\n\n    for (( k = 0; k < ${#wordlist[*]};k++\
    \ )); do\n        echo \"${wordlist[$k]}\"\n    done\n}\n\ncandidate() {\n   \
    \ select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little\
    \ lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd8jv5qdc.sh: line 38: k < ${#$1} && k<${#wordlist[*]}: bad substitution

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s\n    local n\n    local list\n    local i\n    s=\"${1}\"\n \
    \   n=\"${2}\"\n    list=$(echo \"${s}\" | grep -P '(?<=\\w)\\w*' | grep -E '^[a-zA-Z]$'\
    \ | wc -l)\n    if [ \"${list}\" -eq \"0\" ]; then\n        echo \"[]\"\n    else\n\
    \        for ((i=0; i<${list}; i++)) ; do\n            if [ \"${#s}\" = \"${i}\"\
    \ ]; then\n                echo \"[]\"\n                break\n            fi\n\
    \            if [ \"${#s}\" -lt \"${i}\" ]; then\n                ss=$(echo \"\
    ${s}\" | sed \"1,${i}d\")\n            else\n                ss=$(echo \"${s}\"\
    \ | sed \"${i}q;d\")\n            fi\n            if [ \"${ss}\" == \"${s}\" ];\
    \ then\n                list=\"${list}\"\n            fi\n        done\n     \
    \   echo \"${list}\"\n    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") =\
    \ \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local array=()\n\n    if [[\
    \ -z $string ]]; then\n        echo \"\"\n    else\n        local first\n    \
    \    local last\n        local i\n\n        for (( i=0; i < ${#string}; i++ ));\
    \ do\n            if [[ \"${string:$i:1}\" == \\- ]]; then\n                array+=(${string:$i:1})\n\
    \            fi\n        done\n\n        array=(\"${array[@]}\" \"$string\")\n\
    \n        for (( i=0; i < ${#array[@]}; i++ )); do\n            first=${array[$i]}\n\
    \            last=${array[$(($i + 1))]}\n            if (( first == last )); then\n\
    \                array[$i]=\"\\\"${array[$i]}\\\"\"\n            fi\n        done\n\
    \n        array=(\"${array[@]}\")\n        array=(\"${array[@]/%/${array[@]:1:-}}\"\
    )\n\n        for (( i=0; i < ${#array[@]}; i++ )); do\n            if [[ ${array[$i]}\
    \ == $number ]]; then\n                echo ${array[$i]}\n            fi\n   \
    \     done\n    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfzxaxkt5.sh: line 44: ((: Mary had a little lamb: syntax error
    in expression (error token is "had a little lamb")

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=$1\n    local num=$2\n\n    if [ $num -gt 0 ]; then\n     \
    \   if [[ $str == \"\" ]]; then\n            return\n        fi\n        \n  \
    \      local words=$( echo $str | awk '{print $1}' | sed \"s/ //g\" | sed 's/$//'\
    \ | sed \"s/[[:space:]]//g\")\n        local length=${#words}\n        \n    \
    \    if [ $length -gt $num ]; then\n            echo \"$words\"\n        fi\n\
    \    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local wordList=\"$(wc -w < \"$1\")\"\n    local index=\"$2\"\n    local\
    \ word\n    local index\n    local count\n    local num\n    local i\n\n    wordList=$(cat\
    \ \"$1\" | wc -l)\n    echo \"$wordList\"\n    for i in $(seq 0 \"$wordList\"\
    ); do\n        if [ \"$i\" -eq \"$index\" ]; then\n            word=\"$(head -n\
    \ \"$i\" \"$1\")\"\n            echo \"$word\"\n            break\n        fi\n\
    \    done\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpm8vm8w60.sh: line 22: Mary had a little lamb: No such file or directory

    cat: ''Mary had a little lamb'': No such file or directory

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n\n    # Write your code here.\n    arr=$(echo\
    \ \"$s\" | tr -cd \"[:alnum:]\" )\n    if [[ $arr == \"\" ]]; then\n        echo\
    \ \"[]\"\n    else\n        echo \"$arr\"\n    fi\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo \"Enter first string: $1\"\n    read -r s\n    echo \"Enter integer\
    \ for number of consonants: $2\"\n    read -r n\n    # your code here\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=7 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660059490
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local wordList=$1\n    local numOfWords=$2\n    local word\n\n    wordList=$wordList$(IFS=\n\
    )\n\n    echo ${wordList} | sed -n 's/^.*\\(${numOfWords}\\).*$/\\1/p'\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal string=\"$1\"\n\tlocal number=\"$2\"\n\n\t[[ $string != \"\" ]] &&\
    \ [[ $number -gt 1 ]] || { echo \"$FUNCNAME: invalid parameters\" >&2; return\
    \ 1; }\n\n\tlocal tmplist=\"$(cat <<-EOF\n$string\nEOF\n)\"\n\n\tlocal word_list=''\n\
    \n\twhile read -r line; do\n\t\tif [[ \"${#line}\" -gt \"$number\" ]]; then\n\t\
    \t\tcontinue\n\t\tfi\n\t\t\n\t\tlocal tmpline=\"$line\"\n\t\tlocal word=''\n\t\
    \tlocal consonants=0\n\n\t\twhile [[ \"$tmpline\" =~ [a-zA-Z0-9] ]]; do\n\t\t\t\
    word+=\"$tmpline\"\n\t\t\ttmpline=\"${tmpline//[^a-zA-Z0-9]}\"\n\t\t\tconsonants=$((\
    \ consonants + 1 ))\n\t\tdone\n\n\t\tif [ \"$consonants\" -eq \"$number\" ]; then\n\
    \t\t\tword_list=\"$word_list$word\"\n\t\tfi\n\tdone <<< \"$tmplist\"\n\n\techo\
    \ \"$word_list\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=$1\n  local n=$2\n  local words=()\n  local pattern=\"^([^[:space:]]+[[:space:]]+){$n}[[:space:]]+\"\
    \n  local line\n  \n  for line in $string; do\n    [[ \"$line\" =~ $pattern ]]\
    \ && words+=(\"${BASH_REMATCH[1]}\")\n  done\n  \n  if [ -z \"$string\" ]; then\n\
    \    echo \"$words\"\n  else\n    echo \"$string is not empty so $words is returned.\"\
    \n  fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate\
    \ \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\"\
    \ \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n\
    \    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\"\
    \ \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local word\n  local count=1\n  local count1=1\n  local count2=1\n  local\
    \ count3=1\n  local count4=1\n  local count5=1\n  local count6=1\n  local count7=1\n\
    \  local count8=1\n  local count9=1\n  local count10=1\n  local count11=1\n  local\
    \ count12=1\n  local count13=1\n  local count14=1\n  local count15=1\n  local\
    \ count16=1\n  local count17=1\n  local count18=1\n  local count19=1\n  local\
    \ count20=1\n  local count21=1\n  local count22=1\n  local count23=1\n  local\
    \ count24=1\n  local count25=1\n  local count26=1\n  local count27=1\n  local\
    \ count28=1\n  local count29=1\n  local count30=1\n  local count31=1\n  local\
    \ count32=1\n  local count33=1\n  local count34=1\n  local count35=1\n  local\
    \ count36=1\n  local count37=1\n  local count38=1\n  local count39=1\n  local\
    \ count40=1\n  local count41=1\n  local count42=1\n  local count43=1\n  local\
    \ count44=1\n  local count45=1\n  local count46=1\n  local count47=1\n  local\
    \ count48=1\n  local count49=1\n  local count50=1\n  local count51=1\n  local\
    \ count52=1\n  local count53=1\n  local count54=1\n  local count55=1\n  local\
    \ count56=1\n  local count57=1\n  local count58=1\n  local count59=1\n  local\
    \ count60=1\n  local count61=1\n  local count62=1\n  local count63=1\n  local\
    \ count64=1\n  local count65=1\n  local count66=1\n  local count67=1\n  local\
    \ count68=1\n  local count69=1\n  local count70=1\n  local count71=1\n  local\
    \ count72=1\n  local count73=1\n  local count74=1\n  local count75=1\n  local\
    \ count76=1\n  local count77=1\n  local count78=1\n  local count79=1\n  local\
    \ count80=1\n  local count81=1\n  local count82=1\n  local count83=1\n  local\
    \ count84=1\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=\"$1\"\n  local num=\"$2\"\n  local result=()\n  local index=0\n\
    \  local prev=''\n\n  string=${string//[[:space:]]/}\n  \n  while [ \"$index\"\
    \ -lt \"$string\" ]\n  do\n    if [ ${string: $index : 1} == \"$prev\" ]\n   \
    \ then\n      result+=( \"${string: $index : $num}\" )\n      index=$(( $index\
    \ + num + 1 ))\n      prev=${string: $index : 1}\n      index=$(( $index + 1 ))\n\
    \    else\n      result+=( \"${string: $index : 1}\" )\n      index=$(( $index\
    \ + 1 ))\n      prev=${string: $index : 1}\n    fi\n  done\n  \n  result+=( \"\
    ${string: ${#string}: 1}\" )\n  result=( \"${result[@]}\" )\n  return \"${result[@]}\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphq5c9lq9.sh: line 30: [: Maryhadalittlelamb: integer expression
    expected

    /tmp/tmphq5c9lq9.sh: line 47: return: : numeric argument required

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal words=()\n\tlocal s=$1\n\tlocal n=$2\n\n\t# Split $1 into words by\
    \ a space or punctuation character\n\tIFS=$'\\n'\n\tlocal arr=($(echo $s | tr\
    \ '[:upper:]' '[:lower:]' |\n\t\tsed -e 's/ //g' -e 's/[^a-z ]//g' -e 's/ //g'\
    \ -e 's/ //g'))\n\tIFS=$' '\n\n\tfor ((i = 0; i < ${#arr[@]}; i++)); do\n\t\t\
    if [[ \"${arr[i]}\" =~ $n ]]; then\n\t\t\twords+=(${arr[i]})\n\t\tfi\n\tdone\n\
    \n\t# Return the words in list $words that match the desired number\n\techo \"\
    ${words[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local input=\"$1\"\n    local num_consonants=\"$2\"\n    local output\n\
    \n    if [[ $input == \"\" ]]; then\n        output=\n    else\n        output=($(echo\
    \ \"$input\" | egrep \"(${num_consonants})\") )\n    fi\n\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local integer=\"$2\"\n    local words\n\n  \
    \  if [[ -z \"$string\" ]]; then\n        words=()\n    elif [[ \"$integer\" -le\
    \ 1 ]]; then\n        words=($string)\n    else\n        words=()\n        while\
    \ [[ $string != \"\" ]]; do\n            if [[ $((string=${string:0:1})) -ne \"\
    a\" ]]; then\n                words+=($string)\n                string=$(echo\
    \ $string | sed -e 's/ //g')\n            else\n                break\n      \
    \      fi\n        done\n    fi\n\n    echo \"$words\"\n}\n\ncandidate() {\n \
    \   select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local str=$1\n  local len=$2\n  if [[ -z \"$str\" ]]; then\n    return\
    \ 0\n  fi\n  local words=()\n  local i=1\n  while true; do\n    local c=\"${str:$i:1}\"\
    \n    if [ \"$c\" == \"a\" -o \"$c\" == \"e\" -o \"$c\" == \"i\" -o \"$c\" ==\
    \ \"o\" -o \"$c\" == \"u\" ]; then\n      i=$((i+1))\n      continue\n    elif\
    \ [ \"$c\" == \"s\" -o \"$c\" == \"t\" -o \"$c\" == \"h\" -o \"$c\" == \"a\" -o\
    \ \"$c\" == \"d\" ]; then\n      break\n    elif [ \"$c\" == \"n\" ]; then\n \
    \     words=( \"${words[@]}\" \"$i\")\n      i=$((i+1))\n      continue\n    fi\n\
    \    words=( \"${words[@]}\" \"$c\")\n    i=$((i+1))\n  done\n  local res=()\n\
    \  local j=1\n  for word in \"${words[@]}\"; do\n    local c=\"${word:$j:1}\"\n\
    \    if [ \"$c\" == \"a\" -o \"$c\" == \"e\" -o \"$c\" == \"i\" -o \"$c\" == \"\
    o\" -o \"$c\" == \"u\" ]; then\n      j=$((j+1))\n      continue\n    elif [ \"\
    $c\" == \"s\" -o \"$c\" == \"t\" -o \"$c\" == \"h\" -o \"$c\" == \"a\" -o \"$c\"\
    \ == \"d\" ]; then\n      break\n    elif [ \"$c\" == \"n\" ]; then\n      res=(\
    \ \"${res[@]}\" \"$word\")\n      j=$((j+1))\n      continue\n    fi\n    res=(\
    \ \"${res[@]}\" \"$word\")\n    j=$((j+1))\n  done\n  echo \"${res[@]}\"\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal i words i length words\n\tlocal s n c\n\t\n\ts=''$1'\n\tn=$2\n\t\
    length=${#s};\n\t\n\twords=(${#s[@]});\n\t\n\tfor(( i=0; i<words; i++ )); do\n\
    \t\tc=$(echo $i | bc);\n\t\tif(( $c >= $n )); then\n\t\t\twords[i]=${s:$i:$length}\n\
    \t\tfi\n\tdone\n\t\n\treturn\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") =\
    \ \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3f147ew1.sh: line 25: unexpected EOF while looking for matching
    `''''

    /tmp/tmp3f147ew1.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # Write your code here\n    s=\"$1\"\n    n=\"$2\"\n    if [ ${#s} -eq\
    \ 0 ]; then\n        echo \"[]\"\n        return 0\n    fi\n    words=( ${s//[!\"\
    #$%&'()*+,\\-./:;<=>?@\\[\\]^_`{|}~]/ } )\n    words_count=( ${#words[@]} )\n\
    \    word_count=0\n    words_index=0\n    words_length=0\n    while [ ${words_length}\
    \ -le ${n} ]; do\n        if [ ${words_count} -eq ${words_index} ]; then\n   \
    \         words[${words_index}]=\\${words[${words_index}+1]}\n            words_index=$((${words_index}+1))\n\
    \            words[${words_index}]=\\${words[${words_index}-1]}\n            words_index=$((${words_index}-1))\n\
    \            words_count=$((${words_count}-1))\n        fi\n        words_length=$((${words_length}+1))\n\
    \    done\n    words[${words_count}]=\\${words[${words_count}-1]}\n    words=(\
    \ \"${words[*]}\" )\n    echo \"${words[*]}\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpungssbmo.sh: line 29: unexpected EOF while looking for matching
    ``''

    /tmp/tmpungssbmo.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    # YOUR CODE HERE\n    local a\n    a=()\n\
    \    for ((i=0;i<${#s};i++))\n    do\n        \n        for ((j=0;j<${#s};j++))\n\
    \        do\n            \n            if [[ \"${s:$i:1}\" = \"${s:$j:1}\" ]]\n\
    \            then\n                a=$(a+(\"${s:$i:1}\"))\n            fi\n  \
    \          if [[ \"${s:$i:1}\" = \"${s:$j:1}\" ]]\n            then\n        \
    \        a=$(a+(\"${s:$j:1}\"))\n            fi\n            if [[ \"${s:$i:1}\"\
    \ = \"${s:$j:1}\" ]]\n            then\n                a=$(a+(\"${s:$j:1}\"))\n\
    \            fi\n            if [[ \"${s:$i:1}\" = \"${s:$j:1}\" ]]\n        \
    \    then\n                a=$(a+(\"${s:$j:1}\"))\n            fi\n          \
    \  if [[ \"${s:$i:1}\" = \"${s:$j:1}\" ]]\n            then\n                a=$(a+(\"\
    ${s:$j:1}\"))\n            fi\n            if [[ \"${s:$i:1}\" = \"${s:$j:1}\"\
    \ ]]\n            then\n                a=$(a+(\"${s:$j:1}\"))\n            fi\n\
    \            if [[ \"${s:$i:1}\" = \"${s:$j:1}\" ]]\n            then\n      \
    \          a=$(a+(\"${s:$j:1}\"))\n            fi\n            if [[ \"${s:$i:1}\"\
    \ = \"${s:$j:1}\" ]]\n            then\n                a=$(a+(\"${s:$j:1}\"))\n\
    \            fi\n            if [[ \"${s:$i:1}\" = \"${s:$j:1}\" ]]\n        \
    \    then\n                a=$(a+(\"${s:$j:1}\"))\n            fi\n          \
    \  if [[ \"${s:$i:1}\" = \"${s:$j:1}\" ]]\n            then\n                a=$(a+(\"\
    ${s:$j:1}\"))\n            fi\n            if [[ \"${s:$i:1}\" = \"${s:$j:1}\"\
    \ ]]\n            then\n                a=$(a+(\"${s:$j:1}\"))\n            fi\n\
    \            if [[ \"${s:$i:1}\" = \"${s:$j:1}\" ]]\n            then\n      \
    \          a=$(a+(\"${s:$j:1}\"))\n            fi\n            if [[ \"${s:$i:1}\"\
    \ = \"${s:$j:1}\" ]]\n            \n}\n\ncandidate() {\n    select_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"\
    4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"\
    Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n \
    \   [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"\
    Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5_9ddsqa.sh: line 83: syntax error near unexpected token `}''

    /tmp/tmp5_9ddsqa.sh: line 83: `}''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s\n    local n\n    # $1 is a string\n    # $2 is an integer\n\
    \    s=\"${1}\"\n    n=\"${2}\"\n    if [[ $n -eq 0 || $n -gt ${#s} ]]; then\n\
    \        echo \"$1 must be a string greater than 0 and less than the length of\
    \ $2\"\n        exit 1\n    fi\n\n    local i\n    local output\n    # loop through\
    \ all characters in the string\n    for (( i=1; i<${#s}; i++ )); do\n        #\
    \ if this is the first character in s\n        if [[ $i -eq 1 ]]; then\n     \
    \       local first_char=$(echo $s | awk -F'[[:space:]]' '{print $1}')\n     \
    \       # if this is the first character or if $n equals the number of characters\n\
    \            if [[ \"$i\" -eq 1 ] || [ \"$i\" -eq \"${#s}\" ]]; then\n       \
    \         output=\"$first_char\"\n            elif [[ \"$first_char\" != \"$s\"\
    \ ]]; then\n                output=\"$first_char$s\"\n            else\n     \
    \           output=$s\n            fi\n        else\n            local first_char=$(echo\
    \ $s | awk -F'[[:space:]]' '{print $i}')\n            local second_char=$(echo\
    \ $s | awk -F'[[:space:]]' '{print $i+1}')\n            # if the current character\
    \ is the same as the first character\n            if [[ \"$first_char\" == \"\
    $second_char\" ]]; then\n                local third_char=$(echo $s | awk -F'[[:space:]]'\
    \ '{print $i+2}')\n                # if the third character is the same as the\
    \ second character\n                if [[ \"$third_char\" == \"$second_char\"\
    \ ]]; then\n                    local fourth_char=$(echo $s | awk -F'[[:space:]]'\
    \ '{print $i+3}')\n                    if [[ \"$fourth_char\" == \"$second_char\"\
    \ ]]; then\n                        local fifth_char=$(echo $s | awk -F'[[:space:]]'\
    \ '{print $i+4}')\n                        if [[ \"$fifth_char\" == \"$second_char\"\
    \ ]]; then\n                            local sixth_char=$(echo $s | awk -F'[[:space:]]'\
    \ '{print $i+5}')\n                            output=\"$first_char$second_char$third_char$fourth_char$fifth_char$sixth_char\"\
    \n                        fi\n                    fi\n                fi\n   \
    \         fi\n        fi\n    done\n\n    # return a list of all words\n    echo\
    \ $output\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjp2oqe8x.sh: line 41: syntax error in conditional expression

    /tmp/tmpjp2oqe8x.sh: line 41: syntax error near `]''

    /tmp/tmpjp2oqe8x.sh: line 41: `            if [[ "$i" -eq 1 ] || [ "$i" -eq "${#s}"
    ]]; then''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=\"$1\"\n    local n=\"$2\"\n    local words=()\n    if [[ \"\
    $s\" == \"\" ]]; then\n        echo \"[]\"\n    else\n        local c\n      \
    \  while read -r c; do\n            (( ${#c} >= $n )) && printf \"%s\" \"$c\"\
    \ && pushd \"${PWD}/$s\" > /dev/null 2>&1 && words=\"${words} $c\"\n        done\n\
    \        printf \"\\n\"\n        [[ \"${#words}\" == 0 ]] && words=\"\"\n    \
    \    echo \"${words}\"\n    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=9 encoding='utf-8'>
  timestamp: 1660059490
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string length words\n    string=$1\n    length=${2:-1}\n    words=(\
    \ $(echo -e \"${string} | sed 's/ /\\n/g'\" | grep \"${length}consonants\" | tr\
    \ -d '\\n' ) )\n    if [ ${#words} -eq 0 ]; then\n        echo \"$string\"\n \
    \   else\n        echo \"${words[@]}\"\n    fi\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal input=\"$1\"\n\tlocal count=\"$2\"\n\n\tif [ \"$input\" == \"\" ];\
    \ then\n\t\treturn \"\"\n\tfi\n\n\tlocal words=$(grep \"^${count}\\$\" <<< \"\
    $input\")\n\tlocal output=\"\"\n\tfor word in $words; do\n\t\toutput+=\"\\\"${word}\\\
    \" \";\n\tdone\n\n\techo ${output#\\\"}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  # +++your code here+++\n  string=$1\n  num=${2}\n\n  # Return empty list\
    \ if an empty string is provided\n  if [ -z \"$string\" ]; then\n    \n    echo\
    \ \"[]\"\n    \n  else # Non-empty string\n    # Split string into list by spaces\n\
    \    words=$(echo $string | awk '{print tolower($0)}')\n    \n    # Initialize\
    \ array to hold words\n    array=()\n    \n    # Loop through words in string\n\
    \    for word in ${words[*]}; do\n      \n      # Skip words that are smaller\
    \ than num\n      if [ ${#word} -le $num ]; then\n        \n        # Append word\
    \ to array\n        array+=(\"$word\")\n        \n      else # Words longer than\
    \ num\n        \n        # Remove word from array\n        unset ${array[$num]}\n\
    \      fi\n    done\n    \n    # Join array elements with spaces, lower case everything\n\
    \    words=$(printf \"%s\\n\" \"${array[@]}\" | awk '{print tolower($0)}')\n \
    \   \n    echo \"$words\"\n  fi\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal string=\"$1\"\n\tlocal n=\"$2\"\n\n\t# Empty string case\n\t[[ \"\
    $string\" =~ ^$  ]] || return 1\n\t\n\t# Single character or no length case\n\t\
    [[ \"$n\" =~ ^[0-9]+$ ]] || return 1\n\n\tlocal word\n\tlocal i=0\n\tlocal result\n\
    \n\tfor word in ${string//[!a-zA-Z ]/ }; do\n\t\tif [ \"$i\" -lt \"$n\" ]; then\n\
    \t\t\tresult=\"$result$word\"\n\t\t\ti=$((i+1))\n\t\tfi\n\tdone\n\n\treturn \"\
    $result\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local input_string=$1\n    local count=$2\n    local words word\n   \
    \ words=()\n    while read -r word; do\n        ((count--))\n        echo \"$word\"\
    \ | grep -Fxq \"$input_string\"\n    done < <(grep -Ev \"[^a-zA-Z0-9 ]\" <<< \"\
    $input_string\")\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=\"$1\"\n    local n=\"$2\"\n    \n    # Check if n is greater\
    \ than length of string\n    if [ \"$n\" -gt \"${#str}\" ]\n    then\n       \
    \ echo \"ERROR: n must be less than or equal to the length of string $str\" >&2\n\
    \        return 1\n    fi\n    \n    # Make an array containing string\n    local\
    \ arr=()\n    local i\n    for ((i = 0; i < ${#str}; i++)); do\n        arr+=(${str::${i}${n}:${#str}})\n\
    \    done\n    \n    # Check if there are enough words\n    if [ ${#arr[@]} -le\
    \ \"$n\" ]\n    then\n        echo \"ERROR: not enough words to fill the array\
    \ arr\"\n        return 1\n    fi\n\n    # Output the desired list\n    echo \"\
    ${arr[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprpnek2il.sh: line 36: str: 04:22: syntax error in expression (error
    token is ":22")

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s n\n    read -r -a arr < <(echo \"${1}\")\n    read -r -a len\
    \ < <(echo \"${2}\")\n    local i j\n    local res\n    for ((i = 0; i < ${len[@]};\
    \ i++)); do\n        for ((j = 0; j < ${#arr[@]}; j++)); do\n            if [[\
    \ \"${arr[j]}\" == \"${arr[i]}\" ]]; then\n                if [[ ${#arr[@]} -gt\
    \ ${j} ]]; then\n                    res=\"${res} ${arr[@]:$j:1}\"\n         \
    \       fi\n            fi\n        done\n    done\n    echo \"${res}\"\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal string=\"$1\"\n\tlocal number=\"$2\"\n\tlocal result\n\t\n\tresult=\"\
    $(select_words_helper \"$string\" \"$number\" \"\")\"\n\t\n\tif [ -z \"$result\"\
    \ ] ; then\n\t\techo \"$0: Empty input string\"\n\telse\n\t\techo \"$result\"\n\
    \tfi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate\
    \ \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\"\
    \ \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n\
    \    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\"\
    \ \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmh_hseld.sh: line 26: select_words_helper: command not found

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  [[ -z \"$1\" ]] && echo \"No strings given\" && exit 1\n  [[ -z \"$2\"\
    \ ]] && echo \"No integer given\" && exit 1\n\n  local str=\"$1\"\n  local num=\"\
    $2\"\n\n  # Return empty list if there are no words in the string $str\n  # The\
    \ empty string is a valid word in the string and should \n  # be included in the\
    \ returned list.\n  [[ -z \"$str\" ]] && return 0\n\n  local i=0\n  local words=()\n\
    \  local word\n  while [[ $i -lt ${#str} ]]; do\n    word=\"$( echo \"${str}\"\
    \ | sed -n \"${i}p\")\"\n    [[ \"$word\" =~ ^[a-zA-Z]+ ]] && words+=(\"$word\"\
    )\n    ((i++))\n  done\n\n  # If there are $num consonants in $str, the return\
    \ list should \n  # contain exactly $num words in the order they appear in the\
    \ string.\n  # If there are more consonants then $num, the last words should \n\
    \  # appear at the end\n  [[ ${#words[@]} -eq \"$num\" ]] && return \"${words[@]}\"\
    \n  (( \"${#words[@]}\" > \"$num\" )) && return \"${words[@]:0:$num}\"\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 2: invalid usage of line address 0

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=\"$1\"\n  local n=\"$2\"\n  if [ $n -gt $string ]\n  then\n\
    \    echo \"Error n must be less than string length\"\n    return\n  fi\n  local\
    \ result=''\n  while [ \"$n\" -gt 0 ]\n  do\n    local string=\"$string\" \n \
    \   local i=0\n    while [[ i -lt $n ]]\n    do\n      string=\"$string\" \n \
    \     local consonant=\"${string::${i}:1}\"\n      if [ \"$consonant\" == \"a\"\
    \ -o \"$consonant\" == \"e\" -o \"$consonant\" == \"i\" -o \"$consonant\" == \"\
    o\" -o \"$consonant\" == \"u\" ]\n      then\n        result+=\"\\\"$consonant\\\
    \"\"\n        (( i++ ))\n      else\n        if [ \"$consonant\" == \" \" ]\n\
    \        then\n          result+=\"\\\"$consonant\\\" \" \n        else\n    \
    \      result+=\"\\\"$consonant\\\" \" \n        fi\n      fi\n    done\n    string=\"\
    $string\" \n    (( n-- ))\n  done\n  result+=$result\n  result+=\" \"\n  echo\
    \ $result\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa9lw52vw.sh: line 24: [: Mary: integer expression expected

    /tmp/tmpa9lw52vw.sh: line 37: string: 0:1: syntax error in expression (error token
    is ":1")

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local list\n    list=$( echo \"\
    $string\" | grep -E \"(^.{0,$n}$)|(^.{$n,}$)|(^.{0,}$)\" )\n    echo \"$list\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=$1\n  local number_of=$2\n  local words_list\n  \n  words_list=()\n\
    \  \n  if [ -z \"$string\" ]; then\n    echo \"[ERROR] no string provided\"\n\
    \    exit 1\n  fi\n  \n  for word in $(echo $string | tr \" \" \"\\n\" | tr -d\
    \ \"\\n\") \n  do\n    if [[ $(echo \"$word\" | wc -c) == $number_of ]]; then\n\
    \      words_list+=(\"$word\")\n    fi\n  done\n  \n  echo \"${words_list[@]}\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  # Fill in this function\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq0pt9g5h.sh: line 23: syntax error near unexpected token `}''

    /tmp/tmpq0pt9g5h.sh: line 23: `}''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n        local string=\"$1\"\n        local integer=\"$2\"\n        local\
    \ list=\"\"\n        words=$(echo \"$string\" | tr ' ' '\\n')\n        for word\
    \ in $words\n        do\n                list+=$word\n        done\n        echo\
    \ \"$list\" | grep -w \"${integer}\"\n}\n\ncandidate() {\n    select_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  # Convert params to int\n  local num_consonants=$1\n  local num_words=$2\n\
    \n  declare -a select_words\n  local words=$3\n  local counter=0\n  local max_counter=0\n\
    \  local num_selected_words=0\n  local word\n\n  # Return empty array if there\
    \ are no consonants\n  case \"$num_consonants\" in\n    [-z])\n      echo \"select_words:\
    \ $0: empty string passed\" >&2\n      ;;\n    *)\n      echo \"select_words:\
    \ $0: num_consonants not an integer\" >&2\n      exit 1\n      ;;\n  esac\n\n\
    \  # Convert string to lowercase\n  local string=\"$words\" \n  local i\n  for\
    \ ((i=1; i<=${#string}; i++))\n  do\n    local letter=${string:$i:1}\n    local\
    \ consonant_count=0\n    local consonant_letter\n    for ((j=1; j<=3; j++))\n\
    \    do\n      consonant_letter=${letter:$j:1}\n      case \"$consonant_letter\"\
    \ in\n        [a-c]|\\[b-d]|\\[e-f])\n          consonant_count=$((${consonant_count}+1))\n\
    \          ;;\n        [g-j]|\\[k-l]|\\[m-n])\n          consonant_count=$((${consonant_count}+2))\n\
    \          ;;\n        *)\n          echo \"select_words: $0: consonant_letter=$consonant_letter\
    \ not supported\" >&2\n          exit 1\n          ;;\n      esac\n    done\n\
    \    local consonant_count\n    if [ \"$consonant_count\" -eq \"$num_consonants\"\
    \ ]\n    then\n      select_words[$counter]=\"$words\"\n      ((counter+=1))\n\
    \      if [ \"$counter\" -gt \"$max_counter\" ]\n      then\n        ((max_counter+=1))\n\
    \      fi\n      num_selected_words=$((num_selected_words+1))\n    fi\n  done\n\
    \n  echo \"select_words: $0: num_words=$num_words num_consonants=$num_consonants\
    \ results=\"${select_words[*]}\" >&2\n\n  if [ \"$num_selected_words\" -eq \"\
    $num_words\" ]\n  then\n    return 0\n  else\n    echo \"select_words: $0: num_words=$num_words\
    \ num_consonants=$num_consonants num_selected_words=$num_selected_words words\
    \ passed\" >&2\n    return 1\n  fi\n}\n\ncandidate() {\n    select_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"\
    4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"\
    Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n \
    \   [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"\
    Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxmfqmavy.sh: line 104: unexpected EOF while looking for matching
    `"''

    /tmp/tmpxmfqmavy.sh: line 108: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local s=$1\n  local n=$2\n  local words=$3\n\n  echo $words\n  if [[ $s\
    \ =~ \"[a-z\\s]*$n\" ]]\n    then\n    words=$(echo $s | sed -r \"s/^([a-z\\s]*)$n([a-z\\\
    s]*)/\\1/g\")\n    echo $words\n  else\n    words=$(echo $s | sed -r \"s/^([a-z\\\
    s]*)$n([a-z\\s]*)/\\1/g\" | sed -r \"s/^([a-z\\s]*)$n([a-z\\s]*)/\\1/g\")\n  fi\n\
    \  echo $words\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local s=$1\n  local n=$2\n  if [ -z $n ]; then\n    echo \"Empty string\"\
    \n    return\n  fi\n  local c\n  local word\n  local word_list\n  local word_count\n\
    \  local result\n  word_list=\"\"\n  word_count=0\n  for c in $s\n  do\n    if\
    \ [[ $c != [a-zA-Z ]]]; then\n      word_list=\"${word_list}${c}\"\n    fi\n \
    \ done\n  word_list=\"${word_list//$'\\n'/''}\"\n  word_list=$(echo \"$word_list\"\
    \ | tr ' ' '\\n' | sort | uniq -c | sort -n)\n  word_count=${#word_list[@]}\n\
    \  if [ $word_count -eq $n ]; then\n    for word in ${word_list[@]}\n    do\n\
    \      if [ $n -eq $word_count ]; then\n        result=$word\n        break\n\
    \      fi\n    done\n  fi\n  echo $result\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpefav4bw9.sh: line 37: syntax error in conditional expression

    /tmp/tmpefav4bw9.sh: line 37: syntax error near `;''

    /tmp/tmpefav4bw9.sh: line 37: `    if [[ $c != [a-zA-Z ]]]; then''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local count=\"$2\"\n    local list\n\n    if\
    \ [[ $count -gt $((${#string})) ]]; then\n        echo \"ERROR: invalid count\
    \ value\"\n        exit 1\n    fi\n    \n    string=${string/[[:space:]]/}\n \
    \   list=\"\"\n\n    for word in $string; do\n        [[ $word =~ [^aeiou] ]]\
    \ || continue\n        list=\"$list $word\"\n    done\n\n    echo \"${list%?}\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=\"$1\"\n  local length=\"$2\"\n  local result=\"\"\n  local\
    \ count=0\n  local w\n  local x\n\n  if [[ -z \"$string\" ]]; then\n    return\
    \ \"\"\n  fi\n\n  for w in $string; do\n    x=\"${w:0:$length}\"\n    if [ \"\
    $x\" == $w ]; then\n      result=\"$result$w\"\n      ((count++))\n    fi\n  done\n\
    \  if [ \"$count\" -eq \"$length\" ]; then\n    echo \"$result\"\n  else\n   \
    \ return \"\"\n  fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"${1}\"\n    local n=\"${2}\"\n    local output\n    output=$(IFS=\"\
    .\"; set -- $string; echo \"$@\")\n    local count\n    count=$((${#output[@]}-1))\n\
    \    while test $count -ge $n; do\n        local value\n        value=$(echo $output\
    \ | sed \"1,$((count-1))d\" \n                | sed \"s/\\\"//g\" | sed \"s/$/\
    \ /g\")\n        echo $value\n        count=$((${#value[@]}-1))\n    done\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local s=$1\n  local n=$2\n  \n  local list_words=()\n  \n  for (( i=1;\
    \ i<=$(( ${#s} -1 )); i++ )); do\n    \n    local word=${s:$i:1}\n    \n    if\
    \ (( ${#word} < $n )) ; then\n      list_words+=($word)\n    fi\n    \n  done\n\
    \  \n  echo $list_words\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal STRING=$1\n\tlocal COUNT=$2\n\techo \"$STRING\" | sed -E 's/.([aeiou])/\\\
    1/g' | tr -s \" \" \"\\n\" | grep -c \"$COUNT\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=()\n    local string=$1\n    local count=${2:-1}\n    if\
    \ [[ -z $string ]]; then\n        return 0\n    fi\n    for word in $string; do\n\
    \        if [[ $count -lt 0 ]]; then\n            words[$(( ${#words[*]} + 1 ))]=${word}\n\
    \        elif [[ ${#words[*]} -eq $count ]]; then\n            words[$(( ${#words[*]}\
    \ - 1 ))]=${word}\n        fi\n    done\n    echo \"${words[*]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  # Your code here\n  local s=$1\n  local n=$2\n  local words=\"\"\n  local\
    \ count=0\n  local character=\"[[:alnum:]]\"\n  local pattern=\"[[:<:]]\"\n  local\
    \ pattern2=\"[[:>:]]\"\n\n  local w\n  local i\n  local j\n\n  for w in $(echo\
    \ $s | grep -E -o \"$character$pattern$character\" | sort | uniq); do\n    count=$((count+1))\n\
    \    if [[ $count -eq $n ]]; then\n      words=\"$words$w\"\n    fi\n  done\n\n\
    \  echo \"$words\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: Invalid character class name

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal s=$1\n\tlocal n=$2\n\tlocal w\n\tw=$(select_word $s $n)\n\techo ${w}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpc7qncm88.sh: line 25: select_word: command not found

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  echo \"$1\" | grep -e \"[[:alpha:]]\\{2\\}\"  | sed -E \"s/([[:alpha:]]{2})//g\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=\"$1\"\n    local n=\"$2\"\n    \n    local consonants=$(echo\
    \ \"$s\" | tr \"[A-Za-z]\" \"[\\\"'&]\")\n    local words=\"\"\n    local word=''\n\
    \n    for w in $consonants ; do\n        if [[ $n -eq 1 ]]; then\n           \
    \ word+=$w\n        else\n            words=$word$w\n        fi\n    done\n\n\
    \    echo \"$words\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=\"$1\"\n  local n=\"$2\"\n  local str\n  local i\n  local\
    \ words\n  words=()\n  str=\"${string// /$'\\n'}\"\n  if [ \"$str\" != \"\" ];\
    \ then\n    for ((i=1; i<=n; i++))\n    do\n      if [[ ${#str} -eq 0 ]]; then\n\
    \        break;\n      fi\n      words=\"${words} ${str:0:1}\"\n      str=\"${str:1:1}\"\
    \n    done\n  fi\n  echo -n \"${words}\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local arr=$3\n\n    arr=( $(echo $arr\
    \ | sed \"s/[\\[\\]]/\\\\\\&/g\") )\n    local arr2=( $(echo $arr | sed \"s/[\\\
    [\\]]/\\\\\\&/g\") )\n    local words=( $(echo $arr | sed \"s/\\<$s\\>//g\") )\n\
    \n    if [[ $(echo \"${arr2[@]}\" | wc -c) -eq 0 ]]; then\n        return $words\n\
    \    fi\n\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n\
    \n    while [ $i -lt $len ]; do\n        if [[ \"${arr2[$i]}\" == $s ]]; then\n\
    \            k=$((k+1))\n            local word=$(echo \"${arr2[$i]}\" | sed \"\
    s/\\<$s\\>//g\")\n            j=$((j+1))\n            arr2=( \"${arr2[@]:$((k)):$j}\"\
    \ )\n            local arr3=$(for elem in \"${arr2[@]}\"; do echo \"$elem\"; done)\n\
    \            arr2=( $(echo \"${arr3[@]}\" | sed \"s/[\\[\\]]/\\\\\\&/g\") )\n\
    \        else\n            k=$((k+1))\n            local word=$(echo \"${arr2[$i]}\"\
    \ | sed \"s/\\<$s\\>//g\")\n            arr2=( \"${arr2[@]:$((k)):$j}\" )\n  \
    \          local arr3=$(for elem in \"${arr2[@]}\"; do echo \"$elem\"; done)\n\
    \            arr2=( $(echo \"${arr3[@]}\" | sed \"s/[\\[\\]]/\\\\\\&/g\") )\n\
    \        fi\n        i=$((i+1))\n    done\n\n    if [ $(echo \"${arr2[@]}\" |\
    \ wc -c) -eq 1 ]; then\n        return $word\n    else\n        return $words\n\
    \    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s n\n    s=$1\n    n=$2\n    if [[ $s == \"\" ]]; then\n      \
    \  return \"\"\n    else\n        echo \"$s\" | grep \"[[:alpha:]]\" | grep -E\
    \ \"[[:alnum:][:space:]]${n}[[:alpha:]]\" |\n        sed -e \"s/[[:space:]]//g\"\
    \ | sort | uniq\n    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=\"$1\"\n    local n=\"$2\"\n    local output=\"\"\n    local\
    \ word\n    # loop through all words in the string \n    while [[ \"$str\" !=\
    \ \"\" ]]; do\n        # loop through each character in word\n        for word\
    \ in $str; do\n            # if the character (word) contains the n number of\
    \ consonants \n            if [[ \"${word}\" =~ [^aeiou${n}] ]]; then\n      \
    \          # append word to output\n                output+=\"\\\"$word\\\"\"\n\
    \            fi\n        done\n        # remove word from string\n        str=${str#*\"\
    ${word}\"}\n    done\n    # return empty list if string is empty\n    [[ \"$str\"\
    \ == \"\" ]] && output=\"[]\"\n    echo \"$output\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local words\n\n    if [[\
    \ \"$string\" == \"\" || \"$n\" == \"\" ]]; then\n        echo \"Empty strings\
    \ or no number for n.\" >&2\n        exit 1\n    fi\n    if [[ \"$n\" -le 1 ]];\
    \ then\n        echo \"$n must greater than 1.\" >&2\n        exit 1\n    fi\n\
    \    if [[ \"$string\" == *[^[:alpha:]]* ]]; then\n        echo \"$string only\
    \ contains letters and spaces.\" >&2\n        exit 1\n    fi\n\n    words=\"\"\
    \n    for ((i=1; i <= $n; i++)); do\n        words=\"$words $string\"\n      \
    \  string=\"${string//[^[:alpha:]]/}\"\n    done\n    echo \"$words\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'Mary had a little lamb only contains letters and spaces.

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=\"$1\"\n    local n=\"$2\"\n    # Write your code here\n  \
    \  local words\n    words=$(echo $str | sed 's/ //g' | awk -F' ' '{print $1}'\
    \ | awk -v n=${n} '{for (i=1; i<=NF; i++) { if ($i==n) {words[++c]=$i}}} END {print\
    \ words}')\n    echo \"${words[@]}\"\n}\n\ncandidate() {\n    select_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local word=$1\n    local number_consonants=$2\n    IFS=' ' read -r -a\
    \ array <<<$word\n    local words=()\n    local temp\n    local i\n    for ((i=0;\
    \ i<${#array[@]}; i++))\n    do\n        temp=$(sed 's/[^[:alpha:]]//g' <<<${array[i]})\n\
    \        if [[ \"${temp}\" == \"${array[i+1]}\" ]]\n        then\n           \
    \ words+=(${array[i]})\n        fi\n    done\n    echo \"${words[@]}\"\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local a=\"$1\"\n    local b=\"$2\"\n    \n    local s=\"\"\n    for i\
    \ in $a; do\n\t[[ $i == \" \" ]] && s=\"$s\"\n    done\n    \n    local words=\"\
    \"\n    for i in $a; do\n\t[[ \"$i\" =~ .*[bcdfghjklmnpqrstvwxyz].* ]] && echo\
    \ \"$i\" && words=\"$words$s\"\n    done\n\n    [[ -z $words ]] && return 0\n\n\
    \    local n=\"${#a}\"\n    local k=0\n    local w=\"\"\n    for ((i=0;i<$n;i++));\
    \ do\n\t[[ \"$w\" == \"\" ]] && w=\"$words[$k]\" && let \"k++\" || w=\"$words[$k]\
    \ $s\"\n    done\n    echo \"$w\"\n}\n\ncandidate() {\n    select_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"\
    4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"\
    Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n \
    \   [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"\
    Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words count\n    words=()\n   \
    \ count=0\n    for char in ${s//,/ }\n    do\n        [ $(( count++ )) -eq $n\
    \ ] && words=( \"${words[@]}\" \"$char\")\n    done\n    echo \"${words[*]}\"\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local i s w word\n  for (( i = 0; i<${#1}; i++ )); do\n    s=${1:$i:1}\n\
    \    word=`echo \"$s\" | awk '{for(i=1;i<=NF;i++) if($i==1){print $i}}'`\n   \
    \ [[ \"$word\" =~ $2 ]] && echo \"$word\"\n  done\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n\n    if [[ $n -lt 0 || $n >\
    \ ${#string} ]]; then\n        echo \"Invalid n=$n\" >&2\n        return 1\n \
    \   fi\n    local words=()\n    local word=\"\"\n    local i\n\n    for ((i=0;\
    \ i < ${#string}; i++)); do\n        local c=${string:$i:1}\n        if [[ \"\
    $c\" =~ [!a]$ ]]; then\n            word+=\"$c\"\n        elif [[ \"$n\" -gt 0\
    \ ]]; then\n            if [[ \"$c\" == [!a]$ ]]; then\n                if [[\
    \ $n == 1 ]]; then\n                    words=(\"$word\")\n                elif\
    \ [[ $n == 2 ]]; then\n                    words=(\"$word\" \"${word%?}\")\n \
    \               elif [[ $n -gt 2 ]]; then\n                    words=(\"$word\"\
    \ \"${word%?}\")\n                fi\n            else\n                if [[\
    \ $n == 1 ]]; then\n                    words=(\"$word\" \"${words+$c}\")\n  \
    \              elif [[ $n == 2 ]]; then\n                    words=(\"$word\"\
    \ \"${words+$c}\" \"${words+$c}\")\n                elif [[ $n -gt 2 ]]; then\n\
    \                    words=(\"$word\" \"${words+$c}\" \"${words+$c}\")\n     \
    \           fi\n            fi\n        fi\n    done\n    local result\n    for\
    \ i in \"${words[@]}\"; do\n        if [[ \"$i\" =~ [^a-zA-Z0-9]$ ]]; then\n \
    \           result=\"$i\"\n        fi\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'Invalid n=4

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo \"$1\"\n    echo \"$2\"\n    length=`echo \"$1\" | wc -c`\n    if\
    \ [ \"$length\" = 0 ]; then\n        echo \"no words\"\n    else\n        count_consonant=`echo\
    \ \"$1\" | tr [:upper:] [:lower:] | tr \"[:upper:]\" \"[:lower:]\" | tr -s \"\
    \ \" | wc -c`\n        for consonant in $( seq 1 $2 ); do\n            word_length=`echo\
    \ \"$1\" | wc -c`\n            word_counter=0\n            while [ $word_counter\
    \ -lt $word_length ]; do\n                echo \"$1\" | sed \"s/${consonant}//g\"\
    \n                word_counter=`expr $word_counter + 1`\n            done\n  \
    \      done\n    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local results=()\n\n    if [[ ${#s} -eq\
    \ 0 ]]; then\n        echo \"[]\"\n        return 0\n    fi\n\n    for word in\
    \ $(echo \"${s//[[:space:]]}\" | sed -n \"s/^\\(\\([^[:alpha:]]*\\)\\{0,\\}$\\\
    )\\(\\([^[:alpha:]]*\\)\\{0,\\}\\)$/\\1\\2/gp\"); do\n        (( ${#word} >= $n\
    \ )) && results+=(\"$word\")\n    done\n\n    echo \"${results[@]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\twhile [[ $2 -gt 0 ]]\n\tdo\n\t\tline=`echo $1 | sed 's/ //g'`\n\t\tn=`echo\
    \ $line | sed 's/ //g' | sed 's/ /\\n/g' | wc -c`\n\t\techo $line\n\t\tif [[ $n\
    \ -eq $2 ]]\n\t\tthen\n\t\t\techo $line\n\t\telse\n\t\t\techo $line | sed 's/\
    \ //g' | sed 's/ /\\n/g' | grep -w \"[a-zA-Z]\" | grep -v \"^[^a-zA-Z]\" | sed\
    \ 's/ //g' | sed 's/ /\\n/g' | sort | uniq -c\n\t\tfi\n\t\tshift\n\t\tshift\n\t\
    done\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate\
    \ \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\"\
    \ \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n\
    \    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\"\
    \ \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local input_string=$1\n  local n=$2\n  \n  # Split the input string into\
    \ an array of words.\n  local input_string_split=$(echo $input_string | tr \"\
    \ \" \"\\n\")\n  \n  # Loop through each word in the input string.\n  local output_list\n\
    \  for word in $input_string_split; do\n      \n      # The following line checks\
    \ to see if the number of consonants\n      # in the word is equal to the parameter\
    \ n.\n      local n_consonants=$(echo $word | wc -c )\n      \n      # If the\
    \ number of consonants in the word is equal to n\n      if [ \"$n_consonants\"\
    \ -eq \"$n\" ]; then\n        \n        # Add the word to the output list.\n \
    \       echo $word\n      \n      # The following line checks to see if the number\
    \ of consonants\n      # in the word is not equal to n.\n      else\n        \n\
    \        # The following line checks to see if the word contains\n        # more\
    \ than n consonants.\n        local word_contains_more=$(echo $word | grep -c\
    \ \"[^aeiou]\" )\n        \n        # If the word contains more than n consonants,\
    \ add this word\n        # to output_list.\n        if [ \"$word_contains_more\"\
    \ -gt \"$n\" ]; then\n          echo $word\n        fi\n      fi\n  done\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local length=$2\n    local list=()\n    \n    #\
    \ Your code goes here\n    \n    return list\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqy1s9vqd.sh: line 28: return: list: numeric argument required

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=()\n    while [[ ${#string}\
    \ -gt 0 ]]; do\n        local first=${string:0:1}\n        local rest=${string:1}\n\
    \        if [[ ( $first == [aeiou] ) && ( $rest == [aeiou] ) ]]; then\n      \
    \      words=( \"${words[@]}\" \"${first}\" )\n        elif [[ ${#rest} -eq 0\
    \ ]]; then\n            words=( \"${words[@]}\" \"${first}\" )\n        elif [[\
    \ ${#first} -eq $n ]];then\n            words=( \"${words[@]}\" \"${first}\" )\n\
    \        fi\n        string=${rest}\n    done\n    echo ${words[*]}\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local i\n    local str\n    local len\n    local count\n\n    str=$1\n\
    \    len=$2\n    count=0\n    for i in $str; do\n        ((count++))\n    done\n\
    \    if (( count > 0 )); then\n        for i in $str; do\n            if [ \"\
    $i\" == $i ]; then \n                echo \"$i\"\n            else\n         \
    \       echo \"$i\"\n            fi\n        done\n    fi\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # your code goes here\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph2prgjr2.sh: line 23: syntax error near unexpected token `}''

    /tmp/tmph2prgjr2.sh: line 23: `}''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal string=$1\n\tlocal n=$2\n\t\n\tlocal list_words=()\n\tfor word in\
    \ `echo $string | tr \" \" \"\\n\" | awk '{ print $1 }'`\n\tdo\n\t\tlist_words+=($word)\n\
    \tdone\n\t\n\tfor word in `echo $string | tr \" \" \"\\n\" | awk '{ print $2 }'`\n\
    \tdo\n\t\tlocal count=0\n\t\tlocal found_word=\n\t\tfor c in $word\n\t\tdo\n\t\
    \t\tif [ \"$c\" = \"$c\" ]\n\t\t\tthen\n\t\t\t\tcount=$(( count + 1 ))\n\t\t\t\
    else\n\t\t\t\tcount=$(( count + 0 ))\n\t\t\tfi\n\t\tdone\n\t\tif [ $count -eq\
    \ $n ]\n\t\tthen\n\t\t\tfound_word+=$word\n\t\tfi\n\tdone\n\t\n\tfor word in `echo\
    \ $string | tr \" \" \"\\n\" | awk '{ print $3 }'`\n\tdo\n\t\tlocal count=0\n\t\
    \tlocal found_word=\n\t\tfor c in $word\n\t\tdo\n\t\t\tif [ \"$c\" = \"$c\" ]\n\
    \t\t\tthen\n\t\t\t\tcount=$(( count + 1 ))\n\t\t\telse\n\t\t\t\tcount=$(( count\
    \ + 0 ))\n\t\t\tfi\n\t\tdone\n\t\tif [ $count -eq $n ]\n\t\tthen\n\t\t\tfound_word+=$word\n\
    \t\tfi\n\tdone\n\t\n\tfor word in `echo $string | tr \" \" \"\\n\" | awk '{ print\
    \ $4 }'`\n\tdo\n\t\tlocal count=0\n\t\tlocal found_word=\n\t\tfor c in $word\n\
    \t\tdo\n\t\t\tif [ \"$c\" = \"$c\" ]\n\t\t\tthen\n\t\t\t\tcount=$(( count + 1\
    \ ))\n\t\t\telse\n\t\t\t\tcount=$(( count + 0 ))\n\t\t\tfi\n\t\tdone\n\t\tif [\
    \ $count -eq $n ]\n\t\tthen\n\t\t\tfound_word+=$word\n\t\tfi\n\tdone\n\t\n\tfor\
    \ word in `echo $string | tr \" \" \"\\n\" | awk '{ print $5 }'`\n\tdo\n\t\tlocal\
    \ count=0\n\t\tlocal found_word=\n\t\tfor c in $word\n\t\tdo\n\t\t\tif [ \"$c\"\
    \ = \"$c\" ]\n\t\t\tthen\n\t\t\t\tcount=$(( count + 1 ))\n\t\t\telse\n\t\t\t\t\
    count=$(( count + 0 ))\n\t\t\tfi\n\t\tdone\n\t\tif [ $count -eq $n ]\n\t\tthen\n\
    \t\t\tfound_word+=$word\n\t\tfi\n\tdone\n\t\n\tfor word in `echo $string | tr\
    \ \" \" \"\\n\" | awk '{ print $6 }'`\n\tdo\n\t\tlocal count=0\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfbxrmeo4.sh: line 110: syntax error near unexpected token `}''

    /tmp/tmpfbxrmeo4.sh: line 110: `}''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=\"$1\"\n    local num=\"$2\"\n    local count=0\n    local\
    \ result\n\n    if [[ $str == \"\" ]]; then\n        result=()\n    else\n   \
    \     local words=()\n        local c=0\n        local i=0\n        while [[ $i\
    \ -le ${#str} ]]; do\n            local w=${str#*$i}\n            local i2=${w%%$i}\n\
    \            local i3=${w2%%$i2}\n            local i4=${w3%%$i3}\n\n        \
    \    if [[ ${w#$i} == $i2 ]]; then\n                let count=$count+1\n     \
    \       fi\n\n            if (( $count >= $num )) && [[ \"${i2}\" == \"$i3\" ]];\
    \ then\n                local i5=${w#$i}\n                if [[ \"$i5\" == \"\
    \ \" ]]; then\n                    words=(\"${words##+($i)}\" \"${words[$(( ${#words}\
    \ - 1 ))]}\")\n                else\n                    words=(\"${words##+($i)}\"\
    \ \"${words[$(( ${#words} - 1 ))]}\")\n                fi\n            fi\n\n\
    \            i=$(( $i + $i2 + $i3 + $i4 ))\n        done\n    fi\n\n    echo \"\
    ${words[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp68wjzyt5.sh: line 52: 0 + Mary had a little lamb +  +  : syntax
    error in expression (error token is "had a little lamb +  +  ")

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local number=\"$2\"\n    local word\n\n    local\
    \ result\n    result=$(echo \"${string}\" | grep -e \"[a-zA-Z][a-zA-Z][a-zA-Z]${number}\"\
    \ | tr -d '\"')\n    # echo \"${result}\"\n\n    if [ -z \"${result}\" ]; then\n\
    \        result=$(echo \"${string}\" | grep -e \"[a-zA-Z]${number}\" | tr -d '\"\
    ')\n    fi\n\n    if [ -z \"${result}\" ]; then\n        result=$(echo \"${string}\"\
    \ | grep -e \"[a-zA-Z]${number}[a-zA-Z]\" | tr -d '\"')\n    fi\n\n    if [ -z\
    \ \"${result}\" ]; then\n        result=$(echo \"${string}\" | grep -e \"[a-zA-Z]${number}[a-zA-Z][a-zA-Z]\"\
    \ | tr -d '\"')\n    fi\n\n    if [ -z \"${result}\" ]; then\n        result=$(echo\
    \ \"${string}\" | grep -e \"[a-zA-Z]${number}[a-zA-Z][a-zA-Z][a-zA-Z]\" | tr -d\
    \ '\"')\n    fi\n\n    if [ -z \"${result}\" ]; then\n        result=$(echo \"\
    ${string}\" | grep -e \"[a-zA-Z]${number}[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\" |\
    \ tr -d '\"')\n    fi\n\n    if [ -z \"${result}\" ]; then\n        result=$(echo\
    \ \"${string}\" | grep -e \"[a-zA-Z]${number}[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\"\
    \ | tr -d '\"')\n    fi\n\n    if [ -z \"${result}\" ]; then\n        result=$(echo\
    \ \"${string}\" | grep -e \"[a-zA-Z]${number}[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\"\
    \ | tr -d '\"')\n    fi\n\n    if [ -z \"${result}\" ]; then\n        result=$(echo\
    \ \"${string}\" | grep -e \"[a-zA-Z]${number}[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\"\
    \ | tr -d '\"')\n    fi\n\n    if [ -z \"${result}\" ]; then\n        result=$(echo\
    \ \"${string}\" | grep -e \"[a-zA-Z]${number}[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\"\
    \ | tr -d '\"')\n    fi\n\n    if [ -z \"${result}\" ]; then\n        result=$(echo\
    \ \"${string}\" | grep -e \"[a-zA-Z]${number}[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]\"\
    \ | tr -d '\"')\n    fi\n\n    if [ -z \"${result}\" ]; then\n        result=$(echo\
    \ \"${string}\" | grep -e \"[a-zA-Z]${number}[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqi28jjfp.sh: line 86: unexpected EOF while looking for matching
    `"''

    /tmp/tmpqi28jjfp.sh: line 90: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=$1\n  local number=$2\n  local words=()\n  if [[ ! -z \"$string\"\
    \ ]]; then\n    words=()\n    declare -i count=0\n    while [[ $count -lt $number\
    \ ]]; do\n      read -r word\n      if [[ \"$word\" == [[:space:]] ]]; then\n\
    \        words=(\"${words[@]}\" \"$word\")\n        count=$(( $count + 1 ))\n\
    \      else\n        words=(\"${words[@]}\" \"$word\")\n        count=$(( $count\
    \ + 1 ))\n      fi\n    done\n  fi\n  echo \"${words[@]}\"\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=52 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=47 encoding='utf-8'>
  timestamp: 1660059490
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local s=\"\"\n    if [[\
    \ $string == \"\" ]]; then\n        echo \"[]\"\n        return\n    fi\n    \n\
    \    IFS=$'\\n'\n    for word in $(echo \"$string\" | sed \"s/.//g\"); do\n  \
    \      echo \"\\\"$word\\\"\"\n    done\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local result\n    result=$(grep\
    \ -E '^[^']*'$n'[^']*' <<< \"$string\" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]')\n\
    \    if [ -n \"$result\" ]; then\n        echo \"$result\"\n    else\n       \
    \ echo \"\"\n    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -r s=$1\n    local -r n=$2\n    local -r arr=()\n\n    for (( i=${#s};\
    \ i<=${#s}+${#arr[*]} )); do\n        arr[i]=${s:$i:1}\n    done\n\n    if ((\
    \ ${#arr[*]} < $n )); then\n        echo \"$arr\"\n    else\n        echo \"$arr\"\
    \n    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphodxyk2d.sh: line 26: syntax error: arithmetic expression required

    /tmp/tmphodxyk2d.sh: line 26: syntax error: `(( i=${#s}; i<=${#s}+${#arr[*]} ))''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local input_string=$1\n    local number_of_consonants=$2\n    local words_in_string=$(echo\
    \ \"$input_string\" | sed \"s/ //g\" | sed \"s/'//g\" | sed \"s/'//g\" | sed \"\
    s/ //g\" | sed \"s/\\([a-zA-Z]\\)\\([a-zA-Z]\\)/\\1 \\2 /g\" | grep -Eo \"\\b\\\
    w*[$number_of_consonants]\\b\")\n    echo \"$words_in_string\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=$1\n    local consonants=$2\n    \n    if [[ -z \"$words\"\
    \ ]]; then\n        echo \"empty\"\n        return\n    fi\n    if [[ ! \"$consonants\"\
    \ =~ ^[0-9]+$ ]]; then\n        echo \"Invalid input: $2\"\n        return\n \
    \   fi\n    \n    local wordcount=$(echo \"$words\" | wc -c)\n    if [[ \"$wordcount\"\
    \ -gt $consonants ]]; then\n        echo \"Too many consonants: $wordcount\"\n\
    \        return\n    fi\n    \n    local result\n    for word in $(echo \"$words\"\
    \ | tr \" \" \"\\n\"); do\n        local count=0\n        for character in $word;\
    \ do\n            [[ \"$character\" =~ [b-z] ]] && count=$((count + 1))\n    \
    \    done\n        if [[ \"$count\" -eq \"$consonants\" ]]; then\n           \
    \ echo \"$word\"\n            return\n        fi\n    done\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local i cons arr s word\n  read -r -a arr <<< \"$1\"\n  read -r -a arr\
    \ <<< \"$2\"\n  s=\"\"\n  cons=0\n  for i in \"${arr[@]}\"; do\n    if [[ $i =~\
    \ ^[a-zA-Z]$ ]]; then\n      s+=${i}\n      cons=$((cons + 1))\n    fi\n    if\
    \ [[ $cons -gt $2 ]]; then\n      s+=${i}\n    fi\n  done\n  if [ -z \"$s\" ];\
    \ then\n    echo \"\"\n  else\n    word=$(echo \"$s\" | tr a-zA-Z ' '| tr -s '\
    \ ' '\\n')\n    echo -n \"${word}\"\n  fi\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    if [[ ${s#} != *\" \" ]] || [[ ${s#}\
    \ != *\" \" ]]; then\n        echo \"invalid input\"\n        return\n    fi\n\
    \    if [[ ${n} -eq 0 ]]; then\n        return\n    fi\n    select_words_helper\
    \ s n \"\" \"\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=\"$1\"\n    local n=\"$2\"\n    local arr=()\n    if [[ \"\
    $str\" =~ ^[a-zA-Z ]+$ ]]; then\n        # Remove trailing spaces, tabs, and newlines\
    \ from string\n        str=\"${str//[[:space:]]*$/ }\"\n        str=\"${str//[[:tab:]]*$/\
    \ }\"\n        str=\"${str//[[:newline:]]*$/ }\"\n        # Split string on whitespace\n\
    \        arr=($(echo $str | tr \" \" \"\\n\"))\n        # Remove empty elements\n\
    \        arr=($(compgen -G \"${arr[@]}\" -- ))\n        # Remove elements from\
    \ array that don't contain exactly $n consonants\n        arr=($(filter_consonants\
    \ \"$arr\" \"$n\"))\n        # Return array\n        echo \"${arr[@]}\"\n    else\n\
    \        echo \"$str\"\n    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsr2f1qwi.sh: line 25: syntax error in conditional expression

    /tmp/tmpsr2f1qwi.sh: line 25: syntax error near `]+$''

    /tmp/tmpsr2f1qwi.sh: line 25: `    if [[ "$str" =~ ^[a-zA-Z ]+$ ]]; then''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    echo $string | grep -Eo '[[:upper:]]'$number\
    \ | awk '{print $1}' | tr -s ' '\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local wordCount=$2\n    local list\n    for word\
    \ in $(echo $string | tr \" \" \"\\n\"); do\n        if [[ \"$word\" =~ [Aa][Ee][Ss][Tt][Ee][Rr]\
    \ ]]; then\n            list+=( \"$word\" )\n            (( wordCount -= 1 ))\n\
    \        fi\n    done\n    echo $list\n}\n\ncandidate() {\n    select_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local wordlist\n    local wordcount\n    local count\n    wordlist=$1\n\
    \    wordcount=$2\n    if [[ \"$wordcount\" -eq 0 ]]; then\n        echo \"[]\"\
    \n        return\n    fi\n    count=$(echo $wordlist | wc -w)\n    if [[ $count\
    \ -eq $wordcount ]]; then\n        echo \"[$(echo $wordlist | tr -d ' \\n')]\"\
    \n        return\n    fi\n    wordlist=$(echo $wordlist | tr \" \" \"\\n\" | sed\
    \ 's/^/\"/' | sed 's/$/\\/\"/' | sort -u)\n    wordlist=\"$wordlist\"\n    wordcount=$(echo\
    \ $wordcount | tr -d ' ')\n    wordcount=$(($wordcount-1))\n    for i in $(seq\
    \ 1 $wordcount); do\n        wordlist=\"$wordlist\" $(cat $wordlist | sed -n \"\
    \\$${i}p\")\n    done\n    wordlist=\"$wordlist\"\n    wordlist=$(echo $wordlist\
    \ | tr -d '\\n' | tr '\"' ' ')\n    echo \"[$(echo $wordlist | tr -d ' \\n')]\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cat: ''"a/"'': No such file or directory

    cat: ''"had/"'': No such file or directory

    cat: ''"lamb/"'': No such file or directory

    cat: ''"little/"'': No such file or directory

    cat: ''"Mary/"'': No such file or directory

    sed: -e expression #1, char 2: unknown command: `1''

    cat: ''"a/"'': No such file or directory

    cat: ''"had/"'': No such file or directory

    cat: ''"lamb/"'': No such file or directory

    cat: ''"little/"'': No such file or directory

    cat: ''"Mary/"'': No such file or directory

    sed: -e expression #1, char 2: unknown command: `2''

    cat: ''"a/"'': No such file or directory

    cat: ''"had/"'': No such file or directory

    cat: ''"lamb/"'': No such file or directory

    cat: ''"little/"'': No such file or directory

    cat: ''"Mary/"'': No such file or directory

    sed: -e expression #1, char 2: unknown command: `3''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\t[ -z \"$1\" ] && return 1\n\t[ \"$2\" -eq 0 ] && return 1\n\tlocal str=\"\
    $1\"\n\tlocal len=\"$2\"\n\tlocal word\n\n\t# split the string into a list\n\t\
    local words=( $(echo \"$str\" | tr A-Z a-z) )\n\n\t# get all of the words whose\
    \ length is $len\n\twhile read -r word; do\n\t\tif [ ${#word} -eq \"$len\" ];\
    \ then\n\t\t\techo \"$word\"\n\t\tfi\n\tdone < <( echo \"${words[@]}\" )\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=\"$1\"\n  local number=\"$2\"\n  local words=()\n  local i=0\
    \ j=0\n  while (( j < $(echo \"${#string}\" | wc -c) ))\n  do\n    words[$((i+=1))]=\"\
    ${string::$j:1}\"\n    (( j++ ))\n  done\n  if [ \"${#string}\" -eq 0 ] ; then\n\
    \    echo \"\"\n  else\n    for (( j=0; j<$((number+1)) ; j++ ))\n    do\n   \
    \   if [[ \"${words[$j]}\" =~ ^.*[^[:alpha:]]+[[:alpha:]]$(( number-1 )) ]] ;\
    \ then\n        echo \"${words[$j]}\"\n      fi\n    done\n  fi\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvo060arc.sh: line 28: string: 0:1: syntax error in expression (error
    token is ":1")

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n        local string=$1\n        local word_count=$2\n        if [[ $string\
    \ == \"\" ]]; then\n            echo \"[]\"\n        fi\n        local word_array=()\n\
    \        local count=0\n        for word in $string; do\n            if [[ -z\
    \ \"$word\" ]]; then\n                continue\n            fi\n            local\
    \ current_word=${word:0:1}\n            local count=1\n            local count_flag=0\n\
    \            for char in ${word:1:${word_count}}; do\n                if [[ ${char}\
    \ == $current_word ]]; then\n                    count_flag=1\n              \
    \      break\n                fi\n            done\n            if [[ $count_flag\
    \ == 0 ]]; then\n                word_array+=(${word:1:${word_count}})\n     \
    \       fi\n        done\n        echo ${word_array[@]}\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal string_=\"$1\"\n\tlocal number_=\"$2\"\n\techo \"$string_\" | grep\
    \ -v \"^$\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string_var=$1\n  local int_var=$2\n  local string_in_var=\"\"\n \
    \ local string_in_var_length=0\n  local i=0;\n  local list_var=\"\"\n  local list_length=0;\n\
    \  while [ \"$string_in_var\" != \"\" ]; do\n    string_in_var=${string_in_var#*\"\
    $string_in_var\"}\n    string_in_var_length=${#string_in_var}\n    if [ \"$int_var\"\
    \ -lt \"$string_in_var_length\" ]; then\n      string_in_var=\"\"\n    else\n\
    \      string_in_var=\"$(echo \"$string_in_var\" | awk \"{ print substr(\\$0,\
    \ \\$1, \\$2 \\* length(\\$0)) }\")\"\n      list_var=\"${list_var}\\\"$string_in_var\\\
    \"\n      list_length=${list_length}${#string_in_var}\n    fi\n    i=$((i+1))\n\
    \  done\n  if [ \"$int_var\" -gt \"$string_in_var_length\" ]; then\n    list_var=\"\
    ${list_var}\\\"${string_in_var}\\\"\"\n    list_length=${list_length}${#string_in_var}\n\
    \  fi\n  if [ \"x$string_in_var\" = \"x\" ]; then\n    list_var=\"\"\n    list_length=0;\n\
    \  fi\n  if [ \"$list_var\" = \"x\" ]; then\n    list_var=\"\"\n    list_length=0;\n\
    \  fi\n  echo \"$list_var\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgjh5h536.sh: line 68: unexpected EOF while looking for matching
    `"''

    /tmp/tmpgjh5h536.sh: line 72: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n        local i\n\n        if [ -z \"$1\" ]; then\n                echo \"\
    No string provided\"\n                return 1\n        fi\n\n        if [ \"\
    $2\" -eq 0 ]; then\n                echo \"Empty string\"\n                return\
    \ 1\n        fi\n\n        if [ \"$2\" -lt 1 ]; then\n                echo \"\
    Invalid argument to $1 $2\"\n                return 1\n        fi\n\n        if\
    \ [ \"$2\" -gt 10 ]; then\n                echo \"Too much arguments to $1 $2\"\
    \n                return 1\n        fi\n\n        local -a w\n        for w in\
    \ \"$1\"; do\n                if [[ \"$w\" =~ (^|[^aeiou])[aeiou]([^aeiou])[aeiou]([^aeiou]|$)\
    \ ]]; then\n                        echo \"'$w' contains $2 consonants\"\n   \
    \             else\n                        echo \"$w\"\n                fi\n\
    \        done\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # your code goes here\n    \n    #return a list of all the words from\
    \ the $1 string that contain exactly $2 consonants, in order \n    #these words\
    \ appear in the $1 string.\n    if [ ${#1} -eq 0 ]\n    then\n        echo \"\
    empty string\"\n        return\n    fi\n    \n    if [ ${#1} -gt ${#2} ]\n   \
    \ then\n        echo \"not enough consonants\"\n        return\n    fi\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n}\n\ncandidate() {\n  \
    \  select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little\
    \ lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local c\n    local words\n\
    \    local count\n    local word\n    \n    if [[ -n \"$string\" ]]; then\n  \
    \      words=()\n        count=$(expr \"$n\" + 1)\n        while [ $count -le\
    \ ${#string} ]; do\n            c=$(expr \"$string\" : '\\(.*\\)\\(.*\\)' $((count++)))\n\
    \            if [[ $c != *\"[^[:alpha:]]\"* ]]; then\n                if [[ $c\
    \ == *\"[a-z]\"* ]]; then\n                    word=\"${c#*[a-z]}\"\n        \
    \        elif [[ $c == *\"[A-Z]\"* ]]; then\n                    word=\"${c#*[A-Z]}\"\
    \n                elif [[ $c == *\"[[:space:]]\"* ]]; then\n                 \
    \   word=\"${c#*[[:space:]]}\"\n                elif [[ $c == *\"[^[:alpha:]]\"\
    * ]]; then\n                    word=\"${c#*[^[:alpha:]]}\"\n                else\n\
    \                    word=\"$c\"\n                fi\n                words+=($word)\n\
    \            fi\n        done\n    fi\n    \n    echo \"${words[@]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=46 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=13 encoding='utf-8'>
  timestamp: 1660059490
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local in_string=$1\n    local number=$2\n    local result=()\n    local\
    \ word_list\n    local words\n    local i j\n\n    words=($in_string)\n    word_list=()\n\
    \    for((i = 0; i <= ${#words[@]}; i++))\n    do\n       #echo \"${words[i]}\"\
    \n       #echo $i $words[i]\n       for ((j = 0; j <= ${#words[i]}; j++))\n  \
    \     do\n           if [[ ${words[i][j]} != ${words[i][j]} ]]; then\n       \
    \        #echo \"${words[i][j]}\"\n               #echo ${words[i][j]} ${words[i][j]}\
    \ ${words[i]}\n               if ((${#words[i][j]} == ${#words[i]}))\n       \
    \        then\n                   if ((${#words[i]} == ${number}))\n         \
    \          then\n                       #echo \"${words[i]}\"\n              \
    \         #echo \"${words[i]}${words[i][j]}\"\n                       result+=($words[i]${words[i][j]})\n\
    \                   elif ((${#words[i]} > ${number}))\n                   then\n\
    \                       #echo \"${words[i]}\"\n                       #echo \"\
    ${words[i]}${words[i][j]}\"\n                       result+=($words[i])\n    \
    \               elif ((${#words[i]} < ${number}))\n                   then\n \
    \                      #echo \"${words[i]}\"\n                       #echo \"\
    ${words[i]}${words[i][j]}\"\n                       result+=($words[i]${words[i][j]}\"\
    \")\n                   else\n                       #echo \"${words[i]}\"\n \
    \                      #echo \"${words[i]}${words[i][j]}${words[i][j+1]}\"\n \
    \                      result+=($words[i]${words[i][j]}\"\")\n               \
    \        #result+=(${words[i]}${words[i][j]}\"\")\n                   fi\n   \
    \            elif ((${#words[i]} > ${number}))\n               then\n        \
    \           #echo \"${words[i]}\"\n                   #echo \"${words[i]}${words[i][j]}\"\
    \n                   result+=($words[i]${words[i][j]}\"\")\n               elif\
    \ ((${#words[i]} < ${number}))\n               then\n                   #echo\
    \ \"${words[i]}\"\n                   #echo \"${words[i]}${words[i][j]}${words[i][j+1]}\"\
    \n                   result+=(${words[i]}${words[i][j]}\"\")\n               else\n\
    \                   #echo \"${words[i]}\"\n                   #echo \"${words[i]}${words[i][j]}${words[i][j+1]}${words[i][j+2]}\"\
    \n                   \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp31g9y6xi.sh: line 77: syntax error near unexpected token `}''

    /tmp/tmp31g9y6xi.sh: line 77: `}''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    # Your code here\n    \n    if [ -z \"\
    $s\" ]; then\n        echo \"[]\"\n    else\n        local array=($s)\n      \
    \  local arraylen=${#array[@]}\n        local i=0\n        local string=\"\"\n\
    \n        until [ $i -eq $arraylen ]\n        do\n            if [ \"${array[$i]}\"\
    \ == \"$n\" ]; then\n                local j=0\n                while [ $j -le\
    \ $i ]\n                do\n                    if [ $j -ne $i ] && [ ${array[$j]}\
    \ != \" \" ]; then\n                        string=\"$string ${array[$j-1]}\"\n\
    \                    else\n                        string=\"$string ${array[$j-1]}\"\
    \n                    fi\n                    j=$(($j+1))\n                done\n\
    \            fi\n            i=$(($i+1))\n        done\n        echo \"$string\"\
    \n    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=\"$1\"\n    local n=\"$2\"\n    local words=\"\"\n    local\
    \ i=0 \n    \n    for char in ${str}; do\n        local char_upper=$(echo $char\
    \ | tr [:lower:] [:upper:])\n        \n        if [ \"$n\" -eq \"$i\" ]; then\n\
    \            words=\"$words\"$char\n        elif [[ $char_upper == [aeiou]* ]];\
    \ then\n            words=\"$words$char\"\n        fi\n\n        i=$((i + 1))\n\
    \    done\n    echo \"$words\"\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # Your code goes here\n    # $1 is a string\n    # $2 is an integer\n\
    \    \n    # Split the input string\n    str=$(echo $1 | tr '[:upper:]' '[:lower:]')\n\
    \    \n    # Count the number of consonants\n    cnt=$(echo $str | tr -cd '[:upper:]'\
    \ | wc -c)\n    \n    # Iterate over all the words in the input string\n    for\
    \ str in $str; do\n        \n        # Check if the current word contains exactly\
    \ n consonants\n        if [[ \"$cnt\" -eq \"$2\" ]]; then\n            # Return\
    \ the word\n            echo $str\n        fi\n    done\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -r string=$1\n    local -r n=$2\n    if [[ -z $string ]]; then\n\
    \        echo \"empty string\"\n        return \n    fi\n    local -r first_word=\"\
    $(echo $string | cut -d'\"' -f2)\"\n    local -r rest=\"${string#\"${first_word}\"\
    }\"\n    if [[ -z $rest ]]; then\n        echo \"$first_word\"\n        return\
    \ \n    fi\n    local -r words=$(echo $rest | sed 's/'$first_word'//g')\n    echo\
    \ \"$words\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local words=\"\"\n    local\
    \ i\n    local j\n\n    if [[ ${#string} -eq 0 ]]; then\n        words+=\"[]\"\
    \n        return 0\n    fi\n\n    for (( i=1; i<=${#string}; i++ )); do\n    \
    \    for (( j=1; j<=n; j++ )); do\n            if [[ ${string:$i:1} = ${string:$i-1:1}\
    \ ]]; then\n                words=\"${words} ${string:$i-1:1}\"\n            \
    \    break\n            fi\n        done\n    done\n    echo \"${words}\"\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=$1\n    local n=${2:-4}\n    \n    if [ -z \"$str\" ]\n   \
    \ then\n        return\n    fi\n\n    local words=\"\"\n    local c=0\n    local\
    \ count=0\n\n    while [ $n -ge 1 ]\n    do\n        words=$words$c\n        ((n--))\n\
    \    done\n\n    words=$words$c\n\n    for ((i=0; i < ${#str[@]}; i++)); do\n\
    \        for ((j=0; j < ${#words[@]}; j++)); do\n            if [ \"${str[$i]}\"\
    \ == \"${words[$j]}\" ]\n            then\n                count=$((count+1))\n\
    \            fi\n        done\n    done\n\n    if [ \"$count\" == \"$n\" ]\n \
    \   then\n        echo $words\n    else\n        echo \"\"\n    fi\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    declare -i len=${#1}\n    declare -i i=0\n    declare -i num_consonants=${#2}\n\
    \    declare -i word_list\n\n    if [[ -z ${1} ]]; then\n        echo \"$1 is\
    \ empty\"\n        return -1\n    fi\n    if [[ $len == 0 ]]; then\n        echo\
    \ \"$1 is empty\"\n        return -1\n    fi\n    if [[ ${#2} -lt $2 ]]; then\n\
    \        echo \"$2 should be greater than or equal to 1\"\n        return -1\n\
    \    fi\n    while [[ $((i + 2)) < $len ]];\n    do\n        declare -i w1=${1:$((i\
    \ + 1))}\n        declare -i w2=${1:$((i + 2))}\n        declare -i w\n      \
    \  if [[ -z ${w1} ]]; then\n            echo \"$1 $((i + 1)) is empty\"\n    \
    \        return -1\n        fi\n        if [[ -z ${w2} ]]; then\n            echo\
    \ \"$1 $((i + 2)) is empty\"\n            return -1\n        fi\n        if [[\
    \ $w1 =~ ([a-zA-Z]) ]]; then\n            if [[ $w2 =~ ([a-zA-Z]) ]]; then\n \
    \               if [[ $w1 =~ ([[:space:]])* ]]; then\n                    if [[\
    \ $w2 =~ ([[:space:]])* ]]; then\n                        w=${w1}${w2}\n     \
    \                   if [[ ${#w} -eq $2 ]]; then\n                            echo\
    \ $w\n                            ((i++))\n                        else\n    \
    \                        echo \"$w is incorrect\"\n                          \
    \  return -1\n                        fi\n                    else\n         \
    \               echo \"$w1 is incorrect\"\n                        return -1\n\
    \                    fi\n                else\n                    if [[ $w2 =~\
    \ ([[:space:]])* ]]; then\n                        w=${w1}$w2\n              \
    \          if [[ ${#w} -eq $2 ]]; then\n                            echo $w\n\
    \                            ((i++))\n                        else\n         \
    \                   echo \"$w is incorrect\"\n                            return\
    \ -1\n                        fi\n                    else\n                 \
    \       echo \"$w1 is incorrect\"\n                        return -1\n       \
    \             fi\n                fi\n            else\n                echo \"\
    $w2 is incorrect\"\n                return -1\n            fi\n        fi\n  \
    \  done\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local words=\"\"\n    local\
    \ i=0\n    while [ $n -lt $n -ne 0 ]; do\n        local letter=$(echo $string\
    \ | cut -d \" \" -s | sed \"s/ /\\\\ /g\" | awk '{print $2}')\n        local consonants=(a\
    \ e i o u) \n        if [[ \"$consonants\" =~ \"$letter\" ]]; then\n         \
    \   words=\"$words $letter\"\n        fi\n        ((i++))\n    done\n    words=$(echo\
    \ \"$words\" | sed \"s/ //g\")\n    words=$(echo \"$words\" | sed \"s/^$/\\[/g\"\
    )\n    words=$(echo \"$words\" | sed \"s/$/\\]/g\")\n    echo \"$words\"\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp162y_k1q.sh: line 26: [: too many arguments

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=\"$1\"\n    local num=\"$2\"\n\n    # Your code here\n    echo\
    \ \"$str\" | tr -s ' ' | cut -d' ' -f1 | grep -Po \"($num)\\b.*\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  # +++your code here+++\n  local string=\"$1\"\n  local integer=\"$2\"\n\
    \  if [[ $string == \"\" ]]; then\n    return \n  fi\n  local output\n  local\
    \ temp_string\n  local count\n  temp_string=$(echo \"$string\" | tr ' ' '\\n'\
    \ | sort | uniq -d)\n  count=$(echo \"$temp_string\" | wc -l)\n  output=$(echo\
    \ \"$temp_string\" | sed \"s/${integer}.*/${integer}/g\")\n  echo \"$output\"\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local count=$2\n    local output\n    \n    if [[\
    \ \"$string\" == \"\" ]]; then\n        echo \"[]\"\n        return\n    fi\n\n\
    \    local pattern=\"[bcdfghjklmnpqrstvwxyz]\"$'\\000'\"${count}\"'\\000'\n  \
    \  output=$(echo \"$string\" | grep -E \"^.*${pattern}.*$\" | sed 's/\"//g' |\
    \ sed 's/.$//g')\n\n    echo \"$output\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal s n\n\ts=\"${1:-}\"\n\tn=\"${2:-}\"\n\tcase \"$n\" in\n\t\t0) return\
    \ 0;;\n\t\t1) return ${s//[^a-zA-Z ]};;\n\t\t2) return ${s//[^a-z ]};;\n\t\t3)\
    \ return ${s//[^a-z ][^a-z ]};;\n\t\t4) return ${s//[^a-z ][^a-z ][^a-z ]};;\n\
    \t\t5) return ${s//[^a-z ][^a-z ][^a-z ][^a-z ]};;\n\t\t6) return ${s//[^a-z ][^a-z\
    \ ][^a-z ][^a-z ][^a-z ]};;\n\t\t7) return ${s//[^a-z ][^a-z ][^a-z ][^a-z ][^a-z\
    \ ][^a-z ]};;\n\t\t8) return ${s//[^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z\
    \ ]};;\n\t\t9) return ${s//[^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z\
    \ ]};;\n\t\t10) return ${s//[^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z\
    \ ][^a-z ]};;\n\t\t11) return ${s//[^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z\
    \ ][^a-z ][^a-z ][^a-z ]};;\n\t\t12) return ${s//[^a-z ][^a-z ][^a-z ][^a-z ][^a-z\
    \ ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ]};;\n\t\t13) return ${s//[^a-z ][^a-z\
    \ ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ]};;\n\
    \t\t14) return ${s//[^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z ][^a-z\
    \ ][^a-z ][^\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdj5brj72.sh: line 59: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string_=\"$1\"\n    local number_=\"$2\"\n    local array=()\n\
    \    local words=()\n    local j=0\n    local i\n\n    if [[ ${#string_} == 0\
    \ ]]; then\n        return 0\n    fi\n\n    if [[ ${number_} -le ${#string_} ]];\
    \ then\n        echo ${string_}\n        return ${array[@]}\n    fi\n\n    for\
    \ (( i=${#string_}; i>0; i-- )); do\n        if [[ ${string_:i:1} == \"[\" ]];\
    \ then\n            array=(\"${array[@]}\" ${string_:i-1:1})\n            j=$((\
    \ j + 1 ))\n        fi\n        if [[ ${string_:i:1} == \"]\" ]]; then\n     \
    \       j=$(( j - 1 ))\n            array=(\"${array[@]}\" ${string_:i-1:1})\n\
    \        fi\n        if [[ ${j} == ${number_} ]]; then\n            words=(\"\
    ${words[@]}\" ${string_:i:1})\n        fi\n    done\n    echo ${words[@]}\n  \
    \  return ${array[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local s=$1\n  local n=$2\n  local wordlist\n  wordlist=($(grep -E \"[a-zA-Z]\\\
    {\"$n\"\\}[a-zA-Z]\" <<< $s))\n  if [[ ! -z \"$wordlist\" ]]; then\n      echo\
    \ \"$wordlist\"\n  else\n      echo \"[]\"\n  fi\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=${2:-1}\n    local list=\"\"\n    # Your\
    \ code here\n    echo $string\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") =\
    \ \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo \"$1\"|grep -E '[[:alpha:]]+([[:space:]]|$)' |sort -u|grep -E '^('\"\
    $2\"'|)$' >/tmp/words;\n    sort -u /tmp/words;\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n   local word=$1\n   local length=$2\n   local consonants=(\"a\"-\"z\" \"\
    A\"-\"Z\" \"0\"-\"9\")\n   local wordlist\n   wordlist=()\n   while [ \"$word\"\
    \ != \"\" ]; do\n      for i in $consonants\n      do\n         if [ \"$i\" ==\
    \ \"$word\" ]\n         then\n            wordlist=(\"$wordlist\" \"$word\")\n\
    \         fi\n      done\n      word=${word//[^a-zA-Z]}\n   done\n   echo \"$wordlist\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=27 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=21 encoding='utf-8'>
  timestamp: 1660059490
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=\"$1\"\n  local length=\"$2\"\n  \n  local words=()\n  # split\
    \ string into words\n  local -a words\n  words=( $(echo $string | sed \"s/ /\\\
    n/g\" | awk -F\"\\\"\" '{print $2}') )\n  # check if there are enough words\n\
    \  local count=0\n  for word in ${words[@]}; do\n    ((count++))\n  done\n  if\
    \ (( $count >= $length )); then\n    echo $string\n  else\n    # find out which\
    \ words are present by counting the number of occurences of each letter\n    local\
    \ count\n    local letter\n    local -a letters\n    letters=( $(echo $string\
    \ | awk '{for(i=1;i<=NF;i++) {letters[$i]++}}'))\n    \n    local count=0\n  \
    \  for letter in ${letters[@]}; do\n      # check if the letter is in the word\n\
    \      ((count++))\n      if [[ $letter != \"\" ]]; then\n        for word in\
    \ ${words[@]}; do\n          ((count++))\n          if [[ $(echo $word | grep\
    \ -c $letter) != 0 ]]; then\n            words[$count]=\"$word\"\n           \
    \ break\n          fi\n        done\n      fi\n    done\n    \n    # return if\
    \ there is no words with this number of occurences\n    if (( $count == 0 ));\
    \ then\n      echo $string\n      return\n    fi\n    \n    # return words with\
    \ this number of occurences\n    local count\n    local words\n    words=()\n\
    \    for (( count=1; count <= $count; count++ )); do\n      words[$count]=\"${words[$count-1]}\
    \ ${words[$count]}\"\n    done\n    echo $( IFS=$'\\n' echo \"${words[@]}\" )\n\
    \  fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate\
    \ \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\"\
    \ \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n\
    \    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\"\
    \ \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=$1\n  local num_consonants=$2\n  \n  local i=0 # counter\n\
    \  local word_list\n  \n  while [ $i -lt ${#string} ]; do\n    local c=\"${string:$i:1}\"\
    \ # get the consonant at this position\n    \n    # if the consonant is equal\
    \ to or greater than num_consonants then\n    if [ $c -gt $num_consonants ]; then\n\
    \      # increment i to skip the next consonant\n      (( i++ ))\n      # break\
    \ out of the loop\n      break\n    # else\n    elif [ $c -eq $num_consonants\
    \ ]; then\n      # add this consonant to the current word\n      word_list=\"\
    ${word_list:+$word_list }${string:$i:1}\"\n      # increment i to skip the next\
    \ consonant\n      (( i++ ))\n      # break out of the loop\n      break\n   \
    \ # else\n    else\n      # increment i to skip the current consonant\n      ((\
    \ i++ ))\n    fi\n  done\n  # return the list of words that match the number of\
    \ consonants\n  echo $word_list\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpc4x1q7yh.sh: line 32: [: M: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: M: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: a: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: a: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: r: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: r: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: y: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: y: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: -gt: unary operator expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: -eq: unary operator expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: h: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: h: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: a: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: a: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: d: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: d: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: -gt: unary operator expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: -eq: unary operator expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: a: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: a: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: -gt: unary operator expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: -eq: unary operator expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: l: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: l: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: i: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: i: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: t: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: t: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: t: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: t: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 32: [: l: integer expression expected

    /tmp/tmpc4x1q7yh.sh: line 38: [: l: integer expression expected

    /tmp/tmpc4x1'
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local output\n\n    output=$(python\
    \ -c \"\n        def select_words(s,n):\n            result=[]\n            if\
    \ s and n > 0:\n                for word in s.split(' '):\n                  \
    \  if len(word) > n or len(word) == 0:\n                        continue\n   \
    \                 for char in word:\n                        if char != ' ':\n\
    \                            result.append('\"'+word+'\"')\n                return\
    \ result\n            return []\n        \"$string\" \"$n\")\n    if [ -z \"$output\"\
    \ ] ; then\n        output=\"[]\"\n    fi\n    echo $output\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmp5bmi3f.sh: line 57: unexpected EOF while looking for matching
    `"''

    /tmp/tmpmp5bmi3f.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n        local string=\"$1\"\n        local n=\"$2\"\n\n        if [[ ${#string}\
    \ < 1 ]] ; then\n                return 0\n        fi\n        \n        local\
    \ result=\"\"\n        local count=1\n        for word in $(echo \"${string}\"\
    \ | grep -Ev '[^a-zA-Z ]+') ; do\n                if [[ ${#word} -eq ${n} ]] ;\
    \ then\n                        if [[ ${#result} == 0 ]] ; then\n            \
    \                    result=\"${word}\"\n                        else\n      \
    \                          result=\"${result} ${word}\"\n                    \
    \    fi\n                        count=$(( ${count} + 1 ))\n                fi\n\
    \        done\n\n        if [[ ${count} -eq 0 ]] ; then\n                return\
    \ 0\n        fi\n        \n        echo \"${result}\"\n}\n\ncandidate() {\n  \
    \  select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little\
    \ lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local _s=$1\n    local _n=$2\n\n    if [ \"$_s\" = \"\" ]; then\n   \
    \     echo \"\"\n        return\n    fi\n\n    local _list=\"\"\n\n    for word\
    \ in $(echo $_s | tr \" \" \"\\n\"); do\n        local _word=$(echo $word | tr\
    \ \" \" \"\\n\")\n        local _count=0\n\n        for char in $word; do\n  \
    \          if [ $char =~ [AEIOUYaeiouy] ]; then\n                _count=$(( _count\
    \ + 1 ))\n            fi\n        done\n\n        if [ $_n -gt $(( $_count ))\
    \ ]; then\n            _list=\"${_list} \\\"$word\\\"\"\n        fi\n    done\n\
    \n    echo ${_list}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdqop1w3g.sh: line 37: [: =~: binary operator expected

    /tmp/tmpdqop1w3g.sh: line 37: [: =~: binary operator expected

    /tmp/tmpdqop1w3g.sh: line 37: [: =~: binary operator expected

    /tmp/tmpdqop1w3g.sh: line 37: [: =~: binary operator expected

    /tmp/tmpdqop1w3g.sh: line 37: [: =~: binary operator expected

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=\"$1\"\n    local n=\"$2\"\n\n    local list\n    if [[ $str\
    \ != \"\" ]]; then\n        local words=()\n        list=\"${str//[\\ ]*}\"\n\
    \        local i\n        for ((i=0; i < $n; i++))\n        do\n            if\
    \ [[ $list =~ \"($i)\" ]]; then\n                words=(\"${words[@]}\" \"$list\"\
    )\n                list=\"${list/\"$i\"/}\n            fi\n        done\n    fi\n\
    \    echo \"${words[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgk49ger4.sh: line 53: unexpected EOF while looking for matching
    `"''

    /tmp/tmpgk49ger4.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal s=$1\n\tlocal n=$2\n\tlocal output=$(python -c \"\nimport sys;\n\
    def count_consonants(s):\n\treturn len([x for x in s.split() if x.isalpha() and\
    \ x != ' '])\n \ndef select_words(s, n):\n\treturn [w for w in s.split() if count_consonants(w)\
    \ == n]\n\t\")\n\tif [ -z \"$output\" ]; then\n\t\treturn []\n\telse\n\t\treturn\
    \ $output\n\tfi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpw4v5d1q1.sh: line 33: return: []: numeric argument required

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal string=$1\n\tlocal digit=$2\n\n\tresult=$( echo ${string} | grep\
    \ -o \"^[[:alpha:]]\" | sort | uniq -d )\n\techo $result\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local word\n    local list\n\
    \    local i\n\n    list=$(n-2)\n    for i in $(seq 0 \"$n\") \n    do\n     \
    \ word=$(echo \"$string\" | cut -d\" \" -f$i)\n      list=\"$list $word\"\n  \
    \  done\n    echo \"$list\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpggfodscw.sh: line 28: n-2: command not found

    cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # your code here\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp37l77yvx.sh: line 23: syntax error near unexpected token `}''

    /tmp/tmp37l77yvx.sh: line 23: `}''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local s=$1\n  local n=$2\n  local w\n  \n  # Implement me\n  # return (...)\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local list\n    local i\n    local\
    \ c\n    list=$()\n\n    for (( i=0; i<${#string}; i++ )); do\n        c=${string:$i:1}\n\
    \        if (( c == \"a\" ));then\n            list+=(\"$string\")\n         \
    \   break\n        fi\n\n        if (( c == \" \" ));then\n            list+=(\"\
    $string\")\n            break\n        fi\n        \n        if (( c =~ ^[a-zA-Z]+$\
    \ && ${#c} >= n ));then\n            list+=(\"$string\")\n            break\n\
    \        fi\n    done\n    \n    return ${list[*]}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmv3o8c92.sh: line 47: return: Mary: numeric argument required

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n\n    local i count=0\n\n    if [[ ${#s}\
    \ = 0 ]]\n    then\n        return 0\n    fi\n\n    for ((i = 0; i < ${#s}; i++));\
    \ do\n        local c=${s:i:1}\n\n        if [[ -z $c || ${c} =~ [aeiou] ]]; then\n\
    \            count=${count}\n        else\n            count=${count}+${#c}\n\
    \        fi\n    done\n\n    local words=()\n\n    for ((i = 0; i < ${count};\
    \ i++)); do\n        local j=i+1\n\n        for ((j = 0; j < ${count}; j++));\
    \ do\n            if [[ ${s:$i:1} == ${s:$j:1} ]]; then\n                words=(\"\
    ${words[@]}\" ${s:$j:1})\n                i=$j\n                break\n      \
    \      fi\n        done\n    done\n\n    echo \"${words[@]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=44 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=35 encoding='utf-8'>
  timestamp: 1660059490
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    \n    [[ -z $s ]] && echo \"$1 is not\
    \ a string\" && return 1\n    [[ -z $n ]] && echo \"$2 is not a natural number\"\
    \ && return 1\n\n    local words=()\n    local pos=0\n    local word\n    local\
    \ c\n    while [[ -n $s ]]; do\n        word=${s:$pos:1}\n        c=${word:0:1}\n\
    \        (( pos += 1 ))\n        [[ \"$c\" == \"$n\" ]] && words+=($word)\n  \
    \      word=${word:1}\n    done\n    [[ -n $s ]] && return 0\n    echo ${words[*]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=34 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=22 encoding='utf-8'>
  timestamp: 1660059490
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  # your code here\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgnl95gzu.sh: line 23: syntax error near unexpected token `}''

    /tmp/tmpgnl95gzu.sh: line 23: `}''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n\n    if [[ $s == \"\" ]]; then\n       \
    \ return \"\"\n    fi\n\n    local word\n    word=$(sed -n '/^[[:alpha:]]+$/p'\
    \ <<< \"$s\")\n    local i=1\n    while [[ $i -le $n ]]; do\n        word=\"$(echo\
    \ \"$word\" | sed -n 's/.*[[:alpha:]]\\([[:alpha:]]\\).*/\\1/p')\"\n        ((\
    \ i++ ))\n    done\n    echo \"$word\"\n}\n\ncandidate() {\n    select_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=\"${1}\"\n    local n=\"${2}\"\n    words=()\n    local i=0 \n\
    \    local word=\"\"\n    local c=0\n    for c in \"${s}\"; do\n        if [[\
    \ \"$c\" =~ ^[ ^$([!a-zA-Z] | +) ]]  ]] ; then\n            words+=($word)\n \
    \           word=\"\"\n            i=0 \n        else\n            word+=\"$c\"\
    \n        fi\n    done\n    words+=($word)\n    i=$((i+1))\n    if [[ \"$i\" -eq\
    \ \"$n\" ]] ; then\n        echo \"$words\"\n    else\n        echo \"${words[*]:$i}\"\
    \n    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpeaohsig4.sh: line 29: syntax error in conditional expression

    /tmp/tmpeaohsig4.sh: line 29: syntax error near `+)''

    /tmp/tmpeaohsig4.sh: line 29: `        if [[ "$c" =~ ^[ ^$([!a-zA-Z] | +) ]]  ]]
    ; then''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    IFS=$'\\n' read -r -a array <<< \"$s\"\
    \n    local results=()\n    for word in \"${array[@]}\"; do\n        if [[ \"\
    $word\" =~ [^[:alpha:][:space:]$n] ]]; then\n            continue\n        else\n\
    \            results+=(\"$word\")\n        fi\n    done\n    echo \"${results[*]}\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local list\n    local i=0\n    local\
    \ count\n    local flag\n    local word\n    \n    while [ $i -lt ${#s} ]; do\n\
    \        flag=0\n        \n        count=$(expr ${#s} - $i)\n        \n      \
    \  if [ ${#count} -gt $n ]; then\n            list=$(echo $count | bc);\n    \
    \    else\n            list=$(expr ${#count} - $n)\n        fi\n        \n   \
    \     if [ -z \"$list\" ]; then\n            list=1;\n        fi\n        \n \
    \       for (( i=0; i<${list}; i++ )); do\n            word=$(echo $s | cut -d'\"\
    ' -f$i)\n            \n            if [ \"${#word}\" != \"$n\" ]; then\n     \
    \           flag=1\n                \n                if [ -z \"$list\" ]; then\n\
    \                    list=$list\n                fi\n                \n      \
    \          if [ $(( ${#list} + 1 )) -gt $n ]; then\n                    list=$(expr\
    \ ${#list} + 1)\n                fi\n                \n                if [ ${#list}\
    \ -gt $n ]; then\n                    list=$list\n                fi\n       \
    \     fi\n        done\n        \n        if [ $flag ]; then\n            echo\
    \ \"$s\"\n        fi\n        \n        i=$(( i + 1 ))\n    done\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=32 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660059490
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal string=\"$1\"\n\tlocal n=\"$2\"\n\tlocal list=$(perl -MList::Util=all\
    \ -MPOSIX -e \"print join(\\\" \\\",grep { $_ eq $string } grep { length($_) ==\
    \ $n } map { split//, $_ })\")\n\t\n\t[[ -z $list ]] && return || printf '%s\\\
    n' \"$list\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Can''t modify constant item in scalar assignment at -e line 1, near "lamb
    }"

    syntax error at -e line 1, near "})

    "

    Execution of -e aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal word=$1\n\tlocal n=$2\n\tlocal s=$word\n\n\techo -n \"[\"\n\tfor\
    \ i in $(seq 0 $((n - 1)); do\n\t\techo -n \"\\\"$s\\\" | grep -iE \\\"^[[:space:]]*$s\\\
    \"\"\n\tdone\n\techo -n \"]\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") =\
    \ \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp54k65av8.sh: line 27: unexpected EOF while looking for matching
    `)''

    /tmp/tmp54k65av8.sh: line 49: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(grep -Eo \"[a-z\\\
    s]*$n[a-z\\s]*\" <<< \"$string\")\n    echo ${words}\n}\n\ncandidate() {\n   \
    \ select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little\
    \ lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=\"$1\"\n  local n=\"$2\"\n  \n  local words \n  \n  words=$(echo\
    \ \"$string\" | grep -Eo \"[a-z ]*$n\" | tr '[:upper:]' '[:lower:]')\n\n  if [\
    \ \"$string\" = \"\" ]; then \n    return 0\n  else\n    return $words\n  fi\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local line=$1\n    local num_consonants=$2\n    local words=\"\"\n  \
    \  while read -r line; do\n        local word=\"\"\n        for (( i=1; i<num_consonants;\
    \ i++ )); do\n            word+=\"${line:i:1}\"\n        done\n        words+=\"\
    ${word//[\\\" ]/}\"\n    done < $line\n    echo $words\n}\n\ncandidate() {\n \
    \   select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpc8o30e1t.sh: line 21: $line: ambiguous redirect

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    string=$1\n    count=$2\n    arr=()\n    if [[ ${string} == \"\" ]];\
    \ then\n        echo ${arr}\n    else\n        for word in ${string//' '/}; do\n\
    \            arr=($arr)\n            count_word=$(echo ${arr} | wc -w)\n     \
    \       if [[ $count_word -eq $count ]]; then\n                if [[ \"${arr[$count]}\"\
    \ = \"$word\" ]]; then\n                    arr=(${arr[@]} \"$word\")\n      \
    \          else\n                    arr=(${arr[@]})\n                fi\n   \
    \         fi\n        done\n    fi\n    echo ${arr[@]}\n}\n\ncandidate() {\n \
    \   select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal s=$1\n\tlocal n=$2\n\t\n\tlocal words=()\n\tif [ -z \"$s\" ]\n\t\
    then\n\t\techo \"$1\"\n\t\techo \"$2\"\n\telse\n\t\tlocal s_len=$(expr \"$#\"\
    \ - 1)\n\t\tif [ $n -le $s_len  ]\n\t\tthen\n\t\t\tlocal s_len=$n\n\t\tfi\n\t\t\
    \n\t\tlocal t=\"$s\"\n\t\tlocal t_len=$s_len\n\t\tlocal i=$(($(expr ${s_len} +\
    \ 1) \\* 2))\n\t\tlocal j=$(($(expr ${s_len} + 1) \\* 2))\n\t\twhile [ $i -le\
    \ $t_len ]\n\t\tdo\n\t\t\tif [[ $t =~ \"[^aeiouy]\" ]]\n\t\t\tthen\n\t\t\t\tlocal\
    \ x=$(expr $i + 1)\n\t\t\t\tif [[ $x -eq $s_len ]]\n\t\t\t\tthen\n\t\t\t\t\tlocal\
    \ words=(\"${words[@]}\" \"\\\"${t:$x}\\\"\" )\n\t\t\t\t\t((i=$((i+1))));\n\t\t\
    \t\t\tt_len=$((t_len-1))\n\t\t\t\telse\n\t\t\t\t\tlocal words=(\"${words[@]}\"\
    \ \"\\\"${t:$((${i} + 1))}\\\"\" )\n\t\t\t\t\t((i=$((${i} + ${s_len}))));\n\t\t\
    \t\t\tt_len=$((${t_len} + ${s_len}))\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\tif [[ $t_len\
    \ -gt $i ]]\n\t\t\t\tthen\n\t\t\t\t\t((j=$((j+${s_len}))));\n\t\t\t\t\tt_len=$((${t_len}\
    \ + ${s_len}))\n\t\t\t\telse\n\t\t\t\t\t((i=$((i+1))));\n\t\t\t\t\tt_len=$((t_len-1))\n\
    \t\t\t\tfi\n\t\t\tfi\n\t\tdone\n\t\tif [ $t_len -gt $i ]\n\t\tthen\n\t\t\t((j=$((j+${s_len}))));\n\
    \t\tfi\n\t\t\n\t\t((j=$((j+${s_len}))));\n\t\t\n\t\tif [[ $t_len -ne $j ]]\n\t\
    \tthen\n\t\t\twhile [ $j -le $t_len ]\n\t\t\tdo\n\t\t\t\tlocal words=(\"${words[@]}\"\
    \ \"\\\"${t:$((${j} + 1))}\\\"\" )\n\t\t\t\t((j=$((${j} + ${s_len}))));\n\t\t\t\
    done\n\t\tfi\n\t\t\n\t\twords=(\"${words[@]}\" \"\\\"${t:$((t_len))}\\\"\" )\n\
    \tfi\n\t\n\techo \"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpehjt3ogy.sh: line 101: unexpected EOF while looking for matching
    `"''

    /tmp/tmpehjt3ogy.sh: line 105: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local count=$2\n    if [ -z \"$string\" ]; then\n\
    \        echo \"[]\"\n    else\n        echo \"$string\" | sed -E 's/[^[:space:]]+[[:space:]]*[[:alpha:]]\\\
    (.\\).*/\\1/' | sort -n | uniq -c | sort -nr | head -$count | awk '{print $2\"\
    \\t\"$1}'\n    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 49: invalid reference \1 on `s'' command''s
    RHS

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local str=\"$1\"\n  local n=\"$2\"\n  local count=0\n  local words=()\n\
    \  while [[ ${#str} -gt 0 ]]; do\n    word=$(echo \"${str}\" | grep -E '[[:^alpha:]]+')\n\
    \    if [[ -n \"${word}\" ]]; then\n      count=$(echo \"${word}\" | tr ' ' '\\\
    n' | grep -c \"[^[:alpha:]]${n}[[:alpha:]]\")\n      if [[ \"${count}\" -eq 0\
    \ ]]; then\n        words=(\"${words[@]}\" ${word})\n      fi\n    fi\n    str=\"\
    ${str#*[[:space:]]}\"\n  done\n  echo \"${words[@]}\"\n}\n\ncandidate() {\n  \
    \  select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little\
    \ lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=55 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=36 encoding='utf-8'>
  timestamp: 1660059490
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local str=$1\n  local n=$2\n  local result\n  result=()\n  \n  if [[ \"\
    $str\" =~ ^$ ]]; then\n    return 0\n  fi\n\n  str=${str//[[:space:]]/}\n\n  if\
    \ [[ ! \"$str\" =~ ^[a-zA-Z ]+$ ]]; then\n    return 0\n  fi\n\n  for i in $str;\
    \ do\n    if [[ \"${i:0:$n}\" == \"$str\" ]]; then\n      result+=($i)\n    fi\n\
    \  done\n\n  if [[ ${#result[@]} -eq 0 ]]; then\n    return 0\n  fi\n\n  echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbmcavak6.sh: line 33: syntax error in conditional expression

    /tmp/tmpbmcavak6.sh: line 33: syntax error near `]+$''

    /tmp/tmpbmcavak6.sh: line 33: `  if [[ ! "$str" =~ ^[a-zA-Z ]+$ ]]; then''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local words=$1\n  local count=$2\n  local word\n  words=$(echo \"${words}\"\
    \ | tr '[:upper:]' '[:lower:]')\n  result=()\n  for word in $words ; do\n    if\
    \ [[ \"${word}\" == \"$word\" ]] ; then\n      result+=($word)\n    fi\n  done\n\
    \  if [[ ${#result} -lt $count ]] ; then\n    return 0\n  else\n    return 1\n\
    \  fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate\
    \ \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\"\
    \ \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n\
    \    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\"\
    \ \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    echo $s\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    # Complete this function\n    local words\n\
    \    words=()\n    for word in $s\n    do\n        word+=\" \"\n        if [[\
    \ \"$word\" == *\"M\"* ]]; then\n            word+=\"Mary\"\n        elif [[ \"\
    $word\" == *\"y\"* ]]; then\n            word+=\"Mary\"\n        elif [[ \"$word\"\
    \ == *\"a\"* ]]; then\n            word+=\"Mary\"\n        elif [[ \"$word\" ==\
    \ *\"l\"* ]]; then\n            word+=\"Mary\"\n        elif [[ \"$word\" == *\"\
    e\"* ]]; then\n            word+=\"Mary\"\n        elif [[ \"$word\" == *\"t\"\
    * ]]; then\n            word+=\"Mary\"\n        elif [[ \"$word\" == *\"a\"* ]];\
    \ then\n            word+=\"Mary\"\n        elif [[ \"$word\" == *\"d\"* ]]; then\n\
    \            word+=\"Mary\"\n        elif [[ \"$word\" == *\"o\"* ]]; then\n \
    \           word+=\"Mary\"\n        elif [[ \"$word\" == *\"p\"* ]]; then\n  \
    \          word+=\"Mary\"\n        elif [[ \"$word\" == *\"p\"* ]]; then\n   \
    \         word+=\"Mary\"\n        elif [[ \"$word\" == *\"h\"* ]]; then\n    \
    \        word+=\"Mary\"\n        elif [[ \"$word\" == *\"e\"* ]]; then\n     \
    \       word+=\"Mary\"\n        elif [[ \"$word\" == *\"e\"* ]]; then\n      \
    \      word+=\"Mary\"\n        elif [[ \"$word\" == *\"r\"* ]]; then\n       \
    \     word+=\"Mary\"\n        elif [[ \"$word\" == *\"l\"* ]]; then\n        \
    \    word+=\"Mary\"\n        elif [[ \"$word\" == *\"u\"* ]]; then\n         \
    \   word+=\"Mary\"\n        elif [[ \"$word\" == *\"s\"* ]]; then\n          \
    \  word+=\"Mary\"\n        elif [[ \"$word\" == *\"p\"* ]]; then\n           \
    \ word+=\"Mary\"\n        elif [[ \"$word\" == *\"a\"* ]]; then\n            word+=\"\
    Mary\"\n        elif [[ \"$word\" == *\"r\"* ]]; then\n            word+=\"Mary\"\
    \n        elif [[ \"$word\" == *\"y\"* ]]; then\n            word+=\"Mary\"\n\
    \        elif [[ \"$word\" == *\"y\"* ]]; then\n            word+=\"Mary\"\n \
    \       elif [[ \"$word\" == *\"a\"* ]]; then\n            word+=\"Mary\"\n  \
    \      elif [[ \"$word\" == \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") =\
    \ \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4nexa1w5.sh: line 78: unexpected argument `newline'' to conditional
    binary operator

    /tmp/tmp4nexa1w5.sh: line 78: syntax error near `==''

    /tmp/tmp4nexa1w5.sh: line 78: `        elif [[ "$word" == ''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$3\n\n    if [ \"$string\"\
    \ == \"\" ]\n    then\n        words=\"\"\n    else\n        words=$(echo \"$string\"\
    \ | sed -n 's/.* //p' | sort -u)\n    fi\n    echo \"$words\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=$1\n  local n=$2\n  if [ -z \"$string\" ]; then\n    return\
    \ \n  fi\n  local c=0\n  local words=()\n  local t=''\n  local ts=()\n  local\
    \ letters=''\n  while [[ $n -gt 0 && $n -lt ${#string} ]]; do\n    let \"c++\"\
    \n    letters=\"${string:$n:1}\"\n    if [[ $letters != $'\\n' ]]; then\n    \
    \  words[${#words[*]}]=\"$letters\"\n    else\n      words[${#words[*]}]=\"$letters\"\
    \ \n    fi\n  done\n  local nwords=${#words[@]}\n  if [ $nwords -eq 0 ]; then\n\
    \    return \n  fi\n  for ((i=0; i<${#words[@]}; i++));\n  do\n    t=${words[i]}\n\
    \    ts[${#ts[*]}]=\"$t\"\n  done\n  return $ts\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=49 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=37 encoding='utf-8'>
  timestamp: 1660059490
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local list\n    list=`echo \"$s\" | grep\
    \ -Eo \"\\w\" | grep -F \"$n\"`\n    echo $list\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=$1\n    local n=$2\n    local words=\"\"\n    \n    # Write\
    \ your code here\n    local l=0\n    for (( i = 1; i < ${#str}; i++ ))\n    do\n\
    \        if [ ${str:$i:1} == [${n}] ]\n        then\n            l=$(( ${l} +\
    \ 1 ))\n        fi\n    done\n    \n    for (( i = 1; i < ${#str}; i++ ))\n  \
    \  do\n        if [ ${str:$i:1} != [${n}] ]\n        then\n            l=$(( ${l}\
    \ + 1 ))\n        fi\n    done\n    \n    local m=0\n    for (( i = 1; i < ${#str};\
    \ i++ ))\n    do\n        if [ ${str:$i:1} == [${n}] ]\n        then\n       \
    \     m=$(( ${m} + 1 ))\n        fi\n    done\n    \n    if [ ${m} -eq ${n} ]\n\
    \    then\n        words=${str}\n    fi\n    \n    return ${words}\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfnbc3vt0.sh: line 30: [: ==: unary operator expected

    /tmp/tmpfnbc3vt0.sh: line 30: [: ==: unary operator expected

    /tmp/tmpfnbc3vt0.sh: line 30: [: ==: unary operator expected

    /tmp/tmpfnbc3vt0.sh: line 30: [: ==: unary operator expected

    /tmp/tmpfnbc3vt0.sh: line 38: [: !=: unary operator expected

    /tmp/tmpfnbc3vt0.sh: line 38: [: !=: unary operator expected

    /tmp/tmpfnbc3vt0.sh: line 38: [: !=: unary operator expected

    /tmp/tmpfnbc3vt0.sh: line 38: [: !=: unary operator expected

    /tmp/tmpfnbc3vt0.sh: line 47: [: ==: unary operator expected

    /tmp/tmpfnbc3vt0.sh: line 47: [: ==: unary operator expected

    /tmp/tmpfnbc3vt0.sh: line 47: [: ==: unary operator expected

    /tmp/tmpfnbc3vt0.sh: line 47: [: ==: unary operator expected

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n\n    # Empty string return\
    \ an empty list\n    if [[ \"$string\" == \"\" ]]; then\n        echo \"$string\"\
    \n        return\n    fi\n\n    # No consonants\n    if [[ $n -eq 0 ]]; then\n\
    \        echo \"$string\"\n        return\n    fi\n\n    # Find out how many consonants\
    \ there are in the string\n    local ccount=$( echo \"$string\" | wc -c)\n\n \
    \   # If we have no consonants then return a empty list\n    if [[ $ccount ==\
    \ 0 ]]; then\n        echo \"$string\"\n        return\n    fi\n\n    # If the\
    \ count of the string is not an even number then return a empty list\n    if [[\
    \ $ccount % 2 != 0 ]]; then\n        echo \"$string\"\n        return\n    fi\n\
    \n    local wordlist=\" \"\n\n    # Find all the words with $n consonants\n  \
    \  for word in $(echo \"$string\" | sed 's/[^a-z ]//g' | sed 's/ //g' | sort -u)\n\
    \    do\n        local test=\"$word$word\"\n        if [[ \"$string\" == \"$test\"\
    \ ]]; then\n            wordlist=\"$wordlist$word\"\n        fi\n    done\n\n\
    \    echo \"$wordlist\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp66pw4bmi.sh: line 47: conditional binary operator expected

    /tmp/tmp66pw4bmi.sh: line 47: syntax error near `%''

    /tmp/tmp66pw4bmi.sh: line 47: `    if [[ $ccount % 2 != 0 ]]; then''

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local length=$2\n    local count=0\n    local words=()\n\
    \    local word\n    local i\n    local j\n    \n    # empty string\n    if [\
    \ -z \"$string\" ]; then\n        words=()\n        echo \"$words\"\n        return\n\
    \    fi\n\n    # if the length of string is 1\n    if [ \"$length\" -eq 1 ]; then\n\
    \        words=($string)\n        echo \"$words\"\n        return\n    fi\n  \
    \  \n    # find number of consonants in string\n    for ((i = 0; i < ${#string};\
    \ i++)); do\n        [[ \"$string\" =~ [aeiou] ]] && let count++\n    done\n \
    \   \n    \n    # handle multiple consonants in string\n    if [ \"$count\" -gt\
    \ 1 ]; then\n        \n        # split string into words\n        for ((i = 0;\
    \ i < ${#string}; i++)); do\n            \n            # remove non-alpha characters\n\
    \            word=$(echo \"${string:$i:1}\" | sed 's/[^[:alpha:]]//g')\n     \
    \       \n            # add word to list\n            words[$i]=\"$word\"\n  \
    \      done\n        \n        \n        # sort list\n        sort -u words\n\
    \    else\n        words=($string)\n    fi\n\n    # count number of each word\n\
    \    for ((i = 0; i < ${#words[@]}; i++)); do\n        \n        # increment count\
    \ by 1 for that word\n        let \"count[$words[i]]=$count[$words[i]]+1\"\n \
    \   done\n\n    # convert count array to string\n    for ((i = 0; i < ${#words[@]};\
    \ i++)); do\n        echo \"${words[$i]}\"\n    done\n}\n\ncandidate() {\n   \
    \ select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little\
    \ lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error:
    invalid arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token is "[M[i]]+1")

    /tmp/tmp17qlgju_.sh: line 74: let: count[M[i]]=22[M[i]]+1: syntax error: invalid
    arithmetic operator (error token'
  stdout: ''
  timestamp: 1660059486
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    read word\n    read n\n    declare -i n0\n    declare -i wordlen\n  \
    \  declare -i len\n    declare -i index\n    declare -a arr\n    declare -i cnt\n\
    \    declare -i x\n    declare -i tmp\n    wordlen=$(echo $word | wc -w)\n   \
    \ len=${#word}\n    cnt=0\n    arr=()\n    x=0\n    while [ $n -gt 0 ]; do\n \
    \       if [[ $n -eq 1 ]]; then\n            arr+=(\"$word\")\n            break\n\
    \        fi\n        if [ ! -z \"$word\" ]; then \n            tmp=${word:0:${wordlen}}\n\
    \            word=${word:${wordlen}}\n        fi\n        arr+=(\"$tmp\")\n  \
    \      n0=$(echo $n | bc)\n        index=$(echo $((${#arr[@]} - 1)) | bc)\n  \
    \      cnt=0\n        while [ $x -lt $index ]; do\n            if [ \"${arr[$x]}\"\
    \ = \"$word\" ]; then\n                ((cnt++))\n                break\n    \
    \        fi\n            let x++\n        done\n        if [ $cnt -gt $n0 ]; then\n\
    \            arr+=(\"$word\")\n            n=$((n-1))\n        elif [ $cnt -lt\
    \ $n0 ]; then\n            n=$((n+1))\n        fi\n    done\n    echo ${arr[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=38 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=24 encoding='utf-8'>
  timestamp: 1660059491
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=\"$1\"\n  local number=\"$2\"\n\n  if [[ -z \"$string\" ]];\
    \ then\n    echo \"$0: empty string\" 1>&2\n    return 1\n  fi\n\n  if [[ \"$number\"\
    \ -lt 0 ]]; then\n    echo \"$0: negative argument\" 1>&2\n    return 1\n  fi\n\
    \n  local results=()\n  # We cannot use string indexing here because we cannot\
    \ count the \n  # number of \"consonants\" that could appear in string without\
    \ \n  # consuming all of the string.\n  local i \n  for (( i = 0; i < ${#string};\
    \ i++ )); do\n    if [[ \"${string:$i:1}\" = @($consonant_regex) ]]; then\n  \
    \    results+=(\"${string:$i:1}\")\n    fi\n  done\n\n  if [[ ${#results[@]} -eq\
    \ \"$number\" ]]; then\n    echo -n \"$results\" 1>&2\n  else\n    echo \"$0:\
    \ not enough consonants\" 1>&2\n  fi\n}\n\ncandidate() {\n    select_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvjmauzz7.sh: not enough consonants

    '
  stdout: ''
  timestamp: 1660059485
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    read -r s n\n    IFS=\" \" read -r -a strs <<< \"$s\"\n    result=()\n\
    \    for word in \"${strs[@]}\"; do\n        (( \"${#word}\" == n )) && result+=(\"\
    $word\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=28 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=51 encoding='utf-8'>
  timestamp: 1660059490
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  echo \"$1\" | \n  tr ' ' '\\n' | \n  awk -v n=\"$2\" '{\n    for(i=1;i<=NF;i++)\
    \ {\n      if($i==\"'$n'\") print $i\n    }\n  }' | \n  tr -d \"'\\n\"\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n\n    local cons=$(consonants)\n   \
    \ local words=$(select_words $string)\n    local words_length=${#words[@]}\n\n\
    \    local i=0\n    local result=()\n    while (( $i < $n )); do\n        local\
    \ word=''\n        local length=0\n        local j=0\n        while (( $j + $length\
    \ + $length > $words_length )); do\n            word+=$cons[$i]\n            length=$(expr\
    \ $length + 1)\n            (( j++ ))\n        done\n        result+=( \"\\\"\
    ${word}\\\" \" )\n        (( i++ ))\n    done\n    \n    local result_length=${#result[@]}\n\
    \    if (( $result_length == 0 )); then\n        return ( )\n    fi\n    \n  \
    \  local result_length=${#result[@]}\n    result=$(echo \"${result[@]}\" | tr\
    \ ' ' '\\n' | grep -c '\\n')\n    \n    echo $result\n}\n\ncandidate() {\n   \
    \ select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little\
    \ lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd8rcxbsm.sh: line 47: syntax error near unexpected token `fi''

    /tmp/tmpd8rcxbsm.sh: line 47: `    fi''

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=$1\n    local n=$2\n    local words=()\n    if [[ ! $str ==\
    \ \"\" ]]; then\n        local i=0\n        while [[ $i -lt ${#str} && $i -lt\
    \ ${#str} ]]; do\n            local j=0\n            while [[ $j -le ${#str} ]];\
    \ do\n                if [[ $(( ${str[$j]} + $n )) -eq $(( ${str[$((j+1))]} +\
    \ $n )) ]]; then\n                    words+=(\"${str[$i]}${str[$j]}\")\n    \
    \                i=$(( $i + 1 ))\n                    j=$(( $j + 1 ))\n      \
    \          else\n                    j=$(( $j + 1 ))\n                fi\n   \
    \         done\n            i=$(( $i + 1 ))\n        done\n    fi\n    words+=(\"\
    $str\")\n    echo \"${words[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"\
    4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"\
    Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n \
    \   [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"\
    Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw2_yzftt.sh: line 30: Mary had a little lamb + 4 : syntax error
    in expression (error token is "had a little lamb + 4 ")

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n\n    string=${string//[!@#\\\
    $%^&*()]}\n    words=$(eval echo \\${$string}{'$n'})\n    words=(${words//' '/\
    \ })\n    echo ${words[*]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfj20s4d2.sh: line 26: ${}{$n}: bad substitution

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=\"$1\"\n  local count=\"$2\"\n  local output=\"$(select_words_with_count\
    \ \"$string\" \"$count\")\"\n  [ \"$#\" -eq \"$count\" ] || die \"Wrong number\
    \ of args for $FUNCNAME\"\n  echo \"$output\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiyura9xp.sh: line 24: select_words_with_count: command not found

    /tmp/tmpiyura9xp.sh: line 25: die: command not found

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=\"$1\"\n    local n=\"$2\"\n    local words=()\n    for (( i=0;\
    \ i<${#s}; i++ )); do\n        local c=\"${s:$i:1}\"\n        if [ \"$c\" != \"\
    \ \" -a \"$c\" != \".\" ]; then\n            words=(\"${words[@]}\" \"${c}\")\n\
    \        fi\n    done\n    for (( i=0; i<${#words[@]}; i++ )); do\n        if\
    \ [[ ${words[$i]} == *\"consonant\"* ]]; then\n            if [[ ${#words[$i]}\
    \ -eq ${n} ]]; then\n                words=(\"${words[@]:$i}\")\n            \
    \    break\n            fi\n        fi\n    done\n    echo \"${words[@]}\"\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local number=\"$2\"\n    local list=\"$3\"\n\
    \    local i\n    local j\n    for ((i=0; i<${#string}; i++))\n    do\n      \
    \  if [[ ${string:$i:1} == [[:lower:]]* ]]\n        then\n            for ((j=0;\
    \ j<${#list}; j++))\n            do\n                if [[ \"${list:$j:1}\" ==\
    \ [[:lower:]]* ]]\n                then\n                    if [[ ${list:$j:1}\
    \ == \"${string:$i:1}\"* ]]; then\n                        echo \"${list:$j:2}\"\
    \n                    fi\n                fi\n            done\n        fi\n \
    \   done\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local word=''\n    local count=0\n\
    \    local i\n\n    for (( i = 1; i <= ${#string}; i++ ))\n    do\n        if\
    \ [ ${string:$i:1} == ' ' ]; then\n            word=${word}${string:$i:1}\n  \
    \      else\n            if [[ $count -lt $n ]]; then\n                word=${word}${string:$i:1}\n\
    \                count=$((count+1))\n            else\n                word=${word}${string:$i:1}\n\
    \            fi\n        fi\n    done\n\n    echo \"$word\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmr44lutz.sh: line 30: [: ==: unary operator expected

    /tmp/tmpmr44lutz.sh: line 30: [: ==: unary operator expected

    /tmp/tmpmr44lutz.sh: line 30: [: ==: unary operator expected

    /tmp/tmpmr44lutz.sh: line 30: [: ==: unary operator expected

    /tmp/tmpmr44lutz.sh: line 30: [: ==: unary operator expected

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"${1}\"\n    local num=\"${2}\"\n    if [[ -z ${string}\
    \ ]]; then\n        echo \"No string\"\n    else\n        echo $string | grep\
    \ -E \"(\\(.*\\))\" | sed 's/ //g' | grep -E \"${string}\" | grep -c \"${string}\"\
    \n    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local __word __tmp __res __i=1\n    local __n __v\n    local __i __res\
    \ __word\n\n    # Split $1 by spaces and assign the values to the variables __word\
    \ and __tmp\n    __word=( $(echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[[:space:]]'\
    \ '\\n') )\n    __tmp=( $(echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[[:space:]]'\
    \ '\\n') )\n\n    # Loop through each string in __tmp\n    for __i; do \n    \
    \    __v=\"${__tmp[$__i]}\"\n        __v=\"${__v//[![:digit:]]}\"\n        __v=\"\
    ${__v//[![:lower:]]}\"\n        __v=\"${__v//[![:upper:]]}\"\n        if [ \"\
    $__v\" -ne 0 ]; then\n            __word+=( $__v )\n        fi\n    done\n\n \
    \   # Store the final result into __res\n    __res=( \"${__word[@]}\" )\n    \n\
    \    # Remove duplicate entries and sort\n    # __res=( \"${__res[@]}\" )\n  \
    \  __res=( \"${__res[@]}\" | tr ' ' '\\n' | sort -u )\n}\n\ncandidate() {\n  \
    \  select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little\
    \ lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwg8w2uiw.sh: line 46: syntax error near unexpected token `|''

    /tmp/tmpwg8w2uiw.sh: line 46: `    __res=( "${__res[@]}" | tr '' '' ''\n'' | sort
    -u )''

    /tmp/tmpwg8w2uiw.sh: line 47: syntax error near unexpected token `}''

    /tmp/tmpwg8w2uiw.sh: line 47: `}''

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local count=$2\n    \n    # Your code here\n   \
    \ \n    echo $words\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal string=$1\n\tlocal n=$2\n\tlocal list=()\n\t\n\tlocal j=1\n\tlocal\
    \ word=()\n\t\n\tfor (( i=0; i < ${#string}\"; i++ )); do\n\t\tword+=(\"${string:$i:1}\"\
    )\n\t\tif [ ${#word[@]} -eq ${n} ]; then\n\t\t\tlist+=(\"${word[@]}\")\n\t\t\t\
    word=()\n\t\tfi\n\tdone\n\t\n\tprintf '[\"%s\"]' \"${list[@]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp28dmmsrj.sh: line 52: unexpected EOF while looking for matching
    `"''

    /tmp/tmp28dmmsrj.sh: line 56: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local _all_words=()\n    local _words=()\n    _all_words=($(echo \"$1\"\
    )) #Split words in string by space\n    for (( i=1; i<= $2 ); i++ )\n    do\n\
    \        _words=(\"${_words[@]}\" $(echo \"${_all_words[@]}\" | grep -v '\"'))\n\
    \    done\n    echo \"${_words[@]}\" \n}\n\ncandidate() {\n    select_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwybdsxi9.sh: line 25: syntax error near `;''

    /tmp/tmpwybdsxi9.sh: line 25: `    for (( i=1; i<= $2 ); i++ )''

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local num=\"$2\"\n    local word\n    local\
    \ result\n\n    # No words or empty words\n    if [[ -z \"$string\" || \"$string\"\
    \ = \" \" ]]\n    then\n        echo \"\"\n        echo \"Usage: $(basename $0)\
    \ string number\"\n        echo \"\"\n        return 1\n    fi\n\n    # No more\
    \ than 10 consonants\n    if [ \"$num\" -lt 10 ]\n    then\n        echo \"Usage:\
    \ $(basename $0) string number\"\n        echo \"    Requirements: number should\
    \ be less than or equal to 10\"\n        return 1\n    fi\n\n    # No more than\
    \ a maximum of 10 words\n    if [ \"$num\" -gt 10 ]\n    then\n        echo \"\
    Usage: $(basename $0) string number\"\n        echo \"    Requirements: number\
    \ should be less than or equal to 10\"\n        return 1\n    fi\n\n    # Convert\
    \ string to lower case\n    string=$(echo \"$string\" | tr a-z A-Z)\n\n    # Initialize\
    \ result array\n    result=()\n\n    # Split string into words\n    for word in\
    \ $string; do\n        if [ $((${#word}+1)) == $num ]\n        then\n        \
    \    result+=(\"$word\")\n        fi\n    done\n\n    # Return result\n    echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=\"$1\"\n    local n=\"$2\"\n    local result=$(echo \"$s\" |\
    \ tr ' ' '\\n' | sed \"s/$/ '/g\" | grep -E \"[[:alpha:]]+$n\")\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tstring=$1\n\tcount=$2\n\t\n\tif [ \"$string\" == \"\" ]\n\tthen\n\t\techo\
    \ \"[]\"\n\telse\n\t\techo $( awk -F\\\" '{for (i=2; i<=NF; i++) if ($i == \"\
    '\"$string\"'\") print $i}' |sort)\n\tfi\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=60 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=50 encoding='utf-8'>
  timestamp: 1660059491
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local number=\"$2\"\n    if [[ -z \"$string\"\
    \ ]]; then\n        return\n    fi\n    local result\n    for word in $(grep -o\
    \ -E '[[:alnum:]]+' | sort -u)\n    do\n        if [[ \"$word\" =~ ^([[:alpha:]]+)[[:space:]]*$number$([[:space:]]+([[:alpha:]]+)[[:space:]]*)?$\
    \ ]]; then\n            local word1=\"${BASH_REMATCH[1]}\"\n            local\
    \ word2=\"${BASH_REMATCH[2]}\"\n            if [[ -n \"$word2\" ]]; then\n   \
    \             if [[ \"$word1\" == \"$word2\" ]]; then\n                    local\
    \ word3=\"${BASH_REMATCH[3]}\"\n                    if [[ -n \"$word3\" ]]; then\n\
    \                        result=\"$word3\"\n                    fi\n         \
    \       fi\n            fi\n        fi\n    done\n    echo \"$result\"\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=48 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=14 encoding='utf-8'>
  timestamp: 1660059491
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal line=$1\n\tlocal num=$2\n\tlocal words=$()\n\t\n\tfor i in `echo\
    \ $line`; do\n\t\tif [[ $i =~ [a-zA-Z][a-zA-Z]* ]]; then\n\t\t\tif [[ $i =~ [0-9][0-9]*\
    \ ]]; then\n\t\t\t\tlet num+=1\n\t\t\tfi\n\t\tfi\n\t\twords=$($word $words $i)\n\
    \tdone\n\techo $words\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7qua85uo.sh: line 32: Mary: command not found

    /tmp/tmp7qua85uo.sh: line 32: had: command not found

    /tmp/tmp7qua85uo.sh: line 32: a: command not found

    /tmp/tmp7qua85uo.sh: line 32: little: command not found

    /tmp/tmp7qua85uo.sh: line 32: lamb: command not found

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=$1\n    local n=$2\n    local output=($(echo $str | sed -n\
    \ \"s/^.*[^[:space:]]*${n}[^[:space:]]*\\([[:space:]]*\\).*/\\1/p\"))\n    if\
    \ [ ! -z \"$output\" ]; then\n        echo \"$output\"\n    else\n        echo\
    \ \"\"\n    fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=$1\n    local n=$2\n    local wordlist\n    wordlist=()\n \
    \   \n    if [ $n -lt 1 ]\n    then \n        echo -n \"Error: n must be greater\
    \ than 0\"\n        echo -n \"   Usage: $(basename $0) string n\"\n        return\
    \ 1\n    fi\n    \n    if [ -z \"$str\" ]\n    then\n        echo -n \"Error:\
    \ empty string\"\n        echo -n \"   Usage: $(basename $0) string n\"\n    \
    \    return 1\n    fi\n\n    local string=\"\"\n    \n    for c in ${str}\n  \
    \  do\n        if [ $c != \" \" ]\n        then\n            string=\"$string$c\"\
    \n        fi\n    done\n\n    for word in `echo \"$string\" | grep -E \"[[:alpha:]]+\"\
    \ | sed 's/[[:alpha:]]+//g' | sort -u`\n    do\n        if [ \"$(echo \"$word\"\
    \ | wc -l)\" -eq \"$n\" ]\n        then\n            wordlist=\"$wordlist \\\"\
    $word\\\"\"\n        fi\n    done\n    \n    echo -n \"$(echo \"$wordlist\" |\
    \ tr \"\\n\" \"\\\", \")\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n   local s\n   local n\n   local words\n   local count\n   local i\n   \n\
    \   s=\"$1\"\n   n=\"$2\"\n   \n   words=()\n   count=$(echo \"$s\" | wc -c)\n\
    \   \n   if [ $n -gt 0 -a $count -eq $n ]; then\n      words=$(echo \"$s\" | sed\
    \ -e 's/\\(.\\)\\(.*\\)/\\1/g' | sed -e 's/\\(.*\\)\\(.\\)/\\1\\2/g')\n      echo\
    \ \"$words\"\n   else\n      echo \"[]\"\n   fi\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local i ii words \n    words=( $@ ) ; shift\n    i=${#words[@]}\n   \
    \ for ii in ${!words[@]}; do\n        [ ${words[ii]} == ${words[i]} ] && {\n \
    \           words+=( ${words[ii]} )\n            words=( \"${words[@]}\" )\n \
    \           i=$(( $i - 1 ))\n        } else break\n    done\n    printf '%s\\\
    n' \"${words[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp82kgaymg.sh: line 30: syntax error near unexpected token `else''

    /tmp/tmp82kgaymg.sh: line 30: `        } else break''

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -n array=$1\n    local -i len=$2\n    local word\n    local count\n\
    \    local word\n    local -i index=0\n    local -n result=()\n    \n    for ((\
    \ index = 0; index < ${#array[@]}; index++ )); do\n        word=${array[$index]}\
    \ \n        count=0\n        \n        for (( index = 0; index < ${#word}; index++\
    \ )); do\n            if [[ \"${word:$index:1}\" == [[:alpha:]] ]]; then\n   \
    \             count=$(( ${count} + 1 ))\n            fi\n        done\n      \
    \  \n        if [[ \"${count}\" == \"$len\" ]]; then\n            result+=(\"\
    $word\")\n        fi\n    done\n    \n    return \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpezwbe45b.sh: line 22: local: `Mary had a little lamb'': invalid
    variable name for name reference

    /tmp/tmpezwbe45b.sh: line 28: local: result: reference variable cannot be an array

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=${2:-\"\"}\n    local list=\"\"\n    local\
    \ i=0\n    while [ $i -lt $(( ${#string} + 1 )) ]; do\n        if [[ ${string:$i:1}\
    \ == \"a\" || ${string:$i:1} == \"e\" || ${string:$i:1} == \"i\" || ${string:$i:1}\
    \ == \"o\" || ${string:$i:1} == \"u\" || ${string:$i:1} == \"y\" || ${string:$i:1}\
    \ == \"\xE1\" || ${string:$i:1} == \"\xF3\" || ${string:$i:1} == \"\xFA\" || ${string:$i:1}\
    \ == \"\xED\" || ${string:$i:1} == \"\xFA\" ]]; then\n            let \"i+=1\"\
    \n        else\n            let \"i+=1\"\n            if [ $i -eq $n ]; then\n\
    \                list=\"$list$string\"\n            else\n                list=\"\
    $list$string\"$'\\t'\n            fi\n        fi\n    done\n    echo \"$list\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=\"$1\"\n  local count=\"$2\"\n  # \"Mary had a little lamb\"\
    \ contains 2 consonants (M and lamb)\n  local index=0\n  local count=0\n  local\
    \ array=()\n  local word=\"\"\n  local vowels=\"aeiouyAEIOUY\"\n  local consonants=\"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n  # If the string s is empty then\
    \ the function should return an empty list.\n  [[ -z $string ]] && return 0\n\
    \  echo \"${string} contains $count consonants $count\"\n  \n  # Keep going until\
    \ the end of the string has been reached. \n  while [[ \"$string\" != \"\" ]]\n\
    \  do\n    # Increment count by 1, and reset index to zero\n    let count=count+1\n\
    \    let index=0\n    \n    # If the current character is consonant, append it\
    \ to array\n    if [[ \"$consonants\" =~ \"$string\" ]]\n    then\n      array[$index]=\"\
    $string\"\n      ((index++))\n      continue\n    fi\n    \n    # If the current\
    \ character is a vowel, increment index and keep on looping\n    if [[ \"$vowels\"\
    \ =~ \"$string\" ]]\n    then\n      index=$((index+1))\n      array[$index]=\"\
    $string\"\n      ((count++))\n      continue\n    fi\n  done\n  \n  # The string\
    \ $string is empty at this point\n  if [[ \"$count\" -eq \"$index\" ]]\n  then\n\
    \    return 0\n  fi\n  \n  # Append all consonant words to return array and decrement\
    \ index\n  while (( $index < $count ))\n  do\n    word=\"$array[$index]\"\n  \
    \  word=\"$word \"\n    ((index++))\n  done\n  \n  echo $word\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=19 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=3 encoding='utf-8'>
  timestamp: 1660059491
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"${1}\"\n    local num=\"${2}\"\n    local res=\"\"\n\n\
    \    if [[ \"${num}\" == \"0\" ]]; then\n        # if the number is 0 then return\
    \ an empty string\n        echo \"${res}\"\n        return\n    fi\n    \n   \
    \ local counter=1\n    while [[ -n \"${string}\" ]]; do\n        if [[ \"${counter}\"\
    \ -eq \"${num}\" ]]; then\n            local word=\"${string}\"\n            res=\"\
    ${res} ${word}\"\n            string=\"${string#* }\"\n            break\n   \
    \     fi\n        counter=$(( counter + 1 ))\n        local word=\"${string}\"\
    \n        res=\"${res} ${word}\"\n        string=\"${string#* }\"\n    done\n\
    \    echo \"${res}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local i=0\n\n    while [\
    \ $i -lt \"$string\" ]; do\n        if [[ $i -lt $n ]]; then\n            local\
    \ c\n            c=\"$string\"\n            shift\n            local new_c\n \
    \           new_c=\"$(select_words \"${c}\" \"$((n-1))\")\"\n            local\
    \ new_string\n            new_string=\"$new_c\"\n            if [[ ${new_c} !=\
    \ $new_string ]]; then\n                string=\"$new_string\"\n            fi\n\
    \        else\n            if [[ $i -lt $((n+1)) ]]; then\n                echo\
    \ \"$string\"\n            fi\n        fi\n        ((i++))\n    done\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9y_r198e.sh: line 26: [: Mary had a little lamb: integer expression
    expected

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local str=$1\n  local n=$2\n  local wordlist\n  wordlist=\"\"\n  \n  if\
    \ [ -z \"$str\" ]; then\n    wordlist=\"\"\n  else\n    for (( i = 0; i < ${#str};\
    \ i++ )); do\n      if [ ${str:$i:1} != \"${s:$i:1}\" ]; then\n        if [ ${#wordlist}\
    \ -lt n ]; then\n          wordlist=\"$wordlist $str\"\n        fi\n      fi\n\
    \    done\n  fi\n  \n  echo $wordlist\n}\n\ncandidate() {\n    select_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 31: [: !=: unary operator expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 31: [: !=: unary operator expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 31: [: !=: unary operator expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 31: [: !=: unary operator expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    /tmp/tmp0cp9k8qh.sh: line 32: [: n: integer expression expected

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local s=$1\n  local n=$2\n  \n  # Write your code here\n  s=$(echo $s |tr\
    \ ' ' '\\n')\n  s=$(echo $s | sed 's/[^a-zA-Z]//g')\n  s=$(echo $s | sed 's/^//g')\n\
    \  s=$(echo $s | sed 's/ $//g')\n  s=$(echo $s | sed 's/^$//g')\n  s=$(echo $s\
    \ | sed 's/^/\"/')\n  s=$(echo $s | sed 's/$/\"/g')\n  s=$(echo $s | sed 's/^/\"\
    /')\n  s=$(echo $s | sed 's/$/\"/g')\n  s=$(echo $s | sed 's/^/\"/')\n  s=$(echo\
    \ $s | sed 's/$/\"/g')\n  s=$(echo $s | sed 's/^/\"/')\n  s=$(echo $s | sed 's/$/\"\
    /g')\n  s=$(echo $s | sed 's/^/\"/')\n  s=$(echo $s | sed 's/$/\"/g')\n  s=$(echo\
    \ $s | sed 's/^/\"/')\n  s=$(echo $s | sed 's/$/\"/g')\n  s=$(echo $s | sed 's/^/\"\
    /')\n  s=$(echo $s | sed 's/$/\"/g')\n  s=$(echo $s | sed 's/^/\"/')\n  s=$(echo\
    \ $s | sed 's/$/\"/g')\n  s=$(echo $s | sed 's/^/\"/')\n  s=$(echo $s | sed 's/$/\"\
    /g')\n  s=$(echo $s | sed 's/^/\"/')\n  s=$(echo $s | sed 's/$/\"/g')\n  s=$(echo\
    \ $s | sed 's/^/\"/')\n  s=$(echo $s | sed 's/$/\"/g')\n  s=$(echo $s | sed 's/^/\"\
    /')\n  s=$(echo $s | sed 's/$/\"/g')\n  s=$(echo $s | sed 's/^/\"/')\n  s=$(echo\
    \ $s | sed 's/$/\"/g')\n  s=$(echo $s | sed 's/^/\"/')\n  s=$(echo $s | sed 's/$/\"\
    /g')\n  s=$(echo $s | sed 's/^/\"/')\n  s=$(echo $s | sed 's/$/\"/g')\n  s=$(echo\
    \ $s | sed 's/^/\"/')\n  s=$(echo $s | sed 's/$/\"/g')\n  s=$(echo $s | sed 's/^/\"\
    /')\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate\
    \ \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\"\
    \ \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n\
    \    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\"\
    \ \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=\"$1\"\n  local n=\"$2\"\n  # fill these in\n  local words=\"\
    \"\n  \n  # TODO: write code here\n  return $words\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local t\n    local arr\n    local i\n\
    \    arr=()\n    t=$(grep -i -w $s words.txt)\n    for ((i=0; i<${#t}; i++));\
    \ do\n        if [[ ${t[i]:0:1} == \"a\" ]] || [[ ${t[i]:0:1} == \"e\" ]] || [[\
    \ ${t[i]:0:1} == \"i\" ]] || [[ ${t[i]:0:1} == \"o\" ]] || [[ ${t[i]:0:1} == \"\
    u\" ]] || [[ ${t[i]:0:1} == \"y\" ]] || [[ ${t[i]:0:1} == \"l\" ]]; then\n   \
    \         arr+=(${t[i]})\n        fi\n    done\n    arr=(\"${arr[@]}\" | sort\
    \ | uniq)\n    echo ${arr[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") =\
    \ \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphxqwk4at.sh: line 34: syntax error near unexpected token `|''

    /tmp/tmphxqwk4at.sh: line 34: `    arr=("${arr[@]}" | sort | uniq)''

    /tmp/tmphxqwk4at.sh: line 36: syntax error near unexpected token `}''

    /tmp/tmphxqwk4at.sh: line 36: `}''

    '
  stdout: '

    '
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local first_word=\"$(echo $1 | cut -d\\\" -f1)\"\n    local n=\"$2\"\n\
    \    local result=\"()\"\n\n    local counter=0\n    while [[ \"$first_word\"\
    \ =~ (^[[:upper:]]+[[:upper:]]+$) ]]; do\n        counter=$((counter+1))\n   \
    \     local second_word=\"$(echo $1 | cut -d\\\" -f$counter)\"\n\n        # Check\
    \ if word contains exactly $n consonants\n        if [[ \"$(grep -c \"[^[:upper:]$second_word]\"\
    \ <<< \"$1\")\" -eq \"$n\" ]]; then\n            result+=\"$second_word\"\n  \
    \      fi\n        local first_word=\"$(echo $1 | cut -d\\\" -f$((counter-1)))\"\
    \n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    select_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str_=$1\n    local number_=$2\n    local output_array=()\n    local\
    \ current_word\n    local index_of_current_word\n\n    for current_word in ${str_//[!a-zA-Z\
    \ ]/ }\n    do\n        index_of_current_word=$( echo $current_word | sed 's/\
    \ //g' | wc -l )\n        if [ $index_of_current_word -lt $number_ ]\n       \
    \ then\n            output_array+=(\"$current_word\")\n        fi\n    done\n\n\
    \    echo ${output_array[*]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") =\
    \ \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=$( python -c \"import re,sys;s=\\\"$1\\\";n=int(\\\"$2\\\"\
    );[w for w in re.findall('[^ ]+', s) if ''.join(re.findall(r'(.*?)($)', w)).isalnum()\
    \ and len(w)==n ]\" )\n    if [ \"$words\" ]; then\n        echo \"$words\"\n\
    \    else\n        echo \"\"\n    fi\n}\n\ncandidate() {\n    select_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n\
    TypeError: sequence item 0: expected string, tuple found\n"
  stdout: ''
  timestamp: 1660059486
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    if [[ ${#s} -gt ${#s}n ]]\n    then\n\
    \        echo \"Not valid arguments\"\n        return 1\n    fi\n    \n    words=($(echo\
    \ $s | sed \"s/ //g\" |sed \"s/[^a-zA-Z ]//g\" |sed \"s/ /,/g\"))\n    \n    for\
    \ word in ${words[@]}; do\n        if [[ ${#word} -ne ${#s}n ]]\n        then\n\
    \            continue\n        fi\n    \n        wordlist=()\n        wordlist=$(echo\
    \ $word | sed \"s/,//g\")\n        wordlist=$(echo $wordlist | sed \"s/,/ /g\"\
    )\n        wordlist=$(echo $wordlist | sed \"s/ //g\")\n        \n        for\
    \ word in ${wordlist[@]}; do\n            if [[ ${#word} -ne ${#s}n ]]\n     \
    \       then\n                continue\n            fi\n        \n           \
    \ wordlist2=($wordlist)\n        \n            for word in ${wordlist2[@]}; do\n\
    \                if [[ ${#word} -ne ${#s}n ]]\n                then\n        \
    \            continue\n                fi\n        \n                wordlist3=($wordlist)\n\
    \            \n                for word in ${wordlist3[@]}; do\n             \
    \       if [[ ${#word} -ne ${#s}n ]]\n                    then\n             \
    \           continue\n                    fi\n            \n                 \
    \   wordlist4=($wordlist)\n            \n                    for word in ${wordlist4[@]};\
    \ do\n                        if [[ ${#word} -ne ${#s}n ]]\n                 \
    \       then\n                            continue\n                        fi\n\
    \                    \n                        wordlist5=($wordlist)\n       \
    \     \n                        for word in ${wordlist5[@]}; do\n            \
    \                if [[ ${#word} -ne ${#s}n ]]\n                            then\n\
    \                                continue\n                            fi\n  \
    \                      \n                            wordlist6=($wordlist)\n \
    \           \n                            for word in ${wordlist6[@]}; do\n  \
    \                              if [[ ${#word} -ne ${#s}n ]]\n                \
    \                then\n                                    continue\n        \
    \                        fi\n                            \n                  \
    \              wordlist7=($wordlist)\n            \n                         \
    \       for word in ${wordlist7[@]}; do\n                                    if\
    \ [[ ${#word} -ne ${#s}n ]]\n                                    then\n      \
    \                                  continue\n                                \
    \    fi\n            \n                                    wordlist8=($wordlist)\n\
    \            \n                                    for word in ${wordlist8[@]};\
    \ do\n\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate\
    \ \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\"\
    \ \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n\
    \    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\"\
    \ \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr8vnb4sj.sh: line 101: syntax error near unexpected token `}''

    /tmp/tmpr8vnb4sj.sh: line 101: `}''

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tlocal string=\"$1\"\n\tlocal number_=\"$2\"\n\n\tif [ -z \"$string\" ]\n\
    \tthen\n\t\techo \"$1\"\n\telse\n\t\tword_array=$(grep \"^$string\" words.txt\
    \ | cut -d \" \" -f 2)\n\n\t\tif [ \"$number_\" -lt \"$word_array\" ]\n\t\tthen\n\
    \t\t\techo \"$word_array\"\n\t\telse\n\t\t\techo \"$word_array\"\n\t\tfi\n\tfi\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: words.txt: No such file or directory

    /tmp/tmpvokn4zk0.sh: line 31: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"${1}\"\n    local n=\"${2}\"\n    local i=0 j=0\n    local\
    \ result=()\n    local word=''\n    local letter=''\n    \n    while [[ $n -gt\
    \ 0 ]]; do\n        if [[ $n -eq 1 ]]; then\n            if [[ $string =~ $letter\
    \ ]]; then\n                result+=(\"$letter\")\n                letter=''\n\
    \            else\n                result+=(\"$word\")\n                word=''\n\
    \            fi\n        fi\n        if [[ $i -eq ${#string} ]]; then\n      \
    \      break\n        fi\n        \n        letter=\"${string:$i:1}\"\n      \
    \  if [[ \"$letter\" == *[!bcdfghjklmnpqrstvwxyz]* ]]; then\n            word+=$letter\n\
    \        else\n            result+=(\"$word\")\n            word=''\n        fi\n\
    \        ((i++))\n        ((j++))\n    done\n    \n    echo \"${result[@]}\"\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local word\n    local list_words=()\n\
    \n    if [[ \"$string\" == \"\" ]]; then\n        list_words=()\n    else\n  \
    \      word=$(grep -Eo '\\w+' <<< $string)\n        list_words=(${word:$((number-1))})\n\
    \    fi\n\n    echo \"$list_words\"\n}\n\ncandidate() {\n    select_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"\
    4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"\
    Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n \
    \   [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"\
    Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1 n=$2\n    local words=()\n    local word=''\n\n    if [[ $s\
    \ ]]; then\n        words=($(sed \"s/$/ /g\" <<< ${s} | sed 's/ //g' |\n     \
    \            grep -o -P '[^aeiou]*'|\n                 sed 's/^[^aeiou]*//g' |\n\
    \                 sed 's/[^aeiou]*$//g'))\n    fi\n\n    if [[ $n ]]; then\n \
    \       words=($(echo $words | sort -n | uniq))\n    fi\n    \n    echo $words\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=\"$1\" n=\"$2\"\n    if [ -z \"$s\" ]; then\n        echo \"\
    []\"\n    else\n        echo $( cut -d' ' -f2- <<< $s | sed \"s/${s%$s}//g\" |\
    \ sed \"s/${s}//g\" | sed 's/ //g' )\n    fi\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 0: no previous regular expression

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words\n    words=$(grep -Eo \"\
    [[:alpha:]]+(?=\\s)$n\" <<< \"$s\")\n    echo ${words//$'\\n'/} >&2\n    return\
    \ 0\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate\
    \ \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\"\
    \ \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n\
    \    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\"\
    \ \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local s=$1\n  local n=$2\n  local words=$(IFS=' '; echo \"$s\" | tr ' '\
    \ '\\n' | grep -n -w -f <(\n    awk -v n=${n} '{\n      if (length($0) == n) {\n\
    \        print $0\n      }\n    }'\n  ))\n  echo \"${words[*]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n\tword=\"\"\n\tn=$2\n\tfor i in $1 \n\tdo\n\t\tif [ $n = 0 ]\n\t\tthen\n\t\
    \t\tword=\"$word $i\"\n\t\telse\n\t\t\tif [ $n -gt $i ]\n\t\t\tthen\n\t\t\t\t\
    word=\"$word $i\"\n\t\t\tfi\n\t\tfi\n\tdone\n\techo $word\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6ovw_a27.sh: line 30: [: Mary: integer expression expected

    /tmp/tmp6ovw_a27.sh: line 30: [: had: integer expression expected

    /tmp/tmp6ovw_a27.sh: line 30: [: a: integer expression expected

    /tmp/tmp6ovw_a27.sh: line 30: [: little: integer expression expected

    /tmp/tmp6ovw_a27.sh: line 30: [: lamb: integer expression expected

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local s=$1\n  local n=$2\n  if [ -z \"$s\" ]\n  then\n    return \"\"\n\
    \  else\n    IFS=$'\\n' \n    set -- $s\n    while [[ $n -lt ${#line[@]} ]]\n\
    \    do\n      if [[ $n -eq ${#line[@]} ]]\n      then\n        echo -n $line\n\
    \      else\n        echo $line\n      fi\n      let n=n+1\n      IFS=$'\\n' \n\
    \      set -- $s\n    done\n  fi\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local s=$1\n  local n=${2:-1}\n  local words=$( echo $s | egrep -o \".+?$n\"\
    \ | sed 's/\\s/,/g' )\n  if [[ ${#words} -ne 0 ]]; then\n    echo \"${words}\"\
    \n  fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate\
    \ \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\"\
    \ \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n\
    \    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\"\
    \ \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local s=\"$1\"\n  local n=\"$2\"\n  local list=\"\"\n  local i\n  \n  if\
    \ [[ -z \"$s\" ]]; then\n    return \n  fi\n  \n  for (( i=0; i<${#s}; i++ ));\
    \ do\n    if [[ \"${s:i:1}\" =~ ^([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])\
    \ ]]; then\n      list=\"${list} ${s:i:1}\"\n    fi\n  done\n  \n  if [[ \"${#list}\"\
    \ -lt \"$n\" ]]; then\n    return \n  fi\n  \n  for (( i=0; i<${#list}; i++ ));\
    \ do\n    if [[ \"${list:i:1}\" =~ ^([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])$\
    \ ]]; then\n      list=\"${list:i:3}\"\n    fi\n  done\n  \n  for (( i=0; i<${#list};\
    \ i++ )); do\n    if [[ \"${list:i:1}\" =~ ^([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])$\
    \ ]]; then\n      list=\"${list:i:4}\"\n    fi\n  done\n  \n  for (( i=0; i<${#list};\
    \ i++ )); do\n    if [[ \"${list:i:1}\" =~ ^([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])$\
    \ ]]; then\n      list=\"${list:i:5}\"\n    fi\n  done\n  \n  for (( i=0; i<${#list};\
    \ i++ )); do\n    if [[ \"${list:i:1}\" =~ ^([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])$\
    \ ]]; then\n      list=\"${list:i:6}\"\n    fi\n  done\n  \n  for (( i=0; i<${#list};\
    \ i++ )); do\n    if [[ \"${list:i:1}\" =~ ^([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])([[:upper:]])$\
    \ ]]; then\n      list=\"${list:i:7}\"\n    fi\n  done\n  \n  for (( i=0; i<${#list};\
    \ i++ )); do\n    if [[ \"${list:i:1}\" =~ ^([[:upper:]])([[:upper:]])([\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmsvlvmj7.sh: line 72: unexpected EOF while looking for matching
    `)''

    /tmp/tmpmsvlvmj7.sh: line 91: unexpected argument to conditional binary operator

    /tmp/tmpmsvlvmj7.sh: line 91: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059486
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1;\n    local n=$2;\n    local words=\"\";\n    while [[ $n\
    \ -gt 0 ]]; do\n        words=${s// /};\n        if [[ ${#words} -eq $n ]]; then\n\
    \            if [[ -z $s ]]; then\n                words=\"$words\";\n       \
    \     else\n                words=\"$words,$s\";\n            fi;\n        fi;\n\
    \        s=${s//[^a-zA-Z ]/};\n        ((n--));\n    done;\n    echo \"$words\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059486
