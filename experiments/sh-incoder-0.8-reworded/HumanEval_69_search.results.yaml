language: sh
name: HumanEval_69_search
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local vals=\"$1\"\n  local result=\"\
    \"\n\n  for val in $vals; do\n    local count=0\n    for char in $val; do\n  \
    \    ((count++))\n    done\n\n    if [ \"$count\" -gt $val ]; then\n      result=\"\
    $val\"\n    fi\n  done\n\n  echo $result\n}\n\ncandidate() {\n    search \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n  \
    \  [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"\
    -1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list=\"$1\"\n    local max_value\
    \ max_index\n    local -a counts\n    local max_count\n    local count\n    local\
    \ value\n\n    # Store the counts of each value in an array.\n    # Ignore the\
    \ number 0 because it has no count\n    for value in ${list}; do\n\t((counts[${value}]++))\n\
    \    done\n\n    # Iterate through the array\n    for index in ${!counts[*]};\
    \ do\n\tcount=${counts[$index]} # count of the value\n\tif [[ $count -gt $max_count\
    \ ]]; then\n\t    max_count=$count\n\t    max_value=$index\n\tfi\n    done\n\n\
    \    echo \"$max_value\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\t# Initialize a counter for each\
    \ unique integer seen in the list, \n\t# initialized to 1.\n\tdeclare -A count_arr\n\
    \t\n\t# For each element in the list, increment the count for each unique integer\
    \ \n\t# seen so far.  If the count reaches 4, return it, otherwise set it to 1.\n\
    \tfor i in $1 \n\tdo\n\t\tcount_arr[$i]=( $(grep -Fq $i <<< \"$1\") - 1 )\n\t\
    done\n\t\n\tgrep -v \"^#\" <<< \"$1\"\n\t\n\t# Iterate through the keys in the\
    \ count_arr array, returning -1 (not found) if no such \n\t# value is found.\n\
    \tfor k in ${!count_arr[@]}\n\tdo\n\t\tif [ ${count_arr[$k]} -gt 4 ]\n\t\tthen\n\
    \t\t\techo \"$k\"\n\t\telse\n\t\t\techo \"-1\"\n\t\tfi\n\tdone\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_cncetr_.sh: line 24: count_arr[$i]: cannot assign list to array
    member

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local -a arr=( $1 )\n    local\
    \ max=0\n    local count=0\n    local maxval=0\n    local i\n    for ((i=0; i\
    \ < ${#arr[@]}; i++))\n    do\n        count=$(( count + arr[i] ))\n        if\
    \ (( count > max ))\n        then\n            max=count\n            maxval=arr[i]\n\
    \        fi\n    done\n    if (( maxval == 0 ))\n    then\n        echo -1\n \
    \   else\n        echo ${max}\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list=\"$1\"\n    local freq\n\
    \    for freq in \"${list[@]}\"; do\n        if [[ ${freq} -gt ${freq} ]]; then\n\
    \            echo \"${freq}\"\n            exit 0\n        fi\n    done\n    exit\
    \ -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdgejfx7l.sh: line 19: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  # This solution uses a loop to search\
    \ through all the elements of the list.\n  local -n arr=$1 res=-1\n  for n in\
    \ \"${arr[@]}\"; do\n    if [[ \"$n\" -gt 0 ]]; then\n      ((res=$n))\n     \
    \ break\n    fi\n  done\n  return \"$res\"\n}\n\ncandidate() {\n    search \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpz1ekx4hd.sh: line 17: local: `5 5 5 5 1'': invalid variable name
    for name reference

    /tmp/tmpz1ekx4hd.sh: line 17: local: `-1'': invalid variable name for name reference

    /tmp/tmpz1ekx4hd.sh: line 24: return: : numeric argument required

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  if [ $(echo $1 | awk '{print $1}'\
    \ | sort -n | uniq -c | sort -nrk 2 | head -1 | awk '{print $2}') -gt 0 ];then\n\
    \   echo $1;\n  else\n   echo -1;\n  fi\n}\n\ncandidate() {\n    search \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n  \
    \  [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"\
    -1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list=$1\n  local num=$(echo\
    \ $list | tr \" \" \"\\n\" | sort | uniq)\n  local freq\n  local max\n  local\
    \ count\n  for (( i = 0; i < ( ${#num} -1 ) ; i++ )); do\n    freq=`grep ${num[$i]}\
    \ $2 | wc -l`\n    if (( freq != 0 )); then\n      if (( count > freq )); then\n\
    \        count=freq\n        max=${num[$i]}\n      fi\n    fi\n  done\n  echo\
    \ $max\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'Usage: grep [OPTION]... PATTERNS [FILE]...

    Try ''grep --help'' for more information.

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\tlocal -n arr=$1\n\tlocal max=0\n\
    \tlocal i=0\n\twhile [ $i -lt ${#arr[@]} ]; do\n\t\tif [[ ${arr[$i]} -gt 0 ]];\
    \ then\n\t\t\tif [[ ${max} -eq 0 ]]; then\n\t\t\t\tmax=${arr[$i]}\n\t\t\t\ti=$i\n\
    \t\t\telif [[ ${arr[$i]} -gt $max ]]; then\n\t\t\t\tmax=${arr[$i]}\n\t\t\t\ti=$i\n\
    \t\t\tfi\n\t\tfi\n\t\ti=$((i+1))\n\tdone\n\n\tif [[ $max -eq 0 ]]; then\n\t\t\
    return -1\n\telse\n\t\treturn $max\n\tfi\n}\n\ncandidate() {\n    search \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n  \
    \  [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"\
    -1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpri_skwy1.sh: line 16: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list=$(echo \"$1\" | sed\
    \ -e 's/ /\\n/g')\n    for i in $(seq 1 $(echo \"$list\" | wc -l))\n    do\n \
    \       if [[ $i -gt 0 ]]; then\n            grep $i $list\n            [[ \"\
    $?\" -eq 0 ]] && echo \"$i\"\n        fi\n    done\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local freq\n  freq=\"${1-}\"\n \
    \ freq=\"$(echo \"${freq}\" | tr \" \" , | sed -e 's/,$//')\"\n  sort -n | uniq\
    \ -c  > \"$HOME/.search_count.txt\"\n  local greatest\n  local greatest_val\n\
    \  local greatest_num\n  grep \"^${freq}$\" \"$HOME/.search_count.txt\" | tail\
    \ -n 1 | cut -d ' ' -f 1\n  grep \"^${freq}$\" \"$HOME/.search_count.txt\" | tail\
    \ -n 1 | cut -d ' ' -f 2 | tr -d ','\n  grep \"^${freq}$\" \"$HOME/.search_count.txt\"\
    \ | tail -n 1 | cut -d ' ' -f 2 | tr -d ',' | tail -n 1\n  grep \"^${freq}$\"\
    \ \"$HOME/.search_count.txt\" | tail -n 1 | cut -d ' ' -f 2 | tr -d ',' | tail\
    \ -n 1 \n  grep \"^${freq}$\" \"$HOME/.search_count.txt\" | tail -n 1 | cut -d\
    \ ' ' -f 2 | tr -d ',' | tail -n 1 \n  grep \"^${freq}$\" \"$HOME/.search_count.txt\"\
    \ | tail -n 1 | cut -d ' ' -f 2 | tr -d ',' | tail -n 1 \n  grep \"^${freq}$\"\
    \ \"$HOME/.search_count.txt\" | tail -n 1 | cut -d ' ' -f 2 | tr -d ',' | tail\
    \ -n 1 \n  grep \"^${freq}$\" \"$HOME/.search_count.txt\" | tail -n 1 | cut -d\
    \ ' ' -f 2 | tr -d ',' | tail -n 1 \n  grep \"^${freq}$\" \"$HOME/.search_count.txt\"\
    \ | tail -n 1 | cut -d ' ' -f 2 | tr -d ',' | tail -n 1 \n  grep \"^${freq}$\"\
    \ \"$HOME/.search_count.txt\" | tail -n 1 | cut -d ' ' -f 2 | tr -d ',' | tail\
    \ -n 1 \n  grep \"^${freq}$\" \"$HOME/.search_count.txt\" | tail -n 1 | cut -d\
    \ ' ' -f 2 | tr -d ',' | tail -n 1 \n  grep \"^${freq}$\" \"$HOME/.search_count.txt\"\
    \ | tail -n 1 | cut -d ' ' -f 2 | tr -d ',' | tail -n 1 \n  grep \"^${freq}$\"\
    \ \"$HOME/.search_count.txt\" | tail -n 1 | cut -d ' ' -f \n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=27 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=25 encoding='utf-8'>
  timestamp: 1660058395
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local L=$1\n    local T=$2\n \
    \   local S\n    local D\n    local N\n    local T\n    local S\n    local D\n\
    \    local N\n    local T\n    local S\n    local D\n    local N\n    local T\n\
    \    local S\n    local D\n    local N\n    local T\n    local S\n    local D\n\
    \    local N\n    local T\n    local S\n    local D\n    local N\n    local T\n\
    \    local S\n    local D\n    local N\n    local T\n    local S\n    local D\n\
    \    local N\n    local T\n    local S\n    local D\n    local N\n    local T\n\
    \    local S\n    local D\n    local N\n    local T\n    local S\n    local D\n\
    \    local N\n    local T\n    local S\n    local D\n    local N\n    local T\n\
    \    local S\n    local D\n    local N\n    local T\n    local S\n    local D\n\
    \    local N\n    local T\n    local S\n    local D\n    local N\n    local T\n\
    \    local S\n    local D\n    local N\n    local T\n    local S\n    local D\n\
    \    local N\n    local T\n    local S\n    local D\n    local N\n    local T\n\
    \    local S\n    local D\n    local N\n    local T\n    local S\n    local D\n\
    \    local N\n    local T\n    local S\n    local D\n    local N\n    local T\n\
    \    local S\n    local D\n    local N\n    local T\n    local S\n    local D\n\
    \    local N\n    local T\n    local S\n    local D\n    local N\n    local T\n\
    \    local S\n    local D\n    local N\n    local T\n    local S\n    local D\n\
    \    local N\n    local T\n    local S\n    local D\n    local N\n    local T\n\
    \    local S\n    local D\n    local N\n    local T\n    local S\n    local D\n\
    \    local N\n    local T\n    local S\n    local D\n    local N\n    local T\n\
    \    local S\n    local D\n    local N\n    local T\n    local S\n\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local string=${1:-}\n    local\
    \ array=(${string//[^0-9]/ })\n    local count\n    local max\n    for i in \"\
    ${array[@]}\"; do\n        count=\"$(echo \"${array[@]}\" | grep -c $i)\"\n  \
    \      if [[ \"$count\" -gt \"$i\" ]]; then\n            max=$i\n        fi\n\
    \    done\n    echo $max\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list=\"${1}\"\n  local freq=0\n\
    \  local max=0\n  local maxElement=\"-1\"\n  local element=\"$2\"\n  local word\n\
    \  local i=0\n  while [ \"${#list}\" -gt 0 ] ; do\n    word=\"${list[i]}\"\n \
    \   if [ \"$freq\" -gt \"${freq}\" ] ; then # If the frequency of the integer\
    \ is greater than or equal to the frequency of the integer\n      freq=\"${freq}\"\
    \n      max=\"${max}\"\n    fi\n    if [ \"$max\" -gt \"$freq\" ] # If the greatest\
    \ integer that has a frequency greater than or equal to the frequency of the integer\n\
    \    then\n      max=\"${max}\"\n      maxElement=\"${element}\"\n    fi\n   \
    \ freq=\"${freq}\" # Updated frequency\n    element=\"${list[i]}\" # Updated element\n\
    \    i=$(( i + 1 )) # Increment the index\n  done\n  echo \"$maxElement\"\n}\n\
    \ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=16 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=9 encoding='utf-8'>
  timestamp: 1660058395
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list\n    local greatest\n\
    \    local frequency\n    list=$1\n    if ! [ -z \"$list\" ]; then\n        frequency=`echo\
    \ $list | tr ' ' '\\n' | sort | uniq`\n        greatest=`echo $frequency | sort\
    \ -rn | head -1`\n        if [ \"$greatest\" != \"-1\" ]; then\n            echo\
    \ -n $greatest\n        else\n            echo -1\n        fi\n    else\n    \
    \    echo -1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local -n arr=$1\n    for i in\
    \ ${arr[@]};\n    do\n        [[ \"$i\" -eq \"$i\" && \"$i\" -gt 0 ]] || return\
    \ -1\n    done\n    return $(($#-${#arr[@]} > 0 ? $#-${#arr[@]} : 0))\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0d6wwruy.sh: line 16: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  # Scan the given list for positive\
    \ integers and count the frequency of each integer\n  local integers\n  integers=$(echo\
    \ $1 | sed \"s/ /\\n/g\")\n  integers=$(echo $integers | sed \"s/ /\\n/g\" | sed\
    \ \"s/^/$(echo -n $(echo $integers | wc -w) - 1)/\")\n  integers=$(echo $integers\
    \ | sed \"s/ /\\n/g\" | sort -u)\n  \n  local greatest\n  greatest=-1\n  local\
    \ count\n  local countArray\n  countArray=$(echo $integers | tr \" \" \"\\n\"\
    \ | sort | uniq -c)\n  countArray=$(echo $countArray | tr \"\\n\" \" \")\n  \n\
    \  for i in $(seq 0 $((${#countArray[@]}-1)) ); do\n    count=$(echo $countArray[$i]\
    \ | sed 's/ //g')\n    if [ $(echo $count | sed 's/^//g') -gt $((${#integers[@]}))\
    \ ]; then \n      greatest=$count\n    fi\n  done\n  echo $greatest\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphsm96ylh.sh: line 31: [: 1-111115150: integer expression expected

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    echo \"$1\" | sed 's/ /\\n/g'\
    \ | uniq -c | sort -nr | grep '^ *[0-9] *$' | head -1\n}\n\ncandidate() {\n  \
    \  search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local array value\n  array=$1\n\
    \  value=${array[@]:0:1}\n  local i result\n  for ((i=0; i<${#array[@]}; i++));\
    \ do\n    if (( ${array[$i]} > 0 )); then\n      if (( ${array[$i]} > value ));\
    \ then\n        value=${array[$i]}\n        result=${array[$i]}\n      fi\n  \
    \  fi\n  done\n  echo $result\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx0l34l16.sh: line 21: ((: 5 5 5 5 1 > 0 : syntax error in expression
    (error token is "5 5 5 1 > 0 ")

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local search=(\"${!1}\")\n  local\
    \ max=$(cat \"$2\" | grep -n \"${search[0]}\" | tail -1 | awk '{ print $1 }')\n\
    \  if [ -z \"$max\" ]; then\n    return -1\n  fi\n  local count=0\n  while [ \"\
    $max\" -gt \"$1\" ]; do\n    local max=$(cat \"$2\" | grep -n \"${search[$count]}\"\
    \ | tail -1 | awk '{ print $1 }')\n    count=$(($count + 1))\n  done\n  echo \"\
    $max\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk6qoxpye.sh: line 16: 5 5 5 5 1: invalid variable name

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list=\"$1\"\n  # sort list\
    \ with reverse order\n  list=$(echo $list | tr ' ' '\\n' | sort -r)\n  local val=\"\
    \"\n  local count=0\n  local greatest=\"-1\"\n  # loop through the list\n  for\
    \ val in $list; do\n    count=$(echo $list | grep -w $val)\n    greatest=$(echo\
    \ $list | grep -w $val | wc -l)\n    if [ $count -gt $greatest ]; then\n     \
    \ greatest=$count\n    fi\n  done\n  echo $greatest\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4k3q551f.sh: line 26: [: too many arguments

    /tmp/tmp4k3q551f.sh: line 26: [: too many arguments

    /tmp/tmp4k3q551f.sh: line 26: [: too many arguments

    /tmp/tmp4k3q551f.sh: line 26: [: too many arguments

    /tmp/tmp4k3q551f.sh: line 26: [: too many arguments

    /tmp/tmp4k3q551f.sh: line 26: [: too many arguments

    /tmp/tmp4k3q551f.sh: line 26: [: too many arguments

    /tmp/tmp4k3q551f.sh: line 26: [: too many arguments

    /tmp/tmp4k3q551f.sh: line 26: [: too many arguments

    /tmp/tmp4k3q551f.sh: line 26: [: too many arguments

    /tmp/tmp4k3q551f.sh: line 26: [: too many arguments

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    arr=$1\n    max=0\n    for num\
    \ in $arr; do\n        [[ $num > max ]] && max=$num\n    done\n    echo $max\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    grep -o \"[[:digit:]]+\" \"$1\"\
    | sort -n | uniq -c | awk -F \"[[:space:]]+\" '{\n        if($1>=$2) print $1\n\
    \    }'\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: 5 5 5 5 1: No such file or directory

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    \n    local string=${1%% *}\n\
    \    local stringArray=(${string//[[:space:]]/ })\n    local maxValue=${stringArray[@]}\n\
    \    local countValue=0\n    \n    for element in $stringArray\n    do\n     \
    \   local countElement=0\n        local elementValue=${element}\n        \n  \
    \      for elementValue in ${stringArray[@]}\n        do\n            if [ \"\
    $elementValue\" == \"$element\" ]\n            then\n                countElement=$((countElement\
    \ + 1))\n            fi\n        done\n        \n        if [ \"$countElement\"\
    \ -gt \"$countValue\" ]\n        then\n            countValue=$countElement\n\
    \            maxValue=$elementValue\n        fi\n    done\n    \n    echo \"$maxValue\"\
    \n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\t# Split lines by space\n\tmapfile\
    \ -t lines < <(echo -e \"$1\")\n\n\t# Store the result in a variable \n\tlocal\
    \ max=0\n\tfor line in \"${lines[@]}\"; do\n\t\t(( ${#line} )) && let \"max +=\
    \ $line\"\n\tdone\n\n\t[[ -z $max ]] && return -1\n\n\t# Return the greatest integer\n\
    \t[[ -z ${lines[$max]} ]] && return -1\n\techo $max\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxiqwh_k5.sh: line 22: let: max += 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local n=$1\n  local x y z\n  local\
    \ max=$(nix search $1)\n  for (( z=1; z<=n; z++ )); do\n    x=$( nix search \"\
    -$z $1\" | tr -d \" \" )\n    y=$( nix search \"-$x $1\" | tr -d \" \" )\n   \
    \ if (( $x > $max )); then\n      max=$x\n    fi\n    if (( $y > $max )); then\n\
    \      max=$y\n    fi\n  done\n  if (( max > 0 )); then\n    echo \"$max\"\n \
    \ else\n    echo \"-1\"\n  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpct8ass93.sh: line 18: nix: command not found

    /tmp/tmpct8ass93.sh: line 19: ((: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local i x\n  local x y\n  local\
    \ max\n  local a\n  for ((i=0; i<${#1}; i++)); do\n    x=${1:$i:1}\n    if [[\
    \ $x =~ ^[0-9]+$ ]]; then\n      a=${!x}\n      if [[ $a -gt 0 ]]; then\n    \
    \    (( x > max )) && max=$x\n      else\n        (( x < max )) && max=$x\n  \
    \    fi\n    fi\n  done\n  [[ $max -gt 0 ]] && echo $max\n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpddbtu5nd.sh: line 24: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list=$(echo $1 | tr \" \"\
    \ \"\\n\")\n    # split list into array containing each number in a line\n   \
    \ local arr=($(echo $list | tr \" \" \" \"))\n    # store greatest value that\
    \ has a frequency greater than or equal to the value of the integer\n    local\
    \ max=0\n    # iterate through each item in list\n    for number in ${arr[@]};\
    \ do\n        # check if number is greater than zero\n        if [[ -n $number\
    \ ]]; then\n            # store value of number in max\n            (( max = number\
    \ ))\n            # remove number from list to check for next number\n       \
    \     arr=(\"${arr[@]:+$arr[@]}\" \"$number\")\n        fi\n    done\n    # check\
    \ if max == $number\n    if [[ $max -eq $number ]]; then\n        # max == 0\n\
    \        return 1\n    elif [[ $max -gt 0 ]]; then\n        # check if value is\
    \ a positive integer and has a frequency greater than or equal to the value of\
    \ max\n        if [[ -z $max ]] || [[ \"$max\" -lt 0 ]]; then\n            # return\
    \ -1\n            return -1\n        else\n            # otherwise return max\n\
    \            return $max\n        fi\n    else\n        # return -1\n        return\
    \ -1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  arr=( $1 )\n  local max=$(( ${#arr[@]}\
    \ -1 ))\n  local maxcnt=0\n  local maxval=$(( ${arr[@]} -1 ))\n  local i\n  for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n    if (( $i == 0 )); then\n      maxcnt=0\n\
    \      maxval=$(( ${arr[@]} -1 ))\n    fi\n    if [[ \"${arr[$i]}\" -gt \"0\"\
    \ ]]; then\n      (( maxcnt = maxcnt + 1 ))\n      maxval=$(( ${arr[@]} -1 ))\n\
    \      if (( maxcnt == max )); then\n        max=$(( ${#arr[@]} - 1 ))\n     \
    \ fi\n    fi\n  done\n  echo \"${maxval}\"\n}\n\ncandidate() {\n    search \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp34nmhyxw.sh: line 19: 5 5 5 5 1 -1 : syntax error in expression
    (error token is "5 5 5 1 -1 ")

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local a=\"$1\"\n  local n=\"$(sort\
    \ -n \"$a\" | wc -l)\"\n  if [ \"$n\" -eq 0 ]; then\n    return -1\n  fi\n  local\
    \ max=\"$n\"\n  local i\n  for i in $(seq 1 $n); do\n    local a=\"${a} $i\"\n\
    \    local n=\"$(sort -n \"$a\" | wc -l)\"\n    local v=\"$(sort -n \"$a\" | cut\
    \ -d\" \" -f1)\"\n    if [ \"$n\" -gt \"$max\" ]; then\n      max=$n\n    fi\n\
    \    if [ \"$v\" -gt \"$i\" ]; then\n      return $i\n    fi\n  done\n  return\
    \ -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: ''5 5 5 5 1'': No such file or directory

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local nums=$1\n    local freqs=\"\
    \"\n    local max=\"\"\n    local maxfreq=0\n    local minfreq=10000000000\n \
    \   local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=-1\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=10000000000\n\
    \    local min=\"-1\"\n    local maxlen=1\n    local maxfreq=0\n    local minfreq=\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local n=$1 f=${2:-1}\n    local\
    \ max=-1 k=0\n    for x in ${n}; do\n        ((k+=x))\n        if ((k>f)) ; then\n\
    \            ((max=x))\n        fi\n    done\n    if [[ $max == -1 ]] ; then echo\
    \ -1 ; else echo $max ; fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local str=\"$1\"\n  local tmp=${str#\"\
    $1\"} # Get the part before the first space\n  local tmp=${tmp%% *} # Remove everything\
    \ after the space\n  local freq=0\n  for i in $str; do\n    (( freq++ ))\n  done\n\
    \  echo $tmp\n  if [ $freq -gt $tmp ]; then\n    echo $tmp\n  else\n    echo -1\n\
    \  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxz7cdep4.sh: line 24: [: 5: unary operator expected

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local str=$1\n    local arr=()\n\
    \    local i=0 freq\n    while [ $i -le $#str ]; do\n        arr+=( ${str:$i:1}\
    \ )\n        (( i++ ))\n    done\n    max=${arr[0]}\n    for idx in \"${arr[@]:1}\"\
    ; do\n        if [ $(echo \"$idx > $max\" | bc ) -eq 1 ]; then\n            max=$(echo\
    \ \"$idx\" | bc )\n        fi\n    done\n    echo \"$max\"\n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbcbke3ap.sh: line 19: [: 1str: integer expression expected

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\tlocal list=\"$1\"\n\tlocal max=$((0))\n\
    \tlocal freq=-1\n\n\tlocal i\n\tfor i in $list; do\n\t\tif [[ $i -gt 0 ]]; then\n\
    \t\t\tif [[ $freq -gt $i ]]; then\n\t\t\t\tfreq=$i\n\t\t\t\tmax=$i\n\t\t\tfi\n\
    \t\tfi\n\tdone\n\n\tif [[ $freq -gt 0 ]]; then\n\t\techo \"$max\"\n\telse\n\t\t\
    echo \"-1\"\n\tfi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local i freq\n  [[ -z \"$1\" ]]\
    \ && return -1\n  for ((i=1; i<=$(( ${#1} - 1 )); i++)); do\n    if [[ -z \"$(grep\
    \ -w -n \"$1\" <<< ${!i})\" ]]; then\n      freq=-1\n      break\n    else\n \
    \     freq=$(grep -w -n \"$1\" <<< ${!i})\n      break\n    fi\n  done\n  return\
    \ $freq\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpj6eh3ba6.sh: line 27: return: 1:5: numeric argument required

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local freq=$1\n  local list=\"${freq//[!0-9]/}\"\
    \n  local max=\"-1\"\n  local i\n  local count\n  for (( i=1; i <= ${#list}; i++\
    \ )); do\n    count=$(echo \"${list}\" | grep -c -E \"^${i}$\")\n    if [ \"${count}\"\
    \ -ge \"${#list}\" ]; then\n      max=${i}\n    fi\n  done\n  echo \"${max}\"\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local array arrayIndex\n  local\
    \ i temp\n  local maxFreq maxNum\n  local num\n  \n  # Create an array of integers\n\
    \  array=( $(echo \"$1\" | sed \"s/ /, /g\") )\n  arrayIndex=0\n\n  for i in \"\
    ${array[@]}\"; do\n    temp=$(echo \"$i\" | sed \"s/ /, /g\" | tr \" \" \"\\n\"\
    ) # Remove space and new line characters\n    IFS=',' read -ra array <<< \"$temp\"\
    \ # Split on commas and add space back\n    arrayIndex=$(( ${#array[*]} > arrayIndex\
    \ ? ${#array[*]} : arrayIndex ))\n  done\n\n  maxNum=$(echo \"${array[*]}\" |\
    \ sort -n -r | tail -n 1)\n  maxFreq=1\n  for i in $(echo \"${array[*]}\" | sort\
    \ -n -r); do\n    if [ \"$i\" == \"$maxNum\" ]; then\n      maxFreq=$(( ${#array[*]}\
    \ > maxFreq ? ${#array[*]} : maxFreq ))\n    fi\n  done\n  \n  if [ \"$maxNum\"\
    \ == \"-1\" ]; then\n    echo \"-1\"\n  else\n    echo \"$maxNum\"\n  fi\n}\n\n\
    candidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local str=$1\n    local max=0\n\
    \    local pos=0\n    local frequency=0\n\n    for i in $str; do\n        if ((\
    \ frequency != 0 )) && [ $(grep -c \"$i\" <<< \"$str\") -eq $frequency ]; then\n\
    \            pos=$((pos+1))\n        fi\n        frequency=$(grep -c \"$i\" <<<\
    \ \"$str\")\n        if (( frequency > max )) ; then\n            max=frequency\n\
    \        fi\n    done\n\n    if (( $(echo \"$max > 0\" | bc -l) )); then\n   \
    \     echo \"$max\"\n    else\n        echo \"-1\"\n    fi\n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local nums=\"$1\"\n    local i\n\
    \    local num\n    local freq\n    local max\n\n    freq=$(awk '{for (i=2; i<NF;\
    \ i++) print $i}' <<< \"$nums\")\n    for ((i=0; i<${#nums[*]}; i++)); do\n  \
    \      num=${nums[$i]}\n        if (( \"$num\" > 0 )) && (( (( \"$freq\" >= $num\
    \ )) )); then\n            max=$(echo \"$num\" | bc)\n        fi\n    done\n\n\
    \    if [ -z \"$max\" ]; then\n        echo -1\n    else\n        echo \"$max\"\
    \n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd1a3ahpd.sh: line 25: ((: 5 5 5 5 1 > 0 : syntax error in expression
    (error token is "5 5 5 1 > 0 ")

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 2
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local -i n=${#1}\n    local maxval=${1:0:n}\n\
    \    local -i freq=0\n    for ((i=0; i<n; i++))\n    do\n        ((freq[$i+1]+=1))\n\
    \        if ((freq[$i]>freq[maxval])) maxval=$i\n    done\n    if ((maxval<0));\
    \ then\n        printf '-1\\n' >&2\n    else\n        printf '%s\\n' ${maxval}\n\
    \    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz914wos6.sh: line 22: syntax error near unexpected token `maxval=$i''

    /tmp/tmpz914wos6.sh: line 22: `        if ((freq[$i]>freq[maxval])) maxval=$i''

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list=\"$1\"\n  local len=\"\
    ${#list}\"\n  local i\n  local max\n  local val\n  local count\n\n  local num=\"\
    ${list}\"\n  shift\n  \n  for i in $(seq 0 $(( len - 1 ))); do\n    val=\"${list[i]}\"\
    \n    if [ $i -eq 0 ] ; then\n      val=\"${val} \"\n    fi\n    \n    count=$(grep\
    \ -n -w \"^${val}$\" <<< \"$num\" | cut -d \" \" -f 1)\n    if [ $count -gt 1\
    \ ] ; then\n      max=\"${num[i]}\"\n    fi\n  done\n\n  if [ $max ] ; then\n\
    \    echo \"$max\"\n  else\n    echo \"-1\"\n  fi\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3cf38ns1.sh: line 33: [: -gt: unary operator expected

    /tmp/tmp3cf38ns1.sh: line 33: [: -gt: unary operator expected

    /tmp/tmp3cf38ns1.sh: line 33: [: -gt: unary operator expected

    /tmp/tmp3cf38ns1.sh: line 33: [: -gt: unary operator expected

    /tmp/tmp3cf38ns1.sh: line 33: [: -gt: unary operator expected

    /tmp/tmp3cf38ns1.sh: line 33: [: -gt: unary operator expected

    /tmp/tmp3cf38ns1.sh: line 33: [: -gt: unary operator expected

    /tmp/tmp3cf38ns1.sh: line 33: [: -gt: unary operator expected

    /tmp/tmp3cf38ns1.sh: line 33: [: -gt: unary operator expected

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\tlocal x\n\tlocal max=$1\n\tlocal\
    \ maxFreq=0\n\tlocal i\n\n\tfor i in ${max}; do\n\t\tx=($i)\n\t\tlocal j\n\t\t\
    local curFreq=0\n\n\t\tfor j in ${!x[@]}; do\n\t\t\t((curFreq++))\n\t\t\t((x[curFreq]=$j))\n\
    \t\tdone\n\t\tif ((curFreq > maxFreq)) ; then\n\t\t\tmaxFreq=curFreq\n\t\t\tmax=\"\
    ${x[*]}\"\n\t\tfi\n\tdone\n\n\tif ((max != $max)) ; then\n\t\techo \"$max\"\n\t\
    else\n\t\techo \"-1\"\n\tfi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjh9x0ywv.sh: line 36: ((: 5 0: syntax error in expression (error
    token is "0")

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local str=$1\n    local -a array=(\
    \ $str )\n    local -i maxFreq greatestFreq max\n    local count=0\n    for val\
    \ in \"${array[@]}\"; do\n        ((count++))\n        if (( count > max )); then\n\
    \            max=${count}\n            maxFreq=${count}\n            greatestFreq=${count}\n\
    \        elif (( val > 0 )) && (( val == max )); then\n            maxFreq=$((\
    \ maxFreq + count ))\n            greatestFreq=$(( greatestFreq > count )) &&\
    \ greatestFreq\n        fi\n    done\n    (( maxFreq > 0 && greatestFreq > maxFreq\
    \ )) && echo ${maxFreq} || echo -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local -r arr=\"${1}\"\n    local\
    \ -i ret=-1\n    local i cur prev\n    \n    for (( i = 1; i <= ${#arr}; i++ ));\
    \ do\n        cur=\"${arr}\"\n        prev=\"${cur}\"\n        cur=\"${cur// /}\"\
    \n        prev=\"${prev// /}\"\n        (( i++ ))\n        cur=\"${cur// /}\"\n\
    \        (( i++ ))\n        cur=\"${cur// /}\"\n        (( i++ ))\n        cur=\"\
    ${cur// /}\"\n        if [ \"${prev}\" -gt \"${cur}\" ]; then\n            ret=\"\
    ${prev}\"\n        elif [ \"${cur}\" -gt \"${prev}\" ]; then\n            ret=\"\
    ${cur}\"\n        fi\n    done\n    echo ${ret}\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list x max i cnt\n    list=${1:-$(echo\
    \ $1 | sed 's/ /\\n/g')}\n    x=$(echo $list | tr '\\n' ' ')\n    max=-1\n   \
    \ cnt=$(echo $list | tr '\\n' ' ' | tr ' ' '\\n' | sort | uniq | wc -l)\n    for\
    \ ((i=0; i<cnt; i++)); do\n\tx=($x $list)\n        if [[ $x =~ $list ]]; then\
    \ \n\t    max=$((max+$1))\n\t    x=($(echo $x | sed 's/ .*//g'))\n        elif\
    \ [[ $x =~ ^[0-9]+$ ]]; then \n\t    max=$((max+$1))\n\t    x=$(echo $x | sed\
    \ 's/^[0-9]\\+//g')\n        fi\n    done\n    if [[ ${#x} -gt 0 ]]; then \n\t\
    max=$((max+1))\n    fi\n    echo \"${max}\"\n}\n\ncandidate() {\n    search \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpffyjoq5r.sh: line 27: max+5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local i j k l m n\n    local arr=(\
    \ $1 )\n    local max=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((\
    \ ${#arr[@]} - i > max )); then\n            max=${#arr[@]}-i\n        fi\n  \
    \  done\n    if [ $max -ge $1 ]; then\n        for ((i=0; i<${#arr[@]}; i++));\
    \ do\n            if (( $i == 0 )); then\n                if (( $arr[i] > $max\
    \ )); then\n                    max=$arr[i]\n                fi\n            else\n\
    \                if (( $arr[$i-1] -le $arr[i] )); then\n                    if\
    \ (( $arr[i] -le $max )); then\n                        max=$arr[i]\n        \
    \            fi\n                fi\n            fi\n        done\n    fi\n  \
    \  if [ $max -eq $1 ]; then\n        echo \"-1\"\n    else\n        echo $max\n\
    \    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0h5r3yis.sh: line 24: [: 5-i: integer expression expected

    /tmp/tmp0h5r3yis.sh: line 39: [: 5-i: integer expression expected

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    while IFS=, read -r i freq; do\n\
    \        [[ ! -z $i ]] && [[ -z $freq ]] && return $i \n    done <<<\"$1\"\n \
    \   return -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_okgy7r8.sh: line 17: return: too many arguments

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    # Write your code here\n    declare\
    \ -a numbers=(${1//[!0-9]/})\n    declare -i max=0\n    declare -i max_counter=0\n\
    \    declare -i max_freq=-1\n    \n    for number in \"${numbers[@]}\"; do\n \
    \       if [[ ${number} -ge $max ]]; then\n            if (( ${numbers[$max]}\
    \ >= ${number} )); then\n                echo \"${number}\"\n            fi\n\
    \        fi\n    done\n    \n    if [[ ${max_counter} -eq 0 ]]; then\n       \
    \ echo \"${max_counter}\"\n    else\n        echo \"${max_counter} times ${max_freq}\
    \ appears\"\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local str=\"$1\"\n    local arr=(\
    \ $(echo \"$str\" | tr \" \" \"\\n\" | sort) )\n    for i in ${arr[@]}; do \n\
    \        if [[ \"$i\" < \"0\" ]]; then\n            echo \"-1\"\n            return\
    \ 0\n        fi\n        if [[ \"$i\" == \"$str\" ]]; then\n            echo \"\
    $i\"\n            return 0\n        fi\n        if [[ \"$i\" < \"$str\" ]]; then\n\
    \            echo \"-1\"\n            return 0\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list=\"$1\"\n  local index\n\
    \  local max\n  local freq\n\n  if [[ -z $list ]]; then\n    return -1\n  fi\n\
    \n  index=0\n  max=\"${list[$index]}\"\n  freq=\"${list[$index]}\"\n\n  while\
    \ [ $index+1 -lt $(($#list)) ] && [ $max -lt ${list[$(($index+1))]} ]; do\n  \
    \  freq=\"${list[$index]}$(expr $freq + ${list[$(($index+1))]})\"\n    index=$(($index+1))\n\
    \    max=\"${list[$index]}\"\n  done\n\n  echo \"$max\"\n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmhghv9nh.sh: line 29: 1list: value too great for base (error token
    is "1list")

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local input=\"$1\"\n    local\
    \ count=0\n    local maxValue=0\n    local value\n    for value in $input; do\n\
    \        if [[ $value -eq $maxValue ]]; then\n            count=`expr $count +\
    \ 1`\n        fi\n        if [ $value -gt $maxValue ]; then\n            maxValue=$value\n\
    \        fi\n    done\n    if [ \"$count\" -gt $maxValue ]; then\n        echo\
    \ -1\n    else\n        echo $maxValue\n    fi\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local i freq maxfreq\n    for\
    \ i in $*; do\n        if (( freq = $( echo \"$i\" | grep -c \"$i\" ) )) ; then\n\
    \            if (( freq > maxfreq )) ; then\n                maxfreq = $freq\n\
    \            fi\n        fi\n    done\n    if (( maxfreq )) ; then\n        echo\
    \ $maxfreq\n    else\n        echo -1\n    fi\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2iwug7s1.sh: line 20: maxfreq: command not found

    /tmp/tmp2iwug7s1.sh: line 20: maxfreq: command not found

    /tmp/tmp2iwug7s1.sh: line 20: maxfreq: command not found

    /tmp/tmp2iwug7s1.sh: line 20: maxfreq: command not found

    /tmp/tmp2iwug7s1.sh: line 20: maxfreq: command not found

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local string=$1\n  local list=`echo\
    \ $string | sed 's/ /,/g'`\n  local freq=`echo $string | sed 's/ /,/g'`\n\n  for\
    \ i in $list; do\n    [[ $freq -ge $i ]] && return $i\n  done\n  return -1\n}\n\
    \ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_zwo4s62.sh: line 21: return: 5,5,5,5,1: numeric argument required

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local -n arr=$1\n  local freq\n\
    \  local maxval\n  maxval=-1\n  freq=0\n  while read -r elem; do\n    (( ++freq\
    \ ))\n    (( ++maxval < elem ))\n  done <<< \"$arr\"\n  [[ $maxval -gt 0 ]] ||\
    \ return -1\n  echo \"$maxval\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpesi9_59f.sh: line 16: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\tlocal s=$1\n\tlocal -a n=()\n\t\
    local -a h=()\n\tlocal k freq v\n\tfor (( k=0; k<${#s}; k++ )); do \n\t\tv=$(echo\
    \ \"${s}\" | sed \"s/[[:space:]]//g\")\n\t\tn[$k]=$v\n\tdone \n\t\n\twhile [[\
    \ $n != \"\" ]]; do\n\t\tfreq=$( IFS=\" \"; echo \"${n[*]}\" | tr \" \" \"\\n\"\
    \ | sort | uniq | wc -l )\n\t\tif [[ $freq -gt $freq ]]; then \n\t\t\th=\"$( IFS=\"\
    \ \"; echo \"${n[*]}\" | tr \" \" \"\\n\" | sort | uniq )\"\n\t\t\techo \"${h[0]}\"\
    \n\t\t\tbreak\n\t\tfi\n\t\tn=$( IFS=\" \"; echo \"${n[*]}\" | tr \" \" \"\\n\"\
    \ | sort -r | uniq )\n\tdone \n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=44 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=4 encoding='utf-8'>
  timestamp: 1660058395
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local lst_var=($1)\n  local max=0\n\
    \  local count=0\n  local maxfreq=0\n  \n  # Get the count for each number in\
    \ the list\n  for i in \"${lst_var[@]}\"; do\n    ((count++))\n    if [[ $i -gt\
    \ $max ]]; then\n      max=$i\n    elif [[ $i -eq $max ]]; then\n      ((maxfreq++))\n\
    \    fi\n  done\n\n  if ((count > 0)); then\n    echo -n \"$max\"\n    if ((maxfreq\
    \ >= $count)); then\n      echo \" $maxfreq\"\n    else\n      echo \" $maxfreq\"\
    \n      echo -1\n    fi\n  else\n    echo -1\n  fi\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\tlocal integers=$1\n\tlocal integer\n\
    \tinteger=$(sort <<< \"$integers\" | tail -1)\n\tlocal frequency=`grep -n \"$integer\"\
    \ <<< \"$integers\" | cut -d ' ' -f 1`\n\t[[ ${frequency} -gt 0 ]] || return -1\n\
    \techo \"$integer\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwqacvlay.sh: line 20: [[: 1:5: syntax error in expression (error
    token is ":5")

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\tlocal str=$1\n\tlocal nums=$(echo\
    \ \"$str\" | tr \" \" \"\\n\")\n\tlocal maxnum=$(grep -o [0-9] <<< \"$str\" |\
    \ sort -u | tail -1)\n\techo \"${nums[${maxnum}]}\"\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoe_b4uy9.sh: line 19: 9:0: syntax error in expression (error token
    is ":0")

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n arr=( \"$@\" )\n max=0\n count=0\n\
    \ for i in \"${arr[@]}\"; do\n if [ $(grep -c \"$i\" <<< \"${arr[@]}\" | grep\
    \ -E -v \"^$i$\") -gt 0 ]; then\n   count=$(grep -c \"$i\" <<< \"${arr[@]}\" |\
    \ grep -E -v \"^$i$\")\n else\n   count=-1\n fi\n if [ \"$count\" -gt \"$max\"\
    \ ]; then\n   max=\"$count\"\n fi\n done\n if [ \"$max\" -gt 0 ]; then\n   echo\
    \ ${arr[$max]}\n else\n   echo -1\n fi\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  if [[ $(echo \"$1\" | grep \"^[0-9]+$\"\
    ) ]]; then\n    num=$(echo \"$1\" | cut -d \" \" -f 1)\n  elif [[ $(echo \"$1\"\
    \ | grep \"^[a-fA-F0-9]+$\") ]]; then\n    num=$(echo \"$1\" | cut -d \" \" -f\
    \ 1)\n  elif [[ $(echo \"$1\" | grep \"^[0-9]+ *$\"|wc -l) -ne 1 ]]; then\n  \
    \  echo \"-1\"\n  elif [[ $(echo \"$1\" | grep \"^ *[0-9]+$\"|wc -l) -ne 1 ]];\
    \ then\n    echo \"-1\"\n  else\n    echo \"$1\"\n  fi\n  if [[ $(echo \"$1\"\
    \ | grep \"^[0-9]+$\" |wc -l) -ne 1 ]]; then\n    echo \"-1\"\n  else\n    if\
    \ [[ \"$num\" -ge 1 ]]; then\n      freq=$( echo \"$1\" | sort | uniq -c | sort\
    \ -n | tail -n $num | head -1 | cut -d \" \" -f 1 )\n      echo \"$freq\"\n  \
    \  else\n      echo \"-1\"\n    fi\n  fi\n}\n\ncandidate() {\n    search \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n  \
    \  [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"\
    -1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local arr=( \"$@\" )\n    local\
    \ -n max=$arr[0]\n    local -n freq=$arr[1]\n    local -i i\n    local ret=-1\n\
    \    max=$(freq); freq=-1; i=0\n    while [ $i -lt ${#max[@]} ]; do\n        if\
    \ [[ $freq == -1 ]]; then\n            freq+=${max[i]}\n        elif [[ ${max[i]}\
    \ -gt ${freq} ]]; then\n            freq=${max[i]}\n            ret=$i\n     \
    \   fi\n        ((i++))\n    done\n    echo \"$ret\"\n}\n\ncandidate() {\n   \
    \ search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\")\
    \ = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp42o3nck9.sh: line 17: local: `5 5 5 5 1[0]'': invalid variable
    name for name reference

    /tmp/tmp42o3nck9.sh: line 18: local: `5 5 5 5 1[1]'': invalid variable name for
    name reference

    /tmp/tmp42o3nck9.sh: line 21: freq: command not found

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    [[ $# -gt 0 ]] || return -1\n\
    \    local arr=( $@ )\n    local max=$(( ${#arr[@]} - 1 ))\n    for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n        let \"count[$i]+=1;\"\n        [[ \"$count[$i]\" -gt \"\
    $max\" ]] && max=$i\n    done\n    [[ \"$max\" -gt 0 ]] || return -1\n    echo\
    \ $max\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprixfads7.sh: line 20: let: count[0]+=1;: syntax error: invalid
    arithmetic operator (error token is ";")

    /tmp/tmprixfads7.sh: line 21: [[: [0]: syntax error: operand expected (error token
    is "[0]")

    /tmp/tmprixfads7.sh: line 20: let: count[1]+=1;: syntax error: invalid arithmetic
    operator (error token is ";")

    /tmp/tmprixfads7.sh: line 21: [[: [1]: syntax error: operand expected (error token
    is "[1]")

    /tmp/tmprixfads7.sh: line 20: let: count[2]+=1;: syntax error: invalid arithmetic
    operator (error token is ";")

    /tmp/tmprixfads7.sh: line 21: [[: [2]: syntax error: operand expected (error token
    is "[2]")

    /tmp/tmprixfads7.sh: line 20: let: count[3]+=1;: syntax error: invalid arithmetic
    operator (error token is ";")

    /tmp/tmprixfads7.sh: line 21: [[: [3]: syntax error: operand expected (error token
    is "[3]")

    /tmp/tmprixfads7.sh: line 20: let: count[4]+=1;: syntax error: invalid arithmetic
    operator (error token is ";")

    /tmp/tmprixfads7.sh: line 21: [[: [4]: syntax error: operand expected (error token
    is "[4]")

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local item=$1\n  local frequence=1\n\
    \  local index=0\n  local result=$2\n  local max=0\n\n  for index in ${item//[[:space:]]/}\n\
    \  do\n    local item=${item//$index/$frequence}\n    frequence=$(( ${frequence}\
    \ * ${item} ))\n  done\n\n  echo \"$result\"\n}\n\ncandidate() {\n    search \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppk0bweni.sh: line 25: 1 * 5 5 5 5 1 : syntax error in expression
    (error token is "5 5 5 1 ")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list=(\"$@\")\n    local\
    \ counter=0\n    local greatest=0\n    for i in \"${list[@]}\"; do\n        let\
    \ counter=counter+1\n        if [[ \"$counter\" -gt \"$greatest\" ]]; then\n \
    \           greatest=$counter\n        fi\n    done\n    [[ \"$greatest\" -eq\
    \ \"$counter\" ]] || return -1\n    echo \"$greatest\"\n}\n\ncandidate() {\n \
    \   search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local x n\n  x=\"${1}\"\n  n=$(\
    \ echo \"$x\" | tr -cd \"[:digit:]\")\n  if [ $n -eq 0 ]\n  then\n    return -1\n\
    \  fi\n  grep -E \"^$n\\s*$\" | cut -f1 -d' ' | sort -rn | head -1 | cut -f2 -d'\
    \ '\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=55 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=52 encoding='utf-8'>
  timestamp: 1660058395
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local i\n    local f\n    local\
    \ c\n    while read -r i || [[ -n $i ]]; do\n        f=0\n        IFS=$'\\t' c=\"\
    ${i}\" \n        for j in $(echo $c | tr ' ' '\\n'); do \n            if [ ! -z\
    \ $j ]; then \n                if [ ! -z ${k[$j]} ]; then \n                 \
    \   let \"k[$j]+=1 \"\n                    let \"f+=1 \"\n                fi\n\
    \            fi\n        done\n        if [ ! -z $f ]; then \n            echo\
    \ $f\n        fi\n    done <<< \"$1\"\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjkm2m0f7.sh: line 24: 5

    5

    5

    5

    1: syntax error in expression (error token is "5

    5

    5

    1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local i\n    local nums\n\n  \
    \  nums=$1\n    IFS=\" \"\n    for i in $nums\n    do\n        if [ ! -z \"$greatest_integer\"\
    \ ] ; then\n            if [ $(echo \"$greatest_integer >= $i\" | bc -l) -ne 0\
    \ ] ; then\n                greatest_integer=$i\n            fi\n        fi\n\
    \    done\n\n    if [ ! -z \"$greatest_integer\" ] ; then\n        echo \"$greatest_integer\"\
    \n    else\n        echo \"-1\"\n    fi\n}\n\ncandidate() {\n    search \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n  \
    \  [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"\
    -1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local numbers=\"$1\"\n\n  for i\
    \ in $(seq 1 \"$numbers\" ); do\n    number=$(eval echo \"$numbers\" | sed -n\
    \ \"$i\"p)\n  done\n\n  echo \"${number}\"\n}\n\ncandidate() {\n    search \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "seq: invalid floating point argument: \u20185 5 5 5 1\u2019\nTry 'seq --help'\
    \ for more information.\n"
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local IFS= read -r line\n    #\
    \ echo ${line}\n    local array=( ${line} )\n    local max=0\n    local freq=0\n\
    \    local pos=1\n    for value in ${array[@]}; do\n        if [ ${value} -gt\
    \ 0 ]; then\n            freq=$(( ${freq} + 1 ))\n            if [ ${freq} -gt\
    \ ${value} ]; then\n                pos=${value}\n            fi\n        fi\n\
    \    done\n    if [[ ${freq} -gt ${pos} ]]; then\n        echo ${pos}\n    else\n\
    \        echo -1\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkhjr1dv6.sh: line 16: local: `-r'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local frequency=-1\n  local line=$1\n\
    \  local count=1\n  while read line\n  do\n    let count++\n    local value=$(echo\
    \ \"$line\" | awk '{print $1}')\n    if [ $value -gt 0 ]\n    then\n      if [\
    \ $frequency -eq 0 ]\n      then\n        frequency=$count\n      elif [ $frequency\
    \ -eq $count ]\n      then\n        frequency=$count\n      fi\n    fi\n  done\
    \ <<< \"$1\"\n  echo \"$frequency\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local val=$1\n  local freq\n  local\
    \ max=0\n  local count=0\n  for freq in $val; do\n    (( count += 1 ))\n    if\
    \ [ \"$count\" -gt \"$freq\" ]; then\n      max=$freq\n      break\n    fi\n \
    \ done\n  echo $max\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list=\"$1\" ; shift\n  local\
    \ items=() ; local i=0 \n  local max=$(( ${#list[*]} )) ; local cnt=0 \n  while\
    \ (( \"$i\" <= \"$max\" )) ; do \n    (( cnt++ )) \n    items[$i]=$(echo \"$list\"\
    \ | grep -Po \"\\b${list[$i]}\\b\") \n    (( i++ )) \n  done\n  if (( \"$cnt\"\
    \ <= 1 )); then \n    echo \"-1\" \n  else\n    echo \"${items[@]:-$(( ${#list[*]}\
    \ - 1 ))}\"\n  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058390
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local -n arr=$1\n  local -i n=${#arr[@]}\n\
    \  local i\n  local k\n  local freq\n  \n  for i in $(seq 0 $((n-1)))\n  do\n\
    \    freq=0\n    k=0\n    while ((k<n) && (arr[$k]<$i))\n    do\n      ((k++))\n\
    \    done\n    if ((k==n))\n    then\n      if ((freq<arr[$i]))\n      then\n\
    \        arr[$i]=$freq\n        ((freq++))\n      fi\n    else\n      if ((freq<arr[$i]))\n\
    \      then\n        arr[$i]=$freq\n        ((freq++))\n      fi\n    fi\n  done\n\
    \  \n  for i in $(seq 0 $((n-1)))\n  do\n    if ((arr[$i]>0))\n    then\n    \
    \  echo \"$i\"\n      break\n    fi\n  done\n  \n  if ((n==0))\n  then\n    echo\
    \ \"-1\"\n  else\n    echo \"${arr[$(expr ${n} - 1)]}\"\n  fi\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiv18_pn4.sh: line 16: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\tlocal list=\"$1\" count=0\n\tfor\
    \ word in $list; do\n\t\t((count+=1))\n\t\tif [ $count -gt $word ]\n\t\tthen\n\
    \t\t\treturn $word\n\t\tfi\n\tdone\n\treturn -1\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    IFS=$'\\n' read -r -a nums <<<\
    \ \"$1\"\n\n    for i in \"${!nums[@]}\"; do\n        (( nums[$i] >= i )) && break\n\
    \    done\n\n    [[ -z ${nums[$i]} ]] && echo \"-1\" || echo \"${nums[$i]}\"\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmuli20n0.sh: line 19: ((: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n   local list=\"$1\"; shift\n   local\
    \ maxFreq=\"$1\"; shift\n\n   local i iFreq iList\n   iFreq=0\n   iList=\"${list}\"\
    \n   for ((i=0; i<${#iList}; i++)) do\n      iFreq=0\n      for ((j=$((i+1));\
    \ j<${#iList}; j++)) do\n         if [[ ${iList}:$j -eq \"${iList}\" ]]; then\n\
    \            if ((iFreq == 0)); then\n               iFreq=$j\n            fi\n\
    \            if [[ $iFreq -lt $((maxFreq*i)) ]]; then\n               iFreq=$j\n\
    \               maxFreq=$iFreq\n            fi\n         fi\n      done\n   done\n\
    \n   echo $maxFreq\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:1: syntax error in expression
    (error token is "5 5 5 1:1")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:2: syntax error in expression (error
    token is "5 5 5 1:2")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:3: syntax error in expression (error
    token is "5 5 5 1:3")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:4: syntax error in expression (error
    token is "5 5 5 1:4")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:5: syntax error in expression (error
    token is "5 5 5 1:5")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:6: syntax error in expression (error
    token is "5 5 5 1:6")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:7: syntax error in expression (error
    token is "5 5 5 1:7")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:8: syntax error in expression (error
    token is "5 5 5 1:8")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:2: syntax error in expression (error
    token is "5 5 5 1:2")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:3: syntax error in expression (error
    token is "5 5 5 1:3")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:4: syntax error in expression (error
    token is "5 5 5 1:4")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:5: syntax error in expression (error
    token is "5 5 5 1:5")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:6: syntax error in expression (error
    token is "5 5 5 1:6")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:7: syntax error in expression (error
    token is "5 5 5 1:7")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:8: syntax error in expression (error
    token is "5 5 5 1:8")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:3: syntax error in expression (error
    token is "5 5 5 1:3")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:4: syntax error in expression (error
    token is "5 5 5 1:4")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:5: syntax error in expression (error
    token is "5 5 5 1:5")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:6: syntax error in expression (error
    token is "5 5 5 1:6")

    /tmp/tmpsow_8f58.sh: line 25: [[: 5 5 5 5 1:7: syntax error in expression (error
    token is "'
  stdout: ''
  timestamp: 1660058391
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local array=( ${1//[[:space:]]/\
    \ } )\n    local max=\"${array[0]}\"\n    local index=1\n    local i\n    for\
    \ (( i = 0; i < ${#array[@]}; i++ )); do\n        if [[ ${array[$i]} -gt \"$max\"\
    \ ]]; then\n            index=$(expr index + 1)\n            local max=\"${array[$i]}\"\
    \n        elif [[ ${array[$i]} -eq \"$max\" ]]; then\n            local i\n  \
    \          for (( i = index; i < ${#array[@]}; i++ )); do\n                if\
    \ [[ ${array[$i]} -eq \"$max\" ]]; then\n                    index=$(expr index\
    \ + 1)\n                    local max=\"${array[$i]}\"\n                    break\n\
    \                fi\n            done\n        fi\n    done\n    if [[ \"$max\"\
    \ -eq 0 ]]; then\n        echo \"-1\"\n    else\n        echo \"$max\"\n    fi\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=41 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=39 encoding='utf-8'>
  timestamp: 1660058395
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  echo $1 |\n  sort -n |\n  awk '{\
    \ \n         if ( $1 == 0 ) exit 0;\n         if ( $1 > 0 )\n           {\n  \
    \           if ( !(seen[$1]++ > $1) )\n               { \n                 max\
    \ = $1; \n                 i = 1;\n               }\n           }\n         else\n\
    \           {\n             if ( !(seen[$1]--) > $1 )\n               { \n   \
    \              max = $1; \n                 i = 1;\n               }\n       \
    \    }\n         }\n      } ' |\n  grep -w $2 |\n  awk '{ print $2 }' | \n  head\
    \ -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "Usage: grep [OPTION]... PATTERNS [FILE]...\nTry 'grep --help' for more\
    \ information.\nawk: cmd. line:20:       } \nawk: cmd. line:20:       ^ syntax\
    \ error\n"
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list=(\"$@\")\n    local\
    \ greatest=$1\n    local count=0\n    for number in \"${list[@]}\"; do\n     \
    \   if [[ $number -gt $greatest ]]; then\n            greatest=$number\n     \
    \   fi\n        ((count++))\n    done\n    if [ \"$greatest\" != \"-1\" ]; then\n\
    \        echo \"$greatest\"\n    else\n        echo \"-1\"\n    fi\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4svf3amg.sh: line 20: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local l=$1 m=$2\n    local h=0\n\
    \    local f\n    for i in ${l[*]}; do\n        if [[ $((h+=i)) == $m ]]; then\n\
    \            f=$i\n            break\n        fi\n    done\n    return $f\n}\n\
    \ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local i n value frequency\n  \
    \  for ((i = 0; i < $1; ++i)); do \n        frequency=-1\n        n=0\n      \
    \  for n in ${1:i}; do\n            if [[ \"${2:n}\" == \"${1:i}\" ]]; then\n\
    \                frequency=$n\n                break\n            fi\n       \
    \ done\n        if [[ \"$frequency\" -ge 0 ]]; then\n            echo \"$2\"\n\
    \            exit\n        fi\n    done\n}\n\ncandidate() {\n    search \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n  \
    \  [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"\
    -1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe1gsprvh.sh: line 17: ((: i < 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list=$1 freq\n  for i in $(eval\
    \ echo \"$list\"); do\n    if [[ $(eval echo \"$list\" | grep -i -q $i) == \"\"\
    \ ]]; then\n      return -1\n    fi\n    freq=$(eval echo \"$list\" | grep -i\
    \ \"$i\" | wc -l)\n  done\n  echo \"$freq\"\n}\n\ncandidate() {\n    search \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  echo $1 |\n  awk '{ s=0; for(i =\
    \ 1; i <= NF; i++) s += $i; if(s >= $1) print $1 }'\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local x\n  x=\"${1}\"\n  echo \"\
    ${x}\"|awk -F\" \" '\n  {\n    for(i=1; i<=NF; i++)\n    {\n      if(!x[$i])\n\
    \      { \n        x[$i]\n      }\n      else\n      {\n        if(x[$i]>$i)\n\
    \        {\n          x[$i]=$i\n        }\n      }\n    }\n  }'\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local n=$1; shift\n    for i;\
    \ do\n        (( freq[$i]++ ))\n    done\n    local max\n    local val\n    for\
    \ i in ${!freq[*]};\n    do\n        val=${!i}\n        (( freq[val] > freq[$i]\
    \ && val > max)) && max=val\n    done\n    [ $max != -1 ] && echo $max || echo\
    \ \"-1\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt96ixahw.sh: line 27: [: !=: unary operator expected

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\tlocal values=$1 maxValue maxFreq\
    \ numFreq count maxCount\n\t\n\tmaxValue=$(\"${value}\" \"${values}\" | wc -l)\n\
    \t\n\tfor i in $(seq 1 ${maxValue}); do\n\t\tcount=$(\"${value}\" \"${values}\"\
    \ | wc -l | sed 's/^/'$i'/')\n\t\t\n\t\tif [ \"${count}\" -gt \"0\" ]; then\n\t\
    \t\tnumFreq=$(\"${value}\" \"${values}\" | wc -l | sed 's/^/'$i'/')\n\t\t\t\n\t\
    \t\tif [ \"${numFreq}\" -gt \"maxFreq\" ]; then\n\t\t\t\tmaxFreq=\"${numFreq}\"\
    \n\t\t\t\tmaxCount=\"${count}\"\n\t\t\tfi\n\t\tfi\n\tdone\n\t\n\tif [ \"${maxCount}\"\
    \ -gt \"0\" ]; then\n\t\techo \"${maxCount}\"\n\telse\n\t\techo \"-1\"\n\tfi\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcl8x91sk.sh: line 18: : command not found

    /tmp/tmpcl8x91sk.sh: line 33: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local string=$1 #1\n    local\
    \ i=0\n    local count\n    local max\n    while [ $i -lt ${#string} ]; do\n \
    \       count=$(grep -w $i <<< $string)\n        if [ $count -gt 0 ]; then\n \
    \           max=$(grep $i <<< $string)\n        elif [ $count -eq 0 ]; then\n\
    \            echo \"-1\"\n        else\n            echo \"-1\"\n            break\n\
    \        fi\n        i=$((i+1))\n    done\n    echo \"$max\"\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkaz8y9rq.sh: line 22: [: -gt: unary operator expected

    /tmp/tmpkaz8y9rq.sh: line 24: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  # Trim the input\n  local input=\"\
    ${1}\"\n  \n  # Break the input by spaces\n  local inputArray=(${input//\\( \\\
    )/})\n  \n  # Filter the array by frequency\n  local inputFrequencyArray=(${inputArray[@]##*[!0-9]})\n\
    \  \n  # Return the greatest value larger than zero\n  local greatestValue\n \
    \ local greatestFrequency\n  \n  local inputFrequency\n  \n  # Find the greatest\
    \ value larger than zero\n  greatestValue=${inputFrequencyArray[0]}\n  for ((\
    \ i = 0; i < ${#inputFrequencyArray[@]}; i++ )); do\n    inputFrequency=${inputFrequencyArray[$i]}\n\
    \    if [ \"$inputFrequency\" -gt \"$greatestFrequency\" ]; then\n      greatestFrequency=$inputFrequency\n\
    \      greatestValue=$inputFrequencyArray[$i]\n    fi\n  done\n  \n  # If no such\
    \ value exists, return -1\n  if [ -z \"$greatestValue\" ]; then\n    return -1\n\
    \  fi\n  \n  # Return the greatest value\n  return $greatestValue\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwp92j_u3.sh: line 35: [: : integer expression expected

    /tmp/tmpwp92j_u3.sh: line 35: [: : integer expression expected

    /tmp/tmpwp92j_u3.sh: line 35: [: : integer expression expected

    /tmp/tmpwp92j_u3.sh: line 35: [: : integer expression expected

    /tmp/tmpwp92j_u3.sh: line 35: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local numbers=$1\n    for i in\
    \ $numbers; do\n        count=$(grep -F \"$i\" <<< $numbers | wc -l )\n      \
    \  value=$(grep -F \"$i\" <<< $numbers | tail -n1)\n        if [ $count -gt $value\
    \ ]; then\n            return $value\n        fi\n    done\n    return -1\n}\n\
    \ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwt8qjked.sh: line 20: [: too many arguments

    /tmp/tmpwt8qjked.sh: line 20: [: too many arguments

    /tmp/tmpwt8qjked.sh: line 20: [: too many arguments

    /tmp/tmpwt8qjked.sh: line 20: [: too many arguments

    /tmp/tmpwt8qjked.sh: line 20: [: too many arguments

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local s=$1\n    local j=1\n  \
    \  local maxVal=$(($(sort -n <<< $s | head -1) + 1))\n    local maxFreq=0\n  \
    \  local inFreq=0\n    local maxStr=\"\"\n    local curStr=\"\"\n    for (( j=j+1\
    \ ; j<${#s} ; j++ )); do\n        curStr=${s:j:1}\n        if [[ -n ${curStr}\
    \ ]]; then\n            (( inFreq > 0 )) && break\n            (( inFreq == 0\
    \ )) && inFreq=1 \n            (( maxFreq < inFreq )) && maxFreq=$inFreq\n   \
    \     fi\n    done\n    (( maxFreq > 0 )) && maxStr=${s:j:1}\n    (( maxFreq ==\
    \ 0 )) && maxStr=\"-1\"\n    echo \"$maxStr\"\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyxfejnke.sh: line 18: 5 5 5 5 1 + 1: syntax error in expression
    (error token is "5 5 5 1 + 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local array integer\n    local\
    \ i count\n    integer=\"${1}\"\n    # First sort the list\n    IFS=\"  \" read\
    \ -a array <<< \"${integer}\"\n    IFS=' ' read -a array <<< \"${array[@]}\"\n\
    \    # Sort by first element\n    sort <<< \"${array[0]}\"\n    # Sort by second\
    \ element\n    sort <<< \"${array[1]}\"\n    # Count the elements and return the\
    \ greatest\n    count=\"${array[1]}\" \n    for (( i=1; i<${#array[@]}; i++))\n\
    \    do\n        (( count > array[$i] )) && count=\"${array[$i]}\"\n    done\n\
    \    [[ \"$count\" -ge \"$1\" ]] && echo ${array[1]} || echo -1\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqa0o_50u.sh: line 32: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\t[ -z \"$1\" ] && return 1\n\tlocal\
    \ numbers=$1\n\tlocal found=-1\n\tlocal i number\n\tfor ((i=0; i < ${#numbers};\
    \ i++)); do\n\t\tnumber=${numbers:$i:1}\n\t\t[ -z \"$number\" ] && return 1\n\t\
    \tif [ -z \"$found\" ] || [ \"$number\" -le \"$found\" ]; then\n\t\t\tfound=$number\n\
    \t\tfi\n\tdone\n\treturn $found\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5nssa98z.sh: line 23: [:  : integer expression expected

    /tmp/tmp5nssa98z.sh: line 23: [:  : integer expression expected

    /tmp/tmp5nssa98z.sh: line 23: [:  : integer expression expected

    /tmp/tmp5nssa98z.sh: line 23: [:  : integer expression expected

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 2
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local numbers=\"$1\"\n\n    for\
    \ number in $numbers\n    do\n        if [[ $number == ([0-9]*) ]]\n        then\n\
    \            if [[ ${#number} -gt 1 ]]\n            then\n                echo\
    \ $number\n            fi\n        fi\n    done\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpprmhbpki.sh: line 20: unexpected argument `('' to conditional binary
    operator

    /tmp/tmpprmhbpki.sh: line 20: syntax error near `([''

    /tmp/tmpprmhbpki.sh: line 20: `        if [[ $number == ([0-9]*) ]]''

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local input\n  input=$(eval \"$1\"\
    )\n  local i\n  local max\n  local maxfreq\n  local count\n  local maxfreqstring\n\
    \  local output\n  for i in $input; do\n    count=$(grep -c \"$i\" <<< \"$input\"\
    )\n    if [[ $count -gt 0 ]]; then\n      maxfreq=$(echo \"$count*$i\" | bc -l)\n\
    \      if [ \"$maxfreq\" -gt \"$maxfreq\" ] && [ \"$maxfreq\" -gt \"$max\" ];\
    \ then\n        max=$maxfreq\n        maxfreqstring=\"$i\"\n      fi\n    fi\n\
    \  done\n  if [ -z \"$maxfreqstring\" ]; then\n    echo \"-1\"\n  else\n    echo\
    \ \"$maxfreqstring\"\n  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl_iyrq_p.sh: line 17: 5: command not found

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local input=$1\n    local -a arr=()\n\
    \    local max\n    local count\n    local curr\n    local i\n    \n    for curr\
    \ in $input; do\n        if [ \"$curr\" == \"$max\" ]; then\n            arr[${#arr[@]}]=$curr\n\
    \            continue\n        fi\n        arr[${#arr[@]}+1]=$curr\n    done\n\
    \    max=${arr[0]}\n    for i in $(seq 1 ${#arr[@]}); do\n        curr=${arr[$i]}\n\
    \        count=0\n        for j in $(seq 0 $i); do\n            if [ \"$curr\"\
    \ == \"${arr[$j-1]}\" ]; then\n                count=$(($count+1))\n         \
    \   fi\n        done\n        if [ \"$count\" -gt \"$max\" ]; then\n         \
    \   max=${arr[$i]}\n        fi\n    done\n    echo ${max}\n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5ff2vchp.sh: line 39: [: : integer expression expected

    /tmp/tmp5ff2vchp.sh: line 39: [: : integer expression expected

    /tmp/tmp5ff2vchp.sh: line 39: [: : integer expression expected

    /tmp/tmp5ff2vchp.sh: line 39: [: : integer expression expected

    /tmp/tmp5ff2vchp.sh: line 39: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list=$1\n    local maxfreq=0\n\
    \    local maxnum\n    local count=0\n    for (( i=0; i<${#list}; i++ )); do\n\
    \        local elem=$(eval echo ${list::${i}:${i}})\n        ((count++))\n   \
    \     local freq=${#elem}\n        if (( ${freq} < 1 )); then\n            echo\
    \ \"-1\"\n        elif (( ${freq} > maxfreq )); then\n            maxfreq=${freq}\n\
    \            maxnum=elem\n        fi\n    done\n    echo \"${maxnum}\"\n}\n\n\
    candidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2_zxb3qe.sh: line 21: list: 0:0: syntax error in expression (error
    token is ":0")

    /tmp/tmp2_zxb3qe.sh: line 21: list: 1:1: syntax error in expression (error token
    is ":1")

    /tmp/tmp2_zxb3qe.sh: line 21: list: 2:2: syntax error in expression (error token
    is ":2")

    /tmp/tmp2_zxb3qe.sh: line 21: list: 3:3: syntax error in expression (error token
    is ":3")

    /tmp/tmp2_zxb3qe.sh: line 21: list: 4:4: syntax error in expression (error token
    is ":4")

    /tmp/tmp2_zxb3qe.sh: line 21: list: 5:5: syntax error in expression (error token
    is ":5")

    /tmp/tmp2_zxb3qe.sh: line 21: list: 6:6: syntax error in expression (error token
    is ":6")

    /tmp/tmp2_zxb3qe.sh: line 21: list: 7:7: syntax error in expression (error token
    is ":7")

    /tmp/tmp2_zxb3qe.sh: line 21: list: 8:8: syntax error in expression (error token
    is ":8")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local str=$1 \n    local max=\"\
    -1\" freq=\"-1\"\n    local pos=\"-1\" \n    while IFS= read -r n ; do\n     \
    \ [[ \"$n\" =~ ^[0-9]+ ]] || return 0\n      local c=${str#$n}\n      (( (freq+=c)\
    \ ))\n      pos=$(( (pos+c) ))\n      if [ \"$freq\" -gt \"$max\" ] && [ \"$pos\"\
    \ -gt 0 ]; then\n        max=$freq\n      fi\n    done <<< \"$str\"\n    echo\
    \ $max\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list=\"$1\"\n    local n=\"\
    $2\"\n    local greatest greatest_freq greatest_index\n    greatest=-1\n    greatest_freq=0\n\
    \    greatest_index=-1\n    while [[ \"$n\" -gt 0 ]]; do\n        local freq=0\n\
    \        for index in $(seq 0 $n); do\n            local idx=$index\n        \
    \    local elem=${list:$idx:1}\n            if [[ ${elem} -ge $n ]]; then\n  \
    \              freq=$(($freq + 1))\n            fi\n        done\n        if [[\
    \ ${greatest_freq} -le ${freq} ]]; then\n            greatest=$n\n           \
    \ greatest_freq=${freq}\n            greatest_index=$index\n        fi\n     \
    \   n=$((n - 1))\n    done\n    echo \"$greatest_index\"\n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local -i n=$1 s\n  \n  s=${1}\n\
    \  for ((i=1; i<n; i++))\n  do\n    if [ \"$s\" == \"$i\" ]; then\n      echo\
    \ \"$i\"\n      return\n    fi\n  done\n  echo \"-1\"\n}\n\ncandidate() {\n  \
    \  search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv4086f8u.sh: line 16: local: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local a\n    local max\n    local\
    \ freq\n    local i\n    \n    # Split each of the items in $1 into an array of\
    \ integers\n    a=($(echo \"$1\" | sed 's/ /\\n/g'))\n    \n    # Loop through\
    \ each item in the array\n    for i in \"${a[@]}\"; do\n        \n        if [[\
    \ -z $max ]]; then\n            max=\"$i\"\n            freq=0\n        elif [\
    \ \"$i\" -eq \"$max\" ]; then\n            freq=$(($freq+1))\n        elif [ \"\
    $i\" -gt \"$max\" ]; then\n            freq=0\n            max=$(echo \"$i\")\n\
    \        elif [ \"$i\" -lt \"$max\" ]; then\n            freq=0\n        fi\n\
    \    done\n    \n    echo -n \"$max\"\n    \n    # Return $max if $max is non-zero,\
    \ or -1 if $max is zero\n    return $(( ${max} == 0 )) || return -1\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n local i temp\n local ret=0\n local\
    \ prev=-1\n local list\n list=$1\n shift\n\n for ((i=1; i<${#list}; i++)); do\n\
    \   prev=${list[i]}\n   if [[ $list[i] -gt 0 ]]; then\n     temp=${prev}\n   \
    \  if [[ $prev -ne 0 ]]; then\n       if [[ ${#list[@]} -ge $i ]]; then\n    \
    \     if [[ $list[i-1] -eq 0 ]]; then\n           if [[ $list[i] -gt $prev ]];\
    \ then\n             ret=$i\n           fi\n         elif [[ $list[i] -gt $prev\
    \ ]]; then\n           if [[ ${#list[@]} -ge $((i-1)) ]]; then\n             if\
    \ [[ $list[i-1] -eq 0 ]]; then\n               if [[ $list[i] -gt $prev ]]; then\n\
    \                 ret=$i\n               fi\n             else\n             \
    \  if [[ $list[i] -gt $prev ]]; then\n                 if [[ $list[i-1] -eq 0\
    \ ]]; then\n                   if [[ $list[i] -gt $prev ]]; then\n           \
    \          ret=$i\n                   fi\n                 else\n            \
    \       if [[ $list[i] -gt $prev ]]; then\n                     if [[ $list[i-1]\
    \ -eq 0 ]]; then\n                       if [[ $list[i] -gt $prev ]]; then\n \
    \                        ret=$i\n                       fi\n                 \
    \    fi\n                   fi\n                 fi\n               fi\n     \
    \        fi\n           fi\n         fi\n       fi\n     fi\n   fi\n done\n echo\
    \ ${ret}\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc2equlpr.sh: line 25: [[: 5 5 5 5 1[i]: syntax error in expression
    (error token is "5 5 5 1[i]")

    /tmp/tmpc2equlpr.sh: line 25: [[: 5 5 5 5 1[i]: syntax error in expression (error
    token is "5 5 5 1[i]")

    /tmp/tmpc2equlpr.sh: line 25: [[: 5 5 5 5 1[i]: syntax error in expression (error
    token is "5 5 5 1[i]")

    /tmp/tmpc2equlpr.sh: line 25: [[: 5 5 5 5 1[i]: syntax error in expression (error
    token is "5 5 5 1[i]")

    /tmp/tmpc2equlpr.sh: line 25: [[: 5 5 5 5 1[i]: syntax error in expression (error
    token is "5 5 5 1[i]")

    /tmp/tmpc2equlpr.sh: line 25: [[: 5 5 5 5 1[i]: syntax error in expression (error
    token is "5 5 5 1[i]")

    /tmp/tmpc2equlpr.sh: line 25: [[: 5 5 5 5 1[i]: syntax error in expression (error
    token is "5 5 5 1[i]")

    /tmp/tmpc2equlpr.sh: line 25: [[: 5 5 5 5 1[i]: syntax error in expression (error
    token is "5 5 5 1[i]")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n local i j k k1 k2 len\n len=${#1}\n\
    \ if ((len == 0)); then\n  echo \"-1\"\n  return 0\n fi\n i=1; j=0\n while ((i\
    \ <= len))\n do\n  k1=${1:i:1}\n  k2=${2:i:1}\n  j=$((k1 > k2 ? j : k1))\n  i=$((k1\
    \ < k2 ? i + 1 : i))\n done\n if ((j == len))\n then\n  echo \"-1\"\n  return\
    \ 0\n fi\n k=$((len - j))\n echo \"${1:j:1}\"\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=24 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=21 encoding='utf-8'>
  timestamp: 1660058396
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local a b c d e f g h;\n  a=$1;\
    \ shift;\n  c=$(echo $a | wc -w); d=0;\n  for x in $a; do\n    for y in $(echo\
    \ $a | sort -r); do\n      if [ \"$x\" -eq \"$y\" -a \"$d\" -gt 0 ]; then\n  \
    \      d=$(echo $a | wc -w); e=$x;\n        fi\n      done\n  done\n  echo $(echo\
    \ $e | cut -f1 -d\" \")\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local s=$1\n    for i in $s; do\
    \ \n        if (( $1 > 0 )); then \n            echo $i \n            break; \n\
    \        fi \n    done \n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz72h566_.sh: line 18: ((: 5 5 5 5 1 > 0 : syntax error in expression
    (error token is "5 5 5 1 > 0 ")

    /tmp/tmpz72h566_.sh: line 18: ((: 5 5 5 5 1 > 0 : syntax error in expression (error
    token is "5 5 5 1 > 0 ")

    /tmp/tmpz72h566_.sh: line 18: ((: 5 5 5 5 1 > 0 : syntax error in expression (error
    token is "5 5 5 1 > 0 ")

    /tmp/tmpz72h566_.sh: line 18: ((: 5 5 5 5 1 > 0 : syntax error in expression (error
    token is "5 5 5 1 > 0 ")

    /tmp/tmpz72h566_.sh: line 18: ((: 5 5 5 5 1 > 0 : syntax error in expression (error
    token is "5 5 5 1 > 0 ")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n        local v=\"${1// /+}\"\n  \
    \      local res=\"${v}\"\n        local f=\"${v}\"\n        for ((i=${#v}-1;\
    \ i>=0; i--)); do\n                let \"f+=${v[i]}\"\n                if [[ \"\
    ${v[i]}\" -gt \"${f}\" ]]; then\n                        res=\"${v[i]}\"\n   \
    \                     f=\"${f}\"\n                fi\n        done\n        if\
    \ [[ \"${f}\" -gt \"0\" ]]; then\n                echo \"${res}\"\n        else\n\
    \                echo \"-1\"\n        fi\n}\n\ncandidate() {\n    search \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n  \
    \  [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"\
    -1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3u4ykgaj.sh: line 20: let: f+=: syntax error: operand expected
    (error token is "+=")

    /tmp/tmp3u4ykgaj.sh: line 20: let: f+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmp3u4ykgaj.sh: line 20: let: f+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmp3u4ykgaj.sh: line 20: let: f+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmp3u4ykgaj.sh: line 20: let: f+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmp3u4ykgaj.sh: line 20: let: f+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmp3u4ykgaj.sh: line 20: let: f+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmp3u4ykgaj.sh: line 20: let: f+=: syntax error: operand expected (error
    token is "+=")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local -n arr=$1\n    local i max\
    \ freq\n    max=-1\n    freq=-1\n    for i in $arr; do\n        if (( freq !=\
    \ i )); then\n            freq=$i\n            max=i\n        fi\n    done\n \
    \   return $max\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd3ihko69.sh: line 16: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 2
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list item freq\n  item=\"\
    ${1}\"\n  freq=\"${item#\"${item%%[![:space:]]*}}\"\n  list=( ${1//[![:space:]]/\
    \ } )\n  for i in \"${list[@]}\"; do\n    ((freq++))\n  done\n  (( freq > 1 ))\
    \ && echo \"${item}\" || echo \"-1\"\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj5mpus_8.sh: line 56: unexpected EOF while looking for matching
    `"''

    /tmp/tmpj5mpus_8.sh: line 60: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list=\"$1\"\n    local max=0\n\
    \    local value\n    for value in $list; do\n        if [ $value > 0 ]; then\n\
    \            let max=$value\n        elif [ $max -eq 0 ]; then\n            let\
    \ max=$value\n        fi\n    done\n    if [ $max -eq 0 ]; then\n        echo\
    \ \"-1\"\n    else\n        echo \"$max\"\n    fi\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local numbers=$1\n  local number\n\
    \  local numberFrequency\n  numberFrequency=`echo \"$numbers\" | sort -u | wc\
    \ -l`\n  echo -n \"$numberFrequency\"\n  if [ $numberFrequency -gt \"$number\"\
    \ ]; then\n    number=\"${numberFrequency}\"\n  fi\n  echo \"$number\"\n}\n\n\
    candidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4_znarrx.sh: line 21: [: : integer expression expected

    /tmp/tmp4_znarrx.sh: line 21: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  echo \"$1\"\n  local count=0\n \
    \ local max=0\n  local tmp\n  for i in $@; do\n    ((count+=1))\n    ((tmp=${i}))\n\
    \    if [[ $tmp -lt $max ]]; then\n      max=$tmp\n    fi\n  done\n  if [[ $max\
    \ -lt 0 ]]; then\n    return -1\n  fi\n  echo \"$max\"\n}\n\ncandidate() {\n \
    \   search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list=$1\n    local greatest=${list#*$1}\n\
    \    if [[ -z \"$greatest\" ]]; then\n        greatest=-1\n    fi\n    local frequency=0\n\
    \    local count=${#list}\n    for ((i=0; i<count; i++)); do\n        if [[ \"\
    ${list[i]}\" -ge $greatest ]]; then\n            frequency+=1\n        fi\n  \
    \  done\n    [[ \"$frequency\" -eq \"$greatest\" ]] && return $greatest\n    return\
    \ -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppzbcojac.sh: line 24: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local integer frequency tmp result\n\
    \  integer=\"${1}\"\n  frequency=$(grep -w \"${integer}\" <<< \"$(<list.out)\"\
    \ | wc -l)\n  echo \"${frequency}\" > \"tmp.out\"\n  while read -r tmp \n  do\n\
    \    if [[ ${frequency} -le ${tmp} ]]; then\n      result=\"${tmp}\"\n    fi\n\
    \  done < \"tmp.out\"\n  rm -f \"tmp.out\"\n  echo \"${result}\"\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2hl6pgll.sh: line 18: list.out: No such file or directory

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    echo -n \"Enter the list of integers,\
    \ one per line: \"\n    read list\n    if [[ ${#list} -eq 0 ]]; then\n       \
    \ echo \"No valid entries entered.\"\n    else\n        freq=0\n        arr=()\n\
    \        while read line; do\n            if [[ \"${line}\" == *\"${list}\"* ]];\
    \ then\n                arr+=(\"$line\")\n                freq=$((${freq}+1))\n\
    \            fi\n        done <<< \"$list\"\n        if [[ \"$freq\" -gt \"${#arr[@]}\"\
    \ ]]; then\n            echo \"Invalid entry for ${list}\"\n        else\n   \
    \         echo \"${arr[0]}\"\n        fi\n    fi\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=19 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=12 encoding='utf-8'>
  timestamp: 1660058396
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n   local numbers=$1\n   local max=$(($numbers\
    \ | wc -l))\n   local num\n   local numIndex\n   local found\n\n   for i in $numbers\n\
    \   do\n      num=$(echo $i | awk '{print $1}')\n      numIndex=$(($numbers |\
    \ grep $num |wc -l))\n      if [[ $numIndex -gt $max ]]\n      then\n        \
    \ found=\"YES\"\n         break\n      fi\n   done\n\n   if [[ $numIndex -eq $max\
    \ ]]\n   then\n      echo \"-1\"\n   else\n      echo \"$num\"\n   fi\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2xenx5nu.sh: line 17: 5 5 5 5 1 | wc -l: syntax error in expression
    (error token is "5 5 5 1 | wc -l")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local input=\"${1}\"\n    local\
    \ max=\"${input}\"\n    local inputArray=($input)\n    local index=0\n    for\
    \ each in ${inputArray[@]}; do\n        ((index++))\n        if (( max > each\
    \ )); then\n            max=\"${each}\"\n        fi\n    done\n    echo \"$max\"\
    \n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw6qpwkd3.sh: line 22: ((: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmpw6qpwkd3.sh: line 22: ((: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    /tmp/tmpw6qpwkd3.sh: line 22: ((: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    /tmp/tmpw6qpwkd3.sh: line 22: ((: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    /tmp/tmpw6qpwkd3.sh: line 22: ((: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local numbers=$1\n    local number\n\
    \    local result\n    local count\n    local i\n    local value\n    local max\n\
    \    local num\n\n    numbers=$(echo $numbers | sed -e 's/ //g')\n\n    num=-1\n\
    \    while [ \"$numbers\" != \"\" ]; do\n        num=$(echo \"$numbers\" | cut\
    \ -d\" \" -f1)\n        values=$(echo \"$numbers\" | cut -d\" \" -f2)\n      \
    \  count=$(awk -v a=\"$num\" -v b=\"$values\" '{print freq(a)+freq(b)}' $2)\n\
    \        num=$(expr $num + 2)\n        if [ $count -gt \"$value\" ]; then\n  \
    \          result=$num\n            break\n        fi\n    done\n    return $result\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=18 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=13 encoding='utf-8'>
  timestamp: 1660058396
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local searchString frequency string\n\
    \    searchString=$1\n    string=$( echo $searchString | sed 's/\\([0-9]*\\)/\\\
    1/g' )\n    searchString=$( echo $searchString | sed 's/[0-9]\\([a-zA-Z]*\\)/\\\
    1/g' )\n    searchString=$( echo $searchString | sed 's/\\([0-9]*\\)/\\1/g' )\n\
    \    searchString=$( echo $searchString | sed 's/[0-9]\\([a-zA-Z]*\\)/\\1/g' )\n\
    \    while [ \"$searchString\" != \"\" ]; do\n        frequency=$( echo $searchString\
    \ | sed 's/[0-9]*//g' | sort -u | wc -l )\n        if [ $frequency -gt $1 ]; then\n\
    \            echo ${searchString}\n            return 0\n        fi\n        searchString=$(\
    \ echo $searchString | sed 's/[0-9]*//g' )\n    done\n    echo -1\n    return\
    \ 0\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local string=$1\n    local array=$string\n\
    \    local count\n\n    for (( i=1; i<${#array[@]};i++ )); do\n        count=\"\
    ${array[$i]}\"\n        (( count>0 ? count : count=0 ))\n        if [ $count -gt\
    \ $array[$i] ]; then \n            echo $array[$i]\n            return $i\n  \
    \      fi\n    done\n    echo -1\n    return -1\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local freq\n    local i\n    local\
    \ max\n\n    # Create a dictionary that stores pairs of integers as keys ( value\
    \ 1 ).\n    declare -A array\n    for i in \"$1\"; do\n        array[\"$i\"]=1\n\
    \    done\n\n    # Initialize a frequency variable to be the maximum frequency\
    \ of any key in the array.\n    max=\"${#array[@]}\"\n\n    # Get the first key\
    \ in the array and set the frequency to 0\n    freq=\"${!array[@]}\"\n\n    #\
    \ Iterate through all the keys in the array\n    for k in \"${array[@]}\"; do\n\
    \        if [ \"$freq\" -gt \"$k\" ]; then\n            freq=\"${!k}\"\n     \
    \   fi\n    done\n\n    # Return the greatest integer that has a frequency greater\
    \ than or equal to the value of the integer itself.\n    if [ \"$max\" -gt \"\
    $freq\" ]; then\n        echo \"$max\"\n    else\n        echo \"-1\"\n    fi\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp20pvmwz7.sh: line 34: [: 5 5 5 5 1: integer expression expected

    /tmp/tmp20pvmwz7.sh: line 40: [: 5 5 5 5 1: integer expression expected

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 2
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local integer frequency \n   \
    \ integer=$1\n    shift\n    integer=$(echo \"$integer\" | tr '[:upper:]' '[:lower:]')\n\
    \    integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\"\
    \ | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n \
    \   integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\"\
    \ | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n \
    \   integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\"\
    \ | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n \
    \   integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\"\
    \ | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n \
    \   integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\"\
    \ | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n \
    \   integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\"\
    \ | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n \
    \   integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\"\
    \ | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n \
    \   integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\"\
    \ | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n \
    \   integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\"\
    \ | sed \"s/^0*//g\")\n    integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n \
    \   integer=$(echo \"$integer\" | sed \"s/^0*//g\")\n    integer=$(echo \"$\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpppwkmh3z.sh: line 81: unexpected EOF while looking for matching
    `"''

    /tmp/tmpppwkmh3z.sh: line 85: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\tlocal a b c d e f g\n\tIFS=$' \\\
    t\\n' a=( $1 )\n\tc=( \"${a[@]}\" )\n\tb=0\n\t\n\tfor i in \"${c[@]}\"; do\n\t\
    \te=( $b )\n\t\tf=( $i )\n\t\tif [ \"$e\" -lt \"$f\" ]; then\n\t\t\td=( \"${b[@]}\"\
    \ )\n\t\t\tg=( $i )\n\t\tfi\n\t\t(( b++ ))\n\tdone\n\t\n\tIFS=$' \\t\\n' c=( \"\
    ${a[@]}\" )\n\techo $g\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list=$1\n  local greatest=$(($(grep\
    \ -F $list <<< \"$1\" | sort | uniq | head -1)))\n  if [ \"$greatest\" == \"\"\
    \ ]\n  then\n    echo \"-1\"\n  else\n    echo \"$greatest\"\n  fi\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n        set -A A $1\n        max=0\n\
    \        freq=0\n        for i in ${A[@]}; do\n                if [[ ${A[$i]}\
    \ == \"${A[$max]}\" ]]; then\n                        freq=$((${freq}+1))\n  \
    \              else\n                        max=$i\n                        freq=$((${freq}-1))\n\
    \                fi\n        done\n        echo $((${freq}+1))\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpaq53whpw.sh: line 16: set: -A: invalid option

    set: usage: set [-abefhkmnptuvxBCHP] [-o option-name] [--] [arg ...]

    /tmp/tmpaq53whpw.sh: line 16: set: -A: invalid option

    set: usage: set [-abefhkmnptuvxBCHP] [-o option-name] [--] [arg ...]

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local -n num=$1\n  local max=0\n\
    \  local freq=0 i j k p\n  IFS=$'\\n' read -ra numArr <<< \"$1\"\n  for i in \"\
    ${numArr[@]}\"; do\n    # loop through the array and increment the frequency for\
    \ each number\n    ((freq++))\n  done\n  for j in \"${numArr[@]}\"; do\n    #\
    \ loop through the array and compare the frequency with the current number\n \
    \   for ((k=0; k<freq; k++));do\n      # while there are still frequencies that\
    \ are larger than the current number\n      if [[ $(p=\"$(echo \"$j\" | grep -c\
    \ $j)\") -ge $p ]]; then\n        # update the greatest number that has the greatest\
    \ frequency\n        max=$(echo \"$j\" | head -n 1)\n        break\n      fi\n\
    \    done\n  done\n  echo \"$max\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnizpr2dj.sh: line 16: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local -n list=$1\n    local value\
    \ frequency result\n    local i item\n    value=-1\n    frequency=0\n    for ((i=0;\
    \ i<${#list[@]}; ++i)); do\n        item=${list[$i]}\n        ((frequency+=${#item}))\n\
    \        if [[ $item > 0 ]]; then\n            if ((value > 0)); then\n      \
    \          if ((frequency > value)); then\n                    value=frequency\n\
    \                    result=$item\n                fi\n            else\n    \
    \            value=0\n                result=$item\n            fi\n        fi\n\
    \    done\n    echo \"$result\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1i35yy_6.sh: line 16: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local a b c i j k x y z freq\n \
    \ IFS=$' \\t\\n' read -a array <<< \"$1\"\n  for ((i = 1; i <= ${#array[@]}; ++i))\
    \ ; do\n    x=\"${array[i-1]}\"\n    for ((j = 1; j <= i; ++j)) ; do\n      y=\"\
    ${array[j]}\"\n      ((a<b)&&(b=$a)) || ((a<b)) || return -1\n      ((c>b)&&(b=c))\
    \ || return -1\n      ((a==b)&&(a++)) || return -1\n    done\n    ((a==b)&&(a++))\
    \ || return -1\n    ((z=${array[i-1]})>z) || return -1\n    ((freq=$(awk -v x=\"\
    $x\" -v y=\"$y\" '$1==x&&y>$0{freq++}END{print freq}' array))) || return -1\n\
    \  done\n  echo \"$z\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu46zd5ih.sh: line 22: b: No such file or directory

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\tlocal item=\"${1#*[[:space:]]}\"\
    \n\tlocal list=\"${item%[[:space:]]}\"\n\n\t[ -z \"${item}\" ] && return -1\n\t\
    [ -z \"${list}\" ] && return -1\n\n\tlocal count=0\n\tlocal index=0\n\tlocal max=0\n\
    \n\tfor ((index=0; index<${#list}; index++)) ; do\n\t\t((count+=${list[$index]}))\n\
    \t\tif [[ ${list[$index]} -ge ${item} ]] ; then\n\t\t\tbreak\n\t\tfi\n\tdone\n\
    \n\t[[ ${index} -eq ${#list} ]] && return -1\n\n\t[ \"$max\" -eq 0 ] && max=${list[$index]}\
    \ && echo \"${item}\"\n\t[ \"$max\" -eq \"${list[$index]}\" ] && max=$((${max}+1))\n\
    \n\treturn $max\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmmu2pot9.sh: line 27: ((: count+=5 5 5 1: syntax error in expression
    (error token is "5 5 1")

    /tmp/tmpmmu2pot9.sh: line 28: [[: 5 5 5 1: syntax error in expression (error token
    is "5 5 1")

    /tmp/tmpmmu2pot9.sh: line 27: ((: count+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpmmu2pot9.sh: line 28: [[: 5 5 5 1: syntax error in expression (error token
    is "5 5 1")

    /tmp/tmpmmu2pot9.sh: line 27: ((: count+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpmmu2pot9.sh: line 28: [[: 5 5 5 1: syntax error in expression (error token
    is "5 5 1")

    /tmp/tmpmmu2pot9.sh: line 27: ((: count+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpmmu2pot9.sh: line 28: [[: 5 5 5 1: syntax error in expression (error token
    is "5 5 1")

    /tmp/tmpmmu2pot9.sh: line 27: ((: count+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpmmu2pot9.sh: line 28: [[: 5 5 5 1: syntax error in expression (error token
    is "5 5 1")

    /tmp/tmpmmu2pot9.sh: line 27: ((: count+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpmmu2pot9.sh: line 28: [[: 5 5 5 1: syntax error in expression (error token
    is "5 5 1")

    /tmp/tmpmmu2pot9.sh: line 27: ((: count+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpmmu2pot9.sh: line 28: [[: 5 5 5 1: syntax error in expression (error token
    is "5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n   local IFS=$1\n   local list=${2//$IFS/$IFS}\n\
    \   if [ \"$#\" -lt 2 ]; then\n     echo \"Usage: $0 list1 [list2] ...\" >&2\n\
    \     echo \"Search for integer in lists of positive integers.\" >&2\n     return\
    \ -1\n   fi\n   for ii in $list; do\n      if [[ $(echo \"$list\" | egrep -q \"\
    ${ii}\") ]]; then\n         echo \"$ii\"\n         return 0\n      fi\n   done\n\
    \   echo \"-1\"\n   return 1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'Usage: /tmp/tmpf1rzmnz7.sh list1 [list2] ...

    Search for integer in lists of positive integers.

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local i j tmp freq\n    read -a\
    \ arr <<<\"$1\"\n    for ((i=0; i<${#arr[@]}; i++))\n    do\n        ((freq=arr[i]))\n\
    \        ((j=i+1))\n        while (( ${arr[j]} > freq ))\n        do\n       \
    \     ((j++))\n        done\n        ((freq=${arr[j]}))\n        ((i=j-1))\n \
    \   done\n    echo \"${arr[i]}\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp39o54y5e.sh: line 22: ((: > freq : syntax error: operand expected
    (error token is "> freq ")

    /tmp/tmp39o54y5e.sh: line 26: ((: freq=: syntax error: operand expected (error
    token is "=")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local string=$1\n    local array=($string)\n\
    \    local i freq\n    local val\n    local max\n    local last\n    for i in\
    \ \"${array[@]}\"; do\n\tval=$((${i}+1))\n\tfreq=${array[$i]}\n\tif [ \"${val}\"\
    \ -eq \"$i\" ]; then\n\t    if [ \"$freq\" -gt \"$val\" ]; then\n\t\tmax=$i\n\t\
    \tlast=$val\n\t    elif [ \"$freq\" -eq \"$val\" ]; then\n\t\tlast=$freq\n\t \
    \   fi\n\tfi\n    done\n    echo $last\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local i freq imax\n  local -a arr\n\
    \  freq=0\n  arr=( $1 )\n  for ((i=0;i<${#arr[@]};++i)); do\n    ((freq[$arr[i]]++))\n\
    \  done\n  for ((i=0;i<${#freq[@]};++i)); do\n    if ((freq[$i]>=$freq[$max]));\
    \ then\n      freq[$i]=$freq[$max]\n      imax=$i\n    fi\n    ((max++))\n  done\n\
    \  return ${arr[imax]}\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpypcvkwl5.sh: line 21: 5[i]: syntax error: invalid arithmetic operator
    (error token is "[i]")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local input=$1\n    local integer\n\
    \n    # First loop over all numbers\n    for integer in $input; do\n\n       \
    \ # Second loop over all numbers with that frequency\n        for integer in $input;\
    \ do\n            if [[ $integer -eq $integer && $integer -gt $integer ]]; then\n\
    \                # Return the greatest integer that has frequency greater than\
    \ the frequency of the integer\n                echo $integer\n              \
    \  return 0\n            fi\n        done\n    done\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local -n arr=\"$1\"\n    echo\
    \ \"$arr\" | \n    awk '{\n        for(j=1; j<=NF; j++) {\n            if((arr[$1]==j)\
    \ && ($0>arr[$1])) {\n                arr[$1]=$0;\n            }\n        }\n\
    \    }END{\n        for(j=1; j<=NF; j++) {\n            if(arr[$1]>0) {\n    \
    \            printf \"%s\\t%s\\n\", arr[$1], j;\n            }\n        }\n  \
    \  }'\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp234w9cp4.sh: line 16: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local -n arr=$1\n    local i val\n\
    \    local max\n\n    for ((i=0;i<${#arr[*]};i++)); do\n        val=${arr[i]}\n\
    \        [[ $val -gt 0 ]] &&\n            (max=$((max>val ? max : val)) &&\n \
    \           (arr[i]=$max))\n    done\n    [[ $max -eq -1 ]]\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvzv3_4_9.sh: line 16: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local integer frequency i\n  # Set\
    \ local variables to read numbers in list\n  integer=$1\n  frequency=0\n  for\
    \ i in $integer; do\n    if [ $i -gt 0 ]\n    then\n      frequency=$(($frequency\
    \ + 1))\n    fi\n  done\n  if [ $frequency -gt $1 ]\n  then\n    return $integer\n\
    \  else\n    return -1\n  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7jfsyk1x.sh: line 26: [: too many arguments

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local numbers=\"$1\";\n    local\
    \ max=\"${numbers/ /}\";\n    local min=\"${numbers//[!0-9]/ /}\";\n    local\
    \ maxCounter=\"${#numbers}\"\n    local minCounter=\"0\"\n    local maxIndex\n\
    \    while [[ $minCounter -lt ${#numbers} ]]; do\n        ((minCounter+=1))\n\
    \        if [[ ${numbers[$minCounter]} -gt $max ]]; then\n            max=\"${numbers[$minCounter]}\"\
    \n            maxIndex=\"$minCounter\";\n        fi\n    done\n\n    if [[ ${#numbers}\
    \ -lt $min ]]; then\n        max=\"${numbers[$maxIndex]}\"\n    fi\n    echo \"\
    $max\";\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp906i3y3k.sh: line 24: [[: 55 5 5 1: syntax error in expression
    (error token is "5 5 1")

    /tmp/tmp906i3y3k.sh: line 24: [[: 55 5 5 1: syntax error in expression (error
    token is "5 5 1")

    /tmp/tmp906i3y3k.sh: line 24: [[: 55 5 5 1: syntax error in expression (error
    token is "5 5 1")

    /tmp/tmp906i3y3k.sh: line 24: [[: 55 5 5 1: syntax error in expression (error
    token is "5 5 1")

    /tmp/tmp906i3y3k.sh: line 24: [[: 55 5 5 1: syntax error in expression (error
    token is "5 5 1")

    /tmp/tmp906i3y3k.sh: line 24: [[: 55 5 5 1: syntax error in expression (error
    token is "5 5 1")

    /tmp/tmp906i3y3k.sh: line 24: [[: 55 5 5 1: syntax error in expression (error
    token is "5 5 1")

    /tmp/tmp906i3y3k.sh: line 24: [[: 55 5 5 1: syntax error in expression (error
    token is "5 5 1")

    /tmp/tmp906i3y3k.sh: line 24: [[: 55 5 5 1: syntax error in expression (error
    token is "5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local arr=(\"${@/#/}\")\n    local\
    \ search=\"$(echo $arr | sort -n | tail -n 1)\"\n    local freq=0\n    local num=\"\
    \"\n\n    for ((i=0; i < ${#arr[@]}; i++)); do\n        if (( ${arr[i]} > $search\
    \ )); then\n            freq=$(( ${freq} + 1 ))\n            num=\"$num${arr[i]}\"\
    \n        elif (( ${arr[i]} == $search )); then\n            freq=$(( ${freq}\
    \ + 1 ))\n        fi\n    done\n\n    if (( freq > 0 )); then\n        echo $num\n\
    \    else\n        echo \"-1\"\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsic64y9n.sh: line 22: ((: 5 5 5 5 1 > 5 5 5 5 1 : syntax error
    in expression (error token is "5 5 5 1 > 5 5 5 5 1 ")

    /tmp/tmpsic64y9n.sh: line 25: ((: 5 5 5 5 1 == 5 5 5 5 1 : syntax error in expression
    (error token is "5 5 5 1 == 5 5 5 5 1 ")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local value=\"\"\n  local max=\"\
    \"\n  local maxvalue=\"\"\n  while IFS=, read -r value\n  do\n    if [[ -z \"\
    $max\" ]]\n    then\n        max=$value\n        maxvalue=$value\n    elif [[\
    \ ${maxvalue} -gt $value ]]\n    then\n        max=$value\n        maxvalue=$value\n\
    \    fi\n  done <<< \"$1\"\n  if [[ -z $max ]]\n  then\n    return -1\n  fi\n\
    \  echo \"$max\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list=$1\n    local value=$2\n\
    \    local count=0\n    local result=-1\n    for (( i=0; i<${#list}; i++ )); do\n\
    \        if [[ \"${list[i]}\" == \"$value\" ]]; then\n            (( count++ ))\n\
    \        elif [[ \"$count\" -gt \"$value\" ]]; then\n            result=$value\n\
    \        fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    search \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list=$1\n    local freq\n\
    \    local greatest\n    freq=$(cat $list | grep -c $1)\n    if [ $freq -ge $1\
    \ ]; then\n        greatest=$1\n    elif [ $freq -gt $1 ]; then\n        greatest=$1\n\
    \    else\n        greatest=-1\n    fi\n    echo \"$greatest\"\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1_d9uzf3.sh: line 20: [: too many arguments

    /tmp/tmp1_d9uzf3.sh: line 22: [: too many arguments

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list_str int_str\n  list_str=$1\n\
    \  int_str=$(echo \"$list_str\" | tr \" \" \"\\n\" | sort -n)\n  (( ${#int_str}\
    \ > 0 )) || return -1\n  int_str=$(echo \"$int_str\" | grep -Fxq \"$int_str\"\
    \ | tail -n 1)\n  (( ${#int_str} > 0 )) || return -1\n  echo $int_str\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n   local array=$1\n   local searcher\n\
    \   searcher=$2\n   local -a maxArray=()\n   local maxIndex=-1\n   local -a foundIndex=()\n\
    \   local maxVal\n   local foundVal\n   maxVal=$(echo $array | sed \"s/$searcher/$searcher/\"\
    )\n   maxVal=$((${#maxVal}-1))\n   maxArray[0]=$maxVal\n   for (( i=1; i< ${#array[@]};\
    \ i++ ))\n   do\n      foundVal=0\n      foundIndex[0]=0\n      for (( i=1; i<${#maxArray[@]};\
    \ i++ ))\n      do\n         if [ ${array[$i]} -gt $maxArray[$i] ]\n         then\n\
    \            foundVal=1\n            foundIndex[0]=$i\n         fi\n      done\n\
    \      if [ ${foundVal} -eq 1 ]\n      then\n         maxIndex=$((maxIndex+1))\n\
    \         maxArray[$maxIndex]=${array[$foundIndex[0]]}\n      fi\n   done\n  \
    \ for (( i=1; i<${#maxArray[@]}; i++ ))\n   do\n      if [ ${maxArray[$i]} -eq\
    \ $maxVal ]\n      then\n         return ${maxArray[$i]}\n      fi\n   done\n\
    \   return -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 0: no previous regular expression

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\tlocal input=\"$1\"\n\tlocal output=$(grep\
    \ \"^$1\\$\" \"$input_temp_file\" | head -1)\n\t\n\t# if grep doesn't find anything,\
    \ then output is \"\"\n\tif [ -z \"$output\" ]; then\n\t\treturn -1\n\telse\n\t\
    \toutput=$(echo $output | cut -d \" \" -f 1)\n\t\techo \"$output\"\n\tfi\n}\n\n\
    candidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: : No such file or directory

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local arr=$1\n  local max=$2\n \
    \ local min=$2\n  local count\n  local i\n\n  for ((i = 1; i <= ${#arr[@]}; i++));\
    \ do\n    ((count[$arr[i]]+=1))\n    if ((min > $arr[i])); then\n      min=$arr[i]\n\
    \    fi\n    if ((max < $arr[i])); then\n      max=$arr[i]\n    fi\n  done\n\n\
    \  if ((${#count[@]} >= 1)); then\n    if ((${#count[@]} >= $min)) && ((${#count[@]}\
    \ >= $max)); then\n      echo \"$max\"\n    else\n      echo \"-1\"\n    fi\n\
    \  else\n    echo \"-1\"\n  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd4pi59j9.sh: line 23: 5 5 5 5 1[i]: syntax error in expression
    (error token is "5 5 5 1[i]")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local -n arr=$1; local -i n=${#arr[@]}\n\
    \    local -i max_idx=0; local -i max_freq=0\n    local i freq\n    for i in \"\
    ${!arr[@]}\"; do\n        freq=$(echo \"${arr[i]}\" | awk '{print $1}')\n    \
    \    if (( \"${freq}\" >= \"${max_freq}\" )); then\n            max_freq=\"${freq}\"\
    \n            max_idx=\"${i}\"\n        fi\n    done\n    echo \"${arr[$max_idx]}\"\
    \n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd73ssrwl.sh: line 16: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list=\"$1\"\n  local max=\"\
    ${list[0]}\"\n  local count=\"${list[0]}\"\n  for i in \"${list[@]:1}\"; do\n\
    \    if [[ \"$max\" -gt \"$i\" ]]; then\n      max=\"$i\"\n    fi\n    if [[ \"\
    $i\" -gt \"$count\" ]]; then\n      count=\"$i\"\n    fi\n  done\n  if [[ \"$count\"\
    \ -gt \"$max\" ]]; then\n    echo \"$max\"\n  else\n    echo \"-1\"\n  fi\n}\n\
    \ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphr0vz6j9.sh: line 20: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmphr0vz6j9.sh: line 23: [[: 5 5 5 1: syntax error in expression (error token
    is "5 5 1")

    /tmp/tmphr0vz6j9.sh: line 27: [[: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local arr=( $1 )\n    local len=${#arr[*]}\n\
    \    local max=0\n    local i=0 j=0 k=0\n    for ((i=0; i < len; i++)); do\n \
    \       if [[ ${arr[i]} -gt $max ]]; then\n            max=${arr[i]}\n       \
    \     j=0\n            k=$i\n        elif [[ ${arr[i]} -eq $max ]]; then\n   \
    \         ((j++))\n            if [[ ${arr[$i]} -gt $max ]]; then\n          \
    \      max=${arr[$i]}\n                k=$i\n            fi\n        fi\n    done\n\
    \    if [[ ${j} -gt 1 ]]; then\n        echo \"${arr[k]}\"\n    else\n       \
    \ echo \"-1\"\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 2
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local i val\n    local max_freq\n\
    \    max_freq=-1\n    echo $1\n    echo $1|awk '{for(i=1; i<=NF; i++)\n      \
    \  if($i>max_freq)\n            max_freq=$i\n        }\n    }\n    echo $1|awk\
    \ '{for(i=1; i<=NF; i++)\n        if($i==max_freq)\n            if(($(i+1)>max_freq))\n\
    \                max_freq=$(i+1)\n        }\n    }\n    return $max_freq\n}\n\n\
    candidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjsn58xii.sh: line 25: syntax error near unexpected token `(''

    /tmp/tmpjsn58xii.sh: line 25: `    echo $1|awk ''{for(i=1; i<=NF; i++)''

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local -i j=0\n    local -i c=0\n\
    \    local -i a=${#1}\n    local -i b=${#1}\n    while [ $a -gt 0 ]; do\n    \
    \    j=$(($j+1))\n        if [ $j -eq $b ]; then\n            break\n        fi\n\
    \        for ((i=1; i<=$(($a-1)); i++)); do\n            if [ \"$1\" == \"$i\"\
    \ ]; then\n                c=$(expr $c + 1)\n            fi\n        done\n  \
    \      a=$(($a-1))\n    done\n    if [ $a -eq 0 ]; then\n        echo \"-1\"\n\
    \    else\n        echo \"$c\"\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 2
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local i freq\n    freq=0\n   \
    \ for ((i=0; i<${#1}; i++)); do\n        ((freq[$1])+=1)\n        ((freq[$1]>$freq\
    \ && $freq)||=$freq)\n    done\n    if [ $freq -eq $1 ]; then\n        echo \"\
    $i\"\n    else\n        echo \"-1\"\n    fi\n}\n\ncandidate() {\n    search \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") =\
    \ \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaa35xay_.sh: line 19: syntax error near unexpected token `+=1''

    /tmp/tmpaa35xay_.sh: line 19: `        ((freq[$1])+=1)''

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local arg=\"$1\"\n    local list=(\
    \ ${arg//,/ } )\n    local max=\"${list[0]}\"\n    local count=1\n    local x=0\n\
    \    for x in \"${list[@]:1:${#list[@]}}\";\n    do\n        if [ \"$x\" -eq \"\
    $x\" -o \"$x\" -ge \"$count\" ];\n        then\n            count=$x\n       \
    \ else\n            if [ \"$max\" -eq \"$x\" -o \"$max\" -ge \"$count\" ];\n \
    \           then\n                max=$x\n            fi\n        fi\n    done\n\
    \    echo \"$max\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local arr\n  local idx\n  local\
    \ val\n  local ret\n  arr=$1\n  idx=$2\n  val=$3\n  if [ -z \"$arr\" -o -z \"\
    $idx\" -o -z \"$val\" ]; then\n    return -1\n  fi\n  ret=$arr[$idx]\n  (( idx\
    \ > 0 && idx <= ${#arr[@]} )) || return -1\n  (( idx < ${#arr[@]} )) || return\
    \ -1\n  (( val > 0 && val <= ${ret} )) || return -1\n  ret=$(echo $ret | grep\
    \ -c \"$val\")\n  [ $ret -lt 2 ] && return -1\n  ret=$(awk -v x=\"${val}\" '{if\
    \ ($1 == x) { print $2 }}' <<< ${arr[$(( idx - 1 ))]})\n  [ $ret -lt 2 ] && return\
    \ -1\n  ret=$(echo $ret | grep -c \"$val\")\n  [ $ret -eq 0 ] && return -1\n \
    \ ret=$(awk -v x=\"${val}\" '{if ($1 == x) { print $2 }}' <<< ${arr[$idx-1]})\n\
    \  [ $ret -eq 0 ] && return -1\n  ret=$(awk -v x=\"${val}\" '{if ($1 == x) { print\
    \ $2 }}' <<< ${arr[$idx+1]})\n  [ $ret -eq 0 ] && return -1\n  ret=$(awk -v x=\"\
    ${val}\" '{if ($1 == x) { print $2 }}' <<< ${arr[$idx+2]})\n  [ $ret -eq 0 ] &&\
    \ return -1\n  echo $val\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local n i f ret\n  n=-1\n  i=\"\
    $1\" ; shift\n  f=0\n  ret=$i\n  for n in $i; do\n    ((f+=1))\n    if [ $f -gt\
    \ $n ] ; then\n      ret=$n\n    fi\n  done\n  echo $ret\n}\n\ncandidate() {\n\
    \    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local L=${1//$'\\t' /;}\n  local\
    \ N=$(echo ${L} | wc -w)\n  local F=$2\n  local max=0\n  local x=0\n  local y=0\n\
    \  local z=0\n\n  for ((i=0;i<$N;i++)); do\n    local k=$((i+1))\n    if [[ \"\
    ${L}\" =~ ^[0-9]+$ ]]; then\n      if (( ${F[$i]} < ${F[$k]} )); then\n      \
    \  max=${k}\n        x=${i}\n      fi\n    else\n      if (( ${F[$i]} > ${F[$k]}\
    \ )); then\n        max=${k}\n        x=${i}\n      fi\n    fi\n  done\n  echo\
    \ \"$x\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmjs3j9wm.sh: line 32: ((: >  : syntax error: operand expected (error
    token is ">  ")

    /tmp/tmpmjs3j9wm.sh: line 32: ((: >  : syntax error: operand expected (error token
    is ">  ")

    /tmp/tmpmjs3j9wm.sh: line 32: ((: >  : syntax error: operand expected (error token
    is ">  ")

    /tmp/tmpmjs3j9wm.sh: line 32: ((: >  : syntax error: operand expected (error token
    is ">  ")

    /tmp/tmpmjs3j9wm.sh: line 32: ((: >  : syntax error: operand expected (error token
    is ">  ")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    while IFS= read -r line; do\n\
    \        local -n arr=$line\n        local i=0 \n        while [[ -n \"${arr[$i]}\"\
    \ ]]; do\n            (( i++ ))\n        done\n        if (( i >= ${#arr[@]} ))\
    \ ; then\n            return 0\n        fi\n    done <<< \"$1\"\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcdq16apv.sh: line 17: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    grep -E \"(^|[[:space:]])($1)($|[[:space:]])\
    \ \" \"$2\" | sed -e \"s/.$//\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: : No such file or directory

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local input\n  local int\n  input=$1\n\
    \  shift\n  for i in $(seq 1 $(echo $input | tr \" \" \"\\n\" | sort | uniq |\
    \ wc -l)); do\n    int=$(echo $input | cut -d \" \" -f $i)\n    if [ $int -gt\
    \ 0 ] && [ $int -le $1 ]; then\n      echo $int\n      return\n    fi\n  done\n\
    \  echo \"-1\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo8i2rddq.sh: line 22: [: 5: unary operator expected

    /tmp/tmpo8i2rddq.sh: line 22: [: 5: unary operator expected

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local x=\"${1}\"\n    local s=$(echo\
    \ \"${x}\" | sort -n)\n    local i=${#s}\n    for ((i=0; i<$i; i++))\n    do\n\
    \        [[ \"${s[i]}\" -ge \"${s[i+1]}\" ]] && return ${s[i+1]}\n    done\n \
    \   return -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local search=\n    local i=\n\
    \    while [[ $search != \"\" ]]; do\n        local j=0\n        search=$(echo\
    \ $search | sed -E 's/ ([0-9]+)$/\\1/')\n        i=$(echo $search | sed -E 's/\
    \ ([0-9]+)/\\1/')\n        grep $i $1;\n    done;\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 2
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local item=\"$1\"\n  local searchitem\n\
    \  local searchitem\n  local searchitem\n  local searchitem\n  local searchitem\n\
    \  local searchitem\n  local searchitem\n  local searchitem\n\n  searchitem=\"\
    $(grep -q \"^$1$\" \"${1}\" ; echo \"${?}\" ; exit ${?})\n  searchitem=\"$(grep\
    \ -q \"^${1}$\" \"${1}\" ; echo \"${?}\" ; exit ${?})\n  searchitem=\"$(grep -q\
    \ \"^$1\" ${1} ; echo \"${?}\" ; exit ${?})\n  searchitem=\"$(grep -q \"^${1}\"\
    \ ${1} ; echo \"${?}\" ; exit ${?})\n  searchitem=\"$(grep -q \"^${1}$\" ${1}\
    \ ; echo \"${?}\" ; exit ${?})\n  searchitem=\"$(grep -q \"^$1$\" ${1} ; echo\
    \ \"${?}\" ; exit ${?})\n  searchitem=\"$(grep -q \"^$1\" ${1} ; echo \"${?}\"\
    \ ; exit ${?})\n  searchitem=\"$(grep -q \"^${1}\" ${1} ; echo \"${?}\" ; exit\
    \ ${?})\n  searchitem=\"$(grep -q \"^${1}$\" ${1} ; echo \"${?}\" ; exit ${?})\n\
    \  searchitem=\"$(grep -q \"^$1$\" ${1} ; echo \"${?}\" ; exit ${?})\n  searchitem=\"\
    $(grep -q \"^$1\" ${1} ; echo \"${?}\" ; exit ${?})\n  searchitem=\"$(grep -q\
    \ \"^${1}\" ${1} ; echo \"${?}\" ; exit ${?})\n  searchitem=\"$(grep -q \"^${1}$\"\
    \ ${1} ; echo \"${?}\" ; exit ${?})\n  searchitem=\"$(grep -q \"^$1$\" ${1} ;\
    \ echo \"${?}\" ; exit ${?})\n  searchitem=\"$(grep -q \"^$1\" ${1} ; echo \"\
    ${?}\" ; exit ${?})\n  searchitem=\"$(grep -q \"^${1}\" ${1} ; echo \"${?}\" ;\
    \ exit ${?})\n  searchitem=\"$(grep -q \"^${1}$\" ${1} ; echo \"${?}\" ; exit\
    \ ${?})\n  searchitem=\"$(grep -q \"^$1$\" ${1} ; echo \"${?}\" ; exit ${?})\n\
    \  searchitem=\"$(grep -q \"^$1\" ${1} \n}\n\ncandidate() {\n    search \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n  \
    \  [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"\
    -1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj7hk0djr.sh: line 44: unexpected EOF while looking for matching
    `)''

    /tmp/tmpj7hk0djr.sh: line 81: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local IFS=' ' arr=($1)\n    local\
    \ max=$((${#arr[@]}-1))\n    for ((i=max;i>=0;i--)); do\n        if ((${arr[i]}\
    \ >= ${arr[i-1]})); then\n            max=i\n        fi\n    done\n    echo $max\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\t\n\tlocal list_=$1\n\t\n\t# Trim\
    \ the list to remove any whitespace\n\tlist_=${list_// /$'\\n'}\n\t\n\t# Count\
    \ the number of occurances of each element\n\tlocal count_=$(grep -o -P '(?<=^|)$list_(?=\\\
    s)' <<< $list_ | sort | uniq -u)\n\t\n\t# Get the greatest number that passes\
    \ the test\n\tlocal max_=$(echo ${count_[@]} | sort -n | tail -n1)\n\t\n\t# If\
    \ no such number exists, return -1\n\t[[ -z $max_ ]] && return -1\n\t\n\t# If\
    \ that number appears more than once, return its value\n\t[[ -n $(echo $count_\
    \ | grep -E \"^${max_}( ){0,1}\") ]] && return $max_\n\t\n\treturn -1\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local list=\"${1}\"\n    local\
    \ search\n    search=$(grep \"^${list}\" \"${file}\" | sort -u | xargs)\n    if\
    \ [ -z \"${search}\" ]; then\n        echo \"-1\"\n    else\n        echo \"${search}\"\
    \n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\"\
    ) = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8\
    \ 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: : No such file or directory

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\tlocal str=$1\n\tlocal freq num\n\
    \tfor ((i=1; i<${#str}; i++)); do\n\t\tif [[ $str == *\"${str[i]}\"* ]]; then\n\
    \t\t\t((freq+=1))\n\t\tfi\n\tdone\n\tfor i in ${str}; do\n\t\tif [[ ${freq} -ge\
    \ ${i} ]]; then\n\t\t\treturn ${i}\n\t\tfi\n\tdone\n\treturn -1\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list=$1\n  local i freq\n\
    \  freq=${list#*}\n  shift\n  for i in $list; do\n    if [[ $i -ge $freq ]]; then\n\
    \      freq=$i\n    fi\n  done\n  if [[ $freq -eq 0 ]]; then\n    echo -1\n  else\n\
    \    echo $freq\n  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy94nbpej.sh: line 21: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmpy94nbpej.sh: line 21: [[: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    /tmp/tmpy94nbpej.sh: line 21: [[: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    /tmp/tmpy94nbpej.sh: line 21: [[: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    /tmp/tmpy94nbpej.sh: line 21: [[: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    /tmp/tmpy94nbpej.sh: line 25: [[: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list=\"$1\"\n  local max=\"\
    $2\"\n  local i\n\n  for ((i=0; i<${#list}; i++)); do\n    if [[ ${#list} = $i\
    \ ]] ; then break; fi\n    local frequency=`grep -c \"^${list[i]} \" ${list} |\
    \ cut -d \" \" -f 1`\n    if (( frequency > max )); then \n      max=\"${list[i]}\"\
    \n    fi\n  done\n  if (( ${#list} == 0 )); then \n    echo \"${max}\"\n  else\n\
    \    echo \"${max}\"\n  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpanfcz45d.sh: line 23: ((: 5:0

    5:0

    5:0

    5:0

    1:0: syntax error in expression (error token is ":0

    5:0

    5:0

    5:0

    1:0")

    /tmp/tmpanfcz45d.sh: line 23: ((: 5:0

    5:0

    5:0

    5:0

    1:0: syntax error in expression (error token is ":0

    5:0

    5:0

    5:0

    1:0")

    /tmp/tmpanfcz45d.sh: line 23: ((: 5:0

    5:0

    5:0

    5:0

    1:0: syntax error in expression (error token is ":0

    5:0

    5:0

    5:0

    1:0")

    /tmp/tmpanfcz45d.sh: line 23: ((: 5:0

    5:0

    5:0

    5:0

    1:0: syntax error in expression (error token is ":0

    5:0

    5:0

    5:0

    1:0")

    /tmp/tmpanfcz45d.sh: line 23: ((: 5:0

    5:0

    5:0

    5:0

    1:0: syntax error in expression (error token is ":0

    5:0

    5:0

    5:0

    1:0")

    /tmp/tmpanfcz45d.sh: line 23: ((: 5:0

    5:0

    5:0

    5:0

    1:0: syntax error in expression (error token is ":0

    5:0

    5:0

    5:0

    1:0")

    /tmp/tmpanfcz45d.sh: line 23: ((: 5:0

    5:0

    5:0

    5:0

    1:0: syntax error in expression (error token is ":0

    5:0

    5:0

    5:0

    1:0")

    /tmp/tmpanfcz45d.sh: line 23: ((: 5:0

    5:0

    5:0

    5:0

    1:0: syntax error in expression (error token is ":0

    5:0

    5:0

    5:0

    1:0")

    /tmp/tmpanfcz45d.sh: line 23: ((: 5:0

    5:0

    5:0

    5:0

    1:0: syntax error in expression (error token is ":0

    5:0

    5:0

    5:0

    1:0")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local a=($1)\n    local len=${#a[@]}\n\
    \    local max=0\n    local maxval=0\n\n    for i in {0..$len}; do\n        if\
    \ [ $i -eq 0 ]; then \n            continue \n        fi\n        if [ $i -gt\
    \ $len ]; then \n            continue\n        fi\n        if [ $i -gt $max ];\
    \ then \n            max=i\n        fi\n        if [ ${a[$i]} -eq ${a[max]} ];\
    \ then\n            maxval=$i\n        fi\n    done\n\n    if [ ${maxval} -eq\
    \ 0 ]; then\n        echo -1\n    else\n        echo ${maxval}\n    fi\n}\n\n\
    candidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_83uzav2.sh: line 22: [: {0..5}: integer expression expected

    /tmp/tmp_83uzav2.sh: line 25: [: {0..5}: integer expression expected

    /tmp/tmp_83uzav2.sh: line 28: [: {0..5}: integer expression expected

    /tmp/tmp_83uzav2.sh: line 31: {0..5}: syntax error: operand expected (error token
    is "{0..5}")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local input\n  input=$1\n  local\
    \ count\n  local max\n  local value\n  value=0\n  max=0\n  while [ $# -gt 0 ]\n\
    \  do\n    read x\n    if [ \"$x\" != \"\" ]\n    then\n      value=$(($value\
    \ + $x))\n      if [ $value -gt $max ]\n      then\n        max=$value\n     \
    \ fi\n    fi\n    shift\n  done\n  if [ $max -gt 0 ]\n  then\n    echo \"$max\"\
    \n  else\n    echo \"-1\"\n  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=35 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660058396
- exit_code: -1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    IFS=' '\n    while read -r line;\
    \ do\n        eval \"$line\"\n    done\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=58 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=54 encoding='utf-8'>
  timestamp: 1660058396
- exit_code: 2
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local numbers=\"$1\"\n    local\
    \ numbers_array=()\n    local max_number\n    local count\n    local number\n\
    \    local frequency\n    \n    # Loop through the numbers in numbers_array and\
    \ count them.\n    # Start with max_number = $numbers[0]\n    # Iterate through\
    \ each number in numbers array and count them and put into numbers_array\n   \
    \ for number in $numbers; do\n        ((count++))\n        ((numbers_array[$number]=${numbers_array[$number]}+1))\n\
    \    done\n    \n    # Sort numbers_array in descending order\n    numbers_array=(\"\
    ${numbers_array[@]}\" | sort -nr -k 2 | sed 's/^/./')\n    \n    # If the numbers_array\
    \ contains more than 1 number, then\n    # Find max_number in the array\n    if\
    \ [ ${#numbers_array[@]} -ge 1 ]; then \n        # Sort numbers_array in ascending\
    \ order\n        numbers_array=(\"${numbers_array[@]}\" | sort -nr | sed 's/^/./')\n\
    \        # Find max_number in the array\n        max_number=\"${numbers_array[0]}\"\
    \n        # Iterate through numbers_array\n        for number in ${numbers_array[@]};\
    \ do\n            # If the current number is the same as max_number, \n      \
    \      # then the value of max_number is greater than frequency\n            if\
    \ [ $number -eq $max_number ]; then\n                # Set the value of max_number\
    \ to frequency of current number\n                max_number=$number\n       \
    \         # Set the value of frequency to the count of current number\n      \
    \          frequency=$((numbers_array[$number]))\n            fi\n        done\n\
    \        # If the frequency is greater than or equal to the value of max_number,\
    \ return max_number\n        if [ $frequency -ge $max_number ]; then\n       \
    \     # Return max_number\n            return $max_number\n        else\n    \
    \        # Return -1\n            return -1\n        fi\n    else\n        # If\
    \ there is only one number, return it\n        return $numbers_array[0]\n    fi\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpua8njznx.sh: line 32: syntax error near unexpected token `|''

    /tmp/tmpua8njznx.sh: line 32: `    numbers_array=("${numbers_array[@]}" | sort
    -nr -k 2 | sed ''s/^/./'')''

    /tmp/tmpua8njznx.sh: line 38: syntax error near unexpected token `|''

    /tmp/tmpua8njznx.sh: line 38: `        numbers_array=("${numbers_array[@]}" |
    sort -nr | sed ''s/^/./'')''

    /tmp/tmpua8njznx.sh: line 55: return: can only `return'' from a function or sourced
    script

    /tmp/tmpua8njznx.sh: line 60: syntax error near unexpected token `else''

    /tmp/tmpua8njznx.sh: line 60: `    else''

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local numbers=''\n    while read\
    \ -r num; do\n        if [[ -n $numbers ]]; then\n            numbers=\"$numbers\
    \ $num\"\n        else\n            numbers=\"$num\"\n        fi\n    done < <(echo\
    \ \"$1\")\n    \n    if [[ -z \"$numbers\" ]]; then\n        echo -1\n       \
    \ return\n    fi\n\n    local max=0\n    for i in $numbers\n    do\n        local\
    \ freq=$(($(echo \"$numbers\" | grep -c \"$i\")))\n        if [[ -z \"$freq\"\
    \ ]]; then\n            continue\n        fi\n        if [[ \"$freq\" -gt \"$max\"\
    \ ]]; then\n            max=\"$freq\"\n        fi\n    done\n    echo -n \"$max\"\
    \n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local x=0\n    local y=\"${1#*\
    \ }\"\n    local freq=()\n    while [[ $y != \"\" ]]; do\n        ((freq[$y]++))\n\
    \        y=\"${y#* }\"\n    done\n    local max=0\n    for i in ${freq[@]}; do\n\
    \        if [ \"$i\" -gt \"$max\" ]; then\n            max=$i\n        fi\n  \
    \  done\n    if [ \"$max\" -gt \"0\" ]; then\n        echo \"$max\"\n    else\n\
    \        echo \"-1\"\n    fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1ekkfhdv.sh: line 20: 5 5 5 1: syntax error in expression (error
    token is "5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  read -a list <<< \"$1\"\n  local\
    \ result\n  local num\n  result=${list[0]}\n  for i in ${!list[@]}; do\n    if\
    \ [ $i -lt $1 ]; then\n      num=${list[i]}\n      break\n    fi\n  done\n  if\
    \ [ $num -lt $result ]; then\n    echo $num\n  else\n    echo $result\n  fi\n\
    }\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv3z0jvxi.sh: line 21: [: too many arguments

    /tmp/tmpv3z0jvxi.sh: line 21: [: too many arguments

    /tmp/tmpv3z0jvxi.sh: line 21: [: too many arguments

    /tmp/tmpv3z0jvxi.sh: line 21: [: too many arguments

    /tmp/tmpv3z0jvxi.sh: line 21: [: too many arguments

    /tmp/tmpv3z0jvxi.sh: line 26: [: -lt: unary operator expected

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local x\n    local i freq max\n\
    \    local -a arr arr1\n    arr=( $1 )\n    arr1=($x)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ ${arr1[$i]} == $i ]] ; then\n            freq=$(( ${freq}\
    \ + 1 ))\n        fi\n    done\n    max=$(( ${freq} + 1 ))\n    for (( i = 1;\
    \ i <= $max; i++ )); do\n        if [[ ${arr1[$i]} -eq $i ]]; then\n         \
    \   echo \"${arr1[$i]}\"\n            return\n        fi\n    done\n    echo \"\
    -1\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") =\
    \ \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8\
    \ 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n\
    \    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10\
    \ 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n\
    \    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    set +o errexit\n    local i a\
    \ b\n    local ret\n    local f\n    \n    local -a array=( $1 )\n    \n    local\
    \ -a sorted_array=( $(sort \"${array[@]}\") )\n    \n    for (( i=0; i<${#array[@]};\
    \ i++ )); do\n        a=\"${sorted_array[$i]}\"\n        b=\"${sorted_array[$((\
    \ i + 1 ))]}\"\n        f=${#a}\n        \n        if [ $f -eq 0 ]; then\n   \
    \         echo \"-1\"\n            return\n        fi\n        \n        if [\
    \ $a -ge 0 -o $b -ge 0 ]; then\n            if [ $a -le 0 -o $b -le 0 ]; then\n\
    \                if [ $a -eq $b ]; then\n                    echo \"$a\"\n   \
    \                 return\n                fi\n            else\n             \
    \   if [ $a -gt $b ]; then\n                    echo \"$a\"\n                \
    \    return\n                fi\n            fi\n        else\n            echo\
    \ \"$a\"\n            return\n        fi\n    done\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphggd2uly.sh: line 35: [: ": integer expression expected

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local i\n  local f\n  local max\n\
    \  local val\n  local count\n\n  local -n l=$1\n\n  max=-1\n  for i in ${l[@]};\
    \ do\n    val=$(echo $i | cut -d ' ' -f 1)\n    count=$(echo $i | cut -d ' ' -f\
    \ 2)\n    if [ $val -gt 0 ] && [ $count -gt $val ]; then\n      if [ $count -gt\
    \ $max ]; then\n        max=count\n      fi\n    fi\n  done\n  echo $max\n}\n\n\
    candidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkwrvu508.sh: line 22: local: `5 5 5 5 1'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\tlocal list i\n\tlist=( $1 )\n\t\
    for i in \"${list[@]}\"; do\n\t\t(( ${i} > 0 )) && break\n\tdone\n\tif (( ${i}\
    \ > 0 )); then\n\t\techo \"$i\"\n\telse\n\t\techo \"-1\"\n\tfi\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local F=\"${1}\"\n    local FCOUNT=$(echo\
    \ \"${F}\" | grep -o -w \"${F}\")\n    local FCOUNTCOUNT=${FCOUNT:-0}\n    local\
    \ I=0\n    local MAXVAL=${F}\n    local MAXFREQ=0\n    while [ \"${FCOUNTCOUNT}\"\
    \ -gt \"${I}\" ]; do\n        MAXVAL=$(echo \"${F}\" | cut -d' ' -f ${I+1})\n\
    \        MAXFREQ=$((${MAXFREQ}+1))\n        I=$((${I}+1))\n    done\n    echo\
    \ \"${MAXVAL}\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3chwqvcc.sh: line 22: [: 5 5 5 5 1: integer expression expected

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local arr=$1\n  local greatest\n\
    \  local count\n  local freq\n\n  for (( i = 0; i < ${#arr[@]}; i++ )); do\n \
    \   count=0\n    freq=0\n    greatest=${arr[i]}\n    for (( j=0; j < ${#arr[@]};\
    \ j++ )); do\n      if [ ${arr[j]} -eq ${arr[i]} ]; then\n        count=$(( $count\
    \ + 1 ))\n        freq=$(( $freq + 1 ))\n        if [ $freq -ge $count ]; then\n\
    \          greatest=$arr[j]\n        fi\n      fi\n    done\n    if [ $greatest\
    \ -ne 0 ] && [ $freq -ge $greatest ]; then\n      return 0\n    fi\n  done\n \
    \ return -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpj00b6vb6.sh: line 26: [: too many arguments

    /tmp/tmpj00b6vb6.sh: line 34: [: too many arguments

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  mapfile -t array <<<\"$1\"\n  local\
    \ -i max\n  local -i i\n  local -i cnt\n  for ((i=0; i < ${#array[@]}; i++));\
    \ do\n    (( cnt+=array[i] ))\n    if [[ ${array[i]} -gt 0 ]]; then\n      max=\"\
    ${array[i]}\"\n    fi\n  done\n  if (( cnt == 0 )); then\n    return -1\n  fi\n\
    \  echo -n ${max}\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsy5wy6q4.sh: line 21: ((: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    /tmp/tmpsy5wy6q4.sh: line 22: [[: 5 5 5 5 1: syntax error in expression (error
    token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    arr=($(echo $1 | tr \" \" \"\\\
    n\"))\n    for i in \"${arr[@]}\"\n    do\n        if [ $(( $i < $2 )) ]\n   \
    \     then\n            echo $i\n            return\n        fi\n    done\n  \
    \  echo $-1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyoi5hw0y.sh: line 19: 5 <  : syntax error: operand expected (error
    token is "<  ")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list=(\"${@}\")\n  local result\n\
    \  local count=0\n  \n  for i in \"${list[@]}\"; do\n    (( count += i ))\n  done\n\
    \  \n  if [ $count -gt 0 ]; then\n    for n in \"${list[@]}\"; do\n      (( result\
    \ = n ))\n    done\n  else\n    result=-1\n  fi\n  \n  echo \"$result\"\n}\n\n\
    candidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n\
    \    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\"\
    ) = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"\
    1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[\
    \ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3\
    \ 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2\
    \ 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6\
    \ 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\"\
    \ ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10\
    \ 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7\
    \ 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8\
    \ 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10\
    \ 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n\
    \    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1\
    \ 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9\
    \ 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpahmiw2jo.sh: line 21: ((: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    grep -F -f <(sort <<<\"$1\"|uniq\
    \ -c) <<<\"$1\"|head -1\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local arr=( $1 )\n  local max\n\
    \  local i\n\n  max=$((${arr[@]}>0 && ((${arr[@]}>1 || ${arr[@]} < 0)) || -1)\
    \ )\n  if [ ${max} -eq 0 ]; then\n    echo \"-1\"\n    return\n  fi\n  (( max-=1\
    \ ))\n  for i in ${arr[@]}; do\n    (( $i >= ${arr[0]} )) && break\n    (( ${arr[$i]}++\
    \ ))\n  done\n  echo $max\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkdmsk_bv.sh: line 20: 5: command not found

    /tmp/tmpkdmsk_bv.sh: line 20: -1: command not found

    /tmp/tmpkdmsk_bv.sh: line 21: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n\tstring=$1\n\tstring=${string} \"\
    \ \" # add a space before the first number\n\tstring=${string} \"^\" # add a ^\
    \ before the first number\n\tstring=${string} \".*\" # add a . before the frequency\
    \ of number\n\tstring=${string} \"\\s*$\" # add a whitespace before the number\n\
    \tstring=${string} \"[>|<]\\s*\" # add a > or < before the frequency of number\n\
    \tstring=${string} \"^\\s*$\" # add a ^ before the frequency\n\tstring=${string}\
    \ \"$\" # add a $ before the frequency of number\n\tstring=${string} \"\\s*$\"\
    \ # add a whitespace before the frequency\n\tstring=${string} \"\\.\\s*\" # add\
    \ a . before the frequency of number\n\tstring=${string} \"[>|<]\" # add a > or\
    \ < before the frequency of number\n\tstring=${string} \"[>|<]\" # add a > or\
    \ < before the frequency of number\n\tstring=${string} \"\\s*$\" # add a whitespace\
    \ before the frequency\n\tstring=${string} \"\\s*$\" # add a whitespace before\
    \ the frequency\n\tstring=${string} \"[>|<]\" # add a > or < before the frequency\
    \ of number\n\tstring=${string} \"[>|<]\" # add a > or < before the frequency\
    \ of number\n\tstring=${string} \"\\s*$\" # add a whitespace before the frequency\n\
    \tstring=${string} \"[>|<]\" # add a > or < before the frequency of number\n\t\
    string=${string} \"[>|<]\" # add a > or < before the frequency of number\n\tstring=${string}\
    \ \"\\s*$\" # add a whitespace before the frequency\n\tstring=${string} \"\\s*$\"\
    \ # add a whitespace before the frequency\n\tstring=${string} \"[>|<]\" # add\
    \ a > or < before the frequency of number\n\tstring=${string} \"[>|<]\" # add\
    \ a > or < before the frequency of number\n\tstring=${string} \"\\s*$\" # add\
    \ a whitespace before the frequency\n\tstring=${string} \"\\s*$\" # add a whitespace\
    \ before the frequency\n\tstring=${string} \"[>|<]\" # add a > or < before the\
    \ frequency of number\n\tstring=${string} \"[>|<]\" # add a > or < before the\
    \ frequency of number\n\tstring=${string} \"\\s*$\" # add a whitespace before\
    \ the frequency\n\tstring=${string} \"\\s*$\" # add a whitespace before the frequency\n\
    \tstring=${string} \"[>|<]\" # add a > or < before the frequency of number\n\t\
    string=${string} \"[>|<]\" # add a \n}\n\ncandidate() {\n    search \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv7k5csb2.sh: line 17:  : command not found

    /tmp/tmpv7k5csb2.sh: line 18: ^: command not found

    /tmp/tmpv7k5csb2.sh: line 19: .*: command not found

    /tmp/tmpv7k5csb2.sh: line 20: \s*$: command not found

    /tmp/tmpv7k5csb2.sh: line 21: [>|<]\s*: command not found

    /tmp/tmpv7k5csb2.sh: line 22: ^\s*$: command not found

    /tmp/tmpv7k5csb2.sh: line 23: $: command not found

    /tmp/tmpv7k5csb2.sh: line 24: \s*$: command not found

    /tmp/tmpv7k5csb2.sh: line 25: \.\s*: command not found

    /tmp/tmpv7k5csb2.sh: line 26: [>|<]: command not found

    /tmp/tmpv7k5csb2.sh: line 27: [>|<]: command not found

    /tmp/tmpv7k5csb2.sh: line 28: \s*$: command not found

    /tmp/tmpv7k5csb2.sh: line 29: \s*$: command not found

    /tmp/tmpv7k5csb2.sh: line 30: [>|<]: command not found

    /tmp/tmpv7k5csb2.sh: line 31: [>|<]: command not found

    /tmp/tmpv7k5csb2.sh: line 32: \s*$: command not found

    /tmp/tmpv7k5csb2.sh: line 33: [>|<]: command not found

    /tmp/tmpv7k5csb2.sh: line 34: [>|<]: command not found

    /tmp/tmpv7k5csb2.sh: line 35: \s*$: command not found

    /tmp/tmpv7k5csb2.sh: line 36: \s*$: command not found

    /tmp/tmpv7k5csb2.sh: line 37: [>|<]: command not found

    /tmp/tmpv7k5csb2.sh: line 38: [>|<]: command not found

    /tmp/tmpv7k5csb2.sh: line 39: \s*$: command not found

    /tmp/tmpv7k5csb2.sh: line 40: \s*$: command not found

    /tmp/tmpv7k5csb2.sh: line 41: [>|<]: command not found

    /tmp/tmpv7k5csb2.sh: line 42: [>|<]: command not found

    /tmp/tmpv7k5csb2.sh: line 43: \s*$: command not found

    /tmp/tmpv7k5csb2.sh: line 44: \s*$: command not found

    /tmp/tmpv7k5csb2.sh: line 45: [>|<]: command not found

    /tmp/tmpv7k5csb2.sh: line 46: [>|<]: command not found

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local n=$1\n  local x\n  local val\n\
    \  x=\"1\"\n  val=-1\n  for i in $(seq 1 $n) ; do\n    x=${x// /}\n    if [ $x\
    \ -eq ${x// /} ] ; then \n      if [ $val -eq ${val} ] ; then\n        val=$i\n\
    \      fi\n    fi\n  done\n  echo $val\n}\n\ncandidate() {\n    search \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[\
    \ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"\
    2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7\
    \ 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n   \
    \ [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"\
    8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10\
    \ 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "seq: extra operand \u20185\u2019\nTry 'seq --help' for more information.\n"
  stdout: ''
  timestamp: 1660058391
- exit_code: 2
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local ints\n  local int\n  local\
    \ max\n  IFS=' ' read -r -a ints <<< \"$1\"\n  \n  local freq\n  max=0\n  freq=1\n\
    \  for int in \"${ints[@]}\"; do\n    ((freq++))\n    ((max=(max > int || max==-1))\
    \ && break\n  done\n  \n  if ((max && freq > max)); then \n    return -1\n  fi\n\
    \  \n  return $max\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqnu8cqbe.sh: line 26: syntax error near unexpected token `>''

    /tmp/tmpqnu8cqbe.sh: line 26: `(max=(max > int || max==-1)) ''

    /tmp/tmpqnu8cqbe.sh: line 27: syntax error near unexpected token `done''

    /tmp/tmpqnu8cqbe.sh: line 27: `  done''

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local -n arr=$1 res=-1 i n\n  \n\
    \  for n in \"${arr[@]}\" ; do\n    (( res++ )) && break\n  done\n  if (( res==0\
    \ )); then return -1 ; fi\n  \n  for i in \"${!arr[@]}\" ; do\n    (( n==arr[i]\
    \ )) && break\n  done\n  if (( n!=arr[i] )); then\n    return -1\n  fi\n  \n \
    \ (( n==arr[i] )) && return \"$i\"\n}\n\ncandidate() {\n    search \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfy3bttmo.sh: line 16: local: `5 5 5 5 1'': invalid variable name
    for name reference

    /tmp/tmpfy3bttmo.sh: line 16: local: `-1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  # Your code here\n  mapfile -t -n\
    \ 1 A < <(echo ${1// /$'\\n'})\n  for i in \"${A[@]}\"; do\n    if [ $i -gt 0\
    \ ]; then \n      grep -n $i <(printf \"%s\\n\" ${1// /$'\\n'}) | awk -F ':' '{print\
    \ $2}'\n      return\n    fi\n  done\n  return -1\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpinqafz87.sh: line 19: [: too many arguments

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list_str=\"$1\"\n  local list=($list_str)\n\
    \  local counter=0\n  local result=\"-1\"\n  \n  for element in \"${list[@]}\"\
    ; do\n    (( counter++ ))\n    if (( counter > $element )); then\n      result=$element\n\
    \      break\n    fi\n  done\n  \n  echo \"$result\"\n}\n\ncandidate() {\n   \
    \ search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\")\
    \ = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local arr=$1\n  local last\n  local\
    \ val\n  local count\n  local i\n  local max\n  local last\n\n  # initialize max\
    \ to first element\n  max=${arr[0]}\n\n  # get first element and increment freq\
    \ counter\n  val=${arr[1]}\n  count=1\n  arr[1]=$val\n  echo $arr\n\n  for i in\
    \ ${arr[@]:2}; do\n    last=$i\n    arr[i]=$val\n    val=${arr[i]}\n    count=$((count+1))\n\
    \    arr[i]=$last\n    echo $arr\n    if [ $count -gt $val ]; then\n      max=$i\n\
    \    fi\n  done\n\n  # if max exists, return it\n  if [ -n \"$max\" ]; then\n\
    \    echo \"$max\"\n  else\n    echo \"-1\"\n  fi\n}\n\ncandidate() {\n    search\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate\
    \ \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3\
    \ 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8\
    \ 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4\
    \ 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local list=\"$(echo \"$1\" | sed\
    \ 's/ /\" /g')\"\n  local freq=\"$(echo \"$list\" | sort -n | uniq | wc -l | tr\
    \ -d ' ')\"\n  local greatest=\"$(echo $freq | grep -w \"$list\" | sort -rn |\
    \ head -1)\"\n  if [ -z \"$greatest\" ]; then\n    return -1\n  else\n    echo\
    \ \"$greatest\"\n  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local i j k\n    local count=0\n\
    \    local max=0\n    for (( i = 1; i < ($1); i++ )); do\n        for (( j = (i\
    \ + 1); j < ($#$1); j++ )); do\n            if [ $i -eq $j -a ${1:$j} -gt 0 ];\
    \ then\n                if [ $count -lt $max ]; then\n                    max=$count\n\
    \                fi\n            fi\n        done\n    done\n    if [ $max -gt\
    \ 0 ]; then\n        echo $max\n    else\n        echo -1\n    fi\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0irhus84.sh: line 20: ((: i < (5 5 5 5 1): missing `)'' (error
    token is "5 5 5 1)")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local val=$1\n    local temp=$2\n\
    \    while [[ ${temp:0:1} == \" \" ]]; do temp=${temp:1}; done\n    local max=\"\
    -1\"\n    while [[ ${temp} -ge ${val} ]]; do \n        if [[ ${max} -lt ${temp}\
    \ ]]; then\n            max=${temp}\n        fi\n        ((temp--))\n    done\n\
    \    return ${max}\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprjc1_e0c.sh: line 20: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local numbers=$1\n\n  local num\n\
    \  local max\n  local maxNum\n\n  local -a map=()\n  local -a counts=()\n  local\
    \ key\n  local numCount\n\n  for num in $numbers; do\n    key=$num\n    # Add\
    \ key to map\n    map[$key]=$key\n    # Increment counts\n    counts[$key]=$((counts[$key]+1))\n\
    \  done\n\n  for ((numCount=0; numCount<${#counts[*]}; numCount++)); do\n    #\
    \ Look at map for value\n    num=${map[$((${counts[$((numCount))]}-1)))]}\n  \
    \  # If key exists, set max and compare to num\n    if [[ -n $key ]]; then\n \
    \     max=$key\n      if (( num > $max )); then\n        max=$num\n      fi\n\
    \    fi\n  done\n\n  echo $max\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate\
    \ \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[\
    \ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8\
    \ 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10\
    \ 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n \
    \   [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") =\
    \ \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10\
    \ 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"\
    1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2\
    \ 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate\
    \ \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"\
    5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3_ndkw5f.sh: line 37: -1): syntax error in expression (error token
    is ")")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 2
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local -n arr=$1\n    local max_freq\
    \ freq elem min_freq\n    # Store the frequencies in the array\n    for elem in\
    \ \"${arr[@]}\"; do\n        if [[ ${arr[$elem]} ]]; then\n            if (( ${arr[$elem]}\
    \ >= max_freq )) ; then\n                max_freq=${arr[$elem]}\n            fi\n\
    \        fi\n    done\n\n    # Iterate over each frequency and return the max\
    \ frequency if greater than 0\n    for freq in \"${arr[@]}\"; do\n        if [[\
    \ ${freq} >= 0 ]]; then\n            if (( ${freq} >= min_freq )) ; then\n   \
    \             echo \"${freq}\"\n                return 0\n            fi\n   \
    \     fi\n    done\n\n    # Return -1\n    echo \"-1\"\n    return 0\n}\n\ncandidate()\
    \ {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 5 5\
    \ 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4 4\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3 3\") = \"-1\" ]]\n    [[ $(candidate \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n \
    \   [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n    [[ $(candidate \"2 7 8 8 4 8\
    \ 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\" ]]\n    [[ $(candidate \"3 2 8\
    \ 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8 8 10 5 8 5 3 10\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\" ]]\n    [[ $(candidate \"6 9 6\
    \ 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7 9\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate \"6 9 7 5 8 7 5 3 7 5 10 10 3\
    \ 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n\
    \    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5\") = \"\
    4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10\") = \"2\"\
    \ ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\")\
    \ = \"4\" ]]\n    [[ $(candidate \"9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\"\
    ) = \"-1\" ]]\n    [[ $(candidate \"10\") = \"-1\" ]]\n    [[ $(candidate \"9\
    \ 7 7 2 4 7 2 10 9 7 5 7 2\") = \"2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10\
    \ 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5\
    \ 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate \"3 10 10 9 2\") = \"-1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy86zdh29.sh: line 29: syntax error in conditional expression

    /tmp/tmpy86zdh29.sh: line 29: syntax error near `0''

    /tmp/tmpy86zdh29.sh: line 29: `        if [[ ${freq} >= 0 ]]; then''

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local a b d e g j k l m n o p\
    \ q r s t u v\n    # a is an index that points to the start of a string to be\
    \ searched\n    # b is the index that points to the end of the string to be searched\n\
    \    # d is an index that points to the end of an int to be searched\n    # g\
    \ is a greatest integer that is larger than zero\n    # j is the index that points\
    \ to the next int to be searched\n    # k is the index that points to the next\
    \ int to replace after a replacement\n    # l is a greatest integer that is larger\
    \ than zero\n    # m is an index that points to the end of the int to be searched\n\
    \    # n is an index that points to the next int to be searched\n    # o is a\
    \ greatest integer that is larger than zero\n    # p is index pointing to the\
    \ current int being replaced\n    # q is index pointing to the current int being\
    \ replaced\n    # r is index pointing to the current int being replaced\n    #\
    \ s is an index that points to the end of the int to be searched\n    # t is an\
    \ index that points to the next int to be searched\n    # u is an index that points\
    \ to the next int to replace after a replacement\n    # v is an index that points\
    \ to the end of the int to be searched\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local x\n\
    \    local z\n    local y\n    local freq\n    local str\n    local sfreq\n  \
    \  local sstr\n    local rfreq\n    local rstr\n    local i\n    local j\n   \
    \ local k\n    local l\n    local m\n    local n\n    local o\n    local p\n \
    \   local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local x\n    local z\n    local y\n    local freq\n    local str\n    local\
    \ sfreq\n    local sstr\n    local rfreq\n    local rstr\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local x\n    local z\n    local y\n    local freq\n    local str\n  \
    \  local sfreq\n\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n  local search_value=\"$1\"\n  shift\n\
    \  local freq=0 search_index=0\n  while [[ $search_value =~ ^[0-9]+$ ]]; do\n\
    \    freq=$(( $freq + $search_index ))\n    search_value=\"${search_value:$((\
    \ ${#search_value} - 1 ))}\"\n    search_index=$(( ${search_index} + 1 ))\n  done\n\
    \  if [[ $freq -ge $search_value ]]; then\n    echo $search_value\n  else\n  \
    \  echo -1\n  fi\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4\
    \ 1 4 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprvstcw50.sh: line 24: [[: 5 5 5 5 1: syntax error in expression
    (error token is "5 5 5 1")

    '
  stdout: ''
  timestamp: 1660058391
- exit_code: 1
  program: "#!/bin/bash\n# You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n# zero, and has a frequency greater\
    \ than or equal to the value of the integer itself. \n# The frequency of an integer\
    \ is the number of times it appears in the list.\n# If no such a value exist,\
    \ return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search\
    \ \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n\
    # $1 is a space-separated list\nsearch() {\n    local numbers=\"$1\"\n\n    while\
    \ IFS= read -r number; do\n        if [ $number -gt 0 ] && [[ $(echo \"$numbers\"\
    \ | grep -c \"$number\") -gt $(echo \"$number\" | sed -e 's/ //g') ]] ; then\n\
    \            echo \"$number\"\n        fi\n    done < <(echo \"$numbers\" | tr\
    \ ' ' '\\n')\n}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5 5 5 5 1\") = \"1\" ]]\n    [[ $(candidate \"4 1 4 1 4\
    \ 4\") = \"4\" ]]\n    [[ $(candidate \"3 3\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"8 8 8 8 8 8 8 8\") = \"8\" ]]\n    [[ $(candidate \"2 3 3 2 2\") = \"2\" ]]\n\
    \    [[ $(candidate \"2 7 8 8 4 8 7 3 9 6 5 10 4 3 6 7 1 7 4 10 8 1\") = \"1\"\
    \ ]]\n    [[ $(candidate \"3 2 8 2\") = \"2\" ]]\n    [[ $(candidate \"6 7 1 8\
    \ 8 10 5 8 5 3 10\") = \"1\" ]]\n    [[ $(candidate \"8 8 3 6 5 6 4\") = \"-1\"\
    \ ]]\n    [[ $(candidate \"6 9 6 7 1 4 7 1 8 8 9 8 10 10 8 4 10 4 10 1 2 9 5 7\
    \ 9\") = \"1\" ]]\n    [[ $(candidate \"1 9 10 1 3\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6 9 7 5 8 7 5 3 7 5 10 10 3 6 10 2 8 6 5 4 9 5 3 10\") = \"5\" ]]\n    [[\
    \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"8 8 10 6 4 3 5 8 2 4 2 8\
    \ 4 6 10 4 2 1 10 2 1 1 5\") = \"4\" ]]\n    [[ $(candidate \"2 10 4 8 2 10 5\
    \ 1 2 9 5 5 6 3 8 6 4 10\") = \"2\" ]]\n    [[ $(candidate \"1 6 10 1 6 9 10 8\
    \ 6 8 7 3\") = \"1\" ]]\n    [[ $(candidate \"9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5\
    \ 4 2 8 4 1 9 10 7 10 2 8 10 9 4\") = \"4\" ]]\n    [[ $(candidate \"2 6 4 2 8\
    \ 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10 7\") = \"4\" ]]\n    [[ $(candidate \"9\
    \ 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2 3 1\") = \"2\" ]]\n    [[ $(candidate \"5 5\
    \ 3 9 5 6 3 2 8 5 6 10 10 6 8 4 10 7 7 10 8\") = \"-1\" ]]\n    [[ $(candidate\
    \ \"10\") = \"-1\" ]]\n    [[ $(candidate \"9 7 7 2 4 7 2 10 9 7 5 7 2\") = \"\
    2\" ]]\n    [[ $(candidate \"5 4 10 2 1 1 10 3 6 1 8\") = \"1\" ]]\n    [[ $(candidate\
    \ \"7 9 9 9 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3 10 10 9 2\") = \"-1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058391
