name: HumanEval_161_solve
language: sh
prompt: "#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n\
  # If the string contains no letters, reverse the string.\n# The function should\
  \ return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n\
  # >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is\
  \ a string\nsolve() {\n"
tests: "}\n\ncandidate() {\n    solve \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"AsDf\") = \"aSdF\" ]]\n    [[ $(candidate \"1234\") = \"4321\" ]]\n    [[ $(candidate\
  \ \"ab\") = \"AB\" ]]\n    [[ $(candidate \"#a@C\") = \"#A@c\" ]]\n    [[ $(candidate\
  \ \"#AsdfW^45\") = \"#aSDFw^45\" ]]\n    [[ $(candidate \"#6@2\") = \"2@6#\" ]]\n\
  \    [[ $(candidate \"#\\$a^D\") = \"#\\$A^d\" ]]\n    [[ $(candidate \"#ccc\")\
  \ = \"#CCC\" ]]\n}\n\nrun_test"
completions: ["  local s\n  s=$1\n  local i\n  local ret\n  local temp\n  local count\n\
    \  for i in ${s:0:1}\n  do\n    temp=${s:${i}:${i}}\n    count=${#temp}\n    count=${#temp}\n\
    \    if [ $count -gt 0 ]; then\n      temp=${s:0:${i}-1:1}\n      s=$temp${s:${i}:${i}}\n\
    \      ret=$ret$temp\n      s=${s// /}\n    fi\n  done\n  if [ \"${#s}\" = \"\
    0\" ]; then\n    ret=$ret$s\n  else\n    ret=$ret${s// /}\n  fi\n  ret=${ret:0:1}\n\
    \  ret=${ret:1:1}\n  ret=${ret:2:1}\n  ret=${ret:3:1}\n  ret=${ret:4:1}\n  ret=${ret:5:1}\n\
    \  ret=${ret:6:1}\n  ret=${ret:7:1}\n  ret=${ret:8:1}\n  ret=${ret:9:1}\n  ret=${ret:10:1}\n\
    \  ret=${ret:11:1}\n  ret=${ret:12:1}\n  ret=${ret:13:1}\n  ret=${ret:14:1}\n\
    \  ret=${ret:15:1}\n  ret=${ret:16:1}\n  ret=${ret:17:1}\n  ret=${ret:18:1}\n\
    \  ret=${ret:19:1}\n  ret=${ret:20:1}\n  ret=${ret:21:1}\n  ret=${ret:22:1}\n\
    \  ret=${ret:23:1}\n  ret=${ret:24:1}\n  ret=${ret:25:1}\n  ret=${ret:26:1}\n\
    \  ret=${ret:27:1}\n  ret=${ret:28:1}\n  ret=${ret:29:1}\n  ret=${ret:30:1}\n\
    \  ret=${ret:31:1}\n  ret=${ret:32:1}\n  ret=${ret:33:1}\n  ret=${ret:34:1}\n\
    \  ret=${ret:35:1}\n  ret=${ret:36:1}\n  ret=${ret:37:1}\n  ret=${ret:38:1}\n\
    \  ret=${ret:39:1}\n  ret=${ret:40:1}\n  ret=${ret:41:1}\n  ret=${ret:42:1}\n\
    \  ret=${ret:43:1}\n  ret=${", "    # Write your code here\n    local string=$1\n\
    \    local count=0\n    local res\n    local index=0\n    for ((i=0; i<${#string};\
    \ i++)); do\n        if [[ ${string:$i:1} == [a-z] ]]; then\n            echo\
    \ \"$index\"\n            local var=$index\n            index=$((index+1))\n \
    \           ((count++))\n            string=${string:$i:1}\n            string=${string:0:$((${#string}-1))}\n\
    \            string=${string^^}\n            string=${string}\n        else\n\
    \            string=${string:$i:1}\n        fi\n    done\n    if [ $count -gt\
    \ 0 ]; then\n        var=$((index-1))\n        echo \"$var\"\n        res=${string:0:$var}\n\
    \        res=${res^}\n        res=${res}\n        echo \"$res\"\n    fi", "  \
    \ local s=$1\n   local sol=${s:0:1}\n\n   for ((i=${#s}-1;i>0;i--)); do\n    \
    \  test ${s:$i:1} == \"a\" && { sol=$(echo \"$sol$((${sol:0:1}>=\"a\" ? \"A\"\
    \ : \"a\"))${sol:$((${#sol}-1))}\" | bc); }\n      test ${s:$i:1} == \"A\" &&\
    \ { sol=$(echo \"$sol$((${sol:0:1}>=\"a\" ? \"A\" : \"a\"))${sol:$((${#sol}-1))}\"\
    \ | bc); }\n      test ${s:$i:1} == \"b\" && { sol=$(echo \"$sol${sol:0:1}$((${sol:1:1}>=\"\
    a\" ? \"A\" : \"a\"))$((${sol:$((${#sol}-1))}-1))\" | bc); }\n      test ${s:$i:1}\
    \ == \"B\" && { sol=$(echo \"$sol${sol:0:1}$((${sol:1:1}>=\"a\" ? \"A\" : \"a\"\
    ))$((${sol:$((${#sol}-1))}-1))\" | bc); }\n      test ${s:$i:1} == \"c\" && {\
    \ sol=$(echo \"$sol${sol:0:1}$((${sol:1:1}>=\"a\" ? \"A\" : \"a\"))$((${sol:$((${#sol}-1))}-1))\"\
    \ | bc); }\n      test ${s:$i:1} == \"C\" && { sol=$(echo \"$sol${sol:0:1}$((${sol:1:1}>=\"\
    a\" ? \"A\" : \"a\"))$((${sol:$((${#sol}-1))}-1))\" | bc); }\n      test ${s:$i:1}\
    \ == \"d\" && { sol=$(echo \"$sol${sol:0:1}$((${sol:1:1}>=\"a\" ? \"A\" : \"a\"\
    ))$((${sol:$((${#sol}-1))}-1))\" | bc); }\n      test ${s:$i:1} == \"D\" && {\
    \ sol=$(echo \"$sol${sol:0:1}$((${sol:1:1}>=\"a\" ? \"A\" : \"a\"))$((${sol:$((${#sol}-1))}-1))\"\
    \ | bc); }\n      test ${s:$i:1} == \"e\" && { sol=$(echo \"$sol${sol:0:1}$((${sol:1:1}>=\"\
    a\" ? \"A\" : \"a\"))$((${sol:$((${#sol}-1))}-1))\" | bc); }\n      test ${s:",
  "\tlocal s=${1:-}\n\tlocal result\n\tlocal char\n\tlocal i\n\tlocal newString\n\t\
    for (( i = 0; i < ${#s}; i++ )); do\n\t\tchar=${s:$i:1}\n\t\t\n\t\tif [[ $char\
    \ == \"A\" || $char == \"B\" || $char == \"C\" || $char == \"D\" || $char == \"\
    E\" || $char == \"F\" || $char == \"G\" || $char == \"H\" || $char == \"I\" ||\
    \ $char == \"J\" || $char == \"K\" || $char == \"L\" || $char == \"M\" || $char\
    \ == \"N\" || $char == \"O\" || $char == \"P\" || $char == \"Q\" || $char == \"\
    R\" || $char == \"S\" || $char == \"T\" || $char == \"U\" || $char == \"V\" ||\
    \ $char == \"W\" || $char == \"X\" || $char == \"Y\" || $char == \"Z\" ]]; then\n\
    \t\t\tchar=${char:0:1}\n\t\t\tnewString+=$char\n\t\telse\n\t\t\tnewString+=$char\n\
    \t\tfi\n\tdone\n\tresult=${newString:0:1}\n\tresult=$result${newString:1}\n\t\
    echo \"$result\"", "  # Your code goes here\n  # echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' \n  echo \"$1\" | tr '[:alpha:]' '[:lower:]' | sed 's/[^a-z]//g'\
    \ | sed 's/ //g'", "  local s=$1\n  local i=0\n  local r=''\n  for i in $(seq\
    \ ${#s}); do\n    local c=$(echo $s | sed \"s/.\\(.\\)\\(${s}\\)\\(.\\)/\\1\\\
    L\\2\\U\\3/\")\n    if [[ $c =~ \\A ]]; then\n      r+=\"${c:0:1}${c:1:1}\"\n\
    \    else\n      r+=\"${c}\"\n    fi\n  done\n  echo \"$r\"", "    echo \"$1\"\
    \ | sed 's/\\([a-z]\\)/\\L\\1/'", "  local i s c\n  [[ -z $1 ]] && return $1 ||\
    \ return $(( ${#1} != 0 )) && return $( echo \"$1\" | sed -r 's/[[:alpha:]]/\\\
    U&/g')\n  s=${1//[[:space:]]}\n  [[ -z $s ]] && return $(( ${#1} != 0 )) && return\
    \ $( echo \"$1\" | sed -r 's/[[:alpha:]]/\\L&/g')\n  c=0\n  for i in $s\n  do\n\
    \    if [[ $i == '[' ]]\n    then\n      c=$(( c + 1 ))\n      continue\n    elif\
    \ [[ $i =~ [A-Z] ]]\n    then\n      [ $c -gt 0 ] && echo \"${s:0:$(( c - 1 ))}${i:0:1}${s:$((\
    \ c + 1 ))}\"\n      (( c++ ))\n    elif [[ $i =~ [a-z] ]]\n    then\n      [\
    \ $c -gt 0 ] && echo \"${s:0:$(( c + 1 ))}${i:1:1}${s:$(( c + 1 ))}\"\n      ((\
    \ c++ ))\n    else\n      echo \"$s\"\n    fi\n  done", "    local s=$1\n    local\
    \ c=\"\"\n    local i=0\n    while [ $i -lt ${#s} ]; do\n        case \"${s:i:1}\"\
    \ in\n            [a-z])\n                c=$(echo \"${s:i:1}\" | tr '[:lower:]'\
    \ '[:upper:]')\n                s=$c$s\n                i=$((i+1))\n         \
    \       ;;\n            [A-Z])\n                c=$(echo \"${s:i:1}\" | tr '[:upper:]'\
    \ '[:lower:]')\n                s=$c$s\n                i=$((i+1))\n         \
    \       ;;\n            *)\n                s=$s\n                i=$((i+1))\n\
    \                ;;\n        esac\n    done\n    echo \"$s\"", "  echo $1\n  s=$1\n\
    \  for i in $(seq 1 $((${#s}-1))); do\n    echo ${s%%[a-z]*}\n    echo ${s#*[a-z]}\n\
    \    s=$(echo \"${s//[a-z]/${#s#*[a-z]}}\"|tr [a-z] [A-Z])\n  done\n  echo \"\
    ${s}\"", "  local i s new_string\n  read -r s <<< \"$1\"\n  new_string=$(echo\
    \ \"${s//[a-z]/}\" | sed -e 's/^[a-z]/&U&/' -e 's/U[a-z]/&L&/' | sed -e 's/L$//')\n\
    \  if [[ \"$new_string\" = \"$s\" ]]; then\n    echo \"$s\"\n  else\n    echo\
    \ \"$new_string\"\n  fi", "    local str=$1\n    local len=$#\n    if [[ $len\
    \ -gt 0 ]]; then\n        if [[ $str =~ [a-z] ]]; then\n            str=$(tr [a-z]\
    \ [A-Z] <<< $str)\n        fi\n        if [[ $str =~ [A-Z] ]]; then\n        \
    \    str=$(tr [A-Z] [a-z] <<< $str)\n        fi\n        if [[ $str =~ [^a-zA-Z]\
    \ ]]; then\n            str=$(tr [A-Z] [a-z] <<< $str)\n        fi\n    fi\n \
    \   echo \"$str\"", "    local str=\"$1\"\n    local res=\"\"\n    local i len\
    \ len1\n    len=$(echo \"${str}\" | wc -c)\n    len1=$(echo \"${str}\" | wc -c)\n\
    \    for (( i=1; i<=${len}+1; i++ )); do\n        if [[ ${str[i]} == [a-z] ||\
    \ ${str[i]} == [A-Z] ]]; then\n            res=\"$res${str[i]}\"\n        else\n\
    \            res=\"$res${str[i]}\"\n        fi\n    done\n    echo \"${res}\"\
    \ | sed -e 's/^./&\\L\\&/' -e 's/$/&\\U\\&/'", "    local str=$1\n    local new_str=\"\
    \"\n    for (( i=0; i<${#str}; i++ )); do\n        local c=${str:$i:1}\n     \
    \   if [[ \"$c\" =~ [a-zA-Z] ]] ; then\n            new_str=$((${new_str}+${c^^}))\n\
    \        else\n            new_str=$((${new_str}+${c}))\n        fi\n    done\n\
    \    echo \"$new_str\"", "  local -r string=\"$1\"\n  local -i pos=0\n  local\
    \ -r c=''\n\n  for (( pos=0 ; pos<${#string} ; pos++ )); do\n    case \"${string:$pos:1}\"\
    \ in\n      [a-z] | [A-Z])\n        c=\"${c}${string:$pos:1}${string:$pos+1:1}\"\
    \n        pos+=1\n        ;;\n      *)\n        c=\"${c}${string:$pos}\"\n   \
    \     ;;\n    esac\n  done\n\n  if [[ -n \"${c}\" ]]; then\n    local -r reversed=\"\
    ${c:0:1}${c:1}${c:2:1}${c:3:1}${c:4:1}\"\n    local -r reversed=$(echo \"${reversed}\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local -r final=\"${reversed^^}\"\n    echo\
    \ $final\n  else\n    echo $string\n  fi", "  local input=\"$1\"\n  local output=\"\
    \"\n  for i in $input; do\n    case \"$i\" in\n      [a-zA-Z]*)\n        output+=\"\
    ${i^^}\"\n        ;;\n      *)\n        output+=\"$i\"\n        ;;\n    esac\n\
    \  done\n  echo \"${output}\" | tr A-Z a-z", "  local i\n  local str1=$1\n  local\
    \ str\n  local res\n  local j\n  local count\n  local temp\n  local len\n  local\
    \ letter\n  local upper\n  local lower\n  local letter\n  local upper\n  local\
    \ lower\n  local str1\n  local count\n  for i in $str1; do\n    str=`echo $i |\
    \ tr -d [:punct:]`\n    count=`echo $str | wc -c`\n    if [ $count -gt 0 ]; then\n\
    \      res=`echo $i | tr -d [:punct:]`\n    else\n      res=$i\n    fi\n    str1=`echo\
    \ $res`\n    len=`echo $str1 | wc -c`\n    upper=0\n    lower=0\n    for j in\
    \ $str1; do\n      temp=`echo $j | tr -d [:punct:]`\n      letter=`echo $temp\
    \ | awk '{print toupper ($0)}'`\n      lower=`echo $temp | awk '{print tolower\
    \ ($0)}'`\n      if [ $lower -gt 0 ]; then\n        lower=`echo $lower | awk '{print\
    \ toupper ($0)}'`\n      elif [ $upper -gt 0 ]; then\n        upper=`echo $upper\
    \ | awk '{print tolower ($0)}'`\n      fi\n    done\n    echo $str1\n  done",
  "\tlocal i result temp\n\t[[ $1 =~ ([[:alpha:]]|[[:space:]])* ]] || return \"$1\"\
    \n\t[[ $1 =~ ([[:alpha:]]|[[:space:]])+([[:alpha:]]|[[:space:]])* ]] || return\
    \ \"$1\"\n\tresult=$1\n\tfor ((i=1; i<=$((${#1}-1)); ++i)); do\n\t\ttemp=${1:$i:1}\n\
    \t\t[[ $temp =~ ^[[:alpha:]]$ ]] || temp=${temp,,}\n\t\t[[ $temp =~ ^[[:space:]]$\
    \ ]] || temp=${temp,,}\n\t\t[[ $temp =~ ^[[:alpha:]]([[:alpha:]]|[[:space:]])*$\
    \ ]] || return \"$1\"\n\t\ttemp=${temp,,}\n\t\t[[ $temp =~ ^([[:space:]])*$ ]]\
    \ || return \"$1\"\n\t\t[[ $temp =~ ^([[:alpha:]])([[:alpha:]]|[[:space:]])*$\
    \ ]] || return \"$1\"\n\t\tresult=${result:0:$(($i-1)):1}${result:$i:1}${result:$(($i+1))}\n\
    \tdone\n\treturn $result", "    local STRING=$1\n\n    local CHAR\n    local CHAR1\n\
    \    local CHAR2\n    local CHAR3\n    local CHAR4\n    local CHAR5\n    local\
    \ CHAR6\n    local CHAR7\n    local CHAR8\n    local CHAR9\n    local CHAR10\n\
    \    local CHAR11\n    local CHAR12\n    local CHAR13\n    local CHAR14\n    local\
    \ CHAR15\n    local CHAR16\n    local CHAR17\n    local CHAR18\n    local CHAR19\n\
    \    local CHAR20\n    local CHAR21\n    local CHAR22\n    local CHAR23\n    local\
    \ CHAR24\n    local CHAR25\n    local CHAR26\n    local CHAR27\n    local CHAR28\n\
    \    local CHAR29\n    local CHAR30\n    local CHAR31\n    local CHAR32\n    local\
    \ CHAR33\n    local CHAR34\n    local CHAR35\n    local CHAR36\n    local CHAR37\n\
    \    local CHAR38\n    local CHAR39\n    local CHAR40\n    local CHAR41\n    local\
    \ CHAR42\n    local CHAR43\n    local CHAR44\n    local CHAR45\n    local CHAR46\n\
    \    local CHAR47\n    local CHAR48\n    local CHAR49\n    local CHAR50\n    local\
    \ CHAR51\n    local CHAR52\n    local CHAR53\n    local CHAR54\n    local CHAR55\n\
    \    local CHAR56\n    local CHAR57\n    local CHAR58\n    local CHAR59\n    local\
    \ CHAR60\n    local CHAR61\n    local CHAR62\n    local CHAR63\n    local CHAR64\n\
    \    local CHAR65\n    local CHAR66\n    local CHAR67\n    local CHAR68\n    local\
    \ CHAR69\n    local CHAR70\n    local CHAR71\n    local CHAR72\n    local CHAR73\n\
    \    local CHAR74\n    local CHAR75\n    local CHAR76\n    local CHAR77\n    local\
    \ CHAR78\n    local CHAR79\n    local CHAR80\n    local CHAR81\n    local CHAR82\n\
    \    local CHAR83\n    local CHAR84\n    local CHAR85\n    local CHAR86\n    local\
    \ CHAR87\n    local CHAR88\n    local CHAR89\n    local CHAR90\n    local CHAR91\n\
    \    local CHAR92\n    local CHAR93\n    local CHAR94\n    local CHAR95\n    local\
    \ CHAR96\n    local CHAR97\n    local CHAR98\n    local CHAR99\n    local CHAR100\n\
    \    local ", "    [[ $1 =~ ^[A-z]+$ ]] || return\n    echo $1 | tr [A-Z] [a-z]\
    \ | sed 's/./& \\l&/g'", "    local i res\n    for (( i=0; i < \"${#1}\"; i++\
    \ ))\n    do\n        case \"${1:$i}\" in\n            [[a-z]] | [[A-Z]]) \n \
    \               res=\"${1:$i:1}\"\n                echo \"${1:$i:1}\" > /tmp/tmp\n\
    \                sed -i 's/'\"$res\"'/\\u&/g' /tmp/tmp\n                eval 'echo\
    \ \"'\"$res\"'\"'\n                return 0\n                ;;\n            *)\n\
    \                echo \"${1:$i}\" > /tmp/tmp\n                sed -i \"s/^$1/${1:$i:1}/g\"\
    \ /tmp/tmp\n                eval 'echo \"'\"$res\"'\"'\n                return\
    \ 0\n                ;;\n        esac\n    done", "  local -r str=\"$1\"\n  local\
    \ i=\n  local res\n  \n  if [[ ${#str} -eq 0 ]]; then\n    return \"${str}\"\n\
    \  fi\n  \n  for i in \"${str}\"; do\n    if [[ \"${i}\" =~ ^[a-z] ]]; then\n\
    \      res=\"$((${i^^}))\"\n    else\n      res=\"${i}\"\n    fi\n  done\n  \n\
    \  echo \"$res\"", "local s=$1\nlocal i output\noutput=\"$(echo \"$s\" | sed -e\
    \ 's/^.//' -e 's/.$//')\"\nif [ \"$output\" = \"$s\" ]\nthen \n    echo \"$output\"\
    \nelif [ \"$output\" == \"\" ]\nthen\n    s=$(echo \"$s\" | sed -e 's/^.//' -e\
    \ 's/.$//')\n    echo \"$s\"\nelif [ -n \"$output\" ]\nthen\n    s=$(echo \"$s\"\
    \ | sed -e 's/^.//' -e 's/.$//')\n    for ((i=0;i<${#output};++i)); do\n     \
    \   case \"${output[i]}\" in\n        [a-z]* )\n            s=$(echo \"${s:0:i}${output[i]^^}${s:i+1}\"\
    )\n            ;;\n        [A-Z]* )\n            s=$(echo \"${s:0:i}${output^^}${s:i+1}\"\
    )\n            ;;\n        * )\n            s=$(echo \"${s:0:i}${output}${s:i+1}\"\
    )\n            ;;\n        esac\n    done\n    echo \"$s\"\nfi", "    local -i\
    \ pos=${#$1} idx=0\n    while [ \"$pos\" -gt 0 ]; do\n        if [[ ${1:$pos:1}\
    \ = ${1:$pos:1}[a-Z] ]]; then\n            ${1:$pos:1}=$(echo \"${1:$pos:1}\"\
    \ | tr '[a-z]' '[A-Z]')\n            ((pos--))\n        elif [[ ${1:$pos:1} =\
    \ ${1:$pos:1}[A-z] ]]; then\n            ${1:$pos:1}=$(echo \"${1:$pos:1}\" |\
    \ tr '[A-Z]' '[a-z]')\n            ((pos--))\n        elif [[ ${1:$pos:1} = ${1:$pos:1}[0-z]\
    \ ]]; then\n            ${1:$pos:1}=$(echo \"${1:$pos:1}\" | tr '[0-9]' '[A-Z]')\n\
    \            ((pos--))\n        elif [[ ${1:$pos:1} = ${1:$pos:1}[A-H] ]]; then\n\
    \            ${1:$pos:1}=$(echo \"${1:$pos:1}\" | tr '[a-h]' '[A-H]')\n      \
    \      ((pos--))\n        elif [[ ${1:$pos:1} = ${1:$pos:1}[p-z] ]]; then\n  \
    \          ${1:$pos:1}=$(echo \"${1:$pos:1}\" | tr '[p-z]' '[P-Z]')\n        \
    \    ((pos--))\n        elif [[ ${1:$pos:1} = ${1:$pos:1}[q-z] ]]; then\n    \
    \        ${1:$pos:1}=$(echo \"${1:$pos:1}\" | tr '[q-z]' '[Q-Z]')\n          \
    \  ((pos--))\n        elif [[ ${1:$pos:1} = ${1:$pos:1}[c-z] ]]; then\n      \
    \      ${1:$pos:1}=$(echo \"${1:$pos:1}\" | tr '[c-z]' '[C-Z]')\n            ((pos--))\n\
    \        fi\n        ((idx++))\n    done", "        local s\n\n        s=$(echo\
    \ $1 | cut -d \" \" -f 1)\n        echo $(echo $s | sed 's/\\(.\\)/\\L\\1/' |\
    \ sed 's/\\(.\\)/\\U\\1/')", "\tlocal input_string=\"$1\"\n\tlocal output_string=\"\
    \"\n\n\tif [[ $input_string == \"\" ]]; then\n\t\techo \"Not enough parameters\"\
    \n\t\treturn 1\n\tfi\n\n\tfor ((i = 0; i < ${#input_string}; i++)); do\n\t\tif\
    \ [[ $input_string[i] =~ ^[[:alpha:]]+$ ]]; then\n\t\t\toutput_string=\"${output_string}${input_string[i]^^}\"\
    \n\t\telse\n\t\t\toutput_string=\"${output_string}${input_string[i]}\"\n\t\tfi\n\
    \tdone\n\n\techo \"$output_string\"", "    echo \"$1\" | sed -e 's/[a-z]//g' -e\
    \ 's/[A-Z]*/g' -e 's/\\(.\\)/\\U\\1/g' -e 's/\\(.\\)/\\L\\1/g' | tr '[:upper:]'\
    \ '[:lower:]'", "  local str=$1\n  local new_str=\"\"\n  local length=0\n  for\
    \ i in $str; do\n    if [[ $i == [a-zA-Z] ]]; then\n      new_str+=\"${i^^}\"\n\
    \    else\n      new_str+=$i\n    fi\n    length=$(($length+1))\n  done\n  if\
    \ [[ \"$length\" == \"0\" ]]; then\n    new_str=$new_str\n  else\n    new_str=\"\
    ${new_str^^}\"\n  fi\n  echo \"$new_str\"", "    local i result\n    for ((i=1;\
    \ i<= ${#1}; i++))\n    do\n        local j\n        local k\n        local c\n\
    \        local p\n        local q\n        local t\n\n        c=$(awk '{print\
    \ tolower($0)}' <<< ${1:$i})\n\n        # Check if character is a letter\n   \
    \     if [[ $c =~ [a-z] ]]; then\n            k=$(awk '{print toupper($0)}' <<<\
    \ ${1:$i})\n        else\n            k=$c\n        fi\n\n        result=$result$k\n\
    \n        # Check if character is a letter\n        if [[ $c =~ [a-z] ]]; then\n\
    \            p=$(awk '{print toupper($0)}' <<< ${1:$i})\n        else\n      \
    \      p=$c\n        fi\n\n        result=$result$p\n\n        # Check if character\
    \ is a letter\n        if [[ $c =~ [a-z] ]]; then\n            q=$(awk '{print\
    \ tolower($0)}' <<< ${1:$i})\n        else\n            q=$c\n        fi\n\n \
    \       result=$result$q\n    done\n    echo \"$result\"", "  local s i\n  local\
    \ output=\"\"\n  for i in $1; do\n    if [[ $i =~ ^[a-zA-Z]+$ ]]; then\n     \
    \ if [[ \"$output\" != \"\" ]]; then\n        output+=\"_\"\n      fi\n      output+=\"\
    ${i^^}\"\n    elif [[ $i =~ ^[0-9a-zA-Z]+$ ]]; then\n      output+=\"$i\"\n  \
    \  else\n      output+=$i\n    fi\n  done\n  echo \"$output\"", "  local i tmp\n\
    \  local length=$1\n  tmp=${length//[^a-z]}\n  length=${#tmp}\n  for ((i=0; i<${length};\
    \ i++)); do\n      tmp=${length:i:1}\n      if [[ ${tmp} == [a-z] ]]; then\n \
    \       length=$(expr $length -1)\n        tmp=${tmp:0:1}\n        tmp=${tmp:1}\n\
    \      else\n        length=$(expr $length -1)\n      fi\n    done\n  length=${length:0:1}\n\
    \  echo ${length}${tmp}", "    local str=\"$1\"\n    local len=${#str}\n    local\
    \ rev=0\n    local x\n    for ((i=0;i<len;i++)); do\n        if [[ ${str:i:1}\
    \ == [a-z] ]]; then\n            rev=$rev${str:i:1}\n        else\n          \
    \  x=${str:i:1}\n            rev=$rev${x:0:1}${x:1:1}${x:2:1}\n        fi\n  \
    \  done\n    echo $rev", "  echo -n \"$1\" | tr '[:upper:]' '[:lower:]'", "  \
    \  local input=$1\n    local output=\"\"\n    for ((i=0; i<${#input}; i++)); do\n\
    \        if [[ \"${input[$i]}\" == ([A-Z]) || \"${input[$i]}\" == ([a-z]) ]];\
    \ then\n            output+=\"${input[$i]}${input[$i]}\"\n        else\n     \
    \       output+=\"${input[$i]}\"\n        fi\n    done\n    output=$(echo $output\
    \ | sed 's/./&\\L\\//g')\n    echo \"${output}\"", "  [[ -z \"$1\" ]] && echo\
    \ \"Usage: $(basename $0) [String]\" && exit 1\n  local i o\n  for (( i=0; i<${#1};\
    \ i++ )); do\n    o=${1:i:1}\n    if [[ \"$o\" =~ ^[a-z] ]]; then\n      o=$(echo\
    \ \"$o\" | sed \"y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/\"; echo\
    \ \"$o\")\n    elif [[ \"$o\" =~ ^[A-Z] ]]; then\n      o=$(echo \"$o\" | sed\
    \ \"y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/\"; echo \"$o\")\n\
    \    else\n      o=\"$o\"\n    fi\n    shift\n  done\n  echo \"$o\"", "  local\
    \ i\n\n  echo \"$1\" | awk '{for(i=1;i<=NF;i++){ \n                        if($i\
    \ ~ /^[[:alpha:]]$/){\n                          $i=toupper($i); \n          \
    \              }\n                        else{\n                          $i=tolower($i);\n\
    \                        }\n                        } \n                     \
    \   printf \"%s\"}' ", "    local string=$1\n    local index=0\n    local firstChar=$((${#string}\
    \ + 1))\n    local lastChar=0\n\n    firstChar=$((${#string} - 1))\n    lastChar=$((${#string}\
    \ - 1))\n    echo ${string:${firstChar}-1:1}\n    while [ \"$index\" -le \"$lastChar\"\
    \ ]; do\n        if [[ $((${#string}) - $index) == 0 ]]; then\n            break\n\
    \        fi\n\n        if [[ \"${string:$index:1}\" =~ [a-zA-Z] ]]; then\n   \
    \         echo \"${string:$index:1}${string:$(($index - 1)):1}\"\n        fi\n\
    \        index=$((${#string} - 1))\n    done", "  echo $1 | sed -e 's/[[:upper:]]/\\\
    u&/g'", "    local s=$1\n    local len=$((${#s}+1))\n    local i=0\n    local\
    \ result=\"\"\n    while (( i < len )) do\n        local c=${s:i:1}\n        if\
    \ (( ${#c} )) && [[ ${#c} -eq 1 ]]; then\n            local char=${c^^}\n    \
    \        case \"${char}\" in\n                l|L) char=${char^^};;\n        \
    \        u|U) char=${char^^};;\n            esac\n            result+=\"${char}\"\
    \n        else\n            result+=\"${s}\"\n        fi\n        i=$((i+1))\n\
    \    done\n    if [[ \"${result}\" =~ [A-Z] ]]; then\n        echo \"${result:0:1}${result:1:1}${result:2:1}${result:3:1}${result:4:1}\"\
    \n    else\n        echo \"${result}\"\n    fi", "    local s result\n    IFS=''\
    \ read -r -d '' s <<< \"$1\"\n    [[ $s = \"*\" ]]\n    [[ $s = \"\" ]]\n    [[\
    \ $s = \"/*\" ]]\n    IFS='' read -r -d '' result <<< \"$s\"\n    echo -n \"$result\"",
  "    local s=$1\n    local i=0\n    local res=$s\n    while [[ $s ]]; do\n     \
    \   local l=$(expr match \"$s\" \"\\\\([a-zA-Z]\\\\)\")\n        if [[ ! -z $l\
    \ ]]; then\n            local u=$(expr match \"$s\" \"\\\\([a-zA-Z]\\\\)(\\\\\
    )\")\n            if [[ ! -z $u ]]; then\n                local c=$(expr match\
    \ \"$s\" \"\\\\([a-zA-Z]\\\\)(\\\\)\")\n                if [[ ! -z $c ]]; then\n\
    \                    echo ${s:0:i} ${s:i+1}\n                    i=$((i+2))\n\
    \                    echo ${s:0:i} ${s:i+1}\n                else\n          \
    \          echo ${s:0:i} ${s:i+1}\n                fi\n            else\n    \
    \            echo ${s:0:i}\n            fi\n        else\n            echo ${s:0:i}\n\
    \        fi\n        s=$((i+1))\n    done", "        local i s res\n        i=0\
    \ s=$1\n        res=\"${s}\"\n        while [ \"$i\" -lt \"${#s}\" ]\n       \
    \ do\n            if [[ \"${s:$i:1}\" =~ ^[a-zA-Z]$ ]]; then\n               \
    \ s=${s:0:$i}${${s:$i}:1}${${s:$i+1}:1}\n            else\n                s=${s:0:$i}${s:$i:1}${s:$i+1}\n\
    \            fi\n            i=$(( i + 1 ))\n        done\n        echo \"$res\"",
  '    echo "$1" | tr "[a-z]" "[A-Z]"', "   local s=''\n   for ((i=0; i<${#1}; i++));\
    \ do\n       case \"${1:$i:1}\" in\n           [a-z]) # reverse case from lower\
    \ case to upper case\n               s=\"${s:0:1}${1:$i:1}${s:1}\"\n         \
    \  ;;\n           [A-Z]) # reverse case from upper case to lower case\n      \
    \         s=\"${s:0:1}${1:$i:1}${s:1}\"\n           ;;\n           * ) # keep\
    \ the letter as it is\n               s=\"${s:0:1}${1:$i:1}${s:1}\"\n        \
    \   ;;\n       esac\n   done\n   echo ${s%?}", "    local i s i1 i2 result\n \
    \   s=\"$1\"\n    result=\"\"\n    if [[ \"$s\" == \"\" ]] ; then\n        return\
    \ $result\n    fi\n    for (( i=0 ; i < ${#s} ; i++ )) ; do\n        if [[ $s\
    \ =~ ^([[:alpha:]])$ ]] ; then\n            i1=$((${#s}-${i}-1))\n           \
    \ i2=$((${#s}-${i}))\n            if [[ ${s:$i1} == ${s:$i2} * ${s:$i1} ]] ; then\n\
    \                result=$result${s:$i1}${s:$i2}\n            else\n          \
    \      result=$result${s:$i}\n            fi\n        elif [[ $s =~ ^([[:alpha:]])([[:alpha:]])$\
    \ ]] ; then\n            i1=$((${#s}-${i}-1))\n            i2=$((${#s}-${i}))\n\
    \            if [[ ${s:$i1} =~ ${s:$i2} * ${s:$i1} ]] ; then\n               \
    \ result=$result${s:$i1}${s:$i2}\n            else\n                result=$result${s:$i}\n\
    \            fi\n        elif [[ $s =~ ^([[:alpha:]])([[:alpha:]])([[:alpha:]])$\
    \ ]] ; then\n            i1=$((${#s}-${i}-1))\n            i2=$((${#s}-${i}))\n\
    \            if [[ ${s:$i1} =~ ${s:$i2} * ${s:$i1} ]] ; then\n               \
    \ result=$result${s:$i1}${s:$i2}\n            else\n                result=$result${s:$i}\n\
    \            fi\n        elif [[ $s =~ ^([[:alpha:]])([[:alpha:]])([[:alpha:]])([[:alpha:]])$\
    \ ]] ; then\n            i1=$((${#s}-${i}-1))\n            i2=$((${#s}-${i}))\n\
    \            if [[ ${s:$i1} =~ ${s:$i2} * ${s:$i1} ]] ; then\n               \
    \ result=$result${s:$i1}${s:$i2}\n            else\n                result=$result${s:$i}\n\
    \            fi\n        elif [[ $s =~ ^([[:alpha:]])([[:alpha:]])([[:alpha:]])([[:alpha:]])([[:alpha:]])$\
    \ ]] ; then\n            i1=$((${#s}-${i}-1))\n            i2=$((${#", "    local\
    \ -i i\n    local j\n    local str=\"${1}\"\n    local len=\"${#str}\"\n    local\
    \ ans\n    local tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local\
    \ tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local\
    \ tmp10\n    local tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n\
    \    local tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n    local\
    \ tmp19\n    local tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n\
    \    local tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n    local\
    \ tmp28\n    local tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n\
    \    local tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n    local\
    \ tmp37\n    local tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n\
    \    local tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n    local\
    \ tmp46\n    local tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n\
    \    local tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n    local\
    \ tmp55\n    local tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n\
    \    local tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n    local\
    \ tmp64\n    local tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n\
    \    local tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n    local\
    \ tmp73\n    local tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n\
    \    local tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n    local\
    \ tmp82\n    local tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n\
    \    local tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n    local\
    \ tmp91\n    local tmp92\n    local tmp93\n    local tmp94\n    local tmp95\n\
    \    local tmp96\n    local tmp97\n", "\tlocal s=$1\n\tlocal o=$(echo $s | tr\
    \ '[:upper:]' '[:lower:]')\n\tlocal o=${o:0:1}${o:1}\n\techo \"$o\"", "  local\
    \ s=${1:-}\n  # s=$(echo $s | sed 's/\\(.\\)/\\U\\1/')\n  echo $s | sed 's/\\\
    (.\\)/\\U\\1/' | sort | uniq -c | sort -r", "    local IFS=\" \"\n    read -r\
    \ i\n    local res=\"$i\"\n    local s\n    for s in \"$@\"; do\n        if [\
    \ -z \"$res\" ]; then\n            res=\"$s\"\n        else\n            local\
    \ toUpper\n            toUpper=$(echo \"$s\" | tr '[:lower:]' '[:upper:]')\n \
    \           toLower=$(echo \"$s\" | tr '[:upper:]' '[:lower:]')\n            if\
    \ [ \"$toUpper\" = \"$toLower\" ]; then\n                res=\"$toUpper\"\n  \
    \          else\n                res=\"$toLower\"\n            fi\n        fi\n\
    \    done\n    echo \"$res\"", "    # Your code here\n    ", "    read input\n\
    \    [[ \"$input\" =~ \"^[a-zA-Z]+$\" ]] || input=\"$(input)\"\n    [[ \"$input\"\
    \ =~ \"^[^a-zA-Z]+$\" ]] || input=\"$(input)\"\n    [[ \"$input\" =~ \"^[a-z]+$\"\
    \ ]] && input=\"${input:0:1}${input:1:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}\"\
    \n    [[ \"$input\" =~ \"^[A-Z]+$\" ]] && input=\"${input:0:1}${input:1:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}\"\
    \n    [[ \"$input\" =~ \"^[a-z]+$\" ]] && input=\"${input:0:1}${input:1:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}\"\
    \n    [[ \"$input\" =~ \"^[A-Z]+$\" ]] && input=\"${input:0:1}${input:1:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}\"\
    \n    [[ \"$input\" =~ \"^[0-9]*$\" ]] && input=\"${input:0:1}${input:1:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}\"\
    \n    [[ \"$input\" =~ \"^[a-zA-Z0-9]*$\" ]] && input=\"${input:0:1}${input:1:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}${input:2:1}\"\
    \n    echo \"$", "    local i result c\n    for ((i = 0; i < ${#1}; i++)); do\n\
    \        c=${1:i:1}\n        result=\"\"\n        if [[ $c =~ ^[a-zA-Z]$ ]]; then\n\
    \            c=\"${c^^}\"\n        elif [[ $c =~ ^[0-9]$ ]]; then\n          \
    \  c=\"${c#0}${c%%[0-9]}${c#0}\" \n        else\n            c=\"${c^^}\"\n  \
    \      fi\n        result=$result${result:+$result}$c\n    done\n    echo \"$result\"",
  "  echo \"Start solve $1\"\n  if [ ${1:0:1} = \"#\" ];then\n    echo \"Solve hash\
    \ #$1\"\n  else\n    local letter=$1\n    local res\n    local count=0\n    local\
    \ upper\n    local lower\n    local tmp\n\n    if [[ ${letter:0:1} = \"#\" ]];\
    \ then\n      echo \"Solve hash #$1\"\n      res=${letter}\n      count=1\n  \
    \  else\n      if [[ ${letter:0:1} = \"a\" ]]; then\n        lower=${letter:0:1}\n\
    \        upper=${letter:1:1}\n        echo \"Solve lower case $lower $upper\"\n\
    \        res=$(echo \"$lower${upper^^}${lower:0:1}${lower:1:1}${upper:0:1}${upper:1:1}\"\
    )\n      else\n        echo \"Solve lower case $letter $letter\"\n        lower=$letter\n\
    \        upper=$letter\n        echo \"Solve upper case $lower $upper\"\n    \
    \    res=$(echo \"$upper${lower:0:1}${lower:1:1}${upper:0:1}${upper:1:1}\")\n\
    \      fi\n    fi\n    count=$((count+1))\n    if [[ \"$count\" -eq \"$2\" ]];\
    \ then\n      echo \"$res\"\n    else\n      solve  $res\n    fi\n  fi\n  echo\
    \ \"End solve $1\"", "  local letters=${1}\n  local string=${2}\n\n  while [ ${#string}\
    \ -gt 0 ]; do\n    if [[ ${string:0:1} = \"@\" ]]; then\n      string=\"${string#@}\"\
    \n    fi\n    local i\n    for ((i=0; i<${#letters}; i++)); do\n      if [[ ${letters:i}\
    \ = ${string:i:1} ]]; then\n        letters=${letters:i}${letters:i+1}\n     \
    \ else\n        letters=${letters:i}${letters:i+1}${letters:i}\n        break\n\
    \      fi\n    done\n  done\n  string=${string%?}\n  echo \"$string\"", "    local\
    \ string=\"${1}\"\n    local newString=\"\"\n    local index=0\n    local letters=\"\
    abcdefghijklmnopqrstuvwxyz\"\n    local lowerLetters=\"abcdefghijklmnopqrstuvwxyz\"\
    \n    local upperLetters=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    local numbers=\"\
    1234567890\"\n\n    while [[ $string ]]; do\n        case \"$string\" in\n   \
    \         ${letters}*) newString=\"${newString}${upperLetters$(($index+=${#string}))}\"\
    \ ;;\n            ${lowerLetters}*) newString=\"${newString}${lowerLetters$(($index+=${#string}))}\"\
    \ ;;\n            ${upperLetters}*) newString=\"${newString}${upperLetters$(($index+=${#string}))}\"\
    \ ;;\n            ${numbers}*) newString=\"${newString}${numbers$(($index+=${#string}))}\"\
    \ ;;\n            *) newString=\"${newString}${string}\" ;;\n        esac\n  \
    \      ((index++))\n        string=\"${string#*[@]}\"\n    done\n    echo ${newString}",
  "    local s=$1;\n    local str=\"\";\n    for (( i=${#s}-1; i>=0; i-- )); do\n\
    \        local c=${s:$i:1};\n        if [[ $c =~ ^[a-z].*[a-z]$ ]]; then\n   \
    \         c=\"${c:0:1}${c:1:1}${c:2:1}\";\n        fi\n        str=\"$str$c\"\
    ;\n    done;\n    echo \"$str\";", "  local string=$1\n  local len=${#string}\n\
    \  for (( i=1; i<len; i++ )); do\n    local letter=${string:$i:1}\n    if [[ $letter\
    \ =~ ^[a-zA-Z]$ ]]; then\n      string=${string:0:$i}${letter^^}${string:$i}\n\
    \    fi\n  done\n  echo \"$string\"", "  [[ \"$1\" =~ [a-zA-Z] ]] || return 1\n\
    \  echo \"${1/^/${1:0:1}$((${1:0:1}|${1:1:1})/}\")", "    local s i\n    local\
    \ str=`echo $1|grep -E \"^[a-zA-Z]\"`\n    if [ -z \"$str\" ]; then\n        echo\
    \ \"$1\"\n    else\n        s=`echo $str|sed 's/[^A-Za-z]//g'`\n        if [ \"\
    $s\" = \"$str\" ]; then\n        echo \"$1\"\n        else\n            if [ \"\
    $str\" != \"\" ]; then\n                for i in $str; do\n                  \
    \  str=`echo $str|sed \"s/$i/$i./g\"`\n                done\n                echo\
    \ `echo $str|sed \"s/$s/$s./g\"`\n            else\n            echo \"$1\"\n\
    \            fi\n        fi\n    fi", "  local s i=0 j=1\n  while [[ \"$s\" =~\
    \ [a-z] ]]; do\n    case \"$s\" in\n      [a-z])\n        echo \"${s:0:1}${s:1:1}${s:2:1}${s:3:1}\"\
    \n        ;;\n      [A-Z])\n        echo \"${s:0:1}${s:1:1}${s:2:1}${s:3:1}\"\n\
    \        ;;\n      *)\n        echo \"$s\"\n        ;;\n    esac\n    s=${s#?}\n\
    \    ((i=i+1))\n    ((j=j+1))\n  done", "    local s=$1\n    local string=\"\"\
    \n    local t=\"\"\n    local i=0\n    local temp1=\"\"\n    local temp2=\"\"\n\
    \    local flag1=0\n    local flag2=0\n\n    # first loop\n    for((i=0;i<${#s};i++));\
    \ do\n        # t=${s:i:1}\n        t=${s:i:1}\n        # temp1=${s:i:1}\n   \
    \     # temp2=${s:i:2}\n        temp1=${s:i:1}\n        temp2=${s:i:2}\n\n   \
    \     # echo \"$t\"\n\n        if [[ ${temp1} =~ ^[a-zA-Z]$ ]]; then\n       \
    \     flag1=1\n        fi\n\n        if [[ ${temp2} =~ ^[a-zA-Z]$ ]]; then\n \
    \           flag2=1\n        fi\n\n        if [[ \"$flag1\" == \"$flag2\" ]];\
    \ then\n            string=\"${string}$t\"\n        elif [[ $flag1 == 0 ]]; then\n\
    \            string=\"${string}$temp2\"\n        elif [[ $flag2 == 0 ]]; then\n\
    \            string=\"${string}$temp1\"\n        fi\n    done\n\n    echo \"$string\"",
  "\t[[ $1 ]] || return 1\n\tstring=\"$1\"\n\techo ${string//[a-zA-Z]/${string:0:1}${string:1:1}${string:2:1}}",
  "    local STRING=$1\n    local RESULT=\"\"\n    local COUNT=0\n    local I=0\n\
    \    local CHAR\n    while [ $I -lt $STRING ]; do\n        CHAR=$( echo $STRING\
    \ | cut -d'x' -f$I )\n        RESULT=$RESULT$CHAR\n        (( COUNT++ ))\n   \
    \     (( I++ ))\n    done\n    if [ $COUNT -eq 0 ]; then\n        RESULT=$RESULT$STRING\n\
    \    fi\n    echo \"$RESULT\"", "  local IFS=\n  read -ra S <<<\"$1\"\n  local\
    \ res\n  local i\n  local len\n  len=${#S[@]}\n  for i in $(seq 0 $((len-1)));\
    \ do\n    if [ ${S[i]} != ${S[i+1]} ]; then\n      res=\"${S[i]}${S[i+1]}\"\n\
    \    elif [ ${S[i]} == ${S[i+1]} ]; then\n      res=\"${S[i]}${S[i+1]}\"\n   \
    \ fi\n  done\n  echo \"$res\"", "    local s i tmp\n    s=${1:-}\n    \n    for((i=0;\
    \ i<${#s}; i++)); do\n        tmp=${s:i:1}\n        [[ $tmp =~ [A-Za-z]$ ]] &&\
    \ tmp=${tmp^^} || tmp=${tmp}\n        s=${s}${tmp}\n    done\n\n    s=${s}\n \
    \   [[ ${#s} -eq 0 ]] && s=\"$s\"\n    echo \"$s\"", "  local i a s len\n  len=\"\
    ${#1}\"\n  s=\"${1}\"\n  a=\"\"\n  for (( i = 0; i <= len; i++ )); do\n    if\
    \ [[ ${s:$i:1} == \"a\" ]] || [[ ${s:$i:1} == \"A\" ]]; then\n      a=\"${s:$i:1}\"\
    \n    elif [[ ${s:$i:1} == \"b\" ]] || [[ ${s:$i:1} == \"B\" ]]; then\n      s=\"\
    ${s:0:i}${s:1:i}${a:0:1}${a:1:1}\"\n    fi\n  done\n  echo \"${s}\"", "  local\
    \ i a s ret len\n  IFS=$'\\n' read -ra s <<<\"$1\"\n  len=\"${#s[@]}\"\n  ret=\"\
    ${s[0]}\"\n  for a in \"${s[@]:1}\"; do\n    if [[ \"$a\" = ?* ]]; then\n    \
    \  echo \"ERROR: your string contains non-letter character\"\n      exit -1\n\
    \    fi\n    case \"${a}\" in\n      \"a\") ret=\"${ret}A\"; break;;\n      \"\
    b\") ret=\"${ret}B\"; break;;\n      \"c\") ret=\"${ret}C\"; break;;\n      \"\
    d\") ret=\"${ret}D\"; break;;\n      \"e\") ret=\"${ret}E\"; break;;\n      \"\
    f\") ret=\"${ret}F\"; break;;\n      \"g\") ret=\"${ret}G\"; break;;\n      \"\
    h\") ret=\"${ret}H\"; break;;\n      \"i\") ret=\"${ret}I\"; break;;\n      \"\
    j\") ret=\"${ret}J\"; break;;\n      \"k\") ret=\"${ret}K\"; break;;\n      \"\
    l\") ret=\"${ret}L\"; break;;\n      \"m\") ret=\"${ret}M\"; break;;\n      \"\
    n\") ret=\"${ret}N\"; break;;\n      \"o\") ret=\"${ret}O\"; break;;\n      \"\
    p\") ret=\"${ret}P\"; break;;\n      \"q\") ret=\"${ret}Q\"; break;;\n      \"\
    r\") ret=\"${ret}R\"; break;;\n      \"s\") ret=\"${ret}S\"; break;;\n      \"\
    t\") ret=\"${ret}T\"; break;;\n      \"u\") ret=\"${ret}U\"; break;;\n      \"\
    v\") ret=\"${ret}V\"; break;;\n      \"w\") ret=\"${ret}W\"; break;;\n      \"\
    x\") ret=\"${ret}X\"; break;;\n      \"y\") ret=\"${ret}Y\"; break;;\n      \"\
    z\") ret=\"${ret}Z\"; break;;\n    esac\n  done\n  echo \"$ret\"", "  local string\
    \ result\n  string=\"$1\"\n\n  for i in {A..Z}; do\n    if [[ \"$string\" == \"\
    $i\" ]]; then\n      string=\"${i:0:1}${i:1:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}\"\
    \n      result=\"$i\"\n      break\n    fi\n  done\n  for i in {a..z}; do\n  \
    \  if [[ \"$string\" == \"$i\" ]]; then\n      string=\"${i:0:1}${i:1:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}\"\
    \n      result=\"$i\"\n      break\n    fi\n  done\n\n  for i in {A..Z}; do\n\
    \    if [[ \"$string\" == \"$i\" ]]; then\n      string=\"${i:0:1}${i:1:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}\"\
    \n      result=\"$i\"\n      break\n    fi\n  done\n  for i in {a..z}; do\n  \
    \  if [[ \"$string\" == \"$i\" ]]; then\n      string=\"${i:0:1}${i:1:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}\"\
    \n      result=\"$i\"\n      break\n    fi\n  done\n\n  for i in {A..Z}; do\n\
    \    if [[ \"$string\" == \"$i\" ]]; then\n      string=\"${i:0:1}${i:1:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}\"\
    \n      result=\"$i\"\n      break\n    fi\n  done\n  for i in {a..z}; do\n  \
    \  if [[ \"$string\" == \"$i\" ]]; then\n      string=\"${i:0:1}${i:1:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}\"\
    \n      result=\"$i\"\n      break\n    fi\n  done\n\n  for i in {A..Z}; do\n\
    \    if [[ \"$string\" == \"$i\" ]]; then\n      string=\"${i:0:1}${i:1:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${i:2:1}${",
  "  echo \"$1\"|egrep -i '^[a-zA-z]+$|^[^a-zA-z]+$' |\n  sed 's/\\(^[a-zA-z]+\\)/\\\
    U\\1/'|sed 's/\\(^[^a-zA-z]+\\)/\\L\\1/'", "    local i j\n    for ((i=0; i<${#1};\
    \ i++)); do\n        [[ -z ${1[i]} ]] && { echo \"Usage: $(basename ${BASH_SOURCE[0]})\
    \ <string>\"; return; }\n        [[ \"${1[i]}\" == [a-z] ]] && { \n          \
    \  [[ -z ${1[i+1]} ]] && { echo \"Usage: $(basename ${BASH_SOURCE[0]}) <string>\"\
    ; return; }\n            [[ \"${1[i+1]}\" == [A-Z] ]] && { echo \"Usage: $(basename\
    \ ${BASH_SOURCE[0]}) <string>\"; return; }\n            echo \"${1[i]}${1[i+1]}\"\
    \ && { i=1; j++; }\n            [[ \"${1[i]}\" == [A-Z] ]] && { echo \"Usage:\
    \ $(basename ${BASH_SOURCE[0]}) <string>\"; return; }\n            [[ \"${1[i+1]}\"\
    \ == [a-z] ]] && { echo \"Usage: $(basename ${BASH_SOURCE[0]}) <string>\"; return;\
    \ }\n            [[ -z ${1[i-1]} ]] && { echo \"Usage: $(basename ${BASH_SOURCE[0]})\
    \ <string>\"; return; }\n            echo \"${1[i]}${1[i-1]}\" && { i=$((i+1));\
    \ j=0; }\n        }\n        [[ \"${1[i]}\" == [[:upper:]] ]] && { echo \"${1[i]}${1[i+1]}\"\
    ; i=$((i+1)); }\n        [[ \"${1[i]}\" == [[:lower:]] ]] && { echo \"${1[i]}${1[i-1]}\"\
    ; i=$((i-1)); }\n    done\n    echo \"${1}\"", "  local -r s=$1\n  # [ \"${s:0:1}\"\
    \ = \"-\" ] && return ${s:0:1}\n  [ \"${s:0:1}\" != \"${s:0:1}\" ] && return ${s//[^A-Z]/}\n\
    \  local -r first_char=${s:0:1}\n  [ \"${s:1:1}\" != \"${s:1:1}\" ] && return\
    \ ${s//[^a-z]/}\n  local -r next_char=${s:1:1}\n  [ \"${next_char}\" = \"${first_char}\"\
    \ ] && return ${s//[^A-Z]/}\n  [ \"${next_char}\" = \"${first_char}\" ] || return\
    \ ${s//[^a-z]/}\n  local -r rest_of_string=${s:2::1}\n  local -r reversed_chars=${rest_of_string//[^A-Za-z]/}\n\
    \  local -r reversed_string=${reversed_chars:0:1}${first_char}${reversed_chars:1}\n\
    \  [ \"${reversed_chars}\" = \"${rest_of_string}\" ] || return ${reversed_string}",
  "    local string=$1\n    # your code goes here\n    echo \"$string\" | tr '[a-z]'\
    \ '[A-Z]' >/dev/null\n    echo \"$string\" | tr '[A-Z]' '[a-z]' >/dev/null\n \
    \   echo \"$string\"", "  local string=\"$1\" i result j=0\n  result=\n  for ((\
    \ i=0; i<${#string}; i++)); do\n    i=$(expr ${i} + 1)\n    if [[ ${string:i:1}\
    \ == \"a\" ]] || [[ ${string:i:1} == \"b\" ]] || [[ ${string:i:1} == \"c\" ]]\
    \ || [[ ${string:i:1} == \"d\" ]] || [[ ${string:i:1} == \"e\" ]] || [[ ${string:i:1}\
    \ == \"f\" ]] || [[ ${string:i:1} == \"g\" ]] || [[ ${string:i:1} == \"h\" ]]\
    \ || [[ ${string:i:1} == \"i\" ]] || [[ ${string:i:1} == \"j\" ]] || [[ ${string:i:1}\
    \ == \"k\" ]] || [[ ${string:i:1} == \"l\" ]] || [[ ${string:i:1} == \"m\" ]]\
    \ || [[ ${string:i:1} == \"n\" ]] || [[ ${string:i:1} == \"o\" ]] || [[ ${string:i:1}\
    \ == \"p\" ]] || [[ ${string:i:1} == \"q\" ]] || [[ ${string:i:1} == \"r\" ]]\
    \ || [[ ${string:i:1} == \"s\" ]] || [[ ${string:i:1} == \"t\" ]] || [[ ${string:i:1}\
    \ == \"u\" ]] || [[ ${string:i:1} == \"v\" ]] || [[ ${string:i:1} == \"w\" ]]\
    \ || [[ ${string:i:1} == \"x\" ]] || [[ ${string:i:1} == \"y\" ]] || [[ ${string:i:1}\
    \ == \"z\" ]] || [[ ${string:i:1} == \"A\" ]] || [[ ${string:i:1} == \"B\" ]]\
    \ || [[ ${string:i:1} == \"C\" ]] || [[ ${string:i:1} == \"D\" ]] || [[ ${string:i:1}\
    \ == \"E\" ]] || [[ ${string:i:1} == \"F\" ]] || [[ ${string:i:1} == \"G\" ]]\
    \ || [[ ${string:i:1} == \"H\" ]] || [[ ${string:i:1} == \"I\" ]] || [[ ${string:i:1}\
    \ == \"J\" ]] || [[ ${string:i:1} == \"K\" ]] || [[ ${string:i:1} == \"L\" ]]\
    \ || [[ ${string:i:1} == \"M\" ]] || [[ ${string:i:1} == \"N\" ]] || [[ ${string:i:1}\
    \ == \"O\" ]] || [[ ${string:i:1} == \"P\" ]] || [[ ${string:i:1} == \"Q\" ]]\
    \ || [[ ${string:i:1} == \"R\" ]] || [[ ${string:i:1} == \"S\" ]] || [[ ${string:i:1}\
    \ == \"T\" ]] || [[ ${string:i:1} == \"U\" ]] || [[ ${string:i:1} == \"", "  \
    \  local input=$1\n    local lower\n    lower=$(echo $input | tr '[:lower:]' '[:upper:]')\n\
    \    echo $lower | tr '[:upper:]' '[:lower:]'", "\t# Your code here\n\techo \"\
    test\"", '    [[ $1 =~ ([a-z]*) ]] && echo ${1^^} || echo $1', "    local s i\
    \ tmp char1 char2\n    s=\"$1\"\n    i=$((${#s} - 1))\n    char1=\"${s:0:1}\"\n\
    \    char2=\"${s:1:1}\"\n    \n    char1=\"${char1}\"\n    char2=\"${char2}\"\n\
    \    \n    if [ \"${char1}\" = \"a\" -a \"${char2}\" != \"a\" ] || [ \"${char1}\"\
    \ = \"A\" -a \"${char2}\" != \"A\" ] || [ \"${char1}\" = \"b\" -a \"${char2}\"\
    \ != \"b\" ] || [ \"${char1}\" = \"B\" -a \"${char2}\" != \"B\" ] || [ \"${char1}\"\
    \ = \"c\" -a \"${char2}\" != \"c\" ] || [ \"${char1}\" = \"C\" -a \"${char2}\"\
    \ != \"C\" ] || [ \"${char1}\" = \"d\" -a \"${char2}\" != \"d\" ] || [ \"${char1}\"\
    \ = \"D\" -a \"${char2}\" != \"D\" ] || [ \"${char1}\" = \"e\" -a \"${char2}\"\
    \ != \"e\" ] || [ \"${char1}\" = \"E\" -a \"${char2}\" != \"E\" ] || [ \"${char1}\"\
    \ = \"f\" -a \"${char2}\" != \"f\" ] || [ \"${char1}\" = \"F\" -a \"${char2}\"\
    \ != \"F\" ] || [ \"${char1}\" = \"g\" -a \"${char2}\" != \"g\" ] || [ \"${char1}\"\
    \ = \"G\" -a \"${char2}\" != \"G\" ] || [ \"${char1}\" = \"h\" -a \"${char2}\"\
    \ != \"h\" ] || [ \"${char1}\" = \"H\" -a \"${char2}\" != \"H\" ] || [ \"${char1}\"\
    \ = \"i\" -a \"${char2}\" != \"i\" ] || [ \"${char1}\" = \"I\" -a \"${char2}\"\
    \ != \"I\" ] || [ \"${char1}\" = \"j\" -a \"${char2}\" != \"j\" ] || [ \"${char1}\"\
    \ = \"J\" -a \"${char2}\" != \"J\" ] || [ \"${char1}\" = \"k\" -a \"${char2}\"\
    \ != \"k\" ] || [ \"${char1}\" = \"K\" -a \"${char2}\" != \"K\" ] || [ \"${char1}\"\
    \ = \"l\" -a \"${char2}\" != \"l\" ] || [ \"${char1}\" = \"L\" -a \"${char2}\"\
    \ != \"L\" ] || [ \"${char1}\" = \"m\" -a \"${char2}\" != \"", "    test -n \"\
    $1\" && [[ $1 == [[:alpha:]] ]] && echo \"${1/[[:alpha:]]/$(echo \"${1//[[:alpha:]]/}\"\
    |tr '[:upper:]' '[:lower:]')}\"", "    local temp\n    temp=$(echo $1 | awk '{print\
    \ toupper($0)}')\n    temp=$(echo $temp | tr '[a-z]' '[A-Z]')\n    echo $temp",
  "    local -i ret=\"$1\"\n    local -i len=\"${#1}\"\n    local -i i letter\n  \
    \  \n    local -i a=\"${#ret}\"\n    \n    for ((i=1; i<=len; i++)); do\n    \
    \    letter=${ret:i:1}\n        if [[ ${#letter} = 0 ]]; then\n            ret=${ret:0:i}\n\
    \        else\n            if [[ \"${letter:0:1}\" != \"${letter:1:1}\" ]]; then\n\
    \                echo \"Invalid input\"\n                exit 4\n            fi\n\
    \            local -i a=\"$(tr -dc ${letter:0:1} <<<\"${a}\" | wc -l)\"\n    \
    \        local -i b=\"$(tr -dc ${letter:1:1} <<<\"${ret}\" | wc -l)\"\n      \
    \      echo \"${ret:0:a}${ret:a:b}${ret:b}\"\n            exit 0\n        fi\n\
    \    done", "    local -n arr=$1\n    local res=\"\"\n    for (( i = 0; i <= ${#arr[@]};\
    \ i++ )) ; do\n        local c=$(echo \"${arr[i]}\" | tr [a-z] [A-Z])\n      \
    \  local uc=$(echo \"${arr[i]}\" | tr [A-Z] [a-z])\n        local uc1=$(echo \"\
    ${arr[i]}\" | tr [A-Z] [a-z])\n        if [[ \"${arr[i]}\" =~ \"^[a-zA-Z]$\" ]];\
    \ then\n            arr[i]=\"${c}\"\n        else\n            arr[i]=\"${uc}\"\
    \n        fi\n    done\n    for (( i = 0; i <= ${#arr[@]}; i++ )) ; do\n     \
    \   local c=$(echo \"${arr[i]}\" | tr [a-z] [A-Z])\n        local uc=$(echo \"\
    ${arr[i]}\" | tr [A-Z] [a-z])\n        local uc1=$(echo \"${arr[i]}\" | tr [A-Z]\
    \ [a-z])\n        if [[ \"${arr[i]}\" =~ \"^[a-zA-Z]$\" ]]; then\n           \
    \ arr[i]=\"${c}\"\n        else\n            arr[i]=\"${uc}\"\n        fi\n  \
    \  done\n    for (( i = 0; i <= ${#arr[@]}; i++ )) ; do\n        local c=$(echo\
    \ \"${arr[i]}\" | tr [a-z] [A-Z])\n        local uc=$(echo \"${arr[i]}\" | tr\
    \ [A-Z] [a-z])\n        local uc1=$(echo \"${arr[i]}\" | tr [A-Z] [a-z])\n   \
    \     if [[ \"${arr[i]}\" =~ \"^[a-zA-Z]$\" ]]; then\n            arr[i]=\"${c}\"\
    \n        else\n            arr[i]=\"${uc}\"\n        fi\n    done\n    for ((\
    \ i = 0; i <= ${#arr[@]}; i++ )) ; do\n        local c=$(echo \"${arr[i]}\" |\
    \ tr [a-z] [A-Z])\n        local uc=$(echo \"${arr[i]}\" | tr [A-Z] [a-z])\n \
    \       local uc1=$(echo \"${arr[i]}\" | tr [A-Z] [a-z])\n        if [[ \"${arr[i]}\"\
    \ =~ \"^[a-zA-Z]$\" ]]; then\n            arr[i]=\"${c}\"\n        else\n    \
    \        arr[i]=\"${uc}\"\n        fi\n    done\n    for (( i = 0; i <= ${#arr[@]};\
    \ i++ )) ; do\n        local c=$(echo \"${arr[i]}\" | tr [a-z] [A-Z])\n      \
    \  local uc=$(echo \"${arr[i]}\" | tr [A-Z] [a-z])\n        local uc1=$(echo \"\
    ${arr[i]}\" | tr [A-Z] [a-z])\n        if [[ \"${arr[i]}\" =~ \"^[a-zA-Z]", " \
    \   local a b\n    local temp\n    local str=\"$1\"\n    local len=\"${#str}\"\
    \n    local i\n    local res\n    for i in $(seq 0 $((len-1))); do\n        local\
    \ j\n        a=$(echo \"$str\" | sed 's/.\\(.\\)/\\U\\1/')\n        if [ -z \"\
    $a\" ]; then\n            a=\"$str\"\n        else\n            b=$(echo \"$str\"\
    \ | sed 's/.\\(.\\)/\\L\\1/')\n            if [ -z \"$b\" ]; then\n          \
    \      b=\"$str\"\n            else\n                temp=\"${str%%${str##*.}}${str#*${a}}\"\
    \n                str=\"${str#${temp}}\"\n            fi\n        fi\n    done\n\
    \    if [ -n \"$str\" ]; then\n        res=\"${str%%$a}${str#$b}\"\n    fi\n \
    \   return $res", "    local str=$1\n    local len=${#str}\n    local i=0\n\n\
    \    while [ $i -lt $len ]; do\n        local c=$(echo $str | sed 's/\\(.\\)/\\\
    U\\1/')\n        if [ \"$c\" != \"\\0\" ]\n        then\n            str=$(echo\
    \ $str | sed \"s/$c$c$c/$c$c$c/g\")\n            i=$((i+1))\n        fi\n    done\n\
    \n    echo $str", "  if [ -z \"$1\" ]; then\n      echo \"No argument given.\"\
    \n  else\n      echo \"$1\" | tr '[:upper:]' '[:lower:]' | sed 's/^\\(..\\)/\\\
    U\\1/' | tr '[:upper:]' '[:lower:]'\n  fi", "  local -i i\n  local res=\"${1^^}\"\
    \n  for (( i = 0; i < ${#res}; i++ )); do\n    local c=\"${res:i:1}\"\n    case\
    \ \"$c\" in\n      \"a\" |  \"b\") res=\"${res::-1:1}\";;\n      \"A\" |  \"B\"\
    ) res=\"${res::1:-1}\";;\n      \"0\" |  \"1\") res=\"${res::1:1}\";;\n      \"\
    9\" |  \"8\") res=\"${res::-1:-1}\";;\n      \"8\" |  \"9\") res=\"${res::-1:1}\"\
    ;;\n      \"c\" |  \"C\") res=\"${res::1:1}\";;\n      \"C\" |  \"c\") res=\"\
    ${res::-1:1}\";;\n      \"-\" |  \"_\") res=\"${res::-1:1}\";;\n      \"_\" |\
    \  \"-\") res=\"${res::1:-1}\";;\n      \"@\" |  \"#\") res=\"${res::1:1}\";;\n\
    \      \"#\" |  \"@\") res=\"${res::-1:1}\";;\n      \"$\" |  \"&\") res=\"${res::1:1}\"\
    ;;\n      \"&\" |  \"$\") res=\"${res::-1:1}\";;\n      \"~\" |  \"^\") res=\"\
    ${res::1:1}\";;\n      \"^\" |  \"~\") res=\"${res::-1:1}\";;\n      \"|\" | \
    \ \"^\") res=\"${res::1:-1}\";;\n      \"^\" |  \"|\") res=\"${res::-1:-1}\";;\n\
    \      \"?\" |  \"!\") res=\"${res::1:1}\";;\n      \"!\" |  \"?\") res=\"${res::-1:1}\"\
    ;;\n      \"$\" |  \"$\") res=\"${res::1:-1}\";;\n      \"&\" |  \"&\") res=\"\
    ${res::1:-1}\";;\n      \"*\" |  \"*\") res=\"${res::1:-1}\";;\n      \"*\" |\
    \  \"*\") res=\"${res::-1:1}\";;\n      \"+\" |  \"+\") res=\"${res::1:-1}\";;\n\
    \      \"+\" |  \"+\") res=\"${res::-1:1}\";;\n      *) break;;\n    esac\n  done\n\
    \  echo \"$res\"", "    local input=\"$1\"\n    local output\n    if [ \"${input}\"\
    \ = \"\" ]; then\n        output=\"empty\"\n    elif [ \"${input}\" == \"#\" ]\
    \ || [ \"${input}\" == \"$\" ] || [ \"${input}\" == \"!\" ]; then\n        output=\"\
    ${input}\"\n    elif [ \"${input}\" == \"\" ]; then\n        output=\"empty\"\n\
    \    elif [ \"${input}\" == \"-\" ]; then\n        output=\"empty\"\n    elif\
    \ [ \"${input}\" == \"'\" ]; then\n        output=\"$(input)\"\n    elif [ \"\
    ${input}\" == \"!\" ]; then\n        output=\"$(solve \"!${input}\")\"\n    elif\
    \ [ \"${input}\" == \"%\" ]; then\n        output=\"$(solve \"%${input}\")\"\n\
    \    elif [ \"${input}\" == \"/\" ]; then\n        output=\"$(solve \"/${input}\"\
    )\"\n    elif [ \"${input}\" == \"*\" ]; then\n        output=\"$(solve \"*${input}\"\
    )\"\n    elif [ \"${input}\" == \"+\" ]; then\n        output=\"$(solve \"+${input}\"\
    )\"\n    elif [ \"${input}\" == \"&\" ]; then\n        output=\"$(solve \"&${input}\"\
    )\"\n    elif [ \"${input}\" == \"#\" ]; then\n        output=\"$(solve \"#${input}\"\
    )\"\n    elif [ \"${input}\" == \"?\" ]; then\n        output=\"$(solve \"?${input}\"\
    )\"\n    elif [ \"${input}\" == \"$\" ]; then\n        output=\"$(solve \"$${input}\"\
    )\"\n    elif [ \"${input}\" == \"(\"]; then\n        output=\"$(solve \"(${input})\"\
    )\"\n    elif [ \"${input}\" == \"|\" ]; then\n        output=\"$(solve \"|${input}\"\
    )\"\n    elif [ \"${input}\" == \"}\" ]; then\n        output=\"$(solve \"}${input}\"\
    )\"\n    elif [ \"${input}\" == \"[\" ]; then\n        output=\"$(solve \"[${input}]\"\
    )\"\n    elif [ \"${input}\" == \"]\" ]; then\n        output=\"$(solve \"[${input}]\"\
    )\"\n    elif [ \"${input}\" == \"<\" ]; then\n        output=\"$(solve \"<${input}>\"\
    )\"\n    elif [ \"${input}\" == \".\" ]; then\n        output=\"$(solve \".${input}\"\
    )\"\n    elif [ \"${input}\" == \"@\" ]; then\n        output=\"$(solve \"@${input}\"\
    )\"\n    elif [ \"${input}\" == \"^\" ]; then\n        output=\"$(solve \"^${input}\"\
    )\"\n    elif [ \"${input}\" == \"~\" ]; then\n        output=\"$(solve \"~${input}\"\
    )\"\n    elif [ \"${input}\" == \"+\" ] || [ \"${input}\" == \"-\" ]; then\n \
    \       output=\"$(solve \"$(solve \"${input}\"))\"\n    elif [ \"${input}\" ==\
    \ \"*\" ]; then\n", "  local s=\"${1}\"\n  if [[ \"${#s}\" == \"0\" ]]; then\n\
    \    echo \"\"\n  else\n    local out=\"$(echo \"${s//a/A}\")\"\n    local count=\"\
    $(echo \"${s//A/b}\")\"\n    if [[ \"${count}\" == \"0\" ]]; then\n      out=\"\
    $(echo \"${out//b/a}\")\"\n    fi\n    echo \"${out}\"\n  fi", "  local s=$1\n\
    \  local temp\n  local len\n  len=${#s}\n  for ((i=0;i<len;i++)); do\n    temp=${s:i:1}\n\
    \    if [[ $temp =~ [a-z] ]]; then\n      s=${temp,,}\n    else\n      s=${s//[!a-z]/}\n\
    \    fi\n  done\n  echo \"$s\"", "    local s\n    s=\"$1\"\n    local i \n  \
    \  local j\n    local p\n    local tmp\n    local res\n    local k\n\n    s=\"\
    ${s//,/ }\"\n    s=\"${s// /$'\\n'}\"\n    s=\"${s//$'\\n'/}\"\n    s=\"${s//\
    \ /$'\\n'}\"\n\n    for ((i=1; i<${#s}; i++)); do\n        j=$((i-1))\n      \
    \  if [[ \"${s:$i:1}\" =~ [a-z] ]]; then\n            tmp=${s:$((i-1))}\n    \
    \        tmp=${tmp^^}\n            tmp=${tmp^^}\n            res=\"${res}$tmp\"\
    \n        else\n            res=\"${res}$s\"\n        fi\n    done\n    res=\"\
    ${res//,/$'\\n'}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\n'/}\"\n\
    \    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\\
    n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\\
    n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\\
    n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\\
    n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\\
    n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\\
    n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\\
    n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\\
    n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\\
    n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\\
    n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\n'/}\"\n    res=\"${res//$'\\\
    n'/}\"\n", "    local str=$1\n    local length=${#str}\n    local i=0\n    local\
    \ result=\"\"\n    while [ $i -lt $length ]; do\n        local letter=${str:$i:1}\n\
    \        if [[ \"$letter\" =~ ^[a-z]$ ]]; then\n            if [[ \"$letter\"\
    \ =~ [a-z] ]]; then\n                let=\"A\" \n            else\n          \
    \      let=\"a\"\n            fi\n            result=$result$let\n        fi\n\
    \        i=$(($i + 1))\n    done\n    if [[ \"$result\" =~ ^[a-z]$ ]]; then\n\
    \        result=\"${result:0:1}${result:1:1}\"\n    else\n        result=\"${result//?/a}\"\
    \n    fi\n    echo \"$result\"", "  local s=$1 result\n  for ((i = 0; i < ${#s};\
    \ i++)); do\n    local c=${s:$i:1}\n    case $c in\n      [a-z])\n        # Convert\
    \ to uppercase if original is lowercase\n        # ${c^^} will convert lowercase\
    \ to uppercase\n        result=\"${result:${c^^}}\"\n        ;;\n      [A-Z])\n\
    \        # Convert to lowercase if original is uppercase\n        # ${c^^} will\
    \ convert uppercase to lowercase\n        result=\"${result:${c^^}}\"\n      \
    \  ;;\n      *)\n        # Keep original value\n        result=\"${result}\"\n\
    \        ;;\n    esac\n  done\n  if [ -z \"$result\" ]; then result=$s; fi\n \
    \ echo \"$result\"", "  local str=\"$1\" i=0 c=0\n  local str2 str3 str4\n  local\
    \ temp\n\n  # str1\n  str2=$(echo $str |sed 's/^\\([^a-zA-Z]*\\)\\(.*\\)$/\\1\\\
    2/' |sed 's/\\([a-zA-Z]\\)\\(.\\)/\\U\\1\\E\\2/g')\n  # str2\n  str3=$(echo $str2\
    \ |sed 's/\\([a-zA-Z]\\)\\(.*\\)$/\\1\\2/' |sed 's/^\\([^a-zA-Z]*\\)\\(.\\)/\\\
    U\\1\\E\\2/g')\n\n  # str3\n  str4=$(echo $str3 |sed 's/^\\([^a-zA-Z]*\\)\\(.*\\\
    )$/\\1\\2/' |sed 's/\\([a-zA-Z]\\)\\(.\\)/\\U\\1\\E\\2/g')\n\n  # print str4\n\
    \  if [ \"$str4\" != \"$str\" ]; then\n    temp=$(echo $str4 |sed 's/\\([a-zA-Z]\\\
    )\\(.*\\)$/\\1\\2/' |sed 's/^\\([^a-zA-Z]*\\)\\(.\\)/\\U\\1\\E\\2/g')\n    echo\
    \ \"$temp\"\n  else\n    echo \"$str\"\n  fi", "    local -i n result\n    n=\"\
    ${#1}\"\n    if [[ \"${1:0:1}\" == \"#\" ]]; then\n        result=\"${1:0:1}${1:1}${1:2:1}${1:3:1}${1:4:1}${1:5:1}${1:6:1}${1:7:1}${1:8:1}\"\
    \n    elif [[ \"${1}\" == \"\" ]]; then\n        result=\"${1:0:1}${1:1:1}${1:2:1}${1:3:1}${1:4:1}${1:5:1}${1:6:1}${1:7:1}\"\
    \n    else\n        result=\"${1}\"\n        for ((i = 0; i < ${n}; i++)); do\n\
    \            result=\"$(echo \"${result}\" | sed -E -e \"s/${1}[[:lower:]]/${1:0:1}${1:1:1}/g\"\
    \ -e \"s/${1}[[:upper:]]/${1:0:1}${1:1:1}${1:2:1}/g\" -e \"s/${1}[[:upper:]]/${1:0:1}${1:1:1}${1:2:1}${1:3:1}/g\"\
    \ -e \"s/${1}[[:upper:]]/${1:0:1}${1:1:1}${1:2:1}${1:3:1}${1:4:1}/g\" -e \"s/${1}[[:upper:]]/${1:0:1}${1:1:1}${1:2:1}${1:3:1}${1:4:1}${1:5:1}/g\"\
    )\"\n        done\n        result=\"$(echo \"${result}\" | sed -e \"s/${1}[[:upper:]]/${1:0:1}${1:1:1}${1:2:1}/g\"\
    \ -e \"s/${1}[[:upper:]]/${1:0:1}${1:1:1}${1:2:1}${1:3:1}/g\" -e \"s/${1}[[:upper:]]/${1:0:1}${1:1:1}${1:2:1}${1:3:1}${1:4:1}/g\"\
    \ -e \"s/${1}[[:upper:]]/${1:0:1}${1:1:1}${1:2:1}${1:3:1}${1:4:1}${1:5:1}/g\"\
    )\"\n    fi\n    echo \"$result\"", "    local string=$1\n\n    if [[ \"$string\"\
    \ == \"\" ]]; then\n        string=\"-\"\n    fi\n\n    if [[ \"$string\" =~ [[:alpha:]]*\
    \ ]]; then\n        string=$(echo \"$string\" | sed -e 's/\\(.\\)/\\U\\1/')\n\
    \    elif [[ \"$string\" =~ [[:blank:]]* ]]; then\n        string=$(echo \"$string\"\
    \ | sed -e 's/\\(.\\)/\\L\\1/')\n    else\n        string=$(echo \"$string\" |\
    \ sed -e 's/\\(.\\)/\\L\\1/')\n    fi\n\n    echo \"$string\"", "    local i j\
    \ temp\n    local str=\"$1\"\n    local count\n    count=0\n    for (( i=0; i<${#str};\
    \ i++ )); do\n        if [ ${str:i:1} = \"a\" -o ${str:i:1} = \"A\" -o ${str:i:1}\
    \ = \"b\" -o ${str:i:1} = \"B\" -o ${str:i:1} = \"c\" -o ${str:i:1} = \"C\" -o\
    \ ${str:i:1} = \"d\" -o ${str:i:1} = \"D\" -o ${str:i:1} = \"e\" -o ${str:i:1}\
    \ = \"E\" -o ${str:i:1} = \"f\" -o ${str:i:1} = \"F\" -o ${str:i:1} = \"g\" -o\
    \ ${str:i:1} = \"G\" -o ${str:i:1} = \"h\" -o ${str:i:1} = \"H\" -o ${str:i:1}\
    \ = \"i\" -o ${str:i:1} = \"I\" -o ${str:i:1} = \"j\" -o ${str:i:1} = \"J\" -o\
    \ ${str:i:1} = \"k\" -o ${str:i:1} = \"K\" -o ${str:i:1} = \"l\" -o ${str:i:1}\
    \ = \"L\" -o ${str:i:1} = \"m\" -o ${str:i:1} = \"M\" -o ${str:i:1} = \"n\" -o\
    \ ${str:i:1} = \"N\" -o ${str:i:1} = \"o\" -o ${str:i:1} = \"O\" -o ${str:i:1}\
    \ = \"p\" -o ${str:i:1} = \"P\" -o ${str:i:1} = \"q\" -o ${str:i:1} = \"Q\" -o\
    \ ${str:i:1} = \"r\" -o ${str:i:1} = \"R\" -o ${str:i:1} = \"s\" -o ${str:i:1}\
    \ = \"S\" -o ${str:i:1} = \"t\" -o ${str:i:1} = \"T\" -o ${str:i:1} = \"u\" -o\
    \ ${str:i:1} = \"U\" -o ${str:i:1} = \"v\" -o ${str:i:1} = \"V\" -o ${str:i:1}\
    \ = \"w\" -o ${str:i:1} = \"W\" -o ${str:i:1} = \"x\" -o ${str:i:1} = \"X\" -o\
    \ ${str:i:1} = \"y\" -o ${str:i:1} = \"Y\" -o ${str:i:1} = \"z\" -o ${str:i:1}\
    \ = \"Z\" ]; then\n            temp=${str:i:1}\n            count=$(expr $count\
    \ + 1)\n            for (( j=0; j<${#temp}; j++ )); do\n                if [ ${temp:j:1}\
    \ = \"a\" -o ${temp:j:1} = \"A\" -o ${temp:j:1} = \"b\" -o ${temp", "    local\
    \ -n arr=arr\n    local -n s=s\n    local -i len=${#s}\n    local c\n    while\
    \ [[ $len > 0 ]]; do\n\tc=${arr[$len]}\n\tcase $c in\n\t    a) arr[$len]=$((c=251));\
    \ continue;;\n\t    b) arr[$len]=$((c=252)); continue;;\n\t    c) arr[$len]=$((c=253));\
    \ continue;;\n\t    d) arr[$len]=$((c=254)); continue;;\n\t    e) arr[$len]=$((c=255));\
    \ continue;;\n\t    f) arr[$len]=$((c=256)); continue;;\n\t    *) continue;;\n\
    \tesac\n\ts=${s%${c}${c}}\n\tlen=$((len-1))\n    done\n    echo \"${s}\"", " \
    \ local string=\"$1\" \n  local i \n  local res\n  \n  for ((i=0; i<${#string};\
    \ i++)); do \n    [[ ${string:$i:1} == ${string:$i:1}\\* ]] && res=${string:$i:1}\n\
    \    [[ ${string:$i:1} == ${string:$i:1}\\+ ]] && res=${string:$i:1}\n    [[ ${string:$i:1}\
    \ == ${string:$i:1}\\? ]] && res=${string:$i:1}\n    [[ ${string:$i:1} == ${string:$i:1}[\
    \ ]] ]] && res=${string:$i:1}\n    [[ ${string:$i:1} == ${string:$i:1}\\- ]] &&\
    \ res=${string:$i:1}\n    [[ ${string:$i:1} == ${string:$i:1}\\] ]] && res=${string:$i:1}\n\
    \    [[ ${string:$i:1} == ${string:$i:1}\\[ ]] ]] && res=${string:$i:1}\n    [[\
    \ ${string:$i:1} == ${string:$i:1}\\] ]] && res=${string:$i:1}\n    [[ ${string:$i:1}\
    \ == ${string:$i:1}\\' ]] && res=${string:$i:1}\n    [[ ${string:$i:1} == ${string:$i:1}\\\
    ' ]] && res=${string:$i:1}\n    [[ ${string:$i:1} == ${string:$i:1}\\\" ]] &&\
    \ res=${string:$i:1}\n    [[ ${string:$i:1} == ${string:$i:1}\\\" ]] && res=${string:$i:1}\n\
    \    [[ ${string:$i:1} == ${string:$i:1}\\\\ ]] && res=${string:$i:1}\n    [[\
    \ ${string:$i:1} == ${string:$i:1}\\\\ ]] && res=${string:$i:1}\n    \n    [[\
    \ ${string:$i:1} =~ [a-zA-Z] ]] && res=${res:${string:$i:1}\\U$string:$i:1}\n\
    \    [[ ${string:$i:1} =~ [a-zA-Z] ]] && res=${res:${string:$i:1}\\L$string:$i:1}\n\
    \  done\n  \n  echo \"$res\"", "    local i j\n    for (( i = ${#1}; i >= 1; i--\
    \ )); do\n        local c=${1:i:1}\n        [[ \"$c\" =~ ^[a-z]$ ]] && \n    \
    \        [[ \"$c\" =~ ^[A-Z]$ ]] && \n            c=${${c:0:1}:${#c}}\n      \
    \  [[ \"$c\" =~ ^[A-Z]$ ]] && \n            c=${${c:0:1}:${#c}}\n        [[ \"\
    $c\" =~ ^[a-z]$ ]] && \n            c=${${c:0:1}:${#c}}\n        [[ \"$c\" =~\
    \ ^[0-9]$ ]] && \n            c=${${c:0:1}:${#c}}\n        [[ \"$c\" =~ ^[@]$\
    \ ]] && \n            c=${${c:0:1}:${#c}}\n        [[ \"$c\" =~ ^[!]$ ]] && \n\
    \            c=${${c:0:1}:${#c}}\n        [[ \"$c\" =~ ^[_]$ ]] && \n        \
    \    c=${${c:0:1}:${#c}}\n        [[ \"$c\" =~ ^[$]$ ]] && \n            c=${${c:0:1}:${#c}}\n\
    \        [[ \"$c\" =~ ^[%]$ ]] && \n            c=${${c:0:1}:${#c}}\n        [[\
    \ \"$c\" =~ ^[-]$ ]] && \n            c=${${c:0:1}:${#c}}\n        [[ \"$c\" =~\
    \ ^[&]$ ]] && \n            c=${${c:0:1}:${#c}}\n        [[ \"$c\" =~ ^[#]$ ]]\
    \ && \n            c=${${c:0:1}:${#c}}\n        [[ \"$c\" =~ ^[|]$ ]] && \n  \
    \          c=${${c:0:1}:${#c}}\n        [[ \"$c\" =~ ^[~]$ ]] && \n          \
    \  c=${${c:0:1}:${#c}}\n        [[ \"$c\" =~ ^[<]$ ]] && \n            c=${${c:0:1}:${#c}}\n\
    \        [[ \"$c\" =~ ^[>]$ ]] && \n            c=${${c:0:1}:${#c}}\n        [[\
    \ \"$c\" =~ ^[/]$ ]] && \n            c=${${c:0:1}:${#c}}\n        [[ \"$c\" =~\
    \ ^[\\.]$ ]] && \n            c=${${", "    local chars=$1\n    local res\n  \
    \  for (( i=0; i<${#chars}; i++ ));do\n        local res\n        if [ ${char:$i:1}\
    \ == \"a\" ] ;then\n            local char=${char:$i:1}\n        fi\n        if\
    \ [ ${char:$i:1} == \"A\" ] ;then\n            local char=${char:$i:1}\n     \
    \   fi\n        if [ ${char:$i:1} == \"b\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"B\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"c\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"C\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"d\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"D\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"e\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"E\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"f\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"F\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"g\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"G\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"h\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"H\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"i\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi\n        if [ ${char:$i:1} == \"I\" ] ;then\n            local char=${char:$i:1}\n\
    \        fi", "    local string=$1\n    if [[ ${#string} -eq 0 ]] ; then \n  \
    \      echo \"$string\" \n        exit\n    fi \n\n    local chars \n\n    for\
    \ char in \"${string}\" ; do\n        if [[ ${string::${char:0:1}} =~ [[:alpha:]]\
    \ ]] ; then \n            chars=\"$chars\"${char::1}${char::1}\n        fi \n\
    \    done \n    \n    if [[ ! -z $chars ]] ; then\n        echo \"$chars\"\n \
    \   fi ", "  local s\n  s=\"${1:-}\"\n  [[ \"$s\" == \"\" ]] && echo \"$s\" ||\
    \ echo \"${s//[^a-zA-Z]/}\" || echo \"${s//^a-zA-Z}\"", "\tstring=$1\n\ti=1\n\t\
    while [ $i -le ${#string} ]; do\n\t\tif [ \"${string:i:1}\" != \"${string:i:1}\"\
    \ -a \"${string:i:1}\" != \"${string:i:1}\" -a \"${string:i:1}\" != \"${string:i:1}\"\
    \ -a \"${string:i:1}\" != \"${string:i:1}\" -a \"${string:i:1}\" != \"${string:i:1}\"\
    \ -a \"${string:i:1}\" != \"${string:i:1}\" -a \"${string:i:1}\" != \"${string:i:1}\"\
    \ -a \"${string:i:1}\" != \"${string:i:1}\" -a \"${string:i:1}\" != \"${string:i:1}\"\
    \ ]; then\n\t\t\tstring=${string//${string:i:1}/$((${#string}+${#string:i:1}))}\n\
    \t\tfi\n\t\ti=$((i+1))\n\tdone\n\treturn \"${string:0:1}${string:1:1}\"", "\t\
    local -n arr=$1\n\tlocal i=0 j=0 k res\n\tlocal arr_tmp\n\twhile [[ $i -lt ${#arr[@]}\
    \ ]]; do\n\t\tarr_tmp=()\n\t\tk=0\n\t\twhile [[ $i -lt ${#arr[@]} ]]; do\n\t\t\
    \tarr_tmp[$k]=\"${arr[i]}\"\n\t\t\t((i++))\n\t\t\tk=$((k+1))\n\t\tdone\n\t\tarr=(${arr[@]:$i:${#arr[@]}})\
    \ \n\t\tres=\"$( ${arr[@]:0:$i} )\"\n\t\tarr=(${arr[@]:$i:${#arr[@]}}) \n\t\t\
    if [[ $res ]]; then\n\t\t\tbreak\n\t\telse\n\t\t\tarr_tmp[0]=\"$( ${arr[@]:0:$i}\
    \ )\"\n\t\tfi\n\t\tarr=(${arr_tmp[@]})\n\t\tres=\"$( ${arr[@]:0:$j} )\"\n\t\t\
    arr=(${arr[@]:$j:${#arr[@]}}) \n\tdone\n\tprintf '%s' \"${arr[@]}\"", "\t# Your\
    \ code here\n\tlocal str=\"$1\"\n\tlocal len=${#str}\n\tlocal i=0;\n\tlocal tmp=$0;\n\
    \techo \"$str\" | while read -n 1 ch; do\n\t\tcase \"$ch\" in\n\t\t\t[a-z] )\n\
    \t\t\t\tstr=\"${str:0:$i} ${str:$i-1:1}${str:$i:1}\";\n\t\t\t\tlet i=$i-1;\n\t\
    \t\t;;\n\t\t\t[A-z] )\n\t\t\t\tstr=\"${str:0:$i} ${str:$i:1}${str:$i+1:1}\";\n\
    \t\t\t\tlet i=$i+1;\n\t\t\t;;\n\t\tesac\n\tdone\n\techo \"$str\"", "  local STR=$1\n\
    \  local LENGTH=${#STR}\n  local CHAR\n\n  local result=\"\"\n\n  while [ $LENGTH\
    \ ]; do\n    CHAR=${STR:$((LENGTH-1))}\n    STR=${STR:0:$((LENGTH-1))}\n\n   \
    \ case \"$CHAR\" in\n      [a-zA-Z] )\n        CHAR=${CHAR:0:1}${CHAR:1:1}${CHAR:2:1}${CHAR:3:1}${CHAR:4:1}${CHAR:5:1}${CHAR:6:1}${CHAR:7:1}\n\
    \        STR=${STR:0:1}${STR:1:1}${STR:2:1}${STR:3:1}${STR:4:1}${STR:5:1}${STR:6:1}${STR:7:1}\n\
    \        ;;\n      [#?] )\n        CHAR=${CHAR:0:1}${CHAR:1:1}${CHAR:2:1}\n  \
    \      STR=${STR:0:1}${STR:1:1}${STR:2:1}\n        ;;\n      * )\n        CHAR=${CHAR:0:1}${CHAR:1:1}\n\
    \        STR=${STR:0:1}${STR:1:1}\n        ;;\n    esac\n\n    local newCHAR\n\
    \    case \"$CHAR\" in\n      [a-z] )\n        newCHAR=$(echo \"$CHAR\" | tr '[:upper:]'\
    \ '[:lower:]')\n        ;;\n      [A-Z] )\n        newCHAR=$(echo \"$CHAR\" |\
    \ tr '[:lower:]' '[:upper:]')\n        ;;\n      * )\n        newCHAR=$CHAR\n\
    \        ;;\n    esac\n\n    result+=$newCHAR\n    LENGTH=$((LENGTH-1))\n  done\n\
    \n  result=\"${result::-1}\"\n  echo ${result}", "    # your code goes here\n\
    \    \n    local input=\"$1\"\n    local output\n    \n    IFS='' read -r -d ''\
    \ output <<< \"$input\"\n    \n    for (( i = 0; i < ${#output}; i++ )); do\n\
    \        if [[ \"${output:$i:1}\" == \"a\" ]] || [[ \"${output:$i:1}\" == \"A\"\
    \ ]] || [[ \"${output:$i:1}\" == \"b\" ]] || [[ \"${output:$i:1}\" == \"B\" ]]\
    \ || [[ \"${output:$i:1}\" == \"c\" ]] || [[ \"${output:$i:1}\" == \"C\" ]] ||\
    \ [[ \"${output:$i:1}\" == \"d\" ]] || [[ \"${output:$i:1}\" == \"D\" ]] || [[\
    \ \"${output:$i:1}\" == \"e\" ]] || [[ \"${output:$i:1}\" == \"E\" ]] || [[ \"\
    ${output:$i:1}\" == \"f\" ]] || [[ \"${output:$i:1}\" == \"F\" ]] || [[ \"${output:$i:1}\"\
    \ == \"g\" ]] || [[ \"${output:$i:1}\" == \"G\" ]] || [[ \"${output:$i:1}\" ==\
    \ \"h\" ]] || [[ \"${output:$i:1}\" == \"H\" ]] || [[ \"${output:$i:1}\" == \"\
    i\" ]] || [[ \"${output:$i:1}\" == \"I\" ]] || [[ \"${output:$i:1}\" == \"j\"\
    \ ]] || [[ \"${output:$i:1}\" == \"J\" ]] || [[ \"${output:$i:1}\" == \"k\" ]]\
    \ || [[ \"${output:$i:1}\" == \"K\" ]] || [[ \"${output:$i:1}\" == \"l\" ]] ||\
    \ [[ \"${output:$i:1}\" == \"L\" ]] || [[ \"${output:$i:1}\" == \"m\" ]] || [[\
    \ \"${output:$i:1}\" == \"M\" ]] || [[ \"${output:$i:1}\" == \"n\" ]] || [[ \"\
    ${output:$i:1}\" == \"N\" ]] || [[ \"${output:$i:1}\" == \"o\" ]] || [[ \"${output:$i:1}\"\
    \ == \"O\" ]] || [[ \"${output:$i:1}\" == \"p\" ]] || [[ \"${output:$i:1}\" ==\
    \ \"P\" ]] || [[ \"${output:$i:1}\" == \"q\" ]] || [[ \"${output:$i:1}\" == \"\
    Q\" ]] || [[ \"${output:$i:1}\" == \"r\" ]] || [[ \"${output:$i:1}\" == \"R\"\
    \ ]] || [[ \"${output:$i:1}\" == \"s\" ]] || [[ \"${output:$i:1}\" == \"S\" ]]\
    \ || [[ \"${output:$i:1}\" == \"t\" ]] || [[ \"${output:$i:1}\" == \"T\" ]] ||\
    \ [[ \"${output:$i:1}\" == \"u\" ]] || [[ \"${output:$i:1}\" == \"", "    echo\
    \ $(echo \"$1\" | sed \"s/[a-zA-Z]//g\" | tr '[:upper:]' '[:lower:]')", "\ts=$1\n\
    \tfor i in $(seq 0 ${#s})\n\tdo\n\t\tif [[ $i -eq 0 ]]\n\t\tthen\n\t\t\tcontinue\n\
    \t\tfi\n\t\tif [[ $i -eq ${#s} ]]\n\t\tthen\n\t\t\tcontinue\n\t\tfi\n\t\tif [[\
    \ $(echo \"${s:$i:1}\" | tr '[:upper:]' '[:lower:]') ]]\n\t\tthen\n\t\t\ts=${s:0:$i}$(echo\
    \ \"${s:$i:1}\" | tr '[:upper:]' '[:lower:]')${s:$i+1:1}\n\t\telse\n\t\t\ts=${s:0:$i}$(echo\
    \ \"${s:$i:1}\")${s:$i+1:1}\n\t\tfi\n\tdone\n\techo -n \"$s\"", "    local i j\n\
    \    for (( i=1;;i++ )); do\n        [[ \"$1\" =~ \"^[[:alpha:]]+$\" ]] && { echo\
    \ \"1\" >&2; return $1; }\n        [[ \"$1\" =~ \"^[[:alpha:]]+\\.$\" ]] && {\
    \ echo \"1\" >&2; return $1; }\n        [[ \"$1\" =~ \"^[[:alpha:]]+\\.[[:alpha:]]+$\"\
    \ ]] && { echo \"1\" >&2; return $1; }\n        [[ \"$1\" =~ \"^[[:alpha:]]+\\\
    .[[:alpha:]]+\\.$\" ]] && { echo \"1\" >&2; return $1; }\n        [[ \"$1\" =~\
    \ \"^[[:alpha:]]+\\.[[:alpha:]]+\\.[[:alpha:]]+$\" ]] && { echo \"1\" >&2; return\
    \ $1; }\n        [[ \"$1\" =~ \"^[[:alpha:]]+\\.[[:alpha:]]+\\.[[:alpha:]]+\\\
    .$\" ]] && { echo \"1\" >&2; return $1; }\n        [[ \"$1\" =~ \"^[[:alpha:]]+\\\
    .[[:alpha:]]+\\.[[:alpha:]]+\\.[[:alpha:]]+$\" ]] && { echo \"1\" >&2; return\
    \ $1; }\n        [[ \"$1\" =~ \"^[[:alpha:]]+\\.[[:alpha:]]+\\.[[:alpha:]]+\\\
    .[[:alpha:]]+\\.$\" ]] && { echo \"1\" >&2; return $1; }\n        [[ \"$1\" =~\
    \ \"^[[:alpha:]]+\\.[[:alpha:]]+\\.[[:alpha:]]+\\.[[:alpha:]]+\\.[[:alpha:]]+$\"\
    \ ]] && { echo \"1\" >&2; return $1; }\n        [[ \"$1\" =~ \"^[[:alpha:]]+\\\
    .[[:alpha:]]+\\.[[:alpha:]]+\\.[[:alpha:]]+\\.[[:alpha:]]+\\.$\" ]] && { echo\
    \ \"1\" >&2; return $1; }\n        [[ \"$1\" =~ \"^[[:alpha:]]+\\.[[:alpha:]]+\\\
    .[[:alpha:]]+\\.[[:alpha:]]+\\.[[:alpha:]]+\\.[[:alpha:]]+$\" ]] && { echo \"\
    1\" >&2; return $1; }\n        [[ \"$1\" =~ \"^[[:alpha:]]+\\.[[:alpha:", "  \
    \  local i s j\n    s=\"$1\"\n    [[ \"$s\" =~ [a-zA-Z] ]] || return \"$s\"\n\
    \    i=\"0\"\n    j=\"$((${#s}+1))\"\n    while [ \"$i\" -lt \"$j\" ]; do\n  \
    \      case \"${s:$i:1}\" in\n            [:upper:] ) echo \"${s:0:$i}${s:$i:1}${s:$j:1}\"\
    \ ;;\n            [:lower:] ) echo \"${s:0:$i}${s:$i:1}${s:$j:1}\" ;;\n      \
    \      * ) echo \"${s:0:$i}${s:$i:1}${s:$j:1}\" ;;\n        esac\n        ((i+=1))\n\
    \        j=\"$((${#s}+1))\"\n    done\n    echo \"$s\"", "    local -i i len\n\
    \    local -s i len str\n    local -n str\n    local -r str=$(printf \"$1\")\n\
    \    for ((i=0; i<${#str[@]}; i++)); do\n        if [[ \"${str[i]}\" =~ ^[[:alpha:]]$\
    \ ]]; then\n            # \"str[i]\" is one letter -> upper or lower\n       \
    \     if [[ \"${str[i]}\" =~ ^[[:upper:]]$ ]]; then\n                # upper ->\
    \ lower or vise versa\n                str[i]=${str[i]^^}\n            else\n\
    \                str[i]=${str[i]^^}\n            fi\n        else\n          \
    \  str[i]=${str[i]}\n        fi\n    done\n    printf \"$str\"", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr -d '[:space:]'", "    local string=$1\n    local result\n\n    # remove\
    \ all spaces\n    string=${string//+/ }\n\n    # reverse string and remove spaces\n\
    \    result=${string#${string%% *}}\n\n    # remove all spaces\n    result=${result//+/\
    \ }\n\n    # reverse string and remove spaces\n    result=${result//${result%%\
    \ *}}\n\n    # remove all spaces\n    result=${result//${result%% *}}\n\n    #\
    \ reverse string and remove spaces\n    result=${result//${result%% *}}\n\n  \
    \  # remove all spaces\n    result=${result//${result%% *}}\n\n    # remove all\
    \ spaces\n    result=${result//${result%% *}}\n\n    # remove all spaces\n   \
    \ result=${result//${result%% *}}\n\n    # remove all spaces\n    result=${result//${result%%\
    \ *}}\n\n    # remove all spaces\n    result=${result//${result%% *}}\n\n    #\
    \ remove all spaces\n    result=${result//${result%% *}}\n\n    # remove all spaces\n\
    \    result=${result//${result%% *}}\n\n    # remove all spaces\n    result=${result//${result%%\
    \ *}}\n\n    # remove all spaces\n    result=${result//${result%% *}}\n\n    #\
    \ remove all spaces\n    result=${result//${result%% *}}\n\n    # remove all spaces\n\
    \    result=${result//${result%% *}}\n\n    # remove all spaces\n    result=${result//${result%%\
    \ *}}\n\n    # remove all spaces\n    result=${result//${result%% *}}\n\n    #\
    \ remove all spaces\n    result=${result//${result%% *}}\n\n    # remove all spaces\n\
    \    result=${result//${result%% *}}\n\n    # remove all spaces\n    result=${result//${result%%\
    \ *}}\n\n    # remove all spaces\n    result=${result//${result%% *}}\n\n    #\
    \ remove all spaces\n    result=${result//${result%% *}}\n\n    # remove all spaces\n\
    \    result=${result//${result%% *}}\n\n    # remove all spaces\n    result=${result//${result%%\
    \ *}}\n\n    # remove all spaces\n    result=${result//${result%% *}}\n\n    #\
    \ remove all spaces\n    result=${result//${result%% *}}\n\n    # remove all spaces\n\
    \    result=${result//${result%% *}}\n\n    # remove all spaces\n    result=${result//${result%%\
    \ *}}\n\n    # remove all spaces\n    result=${result//${result%% *}}\n\n    #\
    \ remove all spaces\n    result=${result//${result%% *}}\n\n    # remove all spaces\n\
    \    result=${result//${result%% *}}\n\n    # remove all spaces", "  local line=${1:-}\n\
    \  local result=''\n  for i in ${line//[!A-Za-z]/}; do\n    if [[ ${i:0:1} !=\
    \ ${i:0:1} ]]; then\n      result=${result}-${i}\n    else\n      result=${result}${i:0:1}\n\
    \    fi\n  done\n  result=${result/-/}\n  result=${result/-/}\n  echo ${result}",
  "  local s=$1 i\n  [[ -z \"$s\" ]] && return 0\n  [[ ${#s} -eq 0 ]] && return 0\n\
    \  local result\n  result=${s:0:1}\n  for ((i=1;i<${#s};i++)); do\n    [[ \"$s\"\
    \ =~ [[:alpha:]]$i ]] && result=${s:0:i}${result:1:${#result}-1}\n  done\n  echo\
    \ \"$result\"", "  test -n \"$1\" && echo \"$1\" | awk '{for(i=1;i<=NF;i++){if($i==\"\
    a\")$i=toupper($i)}; print}'", "    echo \"${1:-}\"\n    echo \"${1:- }\"\n  \
    \  echo \"${1:-}\"\n    echo \"${1:-}\"\n    echo \"${1:-}\"", "    local s=$1\n\
    \    local t\n    local i\n    local a\n    local t\n    local ans\n    local\
    \ m\n    local l\n    local len\n    len=${#s}\n    ans=$2\n    for (( i = 1;\
    \ i <= len; i++ )); do\n        t=$(echo $s | sed 's/./&/g')\n        a=$(echo\
    \ $t | sed 's/./&/g')\n        m=$(echo $a | wc -c)\n        l=$(echo $a | wc\
    \ -l)\n        if [[ $m == 1 ]]; then\n            ans=$ans $t\n        elif [[\
    \ $l == 1 ]]; then\n            ans=$ans $a\n        else\n            ans=$ans\
    \ $(echo $s | awk '{print $1}')\n        fi\n        s=$(echo $s | sed 's/.\\\
    (.\\)/\\U\\1/')\n    done\n    ans=$(echo $ans | sed 's/.//g')\n    if [[ ${ans}\
    \ == \"\" ]]; then\n        ans=\"ERROR\"\n    else\n        ans=$(echo $ans |\
    \ tr '[:upper:]' '[:lower:]')\n    fi\n    echo $ans", "\techo $1 | rev | sed\
    \ 's/.//g' | sed \"s/$2//g\"", "  local input=\"$1\"\n  local output\n  local\
    \ letter\n  output=\"\"\n  while [ \"$input\" != \"\" ]; do\n    letter=$( echo\
    \ $input | cut -c2- )\n    input=$( echo $input | cut -c1-2 )\n    if [ $letter\
    \ != \"\" ]; then\n      if [ \"$letter\" == \"a\" ]; then\n        letter=$(\
    \ echo $letter | cut -c3-4 )\n        letter=$( echo $letter | tr '[a-z]' '[A-Z]'\
    \ )\n      elif [ \"$letter\" == \"A\" ]; then\n        letter=$( echo $letter\
    \ | cut -c3-4 )\n        letter=$( echo $letter | tr '[A-Z]' '[a-z]' )\n     \
    \ else\n        letter=$( echo $letter | tr '[a-z]' '[A-Z]' )\n        letter=$(\
    \ echo $letter | tr '[A-Z]' '[a-z]' )\n      fi\n    fi\n    output=$( echo $output\
    \ $letter )\n  done\n  echo $output | tr -d '\\015'", "    local -i i\n    local\
    \ -r s=$1\n    local -r slen=${#s}\n    local -r c\n\n    if [ \"${#s}\" -eq \"\
    0\" ]; then\n      echo \"${s}\"\n      return\n    fi\n\n    for ((i=0; i<slen;\
    \ i++)); do\n       c=${s:i:1}\n       case ${c} in\n         [a-z]* )\n     \
    \      echo ${c^^}\n           ;;\n         [A-Z]* )\n           echo ${c^^}\n\
    \           ;;\n         \\# )\n           echo ${c^^}\n           ;;\n      \
    \   @* )\n           echo ${c^^}\n           ;;\n         .* )\n           echo\
    \ ${c^^}\n           ;;\n         *) \n           echo ${c}\n           ;;\n \
    \      esac\n    done", "    echo \"[$(date +'%T')] Solving $1 with $(which python)\"\
    \n    echo \"[$(date +'%T')] Input string: $1\"\n    echo \"[$(date +'%T')] Output\
    \ string: $2\"\n    IFS=$'\\n'\n    if [[ \"$1\" =~ ^[a-z]*$ ]]; then\n      \
    \  echo \"[$(date +'%T')] Reversing $1\"\n        echo \"$1\" | tr [a-z] [A-Z]\
    \ | tr [A-Z] [a-z]\n        echo \"[$(date +'%T')] Output string: $2\"\n    else\n\
    \        echo \"[$(date +'%T')] Input string: $1\"\n        echo \"[$(date +'%T')]\
    \ Output string: $2\"\n    fi", "    local a\n    local b\n    local i j\n   \
    \ local length lengthB lengthA\n    local a b c\n    local temp\n    local result\n\
    \    length=${#1}\n    # check the length of string\n    if [ \"${#1}\" -lt \"\
    1\" ]; then\n        echo \"Illegal number of parameters!\"\n        echo \"Usage:\
    \ $(basename $0) [string]\"\n        exit 1\n    fi\n    a=$(echo \"${1}\" | sed\
    \ 's/^ *//g' | sed 's/ *$//g')\n    b=$a\n    lengthA=${#a}\n    lengthB=${#b}\n\
    \    # check whether the string contains only letters\n    if [ \"${lengthA}\"\
    \ -lt \"1\" ]; then\n        echo \"Illegal number of parameters!\"\n        echo\
    \ \"Usage: $(basename $0) [string]\"\n        exit 1\n    fi\n    if [ \"${lengthB}\"\
    \ -lt \"1\" ]; then\n        echo \"Illegal number of parameters!\"\n        echo\
    \ \"Usage: $(basename $0) [string]\"\n        exit 1\n    fi\n    if [[ \"${#a}\"\
    \ -gt \"0\" ]]; then\n        for i in $(seq 0 \"$((lengthA - 1))\"); do\n   \
    \         letter=$(echo \"${a}\" | awk -F \"[!0-9]\" '{print $'$i'}')\n      \
    \      if [[ \"${letter}\" == [A-Z] ]]; then\n                c=$(echo \"${letter}\"\
    \ | tr 'A-Z' 'a-z')\n            elif [[ \"${letter}\" == [a-z] ]]; then\n   \
    \             c=$(echo \"${letter}\" | tr 'a-z' 'A-Z')\n            elif [[ \"\
    ${letter}\" == [0-9] ]]; then\n                c=$(echo \"${letter}\" | tr '0-9'\
    \ 'a-zA-Z')\n            elif [[ \"${letter}\" == [^A-Za-z0-9] ]]; then\n    \
    \            c=$(echo \"${letter}\" | tr 'A-Za-z0-9' 'a-zA-Z0-9')\n          \
    \  elif [[ \"${letter}\" == [^a-zA-Z0-9] ]]; then\n                c=$(echo \"\
    ${letter}\" | tr 'a-zA-Z0-9' 'A-Za-z0-9')\n            fi\n            a=$(echo\
    \ \"${a}\" | sed -e \"s/${letter}/${c}/g\")\n        done\n        result=$(echo\
    \ \"${a}\" | sed -e 's/[a-z]/./g' | sed -e 's/[A-Z]/./g' | sed -e 's/[0-9]/./g'\
    \ | sed -e 's/[^A-Za-z0-9]/./g')\n    elif [[ \"${#b}\" -gt \"0\" ]]; then\n \
    \       for i in $(seq 0 \"$((lengthB - 1))\"); do\n            letter=$(echo\
    \ \"${b}\" | awk -F \"[!0-9]\" '{print $'$i'}')\n", "  local string=$1\n  local\
    \ chars=\"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\n  local output=''\n\
    \  \n  for c in $chars; do\n    case \"$string\" in\n      $(c:$c=*)\n      output+=$(c:$c=*)\n\
    \      ;;\n      *)\n      output+=$c\n      ;;\n    esac\n  done\n  \n  echo\
    \ \"$output\"", "    local str=$1\n    for i in $(echo $str|awk '{print $1}');\n\
    \    do\n        case \"$i\" in\n            a)\n            echo -n $i\n    \
    \        echo -n $i\n            ;;\n            B)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            c)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            D)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            E)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            f)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            F)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            g)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            H)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            I)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            j)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            k)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            l)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            M)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            N)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            o)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            p)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            Q)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            R)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            s)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            t)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            u)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            v)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            W)\n            echo -n $i\n\
    \            echo -n $i\n            ;;\n            X)\n", "  local s=$@\n  \n\
    \  if [ \"$s\" == \"\" ] ; then\n    echo \"$s\"\n  else\n    local i=0;\n   \
    \ local str=\"\";\n    while [ $i -lt ${#s} ]; do\n      if [ \"${s:$i:1}\" ==\
    \ \"a\" -o \"${s:$i:1}\" == \"A\" -o \"${s:$i:1}\" == \"b\" -o \"${s:$i:1}\" ==\
    \ \"B\" -o \"${s:$i:1}\" == \"c\" -o \"${s:$i:1}\" == \"C\" -o \"${s:$i:1}\" ==\
    \ \"d\" -o \"${s:$i:1}\" == \"D\" -o \"${s:$i:1}\" == \"e\" -o \"${s:$i:1}\" ==\
    \ \"E\" -o \"${s:$i:1}\" == \"f\" -o \"${s:$i:1}\" == \"F\" -o \"${s:$i:1}\" ==\
    \ \"g\" -o \"${s:$i:1}\" == \"G\" -o \"${s:$i:1}\" == \"h\" -o \"${s:$i:1}\" ==\
    \ \"H\" -o \"${s:$i:1}\" == \"i\" -o \"${s:$i:1}\" == \"I\" -o \"${s:$i:1}\" ==\
    \ \"j\" -o \"${s:$i:1}\" == \"J\" -o \"${s:$i:1}\" == \"k\" -o \"${s:$i:1}\" ==\
    \ \"K\" -o \"${s:$i:1}\" == \"l\" -o \"${s:$i:1}\" == \"L\" -o \"${s:$i:1}\" ==\
    \ \"m\" -o \"${s:$i:1}\" == \"M\" -o \"${s:$i:1}\" == \"n\" -o \"${s:$i:1}\" ==\
    \ \"N\" -o \"${s:$i:1}\" == \"o\" -o \"${s:$i:1}\" == \"O\" -o \"${s:$i:1}\" ==\
    \ \"p\" -o \"${s:$i:1}\" == \"P\" -o \"${s:$i:1}\" == \"q\" -o \"${s:$i:1}\" ==\
    \ \"Q\" -o \"${s:$i:1}\" == \"r\" -o \"${s:$i:1}\" == \"R\" -o \"${s:$i:1}\" ==\
    \ \"s\" -o \"${s:$i:1}\" == \"S\" -o \"${s:$i:1}\" == \"t\" -o \"${s:$i:1}\" ==\
    \ \"T\" -o \"${s:$i:1}\" == \"u\" -o \"${s:$i:1}\" == \"U\" -o \"${s:$i:1}\" ==\
    \ \"v\" -o \"${s:$i:1}\" == \"V\" -o \"${s:$i:1}\" == \"w\" -o \"${s:$i:1}\" ==\
    \ \"W\" -o \"${s:$i:", "local s=$1 \necho $s |grep -o [a-zA-Z] |grep -o [^a-zA-Z]\
    \ |sed -e \"s/\\(.*\\)/\\U\\1/g\" ", "  local i tmp\n  read -a strarray <<< \"\
    $1\"\n\n  for ((i=0; i<${#strarray[@]}; i++))\n  do\n    tmp=${strarray[i]}\n\
    \    strarray[i]=${strarray[i]^^}\n    strarray[i]=${strarray[i]^^}\n    strarray[i]=${strarray[i]^^}\n\
    \  done\n\n  echo \"${strarray[@]}\"", "  local string=\"$1\"\n  local temp\n\
    \  local temp1\n  local count\n  local length\n  length=${#string}\n  count=0\n\
    \  temp1=0\n  temp=`echo ${string} | tr '[:upper:]' '[:lower:]'`\n  while [ $count\
    \ -lt $length ]; do\n    if [[ ${string[$count]} =~ [a-zA-Z] ]]; then\n      temp1=$(expr\
    \ ${temp1} + 1)\n    else\n      temp1=$(expr ${temp1})\n      temp1=$(expr ${temp1}\
    \ - 1)\n    fi\n    temp=`echo ${string} | sed 's/'${string[$count]}':/&/'`\n\
    \    count=$(( $count + 1 ))\n  done\n  echo ${temp1:-1}", "    local IFS=$'\\\
    n'\n    local s='' len=0\n    local a='' res=''\n    local first=0 last=$((${#1}-1))\n\
    \    local res=''\n    for ((i=0;i<${#1};++i)); do\n        if [[ ${1:${first}:${last}\
    \ == \"${1:${first}:${last}\" ]]; then\n            s=${1:0:${last}}\n       \
    \ else\n            s=${1:0:$last}\n        fi\n        if [[ ${s:0:1} == \"#\"\
    \ ]]; then\n            if [[ ${#s} -gt 0 ]]; then\n                if [[ ${s:0:1}\
    \ == \"#\" ]]; then\n                    a=$(echo \"${s:0:1} ${s:1}\" | sed -E\
    \ 's/(^| )(.)([[:lower:]]$)/\\L\\2\\3/' | tr '[:upper:]' '[:lower:]')\n      \
    \              s=${s:1:${#s}}\n                else\n                    a=$(echo\
    \ \"${s:0:1} ${s:1}\" | sed -E 's/(^| )(.)([[:lower:]]$)/\\L\\2\\3/' | tr '[:upper:]'\
    \ '[:lower:]')\n                    s=${s:1}\n                fi\n           \
    \ else\n                a=$(echo \"${s:0:1} ${s:1}\" | sed -E 's/(^| )(.)([[:lower:]]$)/\\\
    L\\2\\3/' | tr '[:upper:]' '[:lower:]')\n                s=${s:1}\n          \
    \  fi\n        fi\n        if [[ ${#s} -gt 0 ]]; then\n            len=$((${#s}+1))\n\
    \            res=${res}${#res}\n            a=${a}${a}\n            if [[ $len\
    \ -gt 0 ]]; then\n                res=${res}${#res}${s:0:$len}\n            else\n\
    \                res=${res}${s}\n            fi\n        else\n            if\
    \ [[ ${1:${first}:${last} == \"${1:${first}:${last}\" ]]; then\n             \
    \   res=${res}${1:${first}:${last}}\n            else\n                res=${res}${1:0:$last}\n\
    \            fi\n        fi\n    done\n    if [[ ${#res} -gt 0 ]]; then\n    \
    \    res=\"${res:${#res}}\"\n    fi\n    echo \"${res}\"", "    local -r string=$1\n\
    \    local -i j=0\n    local -i k=0\n    local -r output\n    local -i count\n\
    \    local -r temp\n    local -r temp2\n    local -r temp3\n    local -r temp4\n\
    \    local -r temp5\n    local -r temp6\n    local -r temp7\n    local -r temp8\n\
    \    local -r temp9\n    local -r temp10\n    local -r temp11\n    local -r temp12\n\
    \    local -r temp13\n    local -r temp14\n    local -r temp15\n    local -r temp16\n\
    \    local -r temp17\n    local -r temp18\n    local -r temp19\n    local -r temp20\n\
    \    local -r temp21\n    local -r temp22\n    local -r temp23\n    local -r temp24\n\
    \    local -r temp25\n    local -r temp26\n    local -r temp27\n    local -r temp28\n\
    \    local -r temp29\n    local -r temp30\n    local -r temp31\n    local -r temp32\n\
    \    local -r temp33\n    local -r temp34\n    local -r temp35\n    local -r temp36\n\
    \    local -r temp37\n    local -r temp38\n    local -r temp39\n    local -r temp40\n\
    \    local -r temp41\n    local -r temp42\n    local -r temp43\n    local -r temp44\n\
    \    local -r temp45\n    local -r temp46\n    local -r temp47\n    local -r temp48\n\
    \    local -r temp49\n    local -r temp50\n    local -r temp51\n    local -r temp52\n\
    \    local -r temp53\n    local -r temp54\n    local -r temp55\n    local -r temp56\n\
    \    local -r temp57\n    local -r temp58\n    local -r temp59\n    local -r temp60\n\
    \    local -r temp61\n    local -r temp62\n    local -r temp63\n    local -r temp64\n\
    \    local -r temp65\n    local -r temp66\n    local -r temp67\n    local -r temp68\n\
    \    local -r temp69\n    local -r temp70\n    local -r temp71\n    local -r temp72\n\
    \    local -r temp73\n    local -r temp74\n    local -r temp75\n    local -r temp76\n\
    \    local -r temp77\n    local -r temp78\n    local -r temp79\n    local -r temp80\n\
    \    local -r temp", "    local str=$1\n    local lower\n    local upper\n   \
    \ local len\n    lower=$(echo $str | tr '[:lower:]' '[:upper:]')\n    upper=$(echo\
    \ $str | tr '[:upper:]' '[:lower:]')\n    len=$(echo $str | wc -c)\n    if [ $len\
    \ -gt 0 ];then\n        if [ $len -eq 1 ]; then\n            echo ${upper}\n \
    \       fi\n        if [ $len -eq 2 ]; then\n            echo ${upper}${lower}\n\
    \        fi\n    fi", "  local str=\"$1\"\n  [[ \"$str\" =~ ^[a-zA-Z0-9]*$ ]]\
    \ || return $str\n  local i j str2 str3\n  for j in $(seq 0 $((${#str} - 1)));\
    \ do\n    str2=${str:$j:1}\n    str3=${str:$j:1}\n    (( ${#str2} >= 1 )) && {\n\
    \      if [[ \"$str2\" = \"A\" ]]; then\n        str3=\"${str2:0:1}${str3:0:1}${str3:1:1}${str3:2:1}${str3:3:1}\"\
    \n      else\n        str3=\"${str2:0:1}${str3:0:1}${str3:1:1}${str3:2:1}\"\n\
    \      fi\n    }\n    echo ${str3} \n  done", "\tlocal i temp str\n\tlocal -a\
    \ arr new_arr\n\tstr=$1\n\tarr=($str)\n\tnew_arr=()\n\tfor i in \"${arr[@]}\"\
    ; do\n\t\t[[ -z \"$i\" ]] && continue\n\t\t[[ \"$i\" =~ ^[0-9a-z] ]] && new_arr+=(\"\
    $i\")\n\tdone\n\tnew_arr=( \"${new_arr[@]}\" )\n\tfor i in \"${new_arr[@]}\";\
    \ do\n\t\t[[ \"$i\" =~ ^[0-9a-z] ]] && arr+=(\"${i^^}\")\n\tdone\n\tprintf '%s\\\
    n' \"${arr[@]}\"", "  local str=$1\n  # Your code goes here\n  local res\n  for\
    \ i in ${str}; do\n    case $i in\n      [a-z][a-z][a-z][a-z]* | \n      [A-z][a-z][a-z][a-z]*\
    \ | \n      [a-z][a-z][A-Z][a-z]* | \n      [A-z][a-z][A-Z][a-z]* | \n      [a-z][A-Z][A-Z][a-z]*\
    \ | \n      [A-z][A-Z][A-Z][a-z]*) \n        res=\"${i^^}\"\n        echo ${res}\n\
    \        ;;\n      *) res=\"${i}\"\n        echo ${res}\n        ;;\n    esac\n\
    \  done", "  local string=$1\n  local charArray=(${string//[!a-zA-Z]})\n  local\
    \ charCount=-1\n  local letterCount=0\n  local result\n  if [[ $string =~ ^[a-zA-Z]*$\
    \ ]]; then\n    charArray=(${string//[!a-zA-Z]})\n    charCount=-1\n    letterCount=0\n\
    \  fi\n  local previous\n  result=$(echo $string | tr '[:upper:]' '[:lower:]')\n\
    \  for i in ${charArray[@]}; do\n    charCount=$((charCount+1))\n    previous=${result}\n\
    \    result=$(echo $result | tr '[:upper:]' '[:lower:]')\n    case \"$previous\"\
    \ in\n      ^$i) previous=\"$i\";;\n      *) echo \"$previous\"\n          previous=\"\
    $i\";;\n    esac\n  done\n  echo \"$result\"", "    local i letter\n    local\
    \ s reversed\n\n    s=$1\n    for (( i=1; i<${#s}; i++ )); do\n        letter=$(\
    \ expr ${s:$i:1} )\n        if [[ ${s:$i:1} == ${letter} ]]; then\n          \
    \  reversed=\"${s:0:$i}${letter}${s:$((i+1)):}\"\n        fi\n    done\n\n   \
    \ echo \"${reversed}\"", "  local i c\n  local sol=''\n  local string=''\n  local\
    \ flag=0\n\n  string=$1\n  length=${#string}\n\n  for ((i=0;i<length;i++)) {\n\
    \    c=${string[i]}\n    \n    if [ \"$flag\" -eq 0 ]\n    then\n      if [ \"\
    $c\" == \"a\" ]\n      then\n        sol=$sol$c\n        flag=1\n      elif [\
    \ \"$c\" == \"A\" ]\n      then\n        sol=$sol${c^^}\n        flag=1\n    \
    \  elif [ \"$c\" == \"b\" ]\n      then\n        sol=$sol${c^^}\n        flag=1\n\
    \      elif [ \"$c\" == \"B\" ]\n      then\n        sol=$sol$c\n        flag=1\n\
    \      elif [ \"$c\" == \"c\" ]\n      then\n        sol=$sol${c^^}\n        flag=1\n\
    \      elif [ \"$c\" == \"C\" ]\n      then\n        sol=$sol${c^^}\n        flag=1\n\
    \      else\n        sol=$sol$c\n        flag=1\n      fi\n    else\n      if\
    \ [ \"$c\" == \"a\" ]\n      then\n        sol=$sol${c^^}\n        flag=0\n  \
    \    elif [ \"$c\" == \"A\" ]\n      then\n        sol=$sol$c\n        flag=0\n\
    \      elif [ \"$c\" == \"b\" ]\n      then\n        sol=$sol${c^^}\n        flag=0\n\
    \      elif [ \"$c\" == \"B\" ]\n      then\n        sol=$sol$c\n        flag=0\n\
    \      elif [ \"$c\" == \"c\" ]\n      then\n        sol=$sol${c^^}\n        flag=0\n\
    \      elif [ \"$c\" == \"C\" ]\n      then\n        sol=$sol${c^^}\n        flag=0\n\
    \      else\n        sol=$sol$c\n        flag=0\n      fi\n    fi\n  }\n\n  echo\
    \ $sol", "    local IFS=\n    local string=${1}\n    local result=\"${string#*[!A-Za-z]*}\"\
    \n    local resultUpper=${result,,}\n    local resultLower=${result,}\n    local\
    \ resultString=${resultUpper,,}\n    local resultString=${resultLower,,}\n   \
    \ local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,}\n    local resultString=${resultString,,}\n\
    \    local resultString=${resultString,,", "    local input\n    local output\n\
    \    read -r -n 1 -s input\n    if [[ \"$input\" =~ ^[[:alnum:]] ]]; then\n  \
    \      output=$(\"$1\" <<< \"${input^^}\")\n    else\n        output=$(\"$1\"\
    \ <<< \"$input\")\n    fi\n    read -r -n 1 -s input\n    return \"$output\"",
  " local input=${1}\n local flag=0\n for i in $input\n do\n   if [[ ${flag} -eq 1\
    \ ]]; then\n     flag=0\n   else\n     if [[ $i =~ ^[0-9]$ ]]; then\n       echo\
    \ \"$i\"\n       flag=1\n     else\n       echo \"$i\"\n     fi\n   fi\n done\n\
    \ echo \"${input:- }\"", "  local STRING=${1}\n  \n  case \"${STRING}\" in\n \
    \   *[!a-zA-Z]*|*[a-zA-Z]*)\n      echo \"${STRING}\"\n      echo \"${STRING}\"\
    \ | tr [:lower:] [:upper:]\n      echo \"${STRING}\" | tr [:upper:] [:lower:]\n\
    \      echo \"${STRING}\" | tr '[:upper:]' '[:lower:]'\n      echo \"${STRING}\"\
    \ | tr '[:lower:]' '[:upper:]'\n      ;;\n    *)\n      echo \"${STRING}\"\n \
    \     echo \"${STRING}\" | tr [:upper:] [:lower:]\n      echo \"${STRING}\" |\
    \ tr [:lower:] [:upper:]\n      echo \"${STRING}\" | tr '[:upper:]' '[:lower:]'\n\
    \      echo \"${STRING}\" | tr '[:lower:]' '[:upper:]'\n      ;;\n  esac", " \
    \ local s=$1\n  local i=0\n  local j=$((${#s}))\n  local c=0\n  local temp\n\n\
    \  while [ $i -lt $j ]\n  do\n    if [[ ${s:$i:1} = \"a\" ]] || [[ ${s:$i:1} =\
    \ \"A\" ]]; then\n      temp=\"${s:$((i+1)):1}\"\n      s=${s:0:$i}${temp}${s:$((i+1))}\n\
    \      i=$((i+1))\n      j=$((j-1))\n    else\n      i=$((i+1))\n      j=$((j-1))\n\
    \    fi\n  done\n  s=${s:0:$i}${s:$((j+1)):1}\n  return $s", "    local input=\"\
    ${1:?Usage: $(basename $0) <string>}\"\n    local output\n    local i\n    local\
    \ j\n    local num\n    local c\n    local alpha\n    local beta\n    local s\n\
    \    local numString\n    \n    s=\"$input\"\n    output=\"\"\n    \n    if [[\
    \ $s == \"$input\" ]]; then\n        output=\"$s\"\n        return $output\n \
    \   fi\n    \n    for ((i=0; i<${#s}; i++)); do\n        num=\"${s:i:1}\"\n  \
    \      numString=${num//[^a-zA-Z]/}\n        \n        if [[ \"$numString\" ==\
    \ \"\" ]]; then\n            alpha=\"${s:i:1}\"\n        else\n            if\
    \ [[ \"$alpha\" != \"z\" ]]; then\n                beta=\"${s:i:1}\"\n       \
    \         alpha=${alpha}${beta}\n            else\n                alpha=\"$alpha$num\"\
    \n            fi\n        fi\n        \n        c=\"${s:i:1}\"\n        \n   \
    \     if [[ \"$c\" == [A-Z] ]]; then\n            if [[ \"$alpha\" != \"z\" ]];\
    \ then\n                alpha=\"${alpha}${c}\"\n            else\n           \
    \     alpha=\"${alpha}${c}\"\n            fi\n        fi\n        \n        if\
    \ [[ \"$c\" == [a-z] ]]; then\n            if [[ \"$alpha\" != \"z\" ]]; then\n\
    \                alpha=\"${alpha}${c}\"\n            else\n                alpha=\"\
    ${alpha}${c}\"\n            fi\n        fi\n        \n        if [[ \"$c\" ==\
    \ [[:lower:]] ]]; then\n            if [[ \"$alpha\" != \"z\" ]]; then\n     \
    \           alpha=\"${alpha}${c}\"\n            else\n                alpha=\"\
    ${alpha}${c}\"\n            fi\n        fi\n        \n        if [[ \"$c\" ==\
    \ [[:upper:]] ]]; then\n            if [[ \"$alpha\" != \"z\" ]]; then\n     \
    \           alpha=\"${alpha}${c}\"\n            else\n                alpha=\"\
    ${alpha}${c}\"\n            fi\n        fi\n        \n        if [[ \"$c\" ==\
    \ [0-9] ]]; then\n            if [[ \"$alpha\" != \"z\" ]]; then\n           \
    \     alpha=\"${alpha}${c}\"\n            else\n                alpha=\"${alpha}${c}\"\
    \n            fi\n        fi\n        \n        if [[ \"$alpha\" == \"z\" ]];\
    \ then\n            if [[ \"$num\" != \"0\" ]]; then\n                if [[ \"\
    $c\" == \"l\" ]]; then\n                    alpha=\"\"\n                else\n\
    \                    alpha=\"${alpha}${c}\"\n                fi\n            else\n\
    \                if [[ \"$c\" == \"L\" ]]; then\n                    alpha=\"\"\
    \n                else\n", "    local -r s=$1\n    local i j\n    local tmp\n\
    \    local out\n    for ((i=0; i<${#s}; i++));\n    do\n        tmp=${s:i:1}\n\
    \        if [[ $tmp =~ [a-z] ]];\n        then\n            tmp=${tmp,,}\n   \
    \         tmp=${tmp^^}\n        fi\n        if [[ $tmp =~ [a-z] ]];\n        then\n\
    \            out=$out$tmp\n        else\n            out=$out${tmp}\n        fi\n\
    \    done\n    out=${out,,}\n    out=${out^^}\n    out=${out/$'\\n'/}\n    out=${out%$'\\\
    n'}\n    echo \"$out\"", "\tlocal s\n\ts=$1\n\tlet i=0\n\twhile [ -z \"$s\" ];\
    \ do\n\t\tlet i++\n\t\ts=$s[$i]\n\tdone\n\tlocal j=$((i-1))\n\tlocal k=$j\n\t\
    local t\n\twhile [ -n \"$s\" ]; do\n\t\tlet k--\n\t\tif [ $k -eq 0 ]; then\n\t\
    \t\ts=${s:$j:1}\n\t\telse\n\t\t\ts=${s:$j:$k:1}\n\t\tfi\n\tdone\n\techo \"$s\"",
  "  local s string=$1\n\n  # check if s is empty\n  if [ -z \"$string\" ]\n  then\n\
    \    echo \"$string\"\n  fi\n\n  # check if s is non-empty\n  if [ -n \"$string\"\
    \ ]\n  then\n    # for each letter in s\n    for ((i=1; i<${#string}; i++)); do\n\
    \      letter=$(expr $i \\* 2)\n      letter=$[$letter+1]\n\n      if [[ $letter\
    \ == ${s:$i:1} ]]\n      then\n        reversedString=${s:$i:1}\n      else\n\
    \        reversedString=${s:$i:$letter}\n      fi\n\n      s=$reversedString\n\
    \    done\n\n    echo \"$s\"\n  fi", "  local str=$1\n  local result=\"\"\n\n\
    \  for ((i=0;i<${#str};i++));\n  do\n    if [[ \"${str[i]}\" = \"a\" ]]; then\
    \ \n      result=${str//a/A}\n    elif [[ \"${str[i]}\" = \"A\" ]]; then \n  \
    \    result=${str//A/a}\n    elif [[ \"${str[i]}\" = \"0\" ]]; then \n      result=${str//0/0}\n\
    \    elif [[ \"${str[i]}\" = \"1\" ]]; then \n      result=${str//1/1}\n    elif\
    \ [[ \"${str[i]}\" = \"2\" ]]; then \n      result=${str//2/2}\n    elif [[ \"\
    ${str[i]}\" = \"3\" ]]; then \n      result=${str//3/3}\n    elif [[ \"${str[i]}\"\
    \ = \"4\" ]]; then \n      result=${str//4/4}\n    elif [[ \"${str[i]}\" = \"\
    5\" ]]; then \n      result=${str//5/5}\n    elif [[ \"${str[i]}\" = \"6\" ]];\
    \ then \n      result=${str//6/6}\n    elif [[ \"${str[i]}\" = \"7\" ]]; then\
    \ \n      result=${str//7/7}\n    elif [[ \"${str[i]}\" = \"8\" ]]; then \n  \
    \    result=${str//8/8}\n    elif [[ \"${str[i]}\" = \"9\" ]]; then \n      result=${str//9/9}\n\
    \    elif [[ \"${str[i]}\" = \"*\" ]]; then \n      result=${str//*/*}\n    elif\
    \ [[ \"${str[i]}\" = \"/\" ]]; then \n      result=${str////}\n    elif [[ \"\
    ${str[i]}\" = \"_\" ]]; then \n      result=${str//_/_}\n    else\n      result=${str}\n\
    \    fi\n  done\n  echo \"$result\"", "    local -r s=$1\n    local -r res=\n\
    \    for (( i = 0; i < ${#s}; i++ )); do\n        local letter=\"${s:i:1}\"\n\
    \        if [[ \"${s:i:1}\" =~ ^[a-zA-Z]$ ]]; then\n            res+=\"${letter^^}\"\
    \n        elif [[ \"${s:i:1}\" =~ ^[a-z]$ ]]; then\n            res+=\"${letter^^}\"\
    \n        else\n            res+=\"${s:i:1}\"\n        fi\n    done\n    echo\
    \ \"$res\"", "  string=$1\n  i=1\n  while [ $i -le ${#string} ]; do\n    case\
    \ ${string:$i:1} in\n        [a-z]\n        string=${string:$i:1}${string:$i:1}\n\
    \        ;;\n        [A-Z]\n        string=${string:$i:1}${string:$i:1}\n    \
    \    ;;\n        *)\n        ;;\n    esac\n    i=$((i + 1))\n  done\n  echo \"\
    $string\"", "  echo $1\n  test -z \"$1\" || return\n  result=${1:0:1}\n  test\
    \ \"$result\" = \"$1\" || return\n  test \"$1\" = \"$result\" || return\n  for\
    \ i in $1 $result ; do\n    test \"$i\" =~ ^[a-zA-Z]*$ || break\n  done\n  echo\
    \ -n $result", "    # your code goes here\n    local str=$1\n    for (( i=1; i<${#str};\
    \ i++ )); do\n        local letter=${str:$i:1}\n        case \"${letter}\" in\n\
    \            [a-zA-Z] ) \n                echo ${letter:0:1}${letter:1:1}${letter:2:1}${letter:3:1}${letter:4:1}\n\
    \                break\n                ;;\n            * )\n                echo\
    \ ${str:$i:1}\n                break\n                ;;\n        esac\n    done",
  "    local -i i\n    for (( i=1; i<=$#; i++ )); do\n        local char str\n   \
    \     local -r char=${1:$i:1}\n        # Character is a letter?\n        if [[\
    \ ${str:0:1} == \"$char\" ]]; then\n            local upper=${str:0:1}\n     \
    \       local lower=${str:1}\n            local reverse\n            case \"$lower\"\
    \ in\n                a|e|i|o|u)\n                    reverse=a|e|i|o|u\n    \
    \                ;;\n                *)\n                    reverse=$lower\n\
    \                    ;;\n            esac\n            # upper, lower, and reverse\
    \ are all valid strings.\n            # Make a new string by appending the 3 strings\
    \ in reverse order.\n            eval \"str+=\\\"${reverse}${upper}${lower}\\\"\
    \"\n            eval \"echo \\\"$str\\\"\"\n        fi\n    done", "    local\
    \ str=\"$1\"\n    local res=\"$str\"\n    for i in $(seq 0 ${#str}); do\n    \
    \    if [[ \"$str\" =~ ^[a-zA-Z]$ ]]; then\n            res=\"${res,,}${${str:i:1},,}\"\
    \n        fi\n    done\n    echo \"${res,,}\"", "    local s=$1;\n    local t=$2;\n\
    \    local p=$3;\n\n    local i=0\n    local j=0\n    local result=\"\"\n    while\
    \ [ $i -lt ${#s} ]; do\n        local letter=${s:$i:1}\n        if [ \"${letter}\"\
    \ == \"a\" ] || [ \"${letter}\" == \"b\" ] || [ \"${letter}\" == \"c\" ] || [\
    \ \"${letter}\" == \"d\" ] || [ \"${letter}\" == \"e\" ] || [ \"${letter}\" ==\
    \ \"f\" ] || [ \"${letter}\" == \"g\" ] || [ \"${letter}\" == \"h\" ] || [ \"\
    ${letter}\" == \"i\" ] || [ \"${letter}\" == \"j\" ] || [ \"${letter}\" == \"\
    k\" ] || [ \"${letter}\" == \"l\" ] || [ \"${letter}\" == \"m\" ] || [ \"${letter}\"\
    \ == \"n\" ] || [ \"${letter}\" == \"o\" ] || [ \"${letter}\" == \"p\" ] || [\
    \ \"${letter}\" == \"q\" ] || [ \"${letter}\" == \"r\" ] || [ \"${letter}\" ==\
    \ \"s\" ] || [ \"${letter}\" == \"t\" ] || [ \"${letter}\" == \"u\" ] || [ \"\
    ${letter}\" == \"v\" ] || [ \"${letter}\" == \"w\" ] || [ \"${letter}\" == \"\
    x\" ] || [ \"${letter}\" == \"y\" ] || [ \"${letter}\" == \"z\" ]; then\n    \
    \        letter=$letter$t\n        else\n            letter=$letter\n        fi\n\
    \        result=\"${result}${letter:$j:1}\"\n        j=$(( j + 1 ))\n        i=$((\
    \ i + 1 ))\n    done\n    echo \"${result}\"", "    # Write your code here\n \
    \   local s=$1\n    local a=$s\n    local b=\"\"\n    local c=\"\"\n    local\
    \ n=0\n    local count=0\n    while [ $n -lt ${#a} ]; do\n        local m=${#a}\n\
    \        local i\n        local j\n        local k\n        local l\n        i=${a:0:m}\n\
    \        j=${a:$m:1}\n        k=${a:$m:3}\n        l=${a:$m:$m}\n        if [[\
    \ $i =~ [a-z] ]] ; then\n            b=$b${i}${j}${k}${l}\n        else\n    \
    \        b=$b${j}${i}${k}${l}\n        fi\n        n=$((n+1))\n    done\n    if\
    \ [[ ${#a} -gt 0 ]]; then\n        b=$b${a}\n    fi\n    echo $b", "    local\
    \ s=$1;\n    local result=\"\";\n    for i in $s\n    do\n        if [ \"$i\"\
    \ == \"$i\" ]\n        then\n            result=$result\"\"$i\n        else\n\
    \            result=$result\"\"${i/[a-z]/[A-Z]}\n        fi\n    done\n    echo\
    \ $result", "    if [ -z \"$1\" ]\n    then\n        return $(echo \"$1\")\n \
    \   fi\n\n    local s=$(echo \"$1\")\n    for i in $(seq 0 $((${#s}-1))); do\n\
    \        if [ \"${s:$i:1}\" == \"a\" ] || [ \"${s:$i:1}\" == \"b\" ] || [ \"${s:$i:1}\"\
    \ == \"c\" ] || [ \"${s:$i:1}\" == \"d\" ] || [ \"${s:$i:1}\" == \"e\" ] || [\
    \ \"${s:$i:1}\" == \"f\" ] || [ \"${s:$i:1}\" == \"g\" ] || [ \"${s:$i:1}\" ==\
    \ \"h\" ] || [ \"${s:$i:1}\" == \"i\" ] || [ \"${s:$i:1}\" == \"j\" ] || [ \"\
    ${s:$i:1}\" == \"k\" ] || [ \"${s:$i:1}\" == \"l\" ] || [ \"${s:$i:1}\" == \"\
    m\" ] || [ \"${s:$i:1}\" == \"n\" ] || [ \"${s:$i:1}\" == \"o\" ] || [ \"${s:$i:1}\"\
    \ == \"p\" ] || [ \"${s:$i:1}\" == \"q\" ] || [ \"${s:$i:1}\" == \"r\" ] || [\
    \ \"${s:$i:1}\" == \"s\" ] || [ \"${s:$i:1}\" == \"t\" ] || [ \"${s:$i:1}\" ==\
    \ \"u\" ] || [ \"${s:$i:1}\" == \"v\" ] || [ \"${s:$i:1}\" == \"w\" ] || [ \"\
    ${s:$i:1}\" == \"x\" ] || [ \"${s:$i:1}\" == \"y\" ] || [ \"${s:$i:1}\" == \"\
    z\" ]\n        then\n            s=${s// /$((${#s}-$i-1)))};\n        else\n \
    \           s=${s// /}\n        fi\n    done\n\n    echo \"$s\"", "  local string\
    \ s ret=$1\n  local i letter tmp\n  \n  for i in $(seq 0 ${#s})\n  do\n    letter=${s:$i:1}\n\
    \    if [ \"${letter}\" = \"a\" ] || [ \"${letter}\" = \"b\" ] || [ \"${letter}\"\
    \ = \"c\" ] || [ \"${letter}\" = \"d\" ] || [ \"${letter}\" = \"e\" ] || [ \"\
    ${letter}\" = \"f\" ] || [ \"${letter}\" = \"g\" ] || [ \"${letter}\" = \"h\"\
    \ ] || [ \"${letter}\" = \"i\" ] || [ \"${letter}\" = \"j\" ] || [ \"${letter}\"\
    \ = \"k\" ] || [ \"${letter}\" = \"l\" ] || [ \"${letter}\" = \"m\" ] || [ \"\
    ${letter}\" = \"n\" ] || [ \"${letter}\" = \"o\" ] || [ \"${letter}\" = \"p\"\
    \ ] || [ \"${letter}\" = \"q\" ] || [ \"${letter}\" = \"r\" ] || [ \"${letter}\"\
    \ = \"s\" ] || [ \"${letter}\" = \"t\" ] || [ \"${letter}\" = \"u\" ] || [ \"\
    ${letter}\" = \"v\" ] || [ \"${letter}\" = \"w\" ] || [ \"${letter}\" = \"x\"\
    \ ] || [ \"${letter}\" = \"y\" ] || [ \"${letter}\" = \"z\" ]\n    then\n    \
    \  if [ \"${letter}\" = \"a\" ]\n      then\n        letter=\"A\"\n      elif\
    \ [ \"${letter}\" = \"b\" ]\n      then\n        letter=\"B\"\n      elif [ \"\
    ${letter}\" = \"c\" ]\n      then\n        letter=\"C\"\n      elif [ \"${letter}\"\
    \ = \"d\" ]\n      then\n        letter=\"D\"\n      elif [ \"${letter}\" = \"\
    e\" ]\n      then\n        letter=\"E\"\n      elif [ \"${letter}\" = \"f\" ]\n\
    \      then\n        letter=\"F\"\n      elif [ \"${letter}\" = \"g\" ]\n    \
    \  then\n        letter=\"G\"\n      elif [ \"${letter}\" = \"h\" ]\n      then\n\
    \        letter=\"H\"\n      elif [ \"${letter}\" = \"i\" ]\n      then\n    \
    \    letter=\"I\"\n      elif [ \"${letter}\" = \"j\" ]\n      then\n        letter=\"\
    J\"\n      elif [ \"${letter}\" = \"k\" ]\n      then\n        letter=\"K\"\n\
    \      elif [ \"${letter}\" = \"l\" ]\n      then\n        letter=\"L\"\n    \
    \  elif [ \"${letter}\" = \"m\" ]\n      then\n        letter=\"M\"\n      elif\
    \ [ \"${letter}\" = \"n\" ]\n      then\n        letter=\"N\"\n      elif [ \"\
    ${letter}\" = \"o\" ]\n      then\n", "  local i s\n  s=$1\n  for ((i=0;i<${#s};i++));\
    \ do\n    local char\n    char=${s:$i:1}\n    if [[ \"$char\" =~ \"[a-zA-Z]\"\
    \ ]]; then\n      echo \"${char^^}\"\n    elif [[ \"$char\" =~ \"[0-9]\" ]]; then\n\
    \      echo \"${char^^}\"\n    else\n      echo \"$char\"\n    fi\n  done", " \
    \ local s=${1:-\"\"}\n  [[ \"$s\" =~ ([A-Za-z])$ ]] && echo \"${s^^}\" || echo\
    \ \"$s\"", "  # Your code goes here\n  echo $1 | tr A-Z a-z", "    [[ ! \"$1\"\
    \ =~ ^[a-zA-Z]+$ ]] && echo \"$1\" | tr '[:lower:]' '[:upper:]' >> /dev/null 2>&1\n\
    \    [[ ! \"$1\" =~ ^[a-zA-Z]+$ ]] && echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ >> /dev/null 2>&1\n    [[ ! \"$1\" =~ ^[a-zA-Z]+$ ]] && echo \"$1\" | tr '[:upper:]'\
    \ '[:upper:]' >> /dev/null 2>&1", "    echo \"Enter a string:\"\n    read string\n\
    \    \n    arr=( ${string//./ } )\n    \n    for i in \"${arr[@]}\"; do\n    \
    \    if [[ \"$i\" == [A-Za-z] ]]; then\n            case \"$i\" in\n         \
    \       [A-Z]* )\n                    echo \"$i\"\n                    ;;\n  \
    \              * ) echo \"$i\"\n                    ;; \n            esac\n  \
    \      else\n            echo \"$i\"\n        fi\n    done", "    local i j\n\
    \    local string\n    local result\n    # read a string from user\n    read string\n\
    \    # set string into array (1 by 1)\n    array=($string)\n    # initialize all\
    \ counter to 0\n    i=0\n    j=0\n    # traverse the string and reversed the case\n\
    \    for ((i=0; i<${#array[@]}; i++)); do\n        ((j++))\n        # check if\
    \ the character is a letter\n        if [[ $array[$i] =~ ([A-Z]) ]]; then\n  \
    \          # swap the case\n            array[$i]=$(tr A-Z a-z \"${array[$i]}\"\
    )\n            # remove the letter\n            array[$i]=${array[$i]:1}\n   \
    \     fi\n    done\n    # reconstruct the string and print the result\n    echo\
    \ -n \"${array[*]}\"", "  local line=${1:-} #local variable line\n  local reversed_line\n\
    \  local no_of_letters\n  local index\n\n  if [[ \"$line\" =~ \\A ]]; then #if\
    \ line is blank\n    echo ${line} #print line\n  else\n    no_of_letters=$(expr\
    \ length $line) #no of letters\n    index=0\n    while [[ $((index++)) -lt $no_of_letters\
    \ ]]; do \n      if [[ $((index)) -eq 0 ]]; then\n        reversed_line=${line:$index:1}\n\
    \      else\n        reversed_line=${line:$index:1}\n        reversed_line=${reversed_line^^}\
    \ #reverse the case\n      fi\n      line=${reversed_line}\n    done\n  fi\n \
    \ echo $line", "  local str=\"$1\"\n  local result=\"\"\n  local i \n  local letters\n\
    \n  while [[ ${#str} -gt 0 ]]; do\n    i=$(expr index \"$str\" \"[a-zA-Z]\")\n\
    \    if [[ ${i} -eq 0 ]]; then\n      result+=\"$(expr reverse \"$str\")\"\n \
    \     str=$result\n      break\n    fi\n    letters=\"$(expr split \"$str\" \"\
    ${str}\" \"${i}\")\"\n    if [[ \"${#letters}\" -ne 0 ]]; then\n      result+=\"\
    ${letters[0]}\"\n      if [[ \"${letters[*]}\" == \"${letters[0]}\" ]]; then\n\
    \        str=${letters[1]}\n      else\n        str=${letters[*]}\n      fi\n\
    \    else\n      result+=\"${str}\"\n      str=\"\"\n    fi\n  done\n\n  result+=\"\
    ${str}\"\n  echo ${result}", "  local str\n  local i flag\n  local res\n  str=$1\n\
    \  res=\"\"\n  flag=1\n  for i in $(echo $str | sed \"s/./&/g\"); do\n    case\
    \ \"$i\" in\n      [a-z])\n        if [ $flag -eq 1 ]; then\n          res=$res${i/a/b}\n\
    \          flag=0\n        else\n          res=$res${i//a/b}\n        fi\n   \
    \     ;;\n      [A-Z])\n        if [ $flag -eq 1 ]; then\n          res=$res${i/b/a}\n\
    \          flag=0\n        else\n          res=$res${i//b/a}\n        fi\n   \
    \     ;;\n      *)\n        res=$res$i\n        ;;\n    esac\n  done\n  echo \"\
    $res\"", "        local string=$1\n        local reversed_string=\"\"\n      \
    \  local i=${#string}\n        local last_char=\"${string[i]}\"\n        while\
    \ [ \"${string[i]}\" ]; do\n                local c=\"${string[i]}\"\n       \
    \         case \"${last_char}\" in\n                        [a-z]) c=\"${c:0:1}${c:1:1}${c:2:1}${c:3:1}${c:4:1}${c:5:1}\"\
    ;;\n                        [A-Z]) c=\"${c:0:1}${c:1:1}${c:2:1}${c:3:1}${c:4:1}${c:5:1}\"\
    ;;\n                        *) ;;\n                esac\n                reversed_string=\"\
    ${reversed_string}${c}\"\n                i=$(($i-1))\n                last_char=\"\
    ${string[i]}\"\n        done\n        echo \"${reversed_string}\"", "  local i\
    \ iRevLen iRevChar iLen iRev oLen iChar\n  local s=$1 iRevLen iRevChar iLen iRev\
    \ oLen iChar\n  iRevLen=$((${#s}-1))\n  iLen=$((${#s}))\n  iRev=$((${#iRevChar}))\n\
    \  oLen=$((${#s}))\n\n  if [ ${#s} -eq 0 ]\n  then\n    echo \"$s\"\n    return\n\
    \  fi\n\n  for (( i=1 ; i <= iRevLen ; i++ ))\n  do\n    iChar=$((${#s}-1))\n\
    \    iRevChar=$((${#iRevChar}))\n\n    # Reverse letter\n    if [[ $iChar -ge\
    \ 0 ]]\n    then\n      echo \"${s:$iChar}:${#iRevChar}${iRevChar:0:1}${#iRevChar}${iRevChar:1:1}${#iRevChar}${iRevChar:2:1}${#iRevChar}${iRevChar:3:1}${#iRevChar}${iRevChar:4:1}${#iRevChar}${iRevChar:5:1}${#iRevChar}${iRevChar:6:1}${#iRevChar}${iRevChar:7:1}\"\
    \n    else\n      echo \"${s:$iChar}:${#iRevChar}${iRevChar:0:1}${#iRevChar}${iRevChar:1:1}${#iRevChar}${iRevChar:2:1}${#iRevChar}${iRevChar:3:1}${#iRevChar}${iRevChar:4:1}${#iRevChar}${iRevChar:5:1}${#iRevChar}${iRevChar:6:1}${#iRevChar}${iRevChar:7:1}\"\
    \n    fi\n\n    # Remove character\n    if [[ $iLen -ge 1 ]]\n    then\n     \
    \ s=${s:0:$((${#s}-1))}\n      iLen=$((${#s}))\n    fi\n\n    # remove character\n\
    \    if [[ $iRevLen -ge 1 ]]\n    then\n      iRevLen=$((${#iRev", "    local\
    \ chars=$(echo \"$1\" | sed -e 's/[][@#-]//g')\n    local reverse=\"\"\n    for\
    \ char in $chars; do\n        case $char in\n            a)\n                reverse=$(echo\
    \ \"$reverse$char\" | tr '[:upper:]' '[:lower:]')\n                ;;\n      \
    \      b)\n                reverse=$(echo \"$reverse$char\" | tr '[:lower:]' '[:upper:]')\n\
    \                ;;\n            c)\n                reverse=$(echo \"$reverse$char\"\
    \ | tr '[:upper:]' '[:lower:]')\n                ;;\n            d)\n        \
    \        reverse=$(echo \"$reverse$char\" | tr '[:lower:]' '[:upper:]')\n    \
    \            ;;\n            e)\n                reverse=$(echo \"$reverse$char\"\
    \ | tr '[:upper:]' '[:lower:]')\n                ;;\n            f) \n       \
    \         reverse=$(echo \"$reverse$char\" | tr '[:lower:]' '[:upper:]')\n   \
    \             ;;\n            g) \n                reverse=$(echo \"$reverse$char\"\
    \ | tr '[:upper:]' '[:lower:]')\n                ;;\n            h) \n       \
    \         reverse=$(echo \"$reverse$char\" | tr '[:lower:]' '[:upper:]')\n   \
    \             ;;\n            i)\n                reverse=$(echo \"$reverse$char\"\
    \ | tr '[:upper:]' '[:lower:]')\n                ;;\n            j)\n        \
    \        reverse=$(echo \"$reverse$char\" | tr '[:lower:]' '[:upper:]')\n    \
    \            ;;\n            k) \n                reverse=$(echo \"$reverse$char\"\
    \ | tr '[:upper:]' '[:lower:]')\n                ;;\n            l) \n       \
    \         reverse=$(echo \"$reverse$char\" | tr '[:upper:]' '[:lower:]')\n   \
    \             ;;\n            m) \n                reverse=$(echo \"$reverse$char\"\
    \ | tr '[:lower:]' '[:upper:]')\n                ;;\n            n) \n       \
    \         reverse=$(echo \"$reverse$char\" | tr '[:upper:]' '[:lower:]')\n   \
    \             ;;\n            o) \n                reverse=$(echo \"$reverse$char\"\
    \ | tr '[:lower:]' '[:upper:]')\n                ;;\n            p) \n       \
    \         reverse=$(echo \"$reverse$char\" | tr '[:upper:]' '[:lower:]')\n   \
    \             ;;\n            q) \n                reverse=$(echo \"$reverse$char\"\
    \ | tr '[:lower:]' '[:upper:]')\n                ;;\n            r) \n       \
    \         reverse=$(echo \"$reverse$char\" | tr '[:upper:]' '[:lower:]')\n   \
    \             ;;\n            s) \n                ", "    read -r line\n    case\
    \ \"$line\" in\n        $([[ ${line:0:1} == \"#\" ]]); then \n            echo\
    \ \"${line#*#}\"\n        elif [[ ${line:0:1} == \"@\" ]]; then\n            echo\
    \ \"${line#*@}\"\n        fi\n        ;;\n        *)\n            echo \"$line\"\
    \n        ;;\n    esac", "    local str=\"$1\"\n    [[ $str == \"\" ]] && return\
    \ $str\n    local len=\"${#str}\"\n    local count=0\n    local result=\"\"\n\
    \    local index=0\n    for ((i = 0; i < ${#str}; i++));\n    do\n        local\
    \ curr=\"${str:$i:1}\"\n        [[ \"$curr\" =~ \\A ]] && curr=\"${BASH_REMATCH[1]}\"\
    \n        [[ \"$curr\" =~ \\z ]] && break\n        [[ \"$curr\" =~ ([a-z]) ]]\
    \ && curr=\"${BASH_REMATCH[1]^^}\"\n        [[ \"$curr\" =~ ([A-Z]) ]] && curr=\"\
    ${BASH_REMATCH[1]^^}\"\n        result=\"${result}${str:$index:1}\"\n        index=$((index+1))\n\
    \    done\n    result=\"${result}${str:$index:1}\"\n    echo \"$result\"", " \
    \   local str=$1\n    local slen=$#\n    local res=''\n    local c=''\n    local\
    \ i=0\n    while [ $i -lt $slen ]; do\n        local c=${str[i]}\n        case\
    \ $c in\n            [a-zA-Z]) c=$(echo \"$c\" | sed 's/a/\\U&/g' | sed 's/b/\\\
    L&/g') ;; \n            [a-zA-Z0-9]) c=$(echo \"$c\" | sed 's/a/\\L&/g' | sed\
    \ 's/b/\\U&/g') ;; \n            *) c=\"${str[i]}\"; \n        fi\n        res=\"\
    ${res}${c}\"\n        i=$((i+1))\n    done\n    res=\"${res}${str[$slen]}\"\n\
    \    res=\"${res//./\\\\}\"\n    res=\"${res//\\//\\\\/}\"\n    res=\"${res//&/\\\
    \\&}\"\n    res=\"${res//\\*/\\\\*/}\"\n    res=\"${res//\\?/\\\\?}\"\n    res=\"\
    ${res//\\@/\\\\@}\"\n    res=\"${res//\\$/\\\\$}\"\n    res=\"${res//\\#/\\\\\
    #}\"\n    res=\"${res//\\!/\\\\!}\"\n    res=\"${res//\\.\\/\\\\\\.\\/}\"\n  \
    \  res=\"${res//\\:\\/\\\\\\:\\/}\"\n    res=\"${res//\\;/\\\\;}\"\n    res=\"\
    ${res//\\/\\//\\\\\\/}\"\n    res=\"${res//\\^\\(\\)\\{4\\}/\\\\\\(\\)\\{4\\}\"\
    \n    res=\"${res//\\^\\(\\)\\{3\\}/\\\\\\(\\)\\{3\\}\"\n    res=\"${res//\\^\\\
    (\\)\\{2}\\}/\\\\\\(\\)\\{2}\\}\"\n    res=\"${res//\\^\\(\\)\\{1}\\}/\\\\\\(\\\
    )\\{1}\\}\"\n    res=\"${res//\\^\\(\\)\\{0}\\}/\\\\\\(\\)\\{0}\\}\"\n    res=\"\
    ${res//\\^/\\^\\}\"\n    res=\"${res//\\~/\\~}\"\n    res=\"${res//\\!/\\!}\"\n\
    \    res=\"${res//\\</\\<}\"\n    res=\"${res//\\>/\\>}\"\n    res=\"${res//\\\
    &/\\&}\"\n    res=\"${res//\\/\\//\\\\\\/}\"\n    res=\"${res//\\*\\/\\*\\}\"\n\
    \    res=\"${res//\\/\\*\\/\\/\"}\"", "    echo $1|tr [:lower:] [:upper:]|sed\
    \ 's/./\\L\\L/g;s/^./\\L/;s/\\L/\\L^/;s/$/\\n/'", "    local string=$1\n    if\
    \ [ -z \"$string\" ];then\n       return 0;\n    fi\n    for ((i=0; i < ${#string};\
    \ i++)); do\n        char=$(echo \"${string:i:1}\" | tr \"[A-Z]\" \"[a-z]\")\n\
    \        if [[ \"$char\" != \"\" ]]; then\n            char=$(echo \"${string:i:1}\"\
    \ | tr \"[a-z]\" \"[A-Z]\")\n            string=${string:0:i} $char ${string:i+1}\n\
    \        fi\n    done\n    echo \"$string\"", "  local i tmp res str\n  local\
    \ -i len=$((${#1}-1))\n  local letters alpha upper\n  local -a result\n  local\
    \ chars count char\n  \n  result=()\n  \n  while (( $len > 0 ))\n  do\n    chars=${1:$len}\n\
    \    \n    alpha=(${chars//[A-Z]/})\n    \n    upper=(${chars//[a-z]/})\n    \n\
    \    if (( $#alpha == 0 ))\n    then\n      upper=${upper//[!A-Z]/}\n      result+=(${upper//[@]})\
    \ \n      \n    elif (( $#upper == 0 ))\n    then\n      alpha=${alpha//[!a-z]/}\n\
    \      result+=(${alpha//[@]}) \n      \n    else\n      result+=(${alpha//[@]})\
    \ \n      result+=(${upper//[@]}) \n      \n    fi\n    \n    len=$(( $len - 1\
    \ ))\n  done\n  \n  printf \"%s\" \"${result[@]}\"\n  ", "    local var\n    var=$(echo\
    \ $1 | sed -e 's/./&\\n/g')\n    local n\n    local i\n    n=$(echo $var | wc\
    \ -l)\n    local a\n    a=$((${#var}+1))\n    local b\n    b=$((${#var}-1))\n\
    \    local c\n    c=$((${#var}-1))\n    local d\n    d=$((${#var}-3))\n    local\
    \ e\n    e=$((${#var}-2))\n    local f\n    f=$((${#var}-1))\n    local g\n  \
    \  g=$((${#var}-2))\n    local h\n    h=$((${#var}-3))\n    local m\n    m=$((${#var}-5))\n\
    \    local n\n    n=$((${#var}-3))\n    local p\n    p=$((${#var}-4))\n    local\
    \ q\n    q=$((${#var}-6))\n    local r\n    r=$((${#var}-4))\n    local s\n  \
    \  s=$((${#var}-6))\n    local t\n    t=$((${#var}-3))\n    local u\n    u=$((${#var}-4))\n\
    \    local v\n    v=$((${#var}-4))\n    local w\n    w=$((${#var}-5))\n    local\
    \ x\n    x=$((${#var}-3))\n    local y\n    y=$((${#var}-4))\n    local z\n  \
    \  z=$((${#var}-5))\n    local A\n    A=$((${#var}-4))\n    local B\n    B=$((${#var}-5))\n\
    \    local C\n    C=$((${#var}-6))\n    local D\n    D=$((${#var}-5))\n    local\
    \ E\n    E=$((${#var}-6))\n    local F\n    F=$((${#var}-7))\n    local G\n  \
    \  G=$((${#var}-6))\n    local H\n    H=$((${#var}-5))\n    local I\n    I=$((${#var}-5))\n\
    \    local J\n    J=$((${#var}-6))\n    local K\n    K=$((${#var}-5))\n    local\
    \ L\n    L=$((${#var}-6))\n    local M\n    M=$((${#var}-6))\n    local N\n  \
    \  N=$((${#var", "    string=$1\n    letters=$(echo $string | sed -e 's/./ /g'\
    \ | sed -e 's/ /\\n/g')\n    letters=$(echo $letters | sed -e 's/ /\\n/g' | sed\
    \ -e 's/./\\U&/g')\n    letters=$(echo $letters | sed -e 's/ /\\n/g' | sed -e\
    \ 's/./\\E&/g')\n    letters=$(echo $letters | sed -e 's/ /\\n/g')\n    letters=$(echo\
    \ $letters | sed -e 's/./\\E&/g')\n    letters=$(echo $letters | sed -e 's/ /\\\
    n/g' | sed -e 's/./\\U&/g')\n    letters=$(echo $letters | sed -e 's/./\\E&/g')\n\
    \    letters=$(echo $letters | sed -e 's/ /\\n/g')\n    letters=$(echo $letters\
    \ | sed -e 's/./\\E&/g')\n    letters=$(echo $letters | sed -e 's/ /\\n/g' | sed\
    \ -e 's/./\\U&/g')\n    letters=$(echo $letters | sed -e 's/./\\E&/g')\n    letters=$(echo\
    \ $letters | sed -e 's/ /\\n/g')\n    letters=$(echo $letters | sed -e 's/./\\\
    E&/g')\n    letters=$(echo $letters | sed -e 's/ /\\n/g' | sed -e 's/./\\U&/g')\n\
    \    letters=$(echo $letters | sed -e 's/./\\E&/g')\n    letters=$(echo $letters\
    \ | sed -e 's/ /\\n/g')\n    letters=$(echo $letters | sed -e 's/./\\E&/g')\n\
    \    letters=$(echo $letters | sed -e 's/ /\\n/g' | sed -e 's/./\\U&/g')\n   \
    \ letters=$(echo $letters | sed -e 's/./\\E&/g')\n    letters=$(echo $letters\
    \ | sed -e 's/ /\\n/g')\n    letters=$(echo $letters | sed -e 's/./\\E&/g')\n\
    \    letters=$(echo $letters | sed -e 's/ /\\n/g' | sed -e 's/./\\U&/g')\n   \
    \ letters=$(echo $letters | sed -e 's/./\\E&/g')\n    letters=$(echo $letters\
    \ | sed -e 's/ /\\n/g')\n    letters=$(echo $letters | sed -e 's/./", "    local\
    \ IFS=$'\\n'\n    local i a b c\n    local -a arr result\n    arr=( $1 )\n   \
    \ IFS=\"\"\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        a=$(echo \"${arr[i]}\"\
    \ | awk '{print tolower($0)}')\n        if [[ \"${arr[i]}\" =~ ^[[:alpha:]]+$\
    \ ]]; then\n            b=$(echo \"${arr[i]}\" | awk '{print toupper($0)}')\n\
    \            result=( ${result[@]} \"$c$a$b\" )\n            c=\"\"\n        else\n\
    \            c=\"${arr[i]}\"\n        fi\n    done\n    result=( ${result[@]}\
    \ \"$c\" )\n    printf \"%s\\n\" \"${result[@]}\"", "  local s\n\n  s=\"$1\"\n\
    \n  echo \"$s\" | grep -Po '[a-z]+' > /dev/null\n  echo $?\n  if [ \"$?\" == \"\
    0\" ]; then\n    echo \"$s\" | grep -Po '[a-z]+' | tr A-Z a-z | sed \"s/^/${s:0:1}/\"\
    \ | sed \"s/$/${s:-1:1}/\"\n  else\n    echo \"$s\" | tr A-Z a-z\n  fi", "   \
    \ local string=$1\n    local len=$((${#string} - 1))\n    local count=$((${#string}\
    \ + 1))\n    local i\n    local res\n    local char\n    local temp\n\n    temp=$(echo\
    \ $string | tr \"[:upper:]\" \"[:lower:]\")\n    while [[ $temp != \"\" ]]\n \
    \   do\n        char=${temp,,}\n        res=\"${res}${char,,}\"\n        temp=$(echo\
    \ $string | tr \"[:lower:]\" \"[:upper:]\")\n    done\n\n    char=${res,,}\n \
    \   while [[ $char != \"\" ]]\n    do\n        echo $char\n        char=${res,,}\n\
    \    done", '    echo "$1"|grep -P "^[a-z]$|^[A-Z]$"|sed -e "s/^\([a-z]\)$/\U&/g"
    -e "s/^[A-Z]\([a-z]\)$/\L&/g"|sed -e "s/^[a-z]\([A-Z]\)$/\L&/g"', "    local input_string=$1\n\
    \    local output_string=\"\"\n    if [[ $input_string == \"\" ]]; then\n    \
    \    echo \"empty input\"\n        return ${output_string}\n    fi\n    local\
    \ current_char\n    for current_char in ${input_string}; do\n        if [[ $current_char\
    \ == [A-Z] ]]; then\n            local lower_char=${current_char^^}\n        \
    \    output_string=\"${output_string} ${lower_char}\"\n        elif [[ $current_char\
    \ == [a-z] ]]; then\n            local upper_char=${current_char^^}\n        \
    \    output_string=\"${output_string} ${upper_char}\"\n        fi\n    done\n\
    \    if [[ $output_string == \"\" ]]; then\n        echo \"no letters\"\n    else\n\
    \        echo $output_string\n    fi", " local str=\"$1\"\n str=\"${str//[^a-zA-Z]/.}\"\
    \n local i char flag=false\n local temp\n\n for ((i=0; i<${#str}; i++)); do\n\
    \   char=\"${str:$i:1}\"\n   if [[ \"$char\" == [a-zA-Z] ]]; then\n     temp=\"\
    ${str:$i:1}\"\n     char=\"${temp^^}\"\n     flag=true\n   fi\n   if [ \"$flag\"\
    \ = false ]; then\n     str=\"${str}/${char}\"\n     flag=true\n   fi\n done\n\
    \ str=\"${str//.//}\"\n echo \"$str\"", "  declare -i i length=${#1};\n  declare\
    \ -a ans=($(awk \"{print toupper($0)}\" <<< \"${1:0:length}\"));\n  \n  for ((\
    \ i = 0; i < length; i++)) {\n    if [ \"${ans[i]}\" = \"${1:i:1}\" ] || [ \"\
    ${ans[i]}\" = \"${1:i:length}\" ];\n    then\n      ans[i]=$(echo \"${ans[i]}\"\
    \ | sed -e \"s/\\(.*\\)\\(.*\\)/\\U\\2\\L/\\U\\1\\L/\");\n    fi\n  }\n  echo\
    \ ${ans[*]};", "    # Your code here\n    local res\n    if [[ $1 == *[a-z] ]];\
    \ then \n        res=${1^^}\n        echo ${res:0:1}${res:1}\n    elif [[ $1 ==\
    \ *[0-9] ]]; then \n        res=${1^^}\n        echo ${res:0:1}${res:1}\n    elif\
    \ [[ $1 == *[A-Z] ]]; then \n        res=${1^^}\n        echo ${res:0:1}${res:1}\n\
    \    else\n        res=${1^^}\n        echo ${res}\n    fi", "    local i result\n\
    \    local -r string=$1\n    local -r letter\n    \n    # Check for empty string\n\
    \    [ -z \"${string}\" ] && return 1\n    \n    # Check if it is only 1 character\n\
    \    [ \"${#string}\" -eq 1 ] && string=${string#?}\n    \n    # Loop through\
    \ all characters in the string\n    for (( i=0; i < ${#string}; i++ )); do\n \
    \       # Save letter in variable and check if it a letter\n        letter=\"\
    ${string:$i:1}\"\n        [ \"${letter}\" -eq ${letter:0:1} ] && letter=${letter#?}\n\
    \        # Check if it is a letter\n        [ -z \"${letter}\" ] && letter=$letter\n\
    \    done\n    \n    # Check if it is only 1 character\n    [ \"${#letter}\" -eq\
    \ 1 ] && letter=${letter#?}\n    \n    if [ \"${letter}\" != \"\" ]; then\n  \
    \      # Convert to uppercase letter\n        letter=$(echo \"${letter}\" | tr\
    \ '[:upper:]' '[:lower:]')\n        # Convert to lowercase\n        letter=$(echo\
    \ \"${letter}\" | tr '[:lower:]' '[:upper:]')\n    else\n        # Convert to\
    \ lowercase letter\n        letter=$(echo \"${letter}\" | tr '[:lower:]' '[:upper:]')\n\
    \        # Convert to uppercase\n        letter=$(echo \"${letter}\" | tr '[:upper:]'\
    \ '[:lower:]')\n    fi\n    \n    # Remove the first letter of the string\n  \
    \  string=${string#?}\n    \n    # Return resulted string\n    echo \"${letter}${string}\"",
  "  local s=$1\n  local i\n  local j\n  local new_string\n  local char_array\n\n\
    \  # If s contains only digits, return s\n  if [[ $s =~ [0-9] ]]; then\n    echo\
    \ \"$s\"\n  else\n    char_array=(\"$s\")\n    # Loop over char_array\n    for\
    \ i in \"${char_array[@]}\"; do\n      if [[ \"$i\" =~ [a-z] ]]; then\n      \
    \  echo \"$i\"\n      else\n        echo \"${i^^}\"\n      fi\n    done\n  fi",
  "    echo \"$1\" | tr '[A-Z]' '[a-z]' |\n    grep -q '^[a-z]*$' && echo \"$1\" |\
    \ tr '[a-z]' '[A-Z]' |\n    grep -q '^[A-Z]*$' && echo \"$1\" | tr '[A-Z]' '[a-z]'\
    \ |\n    tr '[a-z]' '[A-Z]' |\n    tr '[A-Z]' '[a-z]'", "    local -r s=\"${1}\"\
    \n    local -r res\n    local -r letter\n    local -i start\n    local -i end\n\
    \    res=\"${s}\"\n    for ((start = 0; start < ${#s}; start++)); do\n       \
    \ letter=\"${s:$start:1}\"\n        if [[ \"${letter}\" == [a-z] ]]; then\n  \
    \          end=\"${start}${#letter}\"\n            res=\"${s:0:$start}${letter^^}${s:$end}\"\
    \n        fi\n    done\n    echo \"${res}\"", "    if [[ ${#} -eq 0 ]]; then\n\
    \        echo \"You didn't provide an argument.\"\n        echo \"Please provide\
    \ an argument to solve function\"\n        exit 1\n    fi\n    local str\n   \
    \ local result\n    str=$1\n    local i\n    local j\n    local num\n    local\
    \ lower\n    local upper\n    local letter\n    local temp\n    local temp1\n\
    \    lower=0\n    upper=0\n    temp=\"\"\n    temp1=\"\"\n    for (( i = 0; i\
    \ < ${#str}; i++ )); do\n        letter=${str:$i:1}\n        num=\"${#letter}\"\
    \n        if [[ $num -gt 0 ]]; then\n            lower=$(( lower + num - 1))\n\
    \            upper=$(( upper + num))\n        fi\n    done\n    for i in $(seq\
    \ 0 $lower); do\n        letter=${str:$i:1}\n        lower=${letter:0:1}\n   \
    \     temp=${temp}${lower}\n    done\n    for i in $(seq 0 $upper); do\n     \
    \   letter=${str:$i:1}\n        upper=${letter:1:1}\n        temp1=$temp1${upper}\n\
    \    done\n    result=\"${temp}${temp1}\"\n    echo ${result}", "    local s\n\
    \    s=\"$1\"\n    case \"$s\" in\n        \"a\" ) s=$(echo \"$s\" | sed \"y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/\"\
    );;\n        \"b\" ) s=$(echo \"$s\" | sed \"y/abcdefghijklmnopqrstuvwxyz/bcdefghijklmnopqrstuvwxyz/\"\
    );;\n        \"c\" ) s=$(echo \"$s\" | sed \"y/abcdefghijklmnopqrstuvwxyz/BCDFGHIJKLMNOPQRSTUVWXYZ/\"\
    );;\n        \"d\" ) s=$(echo \"$s\" | sed \"y/abcdefghijklmnopqrstuvwxyz/dbcdefghijklmnopqrstuvwxyz/\"\
    );;\n        \"e\" ) s=$(echo \"$s\" | sed \"y/abcdefghijklmnopqrstuvwxyz/DEfghijklmnopqrstuvwxyz/\"\
    );;\n        \"f\" ) s=$(echo \"$s\" | sed \"y/abcdefghijklmnopqrstuvwxyz/fghijklmnopqrstuvwxyz/\"\
    );;\n        \"g\" ) s=$(echo \"$s\" | sed \"y/abcdefghijklmnopqrstuvwxyz/ghijklmnopqrstuvwxyz/\"\
    );;\n        \"h\" ) s=$(echo \"$s\" | sed \"y/abcdefghijklmnopqrstuvwxyz/Hijklmnopqrstuvwxyz/\"\
    );;\n        \"i\" ) s=$(echo \"$s\" | sed \"y/abcdefghijklmnopqrstuvwxyz/Iijklmnopqrstuvwxyz/\"\
    );;\n        \"j\" ) s=$(echo \"$s\" | sed \"y/abcdefghijklmnopqrstuvwxyz/Jijklmnopqrstuvwxyz/\"\
    );;\n        \"k\" ) s=$(echo \"$s\" | sed \"y/abcdefghijklmnopqrstuvwxyz/Kijklmnopqrstuvwxyz/\"\
    );;\n        \"l\" ) s=$(echo \"$s\" | sed \"y/abcdefghijklmnopqrstuvwxyz/Lijklmnopqrstuvwxyz/\"\
    );;\n        \"m\" ) s=$(echo \"$s\" | sed \"y/abcdefghij", "    local s=$1\n\
    \    local sTemp i\n    s=${s//[!A-Z]/}\n    echo ${#s}\n    echo ${s#?}\n   \
    \ if [[ $s == \"\" ]]; then\n        echo ${s//[0-9]}\n    else\n        sTemp=\"\
    \"\n        for ((i = 0; i < (${#s});i++)); do\n            if [[ $i == 0 ]];\
    \ then\n                sTemp=\"${s//[0-9]}${sTemp//[0-9]/}\"\n            else\n\
    \                sTemp=\"${s//[0-9]}${sTemp//[0-9]/}\"\n            fi\n     \
    \   done\n        echo ${sTemp}\n    fi", "  local str=$1\n  local result=$2\n\
    \  result=$result\n\n  for i in $str; do\n    if [ \"$i\" == \"A\" ]; then result=$(echo\
    \ \"$result\" | tr \"a\" \"A\"); fi\n    if [ \"$i\" == \"a\" ]; then result=$(echo\
    \ \"$result\" | tr \"A\" \"a\"); fi\n    if [ \"$i\" == \"B\" ]; then result=$(echo\
    \ \"$result\" | tr \"b\" \"B\"); fi\n    if [ \"$i\" == \"b\" ]; then result=$(echo\
    \ \"$result\" | tr \"B\" \"b\"); fi\n    if [ \"$i\" == \"C\" ]; then result=$(echo\
    \ \"$result\" | tr \"c\" \"C\"); fi\n    if [ \"$i\" == \"c\" ]; then result=$(echo\
    \ \"$result\" | tr \"C\" \"c\"); fi\n    if [ \"$i\" == \"D\" ]; then result=$(echo\
    \ \"$result\" | tr \"d\" \"D\"); fi\n    if [ \"$i\" == \"d\" ]; then result=$(echo\
    \ \"$result\" | tr \"D\" \"d\"); fi\n    if [ \"$i\" == \"E\" ]; then result=$(echo\
    \ \"$result\" | tr \"e\" \"E\"); fi\n    if [ \"$i\" == \"e\" ]; then result=$(echo\
    \ \"$result\" | tr \"E\" \"e\"); fi\n    if [ \"$i\" == \"F\" ]; then result=$(echo\
    \ \"$result\" | tr \"f\" \"F\"); fi\n    if [ \"$i\" == \"f\" ]; then result=$(echo\
    \ \"$result\" | tr \"F\" \"f\"); fi\n    if [ \"$i\" == \"G\" ]; then result=$(echo\
    \ \"$result\" | tr \"g\" \"G\"); fi\n    if [ \"$i\" == \"g\" ]; then result=$(echo\
    \ \"$result\" | tr \"G\" \"g\"); fi\n    if [ \"$i\" == \"H\" ]; then result=$(echo\
    \ \"$result\" | tr \"h\" \"H\"); fi\n    if [ \"$i\" == \"h\" ]; then result=$(echo\
    \ \"$result\" | tr \"H\" \"h\"); fi\n    if [ \"$i\" == \"I\" ]; then result=$(echo\
    \ \"$result\" | tr \"i\" \"I\"); fi\n    if [ \"$i\" == \"i\" ]; then result=$(echo\
    \ \"$result\" | tr \"I\" \"i\"); fi\n    if [ \"$i\" == \"J\" ]; then result=$(echo\
    \ \"$result\" | tr \"j\" \"J\"); fi\n    if [ \"$i\" == \"j\" ]; then result=$(echo\
    \ \"$result\" | tr \"J\" \"j\"); fi\n    if [ \"$i\" == \"K\" ]; then result=$(echo\
    \ \"$result\" | tr \"k\" \"K\"); fi\n    if [ \"$i\" == \"", "    # Write your\
    \ code here\n    string=\"$1\"\n    first=\"${string%%[^a-zA-Z0-9]}\";\n    second=\"\
    ${string##*[^a-zA-Z0-9]}\";\n    if [ \"${first}\" != \"\" ]; then\n        first=$(echo\
    \ \"${first^^}\" | tr [:lower:] [:upper:])\n    else\n        first=$(echo \"\
    ${first^^}\" | tr [:upper:] [:lower:])\n    fi\n    if [ \"${second}\" != \"\"\
    \ ]; then\n        second=$(echo \"${second^^}\" | tr [:lower:] [:upper:])\n \
    \   else\n        second=$(echo \"${second^^}\" | tr [:upper:] [:lower:])\n  \
    \  fi\n    echo \"${first}${second}\"", "        IFS=\n        while read line;\
    \ do\n                arr=($line)\n                for ((i=0; $i -lt ${#arr[*]};));\
    \ do\n                        if [[ ${arr[$i]} =~ ^[a-z]$ ]]; then\n         \
    \                       arr[$i]=$(tr '[:lower:]' '[:upper:]' <<< ${arr[$i]})\n\
    \                        elif [[ ${arr[$i]} =~ ^[A-Z]$ ]]; then\n            \
    \                    arr[$i]=$(tr '[:upper:]' '[:lower:]' <<< ${arr[$i]})\n  \
    \                      else\n                                arr[$i]=${arr[$i]}\n\
    \                        fi\n                done\n                echo ${arr[@]}\n\
    \        done", "    # your code here\n    s=${1:-$1}\n    if [[ ${#s} -eq 0 ]];then\n\
    \        echo \"$s\"\n        return $s\n    fi\n    for i in $s;do\n        case\
    \ \"${i:0:1}\" in\n            A)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            B)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            C)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            D)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            E)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            F)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            G)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            H)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            I)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            J)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            K)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            L)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            M)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            N)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            O)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            P)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            Q)\n                echo \"${i:0:1}${i:1:1}${i:2:1}${i:3:1}\"\
    \n                ;;\n            R)\n                echo \"${i:0:1}${i:1:1}${i:",
  "  local str=$1\n  local len=${#str}\n  if [ ${len} -eq 0 ]\n  then\n    echo \"\
    no letters\"\n    return\n  fi\n  \n  local rev\n  if [ $len -gt 0 ] && [ ${str:0:1}\
    \ == \"#\" ];\n  then\n    rev=${str:1}\n    \n    local newstr\n    while [ ${#rev}\
    \ -ge 1 ];\n    do\n      newstr=${rev:0:1}\n      rev=${rev:1:1}\n    \n    \
    \  if [[ $newstr == \"#\" ]]\n      then\n        newstr=\"A\"\n      elif [[\
    \ $newstr == \"A\" ]]\n      then\n        newstr=\"#\"\n      fi\n      \n  \
    \    rev=\"$newstr$rev\"\n    done\n    \n    echo \"$newstr$rev\"\n  else\n \
    \   echo ${str:0:1}\n  fi", "    # write your code here\n\tlen=${#1}\n\ti=1\n\t\
    while [[ $i -lt $len ]]\n\tdo\n\t\ttemp=${1:i:1}\n\t\tif [[ \"$temp\" =~ ^[a-z]*$\
    \ ]]; then\n\t\t\techo ${temp,,}\n\t\telse\n\t\t\techo ${temp,,}\n\t\tfi\n\t\t\
    i=$((i+1))\n\tdone"]
stop_tokens:
- "\n}"
