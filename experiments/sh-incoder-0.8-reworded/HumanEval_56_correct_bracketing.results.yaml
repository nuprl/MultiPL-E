language: sh
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local opening_brackets=\"$1\"\
    \n    local closing_brackets=\"\"\n    for opening_bracket in $opening_brackets;\
    \ do\n        local closing_bracket=\"${opening_bracket}${opening_bracket:1}\"\
    \n        if [ \"$closing_bracket\" = \"$opening_bracket\" ] && [ \"${closing_bracket:0:1}\"\
    \ = \"<\" ] && [ \"${closing_bracket:0:1}\" = \">\" ]; then\n            closing_brackets=\"\
    $closing_bracket$closing_bracket\"\n        fi\n    done\n\n    if [ \"$closing_brackets\"\
    \ ]; then\n        echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\
    \ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"${1:-\"\"}\"\n\
    \  echo \"$brackets\" | grep -q '<\\>'\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: -1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n\tlocal brackets=$1\n\twhile read\
    \ -r line; do\n\t\ti=0\n\t\tfor bracket in $brackets; do\n\t\t\ti=1\n\t\t\twhile\
    \ [[ ${line:$i} = $bracket ]];\n\t\t\tdo\n\t\t\t\tif [[ \"${line:i:1}\" != \"\
    >\" ]]; then\n\t\t\t\t\techo \"false\"\n\t\t\t\t\treturn 1\n\t\t\t\tfi\n\t\t\t\
    \ti=$(( i + 1 ))\n\t\t\tdone\n\t\tdone\n\tdone\n\techo \"true\"\n\treturn 0\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=13 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=5 encoding='utf-8'>
  timestamp: 1660056084
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n\tlocal brackets=\"$1\"\n\n\tlocal\
    \ opening_count=0\n\tlocal closing_count=0\n\n\tfor c in $brackets\n\tdo\n\t\t\
    [ $closing_count -gt 0 ]\n\t\tdo\n\t\t\t[ $opening_count -gt 0 ]\n\t\t\tdo\n\t\
    \t\t\t[ \"$c\" == \"<\" ] && [ $closing_count -eq 0 ]\n\t\t\t\t[ \"$c\" == \"\
    >\" ] && [ $opening_count -eq 0 ]\n\t\t\t\t[ \"$c\" == \"<=\" ] && [ $closing_count\
    \ -ge 1 ]\n\t\t\t\t[ \"$c\" == \">=\" ] && [ $opening_count -ge 1 ]\n\t\t\t\t\
    [ \"$c\" == \"<<\" ] && [ $opening_count -le 2 ]\n\t\t\t\t[ \"$c\" == \">>\" ]\
    \ && [ $closing_count -le 2 ]\n\t\t\t\t[ \"$c\" == \"<<<\" ] && [ $opening_count\
    \ -le 3 ]\n\t\t\t\t[ \"$c\" == \">>>\" ] && [ $closing_count -le 3 ]\n\t\t\t\t\
    [ \"$c\" == \"<%\" ] && [ $closing_count -ge 2 ]\n\t\t\t\t[ \"$c\" == \"%>\" ]\
    \ && [ $opening_count -ge 2 ]\n\t\t\t\t[ \"$c\" == \"%:\" ] && [ $opening_count\
    \ -le 2 ]\n\t\t\t\t[ \"$c\" == \":>\" ] && [ $closing_count -le 2 ]\n\t\t\t\t\
    [ \"$c\" == \">%\" ] && [ $opening_count -ge 3 ]\n\t\t\t\t[ \"$c\" == \":%\" ]\
    \ && [ $opening_count -le 3 ]\n\t\t\t\t[ \"$c\" == \":%\" ] && [ $closing_count\
    \ -ge 3 ]\n\t\t\t\t[ \"$c\" == \":%>\" ] && [ $opening_count -le 4 ]\n\t\t\t\t\
    [ \"$c\" == \"%:%>\" ] && [ $closing_count -le 4 ]\n\t\t\t\t[ \"$c\" == \"%%>\"\
    \ ] && [ $opening_count -ge 4 ]\n\t\t\t\t[ \"$c\" == \"%%:%>\" ] && [ $closing_count\
    \ -ge 4 ]\n\t\t\t\t[ \"$c\" == \"\" ] && [ $opening_count -ge 5 ]\n\t\t\t\t[ \"\
    $c\" == \"%\" ] && [ $opening_count -le 5 ]\n\t\t\t\t[ \"$c\" == \"<\" ] && [\
    \ $opening_count -le 5 ]\n\t\t\t\t[ \"$c\" == \">\" ] && [ $closing_count -le\
    \ 5 ]\n\t\t\t\t[ \"$c\" == \">=\" ] && [ $opening_count -le 5 ]\n\t\t\t\t[ \"\
    $c\" == \"<=\" ] && [ $closing_count -ge 5 ]\n\t\t\t\t[ \"$c\" == \"<<\" ] &&\
    \ [ $opening_count -ge 6 ]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmpq4kyds3a.sh: line 23: syntax error near unexpected token `do'\n\
    /tmp/tmpq4kyds3a.sh: line 23: `\t\tdo'\n"
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"${1:-}\"\n \
    \   local opening=\"<\"\n    local closing=\">\"\n    local result # To hold the\
    \ result\n    while [[ $brackets =~ (?<=([$opening]*[$closing]?|[$closing]*[$opening]?|[$opening]*))($opening|$closing)\
    \ ]]; do\n        result=$(expr \"0\" \\+ ${BASH_REMATCH[1]} > 1)\n        if\
    \ [[ $result -eq 1 ]]; then\n            result=0\n            break\n       \
    \ fi\n        brackets=${BASH_REMATCH[2]}\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets\n    brackets=\"\
    $1\"\n    # find all pairs of brackets\n    while IFS=\"<\" read -r left right;\
    \ do\n        if [[ \"$left\" = \"$right\" ]]; then\n            echo \"false\"\
    \n            return\n        fi\n    done <<< \"$brackets\"\n    echo \"true\"\
    \n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local bracket_count=0\n  local\
    \ bracket_string=\"${1}\"\n  local opening_brackets=\"()[]{}\"\n  local closing_brackets=\"\
    {}<>\"\n  local bracket_symbol\n  for bracket_symbol in \"${opening_brackets}\"\
    ; do\n    bracket_count=$((bracket_count+${#bracket_string} -${#bracket_symbol}\
    \ ))\n  done\n  if (( $bracket_count > 0 )); then\n    echo -n \"$(bracket_symbol\
    \ is $(bracket_count) brackets long)\"\n  else\n    echo \"true\"\n  fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpeeah8d7q.sh: line 24: bracket_count: command not found

    /tmp/tmpeeah8d7q.sh: line 24: bracket_symbol: command not found

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    if [[ \"$1\" =~ ^<(.*) ]]; then\n\
    \        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpazzn3q4i.sh: line 15: .: ..: is a directory

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: -1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ correct=$(grep -n \"^[^\\$]*\\$\" <(\n        sed \"s/^\\(\\<.*\\)>/\\1/g\"\n\
    \    ))\n    echo $(($correct > $brackets))\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=16 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660056084
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local i=2\n\
    \  local ins=\"\"\n  local n=0\n  while [[ $brackets =~ ([^<]>[^<]+) ]]; do\n\
    \    ((++n))\n    ins=\"${BASH_REMATCH[1]}\"\n    ins=\"${ins// /$brackets}\"\n\
    \    ins=\"${ins//</\\$brackets}\"\n    ins=\"${ins//>/\\$brackets}\"\n    ins=\"\
    ${ins//\\//\\$brackets}\"\n    ((i--))\n  done\n  if ((${n} == 0)); then\n   \
    \ echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: -1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local\
    \ i cur=$(brackets <<< \"<<<\")\n  local ok=1\n\n  until [ $cur -eq 0 ]; do\n\
    \    i=$(brackets <<< \"$cur\")\n    local eq=$((i-1))\n    if [ \"$cur\" == \"\
    <$eq>\" ]; then\n      ok=0\n    fi\n    cur=$i\n  done\n\n  echo \"$ok\"\n}\n\
    \ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=10 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=26 encoding='utf-8'>
  timestamp: 1660056084
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ opens=()\n    local closes= ()\n    local i\n    local j\n\n    for  ((i=0;\
    \ i<${#brackets}; i++)); do\n        if [[ ${brackets:i:i:1} == \"<\" ]]; then\n\
    \            opens+=(${brackets:i:i:1})\n        else\n            closes+=(${brackets:i:i:1})\n\
    \        fi\n    done\n    for  ((i=0; i<${#opens}; i++)); do\n        j=0\n \
    \       for  ((j=0; j<${#closes}; j++)); do\n            if  [[ ${opens:i:i:1}\
    \ == ${closes:j:j:1} ]]; then\n                break\n            fi\n       \
    \     j=$((j+1))\n        done\n        if [[ ${j} == ${#closes} ]]; then\n  \
    \          return 1\n        fi\n    done\n    return 0\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpven7xut9.sh: line 17: syntax error near unexpected token `(''

    /tmp/tmpven7xut9.sh: line 17: `    local closes= ()''

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n\n  # empty\
    \ brackets strings are accepted\n  if [[ \"${brackets}\" == \"\" ]]; then\n  \
    \  echo \"true\"\n    return 0\n  fi\n\n  # a non-empty string is also accepted\n\
    \  if [[ \"${brackets}\" != *\"<\"* ]]; then\n    echo \"false\"\n    return 1\n\
    \  fi\n\n  # the brackets in the string are all closed\n  for bracket in $(echo\
    \ $brackets | cut -c1- | sed 's/</>/')\n  do\n    if [[ \"${bracket}\" != *\"\
    $brackets\"* ]]; then\n      echo \"false\"\n      return 1\n    fi\n  done\n\
    \  echo \"true\"\n  return 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n\techo $1 |grep '<' | grep -Eo '>'\
    \ | sed 's/>//g' |grep -v '^$' | cut -d '>' -f1 | grep '<' | grep -Eo '^>' | cut\
    \ -d '<' -f1 | wc -l | tr -d ' '\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets\n  brackets=$(($1-\"\
    <\"))\n  [[ -z \"$brackets\" ]] && return 1\n  local open_brackets=$(echo $brackets\
    \ | sed 's/<\\|<|>\\|>/>/g')\n  local bracket_count=0\n  for c in $open_brackets\n\
    \  do\n    [[ \"$c\" == \\> ]] && return 0\n    (( bracket_count++ ))\n  done\n\
    \  [[ $bracket_count -eq 0 ]] && return 1\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpttcehrr3.sh: line 16: <>-<: syntax error: operand expected (error
    token is "<>-<")

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: -1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n\tlocal brackets=$1\n\twhile read\
    \ line; do\n\t\t[[ $line =~ $brackets ]] && return 0\n\tdone\n\treturn 1\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=30 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=28 encoding='utf-8'>
  timestamp: 1660056084
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local open_brackets=$1\n    local\
    \ close_brackets=$2\n    for (( i=0; i < ${#open_brackets}; i++ )); do\n     \
    \   if [[ $open_brackets[$i] != $close_brackets[$i] ]]; then\n            return\
    \ false\n        fi\n    done\n    return true\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa3v7x9is.sh: line 19: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n\tlocal brackets=\"<\"\n\tlocal opening_brackets=\"\
    [\"\n\tlocal closing_brackets=\"]\"\n\n\t# For each opening bracket, check if\
    \ it is followed by a closing bracket.\n\tlocal opening_count = 0\n\tlocal closing_count\
    \ = 0\n\tlocal result\n\tlocal bracket\n\tlocal opening_bracket\n\tlocal closing_bracket\n\
    \n\twhile (( $# != 0 )); do\n\t\tbracket=\"$1\"\n\t\topening_bracket=\"${brackets//$bracket/}\"\
    \n\t\tclosing_bracket=\"${opening_bracket}${closing_brackets//$opening_bracket/$bracket}\"\
    \n\t\tif [[ $opening_count -eq 0 && ${#closing_brackets} -eq 0 ]]; then\n\t\t\t\
    result=true\n\t\telse\n\t\t\tresult=false\n\t\tfi\n\t\t(( opening_count++ ))\n\
    \t\tif [[ \"$bracket\" == \"$opening_bracket\" ]]; then\n\t\t\t(( closing_count++\
    \ ))\n\t\t\topening_count=0\n\t\tfi\n\t\tshift\n\tdone\n\n\techo \"$result\"\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnh20kgeo.sh: line 20: local: `='': not a valid identifier

    /tmp/tmpnh20kgeo.sh: line 20: local: `0'': not a valid identifier

    /tmp/tmpnh20kgeo.sh: line 21: local: `='': not a valid identifier

    /tmp/tmpnh20kgeo.sh: line 21: local: `0'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local\
    \ opening_bracket\n  local closing_bracket\n\n  for opening_bracket in $(brackets\
    \ \\\n    --match-any-opening-bracket \\\n    --print-in-context '(') \\\n   \
    \ --match-any-closing-bracket \\\n    --print-in-context ')') ; do\n    closing_bracket=\"\
    $(echo $opening_bracket | awk '{print $2}')\"\n\n    if [ \"$closing_bracket\"\
    \ = \"<\" ]; then\n      return 1\n    fi\n\n    if [ \"$closing_bracket\" = \"\
    >\" ]; then\n      return 0\n    fi\n  done\n\n  return 0\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyob0h4bs.sh: line 23: syntax error near unexpected token `)''

    /tmp/tmpyob0h4bs.sh: line 23: `    --print-in-context '')'') ; do''

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ brackets_count=${#brackets}\n    if [ $brackets_count -lt 2 ]; then\n      \
    \  echo \"false # $1 not of length 2\"\n        return 1\n    fi\n    local correct=true\n\
    \    local current=${brackets:0:1}\n    if [ \"$current\" == \"<\" ]; then\n \
    \       if [ \"$brackets\" == \"<$1\" ]; then\n            correct=false\n   \
    \     fi\n    elif [ \"$current\" == \">\" ]; then\n        if [ \"$brackets\"\
    \ == \">$1\" ]; then\n            correct=false\n        fi\n    fi\n    if [\
    \ \"$correct\" == \"true\" ]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local\
    \ opening=\"${brackets%%<*}\"\n  local closing=\"${brackets##*>}\"\n  [[ \"$opening\"\
    \ == \"\" ]] && return 1\n  [[ \"$closing\" == \"\" ]] && return 0\n  local opened=$(echo\
    \ $opening | tr '<' ' ');\n  local closed=$(echo $closing | tr '>' ' ');\n  [[\
    \ \"$opened\" != \"$closed\" ]]\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"<\">\n  local\
    \ bracket\n  for bracket in $brackets; do\n    local count=$(bracketing_count\
    \ \"$1\")\n    local result\n    if [[ $count -eq 0 ]]; then\n      result=\"\
    true\"\n    else\n      if [[ $count -eq 2 ]]; then\n        result=\"false\"\n\
    \      else\n        result=\"(true) && (false)\"\n      fi\n    fi\n    echo\
    \ -n -e \"if [[ \\${1} = \\${1}\\${bracket} ]]; then\\n  echo '$result'\\nfi\\\
    n\"\n  done\n  false\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphtefk0fn.sh: line 15: syntax error near unexpected token `newline''

    /tmp/tmphtefk0fn.sh: line 15: `  local brackets="<">''

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  # if there is no opening bracket,\
    \ return false\n  [ \"$1\" == \"<\" ]\n  return\n  # if there are too many closing\
    \ brackets, return false\n  [ \"$1\" == \"<>\" ]\n  return\n  # if there are too\
    \ many opening brackets, return false\n  [ \"$1\" == \"<>>\" ]\n  return\n  #\
    \ if there are not enough closing brackets, return true\n  [ \"$1\" == \"<<><>\"\
    \ ]\n  return\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"${1}\"\n   \
    \ local escaped_brackets=\"${brackets//<\\/?/\\\\}\"\n    local escaped_brackets_length=${#escaped_brackets}\n\
    \    local correct_bracketing_length=0\n    local opening_brackets=\"\"\n    local\
    \ closing_brackets=\"\"\n    local i=0\n    local last_char=\"\"\n    local last_bracket=\"\
    \"\n\n    until [ $i -eq $escaped_brackets_length ]; do\n        last_char=${escaped_brackets:$i:1}\n\
    \        last_bracket=${escaped_brackets:$i:2}\n\n        if [ $i -gt 0 ]; then\
    \ opening_brackets=\"$opening_brackets \"$last_bracket\"; fi\n        if [ -n\
    \ \"$last_char\" ]; then closing_brackets=\"$closing_brackets \"$last_bracket\"\
    ; fi\n\n        if [ $i -gt 0 ] && [ -n \"$last_char\" ] && [ -n \"$last_bracket\"\
    \ ]; then\n            if [ \"$last_char\" == \"$last_bracket\" ]; then\n    \
    \            correct_bracketing_length=$((correct_bracketing_length+1))\n    \
    \        fi\n        fi\n\n        i=$((i+1))\n    done\n    local correct_bracketing_length=$((correct_bracketing_length+1))\n\
    \n    if [ \"$correct_bracketing_length\" -ne \"$escaped_brackets_length\" ];\
    \ then\n        return false\n    elif [ \"$correct_bracketing_length\" -eq \"\
    $escaped_brackets_length\" ]; then\n        return true\n    else\n        return\
    \ true\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpw8py2gi2.sh: line 30: >: command not found

    /tmp/tmpw8py2gi2.sh: line 45: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local bracket_string=\"$1\"\n \
    \ local bracket_count=\"$(correct_bracketing_count \"$bracket_string\")\"\n  echo\
    \ $(( (bracket_count > 0) ))\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_6f1xmo6.sh: line 16: correct_bracketing_count: command not found

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local bracket_1=\"$1\"\n  local\
    \ bracket_2=\"\"\n  local bracket_count=0;\n  local bracket_end=0;\n  local bracket_end2=0;\n\
    \  local bracket_end3=0;\n  for (( i=1; i<${#bracket_1}; i++ )); do\n    if [[\
    \ ${bracket_1:i:1} == \"<\" ]]; then\n      if [[ ${bracket_end:0:1} == \"<\"\
    \ ]]; then\n        (( bracket_count += 1 ));\n      elif [[ ${bracket_end:0:1}\
    \ == \"<\" ]]; then\n        (( bracket_end += 1 ));\n      fi\n    elif [[ ${bracket_1:i:1}\
    \ == \">\" ]]; then\n      if [[ ${bracket_end2:0:1} == \">\" ]]; then\n     \
    \   (( bracket_count-=1 ));\n      elif [[ ${bracket_end2:0:1} == \">\" ]]; then\n\
    \        (( bracket_end2-=1 ));\n      fi\n    elif [[ ${bracket_1:i:1} == \"\
    >\" ]]; then\n      if [[ ${bracket_end3:0:1} == \">\" ]]; then\n        (( bracket_count+=1\
    \ ));\n      elif [[ ${bracket_end3:0:1} == \">\" ]]; then\n        (( bracket_end3+=1\
    \ ));\n      fi\n    elif [[ ${bracket_1:i:1} == \"<\" ]]; then\n      if [[ ${bracket_end2:0:1}\
    \ == \"<\" ]]; then\n        (( bracket_count-=1 ));\n      elif [[ ${bracket_end2:0:1}\
    \ == \"<\" ]]; then\n        (( bracket_end2-=1 ));\n      fi\n    elif [[ ${bracket_1:i:1}\
    \ == \"<\" ]]; then\n      if [[ ${bracket_end3:0:1} == \"<\" ]]; then\n     \
    \   (( bracket_count+=1 ));\n      elif [[ ${bracket_end3:0:1} == \"<\" ]]; then\n\
    \        (( bracket_end3+=1 ));\n      fi\n    else\n      (( bracket_count +=\
    \ 1 ));\n    fi\n  done\n  if [[ ${bracket_count:-0} == 0 ]]; then\n    echo \"\
    true\";\n  else\n    echo \"false\";\n  fi;\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local bracket_string=\"$1\"\n\
    \    local bracket_count=0\n    local bracket_open=false\n    local bracket_close=false\n\
    \    local bracket_pairs=\"\"\n    local bracket_pair_count=0\n\n    while [ -n\
    \ \"${bracket_string}\" ]; do\n        bracket_count=$((${bracket_count}+1))\n\
    \        if [ \"${bracket_open}\" == \"false\" ] && [ \"${bracket_count}\" -eq\
    \ \"1\" ] ; then\n            bracket_open=true\n            bracket_pairs=\"\
    ${bracket_pairs} ${bracket_count}\"\n        elif [ \"${bracket_open}\" == \"\
    true\" ] && [ \"${bracket_count}\" -eq \"2\" ] ; then\n            bracket_close=true\n\
    \            bracket_pair_count=$((${bracket_pair_count}+1))\n            bracket_pair_count=$((${bracket_pair_count}+1))\n\
    \            bracket_pairs=\"${bracket_pairs} ${bracket_pair_count}\"\n      \
    \  elif [ \"${bracket_open}\" == \"true\" ] && [ \"${bracket_close}\" == \"true\"\
    \ ] && [ \"${bracket_count}\" -eq \"1\" ] ; then\n            bracket_open=false\n\
    \            bracket_close=false\n            bracket_pair_count=$((${bracket_pair_count}+1))\n\
    \            bracket_pairs=\"${bracket_pairs} ${bracket_pair_count}\"\n      \
    \  fi\n        if [ \"${bracket_open}\" == \"true\" ] && [ \"${bracket_count}\"\
    \ -eq \"2\" ] ; then\n            bracket_open=false\n        fi\n        bracket_string=\"\
    ${bracket_string#?}\"\n    done\n    if [ \"${bracket_open}\" == \"true\" ] &&\
    \ [ \"${bracket_close}\" == \"true\" ] ; then\n        bracket_pairs=\"${bracket_pairs}\
    \ ${bracket_pair_count}\"\n    fi\n    echo \"${bracket_pairs}\"\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ opening=${brackets%%*>}\n    local closing=${brackets##*>}\n    opening=${opening//<}\n\
    \    closing=${closing//>}\n    echo $opening == $closing\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n\tlocal brackets=\"$1\"\n\tlocal\
    \ length=\"${#brackets}\"\n\tlocal i\n\tlocal result\n\tresult=$(expr \"$length\"\
    \ : '\\([0-9]\\)')\n\tif [ $result -eq 0 ]; then\n\t\techo \"$1 is not a valid\
    \ bracket pattern.\"\n\t\treturn 1\n\tfi\n\tfor ((i = 0; i < $((length-1)); i++))\
    \ ; do\n\t\tlocal match=$(expr match \"$brackets\" '\\(' \\+ $'\\1' '\\)')\n\t\
    \tif [ $match -eq 0 ]; then\n\t\t\techo \"$1 does not match bracketing\"\n\t\t\
    \treturn 1\n\t\tfi\n\tdone\n\tfor ((i = 1; i < (length-1); i++)) ; do\n\t\tlocal\
    \ match=$(expr match \"$brackets\" '\\(' \\+ $'\\1' $'\\)')\n\t\tif [ $match -eq\
    \ 0 ]; then\n\t\t\techo \"$1 does not match bracketing\"\n\t\t\treturn 1\n\t\t\
    fi\n\tdone\n\treturn 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'expr: Unmatched ( or \(

    /tmp/tmpc2xeau9f.sh: line 26: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets_test=\"$1\"\n\
    \    local brackets=\"$2\"\n    if [ ${#brackets} -ne ${#brackets_test} ]\n  \
    \  then\n        return\n    fi\n    for i in \"${!brackets_test}\"\n    do\n\
    \        if [ \"${brackets_test[i]}\" = \"<\" -a \"${brackets[i]}\" = \">\" ]\n\
    \        then\n            return\n        fi\n    done\n    return\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local string=\"$1\"\n  local bracket_count=\"\
    $(echo \"$string\" | grep -c \"<<\")\"\n  echo \"$(bracket_count==\"$(($bracket_count+1))\
    \ ]}\"\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0i14pjxy.sh: line 17: unexpected EOF while looking for matching
    `)''

    /tmp/tmp0i14pjxy.sh: line 41: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local string=\"$1\"\n\n  local\
    \ opening_brackets_string=\"\"\n  local opening_brackets_counter=0\n\n  local\
    \ closing_brackets_string=\"\"\n  local closing_brackets_counter=0\n\n  local\
    \ opening_brackets_array_index=0\n  local closing_brackets_array_index=0\n\n \
    \ # Iterate over all characters of the string\n  local i\n  for ((i=0; i<\"${#string}\"\
    ; i++ ));\n  do\n    # Only take into account opening brackets\n    if [[ \"${string:$i:1}\"\
    \ == \"<\" ]]\n    then\n      opening_brackets_counter=$((opening_brackets_counter+1))\n\
    \      opening_brackets_string+=\"${string:$i:1}\"\n      # Check if the opening\
    \ bracket at the current position is closing\n      # the previous one\n     \
    \ if [[ \"${opening_brackets_string}\" == \"${closing_brackets_string}\" ]]\n\
    \      then\n        opening_brackets_counter=$((opening_brackets_counter-1))\n\
    \      fi\n      opening_brackets_string+=\">\"\n    fi\n    # Only take into\
    \ account closing brackets\n    if [[ \"${string:$i:1}\" == \">\" ]]\n    then\n\
    \      closing_brackets_counter=$((closing_brackets_counter+1))\n      closing_brackets_string+=\"\
    ${string:$i:1}\"\n      # Check if the closing bracket at the current position\
    \ is opening\n      # the previous one\n      if [[ \"${opening_brackets_string}\"\
    \ == \"${closing_brackets_string}\" ]]\n      then\n        closing_brackets_counter=$((closing_brackets_counter-1))\n\
    \      fi\n      closing_brackets_string+=\"<\"\n    fi\n  done\n\n  # If the\
    \ number of opening brackets is equal to the number of closing\n  # brackets,\
    \ the brackets are correctly nested\n  if [[ \"${opening_brackets_counter}\" -eq\
    \ \"${closing_brackets_counter}\" ]]\n  then\n    return 0\n  else\n    return\
    \ 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local opening=$1;\n  local closing=`echo\
    \ $opening | sed -n 's/\\(^[^<>]*\\)<\\(.*\\)>/\\1/p'`;\n  [ -z \"$closing\" ]\
    \ && return 1;\n  [ -z \"$1\" ] && return 1;\n  local brackets_open=${closing};\n\
    \  local brackets_close=${closing};\n  local i;\n  for ((i=1; i<=#$1; i++));do\n\
    \    local opening=`echo $opening | sed -n 's/\\(^[^<>]*\\)<\\(.*\\)>/\\1/p'`;\n\
    \    local closing=`echo $opening | sed -n 's/\\(^[^<>]*\\)<\\(.*\\)>/\\1/p'`;\n\
    \    if [ \"$opening\" = \"$closing\" ]; then\n      brackets_open=$closing;\n\
    \    else\n      brackets_close=$closing;\n      break;\n    fi\n  done\n  echo\
    \ $brackets_open -eq $brackets_close;\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets='$1 $2 $3 $4 $5\
    \ $6 $7 $8 $9'\n    local result='false'\n    local i='1'\n\n    while [[ $i -le\
    \ 9 ]]; do\n        result='true'\n        if [[ $brackets != '$i $((i + 1))'\
    \ ]]; then\n            result='false'\n            break\n        fi\n      \
    \  i=$((i + 1))\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    if [ -z \"$1\" ]; then\n    \
    \    return $2\n    else\n        echo \"$1\" | sed -n \"\n            s/^([^<]\\\
    (.*\\))>/\\1</;\n            s/^([^>]\\(.*\\))</\\1/>;\n            s/^<\\(.*\\\
    )</\\1/;\n            s/^<\\(.*\\)>/\\1/;\n            s/^>\\(.*\\)</\\1/>;\n\
    \            s/^>\\(.*\\)>/\\1/;\n            s/<\\(.*\\)>/\\1/;\n           \
    \ s/<\\(.*\\)</\\1/;\n            s/<.*\\)>/\\1/;\n            s/>\\(.*\\)</\\\
    1/>;\n            s/>\\(.*\\)>/\\1/;\n            s/>.*\\)</\\1/;\n          \
    \  s/>.*\\)>/\\1/;\n            s/<.*\\)</\\1/;\n            s/<.*\\)>/\\1/;\n\
    \            s/\\(\\(.*\\)>\\)/\\1</;\n            s/\\(\\(.*\\)<\\)/\\1/>;\n\
    \            s/\\(.*\\)<\\(/\\2</;\n            s/\\(.*\\)>\\(/\\2/>;\n      \
    \      s/\\(.*\\)<\\/\\(/\\2</;\n            s/\\(.*\\)>\\/\\(/\\2/>;\n      \
    \      s/\\([^<]*\\)>/\\1</;\n            s/\\([^>]*\\)</\\1/>;\n            s/<\\\
    ([^>]*\\)>/\\1/;\n            s/<\\([^<]*\\)</\\1/;\n            s/\\([^>]*\\\
    )<\\/\\1/;\n            s/\\([^<]*\\)>\\/\\1/;\n            s/<\\([^<]*\\)<\\\
    /\\1/;\n            s/\\([^>]*\\)<\\/\\1/;\n            s/<\\([^>]*\\)>\\/\\1/;\n\
    \            s/<.*\\)<\\/\\1/;\n            s/<.*\\)>\\/\\1/;\n            s/.*\\\
    )<\\/\\1/;\n            s/.*\\)>\\/\\1/;\n            s/\\([^<]*\\)<\\/\\1/;\n\
    \            s/\\([^>]*\\)>\\/\\1/;\n            s/<\\([^<]*\\)\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjnntv9wj.sh: line 75: unexpected EOF while looking for matching
    `"''

    /tmp/tmpjnntv9wj.sh: line 79: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"${1}\"\n   \
    \ local ret=1\n    for bracket in ${brackets//[<>]/}; do\n        if [ \"${bracket}\"\
    \ != \"${bracket}\"]; then\n            ret=0\n        fi\n    done\n    return\
    \ ${ret}\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local bracket_1=\"<\"\n    local\
    \ bracket_2=\">\"\n    local bracket_3=\"<>\"\n    local bracket_4=\"<<><>>\"\n\
    \n    local brackets=\"$1\"\n\n    if [[ \"$brackets\" == \"<\" ]]; then\n   \
    \     echo \"false\"\n    elif [[ \"$brackets\" == \"<*\" ]]; then\n        echo\
    \ \"true\"\n    elif [[ \"$brackets\" == \"<>\" ]]; then\n        echo \"false\"\
    \n    elif [[ \"$brackets\" == \"<>*\" ]]; then\n        echo \"false\"\n    elif\
    \ [[ \"$brackets\" == \"><<*\" ]]; then\n        echo \"false\"\n    elif [[ \"\
    $brackets\" == \"<<*<\" ]]; then\n        echo \"false\"\n    elif [[ \"$brackets\"\
    \ == \"<<<*\" ]]; then\n        echo \"false\"\n    elif [[ \"$brackets\" == \"\
    <<<\" ]]; then\n        echo \"true\"\n    elif [[ \"$brackets\" == \"<<\" ]];\
    \ then\n        echo \"false\"\n    elif [[ \"$brackets\" == \"<<*>\" ]]; then\n\
    \        echo \"false\"\n    elif [[ \"$brackets\" == \"<<<*>\" ]]; then\n   \
    \     echo \"false\"\n    elif [[ \"$brackets\" == \"<<<**\" ]]; then\n      \
    \  echo \"false\"\n    elif [[ \"$brackets\" == \"<<<***\" ]]; then\n        echo\
    \ \"false\"\n    elif [[ \"$brackets\" == \"<<<****\" ]]; then\n        echo \"\
    false\"\n    elif [[ \"$brackets\" == \"<<<*****\" ]]; then\n        echo \"false\"\
    \n    elif [[ \"$brackets\" == \"<<<*****<\" ]]; then\n        echo \"false\"\n\
    \    elif [[ \"$brackets\" == \"<<<*****<<\" ]]; then\n        echo \"false\"\n\
    \    elif [[ \"$brackets\" == \"<<<*****<*>\" ]]; then\n        echo \"false\"\
    \n    elif [[ \"$brackets\" == \"<<<*****<<*>\" ]]; then\n        echo \"false\"\
    \n    elif [[ \"$brackets\" == \"<<<*****<<><*<\" ]]; then\n        echo \"false\"\
    \n    elif [[ \"$brackets\" == \"<<<*****<<><*<*>\" ]]; then\n        echo \"\
    false\"\n    elif [[ \"$brackets\" == \"<<<*****<<><*<*><*\" ]]; then\n      \
    \  echo \"false\"\n    elif [[ \"$brackets\" == \"<<<*****<<><*<*><<*\" ]]; then\n\
    \        echo \"false\"\n    elif [[ \"$brackets\" == \"<<<*****<<><*<*><<*>\"\
    \ ]]; then\n        echo \"false\"\n    elif [[ \"$brackets\" == \"<<<*****<<><*<*><<<*\"\
    \ ]]; then\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqaqklyer.sh: line 71: syntax error near unexpected token `}''

    /tmp/tmpqaqklyer.sh: line 71: `}''

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  echo \"\
    $brackets\" | awk '{\n    for (i=1;i<=NF;i++) {\n      if ($i == \"<\") {\n  \
    \      if ($(i+1) != \">\") {\n          print \"false\";\n        }\n      }\n\
    \      else if ($i == \">\") {\n        if ($(i-1) != \"<\") {\n          print\
    \ \"false\";\n        }\n      }\n      else {\n        print \"true\";\n    \
    \  }\n    }\n  }'\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ str=\"$2\"\n\n    local last=\n    for i in $str; do\n        if [[ \"$i\" ==\
    \ \"<\" ]]; then\n            (( i++ ))\n            last=\"<\"\n        fi\n\
    \        if [[ \"$i\" == \"<\" ]]; then\n            (( i++ ))\n            last=\"\
    <\"\n        fi\n        if [[ \"$i\" == \"<\" ]]; then\n            (( i++ ))\n\
    \            last=\"<\"\n        fi\n        if [[ \"$i\" == \"<\" ]]; then\n\
    \            (( i++ ))\n            last=\"<\"\n        fi\n        if [[ \"$i\"\
    \ == \"<\" ]]; then\n            (( i++ ))\n            last=\"<\"\n        fi\n\
    \        if [[ \"$i\" == \"<\" ]]; then\n            (( i++ ))\n            last=\"\
    <\"\n        fi\n        if [[ \"$i\" == \"<\" ]]; then\n            (( i++ ))\n\
    \            last=\"<\"\n        fi\n        if [[ \"$i\" == \"<\" ]]; then\n\
    \            (( i++ ))\n            last=\"<\"\n        fi\n        if [[ \"$i\"\
    \ == \"<\" ]]; then\n            (( i++ ))\n            last=\"<\"\n        fi\n\
    \        if [[ \"$i\" == \"<\" ]]; then\n            (( i++ ))\n            last=\"\
    <\"\n        fi\n        if [[ \"$i\" == \"<\" ]]; then\n            (( i++ ))\n\
    \            last=\"<\"\n        fi\n        if [[ \"$i\" == \">\" ]]; then\n\
    \            (( i++ ))\n            last=\">\"\n        fi\n        if [[ \"$i\"\
    \ == \">\" ]]; then\n            (( i++ ))\n            last=\">\"\n        fi\n\
    \        if [[ \"$i\" == \">\" ]]; then\n            (( i++ ))\n            last=\"\
    >\"\n        fi\n        if [[ \"$i\" == \">\" ]]; then\n            (( i++ ))\n\
    \            last=\">\"\n        fi\n        if [[ \"$i\" == \">\" ]]; then\n\
    \            (( i++ ))\n            last=\">\"\n        fi\n        if [[ \"$i\"\
    \ == \">\" ]]; then\n            (( i++ ))\n            last=\">\"\n        fi\n\
    \        if [[ \"$i\" == \">\" ]]; then\n            (( i++ ))\n            last=\"\
    >\"\n        fi\n        if [[ \"$i\" == \">\" ]]; then\n            (( i++ ))\n\
    \            last=\">\"\n        fi\n        if [[ \"$i\" == \">\" ]]; then\n\
    \            (( i++ ))\n            last=\">\"\n        fi\n        if [[ \"$i\"\
    \ == \">\" ]]; then\n            (( i++ ))\n            last=\"\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb7jt1s4f.sh: line 122: unexpected EOF while looking for matching
    `"''

    /tmp/tmpb7jt1s4f.sh: line 126: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1;\n    local\
    \ s=\"\";\n    local correct=\"false\";\n    while [[ $1 ]]; do\n        case\
    \ \"$1\" in\n            \">\"*[!-~])\n                if [[ \"$s\" == \"\" ]];\
    \ then\n                    correct=\"true\";\n                else\n        \
    \            correct=\"false\";\n                fi;\n                ;;\n   \
    \         \"<\"*[!-~])\n                if [[ \"$s\" == \"\" ]]; then\n      \
    \              correct=\"true\";\n                else\n                    correct=\"\
    false\";\n                fi;\n                ;;\n            \"<<\"*)\n    \
    \            if [[ \"$s\" == \"\" ]]; then\n                    correct=\"true\"\
    ;\n                else\n                    correct=\"false\";\n            \
    \    fi;\n                ;;\n            \">>\"*)\n                if [[ \"$s\"\
    \ == \"\" ]]; then\n                    correct=\"true\";\n                else\n\
    \                    correct=\"false\";\n                fi;\n               \
    \ ;;\n            \"<>\"*)\n                if [[ \"$s\" == \"\" ]]; then\n  \
    \                  correct=\"true\";\n                else\n                 \
    \   correct=\"false\";\n                fi;\n                ;;\n            \"\
    <\"*)\n                s=$(expr $s + 1);\n                ;;\n            \">\"\
    *)\n                s=$(expr $s - 1);\n                ;;\n            *)\n  \
    \              s=$(expr $s + 1);\n                ;;\n        esac;\n        shift;\n\
    \    done;\n    echo $correct;\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"${1}\"\n  local\
    \ string=\"${2}\"\n  local count=${#brackets}\n\n  for (( i=1; i<=$count; i++\
    \ )); do\n    if [[ \"${string}\" == \"${brackets:$i:1}\" ]]; then\n      result=true\n\
    \    else\n      result=false\n      break\n    fi\n  done\n  echo \"${result}\"\
    \n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  string=$1\n  brackets='<>'\n  result=true\n\
    \  while [[ $string ]]\n    do\n      opening=${string:0:1}\n      closing=${string:2:1}\n\
    \      result=$result\" && [[ -z $brackets ]] || [[ $opening == $closing ]]\n\
    \      string=${string:2};\n      brackets=${brackets:1:1}\n    done\n  echo $result\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpti4pfdqq.sh: line 46: unexpected EOF while looking for matching
    `"''

    /tmp/tmpti4pfdqq.sh: line 50: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ opening=$(echo $brackets | cut -c1-21)\n    local closing=$(echo $brackets |\
    \ cut -c5-6)\n    local opened=0\n    local closed=0\n    for ((i=0; i<${#opening};\
    \ i++)); do\n        if [[ \"$opening\" == \"$closing\" ]]; then\n           \
    \ (( opened++ ))\n        elif [ \"$opened\" -eq \"0\" ]; then\n            if\
    \ [ \"$opening\" == \"<\" ] && [ \"$closing\" == \">\" ]; then\n             \
    \   (( closed++ ))\n            else\n                if [ \"$opening\" == \"\
    <\" ]; then\n                    if [ \"$closing\" == \"<\" ]; then\n        \
    \                (( closed++ ))\n                    else\n                  \
    \      if [ \"$closing\" == \"<\" ] && [ \"$closing\" == \">\" ]; then\n     \
    \                       (( closed++ ))\n                        else\n       \
    \                     if [ \"$closing\" == \">\" ] && [ \"$closing\" == \">\"\
    \ ]; then\n                                (( closed++ ))\n                  \
    \          fi\n                        fi\n                    fi\n          \
    \      elif [ \"$opening\" == \"<\" ] && [ \"$opening\" == \"<\" ]; then\n   \
    \                 if [ \"$closing\" == \"<\" ] && [ \"$closing\" == \"<\" ]; then\n\
    \                        (( closed++ ))\n                    else\n          \
    \              if [ \"$closing\" == \"<\" ] && [ \"$closing\" == \">\" ]; then\n\
    \                            (( closed++ ))\n                        else\n  \
    \                          if [ \"$closing\" == \">\" ] && [ \"$closing\" == \"\
    >\" ]; then\n                                (( closed++ ))\n                \
    \            fi\n                        fi\n                    fi\n        \
    \        elif [ \"$opening\" == \"<\" ] && [ \"$opening\" == \"<\" ] && [ \"$closing\"\
    \ == \"<\" ] && [ \"$closing\" == \"<\" ]; then\n                    if [ \"$closing\"\
    \ == \"<\" ] && [ \"$closing\" == \"<\" ] && [ \"$closing\" == \"<\" ] && [ \"\
    $closing\" == \"<\" ]; then\n                        (( closed++ ))\n        \
    \            else\n                        if [ \"$closing\" == \"<\" ] && [ \"\
    $closing\" == \">\" ]; then\n                            (( closed++ ))\n    \
    \                    else\n                            if [ \"$closing\" == \"\
    >\" ] && [ \"$closing\" == \">\" ]; then\n                                (( closed++\
    \ ))\n                            fi\n                        fi\n           \
    \         fi\n                elif [ \"$opening\" == \"<\" ] && [ \"$opening\"\
    \ == \"<\" ] && [ \"$closing\" == \"<\" ] && [ \"$closing\" == \">\" ]; then\n\
    \                    if [ \"$closing\" == \">\" ]; then\n                    \
    \    (( closed++ ))\n                    else\n                        if [ \"\
    $closing\" == \">\" ] && [ \"$closing\" == \">\" ]; then\n                   \
    \         (( closed++ ))\n                        fi\n                    fi\n\
    \                elif [ \"$opening\" == \"<\" ] && [ \"$opening\" == \">\" ];\
    \ then\n                    if [ \"$\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmlowrx_k.sh: line 92: unexpected EOF while looking for matching
    `"''

    /tmp/tmpmlowrx_k.sh: line 96: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    for c\
    \ in $brackets; do\n        [[ \"$c\" == \"<\" ]]\n        [[ \"$c\" == \">\"\
    \ ]]\n    done\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ i=2\n    local close_brackets=()\n    while (( $i < $(( ${#brackets} + 1 ))\
    \ )); do\n        local opening_bracket=${brackets:$i:1}\n        if [[ $opening_bracket\
    \ = \"<\" ]]; then\n            if [[ $close_brackets ]]; then\n             \
    \   return 1\n            else\n                close_brackets+=(\"</$opening_bracket>\"\
    )\n                (( i++ ))\n            fi\n        elif [[ $opening_bracket\
    \ = \">\" ]]; then\n            if [[ $close_brackets ]]; then\n             \
    \   return 1\n            else\n                close_brackets+=(\"<$opening_bracket>\"\
    )\n                (( i++ ))\n            fi\n        fi\n        (( i++ ))\n\
    \    done\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local open_brackets=\"$1\"\n\
    \    for open_bracket in ${open_brackets//<*}\n    do\n        open_bracket=\"\
    ${open_bracket//<}\"\n        open_bracket=\"${open_bracket%\">}\"\n        if\
    \ [ \"x$open_bracket\" = \"x\" ] || ( echo \"$open_bracket\" | grep -q \"[><]\"\
    \ )\n        then\n            continue\n        fi\n        for close_bracket\
    \ in ${open_brackets//>*}\n        do\n            close_bracket=\"${close_bracket//>}\"\
    \n            close_bracket=\"${close_bracket%\">}\"\n            if [ \"x$close_bracket\"\
    \ = \"x\" ] || ( echo \"$close_bracket\" | grep -q \"[><]\" )\n            then\n\
    \                continue\n            fi\n            if [ \"x$open_bracket\"\
    \ = \"x$close_bracket\" ]\n            then\n                continue\n      \
    \      fi\n            echo \"true\"\n            return 0\n        done\n   \
    \ done\n    echo \"false\"\n    return 1\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7f3o7m_v.sh: line 61: unexpected EOF while looking for matching
    `"''

    /tmp/tmp7f3o7m_v.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ bracket\n    local found\n    local bracket\n    for bracket in \"${brackets[@]}\"\
    ; do\n        found=\"\"\n        for bracket in \"${brackets[@]}\"; do\n    \
    \        if [ \"$bracket\" = \"$bracket\" ]; then\n                found=\"yes\"\
    \n                break\n            fi\n        done\n        if [ \"$found\"\
    \ != \"yes\" ]; then\n            echo \"false\"\n            return 1\n     \
    \   fi\n    done\n    echo \"true\"\n    return 0\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ i=1\n    local opening=\"<\"\n    while [ $i -lt ${#brackets} ]\n    do\n  \
    \      local closing=\"${brackets:$i:1}\"\n        if [ $closing == \">\" ]\n\
    \        then\n            local opening=\"$2\"\n        else\n            local\
    \ opening=\"<\"\n        fi\n        (( i++ ))\n    done\n    local return=$i\n\
    \    return $return\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets='{([{<>|&}{][<]|}])}'\n\
    \    local opening_chars='{([{<>|&}{][<]|}])}'\n    local closing_brackets='[}>]'\n\
    \n    local opening_chars_index=1\n    local closing_brackets_index=1\n\n    while\
    \ [[ \"${1}\" =~ $brackets ]]; do\n        local opening_bracket=\"${BASH_REMATCH[1]}\"\
    \n        local closing_bracket=\"${BASH_REMATCH[2]}\"\n\n        local opening_char=\"\
    ${opening_chars:$opening_chars_index:1}\"\n        local closing_bracket=\"${closing_brackets:$closing_brackets_index:1}\"\
    \n\n        case \"${opening_bracket}\" in\n            $opening_char) ;;\n  \
    \          $closing_bracket) ;;\n            *) echo >&2 \"error: opening and\
    \ closing brackets ${opening_bracket} and ${closing_bracket} do not match.\" >&2;\
    \ return 1 ;;\n        esac\n\n        opening_chars_index=$((opening_chars_index\
    \ + 1))\n        closing_brackets_index=$((closing_brackets_index + 1))\n    done\n\
    \n    echo >&2 \"true\"\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'true

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    while\
    \ [[ ${#brackets} -gt 0 ]]; do\n        local opening=${brackets:0:1}\n      \
    \  local closing=${brackets:1:1}\n        if [[ \"$closing\" == \"<\" ]]; then\n\
    \            local closed_brackets=${brackets:2:$((${#brackets}-1))}\n       \
    \     if [[ ${#closed_brackets} -gt 0 ]]; then\n                if [[ \"${opening}\
    \ == \\<\" ]]; then\n                    echo \"false\"\n                else\n\
    \                    echo \"true\"\n                fi\n            fi\n     \
    \   fi\n        brackets=${closed_brackets}\n    done\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local correct=1\n\
    \  for bracket1 in ${brackets[@]}; do\n    local bracket2\n    while (( $bracket2\
    \ )); do\n      [[ -z ${bracket2} ]] || break\n      if [ \"$bracket2\" == \"\
    <\" -a \"$bracket1\" != \">\" -a \"$bracket1\" != \">>\" -a \"$bracket1\" != \"\
    >>>\" -a \"$bracket1\" != \"<<\" -a \"$bracket1\" != \"<<<\" -a \"$bracket1\"\
    \ != \"<\" -a \"$bracket1\" != \"<=\" -a \"$bracket1\" != \"<<<\" -a \"$bracket1\"\
    \ != \"<<\" ]; then\n        correct=0\n        break\n      fi\n      bracket2=\"\
    ${bracket2}\"\n    done\n  done\n  echo \"$correct\"\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ opening_brackets=$2\n    local closing_brackets=$3\n    if [[ ${closing_brackets}\
    \ == \"\" ]]; then\n        local bracket_count=0\n        for bracket in ${opening_brackets};\
    \ do\n            if [[ ${bracket} == \"\" ]]; then\n                bracket_count=`expr\
    \ $bracket_count + 1`\n            else\n                bracket_count=`expr $bracket_count\
    \ + 1`\n            fi\n        done\n        if [[ ${bracket_count} -gt 2 ]];\
    \ then\n            return 1\n        else\n            return 0\n        fi\n\
    \    else\n        return 0\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ correct=\"$(echo \"${brackets}\" | grep -v '>')\n    local wrong=\"$(echo \"\
    ${brackets}\" | grep -v '<')\n    if [ -z \"${correct}\" ] ; then\n        return\
    \ \"true\"\n    else\n        if [ -z \"${wrong}\" ] ; then\n            return\
    \ \"false\"\n        else\n            if [ $(echo \"${brackets}\" | wc -w) -eq\
    \ 1 ] ; then\n                return \"false\"\n            else\n           \
    \     return \"true\"\n            fi\n        fi\n    fi\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcwodj34x.sh: line 22: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n\tlocal brackets=\"$1\"\n\tlocal\
    \ opening_quote=\"'\"\n\tlocal closing_quote='\"'\n\tlocal result=\"true\"\n\t\
    while (( \"${#brackets}\" )); do\n\t\tlocal opening=\"$(expr index \"${brackets}\"\
    \ \"<\")\"\n\t\tif [ \"${opening}\" -eq 0 ]; then\n\t\t\tlocal closing=\"$(expr\
    \ index \"${brackets}\" \">\")\"\n\t\t\tif [ \"${closing}\" -eq 0 ]; then\n\t\t\
    \t\tlocal closing=\"$(expr index \"${brackets}\" \">>\")\"\n\t\t\t\topening=\"\
    $(expr index \"${brackets}\" \"<<\")\"\n\t\t\t\tif [ \"${closing}\" -eq 0 ]; then\n\
    \t\t\t\t\tlocal closing=\"$(expr index \"${brackets}\" \"<>>\")\"\n\t\t\t\tfi\n\
    \t\t\tfi\n\t\tfi\n\t\tif [ \"${opening}\" -ne 0 ]; then\n\t\t\tif [ \"${opening}\"\
    \ -gt \"${closing}\" ]; then\n\t\t\t\tresult=\"false\"\n\t\t\tfi\n\t\tfi\n\t\t\
    brackets=\"${brackets:0:${closing}}\"\n\tdone\n\techo \"$result\"\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnqjs5pdt.sh: line 32: [: : integer expression expected

    /tmp/tmpnqjs5pdt.sh: line 32: [: : integer expression expected

    /tmp/tmpnqjs5pdt.sh: line 32: [: : integer expression expected

    /tmp/tmpnqjs5pdt.sh: line 32: [: : integer expression expected

    /tmp/tmpnqjs5pdt.sh: line 32: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local opening_brackets=$1\n \
    \   local bracket_counter=0\n    local bracket_closed=0\n    local opening_bracket\n\
    \    local closing_bracket\n    local bracket_count\n    local bracket_count_check\n\
    \    local bracket_count_check2\n    local return\n    local bracket_check\n \
    \   local bracket_check2\n\n    for bracket in $opening_brackets\n    do\n   \
    \     if [[ \"$bracket\" = \"<\" ]]\n        then\n            bracket_counter=$((bracket_counter+1))\n\
    \            if [[ \"$bracket_counter\" -eq \"0\" ]]\n            then\n     \
    \           opening_bracket=\"<\"\n                closing_bracket=\"$bracket\"\
    \n            else\n                opening_bracket=\"<\"\n            fi\n  \
    \      elif [[ \"$bracket\" = \">\" ]]\n        then\n            bracket_counter=$((bracket_counter-1))\n\
    \            if [[ \"$bracket_counter\" -eq \"0\" ]]\n            then\n     \
    \           opening_bracket=\">\"\n                closing_bracket=\"$bracket\"\
    \n            else\n                opening_bracket=\">\"\n            fi\n  \
    \      elif [[ \"$bracket\" = \"<=\" ]]\n        then\n            bracket_counter=$((bracket_counter+1))\n\
    \            if [[ \"$bracket_counter\" -eq \"0\" ]]\n            then\n     \
    \           opening_bracket=\"<=\"\n                closing_bracket=\"$bracket\"\
    \n            else\n                opening_bracket=\"<=\"\n            fi\n \
    \       elif [[ \"$bracket\" = \">=\" ]]\n        then\n            bracket_counter=$((bracket_counter-1))\n\
    \            if [[ \"$bracket_counter\" -eq \"0\" ]]\n            then\n     \
    \           opening_bracket=\">=\"\n                closing_bracket=\"$bracket\"\
    \n            else\n                opening_bracket=\">=\"\n            fi\n \
    \       else\n            opening_bracket=\"$bracket\"\n        fi\n    done\n\
    \    bracket_count=$((${bracket_counter}))\n    bracket_count_check=$((${bracket_count}))\n\
    \    bracket_count_check2=$((${bracket_counter}))\n    bracket_check=$(echo $opening_bracket\
    \ | grep -Eo \">\")\n    bracket_check2=$(echo $opening_bracket | grep -Eo \"\
    <\")\n\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local openings=\"${1}\"\n   \
    \ local closings=$(echo \"${openings} | sed -e 's/^>/>/g' -e 's/^/>>/g' -e 's/^</></g'\
    \ -e 's/^<</><</g'\")\n\n    local brackets=$(echo \"${openings} | sed -e 's/^>/>/g'\
    \ -e 's/^/>>/g' -e 's/^</></g' -e 's/^<</><</g'\")\n    # echo \"brackets = ${brackets}\"\
    \n    # echo \"openings = ${openings}\"\n    # echo \"closings = ${closings}\"\
    \n\n    if [[ \"${openings}\" = \"${closings}\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"${1}\"\n   \
    \ # print brackets to stdout so that we can see if they are as expected.\n   \
    \ echo $brackets\n    local open_brackets=${brackets/</>}\n    local closed_brackets=${brackets/>/}\n\
    \    echo $open_brackets\n    echo $closed_brackets\n    return $(( ${#open_brackets}\
    \ != ${#closed_brackets} )\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvo17hl0l.sh: line 22: unexpected EOF while looking for matching
    `)''

    /tmp/tmpvo17hl0l.sh: line 46: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local bracket_str=\"$1\"\n  \
    \  local bracket_str_regex=\"</?$bracket_str\"\n    local bracket_str_regex2=\"\
    </?$bracket_str>\"\n    local bracket_count=0\n    for (( i=0; i<${#bracket_str};\
    \ i++ )); do\n        local test_string=\"$(bracket_str_regex)\"\n        if [[\
    \ \"$test_string\" =~ $bracket_str_regex ]]; then\n            bracket_count=`expr\
    \ $bracket_count + 1`\n        else\n            local test_string=\"$(bracket_str_regex2)\"\
    \n            if [[ \"$test_string\" =~ $bracket_str_regex2 ]]; then\n       \
    \         bracket_count=`expr $bracket_count + 1`\n            fi\n        fi\n\
    \    done\n    [[ \"$bracket_count\" -eq 0 ]] && return 1\n    return 0\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4pklw5ug.sh: line 20: bracket_str_regex: command not found

    /tmp/tmp4pklw5ug.sh: line 24: bracket_str_regex2: command not found

    /tmp/tmp4pklw5ug.sh: line 20: bracket_str_regex: command not found

    /tmp/tmp4pklw5ug.sh: line 24: bracket_str_regex2: command not found

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local result=$(echo\
    \ \"$brackets\" | sed 's/^>\\+\\(\\(<\\|$\\)\\+$\\)\\+\\>\\+/\\>\\+\\1/')\n  [[\
    \ $result =~ $brackets ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ inopen\n    local inclose\n\n    correct=$(echo $brackets | grep -E \"(<[>]{2,})\"\
    \ | grep -E \"(<\\/[>]{2,})\")\n    echo $correct\n    if [ $? = 0 ]; then\n \
    \       echo \"\"\n        return 0\n    fi\n\n    while read -r line\n    do\n\
    \        inopen=$(echo $line | sed -E \"s/(<\\/?)(.+)(>)(.+)/\\2/\")\n       \
    \ inclose=$(echo $line | sed -E \"s/(<\\/?)(.+)(>)(.+)/\\1/\")\n        if [ \"\
    ${inopen}\" = \"${inclose}\" ]; then\n            echo \"false\"\n           \
    \ return 0\n        fi\n    done <<< $brackets\n    echo \"true\"\n    return\
    \ 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local string=\"$1\"\n    local\
    \ brackets\n\n    brackets=$(echo $string | tr '<' '{' | tr '>' '}')\n    [[ \"\
    $string\" =~ $brackets ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  # make sure to quote $1 so it gets\
    \ expanded (as in bash).\n  local bracket_string=$(echo \"$1\")\n  local correct=$(\n\
    \    # run until we find the first correct closing bracket\n    while [[ $bracket_string\
    \ =~ (<[^>]+>)$ ]]; do\n      # remove the brackets so we know which brackets\
    \ are opening.\n      # $1 is the entire string\n      local opening_bracket=$(echo\
    \ \"${BASH_REMATCH[1]}\")\n      # remove the opening bracket.\n      # $2 contains\
    \ the opening bracket\n      # $3 is the closing bracket\n      local closing_bracket=$(echo\
    \ \"${BASH_REMATCH[2]}\")\n      # test if both brackets are correct.\n      if\
    \ [[ $opening_bracket == $closing_bracket ]]; then\n        # remove the closing\
    \ bracket\n        bracket_string=${bracket_string::-1}\n      else\n        #\
    \ we found an opening bracket but not the closing one.\n        # we need to keep\
    \ looking through the string\n        break\n      fi\n    done\n  )\n  echo $correct\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n\t[[ $1 =~ ([^<>]*)(>([^<>]*)|([^<>]*)(<[^<>]*))\
    \ ]] && return 0\n\treturn 1\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdb1o3bi_.sh: line 15: [^: command not found

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  # $2 ... $# are the brackets\n\
    \  local brackets=$@\n  # $1 is the string \"<\"\n  if [ \"$1\" == \"<\" ] ; then\
    \ return false ; fi\n  # $1 is \">\"\n  if [ \"$1\" == \">\" ] ; then return false\
    \ ; fi\n  # $1 is \"<<>\"\n  if [ \"$1\" == \"<<>\" ] ; then return false ; fi\n\
    \  # $1 is \"><<>\"\n  if [ \"$1\" == \"><<>\" ] ; then return false ; fi\n  #\
    \ $1 is \"<<\"\n  if [ \"$1\" == \"<<\" ] ; then return true ; fi\n  # $1 is \"\
    >>\"\n  if [ \"$1\" == \">>\" ] ; then return true ; fi\n  # $1 is \"<>\"\n  if\
    \ [ \"$1\" == \"<>\" ] ; then return false ; fi\n  # $1 is \"<>\"\n  if [ \"$1\"\
    \ == \"<>\" ] ; then return false ; fi\n  # $1 is \"<<>\"\n  if [ \"$1\" == \"\
    <<\" ] ; then return false ; fi\n  # $1 is \"<<<\"\n  if [ \"$1\" == \"<<<\" ]\
    \ ; then return false ; fi\n  # $1 is \"<>\"\n  if [ \"$1\" == \"<>\" ] ; then\
    \ return false ; fi\n  # $1 is \"<>\"\n  if [ \"$1\" == \"<>\" ] ; then return\
    \ false ; fi\n  # $1 is \"<<<\"\n  if [ \"$1\" == \"<<<\" ] ; then return false\
    \ ; fi\n  # $1 is \"<>\"\n  if [ \"$1\" == \"<>\" ] ; then return false ; fi\n\
    \  # $1 is \"<>\"\n  if [ \"$1\" == \"<>\" ] ; then return false ; fi\n  # $1\
    \ is \"<<<\"\n  if [ \"$1\" == \"<<<\" ] ; then return false ; fi\n  # $1 is \"\
    <>\"\n  if [ \"$1\" == \"<>\" ] ; then return false ; fi\n  # $1 is \"<<<\"\n\
    \  if [ \"$1\" == \"<<<\" ] ; then return false ; fi\n  # $1 is \"<>\"\n  if [\
    \ \"$1\" == \"<>\" ] ; then return false ; fi\n  # $1 is \"<<<\"\n  if [ \"$1\"\
    \ == \"<<<\" ] ; then return false ; fi\n  # $1 is \"<>\"\n  if [ \"$1\" == \"\
    <>\" ] ; then return false ; fi\n  # $1 is \"<<<\"\n  if [ \"$1\" == \"<<<\" ]\
    \ ; then return false ; fi\n  # $1 is \"<>\"\n  if [ \"$1\" == \"<>\" ] ; then\
    \ return false ; fi\n  # $1 is \"<>\"\n  if [ \"$1\" == \"<>\" ] ; then return\
    \ false ; fi\n  # $1 is \"<<<\"\n  if [ \"$\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp24k4ir59.sh: line 86: unexpected EOF while looking for matching
    `"''

    /tmp/tmp24k4ir59.sh: line 90: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    brackets=$1\n    brackets=${brackets//[/\"\
    }\n    brackets=${brackets//]/\"}\n    for bracket in $brackets; do\n\t[[ ${bracket}\
    \ == \"<\" ]] && return 0\n\t[[ ${bracket} == \">\" ]] && return 1\n    done\n\
    \    return 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphhaf_e6f.sh: line 42: unexpected EOF while looking for matching
    `"''

    /tmp/tmphhaf_e6f.sh: line 46: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"<\"\n    for\
    \ i in $1 \"$brackets\" \">\"; do\n        [[ \"$i\" =~ $brackets ]] && return\
    \ 0;\n    done\n    return 1;\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ left=$1\n    local right=\n    while [ -n \"$2\" ]; do\n        left=\"$left<\"\
    \n        right=\"$right>\"\n        shift\n    done\n    echo $((${#left} > ${#right}))\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local bracket_pairs=$1 #a string\n\
    \    if [[ ${#bracket_pairs} -eq 0 ]]\n    then\n        return\n    fi\n    local\
    \ new_bracket_pairs=''\n    for pair in $bracket_pairs #a string\n    do\n   \
    \     if [[ ${#new_bracket_pairs} -eq 0 ]]\n        then\n            new_bracket_pairs=\"\
    ${pair}\"\n        fi\n        if [[ \"${pair}\" = \"<\" ]]\n        then\n  \
    \          if [[ ${#new_bracket_pairs} -eq 2 ]]\n            then\n          \
    \      new_bracket_pairs=\"${new_bracket_pairs}>\"\n            else\n       \
    \         new_bracket_pairs=\"${new_bracket_pairs}<\"\n            fi\n      \
    \  fi\n        if [[ \"${pair}\" = \">\" ]]\n        then\n            if [[ ${#new_bracket_pairs}\
    \ -eq 2 ]]\n            then\n                new_bracket_pairs=\"${new_bracket_pairs}<\"\
    \n            else\n                new_bracket_pairs=\"${new_bracket_pairs}>${pair}\"\
    \n            fi\n        fi\n    done\n    if [[ ${#new_bracket_pairs} -ne 0\
    \ ]]\n    then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n\tlocal brackets=\"$1\"\n\tlocal\
    \ openings=\"${brackets// /}\"\n\tlocal closings=\"${brackets// />}\"\n\t[ \"\
    ${openings}\" = \"${closings}\" ] || return 1\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local string=\"$1\"\n    local\
    \ opening=$(echo \"${string}\" | grep -E \"^<\")\n    local closing=$(echo \"\
    ${string}\" | grep -E \"^>\")\n    if [ -n \"$opening\" -a -n \"$closing\" ];\
    \ then \n\techo \"true\"\n    else \n\techo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n\n    local\
    \ left_brackets=$(grep -n '^' <<< \"$brackets\")\n    local left_brackets_string=\"\
    ${left_brackets[0]}\"\n    local right_brackets=$(grep -n '^' <<< \"$brackets\"\
    \ | head -1)\n    local right_brackets_string=\"${right_brackets[0]}\"\n    local\
    \ left_brackets_length=$(expr length \"$left_brackets_string\")\n    local right_brackets_length=$(expr\
    \ length \"$right_brackets_string\")\n    if [[ $left_brackets_length -lt $right_brackets_length\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"${1}\"\n  echo\
    \ \"${brackets}\"\n  for (( i=1; i<${#brackets}; i++ )); do\n    local opening=\"\
    ${brackets:$i:1}\"\n    local closing=\"${brackets:$((i+1)):1}\"\n    [[ \"${opening}\"\
    \ = \"<\" ]]\n    [[ \"${closing}\" = \">\" ]]\n  done\n}\n\ncandidate() {\n \
    \   correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: -1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  while [ ${#brackets}\
    \ -gt 1 ]; do\n    (( ${#brackets} > 1 )) || return 1\n    local first=${brackets:0:1}\n\
    \    local second=${brackets:1:2}\n    local open=${brackets:2:1}\n    local close=${brackets:3:1}\n\
    \    if [ \"$open\" != \"$close\" ]; then\n      (( ${#close} > 1 )) || return\
    \ 1\n      local tmp=${brackets:3:3}\n      brackets=$tmp\n    fi\n    (( ${#brackets}\
    \ > 1 )) || return 1\n    brackets=${brackets:0:2}\n  done\n  return 0\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=18 encoding='utf-8'>
  timestamp: 1660056084
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"${1}\"\n   \
    \ local close_brackets=\"$(bracketing_map \"$1\")\"\n    local correct=\"true\"\
    \n    local i\n    for ((i=1; i<${#brackets}; i++)); do\n        local cur=${brackets:i:1}\n\
    \        [[ \"$cur\" == \"<\" ]] && {\n            local next_bracket=${close_brackets:0:i:1}\n\
    \            if [[ $next_bracket == \"<\" ]]; then\n                correct=\"\
    false\"\n                break\n            fi\n        }\n        [[ \"$cur\"\
    \ == \"<\" ]] && {\n            local next_bracket=${close_brackets:1:i:1}\n \
    \           if [[ $next_bracket == \"<\" ]]; then\n                correct=\"\
    false\"\n                break\n            fi\n        }\n        [[ \"$cur\"\
    \ == \">\" ]] && {\n            local next_bracket=${close_brackets:2:i:1}\n \
    \           if [[ $next_bracket == \"<\" ]]; then\n                correct=\"\
    false\"\n                break\n            fi\n        }\n        [[ \"$cur\"\
    \ == \"<\" ]] && {\n            local next_bracket=${close_brackets:3:i:1}\n \
    \           if [[ $next_bracket == \"<\" ]]; then\n                correct=\"\
    false\"\n                break\n            fi\n        }\n    done\n    echo\
    \ \"$correct\"\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9nhy8q_3.sh: line 16: bracketing_map: command not found

    /tmp/tmp9nhy8q_3.sh: line 16: bracketing_map: command not found

    /tmp/tmp9nhy8q_3.sh: line 22: close_brackets: i:1: syntax error in expression
    (error token is ":1")

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n\n    local\
    \ opening=$(grep -E \"\\<[^<>]*$\" <<< \"$brackets\" | wc -l)\n    local closing=$(grep\
    \ -E \"\\>[^<>]*$\" <<< \"$brackets\" | wc -l)\n    local both=`expr $opening\
    \ \\+ $closing`\n\n    if [ \"$both\" -eq \"$opening\" ] || [ \"$both\" -eq \"\
    $closing\" ]; then\n        return 0\n    fi\n\n    return 1\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1 output\n  output=$(\n\
    \    echo $1 | \\\n    sed -E 's/(<[[:alpha:]]{1})/\\\\\\1\\1/g' | \\\n    sed\
    \ -E 's/(>[[:alpha:]]{1})/\\\\\\1\\1/g' | \\\n    sed -E 's/(<\\<\\<[[:alpha:]]{1})/\\\
    \\\\1\\1/g' | \\\n    sed -E 's/(>\\>\\>[[:alpha:]]{1})/\\\\\\1\\1/g' | \\\n \
    \   sed -E 's/(\\<\\<\\<\\<[[:alpha:]]{1})/\\\\\\1\\1/g' | \\\n    sed -E 's/(\\\
    >\\>\\>\\>[[:alpha:]]{1})/\\\\\\1\\1/g'\n  )\n  [[ \"$output\" == \"$brackets\"\
    \ ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local open_brackets=\"$1\"\n  local\
    \ closing_brackets=$(bracketing_regex)\n  echo $closing_brackets \"|\" $open_brackets\
    \ | \\\n    awk '\n      BEGIN { ok = 0; }\n      ($1 ~ closing_brackets) && (ok++);\n\
    \      END {\n        if (ok > 0 && ok <= (length(open_brackets) - 1)) {\n   \
    \       print 1;\n        } else {\n          print 0;\n        }\n      }'\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk88j3dwk.sh: line 16: bracketing_regex: command not found

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n\n   \
    \ local opening_brackets=\"$2\"\n    local closing_brackets=\"$3\"\n\n    local\
    \ ret=false\n\n    local index=0\n\n    while [[ \"$index\" -lt \"${#opening_brackets}\"\
    \ ]]; do\n        local opening=${opening_brackets:$index:1}\n        local closing=${closing_brackets:$index:1}\n\
    \        if [[ $opening == $closing ]]; then\n            index=$((index+1))\n\
    \        fi\n        local length=$((index-1))\n\n        if [[ $opening = \"\
    >\" ]]; then\n            if [[ $closing = \"<\" ]]; then\n                if\
    \ [[ ${#brackets} = \"$length\" ]]; then\n                    ret=true\n     \
    \           fi\n            fi\n        fi\n        if [[ $closing = \"<\" ]];\
    \ then\n            if [[ $opening = \">\" ]]; then\n                if [[ ${#brackets}\
    \ = \"$length\" ]]; then\n                    ret=true\n                fi\n \
    \           fi\n        fi\n        if [[ $opening = \"<\" ]]; then\n        \
    \    if [[ $closing = \">\" ]]; then\n                if [[ ${#brackets} = \"\
    $length\" ]]; then\n                    ret=true\n                fi\n       \
    \     fi\n        fi\n        if [[ $closing = \">\" ]]; then\n            if\
    \ [[ ${#brackets} = \"$length\" ]]; then\n                ret=true\n         \
    \   fi\n        fi\n        index=$((index+1))\n    done\n\n    echo \"$ret\"\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local open_brackets=${1}\n  local\
    \ closed_brackets=${2}\n  local brackets_string=$(echo ${open_brackets}${closed_brackets}\
    \ | tr ' ' '+')\n  local open_brackets_count=$(echo ${brackets_string} | wc -l)\n\
    \  local closed_brackets_count=$(echo ${brackets_string} | tr ' ' '-' | wc -l)\n\
    \  \n  ((open_brackets_count == closed_brackets_count))\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local bracket_string=$1\n   \
    \ local brackets=$bracket_string\n    for (( index=0; index<${#brackets}; index++\
    \ )); do\n        if [ $((index+1)) -ne ${#brackets} ]; then\n            if [[\
    \ \"$brackets\" =~ $brackets[index] ]]; then\n                continue\n     \
    \       else\n                return 1\n            fi\n        fi\n    done\n\
    \    return 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local opening_symbol=\"$1\"\n\
    \    local bracket_symbols=\"${2:-()}\"\n    if echo \"$opening_symbol\" | grep\
    \ -qE '['\"$bracket_symbols\"'\\]]'; then\n        echo \"true\"\n    else\n \
    \       echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local in_string=$1\n  # echo \"\
    correct bracketing\"\n  # echo \"$in_string\"\n  local brackets\n  # echo \">>$in_string<<<\"\
    \n  if [[ \"$in_string\" =~ (.*[^<>])> ]]; then\n    # echo \"$in_string match\"\
    \n    # echo \"${BASH_REMATCH[1]}<\"\n    brackets=\"${BASH_REMATCH[1]}\"\n  \
    \  # echo \"$brackets\"\n  else\n    # echo \"$in_string no match\"\n    # echo\
    \ \"$in_string\"\n    brackets=\"$in_string\"\n    # echo \"$brackets\"\n  fi\n\
    \  # echo \"$brackets\"\n  # echo \"$in_string\"\n  # echo \"$in_string does not\
    \ match\"\n  # echo \"$in_string does not match\"\n  case \"$in_string\" in\n\
    \    <<<*<*) \n      echo \"true\" ;;\n    *<<<*)\n      echo \"false\" ;;\n \
    \   *)\n      echo \"error\" ;;\n  esac\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv1gw8y8e.sh: line 20: syntax error in conditional expression: unexpected
    token `>''

    /tmp/tmpv1gw8y8e.sh: line 20: syntax error near `(.*[^<>])>''

    /tmp/tmpv1gw8y8e.sh: line 20: `  if [[ "$in_string" =~ (.*[^<>])> ]]; then''

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"${1}\"\n  local\
    \ open=\"${brackets%%[^<>]*}\"\n  local close=\"${brackets##*[^<>]}\"\n  if [[\
    \ \"$open\" != \"$close\" ]]; then\n    return 1\n  fi\n  return 0\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local string=$1\n    local brackets=${string:0:1}\n\
    \n    local i=1\n    while (( i <= ${#string} )) ; do\n        local current=${string:i:1}\n\
    \        local next=${string:i:1}\n\n        if (( ${brackets:0:1} == ${current}\
    \ )) ; then\n            local i=$(( i + 2 ))\n        else\n            if ((\
    \ ${brackets:0:1} == \"<\" )) ; then\n                local i=$(( i + 2 ))\n \
    \           else\n                if (( ${brackets:0:1} == \">\" )) ; then\n \
    \                   local i=$(( i + 2 ))\n                else\n             \
    \       (( i++ ))\n                fi\n            fi\n        fi\n\n        if\
    \ (( ${#brackets} != ${i} )) ; then\n            echo \"false\"\n            exit\
    \ 0\n        fi\n    done\n\n    echo \"true\"\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp80w1ap8i.sh: line 23: ((: < == > : syntax error: operand expected
    (error token is "< == > ")

    /tmp/tmp80w1ap8i.sh: line 26: ((: < == < : syntax error: operand expected (error
    token is "< == < ")

    /tmp/tmp80w1ap8i.sh: line 29: ((: < == > : syntax error: operand expected (error
    token is "< == > ")

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  echo \"$1\" | sed -e 's/<[^>]*>//g'\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"${1}\"\n   \
    \ # $2 is what to compare it to\n    local value=\"${2}\"\n    # replace << and\
    \ >> with <> and >\n    brackets=$(sed -e \"s/<</<>/g\" -e \"s/>>/>/g\" <<< \"\
    $brackets\")\n\n    # find every opening bracket\n    local opening_brackets=$(grep\
    \ \"\\[\" <<< \"$brackets\")\n\n    # find every closing bracket\n    local closing_brackets=$(grep\
    \ \"\\]\" <<< \"$brackets\")\n\n    # compare brackets\n    local num_opening_brackets=$(grep\
    \ -c \"\\[\" <<< \"$brackets\")\n    local num_closing_brackets=$(grep -c \"\\\
    ]\" <<< \"$brackets\")\n\n    if [[ \"${num_opening_brackets}\" != \"${num_closing_brackets}\"\
    \ ]]; then\n        return 0\n    elif [[ \"${num_opening_brackets}\" == \"${num_closing_brackets}\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  # first we must determine the number\
    \ of brackets\n  local brackets=$(echo $1 | wc -m)\n\n  # now we must count the\
    \ number of open brackets, closing brackets\n  # and matching closing brackets\n\
    \  local openbrackets=0\n  local closebrackets=0\n  local matchingbrackets=0\n\
    \  local currentbracket=\"\"\n  while read -r currentline\n  do\n    if [[ \"\
    $currentline\" =~ \\<\\> ]]\n    then\n      if [[ \"$currentbracket\" =~ \\<\\\
    > ]]\n      then\n        matchingbrackets=$((matchingbrackets + 1))\n      else\n\
    \        openbrackets=$((openbrackets + 1))\n      fi\n    elif [[ \"$currentline\"\
    \ =~ \\<\\( ]]\n    then\n      if [[ \"$currentbracket\" =~ \\<\\( ]]\n     \
    \ then\n        matchingbrackets=$((matchingbrackets + 1))\n      else\n     \
    \   closebrackets=$((closebrackets + 1))\n      fi\n    elif [[ \"$currentline\"\
    \ =~ \\<\\) \\> ]]\n    then\n      if [[ \"$currentbracket\" =~ \\<\\) \\> ]]\n\
    \      then\n        matchingbrackets=$((matchingbrackets + 1))\n      else\n\
    \        matchingbrackets=$((matchingbrackets + 1))\n        closebrackets=$((closebrackets\
    \ + 1))\n      fi\n    fi\n    currentbracket=$currentline\n  done < <(echo \"\
    $1\")\n\n  # now we must compare the count with brackets\n  (( closebrackets ==\
    \ brackets ))\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxzeexpq8.sh: line 42: syntax error in conditional expression

    /tmp/tmpxzeexpq8.sh: line 42: syntax error near `\>''

    /tmp/tmpxzeexpq8.sh: line 42: `    elif [[ "$currentline" =~ \<\) \> ]]''

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ input=\"$2\"\n    if [[ $input =~ $brackets ]]; then\n\twhile [[ $input =~ $brackets\
    \ ]]; do\n\t    if [[ \"$input\" =~ $brackets ]]; then\n\t\t# double brackets,\
    \ not allowed!\n\t\treturn 1\n\t    fi\n\t    local i=$(( ${#brackets}+1 ))\n\t\
    \    input=${input/$brackets/${brackets:0:$i}}\n\tdone\n\treturn 0\n    fi\n \
    \   return 1\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local bracket_string=$1\n   \
    \ local num_open_brackets=0\n    local num_close_brackets=0\n    local correct_brackets=false\n\
    \n    echo $bracket_string | while read bracket\n    do\n        echo \" bracket:\
    \ $bracket\"\n        if [ $bracket == \"<\" ]\n        then\n            num_open_brackets=$((\
    \ num_open_brackets + 1 ))\n        elif [ $bracket == \">\" ]\n        then\n\
    \            num_close_brackets=$(( num_close_brackets + 1 ))\n        elif [\
    \ $bracket == \"<>\" ]\n        then\n            num_open_brackets=$(( num_open_brackets\
    \ + 1 ))\n            num_close_brackets=$(( num_close_brackets + 1 ))\n     \
    \   elif [ $bracket == \"<<<\" ] || [ $bracket == \"<<<\\\" ]\n        then\n\
    \            num_open_brackets=$(( num_open_brackets + 1 ))\n            num_close_brackets=$((\
    \ num_close_brackets + 1 ))\n        elif [ $bracket == \"<<<\\'\" ]\n       \
    \ then\n            num_open_brackets=$(( num_open_brackets + 1 ))\n         \
    \   num_close_brackets=$(( num_close_brackets + 1 ))\n        elif [ $bracket\
    \ == \"<\\'\" ]\n        then\n            num_open_brackets=$(( num_open_brackets\
    \ + 1 ))\n            num_close_brackets=$(( num_close_brackets + 1 ))\n     \
    \   elif [ $bracket == \"<<\\'\" ]\n        then\n            num_open_brackets=$((\
    \ num_open_brackets + 1 ))\n            num_close_brackets=$(( num_close_brackets\
    \ + 1 ))\n        elif [ $bracket == \"<\\'\\'\" ]\n        then\n           \
    \ num_open_brackets=$(( num_open_brackets + 1 ))\n            num_close_brackets=$((\
    \ num_close_brackets + 1 ))\n        elif [ $bracket == \"<\\'\\'\\\"\" ]\n  \
    \      then\n            num_open_brackets=$(( num_open_brackets + 1 ))\n    \
    \        num_close_brackets=$(( num_close_brackets + 1 ))\n        elif [ $bracket\
    \ == \"<\\'\\'\\'\" ]\n        then\n            num_open_brackets=$(( num_open_brackets\
    \ + 1 ))\n            num_close_brackets=$(( num_close_brackets + 1 \n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmpwsufr310.sh: line 60: unexpected EOF while looking for matching\
    \ `)'\n/tmp/tmpwsufr310.sh: line 84: syntax error: unexpected end of file\n/tmp/tmpwsufr310.sh:\
    \ line 84: warning: here-document at line 84 delimited by end-of-file (wanted\
    \ `' ]\n        then\n            num_open_brackets=$(( num_open_brackets + 1\
    \ ))\n            num_close_brackets=$(( num_close_brackets + 1 ))\n        elif\
    \ [ $bracket == ')\n"
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local open=\"${1}\"\n    local\
    \ close=\"${2}\"\n    local length=\"${#1}\"\n    local index=0\n    local opening_brackets=\"\
    \"\n    local closing_brackets=\"\"\n    while [ $index -lt $length ]; do\n  \
    \      case \"${1}[$index]\" in\n            $open)\n                opening_brackets=\"\
    ${opening_brackets}<\"\n            ;;\n            $close)\n                closing_brackets=\"\
    ${closing_brackets}>\"\n            ;;\n            *)\n                echo \"\
    false\"\n                return 1\n            ;;\n        esac\n        index=$((index+1))\n\
    \    done\n    echo \"${opening_brackets}${closing_brackets}\" >> \"$HOME/.brackets\"\
    \n    echo \"$HOME/.brackets\"\n    return 0\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local bracket_string=\"${1}\"\n\
    \  local brackets=$(echo \"${bracket_string}\" | tr \">\" \"<\" | sed \"s/<[<>]/true/g\"\
    \ | sed \"s/>[<>]/false/g\")\n  echo \"${brackets}\"\n  echo \"${brackets}\" |\
    \ grep -q 'false'\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local bracket_stack=$1\n  local\
    \ in_quotes=$2\n  local bracket_count=$3\n  if [ $bracket_count -gt 0 ]; then\n\
    \    local last_char=$4\n  else\n    local last_char=$bracket_stack\n  fi\n  local\
    \ bracket_count=$((bracket_count - 1))\n  if [[ $bracket_stack == \\<* ]]; then\n\
    \    if [[ $last_char == \"(\" ]] || [[ $last_char == \")\" ]]; then\n      return\
    \ 0\n    else\n      echo \"false\"\n      return 1\n    fi\n  elif [[ $bracket_stack\
    \ == \\>* ]]; then\n    if [[ $last_char == \"(\" ]] || [[ $last_char == \")\"\
    \ ]]; then\n      return 0\n    else\n      echo \"true\"\n      return 1\n  \
    \  fi\n  fi\n  echo \"true\"\n  return 1\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpftwp4r5b.sh: line 18: [: -gt: unary operator expected

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local bracket_match=\"$1\"\n\
    \    echo \"$bracket_match\" | egrep -c \"\\<\\<\"\n    echo \"$bracket_match\"\
    \ | egrep -c \"\\>\\>\"\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"<\"\n  local brackets_count=\"\
    $(echo $brackets | wc -m)\"\n  local string=\"$1\"\n  local escaped_string=\"\
    ${string//\\\\/\\\\\\\\}\"\n  local string_count=\"$(echo $escaped_string | wc\
    \ -m)\"\n  if [[ \"$string_count\" == \"$brackets_count\" ]]; then\n    return\
    \ 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local string=$1\n  local bracket_count=0\n\
    \  local prev_chr=\"\"\n  local string_to_find=$string\n  local correct_found=\"\
    false\"\n  while [ \"${string_to_find}\" != \"\" ]; do\n    local next_chr=${string_to_find:0:1}\n\
    \    local chr=${string_to_find:1:1}\n    if [ \"${chr}\" == \"<\" ]; then\n \
    \     bracket_count=$(( bracket_count + 1 ))\n    fi\n    if [ \"${chr}\" == \"\
    >\" ]; then\n      bracket_count=$(( bracket_count - 1 ))\n    fi\n    if [ \"\
    ${chr}\" == \"<\" ]&&[ \"${bracket_count}\" -eq 0 ]; then\n      correct_found=\"\
    true\"\n      break\n    elif [ \"${chr}\" == \">\" ]&&[ \"${bracket_count}\"\
    \ -gt 0 ]; then\n      correct_found=\"false\"\n      break\n    elif [ \"${chr}\"\
    \ == \"<\" ]&&[ \"${bracket_count}\" -eq 1 ]; then\n      correct_found=\"false\"\
    \n      break\n    elif [ \"${chr}\" == \">\" ]&&[ \"${bracket_count}\" -lt 1\
    \ ]; then\n      correct_found=\"false\"\n      break\n    fi\n    string_to_find=${string_to_find:2};\n\
    \  done\n  echo \"${correct_found}\"\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n\tlocal brackets='${1}'\n\tlocal\
    \ open='^<('\n\tlocal close='^>)'\n\twhile read -r line; do\n\t\tprintf '%s\\\
    n' \"$line\" | egrep -q \"$open\"\n\t\tif [ $? -ne 0 ]; then\n\t\t\tprintf 'false\\\
    n'\n\t\t\treturn 1\n\t\telse\n\t\t\tprintf 'true\\n'\n\t\tfi\n\tdone < <(sed \"\
    s#\\($open\\)#$close#\" <<< \"$brackets\")\n\treturn 0\n}\n\ncandidate() {\n \
    \   correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: Unmatched ( or \(

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: -1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local bracket_string=$1\n  local\
    \ opening_brackets=()\n  local closing_brackets=()\n\n  for bracket in ${bracket_string};\
    \ do\n    opening_brackets+=($bracket)\n  done\n\n  while [[ ${#opening_brackets[@]}\
    \ -gt 0 ]]; do\n    local current_bracket=${opening_brackets[0]}\n    local opening_brackets_count=1\n\
    \    for opening_bracket in \"${opening_brackets[@]}\"; do\n      if [[ \"$opening_bracket\"\
    \ != \"$current_bracket\" ]]; then\n        opening_brackets_count=$(expr $opening_brackets_count\
    \ + 1)\n      fi\n    done\n\n    if [[ \"$opening_brackets_count\" -eq \"$opening_brackets_count\"\
    \ ]]; then\n      closing_brackets+=($current_bracket)\n      opening_brackets=()\n\
    \    fi\n\n    opening_brackets+=($current_bracket)\n  done\n\n  for closing in\
    \ ${closing_brackets[@]}; do\n    [[ -z \"${closing_brackets[@]}\" ]] && return\
    \ 1\n  done\n\n  return 0\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=34 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=7 encoding='utf-8'>
  timestamp: 1660056084
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local string=\"$1\"\n    # Remove\
    \ all unnecessary spaces and tabs\n    string=${string//[[:space:]]/}\n    string=${string//$'\\\
    t'//}\n    string=${string//$'\\n'//}\n    # Count opening and closing brackets\n\
    \    local brackets=0\n    while [[ \"$string\" =~ \\<(.*\\)> ]]; do\n       \
    \ brackets=$(( ${BASH_REMATCH[1]} + ${brackets} ))\n        string=${BASH_REMATCH[2]}\n\
    \    done\n    # Return true if all brackets are balanced\n    if [[ ${brackets}\
    \ -eq 0 ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5bja024u.sh: line 22: unexpected EOF while looking for matching
    `)''

    /tmp/tmp5bja024u.sh: line 55: unexpected argument to conditional binary operator

    /tmp/tmp5bja024u.sh: line 55: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets='('\n  if [ $1 ]\n\
    \  then\n    for i in $1\n    do\n      if [ $i ]\n      then\n        brackets=$(brackets\
    \ $(echo $brackets | sed \"s/$i/$i\\</g\"))\n      else\n        brackets=$(brackets\
    \ $i)\n      fi\n    done\n  fi\n  echo $(brackets | sed \"s/\\>/\\>\\</g\")\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjhju06g8.sh: line 22: brackets: command not found

    /tmp/tmpjhju06g8.sh: line 28: brackets: command not found

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"${1}\"\n   \
    \ local bracket_count=0\n    local i\n    bracket_count=$( echo \"${brackets}\"\
    \ | wc -l )\n    for i in \"${brackets}\"; do\n        if [ \"$i\" = \"$brackets\"\
    \ ]; then\n            return 0\n        fi\n        if [ \"${i%?}\" != \"$brackets\"\
    \ ]; then\n            return 1\n        fi\n    done\n    if [ \"$bracket_count\"\
    \ -eq \"$brackets\" ]; then\n        return 0\n    else\n        return 1\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  # escape some special characters\
    \ in the brackets\n  local brackets=$(echo $1 | sed -e 's/[]\\/$*^|[]/\\\\&/g'\
    \ -e 's/[><]/\\\\&/g')\n\n  # for each opening bracket ...\n  for opening in ${brackets};\
    \ do\n\n    # ... check whether it is followed by a closing bracket\n    [[ -z\
    \ $3 ]] && return 1\n\n    if [[ $opening == $3 ]]; then\n      # if they are\
    \ equal, then they are correct\n      return 0\n    fi\n  done\n\n  # if the loop\
    \ is exited without returning, then they are not correct.\n  return 1\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=${1}\n    local\
    \ result=true\n    local idx=0\n    local closing_brackets=\"\"\n    local open_bracket=\"\
    \"\n    local opening_brackets=\"\"\n    while [[ \"$1\" != \"\" ]]; do\n    \
    \    if [[ \"$1\" = \">\" || \"$1\" == \"<\" || \"$1\" == \"<=\" || \"$1\" ==\
    \ \"<=\" ]]; then\n            result=false\n        fi\n        if [[ \"$1\"\
    \ = \"<\" ]]; then\n            open_bracket=$1\n        fi\n        if [[ \"\
    $1\" = \">\" ]]; then\n            closing_brackets=$closing_brackets\"$1\"\n\
    \        fi\n        shift\n    done\n    for ((idx=0; idx<${#closing_brackets};\
    \ idx+=1))\n    do\n        if [[ ${closing_brackets:$idx} = ${open_bracket} ]]\
    \ ; then\n            if [[ \"$open_bracket\" != \"\" ]] ; then\n            \
    \    opening_brackets=$opening_brackets$open_bracket\n            fi\n       \
    \ fi\n    done\n    if [[ \"$open_bracket\" != \"\" ]] ; then\n        opening_brackets=$opening_brackets$open_bracket\n\
    \    fi\n    if [[ \"$result\" = false ]] ; then\n        echo \"$brackets\" |\
    \ while read line; do\n            echo \"$line \"\n        done\n        echo\
    \ \"$opening_brackets\"\n        echo \"$closing_brackets\"\n        echo \"$open_bracket\"\
    \n        echo \"$closing_brackets\"\n    else\n        echo \"$brackets\" | while\
    \ read line; do\n            echo \"$line \"\n        done\n        echo \"$opening_brackets\"\
    \n        echo \"$closing_brackets\"\n        echo \"$open_bracket\"\n    fi\n\
    \    shift\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets\n    brackets=\"\
    ${1}\"\n    while read -r char; do\n        if [[ $char == \\\"<* ]]; then\n \
    \           [[ \"$brackets\" != \\\">>\\\"\" ]] || return 1\n        elif [[ $char\
    \ == \\\">>\\\" ]]; then\n            [[ \"$brackets\" == \\\"<>\\\"\" ]] || return\
    \ 1\n        fi\n    done\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcgcjr_47.sh: line 18: syntax error in conditional expression: unexpected
    token `<''

    /tmp/tmpcgcjr_47.sh: line 18: syntax error near `\"<*''

    /tmp/tmpcgcjr_47.sh: line 18: `        if [[ $char == \"<* ]]; then''

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local i=0\
    \ j=0\n  while [ $i -lt ${#brackets} ]\n  do\n    local c=${brackets:$i:1}\n \
    \   if [ $c == \"<\" ];\n    then\n      if [ ${brackets:$((i+1)),1} == \">\"\
    \ ];\n      then\n        # match found\n        i=$((i+2))\n      else\n    \
    \    false\n      fi\n    elif [ $c == \"<\" ];\n    then\n      if [ ${brackets:$((j+1)),1}\
    \ == \">\" ];\n      then\n        # match found\n        j=$((j+2))\n      else\n\
    \        false\n      fi\n    elif [ $c == \">\" ];\n    then\n      if [ ${brackets:$i,1}\
    \ == \"<\" ];\n      then\n        # match found\n        i=$((i+2))\n      else\n\
    \        false\n      fi\n    else\n      false\n    fi\n  done\n  true\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets\n    brackets=\"\
    $1\"\n\n    local opening_bracket=false\n    local closing_bracket=false\n   \
    \ local opening_brackets\n    local closing_brackets\n    local count\n    local\
    \ bracket\n    local result\n    local bracket_count\n    local bracket_count2\n\
    \    local bracket_count3\n    local bracket_count4\n    local bracket_count5\n\
    \    local bracket_count6\n    local bracket_count7\n    local bracket_count8\n\
    \    local bracket_count9\n    local bracket_count10\n\n    opening_brackets=$(grep\
    \ \"$brackets\" <<< \"$(echo \"$brackets\" | tr \" \" \"\\n\")\" | wc -l)\n  \
    \  closing_brackets=$(grep \"$brackets\" <<< \"$(echo \"$brackets\" | tr \" \"\
    \ \"\\n\")\" | wc -l)\n\n    if [ \"${opening_brackets}\" -eq 0 ]; then\n    \
    \    result=\"false\"\n    else\n        result=\"true\"\n    fi\n\n    if [ \"\
    ${closing_brackets}\" -eq 0 ]; then\n        result=\"${result}\"\n    else\n\
    \        result=\"${result}\"\n    fi\n\n    return ${result}\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3kyu4e7x.sh: line 51: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local open_brackets=$1\n  local\
    \ closing_brackets=$2\n  [[ \"$open_brackets\" =~ ^<.*>$ ]] || return 1\n  [[\
    \ \"$closing_brackets\" =~ ^<.*>$ ]] || return 1\n  local brackets=$open_brackets\n\
    \  while [[ \"$brackets\" =~ <([[:alnum:]])*> ]]; do\n    if [[ \"$brackets\"\
    \ =~ ^<.*>$ ]]; then\n      brackets=${brackets%><}\n      brackets=${brackets#<}\n\
    \      brackets=\"${brackets%><}\"\n      brackets=\"${brackets#<}\"\n    else\n\
    \      brackets=${brackets%><}\n      brackets=${brackets#<}\n      brackets=\"\
    ${brackets%><}\"\n      brackets=\"${brackets#<}\"\n    fi\n  done\n  echo \"\
    $brackets\" | grep -qw \"[<>]\"\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaebt_d89.sh: line 17: syntax error in conditional expression: unexpected
    token `<''

    /tmp/tmpaebt_d89.sh: line 17: syntax error near `^<.''

    /tmp/tmpaebt_d89.sh: line 17: `  [[ "$open_brackets" =~ ^<.*>$ ]] || return 1''

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=${1}\n    # count\
    \ the brackets and check\n    for (( c=1; c<${#brackets}; c++ ))\n    do\n   \
    \     local opening=${brackets:c-1:1}\n        if [[ ${opening} == ${closing}\
    \ ]]\n        then\n            echo \"false\"\n            return 0\n       \
    \ fi\n    done\n    echo \"true\"\n    return 1\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"${1}\"\n  local\
    \ bracket\n  for bracket in \"${brackets}\"; do\n    if [[ \"${bracket}\" != \"\
    <\" && \"${bracket}\" != \">\" ]]; then\n      echo \"error: incorrectly formatted\
    \ bracketing: ${brackets}\"\n      exit 1\n    fi\n  done\n  return 0\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local bracket_list=$1\n    local\
    \ i\n    for i in $(seq 0 $((${#bracket_list} - 1))); do\n        if [[ ${bracket_list:$i:1}\
    \ == <* ]]; then\n            # correct bracket\n            return 1\n      \
    \  elif [[ ${bracket_list:$i:1} == >* ]]; then\n            # incorrect bracket\n\
    \            return 0\n        fi\n    done\n    # no brackets found\n    return\
    \ 1\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptmtktz0k.sh: line 18: unexpected argument `<'' to conditional binary
    operator

    /tmp/tmptmtktz0k.sh: line 18: syntax error near `<*''

    /tmp/tmptmtktz0k.sh: line 18: `        if [[ ${bracket_list:$i:1} == <* ]]; then''

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local input=$1\n    local brackets='('\
    \ ')' '[' ']' '<' '>'\n    local closing_brackets='(  )' '[ ]' '< >'\n    local\
    \ opening=${input//</ }\n    local closing=${input//>/ }\n    local correct=$(\
    \ echo $opening | tr ' ' '\\n' | grep -Fq $brackets ) && \\\n        $( echo $closing\
    \ | tr ' ' '\\n' | grep -Fq $brackets )\n    return $( echo $correct )\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmvfpu9zb.sh: line 16: local: `)'': not a valid identifier

    /tmp/tmpmvfpu9zb.sh: line 16: local: `['': not a valid identifier

    /tmp/tmpmvfpu9zb.sh: line 16: local: `]'': not a valid identifier

    /tmp/tmpmvfpu9zb.sh: line 16: local: `<'': not a valid identifier

    /tmp/tmpmvfpu9zb.sh: line 16: local: `>'': not a valid identifier

    /tmp/tmpmvfpu9zb.sh: line 17: local: `[ ]'': not a valid identifier

    /tmp/tmpmvfpu9zb.sh: line 17: local: `< >'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    for ((\
    \ c=0; c<${#brackets}; c++ )); do\n        local opening=${brackets:c:1}\n   \
    \     if [[ ${opening} == \"<\" ]]; then\n            local closing=${brackets:c:2}\n\
    \            if [[ ${closing} == \">\" ]]; then\n                return 0\n  \
    \          else\n                return 1\n            fi\n        else\n    \
    \        return 1\n        fi\n    done\n    return 1\n}\n\ncandidate() {\n  \
    \  correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"${1}\"\n   \
    \ local bracket=\"<<\"\n    for i in $(seq 1 ${#brackets}); do\n        if [[\
    \ ${brackets:$i:1} =~ ^<.* ]]; then\n            bracket=\"<\"\n        else\n\
    \            bracket=\">\"\n        fi\n        if [[ ${brackets:$i:1} =~ (.)\\\
    1$ ]]; then\n            echo \"false\"\n        fi\n    done\n    echo \"true\"\
    \n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpidehow6e.sh: line 18: syntax error in conditional expression: unexpected
    token `<''

    /tmp/tmpidehow6e.sh: line 18: syntax error near `^<.''

    /tmp/tmpidehow6e.sh: line 18: `        if [[ ${brackets:$i:1} =~ ^<.* ]]; then''

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: -1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ bracket_num=1\n    while [[ \"$brackets\" = \"$(bracket_num)\"* ]]; do\n   \
    \     local bracket_num=$(expr $bracket_num + 1)\n    done\n\n    if [[ \"$brackets\"\
    \ = \"$(bracket_num)\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=52 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=38 encoding='utf-8'>
  timestamp: 1660056084
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n\tlocal string=\"$1\"\n\tlocal brackets=$(echo\
    \ \"$string\" | tr '<' '[')\n\tlocal found=$(echo \"$string\" | grep \"$brackets\"\
    \ | wc -l)\n\tlocal correct=$(echo \"$brackets\" | grep '^\\[')\n\t[[ $found -eq\
    \ $correct ]] || return 1\n\tlocal closing=$(echo \"$brackets\" | grep '^\\]')\n\
    \t[[ $found -eq $closing ]] || return 1\n\treturn 0\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'grep: Unmatched [, [^, [:, [., or [=

    /tmp/tmpkkof82ny.sh: line 19: [[: [>: syntax error: operand expected (error token
    is "[>")

    '
  stdout: ''
  timestamp: 1660056079
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ opens=$(echo $brackets | cut -d '<' -f1)\n    local closes=$(echo $brackets\
    \ | cut -d '>' -f1)\n    local result=0\n    if [ \"$opens\" != \"\" ] && [ \"\
    $closes\" != \"\" ]; then\n        for open in $opens; do\n            for close\
    \ in $closes; do\n                let result+=1\n            done\n        done\n\
    \        if [ $result -eq $opens ]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660056079
