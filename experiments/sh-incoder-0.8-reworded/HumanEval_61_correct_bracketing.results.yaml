language: sh
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local str=$1\n    local brackets=\"\
    (\"\n    local count=0\n    local open_brackets=0\n\n    local i=0\n    while\
    \ [ $i -lt ${#str} ]; do\n        if [[ ${str[i]} == $brackets ]]; then\n    \
    \        if [[ ${str[i+1]} == $brackets ]]; then\n                count=$((count\
    \ + 1))\n                if [[ ${count} == 1 ]]; then\n                    open_brackets=$((open_brackets\
    \ + 1))\n                else\n                    open_brackets=0\n         \
    \           count=0\n                fi\n            else\n                count=0\n\
    \            fi\n        fi\n\n        i=$((i + 1))\n    done\n\n    if [[ ${open_brackets}\
    \ -eq 1 ]]; then\n        return \"true\"\n    else\n        return \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpf12hcl70.sh: line 42: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660055322
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  # remove brackets\n  brackets=${1//[(){}]//}\n\
    \  if [ \"$brackets\" == \"\" ]\n  then\n    false\n  else\n    # count brackets\n\
    \    num_brackets=${brackets//[//}\n    # count opening brackets\n    num_opening_brackets=${#brackets}\n\
    \    # count closing brackets\n    num_closing_brackets=0\n    brackets_array=()\n\
    \    for bracket in $brackets\n    do\n      brackets_array+=(\"$bracket\")\n\
    \    done\n    for bracket in \"${brackets_array[@]}\"\n    do\n      bracket_count=${bracket//[//}\n\
    \      if [ ${#bracket} == 1 ]\n      then\n        if [ \"$bracket\" == \"$brackets_array[0]\"\
    \ ]\n        then\n          num_closing_brackets=$((num_closing_brackets+1))\n\
    \        fi\n      fi\n    done\n    # return result\n    if [ ${#brackets} ==\
    \ 1 ]\n    then\n      true\n    elif [[ ${num_opening_brackets} == $num_closing_brackets\
    \ ]]\n    then\n      true\n    else\n      false\n    fi\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660055322
