name: HumanEval_66_digitSum
language: sh
prompt: "#!/bin/bash\n# Task\n# Write a function that takes a string as input and\
  \ returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n#\
  \ >>> $(digitSum \"\")\n# \"0\"\n# >>> $(digitSum \"abAB\")\n# \"131\"\n# >>> $(digitSum\
  \ \"abcCd\")\n# \"67\"\n# >>> $(digitSum \"helloE\")\n# \"69\"\n# >>> $(digitSum\
  \ \"woArBld\")\n# \"131\"\n# >>> $(digitSum \"aAaaaXa\")\n# \"153\"\n#\n# $1 is\
  \ a string\ndigitSum() {\n"
tests: "}\n\ncandidate() {\n    digitSum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abAB\") = \"131\" ]]\n    [[\
  \ $(candidate \"abcCd\") = \"67\" ]]\n    [[ $(candidate \"helloE\") = \"69\" ]]\n\
  \    [[ $(candidate \"woArBld\") = \"131\" ]]\n    [[ $(candidate \"aAaaaXa\") =\
  \ \"153\" ]]\n    [[ $(candidate \" How are yOu?\") = \"151\" ]]\n    [[ $(candidate\
  \ \"You arE Very Smart\") = \"327\" ]]\n}\n\nrun_test"
completions: ["\tstr=$(echo \"$1\" | sed 's/[^0-9]//g')\n\tnum=$(echo \"$str\" | wc\
    \ -l)\n\tnum=$((num - 1))\n\tsum=$((num % 10))\n\tsum=$((sum + 48))\n\techo $((sum))",
  "  local sum=0\n  local char\n  while [[ \"$1\" != \"\" ]]; do\n    char=\"$1\"\n\
    \    sum=$(( $sum + $(expr \"$char\" : \"[0-9]*\") ))\n    shift\n  done\n  echo\
    \ \"$sum\"", "    sum=0\n    for (( i=0; i<${#1}; i++ )); do\n        digit=$(echo\
    \ \"${1:${i:1}}\"|awk '{print ($1+0)}')\n        ((sum+=digit))\n    done\n  \
    \  echo \"${sum}\"", "\tsum=0\n\tfor (( c=0; c<${#1}; c++ )); do\n\t\tif [ \"\
    ${1:$c:1}\" == \"A\" ] || [ \"${1:$c:1}\" == \"B\" ] || [ \"${1:$c:1}\" == \"\
    C\" ] || [ \"${1:$c:1}\" == \"D\" ] || [ \"${1:$c:1}\" == \"E\" ] || [ \"${1:$c:1}\"\
    \ == \"F\" ] || [ \"${1:$c:1}\" == \"G\" ] || [ \"${1:$c:1}\" == \"H\" ] || [\
    \ \"${1:$c:1}\" == \"I\" ] || [ \"${1:$c:1}\" == \"J\" ] || [ \"${1:$c:1}\" ==\
    \ \"K\" ] || [ \"${1:$c:1}\" == \"L\" ] || [ \"${1:$c:1}\" == \"M\" ] || [ \"\
    ${1:$c:1}\" == \"N\" ] || [ \"${1:$c:1}\" == \"O\" ] || [ \"${1:$c:1}\" == \"\
    P\" ] || [ \"${1:$c:1}\" == \"Q\" ] || [ \"${1:$c:1}\" == \"R\" ] || [ \"${1:$c:1}\"\
    \ == \"S\" ] || [ \"${1:$c:1}\" == \"T\" ] || [ \"${1:$c:1}\" == \"U\" ] || [\
    \ \"${1:$c:1}\" == \"V\" ] || [ \"${1:$c:1}\" == \"W\" ] || [ \"${1:$c:1}\" ==\
    \ \"X\" ] || [ \"${1:$c:1}\" == \"Y\" ] || [ \"${1:$c:1}\" == \"Z\" ]; then\n\t\
    \t\tsum=$(( sum+${1:$c:1} ))\n\t\telse\n\t\t\tsum=$(( sum+10 ))\n\t\tfi\n\tdone\n\
    \techo \"$sum\"", "    local i\n    local sum=0\n    for i in $(echo $1 | cut\
    \ -c1-3); do\n        sum=$((sum + ${i}))\n    done\n    echo $sum", "  echo $(echo\
    \ ${1} | sed \"s/^.*\\(.\\).*$/\\1/\" | tr '[:upper:]' '[:lower:]' | awk '{print\
    \ +0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0+0",
  "  # Convert the first character to an ASCII number\n  # (it's ASCII code is `$(echo\
    \ \"$1\" | awk '{print \\$1}')`\n  local sum=$(echo \"$1\" | awk '{print \\$1;\
    \ exit}')\n\n  # Go through the rest of the string\n  local char=$2\n  while [\
    \ \"$char\" ]; do\n    local next_char=$(awk \"BEGIN {print toupper(${char})}\"\
    )\n    sum=$(echo \"$sum + ${next_char}\" | bc)\n    char=$next_char\n  done\n\
    \  echo \"$sum\"", "    local sum=0\n    local str=\"${1}\"\n    for ((i=0; i<${#str};\
    \ i++)); do\n        sum=$((sum+${str:$i:1} ))\n    done\n    echo \"$sum\"",
  "    local sum=0\n    for (( i=0;i<${#1}; i++));\n    do\n        sum=$((${sum}+${1:i:2}))\n\
    \    done\n    echo \"${sum}\"", "    local _sum=$((${#1} - 1))\n    for (( n=1;\
    \ n<${#1}; n++ )); do\n        _sum=$((${_sum}+${#1}:$((n-1)):1))\n    done\n\
    \    echo \"$((${_sum}+48))\"", "  local sum=0\n  for i in ${1}; do\n    [[ \"\
    $i\" =~ [[:digit:]]]]\n    [[ ${BASH_REMATCH[1]} -ge 48 && ${BASH_REMATCH[1]}\
    \ -le 57 ]]\n    sum=$(( $sum + ${BASH_REMATCH[1]} ))\n  done\n  echo \"$sum\"",
  "    local str=$1\n    local sum=0\n    local c\n    local i\n    local max=0\n\
    \    for ((i=0; i<${#str}; i++)); do\n        local c=${str:$i:1}\n        ((\
    \ c >= 48 )) && max=$(( max+c ))\n    done\n    for ((i=0; i<${#str}; i++)); do\n\
    \        local c=${str:$i:1}\n        (( c < 48 )) && sum=$(( sum+c ))\n    done\n\
    \    echo $(( sum+max ))", "    local string=\"$1\"\n    local sum=0\n    for\
    \ (( i=1 ; i<=\"${#string}\" ; i++ )); do\n        local c=\"${string:$i:1}\"\n\
    \        if [ \"$c\" == \"A\" -o \"$c\" == \"a\" ]; then\n            sum=$((sum\
    \ + 10))\n        fi\n    done\n    echo \"$sum\"", "    echo $1 | sed -r 's/([^[:alnum:]]|[[:punct:]])([[:digit:]]+)([[:alpha:]]*)([[:punct:]])/\\\
    1+\\2+\\3+\\4/'", "    sum=0\n    for i in $1;\n    do\n        let \"sum+=${i%?}\"\
    \n    done\n    echo \"$sum\"", "  local string=\"${1}\"\n  local sum=0\n  local\
    \ i\n\n  for (( i = 0; i < ${#string}; i++ )); do\n    sum=${sum}+${#string}\n\
    \  done\n\n  echo ${sum}", "  local digit=\"$1\"\n  local sum=0\n  for i in $((${#digit}\
    \ - 1)); do\n    digit=${digit:$i:1}\n    (( sum += ((\"$i\" < 10 and \"$i\" >\
    \ 0) ? \"$i\" : \"$i\" + 10)))\n  done\n  echo ${digit:$((${#digit} - 1)):1}",
  "  local sum\n  sum=$(echo $1 | sed 's/[[:upper:]]//g')\n  echo ${sum}", "  echo\
    \ $1 | awk -F '' '{\n    for (i=1; i<=NF; i++){\n      if ($i ~ /^[A-Z]/) {\n\
    \        sum+=$i;\n      }\n    }\n    return sum;\n  }'", "    local sum=0\n\
    \    local t=''\n    for (( i=0 ; i<${#1} ; i++ )); do\n        t=${1:$i:1}\n\
    \        if [[ ${t:0:1} == 'A' ]] || [[ ${t:0:1} == 'a' ]]; then\n           \
    \ sum=$(($sum + ${#t}))\n        fi\n    done\n    echo $sum", "\tlocal chars=$1\n\
    \tlocal sum=0\n\tlocal i=0\n\twhile [[ \"${chars[i]}\" ]]; do\n\t\tsum=$(( $sum\
    \ + ${chars[i]}))\n\t\ti=$((i+1))\n\tdone\n\techo \"${sum}\"", "  local string\
    \ sum\n  string=${1}\n  sum=0\n  for ((i=0; i<${#string}; i++));\n  do\n    sum=$((sum\
    \ + ${string:i:1}))\n  done\n  echo $sum", "  grep -Eo \"^[^a-z]*|[a-z]*[^a-z]*$\"\
    \ <<< \"$1\" | xargs -n1 sed -E 's/./&+/; s/^/0/; s/[^0]+/&/; s/[^&]0/0/; s/0+$/\\\
    1/'", "    # Your code here\n    sum=0\n    for (( i=0; i<= ${#1}; i++ )); do\n\
    \        if [[ ${1:$i} =~ [a-zA-Z] ]]; then\n            sum=$(( sum + ${1:$i:1}\
    \ ))\n        fi\n    done\n    echo \"${sum}\"", "  local sum=0\n  local string=$1\n\
    \  while [[ ${#string} -gt 0 ]]\n  do\n    ((sum+=${#string}))\n    string=${string:0:${#string}-1}\n\
    \  done\n  echo ${sum}", "  local string=$1\n  local sum=0\n  local i\n  for i\
    \ in {0..9}; do\n    if [[ $i -eq ${#string} ]]; then\n      sum=$((sum + i))\n\
    \      break\n    else\n      sum=$((sum + ${string:$i:1}))\n    fi\n  done\n\
    \  echo \"$sum\"", "  local digit=0\n  local sum=0\n\n  local string=$1\n\n  for\
    \ i in $string; do\n    digit=$(echo $i | tr -cd 0-9)\n    sum=$(echo $digit |\
    \ bc)\n  done\n\n  echo \"$sum\"", "  echo $(echo -n \"$1\" | sed 's/[^[:digit:]]//g'\
    \ | sed 's/^./0/g')", "    echo $1 | awk -F\"[a-z]\" '{sum+=$1}END{print sum}'",
  "        local str=$1\n        local sum=0\n        for i in $str; do\n        \
    \        sum=$((sum + $(expr $((97 + $i)))))\n        done\n        echo $sum",
  "    local digit=\"\"\n    local sum=0\n    for (( i=1; i<=#$1; i++ )); do\n   \
    \     digit=${1:$i:1}\n        sum=$((sum+${#digit}))\n    done\n    echo \"$sum\"",
  "  # Declare a variable called sum and initialize it to 0\n  sum=0\n  # For every\
    \ character in the string $1, add the ASCII code of that character to sum\n  for\
    \ (( i=0;i<${#1};i++)) ; do\n    sum=$((sum+${1:i:1}))\n  done\n  # Return sum\n\
    \  echo ${sum}", "  # your code goes here\n  sum=$(echo $1 | cut -c 1 | sed 's/^\\\
    (........\\)/\\1/g')\n  echo $sum", "  local digits=$(echo $1 | grep -o '[0-9]*')\n\
    \  local sum=$(echo $1 | grep -o '[A-Z]*')\n  sum=$(($sum+$((${#digits}*${#sum}))))\n\
    \  echo \"$sum\"", "  # Convert string to lowercase\n  lower=${1^^}\n  # Sum the\
    \ uppercase characters\n  sum=$(echo \"${lower}\" | sed 's/./& /g' | awk '{ sum\
    \ += $1 }; END { print sum }' | bc)\n  # return result\n  echo \"${sum}\"", " \
    \   local sum=0\n    local str=\"$1\"\n    local i=0\n\n    for ((i=0; i<${#str};\
    \ i++)); do\n        if ((${str:$i:1}>47)) && ((${str:$i:1}<58)); then\n     \
    \       ((sum+=${str:$i:1}))\n        fi\n    done\n\n    echo ${sum}", "  string=$1\n\
    \  # TODO: Assign the return value of this string manipulation to a variable.\n\
    \  sum=0\n  for i in $(seq 0 $((${#string} - 1)))\n  do\n    sum=$((sum + ${string:i:1}))\n\
    \  done\n  echo ${sum}", "    local str=\"$1\"\n    local sum=0\n    for (( i=0;\
    \ i<${#str}; i++ )); do\n        sum+=$(printf \"%c\" $(echo \"${str:$i:1}\" |\
    \ sed 's/.//g'))\n    done\n    echo \"$sum\"", "\tsum=0\n\tfor ((i=0; i< ${#1};\
    \ i++))\n\tdo\n\t\tlet sum+=${1:i:1}\n\tdone\n\treturn $sum", "  local sum=0;\n\
    \  for (( i=0; i<${#1}; i++ )); do\n    sum=$(($sum + ${1:$i:1})); \n  done\n\
    \  echo $sum;", "    local -n sum=\"${1?}\"\n    sum=$(echo \"${sum}\" | sed -e\
    \ 's/^[[:alpha:]]\\+[[:alpha:]]\\+\\+\\([0-9]*\\).*/\\1/' -e 's/^[[:alpha:]]\\\
    +[[:alpha:]]\\+\\+\\([0-9]*\\).*/\\1/' -e 's/^[[:alpha:]]\\+[[:alpha:]]\\+\\+\\\
    ([0-9]*\\).*/\\1/' -e 's/^[[:alpha:]]\\+[[:alpha:]]\\+\\+\\([0-9]*\\).*/\\1/'\
    \ -e 's/^[[:alpha:]]\\+[[:alpha:]]\\+\\+\\([0-9]*\\).*/\\1/' -e 's/^[[:alpha:]]\\\
    +[[:alpha:]]\\+\\+\\([0-9]*\\).*/\\1/' -e 's/^[[:alpha:]]\\+[[:alpha:]]\\+\\+\\\
    ([0-9]*\\).*/\\1/' -e 's/^[[:alpha:]]\\+[[:alpha:]]\\+\\+\\([0-9]*\\).*/\\1/'\
    \ -e 's/^[[:alpha:]]\\+[[:alpha:]]\\+\\+\\([0-9]*\\).*/\\1/' -e 's/^[[:alpha:]]\\\
    +[[:alpha:]]\\+\\+\\([0-9]*\\).*/\\1/' -e 's/^[[:alpha:]]\\+[[:alpha:]]\\+\\+\\\
    ([0-9]*\\).*/\\1/' -e 's/^[[:alpha:]]\\+[[:alpha:]]\\+\\+\\([0-9]*\\).*/\\1/'\
    \ -e 's/^[[:alpha:]]\\+[[:alpha:]]\\+\\+\\([0-9]*\\).*/\\1/' -e 's/^[[:alpha:]]\\\
    +[[:alpha:]]\\+\\+\\([0-9]*\\).*/\\1/' -e 's/^[[:alpha:]]\\+[[:alpha:]]\\+\\+\\\
    ([0-9]*\\).*/\\1/' -e 's/^[[:alpha:]]\\+[[:alpha:]]\\+\\+\\([0-9]*\\).*/\\1/'\
    \ -e 's/^[[:alpha:]]\\+[[:alpha:]]\\+\\+\\([0-9]*\\).*/\\1/' -e 's/^[[:alpha:]]\\\
    +[[:alpha:]]\\+\\+\\([0-9]*\\).*/\\1/' -e 's/^[[:alpha:]]\\+[[:alpha:]]\\+\\+\\\
    ([0-9]*\\).*/\\1/", "  local string=\"$1\"\n  echo $(echo $string | awk '{ print\
    \ $1+$2+$3+$4+$5+$6+$7+$8+$9+$10 }')", "    echo $1 | awk -F'[A-Z]' '{\n     \
    \   sum=0\n        for(i=1;i<=NF;i++)\n        {\n            sum += toupper($i)\n\
    \        }\n    }\n    {\n        printf \"%d\\n\",sum\n    }'", "    if [ -z\
    \ \"$1\" ]; then\n        echo \"0\"\n    fi\n    echo $(( $(echo \"$1\" | tr\
    \ A-Z a-z) | sed -e 's/^ *//' | sed -e 's/^//') ))", "  local sum\n  local len\n\
    \  local i\n\n  echo \"$1\" | tr -dc '0-9'\n  len=\"$(echo \"$1\" | tr -dc '0-9'\
    \ | wc -c)\"\n  for ((i=1; i<=$((len - 1)); i++)); do\n    sum+=\"${1:i:1}\"\n\
    \  done\n\n  echo \"$sum\"", "    local -n s=$1\n    [[ -z \"$1\" ]] && return\
    \ 1\n    local max=0\n    local sum=0\n    # Loop\n    for ((i=0; i < ${#s@};\
    \ i++)); do\n        # Extract ASCII value from string\n        local code=${s:$i:1}\n\
    \        # Check\n        [[ $code =~ ^[0-9]$ ]] || continue\n        # Sum ASCII\
    \ values between 127 and 127 + max ASCII value\n        sum=$((${sum}+$code))\n\
    \        (( ${sum} > max )) && max=$sum\n        (( ${max} == 0 )) && break\n\
    \    done\n    # Return sum\n    echo \"$sum\"", "\tlocal str=\"$1\"\n\tlocal\
    \ sum=0\n\twhile [[ \"$str\" ]]; do\n\t\t((sum+=$(echo \"$str\" | awk '{print\
    \ toupper($0)}') ))\n\t\tstr=${str#?}\n\tdone\n\techo \"$sum\"", "  echo $(\n\
    \    while read x; do\n      printf \"%d\" $(\n        echo $x |\n        sed\
    \ 's/[^[:digit:]]//g' |\n        tr -d '[:digit:]'\n      )\n    done | bc\n \
    \ )", "    sum=0\n    while (( $# > 0 )); do\n        sum=$(( ${1:0:1} + $sum\
    \ ))\n        shift\n    done\n    echo \"$sum\"", "    sum=0\n    for i in $@;\
    \ do\n        sum=$(($sum + $(printf '%b' \"$i\" | grep -o -P '[[:upper:]]' |\
    \ wc -l | xargs)))\n    done\n    echo \"$sum\"", "    local sum=0\n    local\
    \ str=$1\n    local i=0\n    while [ $i -lt ${#str} ] ; do\n        let \"sum\
    \ +=($str[$i])\"\n        let \"i+=1\"\n    done\n    echo \"$sum\"", "  local\
    \ digitSum=0\n  local string=$1\n  local len=${#string}\n  for (( i = 0; i < len;\
    \ i++ )); do\n    digitSum=$(( digitSum + ${string:i:1} ))\n  done\n  echo $digitSum",
  "  sum=0\n  for i in $(echo $1 | rev | sed 's/\\(.*\\)/\\1/' | rev); do\n    [[\
    \ \"$i\" == 0 ]] && break\n    ((sum += $i))\n  done\n  echo $sum", "    local\
    \ result\n\n    if [ \"$1\" == \"\" ]; then\n        result=\"0\"\n    else\n\
    \        result=$(echo $1 | sed \"s/^\\([0-9]*\\)$/$(echo $1 | sed \"s/^\\([0-9]*\\\
    )$/\\1+/g\")\")\n    fi\n\n    echo ${result}", "    echo -n \"$1\" | awk '{sum\
    \ = 0; for (i = 1; i <= NF; i++) sum += i; print sum}'", "    local sum=0\n  \
    \  local string=\"$1\"\n    while [[ $string ]]; do\n        sum=$(($sum + ${string%?}))\n\
    \        string=\"${string#?}\"\n    done\n    echo \"$sum\"", "  local str=\"\
    $1\"\n  echo \"$(($str | awk '{print toupper($0)}')\"|bc) $str\"", "  echo \"\
    ${1}\" | sed 's/^ *//' | sed 's/ *$//' | sed \"s/^\\([^0-9]*\\)\\(.*\\)\\([^0-9]*\\\
    )\\(.*\\)\\([^0-9]*\\)\\(.*\\)\\([^0-9]*\\)\\(.*\\)$/\\15\\6\\2\\6\\3\\6\\4/\"\
    \ | bc", "  echo \"$1\" | grep -o '^[0-9]+$' | awk '{print $1+$2}'", "    echo\
    \ \"$1\" | sed -e 's/[^0-9]*\\([0-9]\\)/\\1 /g' | awk '{ print $1 + 0 }'", " \
    \ local string=${1}\n  [[ -z \"$string\" ]] && return 0\n  # Sum from 0 to 9\n\
    \  sum=0\n  for i in $(seq 0 9); do\n    (( sum+=${string:$i:1} ))\n  done\n \
    \ return $sum", "    local IFS= # prevent new lines with IFS\n    local sum=0\n\
    \    local tempStr\n    while IFS= read -r tempStr; do\n        sum=$(( sum +\
    \ ${tempStr:0:1} ))\n    done <<< \"$1\"\n    printf \"%d\" \"${sum}\"", "   \
    \ local i\n\n    # Loop through each character in $1\n    for i in $(echo $1 |\
    \ grep -o \"[0-9]\"); do\n        # Increment sum by current ASCII code, or 1\
    \ when no digit in $1\n        # $((${#i}+1)) will cause it to increment by 1\
    \ if $1 is empty or has no digits\n        # ${#i} will return the length of the\
    \ variable $i, which is 1 character long\n        # ${#i} + 1 will increment by\
    \ 1 for each character in $1, and return the result\n        (( ${#i}+1 ))\n \
    \   done\n    echo \"$((${#1}+1))\"", "    # your code goes here\n    # Write\
    \ your code in Bash\n    sum=0\n    for (( i = 0; i <= $#1; i++ ))\n    do\n \
    \       if [ \"$i\" = \"$#1\" ]\n        then\n            sum=$(($sum+$((${1:0:i}+${1:i:2}))))\n\
    \        else\n            sum=$(($sum+$((${1:0:i}+${1:i:1}))))\n        fi\n\
    \    done\n    echo \"$sum\"", "    [[ -z \"$1\" ]] && return 0\n    local sum=0\n\
    \    while [[ \"$1\" ]]; do\n        ((sum+=${1:0:1}))\n        shift\n    done\n\
    \    ((sum+=${1:0:1}))\n    echo \"$sum\"", "  local string=\"$1\"\n  local sum=0\n\
    \  local counter=0\n  local currentChar\n\n  # Iterate through all the characters\
    \ in input\n  while [[ \"${string}\" ]]; do\n    # Increment the counter for current\
    \ character\n    (( counter+1 ))\n\n    # Get the current character\n    currentChar=\"\
    ${string}\"\n\n    # Check if it is a digit\n    if [[ \"${currentChar}\" =~ ^[0-9]\
    \ ]]; then\n      # Increase the sum by current digit\n      (( sum+=\"${currentChar}\"\
    \ ))\n    fi\n\n    # Go to the next character\n    string=${string#?}\n  done\n\
    \n  # Return sum\n  echo \"${sum}\"", "    local str=$1\n    local digitSum=0\n\
    \    for ((i=0;i<${#str};++i)); do\n        ((digitSum+=${str[i]}))\n    done\n\
    \    echo ${digitSum}", "  echo $(expr $1 + $(expr $1 | awk '{ print $1 }' | sed\
    \ -n 's/^\\(......\\)\\(.*\\)/\\2/p') | bc)", "  if [ -z \"$1\" ]\n  then\n  \
    \  echo \"0\"\n  else\n    sum=0\n    for i in $(seq 0 $((${#1})-1)); do\n   \
    \   sum=$((${sum}+${1:i:1}))\n    done\n    echo \"$sum\"\n  fi", "  local result=${1#-}\n\
    \  local s=${result%?}\n  local n=${#result}\n  local i\n\n  i=0\n  while ((i<n))\
    \ ; do\n    i=$((i+1))\n    result=${result:0:1}${result:1:1}${result:2:1}${result:3:1}${result:4:1}${result:5:1}\n\
    \  done\n  echo \"${result}\"", "    local str=$1\n    local sum=0\n    str=${str:0:1}\n\
    \    while ((${#str}) > 0) {\n        sum=$(($sum + ${str:0:${#str}}))\n     \
    \   str=${str:1:${#str}}\n    }\n    echo $sum", "\tawk '{ print $1 }'|xargs -I{}\
    \ echo $((${#1}*(${#1}+1)/2))", "    echo $1 | awk '{for(i=1;i<=NF;i++) sum+=toupper($i)}\
    \ END {print sum}'", "  sum=0\n  for i in \"${1}\"\n    do\n      let sum+=$(echo\
    \ \"${i}\" | tr [:lower:] [:upper:])\n    done\n  echo \"${sum}\"", '    echo
    $(echo "$1" | sed -r "s/[^A-Z0-9]//g")', "  local digit=\"\"\n  local count=0\n\
    \  while [[ $1 ]]; do\n    ((count++))\n    digit=$(echo $1 | rev | cut -d' '\
    \ -f 1 | rev | cut -c1-$count | rev)\n    local digitSum=`echo \"$digit\" | tr\
    \ '[:upper:]' '[:lower:]' | wc -c`\n    echo $digitSum\n    ((digitSum=$digitSum+$count-1))\n\
    \    shift\n  done", "  local string=$1\n  local sum=0\n  local index=0\n\n  while\
    \ [[ ${index} -le ${#string} ]]; do\n    sum=$(($sum + ${string:$index:1}))\n\
    \    index=$((index+1))\n  done\n  echo $((${sum}))", "    local str=$1\n    local\
    \ sum=0\n    local i\n    for((i=0;i<${#str};i++)) do\n        case ${str:$i:1}\
    \ in\n        [0-9])\n            let sum=$sum+${str:$i:1}\n            ;;\n \
    \       *)\n            echo \"Not a valid string\" >&2\n            return 1\n\
    \            ;;\n        esac\n    done\n    echo \"${sum}\"", "  echo \"$1\"\
    \ | sed 's/[^A-Z]//g' | awk '{sum+=$2} END {print sum}'", " sum=0\n first=`echo\
    \ \"$1\" | head -1`\n digits=`echo \"$1\" | sed 's/.//g'`\n for (( i=0; i<${#digits};\
    \ i++ ))\n do\n   let \"sum+=(${digits[$i]})*\"16#${first[$i]}\"\n done\n echo\
    \ \"$sum\"", "  local input=$1\n  local sum=0\n  while [ \"$input\" != \"\" ];\
    \ do\n    sum=$((sum+${input:0:1}))\n    input=${input#?}\n  done\n  echo $sum",
  "  local sum=0\n  local string=${1}\n  local upperChars=${string//[^[:upper:]]/}\n\
    \  for c in ${upperChars}; do\n    ((sum+=c))\n  done\n  echo ${sum}", "\tlocal\
    \ digitSum=0\n\tfor i in `echo $1|sed 's/ //g'`; do\n\t\tif [ \"${i:0:1}\" -eq\
    \ \"A\" ]; then\n\t\t\tdigitSum=$((digitSum + $i))\n\t\telse\n\t\t\tbreak\n\t\t\
    fi\n\tdone\n\techo \"${digitSum}\"", "  local string=\"$1\"\n\n  local sum=0\n\
    \  for i in $(seq 0 ${#string})\n  do\n    case \"$string\" in\n      $((${i:2:1}))\
    \ )\n        (( sum += (${i:2:1}) ))\n        ;;\n      *)\n        ;;\n    esac\n\
    \  done\n\n  echo \"$sum\"", "    echo $1 | sed 's/^\\(.*\\)$/\\1+/' | awk '{\
    \ print substr($1,length($1),1) }'", "  local inputString=\"$1\"\n  local sum=0\n\
    \  local upperChars='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  for (( i = 0; i < ${#inputString};\
    \ i++ )); do\n    local currentChar=\"${inputString:$i:1}\"\n    local currentCharCount=\"\
    ${upperChars}${currentChar}\"\n    local sum=\"$((sum+currentCharCount))\"\n \
    \ done\n  echo \"$sum\"", "    echo -n $1 | sed 's/\\(.\\)/\\1+/g'", "\tlocal\
    \ sum=0\n\tfor (( i=0; i<${#1}; ++i )); do\n\t\t[[ \"${1:$i:1}\" =~ [[:upper:]]\
    \ ]] || continue\n\t\tsum=$(( sum + ${1:$i:1} ))\n\tdone\n\techo \"$sum\"", " \
    \ local input=\"$1\"\n\n  # We want to keep track of how many letters we've seen\
    \ so far.\n  local seen=0\n\n  # We don't want to add \"0\" for the empty string.\n\
    \  if [ -z \"$input\" ]; then input=\"0\"; fi\n\n  # Iterate over each letter\
    \ of the input string.\n  for i in $input; do\n    # If the current letter is\
    \ an uppercase letter, add 1 to the seen count.\n    if [ \"$i\" == \"A\" ] ||\
    \ [ \"$i\" == \"B\" ] || [ \"$i\" == \"C\" ] || [ \"$i\" == \"D\" ] || [ \"$i\"\
    \ == \"E\" ] || [ \"$i\" == \"F\" ] || [ \"$i\" == \"G\" ] || [ \"$i\" == \"H\"\
    \ ] || [ \"$i\" == \"I\" ] || [ \"$i\" == \"J\" ] || [ \"$i\" == \"K\" ] || [\
    \ \"$i\" == \"L\" ] || [ \"$i\" == \"M\" ] || [ \"$i\" == \"N\" ] || [ \"$i\"\
    \ == \"O\" ] || [ \"$i\" == \"P\" ] || [ \"$i\" == \"Q\" ] || [ \"$i\" == \"R\"\
    \ ] || [ \"$i\" == \"S\" ] || [ \"$i\" == \"T\" ] || [ \"$i\" == \"U\" ] || [\
    \ \"$i\" == \"V\" ] || [ \"$i\" == \"W\" ] || [ \"$i\" == \"X\" ] || [ \"$i\"\
    \ == \"Y\" ] || [ \"$i\" == \"Z\" ]; then\n      ((seen+=1)) \n    fi\n  done\n\
    \n  # Now that we know how many times we've seen uppercase letters, we know\n\
    \  # that the sum is going to be the sum of the ASCII codes for the upper\n  #\
    \ case letters.\n  echo \"$seen\"", "    local n\n    local sum\n\n    local str=$1\n\
    \    local i=0\n    local total\n\n    # Sum up all chars A-Z\n    while [ $i\
    \ -lt ${#str} ]; do\n        if [ ${str:$i:1} -eq A -o ${str:$i:1} -eq B -o ${str:$i:1}\
    \ -eq C -o ${str:$i:1} -eq D -o ${str:$i:1} -eq E -o ${str:$i:1} -eq F -o ${str:$i:1}\
    \ -eq G -o ${str:$i:1} -eq H -o ${str:$i:1} -eq I -o ${str:$i:1} -eq J -o ${str:$i:1}\
    \ -eq K -o ${str:$i:1} -eq L -o ${str:$i:1} -eq M -o ${str:$i:1} -eq N -o ${str:$i:1}\
    \ -eq O -o ${str:$i:1} -eq P -o ${str:$i:1} -eq Q -o ${str:$i:1} -eq R -o ${str:$i:1}\
    \ -eq S -o ${str:$i:1} -eq T -o ${str:$i:1} -eq U -o ${str:$i:1} -eq V -o ${str:$i:1}\
    \ -eq W -o ${str:$i:1} -eq X -o ${str:$i:1} -eq Y -o ${str:$i:1} -eq Z -o ${str:$i:1}\
    \ -eq ] ; then\n            sum=$((sum + ${str:$i:1}))\n        fi\n        i=$((i\
    \ + 1))\n    done\n\n    # Return the sum\n    total=$(printf \"%02d\" $sum)\n\
    \    echo $total", "\tlocal i sum=0\n\tfor (( i=0; i <= ${#1}; i++)); do\n\t\t\
    if [ ${1:i} -eq $((${1:i:i}+48)) ]; then\n\t\t\tlet sum=sum+${1:i:i}\n\t\tfi\n\
    \tdone\n\techo ${sum}", "    if [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        (( sum\
    \ += ${1//[^[:digit:]]/} ))\n    fi\n    echo $(( sum % 10 ))", "    echo -n $1\n\
    \    awk '{\n        sum = 0\n        for (i = 1; i <= NF; i++) {\n          \
    \  sum += toupper($i)\n        }\n        print sum\n    }' <<< \"$1\"", "   \
    \ local string=$1\n    # Convert to lower case first\n    string=$(echo \"${string:0:1}${string:1:1}${string:2:1}${string:3:1}${string:4:1}${string:5:1}${string:6:1}${string:7:1}${string:8:1}${string:9:1}${string:10:1}${string:11:1}${string:12:1}${string:13:1}${string:14:1}${string:15:1}${string:16:1}${string:17:1}${string:18:1}${string:19:1}${string:20:1}${string:21:1}${string:22:1}${string:23:1}${string:24:1}${string:25:1}${string:26:1}${string:27:1}${string:28:1}${string:29:1}${string:31:1}${string:32:1}${string:33:1}${string:34:1}${string:35:1}${string:36:1}${string:37:1}${string:38:1}${string:39:1}${string:40:1}${string:41:1}${string:42:1}${string:43:1}${string:44:1}${string:45:1}${string:46:1}${string:47:1}${string:48:1}${string:49:1}${string:50:1}${string:51:1}${string:52:1}${string:53:1}${string:54:1}${string:55:1}${string:56:1}${string:57:1}${string:58:1}${string:59:1}${string:60:1}${string:61:1}${string:62:1}${string:63:1}\"\
    )\n    local sum=0\n    local i\n    for i in $(seq 0 ${#string} -1)\n    do\n\
    \        ((sum+=$((${string:$i:0}+${string:$i:1}+${string:$i:2}+${string:$i:3}+${string:$i:4}+${string:$i:5}+${string:$i:6}+${string:$i:7}+${string:$i:8}+${string:$i:9}+${string:$i:10}+${string:$i:11}+${string:$i:12}+${string:$i:13}+${string:$i:14}+${string:$i:15}+${string:$i:16}+${string:$i:17}+${string:$i:18}+${string:$i:19}+${string:$i:20}+${string:$i:21}+${string:$i:22}+${string:$i:23}+${string:$i:24}+${string:$i:25",
  "  local sum=0\n  while [[ \"$1\" =~ \"^([[:upper:]]+)\" ]]; do\n    sum=$(expr\
    \ $sum + $BASH_REMATCH[1])\n    shift\n  done\n  echo $sum", "    # Convert string\
    \ $1 to lower-case\n    lower=${1}\n    # Sum up the numeric value of the upper\
    \ characters\n    sum=0\n    for i in ${lower}\n    do\n        ((sum+=${i:i:1}))\n\
    \    done\n    echo \"$sum\"", " echo \"$1\" | tr [:upper:] '' | tr 'A-Z' '0-9'\
    \ | wc -c", "  local sum=0\n  for (( i=0; i<${#1}; i++ )); do\n    sum=$(($sum\
    \ + ${1:$i:1}))\n  done\n  echo $sum", "    local digits=()\n    for ((i = 0;\
    \ i < \"${#1}\"); i++) {\n        local digit=${1:${i:i:1}}\n        if [ \"${digit:0:1}\"\
    \ == 1 ]; then\n            digits+=${digit:1}\n        fi\n    }\n    echo \"\
    ${digits[*]}\"", "  local sum=0\n  local i\n  for i in $(echo \"$1\" | sed \"\
    s/[A-Z]//g\"); do\n    ((sum+=i))\n  done\n  echo \"$sum\"", "  local sum=0\n\
    \  local str=$1\n  local i\n  for i in $str; do\n    (( sum += ${i^^} ))\n  done\n\
    \  echo $sum", "  local sum=0\n  local upper=\"[A-Z]\" # upper case letters\n\
    \  local lower=\"[a-z]\" # lower case letters\n  local no=\"[0-9]\" # number\n\
    \  local char=\".\" # any character\n  local word=$1\n\n  while [ $word != \"\"\
    \ ]; do\n    sum=$(( $sum + $(echo $word | grep -Po $upper | head -1) ))\n   \
    \ word=$(echo $word | cut -d'A' -f1)\n  done\n  echo $sum", "    echo \"$1\" |\
    \ tr A-Z 0-9 | grep -Eo '[0-9]+'", "  local str=\"$1\"\n  str=\"${str//[^[:ascii:]]/}\"\
    \n  echo $((${str//[0-9]} + ${str//[A-Z]}))", "  local sum=0\n  for i in $(echo\
    \ $1 | cut -c1-); do\n    ((sum += $i))\n  done\n  echo $sum", "   local str=\"\
    $1\"\n   local sum=0\n   for (( i = 0; i < ${#str}; i++ )); do\n      test $((\
    \ sum += ${str:i:1} )) -gt 90 && echo \"Error: unexpected characters in string\"\
    \ 1>&2\n   done\n   echo -n $sum", "    local str=$1\n    local sum=0\n    for\
    \ ((i=1; i<=${#str}; i++)); do\n        if (( ${str:$i:1} == $(( $((${#str}-1-i)%${#str}))\
    \ )); then\n            ((sum+=${str:$i:1}))\n        fi\n    done\n    echo $sum",
  "  [[ \"$1\" == \"\" ]] && return \"0\"\n  echo \"${1//[a-zA-Z]/}\"", "  local string=${1}\n\
    \  # echo \"$string\" | sed 's/[^A-Z]//g' | wc -c\n  # echo \"$string\" | awk\
    \ '{print $1}' | wc -c\n  echo \"$string\" | grep -Eo '^[A-Z]*$' | wc -c", " \
    \ local str=$1\n  local sum=0\n  for i in $str; do\n    if [[ $(echo $i | tr -cd\
    \ [:upper:]) == $i ]]; then\n      sum=$((sum+i))\n    fi\n  done\n  echo $sum",
  "   local x=\"$1\"\n   local sum=\"0\"\n   for ((i=0;i<${#x};i++)); do\n      sum=$((${sum}+${x[(i+1)]}))\n\
    \   done\n   echo \"${sum}\"", "  local sum=0\n  local str=$1\n  for (( i=0; i\
    \ < ${#str}; i++ )); do\n    (( sum += ${str:$i:1} - 32 ))\n  done\n  echo $sum",
  "  local result=0\n  local i\n  for ((i = 0; i < ${#1}; i++)); do\n    local c=${1:$i:1}\n\
    \    local digit=${!i}\n    digit=${digit:0:1}\n    let digit=${digit}+${c}\n\
    \    result=$((result+digit))\n  done\n  echo $result", "  local input=$1\n  local\
    \ sum=0\n  local i\n  for i in $(seq 0 $((${#input} - 1))); do\n    if [[ ${input:${i}:1}\
    \ == 'A' || ${input:${i}:1} == 'a' ]]; then\n      let sum=$sum + ${input:${i}:1}\n\
    \    fi\n  done\n  echo $sum", "    echo \"$1\" | xargs -I % echo $(echo % + $(echo\
    \ \"$(echo \"$1\" | sed -e 's/.*/\\0/')\" | cut -c1-$(echo \"$1\" | sed -e 's/^.\\\
    *//g' | wc -w)))", "  local str=\"${1}\"\n  # Loop\n  # Write a for loop that\
    \ loops through each character in str\n  # When a character is a letter, append\
    \ it to a variable called sum\n  # When the character is an upper case character,\
    \ append it to another variable called upper\n  # When the character is an number,\
    \ append it to another variable called number\n  local sum=0\n  local upper=0\n\
    \  local number=0\n  for ((i=0; i<${#str}; i++)); do\n    case \"${str:$i:1}\"\
    \ in\n      \"A\"|\"B\"|\"C\"|\"D\"|\"E\"|\"F\"|\"G\"|\"H\"|\"I\"|\"J\"|\"K\"\
    |\"L\"|\"M\"|\"N\"|\"O\"|\"P\"|\"Q\"|\"R\"|\"S\"|\"T\"|\"U\"|\"V\"|\"W\"|\"X\"\
    |\"Y\"|\"Z\")\n      ((sum+=${str:$i:1}))\n      ;;\n      \"a\"|\"b\"|\"c\"|\"\
    d\"|\"e\"|\"f\"|\"g\"|\"h\"|\"i\"|\"j\"|\"k\"|\"l\"|\"m\"|\"n\"|\"o\"|\"p\"|\"\
    q\"|\"r\"|\"s\"|\"t\"|\"u\"|\"v\"|\"w\"|\"x\"|\"y\"|\"z\")\n      ((upper+=${str:$i:1}))\n\
    \      ;;\n      \"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\")\n\
    \      ((number+=${str:$i:1}))\n      ;;\n      *)\n      ;;\n    esac\n  done\n\
    \n  # Return value\n  return \"$((sum + upper))\"", "   echo \"$1\"|awk '{sum\
    \ = 0; for (i=2; i<=NF; i++) sum += $i; print sum}'", '  # Your code goes here',
  "  local digitSum=0\n  local char\n  local input=\"${1}\"\n  local count=0\n  for\
    \ char in $input\n  do\n    if [[ $char =~ [0-9] ]]\n    then\n      digitSum=$((${digitSum}+$char))\n\
    \    elif [[ $char =~ [A-Z] ]]\n    then\n      digitSum=$((${digitSum}+64))\n\
    \    fi\n    count=$((${count}+1))\n  done\n  if [[ $count -eq 0 ]]\n  then\n\
    \    digitSum=0\n  fi\n  echo \"${digitSum}\"", "  echo \"$(echo \"$1\" | sed\
    \ -r 's/[^[:digit:]]//g')\"", "    echo \"$1\" | sed 's/^/\\\n/g' | awk -F '[!0-9]'\
    \ '{\n      printf \"%d\",\n      $1 + $(NF-1)\n    }'", "  local IFS\n  IFS=$(echo\
    \ -en \"\\n\\b\")\n  local sum=0\n  local i\n  for i in $*; do\n    let \"sum\
    \ += $(i)\"\n  done\n  echo $sum", "  local input=\"$1\"\n  echo \"$((${input:0:1})\
    \ + ${input:0:1})\"", "  local str=\"$1\"\n  echo $(echo $str |cut -c1-${#str})",
  "    local sum=0\n    while [[ $1 ]]; do\n        local i\n        local c\n   \
    \     for (( i=0; i < ${#1}; i++ )); do\n            c=\"${1:$i:1}\"\n       \
    \     (( sum += c - $c ))\n        done\n        shift\n    done\n    echo $sum",
  "  local _sum=0\n  local _str=$1\n  echo $_str | tr [a-z] [A-Z] | sed 's/[0-9]//g'\
    \ | sed 's/^//g' | sed 's/$//g' | sed 's/[a-z]//g' | sed 's/[^0-9]//g' | sed 's/\
    \ //g' | tr -d '\\n'", "    local string=\"$1\"\n    local sum=0\n    for (( i=0;\
    \ i<${#string}; i++ )); do\n        local char=\"${string:i:1}\"\n        sum=\"\
    ${sum}${char}\"\n    done\n    echo \"$sum\"", "  local sum=0\n  local string=${1}\n\
    \  for i in $(seq 0 ${#string})\n  do\n    let char=\"${string:$i:1}\"\n    if\
    \ [[ \"$char\" == [0-9] ]]\n    then\n      sum=$(( $sum + $char ))\n    fi\n\
    \  done\n  echo \"$sum\"", "    local sum=0\n    local char\n    IFS='' read -ra\
    \ arr < <(echo $1 | tr a-z A-Z)\n    for i in \"${arr[@]}\"; do\n        char=\"\
    ${i}\"\n        ((sum+=${#char}))\n    done\n    echo \"$sum\"", "  string=$1\n\
    \  sum=0\n  for i in $(seq 0 $((${#string}-1))); do\n      digit=${string:$i:1}\n\
    \      sum=$((${sum}+(${digit}+48)))\n  done\n  echo $sum", "    local str=$1\n\
    \    if [[ \"${str}\" == \"$str\" ]]; then\n        return 0;\n    fi\n    local\
    \ sum=0\n    local count=0\n    for (( i=0; i<${#str}; i++ )); do\n        if\
    \ (( ${str}[i] >= 65 && ${str}[i] <= 90 )); then\n            sum=$(( ${sum}+$((${str}[i]\
    \ - 64)) ))\n            count=$(expr $count+1)\n        fi\n    done\n    echo\
    \ $(( $sum + $count ))", "  declare -i sum=0\n  local input\n  input=\"${1:-}\"\
    \n  while read -r; do\n    sum=$(( $sum + $REPLY ))\n  done < <(tr [a-z] [A-Z]\
    \ <<< \"$input\")\n  echo \"$sum\"", "    local str=$1\n    local sum=0\n    for\
    \ i in `echo \"$str\" | sed 's/\\([A-Z]\\)\\([A-Z]\\)\\([A-Z]\\)/\\1+\\2+\\3/'`;\
    \ do\n        sum=$((sum+i))\n    done\n    echo \"$sum\"", "    local string=\"\
    $1\"\n    local sum=0\n    local l=${#string}\n\n    for (( i=0; i<l; i++ ));\
    \ do\n        sum=$(expr ${string:$i:1} + ${sum})\n    done\n\n    echo \"${sum}\"",
  "  grep -o . <<< \"$1\" | sed -e 's/^[^0-9]*//' | sort -z | head -n1 | paste -sd\
    \ \"\"", "  local str=\"${1}\"\n  local sum=\"0\"\n  local firstChar=\"${str:0:1}\"\
    \n  local lastChar=\"${str:-1}\"\n\n  while [[ \"${str:0:1}\" =~ [0-9] ]]; do\n\
    \    sum=\"${sum}${firstChar}\"\n    str=\"${str:1}\"\n    firstChar=\"${str:0:1}\"\
    \n  done\n  sum=\"${sum}${firstChar}\"\n  while [[ \"${str:-1}\" =~ [0-9] ]];\
    \ do\n    sum=\"${sum}${lastChar}\"\n    str=\"${str:0:-1}\"\n    lastChar=\"\
    ${str:-1}\"\n  done\n  sum=\"${sum}${lastChar}\"\n\n  echo \"${sum}\"", "    local\
    \ str=$1\n    local sum=0\n    local t\n    local i\n    \n    for i in $(seq\
    \ 0 $((${#str} - 1))); do\n        t=$(printf '%c' ${str:$i:1})\n        if [[\
    \ $t -eq 'A' ]]; then\n            sum=$((sum + 10))\n        elif [[ $t -eq 'a'\
    \ ]]; then\n            sum=$((sum + 11))\n        elif [[ $t -eq 'B' ]]; then\n\
    \            sum=$((sum + 8))\n        elif [[ $t -eq 'b' ]]; then\n         \
    \   sum=$((sum + 9))\n        elif [[ $t -eq 'C' ]]; then\n            sum=$((sum\
    \ + 6))\n        elif [[ $t -eq 'c' ]]; then\n            sum=$((sum + 7))\n \
    \       elif [[ $t -eq 'D' ]]; then\n            sum=$((sum + 4))\n        elif\
    \ [[ $t -eq 'd' ]]; then\n            sum=$((sum + 5))\n        elif [[ $t -eq\
    \ 'E' ]]; then\n            sum=$((sum + 3))\n        elif [[ $t -eq 'e' ]]; then\n\
    \            sum=$((sum + 4))\n        elif [[ $t -eq 'F' ]]; then\n         \
    \   sum=$((sum + 2))\n        elif [[ $t -eq 'f' ]]; then\n            sum=$((sum\
    \ + 3))\n        elif [[ $t -eq 'G' ]]; then\n            sum=$((sum + 1))\n \
    \       elif [[ $t -eq 'g' ]]; then\n            sum=$((sum + 2))\n        elif\
    \ [[ $t -eq 'H' ]]; then\n            sum=$((sum + 8))\n        elif [[ $t -eq\
    \ 'h' ]]; then\n            sum=$((sum + 9))\n        elif [[ $t -eq 'I' ]]; then\n\
    \            sum=$((sum + 6))\n        elif [[ $t -eq 'i' ]]; then\n         \
    \   sum=$((sum + 7))\n        elif [[ $t -eq 'J' ]]; then\n            sum=$((sum\
    \ + 5))\n        elif [[ $t -eq 'j' ]]; then\n            sum=$((sum + 6))\n \
    \       elif [[ $t -eq 'K' ]]; then\n            sum=$((sum + 4))\n        elif\
    \ [[ $t -eq 'k' ]]; then\n            sum=$((sum + 5))\n        elif [[ $t -eq\
    \ 'L' ]]; then\n            sum=$((sum + 3))\n        elif [[ $t -eq 'l' ]]; then\n\
    \            sum=$((sum + 4))\n        elif [[ $t -eq", "    local string sum=0\n\
    \    string=$1\n    for i in $(seq 1 ${#string})\n    do\n        let \"sum +=\
    \ ${string:$i:1}\"\n    done\n    echo $sum", "    local -r string=$1\n\n    local\
    \ sum=0\n    local strlen=${#string}\n    local i\n\n    for ((i=0; i<$strlen;\
    \ i++));\n    do\n        local c=${string:$i:1}\n        if ((c >= '0' && c <=\
    \ '9'));\n        then\n            sum=$((sum+c))\n        fi\n    done\n\n \
    \   echo \"$sum\"", "  echo $1 | awk '{ sum = 0\n  for (i = 1; i < length($1);\
    \ i++) {\n      if ($i ~ /^[0-9]$/) {\n          sum += toupper($i)\n      }\n\
    \  }\n  print sum }' | bc -l", "  echo \"$1\" | sed -e 's/^ *//g' | sed -e 's/\
    \ *$//g' | tr -cd '\\301' | wc -c", "   awk '\n      {\n         sum += toupper($1)\n\
    \      }\n      END {\n         print sum\n      }'", "  (( ${#1} > 0 )) && \n\
    \  \n  (( ${#1} > 0 )) && \n  \n  # Get first char\n  local first=${1:0:1}\n \
    \ \n  # Get sum \n  local sum=0\n  \n  (( ${#1} > 1 )) && \n  \n  # Add first\
    \ char to sum\n  (( ${sum} + ${first} )) || \n  \n  # Add first char to sum\n\
    \  (( ${sum} + 32 )) || \n  \n  # Go until end of string\n  while (( ${#1} > 1\
    \ ))\n  do\n    # Add char to sum\n    (( ${sum} + ${1:1:1} ))\n    # Remove first\
    \ char\n    shift\n  done\n  \n  # Return sum\n  echo \"${sum}\"", "    if [ $#\
    \ -eq 0 ]\n    then\n        return 0\n    fi\n    local -a arr\n    arr=( ${1//[0-9]*?([[:lower:]]|$())}\
    \ )\n    echo -n ${arr[@]}|bc", "\tlocal str=$1\n\tlocal sum=0\n\tfor i in $(echo\
    \ $str | sed 's/^.//g'); do\n\t\t((sum+=$i))\n\tdone\n\techo $sum", "   local\
    \ -n str=$1\n   local -a str\n   local -n sum=0\n   for ((i=0;i<${#str};i++));do\n\
    \      sum+=${str:$i:1}\n   done\n   echo $sum", "  # convert each char into a\
    \ numerical ascii code number\n  local sum=0\n  local input=\"$1\"\n  local letter\n\
    \  for letter in \"${input//[A-Z]/\"}\"\n  do\n    sum=$((sum+letter.ord))\n \
    \ done\n\n  echo $sum", "    local string=\"${1}\"\n    local sum=0\n    local\
    \ length=\"${#string}\"\n    local i\n    for (( i=0; i<${length}; i++ )); do\n\
    \        local c=\"${string:$i:1}\"\n        if [[ ${c} == [0-9] ]]; then\n  \
    \          let \"sum+=${c}\"\n        fi\n    done\n    echo \"${sum}\"", "  local\
    \ sum=0\n  echo $1 | awk '{for(i=1;i<=NF;i++) if($i>=65&&$i<91) sum+=$i}'\n  echo\
    \ ${!sum}", "  echo \"${1}\" | sed -n 's/^.*\\([0-9]\\{1,\\}\\)\\([A-Z]\\)\\([A-Z]\\\
    )\\([A-Z]\\)\\([0-9]\\{1,\\}\\)\\([0-9]\\{1,\\}\\).*$/\\1+\\2+\\3+\\4+\\5/p'",
  "    local sum=0\n    local string=$1\n    echo $string | while read char; do\n\
    \        if [[ $char == [[:upper:]]* ]]; then\n            ((sum+=$(echo $char\
    \ | cut -c1-1))\n        fi\n    done\n    echo $sum", "    if [ -z $1 ]\n   \
    \ then\n        return 0\n    fi\n    len=${#1}\n    for i in {0..len}\n    do\n\
    \        if [ \"${1:$i:1}\" == \"A\" ]\n        then\n            sum=$((sum+32))\n\
    \        fi\n    done\n    echo \"${sum}\"", "  local sum\n  sum=0\n  for i in\
    \ $1 do\n  case $i in\n    [0-9])\n      sum=$(($sum+$(i)))\n      ;;\n    *)\n\
    \      sum=$(($sum+$(echo $i | awk '{print toupper($0)}'))))\n      ;;\n  esac\n\
    \  done\n  echo $sum", "    local num\n    for (( num=1 ; num<=$1 ; num++ ));\
    \ do\n        echo \"$num + ${1:${#1}} - ${1:0:num} + ${1:num:${#1}} + ${1:(num\
    \ + ${#1}):${#1}} + ${1:(num + ${#1}):${#1}} = ${1:0:(${#1} - num)}\" >&2\n  \
    \  done\n    echo \"${1:0:${#1}}\"", "    local string=$1\n    local sum=0\n \
    \   for (( i=1; $string[i] != \" \"; i++ )); do\n        if [[ ${string[i]} =~\
    \ [[:digit:]]$ ]]; then\n            let sum+=$(( ${string[i]} + 48 ))\n     \
    \   fi\n    done\n    echo \"$sum\"", "    local str=\"$1\"\n    # Convert strings\
    \ into lower-case (this can probably be optimized)\n    local tmpStr=$(echo \"\
    $str\" | tr '[:upper:]' '[:lower:]')\n    # Add ASCII codes for each character\n\
    \    tmpStr=$(echo \"$tmpStr\" | awk '{for (i = 2; i <= length($0); i++) { sum\
    \ += toupper($i); }}')\n    echo \"$sum\"", "   local str=$1\n   local sum=0\n\
    \   while [[ \"$str\" =~ [[:digit:]]+$ ]]\n   do\n      ((sum+=${BASH_REMATCH[0]}))\n\
    \      str=${BASH_REMATCH[0]}\n   done\n   echo \"$sum\"", "    \n    # Declare\
    \ a variable to store our results.\n    sum=0\n    # Declare another variable\
    \ to hold our passed parameter\n    chars=$@\n    \n    # Loop through our passed\
    \ parameter\n    for chars in $@; do\n        # Convert the chars to upper case\
    \ then get the ASCII code of the character\n        sum=$((sum+$(echo $chars |\
    \ tr -d '[:lower:]' | tr '[:upper:]' '[:lower:]')))\n    done\n    echo \"$sum\"",
  "  local sum=0\n  while [[ $1 ]]; do\n    sum=$(( ${1:0:1}+${sum}+${1:1:1} ))\n\
    \    shift\n  done\n  echo ${sum}", "  local inputString=$1\n  local sum=0\n \
    \ local i=0 j=0\n  local lastChar=\"-\"\n\n  echo \"$inputString\" | while read\
    \ -a chars ; do\n     j=0\n     sum=$(( $sum + ${chars[1]}))\n     echo \"$sum\"\
    \n     i=$((i+1))\n     if [[ $i -gt ${#inputString} ]] ; then break ; fi\n  done\n\
    \  echo \"$sum\"", "    local _char\n    # Iterate through the string one character\
    \ at a time\n    for ((i = 0; i <= ${#1}; i++)); do\n        # Increment the variable\
    \ that contains the sum of the ASCII codes for uppercase letters\n        _char=$(echo\
    \ \"${1:$i:1}\" | grep -o '[A-Z]')\n        ((_char += ${#_char}))\n        echo\
    \ $_char\n    done", "    # Convert to lowercase and remove any non digit characters\n\
    \    local string=\"${1}\"\n    string=\"${string^^}\"\n    string=\"${string//[^0-9]/}\"\
    \n    echo \"${#string} + $(printf '%s\\n' \"${string}\"|sed 's/./& /g'|grep -o\
    \ '[[:digit:]]\\+')\"", "    local str=$1\n    local sum=0\n    for ((i = 0; i\
    \ < ${#str}; i++)); do\n        if [ \"${str: -i: 1}\" == \"$str[i]\" ] || [ \"\
    ${str: -i: 1}\" == \"${str[i]: -1}\" ]; then\n            let sum=$sum+$str[i]\n\
    \        fi\n    done\n    return $sum", "  local sum=0;\n  local string=$1;\n\
    \  while [[ ${#string} -gt 0 ]]\n  do\n    sum=$(($sum + $(getUpper ${string}))\
    \ );\n    string=${string#????????}\n  done\n  echo \"$sum\"", "  local i\n  local\
    \ sum=0\n  local char\n  for i in \"${1//[!0-9]}\"; do\n    char=\"$(iconv -c\
    \ -t ascii <<<\"$i\")\"\n    sum=\"$(($sum + $char))\"\n  done\n  echo \"$sum\"",
  "\tlocal str=$1\n\n\t# Convert string to char array (0-index)\n\tlocal chars=$(echo\
    \ ${str} | tr a-z A-Z)\n\n\t# Keep adding chars until we hit an empty one\n\t\
    local sum=0\n\tfor char in \"${chars[@]}\"; do\n\t\t((sum+=${#char}))\n\tdone\n\
    \n\t# Return sum\n\techo ${sum}", "  local input=${1:-}\n  local sum=0\n  local\
    \ i\n  for i in $(seq 0 $(expr length ${input})); do\n    local c=${input:i:1}\n\
    \    sum=$((${sum}+${#c}))\n  done\n  echo ${sum}", "  echo \"\"\n  echo -n $1\
    \ | awk -F'[0-9]+' -v OFS=. '{ for (i=1; i<=NF; i++) sum+=$i; print sum; }'",
  "        local str=$1\n        local sum=0\n        local digits=0\n        local\
    \ char\n        for ((i=0; i < ${#str}; i++ )); do\n                char=\"${str:$i:1}\"\
    \n                if ((${char:0:1}) -eq 'A') || ((${char:0:1}) -eq 'a')\n    \
    \            then\n                        digits++\n                fi\n    \
    \    done\n        for ((i=0; i < ${#str}; i++ )); do\n                char=\"\
    ${str:$i:1}\"\n                if ((${char:0:1}) -eq 'A') || ((${char:0:1}) -eq\
    \ 'a')\n                then\n                        sum+=${char:1}\n       \
    \                 let \"sum+=${char:1}\"\n                fi\n        done\n \
    \       echo \"$sum\"", "  local sum=0\n  for i in $1 do\n    let sum+=${i^^}\n\
    \  done\n  echo $sum", "  local sum=0\n  for i in $@; do\n    [[ \"$i\" =~ [A-Z]\
    \ ]] && sum=$((sum+${#i}))\n  done\n  echo \"$sum\"", "  local string=\"${1}\"\
    \n  # write your function here\n  local sum=0\n  for i in \"${string}\"; do\n\
    \    let sum=\"$sum+${i}\"\n  done\n  echo \"$sum\"", "    local string=${1:-}\n\
    \    local sum=0\n    local i\n    for i in $string; do\n        if [[ $i =~ [A-Z]\
    \ ]]; then\n            ((sum+=${i}))\n        fi\n    done\n    echo \"$sum\"",
  " echo $1 | awk '{sum = 0\n for (i = 1; i < NF; i++) {\n   if ($i ~ /^[0-9]$/)\n\
    \      sum += toupper($i);\n   else\n      sum = 0 }\n   printf \"%d\\n\", sum\
    \ }';", "    local sum=0\n    for i in ${1//,}; do\n        let sum+=$i\n    done\n\
    \    echo \"$sum\"", "    echo \"$1\" | awk '{\n  for(i = 1; i <= length($1);\
    \ i++) {\n      sum+=($i%2==0)?$i:0;\n  }\n  return sum;\n  }';", "    local string=\"\
    $1\"\n\n    # Get the length of the string\n    local length=\"${#string}\"\n\n\
    \    # Add up\n    local sum=0\n    local counter=1\n    for i in $(seq 1 $length);\
    \ do\n        if [ \"${string:$i:1}\" == \"A\" ] ; then\n            sum=$(( sum\
    \ + 9 ))\n        elif [ \"${string:$i:1}\" == \"a\" ] ; then\n            sum=$((\
    \ sum + 97 ))\n        elif [ \"${string:$i:1}\" == \"B\" ] ; then\n         \
    \   sum=$(( sum + 8 ))\n        elif [ \"${string:$i:1}\" == \"b\" ] ; then\n\
    \            sum=$(( sum + 96 ))\n        elif [ \"${string:$i:1}\" == \"C\" ]\
    \ ; then\n            sum=$(( sum + 7 ))\n        elif [ \"${string:$i:1}\" ==\
    \ \"c\" ] ; then\n            sum=$(( sum + 95 ))\n        elif [ \"${string:$i:1}\"\
    \ == \"D\" ] ; then\n            sum=$(( sum + 6 ))\n        elif [ \"${string:$i:1}\"\
    \ == \"d\" ] ; then\n            sum=$(( sum + 94 ))\n        elif [ \"${string:$i:1}\"\
    \ == \"E\" ] ; then\n            sum=$(( sum + 5 ))\n        elif [ \"${string:$i:1}\"\
    \ == \"e\" ] ; then\n            sum=$(( sum + 93 ))\n        elif [ \"${string:$i:1}\"\
    \ == \"F\" ] ; then\n            sum=$(( sum + 4 ))\n        elif [ \"${string:$i:1}\"\
    \ == \"f\" ] ; then\n            sum=$(( sum + 92 ))\n        elif [ \"${string:$i:1}\"\
    \ == \"G\" ] ; then\n            sum=$(( sum + 3 ))\n        elif [ \"${string:$i:1}\"\
    \ == \"g\" ] ; then\n            sum=$(( sum + 91 ))\n        elif [ \"${string:$i:1}\"\
    \ == \"H\" ] ; then\n            sum=$(( sum + 2 ))\n        elif [ \"${string:$i:1}\"\
    \ == \"h\" ] ; then\n            sum=$(( sum + 90 ))\n        elif [ \"${string:$i:1}\"\
    \ == \"I\" ] ; then\n            sum=$(( sum + 1 ))\n        elif [ \"${string:$i:1}\"\
    \ == \"i\" ] ; then\n            sum=$(( sum + 98 ))\n        elif [ \"${string:$i:1}\"\
    \ == \"J\" ] ; then\n            sum=$(( sum + 0 ))\n        elif [ \"${string:$i:",
  "  local sum=0\n  local string=\"$1\"\n\n  for ((i = 0; i < ${#string}; i++)); do\n\
    \    sum=$((sum + ${string:i:1}))\n  done\n\n  echo \"$sum\"", '  echo $((${1:-0}+${1::
    -1}+${1:: -2}+${1:: -3}+${1:: -4}+${1:: -5}+${1:: -6}+${1:: -7}+${1:: -8}+${1::
    -9}))', '  echo $(echo $1 | grep -o . | wc -l)', "    local tstr=$1\n    local\
    \ sum=0\n    local char=\"\"\n\n    for (( i = 0; i < ${#tstr}; i++ )); do\n \
    \       char=\"${tstr:i:1}\"\n        if [[ $char =~ [A-Z]$ ]]; then\n       \
    \     sum=$((sum + ${#char}))\n        fi\n    done\n    echo \"${sum}\"", " \
    \   local str=\"$1\"\n    local sum=0\n    local c\n    local i\n\n    echo $str\
    \ | while read -r c; do\n        ((sum += c - 48))\n    done\n    echo \"$sum\"",
  "    local sum=0\n    local str=$1\n    local len=${#str}\n    local count=0\n \
    \   local index=0\n    while [ $index -lt $len ]; do\n        local c=${str:$index:1}\n\
    \        if [ \"${c:0:1}\" -ge \"9\" ]; then\n            sum=$((sum + c))\n \
    \       else\n            if [ $((c)) -gt 0 ]; then\n                sum=$((sum\
    \ + c - 32))\n            fi\n        fi\n        index=$((index+1))\n    done\n\
    \    echo ${sum}", "    local -i sum=0\n    local -i i\n    local str=\"$1\"\n\
    \    # remove trailing spaces\n    str=\"${str//[[:space:]]}\"\n    # loop over\
    \ the characters in string\n    for (( i=0; i<${#str}; i++ )); do\n        # if\
    \ the character is digit\n        if [[ ${str:i:1} == [0-9] ]]; then\n       \
    \     # add the value of the digit\n            (( sum+=${str:i:1} ))\n      \
    \  fi\n    done\n    echo \"$sum\"", "  local str=$1\n  local sum=0\n  for i in\
    \ {a..z}; do\n    sum=$((sum+${str:$i:1})) \n  done\n  echo $sum", "    local\
    \ digitSum=0\n    for ((i=0;i<${#1}-1;i++)); do\n        digitSum=$((${digitSum}+${1:$i:1}))\n\
    \    done\n    echo $((${digitSum}+1))", "  local str=$1 sum=0\n  # Go over every\
    \ character in the string\n  for ((i=0; i<${#str}; ++i)); do\n    # Skip over\
    \ control characters\n    if [[ ${str: i+1, 1} == \"-\" ]] || [[ ${str: i+1, 1}\
    \ == \"~\" ]]; then\n      continue\n    fi\n    # Check if the current character\
    \ is upper\n    if [[ ${str:i:1} == $(echo -n ${str:i:1}) | tr [A-Z] [0-9] ]];\
    \ then\n      sum=$(( $sum + $(echo -n ${str:i:1}) ))\n    fi\n  done\n  echo\
    \ ${sum}", "  echo $(echo -n \"$1\" | sed 's/[0-9]//g' | sed 's/[^A-Z]//g' | uniq\
    \ | wc -l)", "  local str=$1\n  local sum=0\n  for i in ${str}; do\n    if ((\
    \ $i > 96 && $i < 123 )); then\n      sum=$(($sum + $i))\n    fi\n  done\n  echo\
    \ $sum", "    echo -n \"$1\" | cut -c1\n    while read i ; do\n        echo \"\
    $i\" | cut -c2 | tr '[A-Z]' '[a-z]' | tr -cd '[0-9]'\n    done", "  local string=${1}\n\
    \  local sum=0\n  for i in \"${string}\" ; do\n    (( sum += i ))\n  done\n  echo\
    \ $sum", "    sum=0;\n    for (( i=0; i<${#1}; i++ )); do\n        sum=$(($sum\
    \ + $(printf '%03d' \"${1:$i:1}\") ))\n    done\n    echo \"$sum\"", "  local\
    \ sum=0\n  for (( i=0; i<${#1}; i++ )); do\n    sum=$(( $sum + ${1:$i:1} ))\n\
    \  done\n  echo $sum", '  [[ "$1" ]] && echo "${1:0:$((${#1}))}${1:$((${#1}))}"',
  "  # ${1} -eq \"\" then return 0\n  # ${1} -eq aAaaaXa then return 153\n  # $1 is\
    \ a string\n  local str=\"${1}\"\n  if [ \"${str}\" == \"\" ]; then\n    echo\
    \ \"0\"\n  else\n    # ${#1} is length of string\n    # ${#1} is length of string\
    \ - 1\n    # ${1} is string\n    # ${1} is string\n    local length=\"${#1}\"\n\
    \    local result=0\n    local i\n    for ((i = 0; i <= length; i++)) do\n   \
    \   # ${#1} is length of string\n      # ${#1} is length of string - 1\n     \
    \ # ${1} is string\n      # ${1} is string\n      if [ \"${1:$i:1}\" == \"A\"\
    \ ]; then\n        result=\"${result:+${result},1}\"\n      fi\n      if [ \"\
    ${1:$i:1}\" == \"B\" ]; then\n        result=\"${result:+${result},1}\"\n    \
    \  fi\n      if [ \"${1:$i:1}\" == \"C\" ]; then\n        result=\"${result:+${result},1}\"\
    \n      fi\n      if [ \"${1:$i:1}\" == \"D\" ]; then\n        result=\"${result:+${result},1}\"\
    \n      fi\n      if [ \"${1:$i:1}\" == \"E\" ]; then\n        result=\"${result:+${result},1}\"\
    \n      fi\n      if [ \"${1:$i:1}\" == \"F\" ]; then\n        result=\"${result:+${result},1}\"\
    \n      fi\n      if [ \"${1:$i:1}\" == \"G\" ]; then\n        result=\"${result:+${result},1}\"\
    \n      fi\n      if [ \"${1:$i:1}\" == \"H\" ]; then\n        result=\"${result:+${result},1}\"\
    \n      fi\n      if [ \"${1:$i:1}\" == \"I\" ]; then\n        result=\"${result:+${result},1}\"\
    \n      fi\n      if [ \"${1:$i:1}\" == \"J\" ]; then\n        result=\"${result:+${result},1}\"\
    \n      fi\n      if [ \"${1:$i:1}\" == \"K\" ]; then\n        result=\"${result:+${result},1}\"\
    \n      fi\n      if [ \"${1:$i:1}\" == \"L\" ]; then\n        result=\"${result:+${result},1}\"\
    \n      fi\n      if [ \"${1:$i:1}\" == \"M\" ]; then\n        result=\"${result:+${result},1}\"\
    \n      fi\n      if [ \"${1:$i:1}\" == \"N\" ]; then\n        result=\"${result:+${result},1}\"\
    \n      fi\n      if [ \"${1:$i:1}\" == \"O\" ]; then\n        result=\"${result:+${result},1}\"",
  "  local chars=\"$1\"\n  local sum=0\n  for char in $chars; do\n    ((sum += $(printf\
    \ \"%c\" \"$char\" | tr [:upper:] '\\n'))) # $( ... ) is a command substitution\
    \ which executes the command inside\n  done\n  echo $sum", '  echo -n "${1}" |
    tr [A-Z] [0-9]', "  declare -A count\n  for i in $1;\n  do\n    if [[ $i =~ ^[0-9]\
    \ ]]; then\n      count[$i]=$(( ${count[$i]} + $i ))\n    fi\n  done\n  echo ${!count[*]}",
  "  local string=$1\n  [[ -z \"$string\" ]] && return\n  local sum=0\n  for i in\
    \ \"${string}\"; do\n    if [[ $i =~ [[:upper:]] ]]; then\n      ((sum+=i))\n\
    \    fi\n  done\n  echo $sum", "  echo \"$1\" | awk '{\n        sum = 0\n    \
    \    for (i=1; i <= NF; i++){\n          if ($i ~ /[[:upper:]]/) sum += i\n  \
    \      }\n        sum\n      }'"]
stop_tokens:
- "\n}"
