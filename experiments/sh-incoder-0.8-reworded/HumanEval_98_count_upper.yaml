name: HumanEval_98_count_upper
language: sh
prompt: "#!/bin/bash\n# Given a string s, count the number of uppercase vowels in\
  \ even indices.\n# For example:\n# >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>>\
  \ $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n\
  #\n# $1 is a string\ncount_upper() {\n"
tests: "}\n\ncandidate() {\n    count_upper \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"aBCdEf\") = \"1\" ]]\n    [[ $(candidate \"abcdefg\") = \"0\"\
  \ ]]\n    [[ $(candidate \"dBBE\") = \"0\" ]]\n    [[ $(candidate \"B\") = \"0\"\
  \ ]]\n    [[ $(candidate \"U\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n\
  \    [[ $(candidate \"EEEE\") = \"2\" ]]\n}\n\nrun_test"
completions: ["    [[ \"${#1}\" -eq 0 ]] && return 0\n    echo \"${1}\" | awk '{\n\
    \        for (i=1; i<=NF; i++)\n        {\n            if (i % 2 == 0)\n     \
    \       {\n                if ($i ~ /[AEIOU]/)\n                {\n          \
    \          count++\n                }\n            }\n        }\n    }'", "\t\
    local -i i\n\tlocal -a count\n\tlocal c\n\tc=${1:0:1}\n\tcount=($1)\n\tfor ((i=0;\
    \ i<${#count[*]}; i++)); do\n\t\tc=${count[i]}\n\t\t((c >= 'A' && c <= 'Z') &&\
    \ c++) || break\n\tdone\n\techo $c", "    # $1 is a string\n    local string=$1\n\
    \    local count=0\n    local c\n    local i\n\n    for c in ${string//c}; do\n\
    \        if [[ \"$c\" == ?A ]] || [[ \"$c\" == ?E ]] || [[ \"$c\" == ?O ]] ; then\n\
    \            count=$(( $count + 1 ))\n        fi\n    done\n    return $count",
  "  local str=\"$1\"\n\n  local upper=0\n  local i=0\n  while [ \"$i\" -le \"${#str}\"\
    \ ]; do\n    # Only count uppercase vowels if we are in the even index.\n    if\
    \ [ \"$i\" -eq 0 ]; then\n      # If the character is a vowel, increment our counter.\n\
    \      if [ \"$str\" == \"A\" ] || [ \"$str\" == \"a\" ]; then\n        upper=$((\
    \ upper + 1 ))\n      elif [ \"$str\" == \"B\" ] || [ \"$str\" == \"b\" ]; then\n\
    \        upper=$(( upper + 2 ))\n      elif [ \"$str\" == \"C\" ] || [ \"$str\"\
    \ == \"c\" ]; then\n        upper=$(( upper + 3 ))\n      elif [ \"$str\" == \"\
    D\" ] || [ \"$str\" == \"d\" ]; then\n        upper=$(( upper + 4 ))\n      elif\
    \ [ \"$str\" == \"E\" ] || [ \"$str\" == \"e\" ]; then\n        upper=$(( upper\
    \ + 5 ))\n      elif [ \"$str\" == \"F\" ] || [ \"$str\" == \"f\" ]; then\n  \
    \      upper=$(( upper + 6 ))\n      elif [ \"$str\" == \"G\" ] || [ \"$str\"\
    \ == \"g\" ]; then\n        upper=$(( upper + 7 ))\n      elif [ \"$str\" == \"\
    H\" ] || [ \"$str\" == \"h\" ]; then\n        upper=$(( upper + 8 ))\n      elif\
    \ [ \"$str\" == \"I\" ] || [ \"$str\" == \"i\" ]; then\n        upper=$(( upper\
    \ + 9 ))\n      elif [ \"$str\" == \"J\" ] || [ \"$str\" == \"j\" ]; then\n  \
    \      upper=$(( upper + 10 ))\n      elif [ \"$str\" == \"K\" ] || [ \"$str\"\
    \ == \"k\" ]; then\n        upper=$(( upper + 11 ))\n      elif [ \"$str\" ==\
    \ \"L\" ] || [ \"$str\" == \"l\" ]; then\n        upper=$(( upper + 12 ))\n  \
    \    elif [ \"$str\" == \"M\" ] || [ \"$str\" == \"m\" ]; then\n        upper=$((\
    \ upper + 13 ))\n      elif [ \"$str\" == \"N\" ] || [ \"$str\" == \"n\" ]; then\n\
    \        upper=$(( upper + 14 ))\n      elif [ \"$str\" == \"O\" ] || [ \"$str\"\
    \ == \"o\" ]; then\n        upper=$(( upper + 15 ))\n      elif [ \"$str\" ==\
    \ \"P\" ] || [ \"$str\" == \"p\" ]; then\n        upper=$(( upper + 16 ))\n  \
    \    elif [ \"$str\" == \"Q\" ] || [ \"$str\" == \"q\" ]; then\n        upper=$((\
    \ upper + 17 ))\n      elif [ \"$str\" == \"R\" ] || [ \"$str\" == \"r\" ]; then\n\
    \        upper=$(( upper + 18 ))", "  local s=$1\n  local count=0\n\n  for ((\
    \ i=0; i<${#s}; i++ )); do\n    case $i in\n      0 )\n        # ignore null char\n\
    \        ;;\n      1 )\n        # count first vowel\n        [[ \"$s\" == [aA]\
    \ ]] && let count+=1 || let count+=0\n        ;;\n      2 )\n        # count second\
    \ vowel\n        [[ \"$s\" == [dD] ]] && let count+=2 || let count+=0\n      \
    \  ;;\n      3 )\n        # count third vowel\n        [[ \"$s\" == [eE] ]] &&\
    \ let count+=3 || let count+=0\n        ;;\n      4 )\n        # count fourth\
    \ vowel\n        [[ \"$s\" == [fF] ]] && let count+=4 || let count+=0\n      \
    \  ;;\n      5 )\n        # count fifth vowel\n        [[ \"$s\" == [gG] ]] &&\
    \ let count+=5 || let count+=0\n        ;;\n      6 )\n        # count sixth vowel\n\
    \        [[ \"$s\" == [hH] ]] && let count+=6 || let count+=0\n        ;;\n  \
    \    7 )\n        # count seventh vowel\n        [[ \"$s\" == [iI] ]] && let count+=7\
    \ || let count+=0\n        ;;\n      8 )\n        # count eighth vowel\n     \
    \   [[ \"$s\" == [jJ] ]] && let count+=8 || let count+=0\n        ;;\n      9\
    \ )\n        # count ninth vowel\n        [[ \"$s\" == [kK] ]] && let count+=9\
    \ || let count+=0\n        ;;\n      * )\n        # count other vowel\n      \
    \  let count+=$i\n        ;;\n    esac\n  done\n\n  echo $count", "    local s=$1\n\
    \    local result\n\n    result=0\n    for (( i=0; i<${#s}; i++ )); do\n     \
    \   if [[ \"${s:i:1}\" == [A-Z] ]]; then\n            result=$(( result+1 ))\n\
    \        fi\n    done\n    echo ${result}", "  local string=$1\n  local count=0\n\
    \  for i in {0..${#string}}; do\n    char=${string:$i:1}\n    [[ $char =~ [[:upper:]]\
    \ ]] && count=$(($count + 1))\n  done\n  echo $count", "  # Emulate perl regex\
    \ syntax with capture groups. \n  local str=${1:-\"\"}\n  local count=0\n  local\
    \ upper=$(perl -ne 'tr/aeiouAEIOU/AEIOUaeiou/; print if m/(..)/ && $1 =~ /(..)/;\
    \ $count++ if m/(..)/g')\n  echo \"$upper\"", "    local string=\"$1\"\n    local\
    \ upper=\"0\"\n\n    for (( i = 0; i < ${#string}; i++ )); do\n        if [[ ${string:$i:1}\
    \ == A ]]; then\n            ((upper+=1))\n        elif [[ ${string:$i:1} == E\
    \ ]]; then\n            ((upper+=1))\n        elif [[ ${string:$i:1} == O ]];\
    \ then\n            ((upper+=1))\n        elif [[ ${string:$i:1} == U ]]; then\n\
    \            ((upper+=1))\n        fi\n    done\n\n    echo $upper", "    local\
    \ i\n    local count=0\n    for (( i=0; i<${#1}; i++ )); do\n        [[ \"$i\"\
    \ -ge $(( ${#1} / 2)) && \"$i\" -le $(( ${#1} / 2 + 1 )) ]] && [[ \"${1:$i:1}\"\
    \ =~ [AEIOUaeiou] ]] && let count++\n    done\n    echo \"$count\"", "  local\
    \ n=0\n  local p='[aeiou]'\n  local c=$2\n  local v=$1\n  shift 1\n  while [ $v\
    \ ]; do\n    case \"$c\" in\n      \"A\" | \"a\") p=\"$p\"\n\t\tc=${${c#a}#a}\n\
    \t\t;;\n      \"B\" | \"b\") p=\"$p\"\n\t\tc=${${c#b}#b}\n\t\t;;\n      \"C\"\
    \ | \"c\") p=\"$p\"\n\t\tc=${${c#c}#c}\n\t\t;;\n      \"D\" | \"d\") p=\"$p\"\n\
    \t\tc=${${c#d}#d}\n\t\t;;\n      \"E\" | \"e\") p=\"$p\"\n\t\tc=${${c#e}#e}\n\t\
    \t;;\n      \"F\" | \"f\") p=\"$p\"\n\t\tc=${${c#f}#f}\n\t\t;;\n      \"G\" |\
    \ \"g\") p=\"$p\"\n\t\tc=${${c#g}#g}\n\t\t;;\n      \"H\" | \"h\") p=\"$p\"\n\t\
    \tc=${${c#h}#h}\n\t\t;;\n      \"I\" | \"i\") p=\"$p\"\n\t\tc=${${c#i}#i}\n\t\t\
    ;;\n      \"J\" | \"j\") p=\"$p\"\n\t\tc=${${c#j}#j}\n\t\t;;\n      \"K\" | \"\
    k\") p=\"$p\"\n\t\tc=${${c#k}#k}\n\t\t;;\n      \"L\" | \"l\") p=\"$p\"\n\t\t\
    c=${${c#l}#l}\n\t\t;;\n      \"M\" | \"m\") p=\"$p\"\n\t\tc=${${c#m}#m}\n\t\t\
    ;;\n      \"N\" | \"n\") p=\"$p\"\n\t\tc=${${c#n}#n}\n\t\t;;\n      \"O\" | \"\
    o\") p=\"$p\"\n\t\tc=${${c#o}#o}\n\t\t;;\n      \"P\" | \"p\") p=\"$p\"\n\t\t\
    c=${${c#p}#p}\n\t\t;;\n      \"Q\" | \"q\") p=\"$p\"\n\t\tc=${${c#q}#q}\n\t\t\
    ;;\n      \"R\" | \"r\") p=\"$p\"\n\t\tc=${${c#r}#r}\n\t\t;;\n      \"S\" | \"\
    s\") p=\"$p\"\n\t\tc=${${c#s}#s}\n\t\t", "    local string=$1\n    local upper=0\n\
    \    local i\n    for (( i=0; i<${#string}; i++ )); do\n        case \"${string[i]}\"\
    \ in\n            A|a|E|e|I|i|O|o|U|u)\n                (( upper+=1 ))\n     \
    \           ;;\n        esac\n    done\n    echo \"$upper\"", "  local string=$1\n\
    \  local count=0\n  local c\n  local count=0\n\n  for x in $string; do\n    if\
    \ [[ \"$x\" == [A-Z] ]]; then\n      count=$(( count+1 ))\n    fi\n  done\n\n\
    \  for x in $string; do\n    if [[ \"$x\" == [a-z] ]]; then\n      if [[ \"$x\"\
    \ == [A-Z] ]]; then\n        echo \"$count\"\n      fi\n    fi\n  done", "   \
    \ local vowels=$(echo \"$1\" | tr A-Z a-u)\n    local count=0\n    local i\n \
    \   for i in \"${!vowels}\"; do\n        if [[ $(expr \"$i\" \"$((i + 1))\") -eq\
    \ 0 ]]; then\n            let count+=1\n        fi\n    done\n    echo \"$count\"",
  "  local s=$1\n  local -i upper=0\n\n  for (( i=0; i<${#s}; i++ )); do\n    case\
    \ ${s:i:1} in\n      [A-Z]) upper=$((upper + 1)) ;;\n      *)\n    done\n\n  echo\
    \ $upper", "  local string=\"$1\"\n  # Count uppercase vowels in even indices.\n\
    \  local count=0;\n  for i in \"${!string}\"; do\n    (( i % 2 ))\n    (( i++\
    \ ))\n    (( count+=\"${string[i]}\"))\n  done\n  echo \"$count\"", "  local s=$1\n\
    \  local count=0\n  local vowels=\"AEIOUaeiou\"\n  for (( i=${#s}; i>0; i=i-1\
    \ )); do\n    local c=${s:i:1}\n    [[ \"$c\" =~ [[:upper:]] ]] || continue\n\
    \    [[ ${vowels:--} =~ $c ]] && count=$(( ${count}+1 ))\n  done\n  echo $count",
  "  local uppers=\"\"\n  local s=\"${1}\"\n  for (( i=0; i<${#s}; i++ )); do\n  \
    \  case \"${s:i:1}\" in\n      [AEIOUaeiou])\n        uppers=\"${uppers}${s:i:1}\"\
    \n        ;;\n      *)\n        uppers=\"${uppers}0\"\n        ;;\n    esac\n\
    \  done\n  echo $((${#s}-${#uppers}))", "  echo \"$1\" | awk '{print length($1)}'\
    \ | awk '{if ($0 ~ /[AEIOU]/) {print $0 + 1}} else {print $0}'", "    [[ \"$1\"\
    \ = \"\" ]] || [[ \"$1\" = \"-\" ]] || [[ \"$1\" =~ \"[[:upper:]]\" ]]\n    [[\
    \ \"$#\" -lt 2 ]] && echo \"Usage: $(basename $0) [string]\"\n    declare -i i\n\
    \    declare -i vowel_count=0\n    for (( i=1; i<$#; i++ )); do\n        if [[\
    \ \"$i\" -eq \"$1\" ]]; then\n            [[ \"$i\" -le $2 ]] \\\n           \
    \ && { vowel_count+=$(( i -2 )); continue; }\n            (( vowel_count += 1\
    \ ))\n        fi\n    done\n    [[ \"$vowel_count\" = 0 ]] || echo \"$vowel_count\"",
  "    # Count uppercase vowels starting from $2\n    local -i i\n\n    for (( i =\
    \ $2; $i -lt ${#1}; i = $(( i + 2 ))); )\n    do\n        # Increment counter\n\
    \        (( ${#1} > i )) || break\n        # Decrement counter\n        (( ${#1}\
    \ -= 1 )) || break\n        case \"${1:i:1}\" in\n            A)\n           \
    \     (( ${#1} -= 1 )) || break\n                ;;\n            E)\n        \
    \        (( ${#1} -= 1 )) || break\n                ;;\n            I) # Count\
    \ uppercase vowels starting from $2\n                (( ${#1} -= 2 )) || break\n\
    \                ;;\n            O)\n                (( ${#1} -= 2 )) || break\n\
    \                ;;\n            U)\n                (( ${#1} -= 2 )) || break\n\
    \                ;;\n        esac\n    done\n    echo \"${#1}\"", "  local s=$1\n\
    \  local upper=0\n  for (( i=0; i<${#s}; i++ )); do\n    (( ${s[i]:0:1}==${s[i]:0:1}[A-Z]\
    \ )) && let upper=$upper+1\n  done\n  echo $upper", "    local i\n    i=0\n  \
    \  count=0\n    for ((i = 0; i < ${#1}; i++))\n    do\n        if [[ ${1:i:2}\
    \ == \"A\" ]]; then\n            count=$((count+1))\n        fi\n    done\n  \
    \  echo $count", "\tlocal upper\n\tlocal upper_index\n\tlocal lower_count\n\t\
    local lower\n\tlocal lower_index\n\tlocal s\n\tlocal char\n\n\ts=$1\n\t# Count\
    \ all uppercase vowels in even indices\n\t# e.g. \"aaBbCcDdEeFfGg\" --> \"4\"\n\
    \tupper_count=$(echo $s | tr A-Z a-z | wc -l)\n\techo $upper_count\n\n\t# Get\
    \ the uppercase vowels in the even indices\n\t# e.g. \"aaBbCcDdEeFfGg\" --> \"\
    ABCD\"\n\tupper=$(echo $s | tr A-Z a-z)\n\techo $upper\n\n\t# Convert all letters\
    \ to lowercase letters\n\t# e.g. \"ABCD\" --> \"abcd\"\n\tlower=$(echo $upper\
    \ | tr '[A-Z]' '[a-z]')\n\techo $lower\n\n\t# Count the number of uppercase vowels\
    \ in the even indices\n\t# e.g. \"abcd\" --> \"BCD\"\n\t# e.g. \"BBBBBBB\" -->\
    \ \"BB\"\n\tlower_count=$(echo $lower | tr a-z A-Z | wc -l)\n\techo $lower_count\n\
    \n\t# Get the index of a vowel at the even indices\n\t# e.g. \"BCD\" --> \"0\"\
    \n\t# e.g. \"BB\" --> \"3\"\n\tlower_index=$(echo $lower | tr a-z A-Z)\n\techo\
    \ $lower_index", "    local str=$1\n    local count=0\n    local vowels=$2\n \
    \   local n=0\n    local i\n    local j\n    for ((i=0; i<${#str}; i++)); do\n\
    \        j=$((i+1))\n        if [[ ${str[$i]} == ${vowels} ]]; then\n        \
    \    count=$((count+1))\n        elif [[ ${str[$i]} == $vowels ]]; then\n    \
    \        count=$((count-1))\n        fi\n    done\n    echo $count", "  local\
    \ lower=$1\n\n  # This could all be done with regex, but I find the sed syntax\
    \ easy\n  lower=$(echo $lower | sed 's/[^a-zA-Z]/\\n/g')\n  local count=0\n  while\
    \ read line; do\n    lower=$(echo $line | sed \"s/[^a-zA-Z]/\\n/g\")\n    local\
    \ vowel=0\n    while read line; do\n      lower=$(echo $line | sed \"s/[^a-zA-Z]/\\\
    n/g\")\n      if [[ \"$lower\" =~ [AEIOUaeiou] ]]; then\n        vowel=$((vowel+1))\n\
    \      fi\n    done\n    echo $((count + vowel))\n  done < <(echo $lower | sed\
    \ 's/[^a-zA-Z]/\\n/g' | sed 's/ //g')", "    local str=\"$1\"\n    local upper=0\n\
    \    # Loop over every character in the string:\n    for ((i=0; i < ${#str}; i++));\
    \ do\n        # Check if the character is an uppercase vowel:\n        if [[ \"\
    ${str:$i:1}\" =~ ^[AEIOUaeiou]$ ]]; then\n            ((upper+=1))\n        fi\n\
    \    done\n    # Return the total count:\n    echo \"$upper\"", "  s=$1\n  i=0\n\
    \  while (( i <= ${#s} )) ; do\n    (( i % 2 )) && continue\n    (( ${#s[i]} >\
    \ 1 )) && break\n    (( ++i ))\n  done\n  echo $(( ${#s[i]} - 1 ))", "    echo\
    \ $1 | cut -c ${#1} - |\n\ttr [A-Z] \\* | tr '\\012' '\\n' | sort | uniq -c |\
    \ tr '\\n' ' ' | tail -n 1 | tr '[:upper:]' '[:lower:]'", "    awk '{\n      \
    \  for (i=1; i<=NF; i++) {\n            if (length($i) > 0 && index($i, $i) ==\
    \ 2) {\n                upper[$i]+=1\n            }\n        }\n    }\n    END\
    \ {\n        for (e in upper)\n            if (upper[e]%2 == 0) {\n          \
    \      print e\n            }\n    }' \"$1\"", "    local s=$1\n    local count=0\n\
    \    for i in $(seq 0 $((${#s}-1)) ); do\n        case \"${s:$i:1}\" in\n    \
    \        [Aa][Nn][Oo][Uu])\n                count=$(( count + 1 ))\n         \
    \       ;;\n            *)\n                ;;\n        esac\n    done\n    echo\
    \ $count", "    # convert string to lower case and count the uppercase letters\n\
    \    # in even indices\n    local -i x=0\n    local -i c=0\n    for x in \"${1:-}\"\
    ; do\n        [[ \"$x\" == [a-z]*[A-Z][a-z]* ]] && (( c+=x ))\n    done\n    echo\
    \ \"$c\"", "    local s=$1\n    local i=${#s}\n    local c=0\n    while [ $i -gt\
    \ 0 ]; do\n        case \"${s:$i:1}\" in\n        [aeiou]) c=$((c+1));;\n    \
    \    *)    break;;\n        esac\n        (( i=i-1 ))\n    done\n    echo \"$c\"",
  "  cat <<EOT > /dev/null\n#!/bin/bash\n# Given a string s, count the number of uppercase\
    \ vowels in even indices.\n# For example:\n# >>> $(count_upper \"aBCdEf\")\n#\
    \ \"1\"\n# >>> $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper \"dBBE\"\
    )\n# \"0\"\n#\n# $1 is a string\ncount_upper() {\n  cat <<EOT > /dev/null\n#!/bin/bash\n\
    # Given a string s, count the number of uppercase vowels in even indices.\n# For\
    \ example:\n# >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\"\
    )\n# \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper()\
    \ {\n  cat <<EOT > /dev/null\n#!/bin/bash\n# Given a string s, count the number\
    \ of uppercase vowels in even indices.\n# For example:\n# >>> $(count_upper \"\
    aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper\
    \ \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper() {\n  cat <<EOT > /dev/null\n\
    #!/bin/bash\n# Given a string s, count the number of uppercase vowels in even\
    \ indices.\n# For example:\n# >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>> $(count_upper\
    \ \"abcdefg\")\n# \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n#\n# $1 is a\
    \ string\ncount_upper() {\n  cat <<EOT > /dev/null\n#!/bin/bash\n# Given a string\
    \ s, count the number of uppercase vowels in even indices.\n# For example:\n#\
    \ >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\")\n#\
    \ \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper()\
    \ {\n  cat <<EOT > /dev/null\n#!/bin/bash\n# Given a string s, count the number\
    \ of uppercase vowels in even indices.\n# For example:\n# >>> $(count_upper \"\
    aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper\
    \ \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper() {\n  cat <<EOT > /dev/null\n\
    #!/bin/bash\n# Given a string s, count the number of uppercase vowels in even\
    \ indices.\n# For example:\n", "  local string i\n  string=\"$1\"\n  for ((i=0;\
    \ i < ${#string}; i++)); do\n    [[ \"${string:$i:1}\" == [A-Z]* ]] &&\n     \
    \ (( i % 2 == 0 )); do\n      (( i++ ))\n    done\n  done\n  echo \"$i\"", '  echo
    "$1" | grep "^[[:lower:]]" | grep -i "[aeiouyAEIOUY]" | wc -l', "    local s=\"\
    $1\"\n    local upper=0\n    for (( i = 0; i < ${#s}; i++ )); do\n        if [[\
    \ ${s:i:1} == [[:upper:]]* ]]; then\n            ((upper++))\n        fi\n   \
    \ done\n    echo \"$upper\"", "    s=\"${1:?}\"\n    case \"$s\" in\n        *[!A-Z]*)\
    \ echo \"0\";;\n        *[!A]*) echo \"1\";;\n        *[!B]*) echo \"2\";;\n \
    \       *[!C]*) echo \"3\";;\n        *[!D]*) echo \"4\";;\n        *[!E]*) echo\
    \ \"5\";;\n        *[!F]*) echo \"6\";;\n        *[!G]*) echo \"7\";;\n      \
    \  *[!H]*) echo \"8\";;\n        *[!I]*) echo \"9\";;\n        *[!J]*) echo \"\
    10\";;\n        *[!K]*) echo \"11\";;\n        *[!L]*) echo \"12\";;\n       \
    \ *[!M]*) echo \"13\";;\n        *[!N]*) echo \"14\";;\n        *[!O]*) echo \"\
    15\";;\n        *[!P]*) echo \"16\";;\n        *[!Q]*) echo \"17\";;\n       \
    \ *[!R]*) echo \"18\";;\n        *[!S]*) echo \"19\";;\n        *[!T]*) echo \"\
    20\";;\n        *[!U]*) echo \"21\";;\n        *[!V]*) echo \"22\";;\n       \
    \ *[!W]*) echo \"23\";;\n        *[!X]*) echo \"24\";;\n        *[!Y]*) echo \"\
    25\";;\n        *[!Z]*) echo \"26\";;\n        *[!a]*) echo \"1\";;\n        *[!b]*)\
    \ echo \"2\";;\n        *[!c]*) echo \"3\";;\n        *[!d]*) echo \"4\";;\n \
    \       *[!e]*) echo \"5\";;\n        *[!f]*) echo \"6\";;\n        *[!g]*) echo\
    \ \"7\";;\n        *[!h]*) echo \"8\";;\n        *[!i]*) echo \"9\";;\n      \
    \  *[!j]*) echo \"10\";;\n        *[!k]*) echo \"11\";;\n        *[!l]*) echo\
    \ \"12\";;\n        *[!m]*) echo \"13\";;\n        *[!n]*) echo \"14\";;\n   \
    \     *[!o]*) echo \"15\";;\n        *[!p]*) echo \"16\";;\n        *[!q]*) echo\
    \ \"17\";;\n        *[!r]*) echo \"18\";;\n        *[!s]", "    local str=$1\n\
    \    local upper_count=0\n    for (( i=1; i<${#str}; i++ ))\n    do\n        if\
    \ [[ ${str:i:2} == \"AEIOU\" ]]\n        then\n            upper_count=$((upper_count\
    \ + 1))\n        fi\n    done\n    echo $upper_count", "  local s=\"${1}\"\n \
    \ local lower=${s:0:1}\n  local upper=${s:0:1}\n  local even=${s:0:2}\n  local\
    \ count=0\n  while [ \"${upper}\" != \"E\" ]; do\n    case \"${lower}\" in\n \
    \     \"a\"|\"A\")\n        (( count += 1; ))\n        ;;\n      \"b\"|\"B\")\n\
    \        (( count += 1; ))\n        ;;\n      \"c\"|\"C\")\n        (( count +=\
    \ 1; ))\n        ;;\n      \"d\"|\"D\")\n        (( count += 1; ))\n        ;;\n\
    \      \"e\"|\"E\")\n        (( count += 1; ))\n        ;;\n      \"f\"|\"F\"\
    )\n        (( count += 1; ))\n        ;;\n      \"g\"|\"G\")\n        (( count\
    \ += 1; ))\n        ;;\n      \"h\"|\"H\")\n        (( count += 1; ))\n      \
    \  ;;\n      \"i\"|\"I\")\n        (( count += 1; ))\n        ;;\n      \"j\"\
    |\"J\")\n        (( count += 1; ))\n        ;;\n      \"k\"|\"K\")\n        ((\
    \ count += 1; ))\n        ;;\n      \"l\"|\"L\")\n        (( count += 1; ))\n\
    \        ;;\n      \"m\"|\"M\")\n        (( count += 1; ))\n        ;;\n     \
    \ \"n\"|\"N\")\n        (( count += 1; ))\n        ;;\n      \"o\"|\"O\")\n  \
    \      (( count += 1; ))\n        ;;\n      \"p\"|\"P\")\n        (( count +=\
    \ 1; ))\n        ;;\n      \"q\"|\"Q\")\n        (( count += 1; ))\n        ;;\n\
    \      \"r\"|\"R\")\n        (( count += 1; ))\n        ;;\n      \"s\"|\"S\"\
    )\n        (( count += 1; ))\n        ;;\n      \"t\"|\"T\")\n        (( count\
    \ += 1; ))\n        ;;\n      \"u\"|\"U\")\n        (( count += 1; ))\n      \
    \  ;;\n      \"v\"|\"V\")\n        (( count += 1; ))\n        ;;\n      \"w\"\
    |\"W\")\n        (( count += 1; ))\n        ;;\n      \"x\"|\"X\")\n        ((\
    \ count += 1; ))\n        ;;\n      \"y\"|\"Y\")\n        (( count += 1; ))\n\
    \        ;;\n      \"z\"|\"Z\")\n        (( count += 1; ))\n        ;;\n", " \
    \ local s=$1\n  local count=0\n  local j=0\n  while [[ \"$j\" -lt \"${#s}\" ]];\
    \ do\n    [[ ${s:$j:2} == [AEIOUaeiou] ]] && count=$((count + 1))\n    j=$((j\
    \ + 1))\n  done\n  echo $count", "    local string count=0\n    local i=0 char\n\
    \    for string in \"$@\"; do\n        char=$(echo \"$string\" | sed \"s/^.\\\
    {1,\\}/&\\E/g\")\n        (( $i % 2 == 0 )) && [ \"$char\" = \"A\" ] || [ \"$char\"\
    \ = \"E\" ]\n        (( ++i ))\n    done\n    echo \"$count\"", "    local s=\"\
    $1\"\n    local result=0\n    local i=0\n    while [ $i -lt ${#s} ]; do\n    \
    \    if [[ ${s:$i:1} == [[:upper:]]* ]]; then\n            result=$((result+1))\n\
    \        fi\n        i=$((i+1))\n    done\n    echo \"$result\"", "  local s=$1\n\
    \  local count=0\n  local i\n\n  for (( i=1; i<=\"${#s}; i++ )); do\n    if [[\
    \ \"${s:i:1}\" == A ]]; then\n      ((count+=1))\n    fi\n  done\n\n  echo \"\
    $count\"", "  local string=\"$1\"\n\n  local counter\n  for counter in $(seq 0\
    \ \"${#string}\")\n  do\n      local char=${string:$counter:1}\n      case \"\
    $char\" in\n          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z)\n \
    \             ((counter % 2 == 0)) && counter=$((counter + 1))\n             \
    \ ;;\n      esac\n  done\n\n  echo $counter", "    local string=\"$1\"\n    local\
    \ lower=$(echo \"$string\" | tr '[:lower:]' '[:upper:]')\n    local vowels=$(echo\
    \ \"$lower\" | grep '[aeiouAEIOU]')\n    echo $(($(echo \"$vowels\" | wc -l) -\
    \ 1))", "\tlocal i\n\tlocal count\n\tlocal str=$1\n\t# Count all uppercase vowels\n\
    \tcount=0\n\tfor (( i=1; i<${#str}; i++ )); do\n\t\tstr=${str//[^a-zA-Z]}\n\t\t\
    if [[ ${str:0:1} == A ]]; then\n\t\t\tcount=$(( count + 1 ))\n\t\telif [[ ${str:0:1}\
    \ == E ]]; then\n\t\t\tcount=$(( count + 1 ))\n\t\telif [[ ${str:0:1} == I ]];\
    \ then\n\t\t\tcount=$(( count + 1 ))\n\t\telif [[ ${str:0:1} == O ]]; then\n\t\
    \t\tcount=$(( count + 1 ))\n\t\telif [[ ${str:0:1} == U ]]; then\n\t\t\tcount=$((\
    \ count + 1 ))\n\t\tfi\n\tdone\n\techo $count", "    local string=\"$1\"\n   \
    \ local i\n    local vowels=\"AEIOU\"\n    local uppers=0\n    for ((i=0; i <\
    \ ${#string}; i++)); do\n        [[ \"${string: i: 1}\" == \"${vowels:1}\" ]]\
    \ && let ++uppers\n    done\n    echo $uppers", "    local string vowel\n    string=$1\n\
    \    vowel='[AEIOU]'\n    local count=0\n    local index\n    index=-1\n    for\
    \ (( i=${#string} )-1; i>=0; i=$(( $i + 1 ))); do\n        if [[ $string[i] ==\
    \ $vowel ]]; then\n            (( index++ ))\n            if [[ $index == 2 &&\
    \ $string[i+1] == $vowel ]]; then\n                (( count++ ))\n           \
    \ fi\n        fi\n    done\n    echo \"$count\"", "  declare -i s=$1\n  declare\
    \ -i count=0\n  while [[ ${s} ]]; do\n    [[ \"${s:0:1}\" =~ [AEIOU] ]] && count=$((\
    \ count + 1 ))\n    s=${s%?}\n  done\n  echo $count", "    local count=0\n   \
    \ local s=$1\n    local i=0\n\n    # skip the first character and check for an\
    \ even index\n    [[ \"$s\" = \"${s:0:1}\" ]]; [ \"$((i % 2))\" -eq \"0\" ]\n\
    \    # count up\n    for i in $(seq 0 $((${#s} - 2)) 0); do\n        [[ \"$s\"\
    \ == \"${s:i:1}\" && \"$((i % 2))\" -eq \"0\" ]] && count=$((count+1))\n    done\n\
    \    # count down\n    for i in $(seq 0 $((${#s} - 1)) 2); do\n        [[ \"$s\"\
    \ == \"${s:i:1}\" && \"$((i % 2))\" -eq \"2\" ]] && count=$((count+1))\n    done\n\
    \    echo \"$count\"", "    local str=\"$1\"\n    echo \"${#str}\"\n    local\
    \ i=0\n    local upper=0\n    while [ \"${str:$i:1}\" != \"$\" ] && [ \"${str:$i:1}\"\
    \ != \"${str:0:1}\" ]\n    do\n        ((i++))\n    done\n    [[ \"$i\" -ge \"\
    $2\" && \"${str:$i:1}\" == \"u\" ]]", "    echo \"$1\" | sed -r 's/^[^aeiouAEIOU]+//g'\
    \ | grep -Ev '^[^aeiou]' | tr -cd '[:upper:]' | wc -c", "    local STRING=\"$1\"\
    \n    local VOWELS=([AEIOU])\n    local COUNT=0\n    local V=\"\"\n\n    for I\
    \ in $(seq 0 \"${#STRING}\"); do\n        # Save the first char of each string\n\
    \        if [[ ${STRING:$I:1} == [[:upper:]] ]]; then\n            V=\"${V}${STRING:$I:1}\"\
    \n        fi\n\n        # If the current char is a vowel...\n        if [[ \"\
    ${VOWELS[*]}\" =~ \"${V}\" ]]; then\n            # If this vowel has an even index...\n\
    \            if [[ ${I} -ge 1 ]] && [[ ${I} -le ${#VOWELS[@]} ]]; then\n     \
    \           COUNT+=1\n            fi\n        fi\n    done\n    echo $COUNT",
  "    local s=$1\n    local len=${#s}\n    local evencount=0\n    local evenchar\n\
    \    for (( i = 0; i <= len; i++ )); do\n        evenchar=${s:i:2}\n        if\
    \ [ \"$evenchar\" == \"A\" ] || [ \"$evenchar\" == \"a\" ] || [ \"$evenchar\"\
    \ == \"E\" ] || [ \"$evenchar\" == \"e\" ] || [ \"$evenchar\" == \"I\" ] || [\
    \ \"$evenchar\" == \"i\" ] || [ \"$evenchar\" == \"O\" ] || [ \"$evenchar\" ==\
    \ \"o\" ] || [ \"$evenchar\" == \"U\" ] || [ \"$evenchar\" == \"u\" ] ; then\n\
    \            evencount=$((evencount + 1))\n        fi\n    done\n    echo $evencount",
  "  local i n s upper\n  upper=0\n  while ((i<${#1})); do\n    case ${1:$i:1} in\n\
    \      \"A\" ) upper=$((upper+1));;\n      \"B\" ) upper=$((upper+1));;\n    \
    \  \"C\" ) upper=$((upper+1));;\n      \"D\" ) upper=$((upper+1));;\n      \"\
    E\" ) upper=$((upper+1));;\n      \"F\" ) upper=$((upper+1));;\n      \"G\" )\
    \ upper=$((upper+1));;\n      \"a\" ) upper=$((upper+1));;\n      \"b\" ) upper=$((upper+1));;\n\
    \      \"c\" ) upper=$((upper+1));;\n      \"d\" ) upper=$((upper+1));;\n    \
    \  \"e\" ) upper=$((upper+1));;\n      \"f\" ) upper=$((upper+1));;\n      \"\
    g\" ) upper=$((upper+1));;\n      \"0\" ) upper=$((upper+1));;\n      \"1\" )\
    \ upper=$((upper+1));;\n      * ) upper=$((upper+0));;\n    esac\n    i=$((i+1))\n\
    \  done\n  echo $upper", "    local -n s=\"$1\"\n    local vowels\n\n    vowels=\"\
    ${s[@]/aA/d}\"\n    (( $((${#vowels} & 1)) == 0 ))", "  # Convert string to lower\
    \ case\n  s=${1^^}\n\n  # Loop over even indices\n  for (( i=0; (i<${#s}); i+=2\
    \ ))\n  do\n    # Skip if char at i does not satisfy $2\n    # $? gives the status\
    \ code of last command execution\n    # (( ... )) executes the commands in the\
    \ brackets\n    # $? returns 0 on success, non-zero otherwise\n    if (( $? ));\
    \ then\n      continue;\n    fi\n\n    # Skip if char at i does not equal vowel\
    \ at i\n    if [[ ${s:$i:1} != *[AEIOU]* ]]; then\n      continue;\n    fi\n\n\
    \    # Increment counter\n    let \"count+=1\"\n  done\n\n  # Return counter\n\
    \  echo \"$count\"", "    local s=$1\n    local count\n    local i\n    for i\
    \ in $(seq 0 $((${#s}-1)/2)); do\n        if [ \"${s:i:1}\" == A ] && [ \"${s:i:2}\"\
    \ == A ]; then\n            count=$((count+1))\n        fi\n    done\n    echo\
    \ \"$count\"", "  local n=0\n  local s=${1:-}\n  local i\n  [[ \"$s\" =~ ([^AEIOUaeiou])\\\
    1([^AEIOUaeiou])\\2([^AEIOUaeiou])\\3([^AEIOUaeiou])\\4([^AEIOUaeiou])\\5 ]] \\\
    \n    || return 1\n  for (( i=1; i<=6; i++ )); do\n    [[ \"${s:i:1}\" =~ ^[AEIOUaeiou]$\
    \ ]] && n+=1 && break\n  done\n  echo -n \"$n\"", "    local input=\"$1\"\n  \
    \  local output\n    local num_vowels\n    local i\n    for ((i = 0; i < ${#input};\
    \ i+=2)); do\n        local c=\"${input:$i:1}\"\n        num_vowels=\"$(echo \"\
    $c\" | grep -o '[aeiouAEIOU]' | wc -l)\"\n        if ((num_vowels > 0)); then\n\
    \            ((num_vowels++))\n        fi\n        echo \"$num_vowels\"\n    done",
  "    local i c cc cs count\n    count=$(expr \"$#\" - 2)\n    cc=\"\\001\"\n   \
    \ for ((i=1; i<=$((count*2)); i++)); do\n        cs=$(expr \"$c\" ++ \"$c\" |)\n\
    \        if [ \"$c\" = \"$cs\" ]; then\n            cc=\"\\002\"\n        fi\n\
    \        if [ \"$c\" = \"$cc\" ]; then\n            cc=\"\\001\"\n        fi\n\
    \        c=$(echo \"$c\" | tr -cs A-Z \"$cc\") || exit 1\n    done\n    echo \"\
    $count\" \"$c\"", "  local s=$1\n  local vowels=\"AEIOU\"\n  local upper=0\n \
    \ for i in {0..${#s}}; do\n    (( ${s:i:1} == ${vowels} )) && upper=1\n  done\n\
    \  echo \"$upper\"", "  echo \"$1\" |\n  grep -i -E '[AEIOUaeiou]' |\n  grep -v\
    \ '^[aeiou]$' |\n  grep -o '[AEIOUaeiou]'", "  local str=$1\n  local count=0\n\
    \  local i\n  for i in $(seq 0 ${#str}); do\n    [[ \"${str:$i:1}\" == \"A\" ]]\n\
    \    count=$((count + ${#str:$i:1}))\n    [[ \"${str:$i:1}\" == \"E\" ]]\n   \
    \ count=$((count + ${#str:$i:1}))\n    [[ \"${str:$i:1}\" == \"I\" ]]\n    count=$((count\
    \ + ${#str:$i:1}))\n    [[ \"${str:$i:1}\" == \"O\" ]]\n    count=$((count + ${#str:$i:1}))\n\
    \    [[ \"${str:$i:1}\" == \"U\" ]]\n    count=$((count + ${#str:$i:1}))\n  done\n\
    \  echo \"$count\"", "    local s=$1\n    local count=0\n    local odd=0\n   \
    \ for i in $s\n    do\n        if [[ $(expr index \"$i\" [A-Z]) = 0 ]]\n     \
    \   then\n            odd=`expr $odd + 1`\n            continue\n        fi\n\
    \        if [[ $((i % 2)) -eq 0 ]]\n        then\n            count=`expr $count\
    \ + 1`\n        fi\n    done\n    echo $count", "    [[ \"${1}\" =~ \"^[[:upper:]]+$\"\
    \ ]] || return 0\n    (( ${BASH_REMATCH[1]} % 2 )) || return 0", "  local -n string=$1\n\
    \  local count=0\n  [[ -n $string ]] && string=${string//[[:upper:]]/}\n  [[ $string\
    \ =~ [[:upper:]] ]] && count=$((${#string} + 1))\n  [[ $((count % 2)) -eq 0 ]]\
    \ && echo 0", "  local string result\n  string=\"$1\"\n\n  result=0\n  for ((i=0;\
    \ i<${#string}; i++)); do\n    if [[ \"${string[i]}\" == [A-Z] ]]; then\n    \
    \  ((result++))\n    fi\n  done\n\n  echo $result", "    local count=0\n    for\
    \ i in \"${!1}\"; do\n        [[ \"$i\" -eq 0 ]] && continue\n        [[ \"${!1}\"\
    \ =~ \"${i:0:1}[AEIOU]\" ]] && count=$(( count+1 ))\n    done\n    echo \"$count\"",
  "    local vowels=\"aeiouyAEIOUY\"\n    local s=$1\n    local count \n    count=0\n\
    \    for (( i=0; i < ${#s}; i++ )); do\n        case \"$s\" in\n            $vowels)\n\
    \                if [[ $(($i%2)) -ne $((i-1)) ]] ; then\n                    let\
    \ count++\n                fi\n                break\n                ;;\n   \
    \         *)\n                break\n                ;;\n        esac\n    done\n\
    \    return $count", "    local s=$1\n    echo ${#s}\n    local count=0\n    for\
    \ i in $(seq 1 ${#s}); do\n        if [[ ${s:$i:1} == [AEIOUaeiou] ]]; then\n\
    \            ((count++))\n        fi\n    done\n    echo \"$count\"", "  declare\
    \ -i lower=0\n  while [[ $1 ]]; do\n    (( lower += $1 <= 90 ))\n    shift\n \
    \ done\n  echo \"$lower\"", "  local i vowels=\"AEIOUaeiou\"\n  for (( i=0; i<${#1};\
    \ i++ )); do\n    [[ \"${1:$i:1}\" == \"$vowels:0\" ]] && (( i++ )); continue\n\
    \    [[ \"$1\" == \"${1:$i:1}\" ]] && (( i++ )); continue\n  done\n  echo $i",
  "    local string=\"$1\"\n    local count\n    local i\n    local c\n    local u\n\
    \n    count=0\n    for ((i=0; i<${#string}; i++))\n    do\n        c=\"${string:i:1}\"\
    \n        u=false\n        if [[ \"$c\" =~ [AEIOUYaeiouy] ]]\n        then\n \
    \           u=true\n        fi\n        if [ \"$u\" == \"false\" ]\n        then\n\
    \            count=$(expr \"$count\" + 1)\n        fi\n    done\n\n    echo $(expr\
    \ \"$count\" + 1)", "  local -n s=$1\n  local i\n  local num_upper=0\n  for i\
    \ in $(seq 0 ${#s})\n  do\n    [[ \"${s:$i:1}\" == \"A\" ]] || [[ $((i+1)%2) ==\
    \ 0 ]] || num_upper=$((num_upper+1))\n  done\n  echo $num_upper", "    awk '{\n\
    \      for( i=1;i<=NF;i++ ){ \n        if ( length($i) == 1 ) { \n          if\
    \ ( $i == \"A\" ||\n              $i == \"E\" ||\n              $i == \"I\" ||\n\
    \              $i == \"O\" ||\n              $i == \"U\" ||\n              $i\
    \ == \"a\" ||\n              $i == \"e\" ||\n              $i == \"i\" ||\n  \
    \            $i == \"o\" ||\n              $i == \"u\" ) { $count++ }\n      \
    \  } \n      } \n    }'", "  local input=\"$1\"\n  local output=\"$2\"\n  if [\
    \ \"${#input}\" -ne \"1\" ]; then\n      echo \"invalid argument\"\n      exit\
    \ 1\n  fi\n  local vowels=\"a\"\n  for ((i=0; i < ${#input}; i=i+2)); do\n   \
    \   local c=\"${input:$i:1}\"\n      if [ \"$c\" == \"A\" -o \"$c\" == \"a\" ]\
    \ ; then\n          vowels=\"$c $vowels\"\n      fi\n      if [ \"$c\" == \"E\"\
    \ -o \"$c\" == \"e\" ] ; then\n          vowels=\"$c $vowels\"\n      fi\n   \
    \   if [ \"$c\" == \"I\" -o \"$c\" == \"i\" ] ; then\n          vowels=\"$c $vowels\"\
    \n      fi\n      if [ \"$c\" == \"O\" -o \"$c\" == \"o\" ] ; then\n         \
    \ vowels=\"$c $vowels\"\n      fi\n      if [ \"$c\" == \"U\" -o \"$c\" == \"\
    u\" ] ; then\n          vowels=\"$c $vowels\"\n      fi\n  done\n  echo \"$((${#vowels})/2)\"",
  "    echo \"$1\" | tr -cd '[:upper:]' | wc -c", "  local s=$1\n  local count=0\n\
    \  local vowels=\"AEIOUYaeiouy\"\n  for i in $(seq 0 $(($s - 1))); do\n    case\
    \ \"${s:$i:1}\" in\n      \"a\") count=$((count + 1)) ;;\n      \"e\") count=$((count\
    \ + 1)) ;;\n      \"i\") count=$((count + 1)) ;;\n      \"o\") count=$((count\
    \ + 1)) ;;\n      \"u\") count=$((count + 1)) ;;\n      \"y\") count=$((count\
    \ + 1)) ;;\n      *) echo -n \"error!\" ; return 1 ;;\n    esac\n  done\n  if\
    \ ((count % 2)); then\n    echo -n \"0\"\n  else\n    echo -n \"1\"\n  fi", " \
    \ echo \"$1\" | awk '{\n    for (i=1; i<=NF; i++) {\n      # ignore empty fields\n\
    \      if ($i ~ /^$/) {next}\n      # count even indices\n      if (i % 2 == 0)\
    \ {\n        s += gsub(/[AEIOU]/,\"&\",$i)\n      }\n    }\n  }\n  END {print\
    \ s}'", "    local -n vowels='count'\n    local i ret=0\n\n    for ((i=0; i<${#1};\
    \ i++)); do\n        case \"${1:$i:1}\" in\n            A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)\
    \ ret=$((ret+1));;\n        esac\n    done\n\n    ${vowels+\"count\"}=${ret}",
  "    local str=\"${1}\"\n    local i result\n\n    for ((i=1; i<${#str}; i++));\
    \ do\n        result=0\n        [[ $str[$i] == 'A' ]] && result+=1 \n        [[\
    \ $str[$i] == 'E' ]] && result+=1 \n        [[ $str[$i] == 'I' ]] && result+=1\
    \ \n        [[ $str[$i] == 'O' ]] && result+=1 \n        [[ $str[$i] == 'U' ]]\
    \ && result+=1 \n        [[ ($i % 2) == 1 ]] && echo \"$result\"\n    done", " \
    \ local s=${1%%[!aBCdEf]}\n  (( ${#s} % 2 )) && return 0\n  local t=${s#*[!aBCdEf]}\n\
    \  (( ${#t} % 2 )) && return 0\n  [[ \"$s\" = *[!aBCdEf][!Aa][!a][!A] ]]", " \
    \   local i n x\n    n=0\n    for ((i = 0; i < ${#1}; ++i)); do\n        x=${1:$i:1}\n\
    \        if [[ \"$x\" =~ [AEIOUaeiou] ]]; then\n            ((n+=1))\n       \
    \ fi\n    done\n    echo $n", "    if [[ ${#1} != ${#2} ]]; then\n        echo\
    \ \"error: count upper called on invalid arguments: $1 $2\"\n        return 1\n\
    \    fi\n    local i\n    local count\n    count=0\n    for i in $(seq 0 ${#1})\n\
    \    do\n        case \"${1}$i\" in\n        [A-Z]*)\n            ((count+=1))\n\
    \        esac\n    done\n    echo $count", "  local string=$1\n  local vowel_count=0\n\
    \  local i j\n\n  for ((i=0; i<${#string}; i++))\n  do\n    j=$((i%2))\n    ((j++))\n\
    \    [[ $j -eq 0 ]] && continue\n    ((string[$i])=~/^[AEIOU]/ && vowel_count++)\
    \ || continue\n  done\n\n  echo \"$vowel_count\"", "  local s=${1}\n  local i\n\
    \  for i in $(seq ${#s}); do\n    if [[ ${s:i:2} == [A-Z] ]]; then\n      local\
    \ c=$((${#s}-i))\n      echo ${s:0:$c}\n      break\n    fi\n  done", "  awk -F\"\
    [AEIOUaeiou]\" '{\n    for (i=1; i<=NF; i++) {\n      if ($i ~ /[AEIOUaeiou]/)\
    \ {\n        if ($i % 2 == 0) {\n          count++\n        }\n      }\n    }\n\
    \  }\n  END {\n    print count\n  }'", "    local str=\"$1\"\n    local n=0\n\
    \    local i\n    i=0\n    while [ $i -lt ${#str} ]; do\n        case ${str:$i:1}\
    \ in\n            a[*]) n=$((n+1));;\n            [?]) n=$((n+1));;\n        \
    \    [*]) n=$((n+1));;\n            [?]) n=$((n+1));;\n            [*]) n=$((n+1));;\n\
    \            [?]) n=$((n+1));;\n            *) n=$((n+1));;\n        esac\n  \
    \      i=$((i+1))\n    done\n    echo \"$n\"", "  local STRING=\"$1\"\n\n  local\
    \ i\n  for i in \"${!STRING}\"; do\n    [[ \"$i\" -eq \"$((i*2)/2)\" ]] && (([\
    \ \"$i\" -ge 0 ]) && echo \"1\" || echo \"0\")\n  done", "  local s=$1\n  echo\
    \ $(echo \"$s\" | tr [a-z] [A-Z] | wc -w)", "  local str=$1\n\n  while [[ $str\
    \ != \"\" ]]; do\n    # $str is lowercase\n    local upper=0\n    for ((i=0; i\
    \ < ${#str}; i+=2)); do\n      [[ \"${str:i:1}\" == \"A\" ]] && upper=1\n    \
    \  [[ \"${str:i:1}\" == \"E\" ]] && upper=1\n      [[ \"${str:i:1}\" == \"I\"\
    \ ]] && upper=1\n      [[ \"${str:i:1}\" == \"O\" ]] && upper=1\n      [[ \"${str:i:1}\"\
    \ == \"U\" ]] && upper=1\n    done\n    # $upper is a 0 or 1\n    echo ${upper}\n\
    \    str=${str#??}\n  done", "    # Write your code here.\n    # $2 is the string\n\
    \    #\n    # 1. Initialize a counter to 0\n    # 2. For each character of $2,\
    \ if it's a vowel, increment the counter\n    # 3. If $2 is empty or if the counter\
    \ mod 2 is zero, print 0\n    # 4. If counter is odd, print 1\n    # $2 should\
    \ be lowercase\n    #\n    # Hint: Use regular expressions to solve this problem\n\
    \    # Note: You may not use any helper functions or builtins\n    #\n    local\
    \ counter=0\n    local s=$1\n    local vowels=\"aeiouy\"\n    [[ \"$2\" =~ ^([a-z]+)\
    \ ]]\n    [[ \"$2\" =~ ^([a-z]+)\\Z$ ]]\n    [[ \"$2\" =~ ^[a-z]*\\Z$ ]]\n   \
    \ [[ \"$2\" =~ ^[a-z]*\\([a-z]\\)\\Z$ ]]\n    [[ \"$2\" =~ ^[a-z]*\\([a-z]\\)\\\
    ([a-z]\\)\\Z$ ]]\n    [[ \"$2\" =~ ^[a-z]*\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\\
    Z$ ]]\n    [[ \"$2\" =~ ^[a-z]*\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\\
    Z$ ]]\n    [[ \"$2\" =~ ^[a-z]*\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\\
    ([a-z]\\)\\Z$ ]]\n    [[ \"$2\" =~ ^[a-z]*\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\\
    ([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\Z$ ]]\n    [[ \"$2\" =~ ^[a-z]*\\([a-z]\\)\\\
    ([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\Z$ ]]\n    [[\
    \ \"$2\" =~ ^[a-z]*\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\\
    )\\([a-z]\\)\\([a-z]\\)\\Z$ ]]\n    [[ \"$2\" =~ ^[a-z]*\\([a-z]\\)\\([a-z]\\\
    )\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\\
    )\\Z$ ]]\n    [[ \"$2\" ", "  local s=$1\n  local -n count=\"$(echo \"$s\" | sed\
    \ 's/./&\\U&/g')\"\n  count=\"${count%,}\"\n  count=\"${count##,}\"\n  count=\"\
    ${count%.}\"\n  echo \"$count\"", "  # Echo the result as well.\n  echo \"$(echo\
    \ \"$1\" | tr [A-Z] [a-z])\"\n  # Count even indices.\n  (( ${1:0:2} & 1 )) &&\
    \ echo \"1\" || echo \"0\"", "\tlocal string=\"$1\"\n\tlocal uppercase_vowels=\"\
    aeiouAEIOU\"\n\tlocal uppercase_vowels_index=0\n\tlocal result\n\t\n\tresult=$(echo\
    \ $string | sed 's/[[:upper:]]//g' | grep -o \"[$uppercase_vowels]\")\n\t\n\t\
    if [ $? != 0 ]; then\n\t\techo \"Failed to count uppercase vowels in string: $string\"\
    \n\t\texit 1\n\tfi\n\t\n\t\n\tfor index in $(seq $(($#-2)) -1 0); do\n\t\tif [[\
    \ $((index%2)) == 0 ]]; then\n\t\t\tif [[ $result != $uppercase_vowels ]]; then\n\
    \t\t\t\techo \"$uppercase_vowels_index: expected $uppercase_vowels, got $result\"\
    \n\t\t\t\texit 2\n\t\t\tfi\n\t\t\t\n\t\t\tuppercase_vowels_index=\"$index\"\n\t\
    \tfi\n\tdone\n\t\n\tif [[ $result != $uppercase_vowels ]]; then\n\t\techo \"Failed\
    \ to count uppercase vowels in string: $string\"\n\t\texit 2\n\tfi\n\t\n\treturn\
    \ 0", "\tlocal str=\"$1\"\n\tlocal uppers=\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    \n\techo \"$uppers\" | tr ${str} ${uppers} | wc -c", "  local -i n=0\n  local\
    \ -i j=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local\
    \ -i g=0\n  local -i h=0\n  local -i i=0\n  local -i j=1\n  local -i k=1\n\n \
    \ for ((k=0; k<\"${#}\"; k++)); do\n    c=${k}\n    [[ \"${s:$c:1}\" == [a-z]\
    \ ]] && continue\n    [[ \"${s:$c:1}\" == [A-z] ]] && continue\n    [[ \"${s:$c:1}\"\
    \ == [[:upper:]] ]] && c=$((c+1))\n    [[ \"${s:$c:1}\" == [[:upper:]] ]] && c=$((c+1))\n\
    \    [[ \"${s:$c:1}\" == [[:upper:]] ]] && c=$((c+1))\n    [[ \"${s:$c:1}\" ==\
    \ [[:upper:]] ]] && c=$((c+1))\n    [[ \"${s:$c:1}\" == [[:upper:]] ]] && c=$((c+1))\n\
    \    [[ \"${s:$c:1}\" == [[:upper:]] ]] && c=$((c+1))\n    [[ \"${s:$c:1}\" ==\
    \ [[:upper:]] ]] && c=$((c+1))\n    [[ \"${s:$c:1}\" == [[:upper:]] ]] && c=$((c+1))\n\
    \    [[ \"${s:$c:1}\" == [[:upper:]] ]] && c=$((c+1))\n    [[ \"${s:$c:1}\" ==\
    \ [[:upper:]] ]] && c=$((c+1))\n    [[ \"${s:$c:1}\" == [[:upper:]] ]] && c=$((c+1))\n\
    \    [[ \"${s:$c:1}\" == [[:upper:]] ]] && c=$((c+1))\n    [[ \"${s:$c:1}\" ==\
    \ [[:upper:]] ]] && c=$((c+1))\n    [[ \"${s:$c:1}\" == [[:upper:]] ]] && c=$((c+1))\n\
    \    [[ \"${s:$c:1}\" == [[:upper:]] ]] && c=$((c+1))\n    [[ \"${s:$c:1}\" ==\
    \ [[:upper:]] ]] && c=$((c+1))\n    [[ \"${s:$c:1}\" == [[:upper:]] ]] && c=$((c+1))\n\
    \    [[", "    local -n str=$1\n    local result=0\n    # Iterate over the odd\
    \ indices, so that $str is an even string\n    for i in $(seq $((${#str} / 2)));\
    \ do\n        local j=$((2 * $i))\n        if [[ \"$str\" =~ [AEIOUaeiou]${str:$j:1}\
    \ ]]; then\n            result=$((result + 1))\n        fi\n    done\n    return\
    \ $result", "    local i c count\n    count=0\n    for ((i=0; i<${#1}; i++));\
    \ do\n        c=\"${1:i:1}\"\n        case $c in [Aa] [A] [A] ) count=$(( count+1\
    \ )) ;;\n        [Bb] [B] [B] ) count=$(( count+1 )) ;;\n        [Cc] [C] [C]\
    \ ) count=$(( count+1 )) ;;\n        [Dd] [D] [D] ) count=$(( count+1 )) ;;\n\
    \        [Ee] [E] [E] ) count=$(( count+1 )) ;;\n        [Ff] [F] [F] ) count=$((\
    \ count+1 )) ;;\n        [Gg] [G] [G] ) count=$(( count+1 )) ;;\n        [Hh]\
    \ [H] [H] ) count=$(( count+1 )) ;;\n        [Ii] [I] [I] ) count=$(( count+1\
    \ )) ;;\n        [Jj] [J] [J] ) count=$(( count+1 )) ;;\n        [Kk] [K] [K]\
    \ ) count=$(( count+1 )) ;;\n        [Ll] [L] [L] ) count=$(( count+1 )) ;;\n\
    \        [Mm] [M] [M] ) count=$(( count+1 )) ;;\n        [Nn] [N] [N] ) count=$((\
    \ count+1 )) ;;\n        [Oo] [O] [O] ) count=$(( count+1 )) ;;\n        [Pp]\
    \ [P] [P] ) count=$(( count+1 )) ;;\n        [Qq] [Q] [Q] ) count=$(( count+1\
    \ )) ;;\n        [Rr] [R] [R] ) count=$(( count+1 )) ;;\n        [Ss] [S] [S]\
    \ ) count=$(( count+1 )) ;;\n        [Tt] [T] [T] ) count=$(( count+1 )) ;;\n\
    \        [Uu] [U] [U] ) count=$(( count+1 )) ;;\n        [Vv] [V] [V] ) count=$((\
    \ count+1 )) ;;\n        [Ww] [W] [W] ) count=$(( count+1 )) ;;\n        [Xx]\
    \ [X] [X] ) count=$(( count+1 )) ;;\n        [Yy] [Y] [Y] ) count=$(( count+1\
    \ )) ;;\n        [Zz] [Z] [Z] ", "  local s=$1\n  local num=0\n  local i=0 j=0\n\
    \  while [ $i -lt ${#s} ]; do\n    if (( ${s:$i:1} == $'\\200' )) ; then\n   \
    \   (( j+=2 ))\n    elif (( ${s:$i:1} == $'\\001' )) ; then\n      (( j+=1 ))\n\
    \    else\n      (( num++ ))\n      j=1\n    fi\n    (( i++ ))\n  done\n  echo\
    \ $num", "    local t=\"$(tr '[:upper:]' '[:lower:]' <<< \"$1\")\"\n    local\
    \ n=0\n    for i in {1..${#t}}; do\n        if [[ \"${t[i]:0:1}\" == \"$\" ]];\
    \ then\n            ((n++))\n        fi\n    done\n    echo \"$n\"", "    local\
    \ str=\"$1\"\n\n    local lower=0\n    local upper=0\n\n    for (( i=1; i<${#str};\
    \ i++ )); do\n        case \"${str[i]}\" in\n            a)\n                lower=$((lower+1))\n\
    \                ;;\n            b)\n                lower=$((lower+1))\n    \
    \            ;;\n            c)\n                upper=$((upper+1))\n        \
    \        ;;\n            d)\n                upper=$((upper+1))\n            \
    \    ;;\n            e)\n                upper=$((upper+1))\n                ;;\n\
    \            f)\n                upper=$((upper+1))\n                ;;\n    \
    \        g)\n                lower=$((lower+1))\n                ;;\n        \
    \    *)\n                ;;\n        esac\n    done\n\n    echo \"$upper\"", " \
    \   if [[ ! $1 =~ $'([a-zA-Z])' ]]\n    then\n        return 1\n    fi\n    local\
    \ count=0\n    for i in $(seq 0 $((${#1})/2)); do\n        case \"${1:i:2}\" in\n\
    \            A)\n                count=$((count+1))\n            ;;\n        \
    \    B)\n                count=$((count+1))\n            ;;\n            C)\n\
    \                count=$((count+1))\n            ;;\n            D)\n        \
    \        count=$((count+1))\n            ;;\n            E)\n                count=$((count+1))\n\
    \            ;;\n            F)\n                count=$((count+1))\n        \
    \    ;;\n            G)\n                count=$((count+1))\n            ;;\n\
    \            H)\n                count=$((count+1))\n            ;;\n        \
    \    I)\n                count=$((count+1))\n            ;;\n            J)\n\
    \                count=$((count+1))\n            ;;\n            K)\n        \
    \        count=$((count+1))\n            ;;\n            L)\n                count=$((count+1))\n\
    \            ;;\n            M)\n                count=$((count+1))\n        \
    \    ;;\n            N)\n                count=$((count+1))\n            ;;\n\
    \            O)\n                count=$((count+1))\n            ;;\n        \
    \    P)\n                count=$((count+1))\n            ;;\n            Q)\n\
    \                count=$((count+1))\n            ;;\n            R)\n        \
    \        count=$((count+1))\n            ;;\n            S)\n                count=$((count+1))\n\
    \            ;;\n            T) \n                count=$((count+1))\n       \
    \     ;;\n            U) \n                count=$((count+1))\n            ;;\n\
    \            V) \n                count=$((count+1))\n            ;;\n       \
    \     W) \n                count=$((count+1))\n            ;;\n            X)\n\
    \                count=$((count+1))\n            ;;\n            Y)\n        \
    \        count=$((count+1))\n            ;;\n            Z)\n                count=$((count+1))\n\
    \            ;;\n            *)\n            ;;\n        esac\n    done\n    return\
    \ $((count%2))", "    [ \"$#\" -ne 1 ] && echo \"Invalid number of arguments for\
    \ ${FUNCNAME[0]}\" && exit 1;\n    [ -z \"$1\" ] && echo \"Missing string for\
    \ ${FUNCNAME[0]}\" && exit 1;\n\n    local i=0;\n    local j=0;\n    local count=0\n\
    \    local upper=false\n\n    for (( i=1; i<=$#-1; i++ )); do\n        local c=$1;\n\
    \        shift;\n\n        if [ \"$c\" == \"a\" -o \"$c\" == \"A\" -o \"$c\" ==\
    \ \"e\" -o \"$c\" == \"E\" -o \"$c\" == \"i\" -o \"$c\" == \"I\" -o \"$c\" ==\
    \ \"o\" -o \"$c\" == \"O\" -o \"$c\" == \"u\" -o \"$c\" == \"U\" ] ; then\n  \
    \          upper=true\n        fi\n\n        if [ \"$upper\" == true ] ; then\n\
    \            (( count = count + 1 ))\n        fi\n\n        for (( j=0; j<$#;\
    \ j++ )); do\n            if [ \"$c\" == \"a\" -o \"$c\" == \"A\" -o \"$c\" ==\
    \ \"e\" -o \"$c\" == \"E\" -o \"$c\" == \"i\" -o \"$c\" == \"I\" -o \"$c\" ==\
    \ \"o\" -o \"$c\" == \"O\" -o \"$c\" == \"u\" -o \"$c\" == \"U\" ] ; then\n  \
    \              (( count = count + 1 ))\n            fi\n        done\n    done\n\
    \n    echo \"$count\"", "  echo $(echo \"$1\" | sed 's/./& /g' | awk '{print $2}'\
    \ | awk '{if (substr($1,i,1) == \"A\") ++a; if (substr($1,i,1) == \"E\") ++e;\
    \ if (substr($1,i,1) == \"I\") ++i; if (substr($1,i,1) == \"O\") ++o; if (substr($1,i,1)\
    \ == \"U\") ++u; if (substr($1,i,1) == \"a\") ++a; if (substr($1,i,1) == \"e\"\
    ) ++e; if (substr($1,i,1) == \"i\") ++i; if (substr($1,i,1) == \"o\") ++o; if\
    \ (substr($1,i,1) == \"u\") ++u;} END {print a; print e; print i; print o; print\
    \ u}')", "   local s=$1\n   local num_upper=0\n   for ((i=0;i<${#s}-2;i++)); do\n\
    \      case \"${s:$i:1}\" in\n         [AEIOUaeiou])\n            ((num_upper+=1))\n\
    \            ;;\n         [BbcdfghjklmnpqrstvwxyzBbcdfghjklmnpqrstvwxyz])\n  \
    \          ((num_upper+=1))\n            ;;\n         [BbBbB])\n            ((num_upper+=1))\n\
    \            ;;\n      esac\n   done\n   echo \"$num_upper\"", "  local string=\"\
    $1\"\n  local upper=0\n\n  [[ \"${string}\" =~ ([A-Z][a-z])+$ ]] || return\n\n\
    \  # Count all the vowels starting from the first one\n  for (( i=0; i<${#string};\
    \ i++ )); do\n    [[ \"${string:$i:1}\" == \"${string:$i:1}\" ] \\\n      && [[\
    \ \"${string:$i:2}\" == \"a\" || \"${string:$i:2}\" == \"e\" || \"${string:$i:2}\"\
    \ == \"i\" \\\n            || \"${string:$i:2}\" == \"o\" || \"${string:$i:2}\"\
    \ == \"u\" ]] \\\n      && upper+=1 || :\n  done\n\n  echo \"${upper}\"", "  \
    \  local s=$1\n    local i=0\n    while (( i<${#s} )); do\n        (( $i%2 ))\
    \ && echo -n ${s:$i:1}\n        (( i++ ))\n    done", "  local s=$1\n  local upper=0\n\
    \  for i in $(seq 0 $((${#s}-1)); do\n    if [[ \"${s:i:1}\" == \"A\" ]]; then\n\
    \      upper=$((upper+1))\n    elif [[ \"${s:i:1}\" == \"E\" ]]; then\n      upper=$((upper+2))\n\
    \    elif [[ \"${s:i:1}\" == \"I\" ]]; then\n      upper=$((upper+4))\n    elif\
    \ [[ \"${s:i:1}\" == \"O\" ]]; then\n      upper=$((upper+8))\n    elif [[ \"\
    ${s:i:1}\" == \"U\" ]]; then\n      upper=$((upper+16))\n    else\n      upper=$((upper+${#s})\n\
    \    fi\n  done\n  echo $upper", "  # shellcheck disable=SC2034\n  local s=${1:-}\n\
    \  # shellcheck disable=SC2034\n  local x=''\n  local count=0\n\n  for x in $s;\
    \ do\n    case \"${x:0:1}\" in\n      [aeiouAEIOU])\n        count=$((count+1))\n\
    \      ;;\n      *)\n        ;;\n    esac\n  done\n\n  echo $count", "  local\
    \ input=\"$1\"\n\n  # This awk command counts upper case characters in even\n\
    \  # indices of a string:\n  awk '{ for (i = 2; i <= NF; i += 2) { count[$i] +=\
    \ 1 } } \n        END { for (key in count) { print key, count[key] } } ' <<< \"\
    $input\"", "  local STRING=$1\n  local i\n  local j\n  local count=0\n  for ((\
    \ i=0; i<${#STRING}; i++ )); do\n    case \"${STRING:$i:1}\" in\n      \"A\"|\"\
    a\"|\"E\"|\"e\"|\"I\"|\"i\"|\"O\"|\"o\"|\"U\"|\"u\") count=$((count+1))\n    esac\n\
    \  done\n  for (( j=0; j<${#STRING}; j++ )); do\n    case \"${STRING:$j:1}\" in\n\
    \      \"A\"|\"a\"|\"E\"|\"e\"|\"I\"|\"i\"|\"O\"|\"o\"|\"U\"|\"u\") count=$((count-1))\n\
    \    esac\n  done\n  echo $count", "    local string=\"$1\"\n    local count=0\n\
    \n    # Loop over the string\n    for i in $(seq 0 $((${#string} - 1)))\n    do\n\
    \        if [[ ${string:$i:1} =~ [AEIOUaeiou] ]]\n        then\n            ((count+=0))\n\
    \        fi\n    done\n\n    echo \"$count\"", "    [[ \"$1\" =~ ([[:upper:]])[[:upper:]]+([[:upper:]]|$)\
    \ ]] || return 1\n    local i=2\n    while ((i<\"${#1}\")); do\n        [[ $((${#1})\
    \ % 2) = 1 && ${1:$i} =~ [[:upper:]] ]] && return 0\n        ((i++))\n    done\n\
    \    return 1", '  echo "$1" | tr A-Z a-z | grep "^$" | wc -l', "\tstr=$1\n\t\
    str2=$(echo $str | tr A-Z a-z)\n\tstr3=$(echo $str2 | tr a-z A-Z)\n\tstr4=$(echo\
    \ $str3 | tr A-Z a-z)\n\tstr5=$(echo $str4 | tr a-z A-Z)\n\tstr6=$(echo $str5\
    \ | tr A-Z a-z)\n\tstr7=$(echo $str6 | tr a-z A-Z)\n\tstr8=$(echo $str7 | tr A-Z\
    \ a-z)\n\tstr9=$(echo $str8 | tr a-z A-Z)\n\tstr10=$(echo $str9 | tr A-Z a-z)\n\
    \tstr11=$(echo $str10 | tr a-z A-Z)\n\tstr12=$(echo $str11 | tr A-Z a-z)\n\tstr13=$(echo\
    \ $str12 | tr a-z A-Z)\n\tstr14=$(echo $str13 | tr A-Z a-z)\n\tstr15=$(echo $str14\
    \ | tr a-z A-Z)\n\tstr16=$(echo $str15 | tr A-Z a-z)\n\tstr17=$(echo $str16 |\
    \ tr a-z A-Z)\n\tstr18=$(echo $str17 | tr A-Z a-z)\n\tstr19=$(echo $str18 | tr\
    \ a-z A-Z)\n\tstr20=$(echo $str19 | tr A-Z a-z)\n\tstr21=$(echo $str20 | tr a-z\
    \ A-Z)\n\tstr22=$(echo $str21 | tr A-Z a-z)\n\tstr23=$(echo $str22 | tr a-z A-Z)\n\
    \tstr24=$(echo $str23 | tr A-Z a-z)\n\tstr25=$(echo $str24 | tr a-z A-Z)\n\tstr26=$(echo\
    \ $str25 | tr A-Z a-z)\n\tstr27=$(echo $str26 | tr a-z A-Z)\n\tstr28=$(echo $str27\
    \ | tr A-Z a-z)\n\tstr29=$(echo $str28 | tr a-z A-Z)\n\tstr30=$(echo $str29 |\
    \ tr A-Z a-z)\n\tstr31=$(echo $str30 | tr a-z A-Z)\n\tstr32=$(echo $str31 | tr\
    \ A-Z a-z)\n\tstr33=$(echo $str32 | tr a-z A-Z)\n\tstr34=$(echo $str33 | tr A-Z\
    \ a-z)\n\tstr35=$(echo $str34 | tr a-z A-Z)\n\tstr36=$(echo $str35 | tr A-Z a-z)\n\
    \tstr37=$(echo $str36 | tr a-z A-Z)\n\tstr38=$(", "  local string=\"$1\"\n  local\
    \ vowels=\"A E I O U\"\n  local upper=0\n  local idx=0\n\n  while [ $idx -lt $string\
    \ ]; do\n    local c=$string[idx]\n    case \"$c\" in\n      $vowels) upper=$((\
    \ upper + 1 ))\n      ;;\n    esac\n    idx=$(( idx + 1 ))\n  done\n\n  echo \"\
    $upper\"", "    local _s=${1}\n    local _count=0\n\n    for ((i=0; i<${#_s};\
    \ i+=2)); do\n        [[ ${s:i:2} == [A-Z] ]] && _count=$((_count + 1))\n    done\n\
    \n    echo \"${_count}\"", "\techo $1 | sed -r \"s/(.)/g; s/[aeiou]/\\U&/g\"",
  "    local IFS=$1\n    local str=\"$2\"\n    local count=0\n    local upper\n  \
    \  local i\n\n    for (( i=1; i <= ${#str}; i++ )); do\n        upper=\"${str:$i:1}\"\
    \n        case \"${upper}\" in\n            [[uU]] | [[oO]]) count=\"$(( $count\
    \ + 1 ))\"; continue;;\n        esac\n    done\n\n    echo \"$count\"", "\tawk\
    \ 'BEGIN { FS=\"\"; OFS=\"\"; $0=$1; } { for (i=1; i<=NF; i+=2) {if ($i ~ /[AEIOU]/)\
    \ $i=$i+1; else $i=0; if ($i>1) print }}' \"$1\"", "  local string count_upper\n\
    \  string=$1\n  count_upper=0\n  for ((i=0; i<${#string}; i++)) ; do\n    case\
    \ ${string:$i:1} in\n      [aeiouAEIOU])\n        count_upper=`expr $count_upper\
    \ + 1`\n        ;;\n      *)\n        ;;\n    esac\n  done\n  echo $count_upper",
  "  local -r s=$1\n  local count=0\n  for i in {1..${#s}}; do\n    case ${s:$i:1}\
    \ in\n      \"A\"|\"E\"|\"I\"|\"O\"|\"U\")\n        count=$((count+1))\n     \
    \   ;;\n    esac\n  done\n  echo $count", "  local -i c=0\n  local -i a=\" $1\"\
    \n  echo \"$a\" | tr A-Z a-z | while read x; do\n    [[ \"$x\" =~ ^[AEIOUaeiou]$\
    \ ]] && c=`expr $c+1`\n  done\n  echo \"$c\"", "  local count=0\n  local str=\"\
    $1\"\n\n  str=\"${str#?}\"\n  str=\"${str%%[!^abcdefghijklmnopqrstuvwxyz]*}\"\n\
    \  str=\"${str#*}\"\n\n  for ((i=${#str}-1; i>=0; i--)); do\n    case \"${str:$i:1}\"\
    \ in\n      [!^aeiuoAEIUO]*) # ignore consonants\n        ((count++))\n      \
    \  ;;\n      *)\n        ((count+=2))\n        ;;\n    esac\n  done\n\n  echo\
    \ $count", "  local i\n  local count=0\n  for i in $@; do\n    case $i in\n  \
    \    *[A-Z]* ) count=$((count+1));;\n    esac\n  done\n  echo $count", "    local\
    \ vowel=\"aeiouAEIOU\"\n    local c=0\n    for i in \"${@}\"; do\n        if [[\
    \ $i =~ $vowel ]]; then\n            c=$((c+1))\n        fi\n    done\n    echo\
    \ \"$c\"", "  local S=\"${1}\"\n  local count=0\n  for (( i = 1; i <= ${#S}; i++\
    \ )); do\n    (( i % 2 == 0 && S[${i}] == ${S[i]} )) && count=$((count+1))\n \
    \ done\n  echo \"$count\"", "    local s=$1\n    if [[ $s ]]; then\n        echo\
    \ \"$(expr $(echo \"$s\" | sed -e 's/[^AEIOU]//g' | wc -c))\"\n    fi", "  local\
    \ -r pattern=$1\n  local -r string=$2\n  local -r i=0\n\n  while [[ \"$i\" -le\
    \ \"${#string}\" ]]; do\n    [[ \"${string:$i:1}\" =~ [AEIOU] ]] || break\n  \
    \  (( i += 2 ))\n  done\n\n  echo \"${i}\"", "    local string=\"$1\"\n\n    count=0\n\
    \    string=${string//[^a-zA-Z]/}\n    local i j\n    for ((i=0; i<${#string};\
    \ i++)); do\n        j=${i}\n        while ((j<${#string}) && [[ \"${string:$j:1}\"\
    \ =~ [AEIOUaeiou] ]]); do\n            j=$((j+1))\n        done\n        count=$((${count}\
    \ + ${#string:$i:1} - ${j:1}))\n    done\n    echo \"$count\"", "    local s=\"\
    $1\"\n    for i in $(seq 0 $((${#s}-1)));\n    do\n        case \"${s:$i:1}\"\
    \ in\n            [A-Z] | [aeiou])\n            ;; # no break, since we already\
    \ incremented i\n            *)\n                ((uppers[$i]+=1))\n         \
    \       ;;\n        esac\n    done", "    local vowels=\"aeiouAEIOU\"\n    # count\
    \ the uppercase vowels\n    local num_vowels=\"$(echo \"$1\" | tr a-z A-Z | grep\
    \ -Eo \"[${vowels}]\\+\")\"\n    # count uppercase vowels in even indices\n  \
    \  local num_upper_even=\"$(echo \"$1\" | tr a-z A-Z | grep -Eo \"[${vowels}]{2}\"\
    )\"\n    [[ \"$num_upper_even\" == \"$num_vowels\" ]] || return 0\n    echo -n\
    \ \"$(expr \"$num_upper_even\" : '.{2}')\"", "  local n=0\n  local s=\"${1}\"\n\
    \  local i\n\n  for ((i=0; i<${#s}; i+=2)); do\n    case ${s:$i:2} in\n      'a'|'e'|'i'|'o'|'u')\
    \ n=$((n+1)); continue ;;\n    esac\n  done\n  echo \"$n\"", "  local string=\"\
    $1\"\n  echo \"${string//[^[:upper:]]/}\"  | grep -P \"^[[:upper:]]*\"", "   \
    \ local s=\"${1}\"\n    local count\n    local i\n    count=0\n    for i in \"\
    ${s:0:2}\"; do\n        if [ \"$i\" == \"A\" ] || [ \"$i\" == \"E\" ] || [ \"\
    $i\" == \"I\" ] || [ \"$i\" == \"O\" ] || [ \"$i\" == \"U\" ]; then\n        \
    \    count=$((count+1))\n        fi\n    done\n    echo \"${count}\"", "  local\
    \ STRING=\"$1\"\n  local COUNT=0\n\n  for (( i = 0; i < \"${#STRING}\"; i++ ));\
    \ do\n    case \"${STRING:$i:1}\" in\n      'a') COUNT=$(($COUNT + 1))\n     \
    \     ;;\n      'b') COUNT=$(($COUNT + 1))\n          ;;\n      'c') COUNT=$(($COUNT\
    \ + 1))\n          ;;\n      'd') COUNT=$(($COUNT + 1))\n          ;;\n      'e')\
    \ COUNT=$(($COUNT + 1))\n          ;;\n      'f') COUNT=$(($COUNT + 1))\n    \
    \      ;;\n      'g') COUNT=$(($COUNT + 1))\n          ;;\n      'h') COUNT=$(($COUNT\
    \ + 1))\n          ;;\n      'i') COUNT=$(($COUNT + 1))\n          ;;\n      'j')\
    \ COUNT=$(($COUNT + 1))\n          ;;\n      'k') COUNT=$(($COUNT + 1))\n    \
    \      ;;\n      'l') COUNT=$(($COUNT + 1))\n          ;;\n      'm') COUNT=$(($COUNT\
    \ + 1))\n          ;;\n      'n') COUNT=$(($COUNT + 1))\n          ;;\n      'o')\
    \ COUNT=$(($COUNT + 1))\n          ;;\n      'p') COUNT=$(($COUNT + 1))\n    \
    \      ;;\n      'q') COUNT=$(($COUNT + 1))\n          ;;\n      'r') COUNT=$(($COUNT\
    \ + 1))\n          ;;\n      's') COUNT=$(($COUNT + 1))\n          ;;\n      't')\
    \ COUNT=$(($COUNT + 1))\n          ;;\n      'u') COUNT=$(($COUNT + 1))\n    \
    \      ;;\n      'v') COUNT=$(($COUNT + 1))\n          ;;\n      'w') COUNT=$(($COUNT\
    \ + 1))\n          ;;\n      'x') COUNT=$(($COUNT + 1))\n          ;;\n      'y')\
    \ COUNT=$(($COUNT + 1))\n          ;;\n      'z') COUNT=$(($COUNT + 1))\n    \
    \      ;;\n      *) COUNT=$(($COUNT + 0))\n          ;;\n    esac\n  done\n\n\
    \  echo \"$COUNT\"", "    echo $1 | awk '{for(i=1;i<=NF;i++){if($i~/[AEIOU]/){s=s+1}};print\
    \ s}'", "  [[ $1 =~ $REGEX ]] || { echo \"'$1' is not in regular expression $REGEX\"\
    ; return 1; }\n  upper=0\n  for (( i=0; i<${#s//[aeiou]}; i++ )); do\n    case\
    \ ${s:i:1} in\n      A | E | I | O | U) upper=1;;\n    esac\n  done\n  echo ${upper}",
  "    local STRING=\"$1\"\n    local i count=0\n    for ((i = 0; i < ${#STRING};\
    \ i = i + 2)); do\n        [[ $STRING[$i] == \"A\" && $STRING[$i+1] == \"E\" ]]\
    \ || break\n        ((count++))\n    done\n    echo \"$count\"", "  local s=$1\n\
    \  local num_vowels=0\n  for i in $(seq 0 $(( ${#s} - 1 )))\n  do\n      [[ \"\
    $i\" -eq \"$(( ${#s} - 1 ))\" ]] && break\n      [[ \"$i\" -le \"$(( ${#s} - 1\
    \ ))\" ]] && let num_vowels+=$(expr match \"$s\" \"\\${$s[$i]}\")\n  done\n  echo\
    \ $num_vowels", "    local i tmp str=\"$1\"\n    echo \"${#str}\" | grep -o '^.{4,}$'\
    \ | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}'\
    \ | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}'\
    \ | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}'\
    \ | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}'\
    \ | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}'\
    \ | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}'\
    \ | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}'\
    \ | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}'\
    \ | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}'\
    \ | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}'\
    \ | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}'\
    \ | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}'\
    \ | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '^.{2,}'\
    \ | grep -o '^.{2,}' | grep -o '^.{2,}' | grep -o '", "   local str=\"$1\"\n \
    \  local vowel=\"a\"\n   local count=0\n   while [[ $str != \"\" ]]; do\n    \
    \  if [[ \"$str\" =~ [AEIOU] ]]; then\n         local i\n         for (( i=0;\
    \ i<${#str}; i+=2 )); do\n            [[ \"$str\" =~ [AEIOU] ]] || break\n   \
    \         if [[ \"$str\" =~ [AEIOU] ]]; then break; fi\n            ((count+=1))\n\
    \         done\n      else\n         break\n      fi\n      str=\"${str#?}\"\n\
    \   done\n   echo \"$count\"", "    local s=$1\n    local count=0 # count the\
    \ uppercase vowels\n    local i\n    local vowels=(aa ae ao au ay ao o eu ao ea\
    \ iy eu o ea yo aa ea ea oo oa oe eo ea eo iy iy oy u y o o y ou ea ea ea o oo\
    \ o eo oo iy)\n\n    # loop over all characters in s\n    for ((i=0; i<${#s};\
    \ i++)); do\n    # increment count if s[i:i+1] is an uppercase vowel in even indices\n\
    \        [[ $((i % 2)) -eq 0 ]] && ((count+=${vowels[$((${i} / 2)%${#vowels[*]})]}))\
    \ \n    done\n    echo \"$count\"", "  case $1 in\n  aA*|eE*) echo \"0\"\n   \
    \      return 0;;\n  a*)    echo \"1\"\n         return 0;;\n  b*)    echo \"\
    2\"\n         return 0;;\n  c*)    echo \"3\"\n         return 0;;\n  d*)    echo\
    \ \"4\"\n         return 0;;\n  e*)    echo \"5\"\n         return 0;;\n  f*)\
    \    echo \"6\"\n         return 0;;\n  g*)    echo \"7\"\n         return 0;;\n\
    \  *)      echo \"8\"\n         return 0;;\n  esac", "    local IFS=$'\\n';\n\
    \    local string=$1\n    local count=0\n    local i=0\n    local count1=0\n \
    \   local count2=0\n    local count3=0\n    local count4=0\n    local count5=0\n\
    \    local count6=0\n    local count7=0\n    local count8=0\n    local count9=0\n\
    \    local count10=0\n    local count11=0\n    local count12=0\n    local count13=0\n\
    \    local count14=0\n    local count15=0\n    local count16=0\n    local count17=0\n\
    \    local count18=0\n    local count19=0\n    local count20=0\n    local count21=0\n\
    \    local count22=0\n    local count23=0\n    local count24=0\n    local count25=0\n\
    \    local count26=0\n    local count27=0\n    local count28=0\n    local count29=0\n\
    \    local count30=0\n    local count31=0\n    local count32=0\n    local count33=0\n\
    \    local count34=0\n    local count35=0\n    local count36=0\n    local count37=0\n\
    \    local count38=0\n    local count39=0\n    local count40=0\n    local count41=0\n\
    \    local count42=0\n    local count43=0\n    local count44=0\n    local count45=0\n\
    \    local count46=0\n    local count47=0\n    local count48=0\n    local count49=0\n\
    \    local count50=0\n    local count51=0\n    local count52=0\n    local count53=0\n\
    \    local count54=0\n    local count55=0\n    local count56=0\n    local count57=0\n\
    \    local count58=0\n    local count59=0\n    local count60=0\n    local count61=0\n\
    \    local count62=0\n    local count63=0\n    local count64=0\n    local count65=0\n\
    \    local count66=0\n    local count67=0\n    local count68=0\n    local count69=0\n\
    \    local count70=0\n    local count71=0\n    local count72=0\n    local count73=0\n\
    \    local count74=0\n    local count75=0\n    local count76=0\n    local count77=0\n\
    \    local count78=0\n    local count79=0\n    local count80=0\n    local count81=0\n\
    \    local ", "    echo $1 | awk '{\n       for (i = 1; i <= NF; i++) {\n    \
    \       if (i % 2 == 0) {\n               vowels[tolower($i)]++\n           }\n\
    \       }\n       for (j = 1; j <= length(vowels); j++) {\n           if (vowels[j]\
    \ % 2 == 0) {\n               upperCount++\n           }\n       }\n       return\
    \ upperCount\n    }'", "    local i a\n    a=\"${1?}\"\n    local count upper=0\n\
    \    # Count uppercase vowels\n    for (( i=0; i < ${#a}; i++ )); do\n       \
    \ if [[ ${a:$i:1} == \"A\" ]]; then\n            count=$((count + 1))\n      \
    \  fi\n    done\n    echo \"${count}\"", "  echo \"$1\" | awk '{\n  count=0\n\
    \  for(i=1; i<=NF; i++) {\n    # skip odd indices (e.g. \"dBBE\"\n    if($i%2==1)\
    \ next;\n    for(j=i; j<NF; j++) if($j==\"A\"||$j==\"a\"||$j==\"E\"||$j==\"e\"\
    ||$j==\"I\"||$j==\"i\"||$j==\"O\"||$j==\"o\"||$j==\"U\"||$j==\"u\") count++;\n\
    \  }\n  print count;\n  }';", "    local string=$1\n    local vowels=\"AEIOU\"\
    \n\n    local count=0\n    for i in $(seq 0 ${#string}); do\n        if [[ ${string:$i,1}\
    \ == ${vowels} ]]; then\n            (( count++ ))\n        fi\n    done\n   \
    \ echo \"$count\"", "\tlocal s=$1\n\n\ts=${s// /_}\n\ts=${s//[^[:upper:]]/}\n\n\
    \twhile [ \"$s\" != \"\" ]; do\n\t\tcount=0\n\t\tfor i in $(seq 0 $((${#s}-1));\
    \ do\n\t\t\ttest ${s:$i:1} == \"[[:upper:]]\" && count=$((count+1)) || count=$((count+0))\n\
    \t\tdone\n\t\ts=${s//[[:upper:]]/}\n\t\tcount=$((count+0))\n\tdone\n\n\techo \"\
    $count\"", "    [[ $1 =~ [[:upper:]] ]] || return 0\n    (( $2 % 2 )) || return\
    \ 0\n    (( $2 + 1 ))", "    local string=\"$1\"\n    local length=\"${#string}\"\
    \n    local count=0;\n    for i in $(seq 0 $((length - 2)); do\n        case \"\
    ${string:$i:1}\" in\n            [A-Z])\n                ((count++));;\n     \
    \   esac\n    done\n    echo \"$count\"", "  local -i cnt=0\n  local -i i\n  for\
    \ (( i=0; i < ${#1}; i++ )); do\n    case \"${1:$i:1}\" in\n      [aeiou])\n \
    \       cnt=$((cnt + 1))\n      ;;\n      *)\n        cnt=$((cnt + 0))\n     \
    \ ;;\n    esac\n  done\n  echo \"$cnt\"", "    # Convert to lower case\n    s=\"\
    ${1^^}\"\n    [[ -z \"$s\" ]] && echo \"0\" && return 1\n    s=${s,,}\n    # Count\
    \ uppercase vowels\n    local i\n    local count=0\n    local c\n    for ((i=1;i<${#s};i+=2));\
    \ do\n        c=${s:$i:2}\n        if [[ \"$c\" == [A-Z] ]]; then\n          \
    \  ((count++))\n        fi\n    done\n    echo \"$count\"", "  awk '{\n      for(i=1;i<=NF;i++){\n\
    \        if(index($i,\"A\")!=-1 && index($i,\"B\")!=-1 && index($i,\"C\")!=-1\
    \ && index($i,\"D\")!=-1 && index($i,\"E\")!=-1 && index($i,\"F\")!=-1){\n   \
    \       a+=1;\n        }\n      }\n    }\n    END {\n      print a\n    }'", " \
    \ local s=${1}\n  local count=0\n  for i in $(seq 0 ${#s})\n  do\n    if [[ $i\
    \ -ge 0 ]] ; then\n      if [[ \"${s:i:1}\" =~ [AEIOU] ]] ; then\n        count=$((${count}\
    \ + 1))\n      fi\n    fi\n  done\n  echo ${count}", "    s=$1\n    count_upper=0\n\
    \    for ((i=0; i < ${#s}; ++i)); do\n        [[ \"${s:$i:1}\" == \"A\" ]] &&\
    \ count_upper+=\"1\"\n        [[ \"${s:$i:1}\" == \"B\" ]] && count_upper+=\"\
    1\"\n        [[ \"${s:$i:1}\" == \"C\" ]] && count_upper+=\"1\"\n        [[ \"\
    ${s:$i:1}\" == \"D\" ]] && count_upper+=\"1\"\n        [[ \"${s:$i:1}\" == \"\
    E\" ]] && count_upper+=\"1\"\n        [[ \"${s:$i:1}\" == \"F\" ]] && count_upper+=\"\
    1\"\n        [[ \"${s:$i:1}\" == \"G\" ]] && count_upper+=\"1\"\n    done\n  \
    \  echo \"$count_upper\"", "    local i u\n    for ((i = 1 ; i <= ${#1} ; i++));\
    \ do\n        u=\"${1:i:1}\"\n        if [[ \"$u\" =~ ^[AEIOU]$ ]]; then\n   \
    \         echo \"${#u}\"\n        fi\n    done", "    local str=\"$1\"\n\n   \
    \ # Check for empty string\n    if [ -z \"$str\" ] ; then\n        return 0\n\
    \    fi\n\n    # Count uppercase characters\n    local -i count=0\n    while [\
    \  $str ] ; do\n        case \"$str\" in\n            [[[A-Z]]])\n           \
    \     (( count+=1 ))\n                str=${str#[[A-Z]]}\n                ;;\n\
    \            *)\n                return $count\n                ;;\n        esac\n\
    \    done", "  local string=\"$1\"\n  local count=0\n  local last_upper=false\n\
    \n  for (( i=0; i<${#string}; i++ )); do\n    local c=\"${string:i:1}\"\n    if\
    \ [[ \"$c\" == [A-Z] ]]; then\n      if [[ \"$last_upper\" ]]; then\n        ((\
    \ count+1 ))\n        last_upper=false\n      else\n        last_upper=true\n\
    \      fi\n    fi\n  done\n\n  echo \"$count\"", "  echo $1 | awk '{\n    for(i=1;i<=NF;i++)\
    \ {\n      if($i ~ /[AEIOU]/) {\n      if(i%2==0){\n      a++}\n      else\n \
    \     b++}\n    }\n  }'", "  local -i j=1\n  while [ \"${1}\" = \"${1}\" ] 2>/dev/null;\
    \ do\n    ((j++))\n    shift\n  done\n  echo \"${j}\"", "  local count=0\n  local\
    \ string=\"$1\"\n  shift || return 0\n  IFS=$'\\n' read -r string\n  for i in\
    \ $(seq 0 $((${#string}-1)) ); do\n    case $i in\n      $(( (${string:$i:1})\
    \ % 2 )) )\n        ((count+=1))\n        ;;\n    esac\n  done\n  echo \"$count\"",
  "  local s=${1}\n\n  local vowels=$(echo \"${s}\" | \\\n    sed \"s/[AEIOUaeiouy]\"\
    /\"/\"\n  )\n\n  echo \"${#vowels}\"", "    local -r str=\"$1\"\n    local i=0\n\
    \    # Loop through string backwards to avoid having to count last character\n\
    \    while [[ $i -lt ${#str} ]]; do\n        if [[ \"${str:$i:1}\" == [A-Z]* ]];\
    \ then\n            ((i++))\n        elif [[ \"${str:$i:1}\" == [a-z]* ]]; then\n\
    \            # Count lower case vowels\n            ((i++))\n        else\n  \
    \          # No vowels found\n            return 1\n        fi\n    done\n   \
    \ return 0", "  local STR=$1\n  local i=0\n  while [ \"$i\" -lt \"$#\" ] do\n\
    \    local j=0\n    local CHAR=${STR:$i:1}\n    while [ \"$j\" -lt \"$#\" ] &&\
    \ [ \"$CHAR\" == \"$j\" ] ; do\n      j=$(($j+1))\n      CHAR=${STR:$j:1}\n  \
    \  done\n    if [ \"$j\" -ge $(($j/2)) ]; then\n      if [[ $CHAR == A || $CHAR\
    \ == E || $CHAR == I || $CHAR == O ]]; then\n        (( i++ ))\n      elif [[\
    \ $CHAR == E || $CHAR == A || $CHAR == I || $CHAR == O ]]; then\n        (( j++\
    \ ))\n      fi\n    fi\n    i=$(($i+1))\n  done\n  echo $(( ${#STR} / 2 + 1 ))",
  "  local s=$1\n  local num_upper=0\n  local i=0\n  while ((i<${#s})); do\n    if\
    \ [[ ${s:$i:1} == [[:upper:]] ]]; then\n      num_upper=$((num_upper+1))\n   \
    \ elif [[ ${s:$i:1} == [[:lower:]] ]]; then\n      num_upper=$((num_upper-1))\n\
    \    fi\n    ((i++))\n  done\n  echo $num_upper", "    local str=\"$1\"\n    local\
    \ upper=0\n    # $str is guaranteed to be a single-character string\n    while\
    \ [[ $str != *[A-Z] ]]; do\n        ((upper++))\n        str=\"${str#?}\"\n  \
    \  done\n    echo \"$upper\"", "    echo $1 | awk '{\n        n = 0\n        for\
    \ (i = 1; i <= NF; i++){\n            if ($i ~ /^[aeiou]$/){\n               \
    \ n = n + 1;\n            }\n        }\n    }'", "  local x=\"$1\"\n  local len=$((${#x}-1))\n\
    \  local uppers=\"AEIOU\"\n  local upper_count=0\n  local i=0\n  while [ $i -lt\
    \ $len ]; do\n    [ \"${x[i]}\" = \"A\" ] && upper_count=$((upper_count+1))\n\
    \    [ \"${x[i]}\" = \"E\" ] && upper_count=$((upper_count+1))\n    [ \"${x[i]}\"\
    \ = \"I\" ] && upper_count=$((upper_count+1))\n    [ \"${x[i]}\" = \"O\" ] &&\
    \ upper_count=$((upper_count+1))\n    [ \"${x[i]}\" = \"U\" ] && upper_count=$((upper_count+1))\n\
    \    i=$((i+1))\n  done\n  echo ${upper_count}", "  s=$1\n  i=0\n  while (( $i\
    \ -lt ${#s} )); do\n    (( ${#s} - $i )) || continue\n    (( i % 2 )) || continue\n\
    \    (( ${#s} - $i )) || continue\n    case \"${s:$i:1}\" in\n      [AEIOU]) i++\
    \ ;;\n      *) (( i++ )) ;;\n    esac\n  done\n  echo ${#s} - $i", "   [[ \"$1\"\
    \ =~ [[:upper:]]$ ]]\n   local s=$1;\n   local upper=0;\n   for ((i=0; i<${#s};\
    \ i++)); do\n      [[ \"${s:i:1}\" == \"A\" ]] && upper=$((upper + 1))\n     \
    \ [[ \"${s:i:1}\" == \"B\" ]] && upper=$((upper + 1))\n      [[ \"${s:i:1}\" ==\
    \ \"C\" ]] && upper=$((upper + 1))\n      [[ \"${s:i:1}\" == \"D\" ]] && upper=$((upper\
    \ + 1))\n      [[ \"${s:i:1}\" == \"E\" ]] && upper=$((upper + 1))\n      [[ \"\
    ${s:i:1}\" == \"F\" ]] && upper=$((upper + 1))\n      [[ \"${s:i:1}\" == \"G\"\
    \ ]] && upper=$((upper + 1))\n      [[ \"${s:i:1}\" == \"H\" ]] && upper=$((upper\
    \ + 1))\n      [[ \"${s:i:1}\" == \"I\" ]] && upper=$((upper + 1))\n      [[ \"\
    ${s:i:1}\" == \"J\" ]] && upper=$((upper + 1))\n      [[ \"${s:i:1}\" == \"K\"\
    \ ]] && upper=$((upper + 1))\n      [[ \"${s:i:1}\" == \"L\" ]] && upper=$((upper\
    \ + 1))\n      [[ \"${s:i:1}\" == \"M\" ]] && upper=$((upper + 1))\n      [[ \"\
    ${s:i:1}\" == \"N\" ]] && upper=$((upper + 1))\n      [[ \"${s:i:1}\" == \"O\"\
    \ ]] && upper=$((upper + 1))\n      [[ \"${s:i:1}\" == \"P\" ]] && upper=$((upper\
    \ + 1))\n      [[ \"${s:i:1}\" == \"Q\" ]] && upper=$((upper + 1))\n      [[ \"\
    ${s:i:1}\" == \"R\" ]] && upper=$((upper + 1))\n      [[ \"${s:i:1}\" == \"S\"\
    \ ]] && upper=$((upper + 1))\n      [[ \"${s:i:1}\" == \"T\" ]] && upper=$((upper\
    \ + 1))\n      [[ \"${s:i:1}\" == \"U\" ]] && upper=$((upper + 1))\n      [[ \"\
    ${s:i:1}\" == \"V\" ]] && upper=$((upper + 1))\n      [[ \"${s:i:1}\" == \"W\"\
    \ ]] && upper=$((upper + 1))\n      [[ \"${s:i:1}\" == \"X\" ]] && upper=$((upper\
    \ + 1))\n      [[ \"${s:i:1}\" == \"Y\" ]] && upper=$((upper + 1))\n      [[ \"\
    ${s:i:1}\" == \"Z\" ]] && upper=$((upper + 1))\n   done\n   return $upper", "\t\
    local vowels=\"${1}\"\n\tlocal vowel_count\n\tlocal i\n\tvowel_count=0\n\tfor\
    \ (( i=0; i<${#vowels}; i++ )); do\n\t\tif [ ${vowels:$i:1} = ${vowels:$i:1} ];\
    \ then\n\t\t\t(( vowel_count+=($i % 2 == 0) ))\n\t\tfi\n\tdone\n\techo \"${vowel_count}\"",
  "  # We use $# to get all the arguments since $# gets replaced by the\n  # number\
    \ of command line arguments with no special meaning.\n  local s=$1\n  echo $((${#s%%[!^AEIOUaeiou]}))\
    \ # We need to use ${...}", "  local s=$1\n  local count=0\n  while [[ $s ]];\
    \ do\n    local char=$s\n    local idx=${#char}\n    if [[ $idx -gt 0 ]]; then\n\
    \      if (( ($idx & 1) == 0); then\n        char=${char:0:$idx}\n        ((count\
    \ += ${#char}))\n      fi\n    fi\n    s=${s#\"${char}\"}\n  done\n  echo \"$count\"",
  "  local string=\"$1\"\n  local i\n\n  for (( i=0; i<${#string}; i++ )); do\n  \
    \  case \"${string:i:1}\" in\n      [aeiou]) return 1\n    esac\n  done\n  return\
    \ 0", "    local s=$1\n    # uppercase vowels are even\n    count=$(echo $s |\
    \ egrep -o \"[AEIOUaeiou]\" |wc -l)", "    local s=$1\n    echo $((${#s}))", " \
    \ local -n s=$1\n  local upper=0\n  for i in $(seq 0 ${#s})\n  do\n    if [[ \"\
    ${s:$i:1}\" =~ [A-Z]$ ]]\n    then\n      ((upper+=1))\n    fi\n  done\n  echo\
    \ $upper", "    local string=\"$1\"\n\n    # Count number of vowels in even indices\n\
    \    for (( i=1; i<=\"${#string}\"; i++ )); do\n        [[ \"${string:$i:1}\"\
    \ == \"a\" || \"${string:$i:1}\" == \"e\" || \"${string:$i:1}\" == \"i\" || \"\
    ${string:$i:1}\" == \"o\" || \"${string:$i:1}\" == \"u\" ]] &&\n            ((\
    \ i % 2 == 0 )) && echo \"$i\"\n    done", "  local str=\"$1\"\n  local count=0\n\
    \  local i\n  for i in $(seq 0 $((${#str} - 1)))\n  do\n    [[ \"${str:i:1}\"\
    \ == \"A\" ]] && count=$((${count} + 1))\n    [[ \"${str:i:1}\" == \"B\" ]] &&\
    \ count=$((${count} + 1))\n    [[ \"${str:i:1}\" == \"C\" ]] && count=$((${count}\
    \ + 1))\n    [[ \"${str:i:1}\" == \"D\" ]] && count=$((${count} + 1))\n    [[\
    \ \"${str:i:1}\" == \"E\" ]] && count=$((${count} + 1))\n    [[ \"${str:i:1}\"\
    \ == \"F\" ]] && count=$((${count} + 1))\n    [[ \"${str:i:1}\" == \"G\" ]] &&\
    \ count=$((${count} + 1))\n  done\n  echo \"$count\"", "  local vowel=a\n  local\
    \ vowels=$(cat <<EOF\n$vowel\n$vowel\n$vowel\n$vowel\nEOF\n)\n  for i in $(seq\
    \ 0 $((${#1}-1)) )\n  do\n    [[ ${1:$i:1} == ${vowels:$i:1} ]] && ((i % 2==0))\
    \ && echo \"$((i+1))\"\n  done", "\tlocal i\n\tlocal count=0\n\tfor i in $(seq\
    \ 0 $(($#-2)); do\n\t\t[[ $(($i % 2)) -eq 0 ]] && [[ \"${s:i:1}\" =~ [AEIOUaeiou]\
    \ ]] \\\n\t\t\t&& count=$((count+1))\n\tdone\n\techo \"$count\"", "    local str=\"\
    $1\"\n    local count\n    str=`echo $str | tr '[A-Z]' '[a-z]'`\n    local -i\
    \ i\n    for (( i = 1; i <= ${#str}; i++ )); do\n        case ${str:$i:1} in\n\
    \            A|a|E|e)\n                count=$(( count + 1 ))\n              \
    \  ;;\n            I|i|O|o)\n                count=$(( count + 1 ))\n        \
    \        ;;\n            U|u)\n                count=$(( count + 1 ))\n      \
    \          ;;\n            *)\n                ;;\n        esac\n    done\n  \
    \  echo \"$count\"", "\tlocal str=$1\n\tlocal count=0\n\tfor i in ${!str}; do\n\
    \t\t(( i % 2 )) && [[ \"${str[i]}\" = \"A\" || \"${str[i]}\" = \"A\" || \"${str[i]}\"\
    \ = \"a\" ]] && count=$(( count + 1 ))\n\tdone\n\techo $count", "    local S=\"\
    ${1#?}\"  # Strip off leading question mark\n    local i=0\n    while [[ $S =~\
    \ (^|[^a][iI])([aeiou]) ]]; do\n        [[ $((i++ % 2)) -eq 0 ]] && return 0\n\
    \    done\n    return $((${BASH_REMATCH[2]} + 1))", "  local result=1\n  local\
    \ str=\"$1\"\n  local i=$((${#str} - 1))\n  while [ $i -gt 0 ]; do\n    ((str[$i]))\
    \ -eq [[:upper:]]\n    ((str[$i])) -eq [[:lower:]]\n    ((result)) += 1\n    ((i--))\n\
    \  done\n  echo \"$result\"", "  awk '{ for(i = 1; i <= NF; i++) {\n    if ($i\
    \ ~ /[AEIOU]/) {\n      if (i % 2 == 0 && $i ~ /[AEIOU]/) {\n        ++upper;\n\
    \      }\n    }\n  }; exit 0; }' <<< \"$1\"", "  local s=$1\n\n  # Set up empty\
    \ strings\n  local evens=\"\"\n  local odds=\"\"\n  local vowels=\"aeiouAEIOU\"\
    \n\n  # Loop over all the characters\n  for ((i = 0; i <= ${#s}; i++)); do\n \
    \   # Check if the current character is even\n    if ((i % 2) == 0) {\n      #\
    \ If it's even, append it to the even strings\n      evens=\"${evens}${s:i:1}\"\
    \n    else\n      # If it's odd, append it to the odd strings\n      odds=\"${odds}${s:i:1}\"\
    \n    fi\n  done\n\n  # Count the vowels\n  local count=0\n  for ((i = 0; i <=\
    \ ${#vowels}; i++)); do\n    ((count=count+${#vowels})); done\n\n  echo \"${evens}${count}\"",
  "    local _s=$1 count=0\n    for i in $(seq 0 $((${#_s}-1)/2)); do\n        [[\
    \ $_s[$i,1,1] =~ [A-Z] ]] && let count++\n    done\n    echo \"$count\"", "  \
    \  local -n vowels=\"$1\"\n    local -i n=0\n    for ((i=0; i<${#s}; i++)); do\n\
    \        if [[ \"$vowels\" == \"A\" || \"$vowels\" == \"E\" || \"$vowels\" ==\
    \ \"I\" || \"$vowels\" == \"O\" || \"$vowels\" == \"U\" ]]; then\n           \
    \ ((n++))\n        fi\n    done\n    echo \"$n\"", "    local i s=$1\n    # $2\
    \ is an optional parameter to limit the upper vowel count to only those whose\
    \ indices are even\n    # $3 is an optional parameter to limit the upper vowel\
    \ count to only those whose indices are odd.\n    local u=0 ns=${#s}\n    for\
    \ (( i=0; i<ns; i++ )); do\n        if (( ${s:$i:1} == \"A\" )) && [[ ${i} -eq\
    \ 0 ]]; then\n            u=$(( u+1 ))\n        fi\n        if (( ${s:$i:1} ==\
    \ \"E\" )) && [[ ${i} -eq 0 ]]; then\n            u=$(( u+1 ))\n        fi\n \
    \       if (( ${s:$i:1} == \"I\" )) && [[ ${i} -eq 0 ]]; then\n            u=$((\
    \ u+1 ))\n        fi\n        if (( ${s:$i:1} == \"O\" )) && [[ ${i} -eq 0 ]];\
    \ then\n            u=$(( u+1 ))\n        fi\n        if (( ${s:$i:1} == \"U\"\
    \ )) && [[ ${i} -eq 0 ]]; then\n            u=$(( u+1 ))\n        fi\n    done\n\
    \    echo $u", "  local s=$1\n  local c=0\n  for i in $(seq 0 $(expr ${#s} - 1));\
    \ do\n    if [[ ${s:$i:1} =~ [[:upper:]] ]]; then\n      ((c++))\n    fi\n  done\n\
    \  echo $((c))", "  local lower=$1\n  local upper=0\n  local even\n  local count\n\
    \  for ((i=0; i<${#lower}; i++)); do\n    even=\"${lower:$i:1}\"\n    [[ \"$even\"\
    \ == \"A\" -o \"$even\" == \"E\" -o \"$even\" == \"I\" -o \"$even\" == \"O\" -o\
    \ \"$even\" == \"U\" ]] && ((count++))\n  done\n  echo $count", "  local input=${1}\n\
    \  local vowel_chars=$(echo \"${input:0:2}\"|tr '[:upper:]' '[:lower:]')\n  local\
    \ count=0\n  for i in $(seq 0 $((${#input} - 1))); do\n    local c=${input:$i:1}\n\
    \    if [ \"${c}\" == \"a\" -o \"${c}\" == \"e\" -o \"${c}\" == \"i\" -o \"${c}\"\
    \ == \"o\" -o \"${c}\" == \"u\" ]; then\n      ((count++))\n    fi\n  done\n \
    \ echo \"${count}\"", "  local char=\"$1\"\n  local str=\"$2\"\n  local count\n\
    \n  # Count only the even indices.\n  for (( i = 1; i < ${#str}; i++ )); do\n\
    \    (( i % 2 )) && let count=\"${count:-0}${count}\"\n  done\n\n  # Count all\
    \ uppercase letters.\n  [[ \"$char\" == [A-Z] ]] && let count=\"${count}${count}\"\
    \n\n  echo \"$count\"", "    s=$1\n    echo $(grep -cE '[aeiouyAEIOUY]{2}' <<<\
    \ $s)"]
stop_tokens:
- "\n}"
