language: sh
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n p e\n\tn=$(( $1 % $2 ))\n\tp=$2\n\te=$(echo -n \"$1\"|bc)\n\t[ \"$p\"\
    \ -gt \"7\" ] && p=$(($p+8))\n\t[ \"$e\" -gt \"$n\" ] && e=$(($n+1))\n\techo $((\
    \ $p - $e ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmp064pyqgj.sh: line 22: [: : integer expression expected

    /tmp/tmp064pyqgj.sh: line 23: 5 -  : syntax error: operand expected (error token
    is "-  ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i\n\tlocal j\n\n\ti=\"$1\"\n\tj=\"$2\"\n\t[[ $j == 0 ]] || return $j\n\
    \n\tlocal imod jmod\n\timod=$(echo \"$i\" | bc)\n\tjmod=$(echo \"$j\" | bc)\n\t\
    if (( $imod == 0 )) ; then\n\t\techo \"0\"\n\telse\n\t\techo \"$(( $jmod % $imod\
    \ ))\"\n\tfi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal a=$1\n\tlocal b=$2\n\tlocal n\n\tn=$((a%$b))\n\techo \"$((2*$n+1))\"\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    if [ $1 -gt $2 ]; then echo $1; else echo $1; fi\n}\n\ncandidate() {\n  \
    \  modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i p n val\n\tp=$1\n\tval=$2\n\tn=${#val}\n\tfor i in $(seq 1 $((n-1)))\n\
    \tdo\n\t\tval=$(echo \"$val $1\" | bc -l | awk '{print $1 \"%\" $2}')\n\tdone\n\
    \tprintf \"$val\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    [ $# -lt 2 ] || return 1\n    [ $1 -eq $2 ] && return $1\n    local mod=\"\
    $1\"\n    local dec=\"$2\"\n    local moddec=\"$(\n        echo \"$dec\"\n   \
    \     | sed -e 's/^0*//' -e 's/[^0-9]*//g' -e 's/^[[:digit:]]*//g' -e 's/^0*//'\n\
    \    )\"\n    local moddecmod=\"${moddec:0:${#moddec}-1}\"\n    local moddecmod2=\"\
    ${moddec:0:${#moddec}/2}\"\n    local moddecmod3=\"${moddec:0:${#moddec}/3}\"\n\
    \    local moddecmod4=\"${moddec:0:${#moddec}/4}\"\n    local moddecmod5=\"${moddec:0:${#moddec}/5}\"\
    \n    local moddecmod6=\"${moddec:0:${#moddec}/6}\"\n    local moddecmod7=\"${moddec:0:${#moddec}/7}\"\
    \n    local moddecmod8=\"${moddec:0:${#moddec}/8}\"\n    local moddecmod9=\"${moddec:0:${#moddec}/9}\"\
    \n    local moddecmod10=\"${moddec:0:${#moddec}/10}\"\n    local moddecmod11=\"\
    ${moddec:0:${#moddec}/11}\"\n    local moddecmod12=\"${moddec:0:${#moddec}/12}\"\
    \n    local moddecmod13=\"${moddec:0:${#moddec}/13}\"\n    local moddecmod14=\"\
    ${moddec:0:${#moddec}/14}\"\n    local moddecmod15=\"${moddec:0:${#moddec}/15}\"\
    \n    local moddecmod16=\"${moddec:0:${#moddec}/16}\"\n    local moddecmod17=\"\
    ${moddec:0:${#moddec}/17}\"\n    local moddecmod18=\"${moddec:0:${#moddec}/18}\"\
    \n    local moddecmod19=\"${moddec:0:${#moddec}/19}\"\n    local moddecmod20=\"\
    ${moddec:0:${#moddec}/20}\"\n    local moddecmod21=\"${moddec:0:${#moddec}/21}\"\
    \n    local moddecmod22=\"${moddec:0:${#moddec}/22}\"\n    local moddecmod\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local a b c d e c d e f\n    a=\"${1:0:1}\"\n    b=\"${1:1:1}\"\n    c=\"\
    ${1:2:1}\"\n    d=\"${1:3:1}\"\n    e=\"${1:4:1}\"\n    f=\"${1:5:1}\"\n    if\
    \ [ \"$a\" == \"$d\" ]; then # if $a is multiple of $d\n        echo \"$a\"\n\
    \    elif [ \"$b\" == \"$c\" ]; then # if $b is multiple of $c\n        echo \"\
    $b\"\n    elif [ \"$a\" == \"$b\" ]; then # if $a is multiple of $b\n        echo\
    \ \"$a\"\n    elif [ \"$d\" == \"$c\" ]; then # if $d is multiple of $c\n    \
    \    echo \"$d\"\n    elif [ \"$a\" == \"$d\" ]; then # if $a is multiple of $d\n\
    \        echo \"$a\"\n    elif [ \"$b\" == \"$c\" ]; then # if $b is multiple\
    \ of $c\n        echo \"$b\"\n    elif [ \"$a\" == \"$b\" ]; then # if $a is multiple\
    \ of $b\n        echo \"$a\"\n    elif [ \"$d\" == \"$c\" ]; then # if $d is multiple\
    \ of $c\n        echo \"$d\"\n    elif [ \"$a\" == \"$b\" ]; then # if $a is multiple\
    \ of $b\n        echo \"$a\"\n    elif [ \"$d\" == \"$c\" ]; then # if $d is multiple\
    \ of $c\n        echo \"$d\"\n    elif [ \"$a\" == \"$b\" ]; then # if $a is multiple\
    \ of $b\n        echo \"$a\"\n    elif [ \"$d\" == \"$c\" ]; then # if $d is multiple\
    \ of $c\n        echo \"$d\"\n    elif [ \"$a\" == \"$b\" ]; then # if $a is multiple\
    \ of $b\n        echo \"$a\"\n    elif [ \"$d\" == \"$c\" ]; then # if $d is multiple\
    \ of $c\n        echo \"$d\"\n    elif [ \"$a\" == \"$b\" ]; then # if $a is multiple\
    \ of $b\n        echo \"$a\"\n    elif [ \"$d\" == \"$c\" ]; then # if $d is multiple\
    \ of $c\n        echo \"$d\"\n    elif [ \"$a\" == \"$b\" ]; then # if $a is multiple\
    \ of $b\n        echo \"$a\"\n    elif [ \"$d\" == \"$c\" ]; then # if $d is multiple\
    \ of $c\n        echo \"$d\"\n    elif [ \"$a\" == \"$b\" ]; then # if $a is multiple\
    \ of $b\n        echo \"$a\"\n    elif [ \"$d\" == \"$c\" ]; then # if $d is multiple\
    \ of $c\n        echo \"$d\"\n    elif [ \"$a\" \n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_jhf17_f.sh: line 65: syntax error near unexpected token `}''

    /tmp/tmp_jhf17_f.sh: line 65: `}''

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j;\n    i=$1; j=$2;\n    echo \"$((${j}+${i}))\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local x=$1; shift\n    local y=$1; shift\n    local p=$1; shift\n    if [\
    \ \"$x\" -ge 0 ] && ([ \"$y\" -lt 0 ] || [ \"$y\" -ge \"$p\" ]) ; then\n     \
    \   return 0\n    fi\n    while [ $x -gt 0 ] ; do\n        if [ $x -le $y ] ;\
    \ then\n            x=$(($x % $p))\n        else\n            x=$(($p - ($x %\
    \ $p)))\n        fi\n    done\n    echo \"$x\"\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsi8pcxhu.sh: line 20: [: : integer expression expected

    /tmp/tmpsi8pcxhu.sh: line 25: 3 % : syntax error: operand expected (error token
    is "% ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    # $1 is an integer\n    # $2 is an integer\n    # $3 can be an integer\n\
    \    local n=$1\n    local e=$2\n    local p=$3\n    while [ $n -gt $p ]; do\n\
    \        n=$((n-1))\n    done\n    echo $n\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcxvnj86h.sh: line 23: [: 3: unary operator expected

    /tmp/tmpcxvnj86h.sh: line 23: [: 1101: unary operator expected

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local a=$1\n  local b=$2\n  local c=$(( a * ( b / 0x100 ) ))\n  echo $(( c\
    \ - a )) | bc\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal d=$(( $1 % $2 ))\n\tlocal p=$(( $2 ))\n\tif (( $d == 0 )); then\n\t\t\
    echo $p\n\telse\n\t\techo $d\n\tfi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n\n    if [ \"$n\" -eq 0 -o \"$n\" -eq \"$p\"\
    \ ] ; then\n        echo 0\n    elif [ \"$n\" -eq \"$p\" ] ; then\n        echo\
    \ $n\n    else\n        echo $(( $n % $p ))\n    fi\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i n p\n\tif [ \"$1\" -eq 0 ]; then return 0; fi\n\tif [ \"$2\" -eq 0 ];\
    \ then return 1; fi\n\tn=$(echo \"$1\" | bc)\n\tp=$(echo \"$2\" | bc)\n\ti=1\n\
    \twhile [ \"$i\" -le \"$n\" ]; do\n\t\t((i % p))\n\t\t((i += 1))\n\tdone\n\techo\
    \ \"$i\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal x=\"$1\"\n\tlocal y=\"$2\"\n\tlocal p=$3\n\tif [[ \"$x\" =~ \"$y\" ]];\
    \ then\n\t\techo \"$x\"\n\telse\n\t\techo \"${x:$((x-$y))}\"\n\tfi\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \t# Avoid negative numbers\n\t[ \"$1\" -gt \"$2\" ] && { echo \"$2\";  return\
    \ 1; }\n\t[ \"$2\" -gt \"$1\" ] && { echo \"$1\"; return 1; }\n\t[ -z \"$2\" ]\
    \ && return 0\n\tlet n1=$(echo \"$1\" | sed \"s/^${2}/\\1/g\")\n\tlet n2=$(echo\
    \ \"$2\" | sed \"s/^${2}/\\1/g\")\n\tlet n3=`echo \"$3\" | sed \"s/^${2}/\\1/g\"\
    `\n\tlet n4=`echo \"$4\" | sed \"s/^${2}/\\1/g\"`\n\n\tlet n1=`expr \"$n1\" \\\
    * 2`\n\tlet n2=`expr \"$n2\" \\* 2`\n\tlet n3=`expr \"$n3\" \\* 2`\n\tlet n4=`expr\
    \ \"$n4\" \\* 2`\n\n\tlet n3=`expr \"$n3\" / 2`\n\tlet n4=`expr \"$n4\" / 2`\n\
    \n\tlet n4=`expr \"$n1\" - \"$n4\"`\n\tlet n1=`expr \"$n1\" - \"$n3\"`\n\n\techo\
    \ \"$n1\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  echo \"$(($2 * $1 >> 3)) % $2\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i p\n  i=$1\n  p=$2\n  (( i % p )) && echo \"$(( (i % p) + p ))\"\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local I=$1 I1=$2 I1P=$1 I1P1=$2\n    local J=$((I%I1P))\n    local J1=$((J%I1P1))\n\
    \    echo ${I:0:$J}${I:$J1}\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local mod=$1 p=$2 n=$3\n    if [ \"$p\" -lt \"$n\" -o \"$p\" -gt \"$n\" ];\
    \ then\n        echo \"Invalid inputs: mod $mod p $p n $n\" >&2\n        return\
    \ 1\n    fi\n    if [ \"$p\" -eq \"1\" ]; then\n        echo \"0\"\n    elif [\
    \ \"$p\" -eq \"2\" ]; then\n        echo \"1\"\n    elif [ \"$p\" -eq \"3\" ];\
    \ then\n        echo \"2\"\n    elif [ \"$p\" -eq \"4\" ]; then\n        echo\
    \ \"3\"\n    elif [ \"$p\" -eq \"5\" ]; then\n        echo \"4\"\n    elif [ \"\
    $p\" -eq \"6\" ]; then\n        echo \"5\"\n    elif [ \"$p\" -eq \"7\" ]; then\n\
    \        echo \"6\"\n    elif [ \"$p\" -eq \"8\" ]; then\n        echo \"7\"\n\
    \    elif [ \"$p\" -eq \"9\" ]; then\n        echo \"8\"\n    elif [ \"$p\" -eq\
    \ \"10\" ]; then\n        echo \"9\"\n    elif [ \"$p\" -eq \"11\" ]; then\n \
    \       echo \"10\"\n    elif [ \"$p\" -eq \"12\" ]; then\n        echo \"11\"\
    \n    elif [ \"$p\" -eq \"13\" ]; then\n        echo \"12\"\n    elif [ \"$p\"\
    \ -eq \"14\" ]; then\n        echo \"13\"\n    elif [ \"$p\" -eq \"15\" ]; then\n\
    \        echo \"14\"\n    elif [ \"$p\" -eq \"16\" ]; then\n        echo \"15\"\
    \n    elif [ \"$p\" -eq \"17\" ]; then\n        echo \"16\"\n    elif [ \"$p\"\
    \ -eq \"18\" ]; then\n        echo \"17\"\n    elif [ \"$p\" -eq \"19\" ]; then\n\
    \        echo \"18\"\n    elif [ \"$p\" -eq \"20\" ]; then\n        echo \"19\"\
    \n    elif [ \"$p\" -eq \"21\" ]; then\n        echo \"20\"\n    elif [ \"$p\"\
    \ -eq \"22\" ]; then\n        echo \"21\"\n    elif [ \"$p\" -eq \"23\" ]; then\n\
    \        echo \"22\"\n    elif [ \"$p\" -eq \"24\" ]; then\n        echo \"23\"\
    \n    elif [ \"$p\" -eq \"25\" ]; then\n        echo \"24\"\n    elif [ \"$p\"\
    \ -eq \"26\" ]; then\n        echo \"25\"\n    elif [ \"$p\" -eq \"27\" ]; then\n\
    \        echo \"26\"\n    elif [ \"$p\" -eq \"28\" ]; then\n        echo \"27\"\
    \n    elif [ \"$p\" -eq \"29\" ]; then\n        echo \"28\"\n    elif [ \"$p\"\
    \ -eq \"30\" ]; then\n        echo \"29\"\n    elif [ \"$p\" -eq \"31\" ]; then\n\
    \        echo \"30\"\n    else\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_atb2k6b.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp_atb2k6b.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  # Get arguments\n  (( $# <= 2 )) && return 1\n  local i=$1 j=$2\n\n  # Check\
    \ if j is greater than i\n  (( $j > $1 )) && return 1\n\n  # Get remainder\n \
    \ local k=$(( $i % $j ))\n  # Return remainder\n  echo $k\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j=0 ret=\"\"\n    for((i=0; i<$2; ++i)); do\n        j=0\n      \
    \  for((j=0; j<$1; ++j)); do\n            ((j%$2 != 0)) && ret=\"${ret}${i}\"\n\
    \        done\n    done\n    echo ${ret}\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local a=$1 b=$2\n  a=${a//-/+}\n  b=${b//-/+}\n  local bmod=$(( $b % $a ))\n\
    \  echo $(( $b - $a * bmod ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    if [[ $1 != 0 ]]; then\n        (( n = $1 % $2 ))\n    elif [[ $2 != 0 ]];\
    \ then\n        (( n = $2 % $1 ))\n    else\n        n=0\n    fi\n    echo \"\
    $n\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\n\ti=\"$1\"\n\tj=\"$2\"\n\tshift 2\n\n\techo $(echo \"$i $j\" |\
    \ awk \"{ print ($1 % $j); }\") $i\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: { print ( % 5); }

    awk: cmd. line:1:           ^ syntax error

    awk: cmd. line:1: { print ( % 101); }

    awk: cmd. line:1:           ^ syntax error

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local x=\"$1\"\n    local y=\"$2\"\n    local p=\"$3\"\n    local n=$(( x\
    \ | $(( p - 1 )) ))\n    local d=$(( p | $(( p - 1 )) ))\n    echo $(( n | $((\
    \ d - 1 )) )) | bc\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n p=\"$1\" b=\"$2\"\n\n  n=${n,,}\n\n  (( n & p )) && echo \"$(( (n%p)\
    \ + b ))\" || echo \"$(( n - b ))\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local base=$1\n    local n=$2\n    local p=$3\n    local s=0\n    while [\
    \ $n -gt 0 ]; do\n        (( n = n % p ))\n        s=$(($s*$base))\n    done\n\
    \    echo $s\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=32 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=30 encoding='utf-8'>
  timestamp: 1660058918
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif [[ -z \"$1\" ]]; then\n\t\techo \"Usage: $0 n p\" >&2\n\t\texit 1\n\tfi\n\
    \tif [[ -z \"$2\" ]]; then\n\t\techo \"Usage: $0 n p\" >&2\n\t\texit 1\n\tfi\n\
    \tif [[ -z \"$3\" ]]; then\n\t\techo \"Usage: $0 n p\" >&2\n\t\texit 1\n\tfi\n\
    \tx=$(echo \"$1\" | bc) # convert from hex to decimal\n\ty=$(echo \"$3\" | bc)\
    \ # convert from hex to decimal\n\tres=\"$(bc <<<\"scale=8; $x % $y; $x $y\")\"\
    \n\tif [[ \"$res\" -lt \"1\" ]]; then\n\t\techo $res\n\telse\n\t\techo \"$res\"\
    \n\tfi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'Usage: /tmp/tmpx_zu4ra0.sh n p

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1\n  local p=$2\n  # Avoid overflow\n  (( (n%p) > 0xFF )) && echo\
    \ \"$(( (n%p) + 0xFF ))\" || echo \"$n%$p\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local x y\n  x=$1\n  y=$2\n  shift 2\n  while [ $x -ge 0 ]; do\n    x=$(( $x\
    \ / $y ))\n  done\n  echo $x\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=3 encoding='utf-8'>
  timestamp: 1660058918
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  # check arguments\n  [ ${#} -eq 2 ] || return 1\n  [ ${1} -gt 0 ] || return\
    \ 1\n  [ ${1} -lt $2 ] || return 1\n\n  # compute result\n  n=$(( (${1} * $2)%${2}\
    \ ))\n  [ ${n} -eq 0 ] || return ${n}\n  n\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp66hlucgp.sh: line 25: n: command not found

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    while [[ $n -eq 0 ]]; do\n\techo \"0\"\n\t\
    n=${n#0}\n    done\n    if [[ $n -ge $p ]]; then\n\techo $n\n    else\n\techo\
    \ $((n - $p))\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i o\n    i=\"$1\" o=\"$2\"\n    o=\"${o%%1}${o#1*}\"\n    for ((i=3;\
    \ i <= $((${#o}+2)); i++)); do\n        o=\"${o}${o#${o%%1}}${o#${o#1*}}\"\n \
    \   done\n    echo \"$o\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    if [ $n -eq 0 ] || [ $p -eq 0 ]; then\n \
    \       return 1\n    fi\n    if [ $((n-1)) -eq $n ] && [ $((p-1)) -eq $p ]; then\n\
    \        echo 0\n        return\n    fi\n    local res\n    local sign\n    local\
    \ z\n    local w\n    # calculate w = abs(n)\n    if [ $n -lt 0 ]; then\n    \
    \    sign=\"-\"\n        ((n *= -1))\n    else\n        sign=\"\"\n    fi\n  \
    \  local b=$(($(($n * $p) - $p) + 1))\n    local d=$(($p - 1))\n    # calculate\
    \ the remainder by reducing the digits in the worst case (all of them)\n    local\
    \ a=$b\n    for z in $(seq 1 $d); do\n        a=$(($a * $p))\n    done\n    #\
    \ calculate res = a mod p\n    res=$((a % $p))\n    # calculate the remainder\
    \ in case of a>p\n    if [ -n \"$sign\" ]; then\n        res=$(($p - $res))\n\
    \    fi\n    echo \"$sign$res\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpav9tr9ws.sh: command substitution: line 37: syntax error near unexpected
    token `-''

    /tmp/tmpav9tr9ws.sh: command substitution: line 37: `($n * $p) - $p''

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local a b\n    for ((a=${1-0}; b=${2-0}; a>b; a-=b); do\n        [[ $a -le\
    \ 0 ]] && return 1\n    done\n    [[ $a -le $b ]] && return $a\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpme4q5k0g.sh: line 18: syntax error near `;''

    /tmp/tmpme4q5k0g.sh: line 18: `    for ((a=${1-0}; b=${2-0}; a>b; a-=b); do''

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal -n x=$1\n\tlocal -n y=$2\n\t(( $x / $y % $y ))\n}\n\ncandidate() {\n \
    \   modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpt40mpoi7.sh: line 17: local: `3'': invalid variable name for name
    reference

    /tmp/tmpt40mpoi7.sh: line 18: local: `5'': invalid variable name for name reference

    /tmp/tmpt40mpoi7.sh: line 19: ((: /  %  : syntax error: operand expected (error
    token is "/  %  ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local s=0\n    while (( n > 0 )) ; do\n \
    \       let \"n--\"\n        let \"s+=p\"\n    done\n    echo \"$s\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal N=$1; shift;\n\tlocal M=$1; shift;\n\tlocal MOD=\"$2\"; shift;\n\tlocal\
    \ C; C=0;\n\twhile (( N > 0 ));\n\tdo\n\t\t(( C+=1 ));\n\t\tN=$(( N % M ));\n\t\
    done;\n\techo -n \"$(( C % MOD ))\";\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=26 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=4 encoding='utf-8'>
  timestamp: 1660058918
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    echo $(( n%p ))\n}\n\ncandidate() {\n   \
    \ modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"\
    3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"\
    0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif [ -z \"$1\" ] || [ -z \"$2\" ]; then\n\t\techo \"Usage: $(basename $0) [integer\
    \ integer]\"\n\t\texit 1\n\tfi\n\t[[ $1 == 0 ]] && return 0\n\t[[ $1 == 1 ]] &&\
    \ return 1\n\t[[ $1 == 2 ]] && return 2\n\t[[ $1 == 3 ]] && return 3\n\t[[ $1\
    \ == 4 ]] && return 4\n\t[[ $1 == 5 ]] && return 5\n\t[[ $1 == 6 ]] && return\
    \ 6\n\t[[ $1 == 7 ]] && return 7\n\t[[ $1 == 8 ]] && return 8\n\t[[ $1 == 9 ]]\
    \ && return 9\n\t[[ $1 == 10 ]] && return 10\n\t[[ $1 == 11 ]] && return 11\n\t\
    [[ $1 == 12 ]] && return 12\n\t[[ $1 == 13 ]] && return 13\n\t[[ $1 == 14 ]] &&\
    \ return 14\n\t[[ $1 == 15 ]] && return 15\n\t[[ $1 == 16 ]] && return 16\n\t\
    [[ $1 == 17 ]] && return 17\n\t[[ $1 == 18 ]] && return 18\n\t[[ $1 == 19 ]] &&\
    \ return 19\n\t[[ $1 == 20 ]] && return 20\n\t[[ $1 == 21 ]] && return 21\n\t\
    [[ $1 == 22 ]] && return 22\n\t[[ $1 == 23 ]] && return 23\n\t[[ $1 == 24 ]] &&\
    \ return 24\n\t[[ $1 == 25 ]] && return 25\n\t[[ $1 == 26 ]] && return 26\n\t\
    [[ $1 == 27 ]] && return 27\n\t[[ $1 == 28 ]] && return 28\n\t[[ $1 == 29 ]] &&\
    \ return 29\n\t[[ $1 == 30 ]] && return 30\n\t[[ $1 == 31 ]] && return 31\n\t\
    [[ $1 == 32 ]] && return 32\n\t[[ $1 == 33 ]] && return 33\n\t[[ $1 == 34 ]] &&\
    \ return 34\n\t[[ $1 == 35 ]] && return 35\n\t[[ $1 == 36 ]] && return 36\n\t\
    [[ $1 == 37 ]] && return 37\n\t[[ $1 == 38 ]] && return 38\n\t[[ $1 == 39 ]] &&\
    \ return 39\n\t[[ $1 == 40 ]] && return 40\n\t[[ $1 == 41 ]] && return 41\n\t\
    [[ $1 == 42 ]] && return 42\n\t[[ $1 == 43 ]] && return 43\n\t[[ $1 == 44 ]] &&\
    \ return 44\n\t[[ $1 == 45 ]] && return 45\n\t[[ $1 == 46 ]] && return 46\n\t\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=\"$1\"\n\tlocal p=\"$2\"\n\ttest \"$n\" -gt 0 && test \"$p\" -gt 0 &&\
    \ test \"$p\" -lt \"$n\" && return 0\n\techo \"$p\" &>/dev/null || return\n\t\
    local r=$(echo \"$p%$n\" | bc)\n\t[ \"$r\" -eq \"$p\" ] && return 0\n\techo \"\
    $r\" >/dev/null || return\n\twhile [ \"$p\" -lt \"$n\" ];do\n\t\tp=\"$(($p + 1))\"\
    \n\t\t[ \"$p\" -gt \"$n\" ] && p=\"$(($n - 1))\"\n\tdone\n\techo \"$p\"\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif [[ $1 != \"\" ]] && [[ $2 != \"\" ]]; then\n\t\tif (( ${#1} < ${#2} )) ;\
    \ then\n\t\t\techo \"Error: $1 should be larger than $2\" >&2\n\t\t\texit 1\n\t\
    \telse\n\t\t\tlocal a=$1\n\t\t\tlocal b=$2\n\t\t\tlocal c=$(( (( $a % $b ) ) %\
    \ $b ))\n\t\t\techo $c\n\t\tfi\n\telse\n\t\techo \"Error: 2 arguments required\
    \ but only $1 given\" >&2\n\t\texit 1\n\tfi\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local a b\n  a=$1\n  b=$2\n  if [ -n \"$b\" ] ; then\n    b=$(($b % $a))\n\
    \  else\n    b=$((a % $a))\n  fi\n  if [ $b -lt 1 ] ; then\n    b=$(($a + 1))\n\
    \  fi\n  if [ $b -gt $a ] ; then\n    b=$(($a - 1))\n  fi\n  echo $b\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local -i n=$1\n  local -i p=$2\n  if (( n > p )); then\n    n=$(( $n - $p ))\n\
    \  fi\n  (( $n % $p ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    if [ \"$#\" -lt 2 ] ; then \n        echo \"Usage: `basename $0` integer\
    \ integer\" >&2\n        exit 2\n    fi\n    if [ \"$#\" -eq 2 ] ; then\n    \
    \    if [ \"$1\" -gt \"$2\" ] ; then\n            echo \"$1 mod $2 is $(($1%$2))\
    \ larger than $2\" >&2\n            exit 2\n        elif [ \"$1\" -lt \"$2\" ]\
    \ ; then\n            echo \"$1 mod $2 is $(($1%$2)) smaller than $2\" >&2\n \
    \           exit 2\n        fi\n    elif [ \"$#\" -gt 2 ] ; then\n        echo\
    \ \"Usage: `basename $0` integer integer\" >&2\n        exit 2\n    fi\n    local\
    \ first=$1\n    local second=$2\n    if [ \"$first\" -le \"$second\" ] ; then\
    \ \n        echo \"$((first%$second))\"\n    elif [ \"$first\" -lt \"$second\"\
    \ ] ; then \n        echo \"$((second%$first))\"\n    else \n        echo \"$((first%$second))\"\
    \n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '3 mod 5 is 3 smaller than 5

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local int=$1\n    local mod=$2\n    local modp=0\n    while (( \"$int\" >\
    \ \"101\" )); do\n\tmodp=$(($modp+$mod))\n\t(( int -= 10 ))\n    done\n    if\
    \ (( \"$int\" > \"1\" )); then\n\tmodp=$(($modp+$mod))\n    fi\n    echo \"$modp\"\
    \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\techo \"$( ($n & ($p - 1)) == $p )\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7frrizu3.sh: command substitution: line 20: syntax error near unexpected
    token `==''

    /tmp/tmp7frrizu3.sh: command substitution: line 20: ` ($n & ($p - 1)) == $p )"''

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal x=\"$1\"\n\tlocal y=\"$2\"\n\tlocal p=\"$3\"\n\n\tx=$(( x - $x % $p ))\n\
    \tif [ $x -eq 0 ]; then\n\t\tx=$(( p + 1 ))\n\tfi\n\ty=$(( y + x ))\n\tx=$(( x\
    \ / $p ))\n\ty=\"$y$x\"\n\tx=$(( x % $p ))\n\n\t[ \"$x\" -eq 0 ] && return 1\n\
    \t[ \"$y\" -eq 0 ] && return 0\n\t[ \"$y\" -eq \"$p\" ] && return 0\n\t[ \"$x\"\
    \ -eq \"$p\" ] && return 0\n\t[ \"$y\" -ge \"$p\" ] && return 1\n\t[ \"$x\" -le\
    \ \"$p\" ] && return 1\n\t[ \"$y\" -le \"$p\" ] && return 1\n\t[ \"$y\" -ge \"\
    $p\" ] && return 1\n\t[ \"$y\" -le \"$p\" ] && return 1\n\t[ \"$x\" -ge \"$p\"\
    \ ] && return 1\n\t[ \"$y\" -ge \"$p\" ] && return 1\n\t[ \"$y\" -le \"$p\" ]\
    \ && return 1\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj_payijg.sh: line 21: x - 3 %  : syntax error: operand expected
    (error token is "%  ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    if [ $# -lt 2 ] ; then\n        echo \"Error: too few arguments\"\n     \
    \   return 1\n    fi\n\n    local x y p o\n    local n=$1\n    local m=$2\n  \
    \  local r\n\n    if [ $n -lt 0 ] ; then\n        echo \"Error: second argument\
    \ must be a nonnegative integer\"\n        return 1\n    fi\n    if [ $m -lt 0\
    \ ] ; then\n        echo \"Error: third argument must be a nonnegative integer\"\
    \n        return 1\n    fi\n    if [ $m -gt $n ] ; then\n        echo \"Error:\
    \ third argument must be no greater than first argument\"\n        return 1\n\
    \    fi\n\n    if [ $n -eq 0 ] ; then\n        echo \"Error: cannot divide by\
    \ zero\"\n        return 1\n    fi\n\n    if [ $m -eq 0 ] ; then\n        echo\
    \ \"Error: cannot divide by zero\"\n        return 1\n    fi\n\n    y=$(( m %\
    \ n ))\n    if [ $y -eq 0 ] ; then\n        x=$(( m / n ))\n    elif [ $y -eq\
    \ 1 ] ; then\n        x=$(( n - 1 ))\n    else\n        x=$(( n - y ))\n    fi\n\
    \    p=$(( 2 * x + 1 ))\n\n    o=`printf \"%${p}d\" $x`\n    echo -n \"$(printf\
    \ \"%${p}d\" $x)\"\n    return 0\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  if (( $1 == 0 && $2 == 0 )); then\n    return $1\n  fi\n  local n1=$1\n  local\
    \ n2=$2\n  local p=$3\n\n  local x\n  local y\n  local z\n\n  if (( p == 0 ));\
    \ then\n    x=$n1\n  else\n    x=$n1\n    y=$n2\n  fi\n  local n\n  local d\n\n\
    \  while (( x>1 )); do\n    z=$(( $x%p ))\n    y=$(( $y%p ))\n    n=$(( $x+$z\
    \ ))\n    d=$(( $y-$z ))\n    x=$n\n    y=$d\n  done\n  echo \"$y\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp37kk6x1_.sh: line 38: 3%p : division by 0 (error token is "p ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif [ -z \"$1\" ] || [ -z \"$2\" ]; then\n\t\techo \"Usage: $0 [integer] [integer]\"\
    \n\t\treturn\n\tfi\n\t((n=$1)%$2)\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmps0b5f5h4.sh: line 21: syntax error near unexpected token `%$2'\n\
    /tmp/tmps0b5f5h4.sh: line 21: `\t((n=$1)%$2)'\n"
  stdout: ''
  timestamp: 1660058913
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    # Make sure both are positive numbers, otherwise we'll get a division by\
    \ zero\n    if [ ${1:0:1} -lt 0 ] || [ ${2:0:1} -lt 0 ]; then\n        echo \"\
    ${1}\"\n        return\n    fi\n    if [ $1 -gt $2 ]; then\n        echo ${2}\n\
    \        return\n    fi\n\n    local rem=$(modp \"$1\" \"${2}\")\n    echo $(expr\
    \ ${1} - ${2} + $rem)\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=40 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=12 encoding='utf-8'>
  timestamp: 1660058918
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local -r p=$1\n    local -r n=$2\n    if [[ $n -gt 0 ]]; then\n        echo\
    \ \"$(( (n % p) + p ))\"\n    else\n        echo \"$(( n ))\"\n    fi\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local d=$2\n    if [[ ${n} -eq 0 ]]; then\n        echo \"\
    $d\"\n        return\n    fi\n    local m=$((${d} / ${n}))\n    if [[ ${m} -le\
    \ 0 ]]; then\n        echo \"0\"\n        return\n    fi\n    local r=$(modp \"\
    ${n}\" \"${d}\")\n    echo \"${m}${r}\"\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=25 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660058918
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local x=$1; shift\n    local y=$1; shift\n\n    while (( ${#x} != $y ));\
    \ do\n        x=\"$x $x\";\n    done\n\n    echo \"$x\" | bc\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=43 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=15 encoding='utf-8'>
  timestamp: 1660058918
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local x y z\n  local xp yp\n  if [ $# -lt 2 ]\n  then\n    echo \"Usage: $0\
    \ [integer] [integer]\"\n    exit 1\n  fi\n\n  # if $2 greater than $1, result\
    \ is $1\n  if [ $(($2 > $1)) ]\n  then\n    echo \"$1\"\n  else\n    xp=$(($1\
    \ / $2))\n    x=$(($1 % $2))\n    yp=$(($2 * xp))\n    echo \"$yp\"\n  fi\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif (( $1 == $2 )); then\n\t\techo \"1\"\n\telse\n\t\t(( ($1 % $2) == 0 )) &&\
    \ echo $(expr $( ($1 % $2) / $2 ))\n\tfi\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n x p m\n  n=$1\n  x=$2\n  p=$(($x % $p))\n  m=$(echo $p | bc)\n  if\
    \ [[ $m -eq 1 ]]; then\n     echo \"0\"\n  else\n     echo \"$m\"\n  fi\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpch0qk3be.sh: line 20: 5 % : syntax error: operand expected (error
    token is "% ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal int_1=${1}\n\tlocal int_2=${2}\n\tlocal int_1_length=$(echo ${int_1} |\
    \ wc -c)\n\tlocal int_2_length=$(echo ${int_2} | wc -c)\n\t# if $1 is the largest\
    \ number for which 2^n modulo $2 is 0\n\t# then we can return 0 directly\n\tif\
    \ [[ \"${int_1_length}\" -gt \"${int_2_length}\" ]]; then\n\t\treturn 0\n\tfi\n\
    \tlocal int_2_mod=$(printf \"%${int_2_length}d\" $(echo ${int_2} % ${int_1}))\n\
    \techo $(printf \"%${int_1_length}d\" ${int_1} % ${int_2_mod})\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn60ehcd4.sh: line 26: printf: %: invalid number

    /tmp/tmpn60ehcd4.sh: line 27: printf: %: invalid number

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1 p=$2\n  shift; shift\n  [[ $n -gt 0 ]] || return 1\n  local s=0\n\
    \  while [[ ${#n} -gt 0 ]]; do\n    local d=$((${n%p}))\n    n=$((${n//${p}}))\n\
    \    s=$((${s}*${d}+${s%${d}}))\n  done\n  echo \"$((s%${p}))\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=44 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=19 encoding='utf-8'>
  timestamp: 1660058918
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1\n  local p=$2\n  local x\n  if [[ ${p} == 0 ]]; then\n    x=$1\n\
    \  else\n    x=$(( ${n}%$p ))\n  fi\n  echo $x\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local mod=$p\n    local c=$(( (n % $mod)\
    \ + $mod ))\n    echo $c\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i x\n  local p=\"$2\"\n\n  local b\n  local -a pstr\n\n  if [[ $2 =~\
    \ ^[0-9]+$ ]]; then\n    b=${1%%[!0-9]*}\n    if [[ $b =~ ^[0-9]+$ ]]; then\n\
    \      echo \"$((${1}%${p}))\"\n    else\n      echo \"$1\"\n    fi\n  else\n\
    \    echo \"$1\"\n  fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal x=$1\n\tlocal y=$2\n\t[ \"$y\" -gt 0 ] || return 1\n\t[ \"$y\" -lt \"\
    $x\" ] || return 1\n\tlocal xlen=$(($(($x + 1)) - 1))\n\tlocal ylen=$(($(($y +\
    \ 1)) - 1))\n\tlet \"a=$x % $y\"\n\tlet \"b=$y % $x\"\n\tlet \"c=$x % $y\"\n\t\
    let \"d=$y % $x\"\n\t[ \"$a\" -eq $b ] && [ \"$a\" -eq $c ] && return 0\n\t[ \"\
    $b\" -eq $c ] && [ \"$b\" -eq $d ] && return 0\n\t[ \"$a\" -gt \"$b\" ] && [ \"\
    $a\" -gt \"$c\" ] && return 0\n\t[ \"$b\" -gt \"$c\" ] && [ \"$b\" -gt \"$d\"\
    \ ] && return 0\n\t[ \"$a\" -lt \"$b\" ] && [ \"$a\" -lt \"$c\" ] && return 0\n\
    \t[ \"$b\" -lt \"$c\" ] && [ \"$b\" -lt \"$d\" ] && return 0\n\t[ \"$a\" -lt \"\
    $b\" ] && return 1\n\t[ \"$b\" -lt \"$c\" ] && return 1\n\t[ \"$a\" -gt \"$b\"\
    \ ] && return 1\n\t[ \"$b\" -gt \"$c\" ] && return 1\n\t[ \"$a\" -lt \"$b\" ]\
    \ && return 1\n\treturn 1\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n p sum\n    read n p <<< \"$1\"\n    (( n > 0 )) || return 1\n   \
    \ (( p > 1 )) && return 1\n    (( n == 0 )) && return 0\n    sum=0\n    while\
    \ ((n>1)); do\n        (( n%p )) && break\n        sum=$(( sum + p ))\n      \
    \  (( n = n/p ))\n    done\n    (( sum == 0 )) && return 1\n    echo $(( sum %\
    \ p ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=45 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=14 encoding='utf-8'>
  timestamp: 1660058918
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    [[ $1 =~ ^[[:digit:]]+$ ]] || return 1\n    [[ $2 =~ ^[[:digit:]]+$ ]] ||\
    \ return 1\n    local n=$(( $1 % $2 ))\n    (( $n >= $1 )) && return $1 || return\
    \ $n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local a=$1\n    local b=$2\n    local res\n    if [[ -z \"$a\" ]]; then\n\
    \        return 1\n    elif [[ -z \"$b\" ]]; then\n        return $a\n    fi\n\
    \    while (( a > 0 )); do\n        (( res += a % b ))\n        a=$( ((a-$res)%$b)\
    \ + $b )\n    done\n    return $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjfibyrmy.sh: command substitution: line 28: syntax error near unexpected
    token `%$b''

    /tmp/tmpjfibyrmy.sh: command substitution: line 28: ` ((a-$res)%$b) + $b )''

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local b=$1 p=$2\n    [ $b -lt $p ] && return $b # Avoid division by zero\n\
    \    if [ \"$(expr log $b $p)\" = \"-inf\" ] ; then\n        # Avoid negative\
    \ integers\n        # NOTE: Bash has a bug about this case... \n        #    \
    \   So we should avoid this case\n        return 1\n    fi\n\n    local m=`echo\
    \ $b | bc`\n    local d=$(( ($b > p) ? $b - p : p - $b ))\n    # $m is now the\
    \ modulo of $b divided by $p\n    \n    echo $m\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  (( $1 % $2 )) && echo \"${1} % ${2}\" || echo \"${1}\"\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i b tmp m\n\t# $1 must be an integer.\n\t# $2 must be an integer.\n\t\
    if [ $1 -eq 0 ] || [ $2 -eq 0 ]; then\n\t\treturn\n\tfi\n\ti=$1\n\t# Get modulus.\n\
    \tif [ \"$i\" -lt 0 ]; then\n\t\ti=$((-$i))\n\tfi\n\tif [ \"$i\" -gt \"$2\" ];\
    \ then\n\t\ti=$(( $2 - $i ))\n\tfi\n\t# Get remainders.\n\tb=`echo \"$i & $2\"\
    \ | bc`\n\ttmp=`echo \"$b / $1\" | bc`\n\tm=`echo \"$b % $1\" | bc`\n\techo \"\
    $m\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \t(( MOD=$1 % $2 ))\n\tif [ \"X\" == \"X$MOD\" ]; then\n\t\tMOD=$2\n\tfi\n\techo\
    \ $MOD\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\techo \"$(( (n&(p-1)) % (p-1)))\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlet \"a = $1\"; let \"b = $2\"; let \"t = $a % $b\"; let \"x = $b - $t\"; let\
    \ \"y = $a - $x\"; let \"z = $t % $y\";\n\tlet \"x = $x + 1; let $x = x + 1; let\
    \ $x = $x - 1; let $x = $x * $y\"; let $x = $x / ($y+1)\n\tlet $z = $z + $y\n\t\
    let $x = $x + ($z - $z % $x) * $x\n\treturn $x\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmp8y7x3015.sh: line 18: syntax error near unexpected token `('\n\
    /tmp/tmp8y7x3015.sh: line 18: `\tlet \"x = $x + 1; let $x = x + 1; let $x = $x\
    \ - 1; let $x = $x * $y\"; let $x = $x / ($y+1)'\n"
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n p\n\t# $1 is an integer\n\t# $2 is an integer\n\tn=$(echo \"$1\" | bc)\n\
    \tp=$2\n\t[[ -z \"$n\" ]] && return 1\n\tlocal -r m=$(( ($(echo \"$p\" | bc -l)\
    \ / $n) | bc -l))\n\t[[ $m -eq $p ]] && return 0\n\t(( $m < $p )) && return $m\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=\"$1\"\n\tlocal p=\"$2\"\n\tif (( p <= 0 )) ; then\n\t\treturn \"$n\"\
    \n\tfi\n\tif (( n < p )) ; then\n\t\tprintf -v \"$n\" '%d' \"$(( n % p ))\"\n\t\
    \treturn \"$n\"\n\tfi\n\tprintf -v \"$n\" '%d' \"$(( (n-p) % p ))\"\n\tprintf\
    \ -v \"$p\" '%02x' \"$(( (p % 16) ))\"\n\tprintf -v \"$p\" '%02x' \"$(( (p % 16)\
    \ ))\"\n\tprintf -v \"$p\" '%02x' \"$(( (p % 16) ))\"\n\tprintf -v \"$p\" '%02x'\
    \ \"$(( (p % 16) ))\"\n\tprintf -v \"$p\" '%02x' \"$(( (p % 16) ))\"\n\tprintf\
    \ -v \"$p\" '%02x' \"$(( (p % 16) ))\"\n\tprintf -v \"$p\" '%02x' \"$(( (p % 16)\
    \ ))\"\n\tprintf -v \"$p\" '%02x' \"$(( (p % 16) ))\"\n\tprintf -v \"$p\" '%02x'\
    \ \"$(( (p % 16) ))\"\n\tprintf -v \"$p\" '%02x' \"$(( (p % 16) ))\"\n\tprintf\
    \ -v \"$p\" '%02x' \"$(( (p % 16) ))\"\n\tprintf -v \"$p\" '%02x' \"$(( (p % 16)\
    \ ))\"\n\tprintf -v \"$p\" '%02x' \"$(( (p % 16) ))\"\n\tprintf -v \"$p\" '%02x'\
    \ \"$(( (p % 16) ))\"\n\tprintf -v \"$p\" '%02x' \"$(( (p % 16) ))\"\n\tprintf\
    \ -v \"$p\" '%02x' \"$(( (p % 16) ))\"\n\tprintf -v \"$p\" '%02x' \"$(( (p % 16)\
    \ ))\"\n\tprintf -v \"$p\" '%02x' \"$(( (p % 16) ))\"\n\tprintf -v \"$p\" '%02x'\
    \ \"$(( (p % 16) ))\"\n\tprintf -v \"$p\" '%02x' \"$(( (p % 16) ))\"\n\tprintf\
    \ -v \"$p\" '%02x' \"$(( (p % 16) ))\"\n\tprintf -v \"$p\" '%02x' \"$\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpckvb3f6a.sh: line 63: unexpected EOF while looking for matching
    `"''

    /tmp/tmpckvb3f6a.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i imax\n    local a b result\n\n    imax=$(( $2 > $1 ? $2 : $1 ))\n\
    \    for (( i = 1; i <= $imax; i++ ))\n    do\n        a=$(( $1 % $2 ))\n    \
    \    b=$(( $2 / $2 ))\n        result=$(( $a - $b + 1 ))\n        if [ $result\
    \ -gt 0 ]\n        then\n            echo $result\n            return $result\n\
    \        fi\n    done\n    echo $(($i-1))\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local a b\n    a=$1\n    b=$2\n    if [[ \"$a\" = \"-\" ]]\n    then\n  \
    \      a=$((-a | 0x10))\n    fi\n    if [[ \"$b\" = \"-\" ]]\n    then\n     \
    \   b=$((-b | 0x10))\n    fi\n    local x y p q r s t\n    x=$((a / b | 0))\n\
    \    if [ $x -eq 0 ]\n    then\n        return 0\n    fi\n    while [ $x -ne 0\
    \ ]\n    do\n        q=$((x / 2 | 0))\n        r=$((x % 2 | 0))\n        x=$((q\
    \ + r))\n        p=$((p + 1))\n    done\n    if [ $p == 0 ]\n    then\n      \
    \  return 0\n    fi\n    s=$((b % p))\n    if [ $s < 0 ]\n    then\n        s=$((-s\
    \ | 0x10))\n    fi\n    if [ $s -gt b ]\n    then\n        s=b\n    fi\n    while\
    \ [ $s -gt 0 ]\n    do\n        t=$((s / 2 | 0))\n        s=$((s % 2 | 0))\n \
    \       s=$((t + s))\n    done\n    echo $((s))\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif [ -z \"$2\" ]; then\n\t\techo \"$1\"\n\t\treturn 0\n\tfi\n\tlocal n=\"$1\"\
    \n\tlocal p=\"$2\"\n\t# $n & $p are strings\n\t(( n%p == 0 )) && echo \"$n\" ||\
    \ echo \"$(( $n % $p ))\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    if [[ ${1} = 0 ]]; then\n        echo $1\n    elif [[ ${1} = 1 ]]; then\n\
    \        echo ${2}\n    elif [[ ${1} -eq 0 ]]; then\n        echo $(modp $((${2}+${1}))\
    \ ${2})\n    elif [[ ${1} -eq 1 ]]; then\n        echo ${2}\n    elif [[ ${1}\
    \ -eq 2 ]]; then\n        echo $(modp $((${1}+${2}))${1} ${2})\n    elif [[ ${1}\
    \ -eq 3 ]]; then\n        echo $(modp $((${1}+${2}))${2} ${2})\n    elif [[ ${1}\
    \ -eq 4 ]]; then\n        echo $(modp $((${1}+${2}))${3} ${2})\n    elif [[ ${1}\
    \ -eq 5 ]]; then\n        echo $(modp $((${1}+${2}))${4} ${2})\n    elif [[ ${1}\
    \ -eq 6 ]]; then\n        echo $(modp $((${1}+${2}))${5} ${2})\n    elif [[ ${1}\
    \ -eq 7 ]]; then\n        echo $(modp $((${1}+${2}))${6} ${2})\n    elif [[ ${1}\
    \ -eq 8 ]]; then\n        echo $(modp $((${1}+${2}))${7} ${2})\n    elif [[ ${1}\
    \ -eq 9 ]]; then\n        echo $(modp $((${1}+${2}))${8} ${2})\n    elif [[ ${1}\
    \ -eq 10 ]]; then\n        echo $(modp $((${1}+${2}))${9} ${2})\n    elif [[ ${1}\
    \ -eq 11 ]]; then\n        echo $(modp $((${1}+${2}))${10} ${2})\n    elif [[\
    \ ${1} -eq 12 ]]; then\n        echo $(modp $((${1}+${2}))${11} ${2})\n    elif\
    \ [[ ${1} -eq 13 ]]; then\n        echo $(modp $((${1}+${2}))${12} ${2})\n   \
    \ elif [[ ${1} -eq 14 ]]; then\n        echo $(modp $((${1}+${2}))${13} ${2})\n\
    \    elif [[ ${1} -eq 15 ]]; then\n        echo $(modp $((${1}+${2}))${14} ${2})\n\
    \    elif [[ ${1} -eq 16 ]]; then\n        echo $(modp $((${1}+${2}))${15\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp1gzhr8xa.sh: line 54: unexpected EOF while looking for matching
    `)''

    /tmp/tmp1gzhr8xa.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  echo \"$(( 2**$(echo \"$1 mod $2\" | bc -l) ))\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmp1vuiruty.sh: line 17: 2** : syntax error: operand expected (error token
    is "** ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal -r p=$1 n=$2 r=$(( n * $(( p - 1 )) % $p )) s=$(( r != $(( r - $(( r -\
    \ $(( $p % 2 )) )) % $p )) )) ;\n\tif [ ! -z $s ] ;\n\tthen echo $(( $r ))\n\t\
    else echo $(( $r ))\n\tfi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpedkj3v4t.sh: line 17: n * -1 %  : syntax error: operand expected
    (error token is "%  ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local n m\n\n    n=$1\n    m=$2\n    for ((i=0; i < n; i++));\
    \ do\n        j=$(div $i $m)\n        ((n+=$j))\n    done\n    echo \"$n\"\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp5jkylkur.sh: line 23: div: command not found

    /tmp/tmp5jkylkur.sh: line 24: ((: n+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmp5jkylkur.sh: line 23: div: command not found

    /tmp/tmp5jkylkur.sh: line 24: ((: n+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmp5jkylkur.sh: line 23: div: command not found

    /tmp/tmp5jkylkur.sh: line 24: ((: n+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmp5jkylkur.sh: line 23: div: command not found

    /tmp/tmp5jkylkur.sh: line 24: ((: n+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmp5jkylkur.sh: line 23: div: command not found

    /tmp/tmp5jkylkur.sh: line 24: ((: n+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmp5jkylkur.sh: line 23: div: command not found

    /tmp/tmp5jkylkur.sh: line 24: ((: n+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmp5jkylkur.sh: line 23: div: command not found

    /tmp/tmp5jkylkur.sh: line 24: ((: n+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmp5jkylkur.sh: line 23: div: command not found

    /tmp/tmp5jkylkur.sh: line 24: ((: n+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmp5jkylkur.sh: line 23: div: command not found

    /tmp/tmp5jkylkur.sh: line 24: ((: n+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmp5jkylkur.sh: line 23: div: command not found

    /tmp/tmp5jkylkur.sh: line 24: ((: n+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmp5jkylkur.sh: line 23: div: command not found

    /tmp/tmp5jkylkur.sh: line 24: ((: n+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmp5jkylkur.sh: line 23: div: command not found

    /tmp/tmp5jkylkur.sh: line 24: ((: n+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmp5jkylkur.sh: line 23: div: command not found

    /tmp/tmp5jkylkur.sh: line 24: ((: n+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmp5jkylkur.sh: line 23: div: command not found

    /tmp/tmp5jkylkur.sh: line 24: ((: n+=: syntax error: operand expected (error token
    is "+=")

    /tmp/tmp5jkylkur.s'
  stdout: ''
  timestamp: 1660058914
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n m=$1 m=$2\n\tlocal p i\n\t(( m=(( m*m )%p ))|0 ))\n\t(( n=(( n*n )%p\
    \ ))|0 ))\n\t(( n=(( n*m )%p ))|0 ))\n\t(( i=(( n*m )%p ))|0 )\n\t(( n=(( n*(\
    \ p - i ) ) ))|0 )\n\techo $n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp4ycq2u1.sh: line 19: syntax error near unexpected token `(''

    /tmp/tmpp4ycq2u1.sh: line 19: `( m=(( m*m )%p ))|''

    /tmp/tmpp4ycq2u1.sh: line 20: syntax error near unexpected token `(''

    /tmp/tmpp4ycq2u1.sh: line 20: `( n=(( n*n )%p ))|''

    /tmp/tmpp4ycq2u1.sh: line 21: syntax error near unexpected token `(''

    /tmp/tmpp4ycq2u1.sh: line 21: `( n=(( n*m )%p ))|''

    /tmp/tmpp4ycq2u1.sh: line 22: syntax error near unexpected token `(''

    /tmp/tmpp4ycq2u1.sh: line 22: `( i=(( n*m )%p ))|''

    /tmp/tmpp4ycq2u1.sh: line 23: syntax error near unexpected token `(''

    /tmp/tmpp4ycq2u1.sh: line 23: `( n=(( n*( p - i ) ) ))|''

    /tmp/tmpp4ycq2u1.sh: line 25: syntax error near unexpected token `}''

    /tmp/tmpp4ycq2u1.sh: line 25: `}''

    '
  stdout: '

    '
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    # use \"$@\" to pass arguments through unaltered\n    # use $1 to hold input\n\
    \    # use $2 to hold output (mod of $1)\n    local i c\n    # integer variable\
    \ c\n    # loop over all arguments\n    for i; do\n        c=$(( $i % $2 ))\n\
    \        if [ $c -ne 0 ]; then\n            echo $c\n            break\n     \
    \   fi\n    done\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local m=$p\n    local r=$(( (n%p) % m ))\n\
    \    if [ $r -lt $p ]\n    then\n        r=$(( r + m ))\n    fi\n    echo \"$r\"\
    \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    if [ \"$#\" -ne 2 ] || [ \"${1#-}\" != \"$1\" ] || [ \"${2#-}\" != \"$2\"\
    \ ]; then\n        echo \"$0: error: number of parameters must be exactly 2\"\n\
    \        return 1\n    fi\n    local i p\n    p=${2:0:1}\n    if [ $p -gt 9 ];\
    \ then\n        i=\"$(python -c 'print \"'\"${i#-}\"'\"*10')\"\n    else\n   \
    \     i=\"$(python -c 'print \"'\"${i#-}\"'\"*9')\"\n    fi\n    local mod=$(pbpaste\
    \ \"$i\" \"$i\")\n    if [ -n \"$mod\" ]; then\n        echo \"$1\"\n    else\n\
    \        echo \"$0\"\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpebqxv9so.sh: line 28: pbpaste: command not found

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif [ -z \"$1\" -o -z \"$2\" ]; then\n\t\treturn 1\n\tfi\n\n\t(( $2 < $1 )) &&\
    \ { printf \"1\\n\"; return 0; }\n\t(( $1 == 1 )) && { printf \"0\\n\"; return\
    \ 1; }\n\n\tIFS=\"$(printf \"\\t\")\" ; echo $(($1 / $2)) ; return\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i\n    local p=\"$2\"\n    local num=\"$1\"\n    local mod\n    for\
    \ (( i = 1; i <= num; i++ )); do\n        mod=$(printf \"%0*d\" $(echo \"$num%$p\"\
    \ | bc) 1)\n        num=$(echo \"$num%$p\" | bc)\n        mod=\"${mod:0:${#mod}-1}\"\
    \n        echo \"$mod\"\n    done\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local a=\"$1\"\n    local b=\"$2\"\n    if [ $a -eq 0 ] ; then return 1;\
    \ fi\n    while [ \"$a\" -eq $b ] ; do\n        a=$(( $((a+1)%$b+1 )))\n    done\n\
    \    echo \"$a\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local num=\"$1\"\n    local mod=\"$2\"\n    local ret\n\n    if test ${#mod}\
    \ -lt ${#num}\n    then\n        return 1\n    fi\n\n    mod=$(echo ${mod} | sed\
    \ 's/\\(.\\)\\(.*\\)$/1\\2/g')\n\n    for (( i=1; i<${#num}; i++ )); do\n    \
    \    if [[ ${num:$i:1} == \"1\" ]]; then\n            ret=$((ret*$mod))\n    \
    \    else\n            ret=$((ret/$mod))\n        fi\n    done\n    echo \"$ret\"\
    \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local _modp=$(\n        echo \"($1 & 0x${2:-0}) | ($1 & -${2:-0}) << (32\
    \ - ${2:-0})\"\n    )\n    # https://stackoverflow.com/a/3557145/477563\n    echo\
    \ -n \"${_modp}\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal base=$1\n\tlocal digit=$2\n\tlocal result\n\tif (( $base == 0 )) && [\
    \ \"$digit\" -eq 0 ]; then\n\t\tresult=$digit\n\telse\n\t\tresult=$(printf \"\
    %02d\" $(( $digit % $base )))\n\tfi\n\techo $result\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    if [ $1 -le 1 ]\n    then\n        return 1\n    elif [ $1 -le $2 ]\n   \
    \ then\n        return 1\n    elif [ $1 -ge $2 ]\n    then\n        if [ $2 -le\
    \ 1 ]\n        then\n            return 1\n        else\n            return $(div\
    \ $2 $(div $1 $2))\n        fi\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local x=$1\n    local y=$2\n    local p=$3\n    if [ $x -le 0 ]; then\n \
    \       return $x\n    fi\n    if [ $y -le 0 ]; then\n        return $y\n    fi\n\
    \    if [ $p -le 0 ]; then\n        echo \"ERROR: p must be greater than 0\"\n\
    \        exit 1\n    fi\n    while [ $x -gt 0 ]; do\n        local t=$x\n    \
    \    x=$(( $x % $p ))\n        y=$(( $y * $p ))\n        t=$(( $t * $p ))\n  \
    \      echo -n $t\n    done\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi1xvzfx4.sh: line 26: [: -le: unary operator expected

    /tmp/tmpi1xvzfx4.sh: line 32: 3 %  : syntax error: operand expected (error token
    is "%  ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local IFS=$1\n    shift\n    local p=$1\n    shift\n    if [ $# -lt 1 ] ;\
    \ then\n        echo \"Invalid arguments\" 1>&2\n        exit 1\n    fi\n    local\
    \ IFS=$1\n    shift\n    local n=$1\n    shift\n    if [ $# -lt 1 ] ; then\n \
    \       echo \"Invalid arguments\" 1>&2\n        exit 1\n    fi\n    if [[ $p\
    \ -lt 1 || $p -gt $n ]] ; then\n        echo \"Invalid arguments\" 1>&2\n    \
    \    exit 1\n    fi\n\n    local res=$((n%p))\n    if [[ $res == 0 ]] ; then\n\
    \        return 0\n    else\n        return $((res+p))\n    fi\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'Invalid arguments

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal I=\"$1\"\n\tlocal J=\"$2\"\n\techo \"$(( (I%J)+(J%I) ))\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif [ \"$2\" == \"0\" ]; then\n\t\techo \"1\"\n\telse\n\t\t(( 10#$1 % $2 ))\n\
    \tfi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local -r num=${1%%$2}\n    local -r p=${1#*$2}\n    if [ \"${num}\" -gt \"\
    0\" ]; then\n        echo \"$(( ${num} - ${p} ))\"\n    else\n        echo \"\
    ${p}\"\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <integer> <integer>\"\n \
    \       exit 1\n    fi\n    local n=$1\n    local p=$2\n    if ! isnumber $n ||\
    \ ! isnumber $p || ! [ $n -ge 0 && $p -ge 0 ] ; then\n        echo \"$0: $n $p\"\
    \n        exit 1\n    fi\n    local res\n    while (( $n > 0 ))\n    do\n    \
    \    res=$(( $n % $p ))\n        n=$(( $n - res ))\n        p=$(( $p / 10 ))\n\
    \    done\n    echo \"$res\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpko_tulpz.sh: line 23: isnumber: command not found

    /tmp/tmpko_tulpz.sh: line 23: 5: command not found

    /tmp/tmpko_tulpz.sh: line 23: isnumber: command not found

    /tmp/tmpko_tulpz.sh: line 23: 101: command not found

    /tmp/tmpko_tulpz.sh: line 30: 1010 % 0 : division by 0 (error token is "0 ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal x\n\tlocal d\n\tlocal p\n\tlocal q\n\tlocal w\n\tx=\"$1\"\n\td=\"$2\"\n\
    \tp=\"$(echo \"$d\" | awk '{print sqrt($1)}')\"\n\tq=\"$(p+1)\"\n\tw=$(p-1)\n\t\
    if [ \"$p\" -eq \"$d\" ]; then\n\t\techo \"0\"\n\telse\n\t\techo \"$(( ( ( ( (\
    \ ( ( ( ( (( $x % $w )) % $q )) % $p )) % $q )) % $p ))\"\n\tfi\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfglli0ej.sh: line 46: unexpected EOF while looking for matching
    `"''

    /tmp/tmpfglli0ej.sh: line 50: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlet x=\"$1\"; shift\n\tlet y=\"$1\"; shift\n\twhile (( y )); do\n\t\tlet \"\
    x=$(( ($x%$y) ))\"\n\t\tlet \"y=$(( $y/2 ))\"\n\tdone\n\techo \"$x\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif [ $# -lt 2 ]; then\n\t\techo \"usage: $0 num den\"\n\t\treturn\n\tfi\n\t\n\
    \t# $1 is an integer\n\tx=$(( $1 % $2 ))\n\ty=$(( $1 % $2 ))\n\n\t# if $x is 0,\
    \ mod $2 becomes 0\n\tif [ $x -eq 0 ]; then\n\t\tx=0\n\tfi\n\n\t# if $y is 0,\
    \ mod $2 becomes 1\n\tif [ $y -eq 0 ]; then\n\t\ty=1\n\tfi\n\n\techo \"$x$y\"\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  if [ $1 -gt $2 ]; then\n    echo $1\n  else\n    echo $(( $1 % $2 ))\n  fi\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i s n\n\tfor ((i=$2;i>0;i--)); do\n\t\ts=$(printf \"%03d\" \"$i\")\n\t\
    \tn=$(printf \"%s\" \"$s\"|sed \"s/../\\\\x&/g\")\n\tdone\n\techo $n\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i p reminder\n\n    if [ $2 -eq 0 ]\n    then\n        echo \"0\"\n\
    \        return\n    fi\n    if [ $1 -eq 0 ]\n    then\n        echo \"0\"\n \
    \       return\n    fi\n    i=$1\n    p=$2\n\n    if [ $p -lt 0 ]\n    then\n\
    \        reminder=$(p<<1)\n    else\n        reminder=$((p<<1))\n    fi\n    while\
    \ [ \"$i\" -ge 0 ]\n    do\n        i=$((i>>1))\n        i=$((i%$p))\n       \
    \ reminder=$((reminder+$p))\n    done\n    echo \"$reminder\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=50 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=16 encoding='utf-8'>
  timestamp: 1660058918
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local d=$1; shift\n    local n=$1; shift\n    local p=$(basename $0)\n  \
    \  echo \"$(echo \"$n*$d\" | bc)\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i j\n  j=$(( ${2%%$1}${2%%$1}${1%%$2} ))\n  i=$(( ${1%%$2}${2%%$2} ))\n\
    \  echo $(( ${i%%$j}${i%%$j} ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  if [ -z \"$2\" ]; then\n    echo \"Usage: `basename $0` [$1 $2]\" 1>&2\n  \
    \  exit 1\n  fi\n  local a b x x y y\n  a=$1\n  b=$2\n  x=0\n  y=0\n  for ((i=1;\
    \ i<=b; i++)) ; do\n    if [ -z \"$i\" ] || [ -z \"$a\" ] ; then\n      echo \"\
    Usage: `basename $0` [$1 $2]\" 1>&2\n      exit 1\n    fi\n    x=$((x * 10 + (i\
    \ - 1)))\n    y=$((y * 10 + (a[i] * x - a[i])))\n  done\n  printf \"%d\\n\" $((y\
    \ + x))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    local z=\"0000000000000000000000000000000000000000000000000000000000000001\"\
    \n    j=$(( $1 % $2 ))\n    i=$(( $1 % $2 ))\n    while [ $i -gt 0 ]; do\n   \
    \     z=$(( $z >> 1 ))\n        i=$(( $i % $2 ))\n    done\n    z=$(( $z >> 1\
    \ ))\n    while [ $j -gt 0 ]; do\n        z=$(( $z << 1 ))\n        j=$(( $j -\
    \ 1 ))\n    done\n    z=$(( $z & $1 ))\n    echo $(( $z & $1 ))\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=39 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=27 encoding='utf-8'>
  timestamp: 1660058918
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\t(( n %= p )) || return 1\n\tlet \"n /= p\"\n\treturn\
    \ $n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i i\n    local j=$(($2))\n    local m=$(($1))\n\n    if [ $m -gt 0\
    \ ]; then\n        (( $m++ ))\n    fi\n    i=$(( ${#1} - ${#2} ))\n\n    if [\
    \ $i -gt 0 ]; then\n        (( $i++ ))\n    fi\n\n    echo $(echo $(( ${m} % $i\
    \ )) + $j)\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvy1_eme_.sh: line 22: ((: 3++ : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmpvy1_eme_.sh: line 30: 3 % 0 : division by 0 (error token is "0 ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1 p=$2 d=$3 s=$4 r=$5\n\ttest $n -eq 0 && return 1\n\ttest $n -eq 1\
    \ && return $s\n\ttest $n -eq 2 && return $(mul $s $s)\n\ttest $n -eq 3 && return\
    \ $(mul $s $(mul $s $s))\n\ttest $n -eq 4 && return $(mul $s $(mul $s $(mul $s\
    \ $s)))\n\ttest $n -eq 5 && return $(mul $s $(mul $s $(mul $s $(mul $s $s))))\n\
    \ttest $n -ge 2 && return $(mul $s $(modp $n $p))\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkl04axv3.sh: line 21: mul: command not found

    /tmp/tmpkl04axv3.sh: line 21: mul: command not found

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i j\n\ti=$1 j=$2\n\t(( j-- ))\n\t(( i %= j ))\n\t[ $i -ne 0 ] && echo\
    \ $i\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    # check input\n    [[ $1 =~ ^[0-9]+$ ]] || { echo \"Bad input: '$1'\" ; return\
    \ 1; }\n    [[ $2 =~ ^[0-9]+$ ]] || { echo \"Bad input: '$2'\" ; return 1; }\n\
    \n    local n=$1\n    local p=$2\n\n    # calculate n^p\n    local modp=$(( (n\
    \ ** p) % p ))\n    # check if modp is equal to n^p\n    [[ \"$modp\" == \"$((\
    \ (n ** p) % p ))\" ]] || return 1\n    # return the result\n    echo \"$modp\"\
    \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal result=0\n\tif (( n > p )); then\n\t\tlet\
    \ result=$n*p % p\n\telif (( n < p )); then\n\t\tlet result=$n%p\n\telse\n\t\t\
    let result=$n\n\tfi\n\techo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpku97kxga.sh: line 21: let: %: syntax error: operand expected (error
    token is "%")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local NUM1=$1\n    local NUM2=$2\n    local MOD=$3\n\n    if [ $NUM1 -le\
    \ 0 -o $NUM2 -le 0 ]; then\n        echo \"[FAIL] modp: bad args to modp\"\n \
    \       return 1\n    fi\n    if [ $MOD == \"0\" ]; then\n        echo \"[FAIL]\
    \ modp: mod is 0\"\n        return 1\n    fi\n    if [ $MOD == \"1\" ]; then\n\
    \        echo \"$NUM1\"\n        return 0\n    fi\n    if [ $MOD == \"2\" ]; then\n\
    \        echo $(( ((NUM1 * NUM2)) | 0 ))\n        return 0\n    fi\n\n    if [\
    \ $NUM2 -le 0 ]; then\n        if [ $NUM1 -le 0 ]; then\n            echo \"[FAIL]\
    \ modp: mod is 0 and NUM1 < 0\"\n            return 1\n        fi\n        if\
    \ [ $MOD != \"1\" ]; then\n            echo \"[FAIL] modp: mod is not 1 and NUM2\
    \ is negative number\"\n            return 1\n        fi\n        NUM2=$(( $NUM1\
    \ / $MOD ))\n        NUM1=$(( $NUM1 % $MOD ))\n        MOD=$(( $MOD / 2 ))\n \
    \       echo \"$NUM1\"\n        return 0\n    fi\n\n    if [ $NUM1 -le $MOD ];\
    \ then\n        if [ $MOD != \"1\" ]; then\n            echo \"[FAIL] modp: mod\
    \ is not 1 and NUM1 > MOD\"\n            return 1\n        fi\n        NUM1=$((\
    \ $NUM1 - ($MOD * ($NUM1 % $MOD) )))\n        MOD=$(( $MOD / 2 ))\n        echo\
    \ \"$NUM1\"\n        return 0\n    fi\n\n    if [ $NUM1 -gt $MOD ]; then\n   \
    \     if [ $MOD != \"2\" ]; then\n            echo \"[FAIL] modp: mod is not 2\
    \ and NUM1 > MOD\"\n            return 1\n        fi\n        NUM1=$(( $NUM1 -\
    \ ($MOD * ($NUM1 % $MOD) )))\n        NUM2=$(( $NUM2 - ($MOD * ($NUM2 % $MOD)\
    \ )))\n        MOD=$(( $MOD / 2 ))\n        echo \"$NUM1\"\n        return 0\n\
    \    fi\n\n    if [ $NUM1 -ge $MOD ]; then\n        NUM1=$(( $NUM1 - ($MOD * ($NUM1\
    \ % $MOD) )))\n        NUM2=$(( $NUM2 - ($MOD * ($NUM2 % $MOD) )))\n        MOD=$((\
    \ $MOD / 2 ))\n        echo \"$NUM1\"\n        return 0\n    fi\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiavnlpsi.sh: line 25: [: ==: unary operator expected

    /tmp/tmpiavnlpsi.sh: line 29: [: ==: unary operator expected

    /tmp/tmpiavnlpsi.sh: line 33: [: ==: unary operator expected

    /tmp/tmpiavnlpsi.sh: line 54: [: 3: unary operator expected

    /tmp/tmpiavnlpsi.sh: line 65: [: 3: unary operator expected

    /tmp/tmpiavnlpsi.sh: line 77: [: 3: unary operator expected

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    if [ -z \"$1\" -o -z \"$2\" ]\n    then\n        return 1\n    fi\n    #\
    \ $x is either \"1\" or \"0\"\n    local x=\"$1\"\n    local y=\"$2\"\n    # $p\
    \ is either \"2\" or \"1\"\n    local p=\"$3\"\n    local r=`echo \"$x * $y\"\
    \ | bc`\n    local m\n    # If the modulus is zero or if we are dividing by 1\
    \ then we have\n    # a division by 0 exception (which would also return \"1\"\
    )\n    local q\n    if [ \"$p\" -eq \"1\" ] || [ \"$x\" -eq \"0\" ]\n    then\n\
    \        q=\"1\"\n    else\n        q=\"$m\"\n    fi\n    local a\n    # Calculate\
    \ the power and return the remainder\n    while [ \"$r\" -gt 0 ]\n    do\n   \
    \     a=`echo \"$r / $p\" | bc`\n        r=`echo \"$r - $a * $y\" | bc`\n    \
    \    m=`echo \"$m + ($p * $a)\" | bc`\n        p=`echo \"$p * a\" | bc`\n    done\n\
    \    if [ \"$r\" -lt 0 ]\n    then\n        m=$m\n        q=0\n    fi\n    echo\
    \ \"$m$q\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwqt28isb.sh: line 31: [: : integer expression expected

    (standard_in) 2: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    /tmp/tmpwqt28isb.sh: line 39: [: : integer expression expected

    /tmp/tmpwqt28isb.sh: line 46: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    # $1 is an integer\n    # $2 is an integer\n    if [ \"$1\" -eq 0 ]\n   \
    \ then\n        return 0\n    fi\n    if [ \"$1\" -gt \"$2\" ]\n    then\n   \
    \     # Mod $1 by $2\n        echo \"$(( $1 % $2 ))\"\n    else\n        # Mod\
    \ $2 by $1 to get remainder $3, and then mod $3 by $2\n        echo \"$(($2 %\
    \ $1))\"\n        echo \"$(( $3 % $2 ))\"\n    fi\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpun3eujlf.sh: line 30: % 5 : syntax error: operand expected (error
    token is "% 5 ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i shift remainder result\n  for ((i=$1; i<=$2; i++)); do\n    shift\n\
    \    remainder=$(( $i % $2 ))\n    result=$(( $remainder + $i ))\n  done\n  echo\
    \ $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphcflaztm.sh: line 20: 3 %  : syntax error: operand expected (error
    token is "%  ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    if [ \"$1\" -eq \"$1\" ]\n    then\n        echo \"1\"\n    else\n      \
    \  (( $1 % $2 ))\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j p d pl ret=0 imax=$1 jmax=$2 kmax=$(( $imax+$jmax )) m=$(( $imax+$jmax+1\
    \ ))\n\n    if [ \"$m\" -lt 2 ]\n    then\n        return 0\n    fi\n\n    # p=$((\
    \ (2**$(( $jmax-$jmin )-$imax)) % $pl ))\n    p=$(( (2**$jmax-$jmin) % $pl ))\n\
    \n    # d=$(echo \"$p*$m\" | bc)\n    d=$(( $p*$m ))\n    \n    # ret=$(($ret+$d))\n\
    \    ret=$(( ret+$d ))\n\n    i=$(($imax - $k))\n    j=$(($jmax + $k))\n    k=$(($kmax\
    \ + $k))\n    p=$(($p - $d))\n\n    if [ $p -eq 0 ]; then\n        j=$(($jmax\
    \ + 1))\n        k=$(($kmax + 1))\n        p=1\n    fi\n\n    if [ $p -eq 0 ];\
    \ then\n        i=$(($imax - $k - 1))\n        k=$(($kmax + 1))\n        p=1\n\
    \    fi\n\n    if [ $p -eq 0 ]; then\n        i=$(($imax - 1))\n        k=$(($kmax\
    \ - 1))\n        p=1\n    fi\n\n    if [ $p -eq 0 ]; then\n        j=$(($jmax\
    \ + 1))\n        k=$(($kmax + 1))\n        p=1\n    fi\n\n    if [ $p -eq 0 ];\
    \ then\n        i=$(($imax - $k))\n        k=$(($kmax - 1))\n        p=1\n   \
    \ fi\n\n    if [ $p -eq 0 ]; then\n        j=$(($jmax + 1))\n        k=$(($kmax\
    \ - 1))\n        p=1\n    fi\n\n    if [ $p -eq 0 ]; then\n        j=$(($jmax\
    \ - 1))\n        i=$(($imax + 1))\n        k=$(($kmax + 1))\n        p=1\n   \
    \ fi\n\n    if [ $p -eq 0 ]; then\n        j=$(($jmax - 1))\n        i=$(($imax\
    \ + 1))\n        k=$(($kmax - 1))\n        p=1\n    fi\n\n    if [ $p -eq 0 ];\
    \ then\n        j=$(($jmax - 1))\n        i=$(($imax - 1))\n        k=$(($kmax\
    \ + 1))\n        p=1\n    fi\n\n    if [ $p -eq 0 ]; then\n        j=$(($jmax\
    \ - 1))\n        i=$(($imax - 1))\n        k=$(($kmax - 1))\n        p=1\n   \
    \ fi\n\n    # i=$(\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcl2j8fq8.sh: line 17: + : syntax error: operand expected (error
    token is "+ ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  if [ \"$1\" -ge \"$2\" ]; then\n    echo \"$1\"\n  else\n    echo \"$(( $1\
    \ % $2 ))\"\n  fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal x y\n\tx=\"$1\"\n\ty=\"$2\"\n\t[[ -z $x ]] && return 1\n\tlocal ret=`expr\
    \ $x \\% $y`\n\tif [[ $ret -eq 0 ]]; then\n\t\treturn $x\n\telse\n\t\treturn $ret\n\
    \tfi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  (( $# < 1 )) && printf \"%s: usage: modp <integer> <integer>\\n\" \"${0}\"\
    \ && return 1\n  local x y z\n  if [[ ${1} == 0 ]]; then\n    echo \"0\"\n  elif\
    \ [[ ${1} == 1 ]]; then\n    echo \"1\"\n  else\n    for (( y=1; y<$1; y++ ));\
    \ do\n      x=$(( (( ${1} * $y )) % ${2} ))\n      if (( $x != 0 ))\n      then\n\
    \        (( z = $x ))\n      else\n        (( z = 0 ))\n        break\n      fi\n\
    \    done\n  fi\n  echo $(( ${z} ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local i\n    local mod\n    # Check if p\
    \ is negative\n    if [[ $p -lt 0 ]]; then\n        echo \"ERROR: negative modulo\
    \ argument\"\n        return 1\n    fi\n    # Check if n and p are equal\n   \
    \ if [[ $n != $p ]]; then\n        echo \"ERROR: non-equal modulo arguments\"\n\
    \        return 1\n    fi\n    # Get modulus for some integers\n    if [[ $n ==\
    \ 0 ]]; then\n        echo \"ERROR: modulo argument 0 is undefined\"\n       \
    \ return 1\n    elif [[ $n == 1 ]]; then\n        echo \"ERROR: modulo argument\
    \ 1 is undefined\"\n        return 1\n    elif [[ $n == 2 ]]; then\n        echo\
    \ \"ERROR: modulo argument 2 is undefined\"\n        return 1\n    fi\n    # Iterate\
    \ through powers of 2\n    for ((i = 0; i <= $(($n - 1)); i++)); do\n        mod=$((2\
    \ * $i) + 1)\n        if [[ $mod == $p ]]; then\n            # $mod is a power\
    \ of 2\n            echo $mod\n            break\n        fi\n    done\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local IFS=; # don't quote IFS to avoid surprises\n    local x p n\n    for\
    \ ((n=0; n < 2; n++))\n    do\n        x=$1\n        p=$2\n        x=$((x%p))\n\
    \    done\n    echo \"$x\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal -i n=$1\n\tlocal -i p=$2\n\n\t(( n %= p ))\n\t[ \"$n\" -eq 0 ] && return\
    \ 1\n\t[ \"$n\" -gt 0 ] && return $(( 2**n % p ))\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n m p\n    [[ $# != 2 ]] && { echo \"Invalid number of arguments\"\
    ; return 1; }\n    [[ $1 == '0' ]] || { echo \"Invalid argument: $1\"; return\
    \ 1; }\n    [[ $1 == '1' ]] || { echo \"Invalid argument: $1\"; return 1; }\n\
    \    # Split $2 into digits and convert to base 10\n    p=\"${2//[0-9]/}\"\n \
    \   for (( n = ${#p}; n != 0; n -= 1 )); do\n        # $(( $n % $p )) is a way\
    \ to compute modulo using Bash arithmetic\n        # $(( $n % $p )) is equivalent\
    \ to $(( n % $p )), but is a bit more efficient\n        m=$(( $n % $p ))\n  \
    \      # $(( $n = $n / $p )) is a way to compute division using Bash arithmetic\n\
    \        # $(( $n = $n / $p )) is equivalent to $(( n = n / $p )), but is a bit\
    \ more efficient\n        n=$(( $n / $p ))\n    done\n    echo \"$m\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal x=\"$1\"\n\tlocal y=\"$2\"\n\tlocal xbin=\"${x//[^01]/}\"\n\tlocal ybin=\"\
    ${y//[^01]/}\"\n\tlocal n\n\tlocal result\n\tif [ \"$xbin\" = \"$ybin\" ]; then\n\
    \t\techo \"$xbin\"\n\telse\n\t\tfor (( n=${#xbin}-1 ; n>0 ; n-- )); do\n\t\t\t\
    local tmp=\"${xbin:0:$n}1${xbin:$n}\"\n\t\t\tif [ \"$tmp\" == \"$xbin\" ]; then\n\
    \t\t\t\tresult=\"$ybin\"\n\t\t\t\tbreak\n\t\t\telif [ \"$tmp\" == \"$ybin\" ];\
    \ then\n\t\t\t\tresult=\"$xbin\"\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\tfi\n\t\
    echo \"$result\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local mod=\"$1\"\n  local modp=\"$2\"\n  local rmodp\n  rmodp=$(($mod % $modp))\n\
    \  (( mod -= $rmodp ))\n  (($rmodp > 0 )) && return $rmodp\n  (( mod < 0 )) &&\
    \ return $modp\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal x y\n\tif [ \"$1\" -gt \"$2\" ]; then\n\t\tx=$(( $1 >> $2 ))\n\t\ty=$((\
    \ $1 & ((1 << $2) - 1) ))\n\telse\n\t\tx=$(( $2 >> $1 ))\n\t\ty=$(( $2 & ((1 <<\
    \ $1) - 1) ))\n\tfi\n\techo $(( (x % $y) + $y ))\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  # $1 is integer\n  # $2 is integer\n  test \"x$1\" != \"x\" || test \"x$2\"\
    \ != \"x\"\n  # $1 is bigger than 0\n  # $2 is bigger than 0\n  # $1 is smaller\
    \ than p\n  # $2 is smaller than p\n  local a=\"$2\"\n  while [[ \"$1\" > \"x\"\
    \ ]]; do\n    # $1 is bigger than p, $2 is smaller than p\n    a=\"$(awk 'BEGIN{print\
    \ $1%$2}')\"\n    # $1 is bigger than p, $2 is not smaller than p\n    if [[ \"\
    $a\" == \"$1\" ]]; then \n      a=\"$(awk 'BEGIN{print $1%$2}')\"\n      # $1\
    \ is bigger than p, $2 is bigger than p, $1 is smaller than p\n      if [[ \"\
    $a\" == \"$1\" ]] || [[ \"$a\" == \"x\" ]]; then\n        a=\"$(awk 'BEGIN{print\
    \ $1%$2}')\"\n      fi\n    fi\n    # $1 is smaller than p, $2 is smaller than\
    \ p, $1 is bigger than p\n    if [[ \"$a\" == \"$1\" ]] || [[ \"$a\" == \"x\"\
    \ ]]; then\n      a=\"$(awk 'BEGIN{print $1%$2}')\"\n    fi\n  done\n  echo \"\
    x$a\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local x=$1; shift;\n    local y=$(( 0x${x*2+$1}))\n    while [ $2 -gt 0 ];\
    \ do let \"x <<= 1\"; let \"x |= $2\"; let \"y <<= 1\"; let \"y |= $3\"; done\n\
    \    echo \"$x\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp34aou062.sh: line 18:  0x${x*2+$1}: bad substitution

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal a=$1\n\tlocal b=$2\n\t\n\t[[ ${a} -gt 0 ]] && [[ ${b} -gt 0 ]] && return\
    \ $(( $(echo \"${a} % ${b}\" | bc -l) / ${b} ))\n\t[[ ${a} -lt 0 ]] && [[ ${b}\
    \ -lt 0 ]] && return $(( $(echo \"${a} % ${b}\" | bc -l) / ${b} ))\n\t\n\t[[ ${a}\
    \ -eq 0 ]] && [[ ${b} -eq 0 ]] && return 0\n\t\n\t[[ ${a} -eq ${b} ]] && return\
    \ 0\n\t\n\t[[ ${a} -lt ${b} ]] && b=$(( ${b} + 1 ))\n\t\n\treturn $(( $(echo \"\
    ${a} % ${b}\" | bc -l) / ${b} ))\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local num=$1\n  local mod=$2\n  shift\n  if [ $# -gt 0 ]; then\n    echo \"\
    $num % $mod - $(( (num % $mod) + 1 ))\"\n  else\n    echo \"$num % $mod\"\n  fi\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n p e\n\t# parse $2\n\tn=$(echo $1 | cut -d'/' -f1)\n\tp=$(echo $1 | cut\
    \ -d'/' -f2)\n\tif [ \"$p\" != \"\" ]; then\n\t\tn=$(printf \"%0*d\" ${p} $n)\n\
    \tfi\n\tprintf \"%0*d\" $p $n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local a=$1; shift; local b=$1; shift\n    local d=$(( $(expr $a \\* $b) %\
    \ $b ))\n    if (( $d < 0 )); then let d+=$b; fi\n    printf \"%03d\" $d\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif [ \"$1\" -eq \"$1\" ]; then return 0; fi\n\tif [ \"$2\" -eq \"$2\" ]; then\
    \ return 0; fi\n\tlocal d=$1\n\tlocal i=$2\n\tshift\n\twhile [ \"$i\" -ge \"0\"\
    \ ]; do\n\t\td=$(echo \"$d % $i\" | bc)\n\t\ti=$(( i - 1 ))\n\tdone\n\techo \"\
    $d\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif [[ $1 == \"\" ]] ; then return 1\n\telif [[ $2 == \"\" ]] ; then return 1\n\
    \telif [[ $1 != $2 ]] ; then return 1\n\telse return $(echo $1 | bc) $(echo $2\
    \ | bc) | bcmod $(echo $2 | bc)\n\tfi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1\n  local p=$2\n  shift\n  local x\n  [[ -z \"$2\" ]] && echo 0 2>/dev/null\
    \ | tr -d '\\n' &>/dev/null\n  x=$(( n % p ))\n  echo $(( n / p )) | bc\n  echo\
    \ $x\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i ret\n\n  ((i = $1 + $2) % $1)\n\n  case \"$1\" in\n    *)\n      ret=$1\n\
    \      ;;\n    0)\n      ret=1\n      ;;\n    *)\n      if (( i <  0 )) ; then\n\
    \        ret=$((-i))\n      else\n        ret=$i\n      fi\n      ;;\n  esac\n\
    \n  echo $(printf '%02d' $ret)\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcbwe5phv.sh: line 19: syntax error near unexpected token `%''

    /tmp/tmpcbwe5phv.sh: line 19: `  ((i = $1 + $2) % $1)''

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \t(( ${#1} > ${#2} )) && echo \"$1 not a multiple of the power of $2\" && return\
    \ 1\n\tlocal c=$1\n\tlocal d=$2\n\t(( ${#d} < ${#c} )) && echo \"$d is longer\
    \ than $c\" && return 1\n\tlocal i\n\tfor i in $(seq 0 $((${#d} - ${#c})))\n\t\
    do\n\t\t(( ${d} > ${c} )) && echo \"$d is not a multiple of $c\" && return 1\n\
    \t\tlet \"d %= ${c}\"\n\t\t(( d == 0 )) && return $i\n\tdone\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=\"$1\"\n  local p=\"$2\"\n  local x\n  x=\"$(( (n / p + 1) * p ))\"\
    \n  echo \"$x\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i p\n\t(( \"${#}\" <= 2 )) && return 1\n\t(( \"${#}\" == 4 )) && return\
    \ $(( $1 % $2 ))\n\t(( \"${#}\" == 5 )) && return $(( $(expr $(gawk '{print $1}'\
    \ <<< \"$1\") % $2 ))\n\t(( \"${#}\" == 6 )) && return $(( $1 % $2 % $3 ))\n\t\
    (( \"${#}\" == 7 )) && return $(( $1 % $2 % $3 % $4 ))\n\t(( \"${#}\" == 8 ))\
    \ && return $(( $1 % $2 % $3 % $4 % $5 ))\n\t(( \"${#}\" == 9 )) && return $((\
    \ $(expr $(gawk '{print $1}' <<< \"$1\") % $2 % $3 % $4 % $5 ))\n\t(( \"${#}\"\
    \ == 10 )) && return $(( $1 % $2 % $3 % $4 % $5 % $6 ))\n\t(( \"${#}\" == 11 ))\
    \ && return $(( $1 % $2 % $3 % $4 % $5 % $6 % $7 ))\n\t(( \"${#}\" == 12 )) &&\
    \ return $(( $1 % $2 % $3 % $4 % $5 % $6 % $7 % $8 ))\n\t(( \"${#}\" == 13 ))\
    \ && return $(( $1 % $2 % $3 % $4 % $5 % $6 % $7 % $8 % $9 ))\n\t(( \"${#}\" ==\
    \ 14 )) && return $(( $1 % $2 % $3 % $4 % $5 % $6 % $7 % $8 % $9 % $10 ))\n\t\
    (( \"${#}\" == 15 )) && return $(( $1 % $2 % $3 % $4 % $5 % $6 % $7 % $8 % $9\
    \ % $10 % $11 ))\n\t(( \"${#}\" == 16 )) && return $(( $1 % $2 % $3 % $4 % $5\
    \ % $6 % $7 % $8 % $9 % $10 % $11 % $12 ))\n\t(( \"${#}\" == 17 )) && return $((\
    \ $1 % $2 % $3 % $4 % $5 % $6 % $7 % $8 % $9 % $10 % $11 % $12 % $13 ))\n\t((\
    \ \"${#}\" == 18 )) \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1yyelxar.sh: line 20: unexpected EOF while looking for matching
    `)''

    /tmp/tmp1yyelxar.sh: line 52: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i n c\n\ti=$1; n=$(echo $2 | sed 's/^0*\\([0-9][0-9]*\\)$/\\1/')\n\tprintf\
    \ -v c '%o' $(( ($i % $n) + $n % $n ))\n\techo $c\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local _x _2\n    _x=$(( (( $1 )) % (( $2 )) ))\n    echo $_x\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1 p=$2\n\t[ \"$n\" -lt 1 ] || [ \"$n\" -gt \"1\" ] || [ \"$p\" -lt\
    \ 1 ] || [ \"$p\" -gt \"10\" ] \\\n\t\t|| { echo \"ERR: invalid arguments. Exiting.\"\
    ; return 1; }\n\t(( $n % $p )) && echo $n || echo $(( $n % $p ))\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local -r n=\"$1\"\n    local -r p=\"$2\"\n    # A fast and correct way is\
    \ to use \"bc\", but we take care of\n    # non-integers here.\n    # As bc's\
    \ behaviour depends on a given locale, we\n    # first make sure both arguments\
    \ are positive by ensuring\n    # that $1 < $2, then we perform the modulo operation.\n\
    \    # Finally, we strip trailing 0s to return a valid integer.\n    # To avoid\
    \ leading 0s, we add them back after we are done.\n    if [[ $(which bc >/dev/null\
    \ 2>&1) ]]; then\n        while [ $n -gt 0 ]; do\n            n=\"$(bc -l <<<\"\
    $n + 1\")\"\n            ((n-- > 0 && n%p == 0))\n        done\n        n=\"$(bc\
    \ -l <<<\"$n + 1\")\"\n        # Remove trailing \"0\"s and return result.\n \
    \       echo \"$n\" | xargs --no-run-if-empty printf \"%d\"\n    else\n      \
    \  echo \"$(( ${n} % ${p} ))\"\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    while [ $n -gt $p ] ; do\n        ((n--))\n\
    \    done\n    echo \"$n\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i=\"${1}\"\n  local j=\"${2}\"\n  local p=\"${3:-0}\"\n  # $p must be\
    \ an integer between 0 and 1073741824\n  if [ $p -eq 0 -o $p -gt  1073741824 ]\
    \ || [ $p -lt 0 -o $p -lt 1073741824 ]; then\n    echo >&2 \"error: modp: invalid\
    \ parameter. Parameter 3 is a number between 0 and 1073741824\"\n    exit 1\n\
    \  fi\n  # $i and $j must be non-negative\n  if [[ $i -le 0 -o $j -le 0 ]]; then\n\
    \    echo >&2 \"error: modp: invalid parameter. Parameter 1 and 2 must be non-negative\"\
    \n    exit 1\n  fi\n  local d=\"$(modx \"$j\" \"$p\")\"\n  echo \"$(( $i - $d\
    \ * $j ))\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_7o6mlnq.sh: line 26: syntax error in conditional expression

    /tmp/tmp_7o6mlnq.sh: line 26: syntax error near `-o''

    /tmp/tmp_7o6mlnq.sh: line 26: `  if [[ $i -le 0 -o $j -le 0 ]]; then''

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal _i=$1\n\tlocal _e=$2\n\tlocal _m=$(( ( $_e $(( ${_i:-0} % $2 )) ) % $2\
    \ ))\n\tlocal _s=$(( $_m - $(( ${_m:-0} % $1 )) ))\n\tlocal _m=$(( ${_i:-0} +\
    \ $_s ))\n\tif [ $_m -lt $1 ]; then\n\t\t_m=$1\n\tfi\n\techo $_m\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5txd2gte.sh: line 19: ( 5 3 ) % 5 : missing `)'' (error token is
    "3 ) % 5 ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local x=\"$1\"\n    local y=\"$2\"\n    local n\n    if test $x -gt $y; then\n\
    \        n=$(( $x - $y ))\n    else\n        n=$(( $y - $x ))\n    fi\n    echo\
    \ $n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif [ $# -lt 2 ]; then\n\t\techo \"$(modp \"0\" \"$1\") is not a valid argument\"\
    \n\t\texit 1\n\tfi\n\n\tlocal i\n\ti=\"$1\"\n\tshift\n\tlocal j\n\tj=\"$1\"\n\t\
    shift\n\tlocal k\n\tk=\"$1\"\n\tshift\n\n\techo \"$(echo \"$i\" | awk '{print\
    \ ($1 % $j) * $k}'\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnj5i3ad4.sh: line 47: unexpected EOF while looking for matching
    `"''

    /tmp/tmpnj5i3ad4.sh: line 51: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local I=$1\n    local M=$2\n    local Mi=$((M<<1))\n    local C=$((I^Mi))\n\
    \    local K=$((I&M))\n    if [ \"${I}\" -lt \"${M}\" ]; then\n        return\
    \ $((I+C))\n    fi\n    if [ \"${I}\" -ge \"${M}\" ]; then\n        return $((I+K))\n\
    \    fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n\n    IFS=.\n\
    \    # Parse arguments\n    if [ $# -lt 2 ]; then\n        return 1\n    fi\n\
    \    a=\"$1\"\n    b=\"$2\"\n    if [ -z \"$a\" ] || [ -z \"$b\" ]; then\n   \
    \     return 1\n    fi\n    # Calculate a^b\n    a=\"$(expr \"$a\" : '^')\"\n\
    \    b=\"$(expr \"$b\" : '^')\"\n    # Convert to base 4\n    a=\"$((a))\"\n \
    \   b=\"$((b))\"\n    # Calculate a^b mod p\n    if [ \"$b\" -gt 2 ]; then\n \
    \       b=\"$(modp \"$b\" \"$a\")\"\n    fi\n    # Calculate a^(b-1) mod p\n \
    \   if [ \"$b\" -lt 2 ]; then\n        b=\"$(modp \"$b\" \"$a\")\"\n    fi\n \
    \   # Calculate a^(b-2) mod p\n    if [ \"$b\" -eq 2 ]; then\n        a=\"$(modp\
    \ \"$a\" \"$a\")\"\n        b=\"$(modp \"$b\" \"$a\")\"\n    fi\n    # Calculate\
    \ a^(b-1) mod p\n    if [ \"$b\" -lt 2 ]; then\n        b=\"$(modp \"$b\" \"$a\"\
    )\"\n    fi\n    # Calculate a^(b-2) mod p\n    if [ \"$b\" -eq 2 ]; then\n  \
    \      b=\"$(modp \"$b\" \"$a\")\"\n    fi\n    # Calculate a^(b-1) mod p\n  \
    \  if [ \"$b\" -lt 2 ]; then\n        b=\"$(modp \"$b\" \"$a\")\"\n    fi\n  \
    \  # Calculate a^(b-2) mod p\n    if [ \"$b\" -eq 2 ]; then\n        b=\"$(modp\
    \ \"$b\" \"$a\")\"\n    fi\n    # Calculate a^(b-3) mod p\n    if [ \"$b\" -ge\
    \ 3 ]; then\n        b=\"$(modp \"$b\" \"$a\")\"\n    fi\n    # Calculate a^(b-4)\
    \ mod p\n    if [ \"$b\" -le 4 ]; then\n        b=\"$(modp \"$b\" \"$a\")\"\n\
    \    fi\n    # Calculate a^(b-5) mod p\n    if [ \"$b\" -ge 5 ]; then\n      \
    \  b=\"$(modp \"$b\" \"$a\")\"\n    fi\n    # Calculate a^(b-6) mod p\n    if\
    \ [ \"$b\" -le 6 ]; then\n        b=\"$(modp \"$b\" \"$a\")\"\n\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp57g6muku.sh: line 90: syntax error near unexpected token `}''

    /tmp/tmp57g6muku.sh: line 90: `}''

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=\"$1\"\n\tlocal p=\"$2\"\n\tlocal q=\"$(( ( (( ( ( n / p ) ) ) * ( p\
    \ ) ) %  p ) ))\"\n\techo $q\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i n p\n  n=$1\n  p=$2\n  (( i=n*p ))\n  i=$(( i % p ))\n  echo $i\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i x y p d m\n    [[ \"$1\" =~ ^[0-9]+$ ]] || return 1\n    [[ \"$2\"\
    \ =~ ^[0-9]+$ ]] || return 1\n    # Make sure that both arguments are integers.\n\
    \    if [[ ! \"$2\" =~ ^[0-9]+$ ]]; then\n        echo \"$0: $1: $2: integer\"\
    \ >&2\n        return 1\n    fi\n    # Ensure that both arguments are positive.\n\
    \    if [[ ! \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"$0: $1: $2: positive\"\
    \ >&2\n        return 1\n    fi\n    # $3 is the modulus.\n    local mod=$3\n\
    \    # $4 is the exponent.\n    local exp=$4\n    if [[ ! \"$exp\" =~ ^[0-9]+$\
    \ ]]; then\n        echo \"$0: $1: $2: positive\" >&2\n        return 1\n    fi\n\
    \    # $5 is the sign.\n    local sign=\"$5\"\n    if [[ \"$sign\" != \"-\" ]];\
    \ then\n        mod=$(echo \"$mod\" | sed 's/-//')\n    fi\n    # $6 is the number\
    \ of decimals.\n    local dec=\"$6\"\n    if [[ ! \"$dec\" =~ ^[0-9]+$ ]]; then\n\
    \        echo \"$0: $1: $2: positive\" >&2\n        return 1\n    fi\n    # $7\
    \ is the number of bits.\n    local bits=\"$7\"\n    if [[ ! \"$bits\" =~ ^[0-9]+$\
    \ ]]; then\n        echo \"$0: $1: $2: positive\" >&2\n        return 1\n    fi\n\
    \    # Ensure that $mod is not zero.\n    if [[ ! \"$mod\" =~ ^[0-9]+$ ]]; then\n\
    \        echo \"$0: $1: $2: non-zero modulus\" >&2\n        return 1\n    fi\n\
    \    # Ensure that $mod is even.\n    if [[ $(echo \"$mod % 2\" | bc -l) -eq 1\
    \ ]]; then\n        echo \"$0: $1: $2: not odd\" >&2\n        return 1\n    fi\n\
    \    # Ensure that $exp isn't zero.\n    if [[ ! \"$exp\" =~ ^[0-9]+$ ]]; then\n\
    \        echo \"$0: $1: $2: non-zero exponent\" >&2\n        return 1\n    fi\n\
    \    # Ensure that $mod is divisible by $exp\n    d=$(echo \"$exp % $mod\" | bc\
    \ -l)\n    if [[ \"$d\" = \"1\" ]]; then\n        echo \"$0: $1: $2: not divisible\
    \ by $mod\" >&2\n        return 1\n    fi\n    # $dec is just the number of decimals\
    \ we need\n    # $x is the number to start\n    # $y is the number to stop\n\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpnrn59512.sh: 3: 5: positive

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i p c mod c c2 n\n    i=$1; p=$2; c=$((p-1)); n=$(echo $((p*c))); mod=1;\n\
    \    while (( $i < n )); do mod=$(expr $mod + 1); i=$(expr $i + 1); done; \n \
    \   echo \"$mod\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local k=$2\n    if [[ \"$n\" =~ ^[0-9]+$ ]] ; then\n    \
    \    echo \"$(( ($n % $k) + $k ))\"\n    elif [[ \"$n\" =~ ^[0-9]+\\.[0-9]+$ ]]\
    \ ; then\n        # Floats don't have the mod operator in bash\n        echo \"\
    $(( $n % $k ))\"\n    else\n        echo \"$n\"\n    fi\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n m p\n  n=${1%%([0-9])}; shift 1\n  m=${1%%([0-9])}; shift 1\n  p=${1%%([0-9])};\
    \ shift 1\n  if (( n == 0 )); then\n    echo 0\n  else\n    (( n = n % p ))\n\
    \    if (( m == 0 ));  then\n      echo $n\n    else\n      (( m = m % p ))\n\
    \      echo $(( n + ( m / p )))\n    fi\n  fi\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_0fdpqn8.sh: line 24: ((: n = n % p : division by 0 (error token
    is "p ")

    /tmp/tmp_0fdpqn8.sh: line 28: ((: m = m % p : division by 0 (error token is "p
    ")

    /tmp/tmp_0fdpqn8.sh: line 29: n + ( m / p ): division by 0 (error token is "p
    )")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    if [ $1 -gt $2 ]; then \\\n        echo \"$(($1-$2))\"; \\\n    else \\\n\
    \        echo \"$(($2-$1))\"; \\\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif [ \"$#\" -lt 2 ]; then\n\t\techo \"modp: wrong number of arguments\" 1>&2\n\
    \t\texit 127\n\tfi\n\tlocal n=\"$1\"\n\tlocal p=\"$2\"\n\t[ \"$n\" -lt \"1\" ]\
    \ || \\\n\t\t[ \"$n\" -gt \"32768\" || \\\n\t\t[ \"$p\" -lt \"1\" ] || \\\n\t\t\
    [ \"$p\" -gt \"32768\" ] || \\\n\t\t[ \"$p\" -ne \"0\" ]\n\t&& return 1\n\t((\
    \ n %= p ))\n\tif [ \"$p\" -ne \"0\" ]; then\n\t\t(( n += p + 1 ))\n\tfi\n\techo\
    \ $n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: "/tmp/tmp7eqmoy6n.sh: line 28: syntax error near unexpected token `&&'\n\
    /tmp/tmp7eqmoy6n.sh: line 28: `\t&& return 1'\n"
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal NUM1=$1\n\tlocal NUM2=$2\n\n\tif [ -z \"$NUM1\" ] || [ -z \"$NUM2\" ]\n\
    \tthen\n\t\techo \"ERROR: missing argument 1\" >&2\n\t\texit 1\n\tfi\n\n\tlocal\
    \ N1=$(echo \"$NUM1\" | cut -d '-' -f 1)\n\tlocal N2=$(echo \"$NUM2\" | cut -d\
    \ '-' -f 1)\n\tif [ \"$N1\" -lt \"$N2\" ]\n\tthen\n\t\techo \"ERROR: argument\
    \ 1 is less than argument 2\" >&2\n\t\texit 1\n\tfi\n\tlocal NEG1=$(echo \"$NUM1\"\
    \ | cut -d '-' -f 2 | cut -d '-' -f 1)\n\tlocal NEG2=$(echo \"$NUM2\" | cut -d\
    \ '-' -f 2 | cut -d '-' -f 1)\n\tlocal NMOD1=$(echo \"$NUM1\" | cut -d '-' -f\
    \ 2 | cut -d '-' -f 2)\n\tlocal NMOD2=$(echo \"$NUM2\" | cut -d '-' -f 2 | cut\
    \ -d '-' -f 2)\n\n\tlocal MOD1=$(( $NMOD1 / $N1 ))\n\tlocal MOD2=$(( $NMOD2 /\
    \ $N2 ))\n\techo \"$(( $MOD1 * $NEG2 % $MOD2 ))\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'ERROR: argument 1 is less than argument 2

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local x=$1\n    local y=$2\n    local p=$3\n    if [[ $x -ge 0 ]]; then\n\
    \        if [[ $p -le 0 ]]; then\n            return 0\n        fi\n        local\
    \ b=$((y%$p))\n        if [[ $b -ne 0 ]]; then\n            return $b\n      \
    \  fi\n    elif [[ $x -le 0 ]]; then\n        return 0\n    fi\n    return $(modp\
    \ $((-$x)) $y $p)\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i n p r s\n\ti=$1\n\tn=$2\n\tp=$(( n <= 0 )) || return $i\n\ts=$(( n %\
    \ p ))\n\tr=$(( n / p ))\n\techo \"$s\"\n\techo \"$r\" #return $i\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcnc9_m1i.sh: line 21: n % p : division by 0 (error token is "p
    ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local int_1=$1\n    local int_2=$2\n    local modulo=$3\n    local result=\"\
    \"\n    if (( int_1 )); then\n        local i=$(( (int_1/modulo)%1 ))\n      \
    \  result=$(( $i * modulo ))\n        if (( int_1 < modulo )); then\n        \
    \    result=$(( result + 1 ))\n        fi\n    fi\n    if (( int_2 )); then\n\
    \        local i=$(( (int_2/modulo)%1 ))\n        result=$(( $i * modulo ))\n\
    \        if (( int_2 < modulo )); then\n            result=$(( result + 1 ))\n\
    \        fi\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoto7aeg9.sh: line 22: (int_1/modulo)%1 : division by 0 (error token
    is "modulo)%1 ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal x y m\n\tx=\"${1#?}\"\n\ty=\"${2#?}\"\n\tm=\"$(( (x&y) | x >> y ))\"\n\
    \techo \"$m\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i r m p n\n\t(( i = $1 ))\n\t(( n = $2 ))\n\t(( m = n ))\n\t(( r = m ))\n\
    \twhile (( i )); do\n\t\t(( r /= m ))\n\t\t(( m %= p ))\n\tdone\n\techo $r\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=66 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=41 encoding='utf-8'>
  timestamp: 1660058918
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local _modp=\"$(dirname \"$(readlink -e \"$BASH_SOURCE\")\")\"\n  source \"\
    $_modp/modp.sh\"\n  modp \"$1\" \"$2\"\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=65 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=60 encoding='utf-8'>
  timestamp: 1660058918
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local i n\n  i=$1\n  ((n=$2))\n  if ((n <= 0)); then\n    echo $1\n  else\n\
    \    echo $(expr $(expr $i % $n) % $n)\n  fi\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i j\n    i=0\n    j=0\n    if [ $# -gt 2 ]; then # too many arguments\n\
    \        echo \"Error: Too many arguments\"\n        return 1\n    fi\n    while\
    \ [ $i -le $1 ]; do\n        if [ $1 -lt $2 ]; then # small enough to return\n\
    \            ((j=$i))\n        fi\n        ((i++))\n    done\n    # now $i is\
    \ the result and $j is the number of digits to return\n    if [ $i -gt $2 ]; then\
    \ # big enough to return\n        ((j=$2))\n    fi\n    ((j=$j-1))\n    echo \"\
    $((2**$j))\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n m=$2 p=$1\n\tif [[ n -lt 0 || m -lt 0 || n -gt m ]]; then\n\t\techo\
    \ \"Invalid arguments. Arguments must be integers.\"\n\t\texit 1\n\tfi\n\tlocal\
    \ -a x\n\tx=( $(printf \"%d\" $n) )\n\tx=( $(printf \"%d\" $m) )\n\tlocal -a y\n\
    \ty=( $(printf \"%d\" $p) )\n\tlocal -a z\n\tz=$(( ${x[2]} * ${y[0]} + ${y[1]}\
    \ ))\n\tz=$(( ${z} % ${y[2]} ))\n\techo \"${x[0]}\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3s97imqp.sh: line 28: * 3 +  : syntax error: operand expected (error
    token is "* 3 +  ")

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif [[ -z \"$2\" ]]; then\n\t\techo \"$1\"\n\t\treturn\n\tfi\n\t# http://stackoverflow.com/questions/13321753/python-how-to-print-a-binary-number-in-binary-base\n\
    \t# http://stackoverflow.com/questions/8102744/binary-to-decimal-in-a-shell-script\n\
    \t# http://stackoverflow.com/questions/351409/how-to-do-a-mod-in-a-shell-script\n\
    \tlocal num=\"$1\"\n\tlocal rem=\"$2\"\n\tlocal res=\"$(( ((${num}+${rem})|0)%${rem}\
    \ ))\"\n\techo \"$res\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local x\n  x=\"$1\"\n  shift\n  local n\n  n=\"$1\"\n  shift\n  local p\n \
    \ p=\"$1\"\n  shift\n  local res\n  printf -v res '%04x' $(echo \"$n | bc -l |\
    \ awk '{print ($1 % $2) % $2}')\n  # printf -v res '%04x' $(echo \"$n | bc -l\
    \ | awk '{print ($1 % $2) % $2}')\n  # printf -v res '%04x' $(echo \"$n | bc -l\
    \ | awk '{print ($1 % $2) % $2}')\n  echo \"$x$res$p\"\n}\n\ncandidate() {\n \
    \   modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpucz47tcw.sh: line 45: unexpected EOF while looking for matching
    `"''

    /tmp/tmpucz47tcw.sh: line 49: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal a=$(echo \"$1\" | bc)\n\tlocal b=$(echo \"$2\" | bc)\n\techo \"$(( ${a}+${b}\
    \ )%$3)\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppz1g2w_w.sh: command substitution: line 19: syntax error near unexpected
    token `%$3''

    /tmp/tmppz1g2w_w.sh: command substitution: line 19: `( ${a}+${b} )%$3''

    '
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local a b n p m d e g\n    a=$1\n    b=$2\n    n=$((a ^ b))\n    p=$((a -\
    \ b))\n    m=$((a - p))\n    d=$((b - m))\n    e=$((n - d))\n    g=$((a + e +\
    \ p ))\n    return $g\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\ttest $n -gt 0 &> /dev/null\n\ttest $p -gt 0 &> /dev/null\n\
    \techo \"$(( ((n mod p) + 1) ^ 1 ))\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwyiode3f.sh: line 21: ((n mod p) + 1) ^ 1 : missing `)'' (error
    token is "mod p) + 1) ^ 1 ")

    '
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \t# Check inputs\n\t[ $# -lt 2 ] && echo \"Usage: $0 n1 n2\" && return 1\n\t[\
    \ ! -d \"$1\" ] && mkdir -p \"$1\"\n\t[ ! -d \"$2\" ] && mkdir -p \"$2\"\n\n\t\
    # Get input values\n\tm=$1\n\tn=$2\n\n\t# Return 2^n modulo p (be aware of numerics)\n\
    \techo \"$(( 2**$n % ( 2**$m )))\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "mkdir: cannot create directory \u20183\u2019: File exists\nmkdir: cannot\
    \ create directory \u20185\u2019: File exists\n"
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    (( val=\"$1\" ))\n    (( val2=\"$2\" ))\n\n    if [ -z \"$val\" ]; then\n\
    \        val=\"1\"\n    fi\n\n    if [ -z \"$val2\" ]; then\n        val2=\"1\"\
    \n    fi\n\n    echo \"$((val%val2))\"\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n p r\n    p=\"${1:0:1}\"\n    n=\"${1:1}\"\n    while (( ${#n} > 0\
    \ )); do\n        r=\"${n%p}\"\n        n=\"${n#${r}}\"\n        p=\"$(printf\
    \ \"%02d\" \"${p}\" \"${r}\")\"\n    done\n    printf \"%d\" \"${n}\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n x p z\n    local -n n=${1:-1}\n    local -n x=${2:-1}\n    local\
    \ -n p=${3:-1}\n    if [ \"${p:-1}\" -gt \"${n:-1}\" ]; then\n        echo 1>&2\
    \ \"modp: ${p:-1} > ${n:-1}\"\n        return 1\n    fi\n    p=$(( p % x ))\n\
    \    z=$(( n % p ))\n    echo \"${z}\"\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyldrcyhl.sh: line 18: local: `3'': invalid variable name for name
    reference

    /tmp/tmpyldrcyhl.sh: line 19: local: `5'': invalid variable name for name reference

    /tmp/tmpyldrcyhl.sh: line 20: local: `1'': invalid variable name for name reference

    /tmp/tmpyldrcyhl.sh: line 25: p % x : division by 0 (error token is "x ")

    '
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal -i i=\"$1\"\n\tlocal -i j=\"$2\"\n\n\t(( i % j == 0 )) && return \"$1\"\
    \n\t(( j % i == 0 )) && return \"$2\"\n\t(( (i - j) % j == 0 )) && return \"$1\"\
    \n\t(( (j - i) % i == 0 )) && return \"$2\"\n\t(( (i - j) % i == 0 )) && return\
    \ \"$1\"\n\t(( (j - i) % j == 0 )) && return \"$2\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058913
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    if [[ $1 == \"\" ]]; then\n        return 1\n    fi\n    if [[ $2 == \"\"\
    \ ]]; then\n        return 1\n    fi\n    local mod=\"$1\"\n    local base=\"\
    $2\"\n    local mult=$(echo $mod | grep -o '[1-9]')\n    local mod1=\"0\"\n  \
    \  local mod2=\"0\"\n    if [[ $mult -ne 1 ]]; then\n        return 1\n    fi\n\
    \    local int=$mod\n    if [[ $int -eq 0 ]]; then\n        return 0\n    fi\n\
    \    local i=2\n    while [[ $int -gt 0 ]]; do\n        mod1=\"$mod1\"$(echo $int\
    \ | cut -c$i)\n        mod2=\"$mod2\"$(echo $int | cut -c$((i+1)))\n        int=$((int)-1)\n\
    \        i=$((i+2))\n    done\n    echo \"$mod1\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local p=$1 p=$2; shift;\n  if (( ${#p} < $1 )); then echo \"$0: $1 not power\
    \ of $2\"; return 1; fi\n  local q\n  p=$(printf %o $p);\n  while (( ${#p} > $1\
    \ )); do\n    ((q+=p))\n    p=\"$(printf %o $q)\";\n  done\n  echo $q;\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058914
- exit_code: -1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local e=\"$(( $n ))\"\n\n    while\
    \ [[ $n -ge 1 ]]; do\n        # \"echo $(( ${n} % $p ))\" does only work with\
    \ integers, see\n        # http://unix.stackexchange.com/questions/56880/how-can-i-compare-integers-without-a-leading-zero\n\
    \        n=\"$(( $n % $p ))\"\n        e=\"$(( $e + 1 ))\"\n    done\n    echo\
    \ \"$n\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=48 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=46 encoding='utf-8'>
  timestamp: 1660058919
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"; shift\n    local p=\"$1\"; shift\n    local result=$(( n\
    \ % p ))\n    if [ $result -eq 0 ]; then # $n == 0 -> p == 0\n        result=$p\n\
    \    fi\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal base=$1\n\tlocal mod=$2\n\tlocal exp=$3\n\tlocal i\n\tlocal d\n\tlocal\
    \ modbase\n\tlocal modmod\n\tlocal modexp\n\tlocal rem\n\tlocal remmod\n\n\tif\
    \ [ -z \"$exp\" ] ; then\n\t\tmodbase=10\n\t\tmodmod=10\n\t\tmodexp=0\n\telse\n\
    \t\tmodbase=10\n\t\tmodmod=$mod\n\t\tmodexp=$((modexp + exp))\n\tfi\n\n\t# modbase\
    \ may be bigger than mod\n\ti=\"$modbase\"\n\td=\"$base\"\n\twhile [ $i -le $modexp\
    \ ]\n\tdo\n\t\trem=$(( $i % $d ))\n\t\tmodmod=$(( $rem + $modmod))\n\t\ti=$((\
    \ $i / $d ))\n\tdone\n\n\tremmod=$(( $modmod + $modexp ))\n\trem=$(( $rem % $remmod\
    \ ))\n\n\tif [ $rem -eq 0 ]\n\tthen\n\t\techo \"$modmod\"\n\telse\n\t\techo \"\
    $mod\"\n\tfi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxh_1swrv.sh: line 49: % 10 : syntax error: operand expected (error
    token is "% 10 ")

    '
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local mod=$1 p=$2\n    # $3 is a string\n    local str=$(printf \"%04d%04d%0*d\"\
    \ $mod $p \"${#3}\")\n    local res=\"${str%%$3}\"\n    echo $(( ${res} % $p ))\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal val=\"$1\"\n\tlocal mod=\"$2\"\n\tshift\n\tshift\n\tval=\"${val#0}${val%${mod}*}\"\
    \n\tif [ -z \"$val\" ] ; then\n\t\tval=1\n\tfi\n\techo \"$val${mod%/*}\"\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local digit=$1\n  local factor=$2\n  local p=$3\n  (( p-- )) || return ${digit}\n\
    \  local rem=$(( factor % p ))\n  (( factor /= p )) || return $rem\n  (( factor\
    \ -= rem )) || return $digit\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal num=$1\n\tlocal p=$2\n\tlocal num=$(expr $num % $p)\n\techo $num\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058914
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local int_1 int_2 shift\n  int_1=\"$1\"\n  int_2=\"$2\"\n  shift=\"$(( ${#int_1}\
    \ - 1 ))\"\n  echo \"$(echo \"$int_1\"|bc<<<$(echo \"$int_2\" | bc<<<$(echo \"\
    ${!int_2}$int_1\"))${!int_2#$int_1}\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2x50204n.sh: line 36: unexpected EOF while looking for matching
    `"''

    /tmp/tmp2x50204n.sh: line 40: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal i tmp $1\n\ti=\"$1\"\n\tshift\n\ttmp=\"$1\"\n\twhile (( \"$#\" > 0 ));\
    \ do\n\t\ttmp=$(( $(( 10#$tmp )) % $2 ))\n\t\ti=$(( 10#$i ))\n\t\tshift\n\tdone\n\
    \techo \"$i\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0po7k20s.sh: line 17: local: `3'': not a valid identifier

    /tmp/tmp0po7k20s.sh: line 22: 5 %  : syntax error: operand expected (error token
    is "%  ")

    '
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local num1 num2\n    read num1 num2 <<< \"$2 $1\"\n    if [ $num1 -eq $num2\
    \ ]; then\n        echo \"$num1\"\n    else\n        num1=$(( $num1 % $num2 ))\n\
    \        if [ $num1 -eq 0 ]; then\n            num1=$num2\n        fi\n      \
    \  echo $num1\n    fi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tif [ \"$1\" -gt \"$2\" ]\n\tthen\n\t\techo \"$1\"\n\telse\n\t\techo \"$2\"\n\
    \tfi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n p=$1\n    n=$((p * 2))\n    while [ $n -le $2 ]; do\n        n=$((n*2))\n\
    \    done\n    echo $n\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tif (( n < p )); then\n\t\techo \"0\"\n\telif ((\
    \ n == p )); then\n\t\techo \"1\"\n\telif (( n < p )); then\n\t\techo \"$(modp\
    \ $(( n - p )) $p)\"\n\telif (( n == p )); then\n\t\techo \"$n\"\n\telif (( n\
    \ > p )); then\n\t\techo \"$(modp $n $(( p - n )))\"\n\telse\n\t\techo \"$n\"\n\
    \tfi\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058914
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local i n\n    i=$1; shift\n    n=$1; shift\n    while (( n > 0 ))\n    do\n\
    \        i=$(( $i % $n ))\n        n=$(( $n >> 1 ))\n    done\n    echo $i\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660058914
