name: HumanEval_157_right_angle_triangle
language: sh
prompt: "#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return\
  \ true if the three\n# sides form a right-angled triangle, false otherwise.\n# A\
  \ right-angled triangle is a triangle in which one angle is right angle or \n# 90\
  \ degree.\n# Example:\n# >>> $(right_angle_triangle \"3\" \"4\" \"5\")\n# \"true\"\
  \n# >>> $(right_angle_triangle \"1\" \"2\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n\
  # $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n"
tests: "}\n\ncandidate() {\n    right_angle_triangle \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"3\" \"4\" \"5\") = \"true\" ]]\n    [[ $(candidate \"\
  1\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"10\" \"6\" \"8\") = \"true\"\
  \ ]]\n    [[ $(candidate \"2\" \"2\" \"2\") = \"false\" ]]\n    [[ $(candidate \"\
  7\" \"24\" \"25\") = \"true\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"false\"\
  \ ]]\n    [[ $(candidate \"5\" \"12\" \"13\") = \"true\" ]]\n    [[ $(candidate\
  \ \"15\" \"8\" \"17\") = \"true\" ]]\n    [[ $(candidate \"48\" \"55\" \"73\") =\
  \ \"true\" ]]\n    [[ $(candidate \"1\" \"1\" \"1\") = \"false\" ]]\n    [[ $(candidate\
  \ \"2\" \"2\" \"10\") = \"false\" ]]\n}\n\nrun_test"
completions: ["    local a b\n    local l1 l2\n    local t\n    a=$1\n    b=$2\n \
    \   l1=$(( $(awk $1 '{print $1}') ))\n    l2=$(( $(awk $2 '{print $1}') ))\n \
    \   t=$(awk \"$a\" + \"$b\" +\n           \"-$(( $(awk $1 '{print $1}') - $(bwk\
    \ $2 '{print $1}') ))\" +\n           \"$(awk $1 '{print $1}') - $(awk $2 '{print\
    \ $1}')\"\n           )\n    if [ $t -gt $(( 2 * ( $a + b )) ] ||\n       [ $t\
    \ -lt $(( 2 * ( $a - b )) ]\n    then\n        return true\n    else\n       \
    \ return false\n    fi", "    if [[ \"$1\" == \"$2\" || \"$1\" == \"$3\" || \"\
    $2\" == \"$3\" ]] ; then\n        return 0\n    else\n        return 1\n    fi",
  "\tlocal l1 l2 l3\n\tl1=${1:-0}\n\tl2=${2:-0}\n\tl3=${3:-0}\n\n\tif ((l1 > 0) &&\
    \ (l2 > 0)); then\n\t\tif ((l3 > 0) && (l1 < l2)); then\n\t\t\techo \"true\"\n\
    \t\telse\n\t\t\techo \"false\"\n\t\tfi\n\telse\n\t\techo \"false\"\n\tfi", " \
    \   local a b c\n    local len\n\n    a=$1\n    b=$2\n    c=$3\n\n    len=$((\
    \ b - a ))\n    if [ \"$len\" -gt \"$c\" ]; then\n        return 1\n    fi\n\n\
    \    if [ \"$len\" -lt \"$a\" ]; then\n        return 0\n    fi\n\n    if [ \"\
    $len\" -lt \"$b\" ]; then\n        return 0\n    fi\n\n    if [ \"$len\" -lt \"\
    $c\" ]; then\n        return 0\n    fi\n\n    if [ \"$a\" -eq \"$b\" -a \"$b\"\
    \ -eq \"$c\" ]; then\n        return 0\n    fi\n\n    return 1", '    echo $((
    (( $(echo "$2 > $1" | bc) >0 ) && ( $(echo "$3 > $2" | bc) >0 ) ) && echo "true"
    || echo "false"))', "\tif [ $1 -gt $3 ]; then\n\t\treturn 0\n\telse\n\t\tif [\
    \ $1 -lt $2 ]; then\n\t\t\treturn 1\n\t\telse\n\t\t\tif [ $1 -lt $3 ]; then\n\t\
    \t\t\treturn 1\n\t\t\telse\n\t\t\t\treturn 0\n\t\t\tfi\n\t\tfi\n\tfi", "\t[ \"\
    $1\" -eq \"$1\" ] || [ \"$1\" -eq \"$2\" ] || [ \"$1\" -eq \"$3\" ] || [ \"$1\"\
    \ -gt \"$2\" ] || [ \"$1\" -gt \"$3\" ] || [ \"$2\" -eq \"$3\" ]", "\t[ \"$1\"\
    \ = \"${3}\" ] && echo \"true\" || echo \"false\"", "    local side1=$1\n    local\
    \ side2=$2\n    local side3=$3\n    local result=$(test $side1 == $side3 && $side2\
    \ == $side3 && $side1 == $side2 && $side2 != $side3 && $side2 != $side1 && $side1\
    \ != $side2 && $side1 != $side3)\n    echo $result", "  length=$1\n  len2=$(echo\
    \ \"$length*$length\" | bc)\n  len3=$(echo \"$len2*$len2\" | bc)\n  echo \"$len3<0\"\
    \ | bc -l", "\tlet length1=${1}\n\tlet length2=${2}\n\tlet length3=${3}\n\tif\
    \ [[ ${length1} -gt 0 && ${length2} -gt 0 && ${length3} -gt 0 ]]; then\n\t\tlet\
    \ result1=$(math \"$length1\" \"$length2\" \"$length3\")\n\t\tlet result2=$(math\
    \ \"$length1\" \"$length2\" \"$length3\")\n\t\tlet result3=$(math \"$length1\"\
    \ \"$length2\" \"$length3\")\n\n\t\tif [ \"$result1\" -gt \"$result2\" ] && [\
    \ \"$result1\" -gt \"$result3\" ];\n\t\tthen \n\t\t\treturn 1\n\t\tfi\n\t\tif\
    \ [ \"$result2\" -gt \"$result3\" ] && [ \"$result2\" -gt \"$result1\" ];\n\t\t\
    then \n\t\t\treturn 1\n\t\tfi\n\t\tif [ \"$result3\" -gt \"$result1\" ] && [ \"\
    $result3\" -gt \"$result2\" ];\n\t\tthen \n\t\t\treturn 1\n\t\tfi\n\tfi\n\treturn\
    \ 0", "    if [ $1 -eq $2 ] || [ $1 -eq $3 ]\n    then\n        return 1\n   \
    \ else\n        false\n    fi", "  local length=$1\n  local length2=$2\n  local\
    \ length3=$3\n  \n  while [ \"$length\" -gt 0 ]; do\n    if [ \"$length\" -eq\
    \ 1 ]; then \n      if [ \"$length2\" -eq 0 ] && [ \"$length3\" -eq 0 ]; then\n\
    \        # One of the lengths is 1 and the other two are both 0\n        return\
    \ true\n      fi\n      \n      if [ \"$length2\" -eq 0 ]; then\n        # One\
    \ of the lengths is 1 and the other two are greater than 0\n        return false\n\
    \      fi\n      \n      if [ \"$length3\" -eq 0 ]; then\n        # One of the\
    \ lengths is greater than 1 and the other two are both 0\n        return false\n\
    \      fi\n      \n      # All three are greater than 0\n      if (( $length2\
    \ > 0 && $length3 > 0 )); then\n        # We have one side that is greater than\
    \ 0, so check to see if it is\n        # right angle\n        if (( $length2 >\
    \ $length3 )); then\n          return true\n        fi\n      fi\n    else\n \
    \     # One of them is greater than 0\n      if (( $length > 0 && $length2 > 0\
    \ )); then\n        # We have two sides that are greater than 0, so check to see\
    \ if it is\n        # right angle\n        if (( $length2 > $length3 )); then\n\
    \          return true\n        fi\n      fi\n      \n      if (( $length > 0\
    \ && $length3 < 0 )); then\n        # We have one side that is greater than 0,\
    \ so check to see if it is\n        # right angle\n        if (( $length3 > $length2\
    \ )); then\n          return true\n        fi\n      fi\n      \n      if (( $length2\
    \ < 0 && $length3 < 0 )); then\n        # We have one side that is greater than\
    \ 0, so check to see if it is\n        # right angle\n        if (( $length3 >\
    \ $length2 )); then\n          return true\n        fi\n      fi\n      \n   \
    \   if (( $length2 > 0 && $length3 < 0 )); then\n        # We have two sides that\
    \ are greater than 0, so check to see if it is\n        # right angle\n      \
    \  if (( $length2 > $length3 )); then\n          return true\n        fi\n   \
    \   fi\n      \n      if (( $length2 < 0 && $length > 0 )); then\n        # We\
    \ have two sides that are greater than 0, so check to see if it is\n        #\
    \ right angle\n        if (( $length3 > $length2 )); then\n          return true\n\
    \        fi\n      fi\n      \n      if (( $length3 < 0 && $length > 0 )); then\n\
    \        # We have one side that is greater than 0, so check to see ", "    if\
    \ [ \"$1\" -eq \"$2\" ] && [ \"$1\" -eq \"$3\" ]; then\n        return 0\n   \
    \ fi\n\n    local n1 n2 n3\n    n1=$1\n    n2=$2\n    n3=$3\n    local a b c\n\
    \    a=$((n1*n1 - n2*n2))\n    b=$((2*n1*n3 - 3*n2*n1))\n    c=$((3*n1*n2 - n3*n1))\n\
    \    if [ $a -eq 0 ]; then\n        echo \"false\"\n    elif [ $a -eq $b ]; then\n\
    \        echo \"true\"\n    elif [ $a -eq $c ]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "    if [ $(($1 + 1)) != $2 ] || [\
    \ $(($1 + 1)) != $3 ]\n    then\n        return 0;\n    fi\n    if [ $(($2 + 1))\
    \ != $3 ]\n    then\n        return 0;\n    fi\n    if [ $(($3 + 1)) != $1 ]\n\
    \    then\n        return 0;\n    fi\n    \n    return 1;", "    # Check that\
    \ all three integers are valid integers.\n    [[ \"$1\" =~ ^[0-9]+$ ]] || return\n\
    \    [[ \"$2\" =~ ^[0-9]+$ ]] || return\n    [[ \"$3\" =~ ^[0-9]+$ ]] || return\n\
    \n    # Return true if the three sides are the same.\n    if [ \"$1\" -gt \"$2\"\
    \ ] || [ \"$2\" -gt \"$3\" ]; then\n        return\n    else\n        echo \"\
    $1 $2 $3\"\n    fi", "    local length1=$1\n    local length2=$2\n    local length3=$3\n\
    \n    if [ $length1 -eq 0 -o $length2 -eq 0 -o $length3 -eq 0 ]; then\n      \
    \  return 0\n    fi\n\n    local a=`echo $length1 | bc`\n    local b=`echo $length2\
    \ | bc`\n    local c=`echo $length3 | bc`\n\n    if [ $a -gt $b ] && [ $a -gt\
    \ $c ]; then\n        if [ $b -gt $c ]; then\n            echo \"true\"\n    \
    \    fi\n    else\n        if [ $b -gt $c ]; then\n            echo \"false\"\n\
    \        fi\n    fi", "        local length1 length2 length3\n\n        length1=$1\n\
    \        length2=$2\n        length3=$3\n\n        if [ \"$length1\" -gt \"$length2\"\
    \ ] && [ \"$length1\" -gt \"$length3\" ]; then\n        \techo \"true\"\n    \
    \    \treturn\n        fi\n        if [ \"$length2\" -gt \"$length3\" ]; then\n\
    \        \techo \"false\"\n        \treturn\n        fi\n        if [ \"$length1\"\
    \ -gt \"$length2\" ]; then\n        \techo \"true\"\n        \treturn\n      \
    \  fi", "  # Write your code here\n  echo \"$1 $2 $3\"\n  read -p \"Enter two\
    \ integers: \" a b\n  read -p \"Enter one integer: \" c\n  echo \"$a $b $c\"\n\
    \  echo \"$a $b $c\"\n  if [ $a -gt $b ]; then\n    if [ $c -gt $b ]; then\n \
    \     echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    if [\
    \ $c -gt $a ]; then\n      echo \"false\"\n    else\n      echo \"true\"\n   \
    \ fi\n  fi\n  echo \"$a $b $c\"", "  tri_length=${1}\n  len1=$(( tri_length /\
    \ 2 ))\n  len2=$(( tri_length - len1 ))\n  len3=$(( tri_length - len1 ))\n  len2=$((\
    \ tri_length / 2 ))\n  (( $len2 < $len3 )) && return 0;\n  (( $len3 < $len2 ))\
    \ && return 0;\n  (( $len1 == $len2 )) && return 1;\n  (( $len1 == $len3 )) &&\
    \ return 1;\n  (( $len1 == $len2 )) && return 1;\n  (( $len1 == $len3 )) && return\
    \ 1;", "    [[ $1 =~ ([0-9]+) ]] || return\n    [[ $2 =~ ([0-9]+) ]] || return\n\
    \    [[ $3 =~ ([0-9]+) ]] || return\n    [[ -z $3 ]] && return\n    (( $2 > $1\
    \ && $2 > $3 )) && return 1 || return\n    (( $2 > $3 && $1 > $3 )) && return\
    \ 1 || return\n    (( $1 > $2 && $1 > $3 )) && return 1 || return\n    (( $1 >\
    \ $3 && $2 > $1 )) && return 1 || return", "  local l1 l2\n  l1=$(echo $1 | sed\
    \ 's/\\^.\\+/\\^/g')\n  l2=$(echo $2 | sed 's/\\^.\\+/\\^/g')\n  l3=$(echo $3\
    \ | sed 's/\\^.\\+/\\^/g')\n  if [[ ( $l1 > $l2 ) && ( $l2 > $l3 ) ]]; then\n\
    \    return 1\n  elif [[ ( $l1 > $l3 ) && ( $l3 > $l2 ) ]]; then\n    return 1\n\
    \  else\n    return 0\n  fi", "    # Triangle 1: $1 $2 $3 -> 90 - $1 + $2 - $3\
    \ == 0\n    # Triangle 2: $1 $2 $3 -> 90 + $1 + $2 - $3 == 180\n    # Triangle\
    \ 3: $1 $2 $3 -> -90 + $1 + $2 + $3 == 180\n    local len1 len2 len3 sum1 sum2\
    \ sum3\n    sum1=$((90 + $1 - $2))\n    sum2=$((90 + $1 + $2 - $3))\n    sum3=$((-90\
    \ + $1 + $2 + $3))\n    # If the sum is 90 then we are on the right side of the\
    \ first triangle\n    # Else we are on the right side of the second triangle\n\
    \    if [ $sum1 -eq 90 ]\n        then\n            return 1\n    else\n     \
    \   # In any case we know that $1 $2 $3 sum to 90 so check if $1 $2 sum is 90\
    \ \n        # or -90 then we are on the right side of the third triangle\n   \
    \     if [ $sum2 -eq 90 ]\n            then\n                return 1\n      \
    \  else\n            # If sum3 is -90 then we are on the right side of the third\
    \ triangle\n            if [ $sum3 -eq -90 ]\n                then\n         \
    \           return 1\n            fi\n        fi\n    fi\n    return 0", "\t\n\
    \tdeclare -i len_1=$(( ${1:0:1} + 1 ))\n\tdeclare -i len_2=$(( ${2:0:1} + 1 ))\n\
    \tdeclare -i len_3=$(( ${3:0:1} + 1 ))\n\n\tif (( ${len_1} > ${len_2} )) || ((\
    \ ${len_2} > ${len_3} )) || (( ${len_1} > ${len_3} ))\n\tthen\n\t\techo \"false\"\
    \n\telse\n\t\techo \"true\"\n\tfi", "\techo \"$3 $2 $1\" | awk '{sum=0; for(i=3;\
    \ i>0; i--) sum+=$i; if(sum==0) return 1; return 0}'", "    local a b\n    a=$1\n\
    \    b=$2\n    c=$3\n    [[ \"$a $b $c\" =~ ^[0-9]*$ ]] || return\n    [[ \"$a\
    \ $b $c\" =~ ^[0-9]$c ]] || return\n    [[ \"$a $b $c\" =~ ^[0-9]$b ]] || return\n\
    \    [[ \"$a $b $c\" =~ ^[0-9]$a ]] || return\n    [[ \"$a $b $c\" =~ ^[0-9]$c\
    \ ]] || return\n    [[ \"$a $b $c\" =~ ^[0-9]$a ]] || return\n    [[ \"$a $b $c\"\
    \ =~ ^[0-9]*$c ]] || return\n    [[ \"$a $b $c\" =~ ^[0-9]*$a ]] || return\n \
    \   [[ \"$a $b $c\" =~ ^[0-9]*$b ]] || return\n    [[ \"$a $b $c\" =~ ^[0-9]*$c\
    \ ]] || return\n    [[ \"$a $b $c\" =~ ^[0-9]*$a ]] || return\n    [[ \"$a $b\
    \ $c\" =~ ^[0-9]*$b ]] || return\n    [[ \"$a $b $c\" =~ ^[0-9]*$c ]] || return\n\
    \    [[ \"$a $b $c\" =~ ^[0-9]*$a ]] || return\n    [[ \"$a $b $c\" =~ ^[0-9]*$b\
    \ ]] || return\n    [[ \"$a $b $c\" =~ ^[0-9]*$c ]] || return\n    [[ \"$a $b\
    \ $c\" =~ ^[0-9]*$a ]] || return\n    [[ \"$a $b $c\" =~ ^[0-9]*$b ]] || return\n\
    \    [[ \"$a $b $c\" =~ ^[0-9]*$c ]] || return\n    [[ \"$a $b $c\" =~ ^[0-9]*$a\
    \ ]] || return\n    [[ \"$a $b $c\" =~ ^[0-9]*$b ]] || return\n    [[ \"$a $b\
    \ $c\" =~ ^[0-9]*$c ]] || return\n    [[ \"$a $b $c\" =~ ^[0-9]*$a ]] || return\n\
    \    [[ \"$a $b $c\" =~ ^[0-9]*$b ]] || return\n    [[ \"$a $b $c\" =~ ^[0-9]*$c ",
  "\tlocal side_1 \"$1\" \n\tlocal side_2 \"$2\" \n\tlocal side_3 \"$3\" \n\n\t\n\t\
    if [ \"$side_1\" -gt \"$side_2\" ] || [ \"$side_1\" -gt \"$side_3\" ]; then\n\t\
    \treturn 0\n\telse\n\t\tif [ \"$side_2\" -gt \"$side_3\" ]; then\n\t\t\treturn\
    \ 1\n\t\telse\n\t\t\treturn 2\n\t\tfi\n\tfi", "  local a b\n  a=$(read_number\
    \ \"$1\" \"$2\" \"$3\")\n  if (( $(( a % 90 )) == 0)); then return 0 ; fi\n  b=$(read_number\
    \ \"$1\" \"$2\" \"$3\")\n  if (( $(( $(( a % $(b % $a)) )) )) == 0)\n  then\n\
    \    # a is multiple of b\n    return 1\n  fi\n  return 0", "    declare -i n1\
    \ n2 n3\n    if [ \"$1\" = \"$3\" ] || [ \"$2\" = \"$3\" ] || [ \"$3\" = \"$1\"\
    \ ]; then\n        echo \"false\"\n    else\n        n1=$(eval \"echo $1 | bc\"\
    )\n        n2=$(eval \"echo $2 | bc\")\n        n3=$(eval \"echo $3 | bc\")\n\
    \        if [ \"$n1\" -gt \"$n2\" ] && [ \"$n1\" -gt \"$n3\" ] && [ \"$n2\" -gt\
    \ \"$n3\" ]; then\n            echo \"true\"\n        else\n            echo \"\
    false\"\n        fi\n    fi", "    if [ $2 -gt $1 ]; then \n        echo \"false\"\
    \n    else\n        if [ $1 -gt $3 ]; then\n            if [ $2 -gt $3 ]; then\n\
    \                echo \"false\"\n            else\n                echo \"true\"\
    \n            fi\n        else\n            if [ $2 -gt $1 ]; then\n         \
    \       echo \"true\"\n            else\n                echo \"false\"\n    \
    \        fi\n        fi\n    fi", "\t(( $1 >= $2 )) ||\n\t\t(( $2 >= $3 )) ||\n\
    \t\t(( $1 -eq $2 )) ||\n\t\t(( $1 -eq $3 )) ||\n\t\t(( $1 -eq $2 -and $2 -eq $3\
    \ ))", '  echo $(( (${1} < ${2} || ${1} > ${3} ) && (${1} > ${2} || ${3} > ${2})
    ))', "  local sideA=$1\n  local sideB=$2\n  local sideC=$3\n\n  # Check if three\
    \ sides are equal or if one side is greater than the other\n  if [ \"$sideA\"\
    \ -eq \"$sideB\" ] || [ \"$sideA\" -eq \"$sideC\" ] || [ \"$sideB\" -eq \"$sideC\"\
    \ ]; then\n    echo \"false\"\n  else\n    local sideAB=$(($sideA + $sideB))\n\
    \    local sideAC=$(($sideA + $sideC))\n    local sideBC=$(($sideB + $sideC))\n\
    \n    if [ \"$sideAB\" -eq \"$sideAC\" ] && [ \"$sideAB\" -eq \"$sideBC\" ]; then\n\
    \      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi", "  local\
    \ x1 y1 x2 y2\n  x1=$1\n  y1=$2\n  x2=$3\n  y2=$4\n  local a=$((x1 - x2))\n  local\
    \ b=$((y1 - y2))\n  local c=$((y2 - y1))\n  echo $(( ((a*a) - (b*b)) - ((c*c))\
    \ )) >/dev/null", "    length=$1\n    side_one=$2\n    side_two=$3\n    if [[\
    \ $side_one -gt $side_two ]]; then\n        if [[ $side_one -gt $length ]]; then\n\
    \            # Check if we do not have any integer greater than $length\n    \
    \        # as $side_one and $side_two are both greater than $length\n        \
    \    if [[ $side_one -gt $length ]]; then\n                echo \"false\"\n  \
    \          else\n                echo \"true\"\n            fi\n        fi\n \
    \   else\n        if [[ $side_two -gt $length ]]; then\n            echo \"false\"\
    \n        else\n            echo \"true\"\n        fi\n    fi", "  if (( $1 >=\
    \ 3 )); then\n    echo 'The length of side 1 must be greater than or equal to\
    \ 3'\n    exit 1\n  fi\n  if (( $2 >= 3 )); then\n    echo 'The length of side\
    \ 2 must be greater than or equal to 3'\n    exit 1\n  fi\n  if (( $3 >= 3 ));\
    \ then\n    echo 'The length of side 3 must be greater than or equal to 3'\n \
    \   exit 1\n  fi\n  \n  if (( $3 == $2 + $1 )); then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  # Get sides lengths\n  side1=$(echo \"$1\" | bc)\n\
    \  side2=$(echo \"$2\" | bc)\n  side3=$(echo \"$3\" | bc)\n\n  (( side1 == \"\
    $side2\" || side2 == \"$side3\" || side3 == \"$side1\" )) && return 0 # right\
    \ angle triangle\n  (( side1 == \"$side2\" && side2 == \"$side3\" )) && return\
    \ 1\n  (( side1 == \"$side3\" && side2 == \"$side3\" )) && return 1\n  (( side1\
    \ == \"$side2\" || side2 == \"$side1\" || side3 == \"$side1\" )) && return 0",
  '  (( $1 == $2 || ( $1 == $3 && $2 != $3 ) ))', "    local length=\"$1\"\n    local\
    \ side1=\"$2\"\n    local side2=\"$3\"\n    local side3=\"$(( side1 + side2 ))\"\
    \n    local result=\"true\"\n    # Check if a triangle with one angle is right\
    \ angle\n    if [ \"$side1\" -lt \"$side2\" ] && [ \"$side1\" -lt \"$side3\" ];\
    \ then\n        result=\"false\"\n    elif [ \"$side2\" -lt \"$side3\" ]; then\n\
    \        result=\"false\"\n    elif [ \"$side2\" -lt \"$side1\" ]; then\n    \
    \    result=\"false\"\n    fi\n    echo \"$result\"", "    length=$1\n    side1=$2\n\
    \    side2=$3\n    echo $(($(eval echo \"(($side1+$side2)-($side1-$side2))*($side1-$side2)*2<0\"\
    ))", "    (( ${#1} < ${#2} )) && return 1\n    (( ${#1} < ${#3} )) && return 1\n\
    \    (( ${#2} < ${#3} )) && return 1\n    [ $(( (${#1} - ${#2}) * (${#3} - ${#2})\
    \ )) = 0 ] && return 0\n    [ $(( (${#1} - ${#3}) * (${#2} - ${#3}) )) = 0 ] &&\
    \ return 0\n    [ $(( (${#1} - ${#2}) * (${#1} - ${#3}) )) = 0 ] && return 0\n\
    \    [ $(( (${#2} - ${#3}) * (${#2} - ${#1}) )) = 0 ] && return 0\n    return\
    \ 1", "  if [[ $(triangle_length \"$1\" \"$2\" \"$3\") -gt \"1\" ]] || [[ $(triangle_length\
    \ \"$1\" \"$2\" \"$3\") -le \"0\" ]]; then\n    echo \"false\"\n  else\n    echo\
    \ \"true\"\n  fi", "  local side1=$1\n  local side2=$2\n  local side3=$3\n  local\
    \ result\n\n  if [ $side1 -gt 0 -a $side1 -lt $side2 -a $side2 -lt $side3 ]; then\n\
    \    result=true\n  elif [ $side1 -gt 0 -a $side1 -lt $side3 -a $side3 -lt $side2\
    \ ]; then\n    result=true\n  else\n    result=false\n  fi\n  return $result",
  "\t# Triangle lengths\n\tl1=$(expr $1)\n\tl2=$(expr $2)\n\tl3=$(expr $3)\n\n\t#\
    \ Return true if three sides form a right angle triangle\n\tif [[ $l1 -gt $l2\
    \ && $l1 -gt $l3 ]]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi",
  "\ttriangle_side=$(echo \"$1\" \"$2\" \"$3\" | tr -dc '0-9')\n\tif [[ $triangle_side\
    \ == \"$1\" ]]; then\n\t\tif [[ $triangle_side == \"$2\" ]]; then\n\t\t\tif [[\
    \ $triangle_side == \"$3\" ]]; then\n\t\t\t\treturn 0\n\t\t\tfi\n\t\tfi\n\tfi\n\
    \t\n\tif [[ $triangle_side == *\"$1\"* ]]; then\n\t\tif [[ $triangle_side == *\"\
    $2\"* ]]; then\n\t\t\tif [[ $triangle_side == *\"$3\"* ]]; then\n\t\t\t\treturn\
    \ 1\n\t\t\tfi\n\t\tfi\n\tfi\n\treturn 0", "\tlocal side1=${1:0:$1}\n\tlocal side2=${1:1:$1}\n\
    \tlocal side3=${1:2:$1}\n\t[ \"$side1\" -eq \"$side2\" ] && [ \"$side1\" -eq \"\
    $side3\" ] && return 0\n\t[ \"$side2\" -eq \"$side3\" ] && return 0\n\t[ \"$side1\"\
    \ -eq \"$side3\" ] && return 0\n\t[ \"$side2\" -eq \"$side1\" ] && [ \"$side3\"\
    \ -eq \"$side1\" ] && return 0\n\t[ \"$side1\" -gt \"$side2\" ] && [ \"$side1\"\
    \ -gt \"$side3\" ] && return 0\n\t[ \"$side2\" -gt \"$side3\" ] && return 0\n\t\
    [ \"$side3\" -gt \"$side1\" ] && return 0\n\t[ \"$side1\" -gt \"$side2\" ] &&\
    \ return 0\n\t[ \"$side2\" -gt \"$side1\" ] && [ \"$side2\" -gt \"$side3\" ] &&\
    \ return 0\n\t[ \"$side3\" -gt \"$side2\" ] && [ \"$side3\" -gt \"$side1\" ] &&\
    \ return 0\n\t[ \"$side1\" -gt \"$side2\" ] && [ \"$side1\" -gt \"$side3\" ] &&\
    \ return 0\n\t[ \"$side2\" -gt \"$side3\" ] && [ \"$side3\" -gt \"$side1\" ] &&\
    \ return 0\n\t[ \"$side3\" -gt \"$side2\" ] && [ \"$side3\" -gt \"$side2\" ] &&\
    \ return 0\n\t[ \"$side1\" -gt \"$side2\" ] && [ \"$side2\" -gt \"$side3\" ] &&\
    \ [ \"$side3\" -gt \"$side1\" ] && return 0\n\t[ \"$side2\" -gt \"$side3\" ] &&\
    \ [ \"$side3\" -gt \"$side2\" ] && [ \"$side1\" -gt \"$side3\" ] && return 0\n\
    \t[ \"$side3\" -gt \"$side2\" ] && [ \"$side1\" -gt \"$side3\" ] && [ \"$side2\"\
    \ -gt \"$side1\" ] && return 0\n\t[ \"$side1\" -gt \"$side2\" ] && [ \"$side2\"\
    \ -gt \"$side3\" ] && [ \"$side3\" -gt \"$side2\" ] && [ \"$side3\" -gt \"$side3\"\
    \ ] && return 0\n\treturn 1", "    if [ \"$1\" = \"$2\"  ]; then\n        if [\
    \ \"$1\" = \"$3\"  ]; then\n            if [ \"$2\" = \"$3\"  ]; then\n      \
    \          echo \"true\"\n            else\n                echo \"false\"\n \
    \           fi\n        else\n            echo \"false\"\n        fi\n    else\n\
    \        echo \"false\"\n    fi", "    local side a b\n    side=$1\n    a=$2\n\
    \    b=$3\n    if [ $side -lt 0 ] || [ $side -gt 3 ] || [ $a -lt 0 ] || [ $a -gt\
    \ 3 ] || [ $b -lt 0 ] || [ $b -gt 3 ]; then\n        echo \"Invalid input\"\n\
    \        exit 1\n    fi\n\n    if [ $side -eq 0 ]; then \n        echo \"true\"\
    \n        return 0\n    fi\n\n    if [ $side -eq 1 ]; then\n        if [ $a -eq\
    \ b ]; then\n            echo \"true\"\n            return 0\n        fi\n   \
    \     echo \"false\"\n        return 1\n    fi\n\n    if [ $side -eq 2 ]; then\n\
    \        if [ $a -eq b ]; then\n            echo \"false\"\n            return\
    \ 1\n        fi\n        if [ $b -eq c ]; then\n            echo \"true\"\n  \
    \          return 0\n        fi\n        echo \"false\"\n        return 1\n  \
    \  fi\n\n    if [ $side -eq 3 ]; then\n        if [ $a -eq b ]; then\n       \
    \     if [ $b -eq c ]; then\n                echo \"true\"\n                return\
    \ 0\n            fi\n            echo \"false\"\n            return 1\n      \
    \  fi\n        if [ $b -eq c ]; then\n            if [ $c -eq d ]; then\n    \
    \            echo \"true\"\n                return 0\n            fi\n       \
    \     echo \"false\"\n            return 1\n        fi\n        echo \"false\"\
    \n        return 1\n    fi", "  local len1=${1:?Usage: $(right_angle_triangle\
    \ <side1> <side2> <side3>)}\n  local len2=${2:?Usage: $(right_angle_triangle <side1>\
    \ <side2> <side3>)}\n  local len3=${3:?Usage: $(right_angle_triangle <side1> <side2>\
    \ <side3>)}\n\n  local sum1=$(echo \"$len1$len2\" | bc)\n  local sum2=$(echo \"\
    $len2$len3\" | bc)\n  local sum3=$(echo \"$len3$len1\" | bc)\n\n  # If one side\
    \ is longer, it is not an right-angle triangle\n  if [[ $sum1 != $sum2 && $sum2\
    \ != $sum3 ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\n  fi", " \
    \   local side1 side2 side3\n    side1=$1\n    side2=$2\n    side3=$3\n\n    #\
    \ Convert the three sides to integer\n    side1=$(to_integer $side1)\n    side2=$(to_integer\
    \ $side2)\n    side3=$(to_integer $side3)\n\n    # Define a variable $result and\
    \ set it to true or false.\n    result=true\n\n    if [ $side1 = $side2 ]; then\n\
    \        [ $side1 = $side3 ] && result=false\n    elif [ $side2 = $side3 ]; then\n\
    \        [ $side2 = $side1 ] && result=false\n    fi\n\n    # Return $result\n\
    \    echo $result", "  # Triangle is Right Angle if $3 is greater than $1 and\
    \ $2 is greater than $3\n  # Example: 3 4 5 is right angle triangle\n  if [ \"\
    $2\" -gt \"$1\" ] || [ \"$3\" -gt \"$1\" ]; then\n    return 1\n  fi\n\n  # Triangle\
    \ is Right Angle if $3 is greater than $1 and $2 is less than $3\n  # Example:\
    \ 1 2 3 is not right angle triangle\n  if [ \"$2\" -gt \"$1\" ] || [ \"$3\" -lt\
    \ \"$1\" ]; then\n    return 0\n  fi\n\n  # Triangle is Right Angle if $3 is less\
    \ than $1 and $2 is less than $3\n  # Example: 1 3 4 is right angle triangle\n\
    \  if [ \"$2\" -lt \"$1\" ] || [ \"$3\" -lt \"$1\" ]; then\n    return 0\n  fi\n\
    \n  # Triangle is Right Angle if $3 is less than $1 and $2 is greater than $3\n\
    \  # Example: 1 2 3 is right angle triangle\n  if [ \"$2\" -lt \"$1\" ] || [ \"\
    $3\" -gt \"$1\" ]; then\n    return 1\n  fi\n\n  # Triangle is Right Angle if\
    \ $3 is greater than $1 and $2 is greater than $3\n  # Example: 3 4 5 is not right\
    \ angle triangle\n  return 0", "    local LENGTH=$1\n    local ANGLE=$2\n    local\
    \ ANGLE_BACKUP=$3\n    local RESULT=\"\"\n    local MAX_PRIME=7\n    local MAX=9\n\
    \    local RESULT2=\"\"\n    local MAX2=9\n    local MAX3=9\n    local MAX4=9\n\
    \    local MAX5=9\n    local MAX6=9\n    local MAX7=9\n    local MAX8=9\n    local\
    \ MAX9=9\n    local MAX10=9\n    local MAX11=9\n    local MAX12=9\n    local MAX13=9\n\
    \    local MAX14=9\n    local MAX15=9\n    local MAX16=9\n    local MAX17=9\n\
    \    local MAX18=9\n    local MAX19=9\n    local MAX20=9\n    local MAX21=9\n\
    \    local MAX22=9\n    local MAX23=9\n    local MAX24=9\n    local MAX25=9\n\
    \    local MAX26=9\n    local MAX27=9\n    local MAX28=9\n    local MAX29=9\n\
    \    local MAX30=9\n    local MAX31=9\n    local MAX32=9\n    local MAX33=9\n\
    \    local MAX34=9\n    local MAX35=9\n    local MAX36=9\n    local MAX37=9\n\
    \    local MAX38=9\n    local MAX39=9\n    local MAX40=9\n    local MAX41=9\n\
    \    local MAX42=9\n    local MAX43=9\n    local MAX44=9\n    local MAX45=9\n\
    \    local MAX46=9\n    local MAX47=9\n    local MAX48=9\n    local MAX49=9\n\
    \    local MAX50=9\n    local MAX51=9\n    local MAX52=9\n    local MAX53=9\n\
    \    local MAX54=9\n    local MAX55=9\n    local MAX56=9\n    local MAX57=9\n\
    \    local MAX58=9\n    local MAX59=9\n    local MAX60=9\n    local MAX61=9\n\
    \    local MAX62=9\n    local MAX63=9\n    local MAX64=9\n    local MAX65=9\n\
    \    local MAX66=9\n    local MAX67=9\n    local MAX68", "    local length1 length2\
    \ length3\n    read length1 length2 length3 <<< \"$1\"\n    local angle1\n   \
    \ read angle1 <<< \"$2\"\n    local angle2\n    read angle2 <<< \"$3\"\n    local\
    \ angle3\n    read angle3 <<< \"$4\"\n    local a\n    local b\n    local c\n\
    \    local angle\n    local check\n    local a\n    local b\n    local c\n   \
    \ local angle\n\n    a=$(( 90 * $angle1 ))\n    b=$(( 90 * $angle2 ))\n    c=$((\
    \ 90 * $angle3 ))\n    angle=$(( a * b + c * -a ))\n\n    if [ \"$angle\" -gt\
    \ 0 ]; then\n        check=0\n    elif [ \"$angle\" -lt 0 ]; then\n        check=1\n\
    \    else\n        check=2\n    fi\n\n    if [ \"$check\" -eq 1 ]; then\n    \
    \    return 1\n    else\n        return 0\n    fi", "\tlength1=$1\n\tlength2=$2\n\
    \tlength3=$3\n\t# If $3 > $1 and $2 > $1, then $1 is a right-angle triangle\n\t\
    if [ \"$length3\" -gt \"$length1\" ]\n\tthen \n\t\tif [ \"$length2\" -gt \"$length1\"\
    \ ]\n\t\tthen \n\t\t\techo \"true\"\n\t\telse \n\t\t\techo \"false\"\n\t\tfi\n\
    \telse \n\t\tif [ \"$length2\" -gt \"$length3\" ]\n\t\tthen\n\t\t\techo \"true\"\
    \n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\tfi", "    if [ \"$1\" -gt \"$3\" ]\
    \ || [ \"$1\" -eq \"$3\" ]\n    then\n        echo \"true\"\n    else\n      \
    \  echo \"false\"\n    fi", "    local side1=$1\n    local side2=$2\n    local\
    \ side3=$3\n    local angle1=$(echo \"$side1\" | cut -d . -f 1)\n    local angle2=$(echo\
    \ \"$side2\" | cut -d . -f 1)\n    local angle3=$(echo \"$side3\" | cut -d . -f\
    \ 1)\n    if [ \"$side1\" -gt \"$side2\" ] &&\\\n       [ \"$side2\" -gt \"$side3\"\
    \ ]; then\n        local angle1_mod=$(($angle1 % 360))\n        local angle2_mod=$(($angle2\
    \ % 360))\n        local angle3_mod=$(($angle3 % 360))\n        if [ \"$angle1_mod\"\
    \ -eq \"$angle2_mod\" ] || [ \"$angle1_mod\" -eq \"$angle3_mod\" ]; then\n   \
    \         local angle_mod=$(($angle1_mod + $angle2_mod + $angle3_mod - 180))\n\
    \            if [ \"$angle_mod\" -eq 180 ]; then\n                return true\n\
    \            elif [ \"$angle_mod\" -eq 90]; then\n                return true\n\
    \            else\n                return false\n            fi\n        else\n\
    \            return true\n        fi\n    else\n        return false\n    fi",
  "  [ $(( $1 * $1 )) -eq $(( $1 * $2 )) -a $(( $1 * $2 )) -eq $(( $1 * $3 )) -a $((\
    \ $2 * $3 )) -eq $(( $3 * $3 )) ] &&\n    echo true", "  local n1 n2 n3\n  n1=$1\n\
    \  n2=$2\n  n3=$3\n  if [[ \"$n1\" -lt \"$n2\" ]]; then\n    n3=\"$n2\"\n    n2=\"\
    $n1\"\n    n1=\"$n3\"\n  fi\n  if [[ \"$n1\" -lt \"$n3\" ]]; then\n    n2=\"$n3\"\
    \n    n3=\"$n1\"\n    n1=\"$n2\"\n  fi\n  if [[ \"$n2\" -lt \"$n3\" ]]; then\n\
    \    n3=\"$n3\"\n    n2=\"$n2\"\n    n1=\"$n3\"\n  fi\n  if [[ \"$n1\" -gt \"\
    $n2\" ]]; then\n    n1=\"$n2\"\n    n2=\"$n1\"\n  fi\n  if [[ \"$n1\" -gt \"$n3\"\
    \ ]]; then\n    n2=\"$n3\"\n    n3=\"$n1\"\n    n1=\"$n2\"\n  fi\n  if [[ \"$n2\"\
    \ -gt \"$n3\" ]]; then\n    n1=\"$n3\"\n    n2=\"$n2\"\n  fi\n  echo \"$n1\"\n\
    \  echo \"$n2\"\n  echo \"$n3\"", "    local a b c\n    a=$1\n    b=$2\n    c=$3\n\
    \    # Check if three sides form a right angle\n    if (( b > a )); then\n   \
    \     # Check if the right angle is greater than or equal to 90 degree\n     \
    \   if (( b - a >= 90 )); then\n            if (( c >= b )); then\n          \
    \      return 0\n            else\n                return 1\n            fi\n\
    \        else\n            return 1\n        fi\n    else\n        return 1\n\
    \    fi", "    [[ \"$1\" -ge 1 ]] || return 1\n    [[ \"$1\" -eq 0 ]] || return\
    \ 0\n    [[ \"$2\" -ge 1 ]] || return 1\n    [[ \"$2\" -eq 0 ]] || return 0\n\
    \    [[ \"$3\" -ge 1 ]] || return 1\n    [[ \"$3\" -eq 0 ]] || return 0\n    #\
    \ right triangle\n    if [[ ( ( ( \"$1\" > \"$2\") -a \"$2\" > \"$3\") || ( (\
    \ \"$1\" > \"$3\") -a \"$3\" > \"$2\") ) ]]\n    then\n        return 0\n    else\n\
    \        return 1\n    fi", "  local side_1=$1\n  local side_2=$2\n  local side_3=$3\n\
    \  if [ \"$side_1\" -gt \"$side_2\" ] || [ \"$side_1\" -gt \"$side_3\" ]; then\n\
    \    return 0\n  fi\n  if [ \"$side_1\" -eq \"$side_2\" ] && [ \"$side_1\" -eq\
    \ \"$side_3\" ]; then\n    return 1\n  fi\n  if [ \"$side_2\" -gt \"$side_3\"\
    \ ] && [ \"$side_3\" -gt \"$side_1\" ]; then\n    return 1\n  fi\n  return 0",
  "    local length=$1\n    local length2=$2\n    local length3=$3\n    # Write your\
    \ code here.\n", "    local side_1 side_2 side_3\n    side_1=$1\n    side_2=$2\n\
    \    side_3=$3\n    local sum\n    local answer\n    sum=$((side_1 + side_2 +\
    \ side_3))\n    answer=$((side_1 * side_2 > sum))\n    return $answer", "  local\
    \ n1=$(echo \"$1\" | cut -d \"\\\"\" -f 2)\n  local n2=$(echo \"$2\" | cut -d\
    \ \"\\\"\" -f 2)\n  local n3=$(echo \"$3\" | cut -d \"\\\"\" -f 2)\n  \n  if ((\
    \ n1 != n2 != n3 )); then\n    return 0\n  fi\n  \n  if (( n1 < n2 )); then\n\
    \    local tmp=$n2\n    n2=$n1\n    n1=$tmp\n  fi\n  \n  if (( n2 < n3 )); then\n\
    \    local tmp=$n3\n    n3=$n2\n    n2=$tmp\n  fi\n  \n  if (( n3 < n1 )); then\n\
    \    local tmp=$n1\n    n1=$n3\n    n3=$tmp\n  fi\n  \n  if (( n1 < n2 < n3 ));\
    \ then\n    return 1\n  fi\n  \n  return 0", "  # Variables\n  local a b\n  a=$1\n\
    \  b=$2\n  c=$3\n\n  # Return statement for result\n  echo \"$a $b $c\" | awk\
    \ '{print ($a + $b > $c) && ($a + $c > $b) && ($b + $c > $a)}'", "\t# $1 is an\
    \ integer\n\t# $2 is an integer\n\t# $3 is an integer\n\tlocal a=$1\n\tlocal b=$2\n\
    \tlocal c=$3\n\tlocal result=1\n\tif [ \"$a\" -gt \"$b\" ] && [ \"$a\" -gt \"\
    $c\" ] && [ \"$b\" -gt \"$c\" ]; then\n\t\tif [ $( echo \"$a + ($b - $c) / 2\"\
    \ | bc ) > 1 ]; then\n\t\t\tresult=0\n\t\tfi\n\tfi\n\treturn $result", "  local\
    \ length_1 length_2 length_3\n  local result\n  length_1=$(expr $1 \\* 2)\n  length_2=$(expr\
    \ $2 \\* 2)\n  length_3=$(expr $3 \\* 2)\n  if [[ ${length_1} -le ${length_2}\
    \ && ${length_2} -le ${length_3} ]]; then\n    result=$((length_1 \\* length_3\
    \ - length_2 \\* length_1))\n    if [ $result -eq 0 ]; then\n      return 0\n\
    \    fi\n    return 1\n  fi\n  return 0", "    local a b c d\n    local p\n  \
    \  a=$1\n    b=$2\n    c=$3\n\n    if [[ $a -eq 0 -o $b -eq 0 -o $c -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        for (( i = 0; i < 3; i++ ));\
    \ do\n            local p=$i\n            if [ $p -eq 0 ]; then\n            \
    \    echo \"true\"\n                break\n            fi\n            if [ $p\
    \ -eq 1 ]; then\n                echo \"false\"\n                break\n     \
    \       fi\n            if [ $p -eq 2 ]; then\n                echo \"false\"\n\
    \                break\n            fi\n            if [ $a -eq $b ]; then\n \
    \               echo \"false\"\n                break\n            fi\n      \
    \      if [ $a -eq $c ]; then\n                echo \"false\"\n              \
    \  break\n            fi\n            if [ $b -eq $c ]; then\n               \
    \ echo \"false\"\n                break\n            fi\n            if [ $a -eq\
    \ $b ] || [ $b -eq $c ] || [ $c -eq $b ] || [ $a -eq $c ]; then\n            \
    \    echo \"true\"\n                break\n            fi\n        done\n    fi",
  "    local len1=${1:?You must input a positive integer as length of first side}\n\
    \    local len2=${2:?You must input a positive integer as length of second side}\n\
    \    local len3=${3:?You must input a positive integer as length of third side}\n\
    \    local x\n    local a\n    local b\n    local c\n    local x\n    local result\n\
    \n    a=$((len1 - len2))\n    b=$((len2 - len3))\n    c=$((len3 - len1))\n   \
    \ x=$(((b * b) - 4 * (a * c)))\n    if [ $x -eq 0 ]; then\n        result=true\n\
    \    else\n        result=false\n    fi", "    local a=\"${1}\"\n    local b=\"\
    ${2}\"\n    local c=\"${3}\"\n    if [[ ${a} -le ${b} && ${b} -le ${c} && ${a}\
    \ -le ${c} ]]; then\n        return 1\n    elif [[ ${b} -le ${a} && ${b} -le ${c}\
    \ && ${a} -le ${c} ]]; then\n        return 1\n    elif [[ ${c} -le ${a} && ${c}\
    \ -le ${b} && ${a} -le ${b} ]]; then\n        return 1\n    fi", "    local side1=$1\n\
    \    local side2=$2\n    local side3=$3\n    local angle\n\n    # If the three\
    \ sides are all equal, return true\n    if [ \"$side1\" -eq \"$side2\" ] && [\
    \ \"$side1\" -eq \"$side3\" ]; then\n        echo \"true\"\n        return\n \
    \   fi\n    # If the third side is less than the first and greater than or equal\
    \ to the second\n    # or if the third side is greater than or equal to the first\
    \ and less than the second\n    # then return true\n    if [ \"$side2\" -gt \"\
    $side1\" ] && [ \"$side2\" -lt \"$side3\" ]; then\n        echo \"true\"\n   \
    \     return\n    fi\n    # If the third side is greater than the first and less\
    \ than the second\n    # then return true\n    if [ \"$side2\" -lt \"$side1\"\
    \ ] && [ \"$side2\" -gt \"$side3\" ]; then\n        echo \"true\"\n        return\n\
    \    fi\n    # If the third side is equal to the first and greater than or equal\
    \ to the second\n    # or if the third side is equal to the first and less than\
    \ the second\n    # then return false\n    if [ \"$side2\" -eq \"$side1\" ] &&\
    \ [ \"$side2\" -gt \"$side3\" ]; then\n        echo \"false\"\n        return\n\
    \    fi\n    # If the third side is equal to the first and greater than or equal\
    \ to the second\n    # then return false\n    if [ \"$side2\" -eq \"$side1\" ]\
    \ && [ \"$side2\" -lt \"$side3\" ]; then\n        echo \"false\"\n        return\n\
    \    fi\n    # If the third side is equal to the first and less than the second\n\
    \    # then return false\n    if [ \"$side2\" -lt \"$side1\" ] && [ \"$side2\"\
    \ -eq \"$side3\" ]; then\n        echo \"false\"\n        return\n    fi\n   \
    \ # If the third side is greater than the first and equal to the second\n    #\
    \ then return true\n    if [ \"$side2\" -gt \"$side1\" ] && [ \"$side2\" -eq \"\
    $side3\" ]; then\n        echo \"true\"\n        return\n    fi\n    # If the\
    \ third side is greater than the first and equal to the second\n    # then return\
    \ true\n    if [ \"$side2\" -gt \"$side1\" ] && [ \"$side2\" -lt \"$side3\" ];\
    \ then\n        echo \"true\"\n        return\n    fi\n    # If the third side\
    \ is less than the first and equal to the second\n    # then return true\n   \
    \ if [ \"$side2\" -lt \"$side1\" ] && [ \"$side2\" -eq \"$side3\" ]; then\n  \
    \      echo \"true\"\n        return\n    fi\n    # If the third side is less\
    \ than the first and equal to the second\n    # then return true\n    if [ \"\
    $side2\" -lt \"$side1\" ] && [ \"$side2\" -lt \"$side3\" ]; then\n        echo\
    \ \"false\"\n        return\n    fi\n    # If the third side is greater than ",
  '    (( $1 + $2 + $3 )) -eq $(( $1 + $2 - $3 ))', "\tleft=$1\n\tright=$2\n\tbottom=$3\n\
    \t\n\tif [ \"$left\" == \"$right\" ] || [ \"$left\" == \"$bottom\" ] || [ \"$right\"\
    \ == \"$bottom\" ]; then\n\t\treturn 0\n\tfi\n\t\n\tside=$(( $right - $left ))\n\
    \t\n\tif [ \"$side\" == \"$bottom\" ] || [ \"$side\" == \"$right\" ]; then\n\t\
    \treturn 1\n\tfi\n\t\n\techo \"$left $right $bottom\"\n\t\n\txtermHeight=$(screen\
    \ -dmS right_angle_triangle bash -c \"tput lines\")\n\t\n\techo \"$left $right\
    \ $bottom\" | tr \" \" \"\\n\" | while read line\n\tdo\n\t\techo \"$line\" | awk\
    \ '{printf \"%s \", $0}'\n\t\tsleep 0.5\n\t\t(( line++ ))\n\tdone\n\techo \"$xtermHeight\
    \ $line\" | tr \" \" \"\\n\" | while read line\n\tdo\n\t\techo \"$line\" | awk\
    \ '{printf \"%s \", $0}'\n\t\tsleep 0.5\n\t\t(( line++ ))\n\tdone\n\t\n\t\n\t\
    xtermHeight=$(screen -dmS right_angle_triangle bash -c \"tput lines\")\n\t\n\t\
    echo \"$left $right $bottom\" | tr \" \" \"\\n\" | while read line\n\tdo\n\t\t\
    echo \"$line\" | awk '{printf \"%s \", $0}'\n\t\tsleep 0.5\n\t\t(( line++ ))\n\
    \tdone\n\techo \"$xtermHeight $line\" | tr \" \" \"\\n\" | while read line\n\t\
    do\n\t\techo \"$line\" | awk '{printf \"%s \", $0}'\n\t\tsleep 0.5\n\t\t(( line++\
    \ ))\n\tdone\n\t", "    local side1=$1\n    local side2=$2\n    local side3=$3\n\
    \n    if [ $side1 -eq 0 ]; then\n        echo \"The length of side1 cannot be\
    \ 0.\"\n        return 1\n    fi\n    if [ $side2 -eq 0 ]; then\n        echo\
    \ \"The length of side2 cannot be 0.\"\n        return 1\n    fi\n    if [ $side3\
    \ -eq 0 ]; then\n        echo \"The length of side3 cannot be 0.\"\n        return\
    \ 1\n    fi\n    if [ $side1 -eq $side2 ]; then\n        echo \"The length of\
    \ side1 cannot be equal to side2.\"\n        return 1\n    fi\n    if [ $side1\
    \ -eq $side3 ]; then\n        echo \"The length of side1 cannot be equal to side3.\"\
    \n        return 1\n    fi\n    if [ $side2 -eq $side3 ]; then\n        echo \"\
    The length of side2 cannot be equal to side3.\"\n        return 1\n    fi\n\n\
    \    if [ $side1 -eq 0 ] || [ $side2 -eq 0 ] || [ $side3 -eq 0 ]; then\n     \
    \   echo \"At least one of the sides is zero.\"\n        return 1\n    fi\n\n\
    \    local sides=$((side1 + side2 + side3))\n    local answer=\"yes\"\n    if\
    \ [ $sides -lt 45 ]; then\n        if [ $side1 -lt $side2 ]; then\n          \
    \  if [ $side2 -lt $side3 ]; then\n                answer=\"no\"\n           \
    \ fi\n        fi\n    fi\n    echo $answer", "  declare -a sides\n  sides=(${@:3})\n\
    \  (( ${#sides[@]} <= 2 ))\n  (( ${#sides[@]} != 3 ))\n\n  # $sides[0] and $sides[1]\
    \ are equal\n  (( ${sides[0]} == ${sides[1]} ))\n\n  # $sides[2] greater than\
    \ $sides[1]\n  (( ${sides[2]} > ${sides[1]} ))\n\n  # $sides[2] greater than $sides[0]\n\
    \  (( ${sides[2]} > ${sides[0]} ))\n\n  # $sides[0] greater than $sides[1] greater\
    \ than $sides[2]\n  (( ${sides[0]} > ${sides[1]} && ${sides[1]} > ${sides[2]}\
    \ ))\n\n  # return $true or $false\n  [[ \"${sides[0]}${sides[1]}${sides[2]}\"\
    \ =~ ^[+-]?[0-9]+\\.[0-9]+$ ]]", "    # If the length of three sides are the same,\
    \ it's a right angle triangle.\n    if [ $1 == $2 ] && [ $2 == $3 ]; then\n  \
    \      echo true\n    else\n        echo false\n    fi", "  local a b c d n\n\
    \  a=$1\n  b=$2\n  c=$3\n  if [[ $a -ge 0 ]] && [[ $b -ge 0 ]] && [[ $c -ge 0\
    \ ]]; then\n    if [[ $a == $b || $b == $c || $c == $a ]]; then\n      echo \"\
    true\"\n    else\n      n=$(( ((a < b) ? (a <= c) : (b <= c) ))\n      if [[ $n\
    \ -eq 0 ]]; then\n        echo \"false\"\n      else\n        echo \"true\"\n\
    \      fi\n    fi\n  else\n    echo \"false\"\n  fi", "  # Calculate the length\
    \ of the three sides\n  length1=$1\n  length2=$2\n  length3=$3\n  \n  if [ $length1\
    \ -gt $length2 ]; then\n    if [ $length1 -gt $length3 ]; then\n      if [ $length2\
    \ -gt $length3 ]; then\n        echo true\n      else\n        echo false\n  \
    \    fi\n    else\n      echo false\n    fi\n  else\n    if [ $length2 -gt $length3\
    \ ]; then\n      echo false\n    else\n      echo true\n    fi\n  fi", "  local\
    \ num_1=$1\n  local num_2=$2\n  local num_3=$3\n  if [ \"$num_1\" -le \"$num_2\"\
    \ ] || [ \"$num_1\" -le \"$num_3\" ]; then\n      return false\n  fi\n  if [ \"\
    $num_2\" -le \"$num_3\" ]; then\n      return false\n  fi\n  # All checks passed\n\
    \  return true", "  local length1=${1:--}\n  local length2=${2:--}\n  local length3=${3:--}\n\
    \  local result\n  \n  if (( length1 -le 0 ) || ( length2 -le 0 ) || ( length3\
    \ -le 0 )) ; then\n    echo \"Illegal lengths passed. Value out of range\"\n \
    \   exit 1\n  fi\n  \n  if (( length1 < length2 ) && ( length2 < length3 )) ;\
    \ then\n    result=true\n  else\n    result=false\n  fi\n  \n  echo $result",
  "  if [ \"$1\" -gt \"$3\" ]; then\n    echo -e \"$1  $2  $3\\n  Triangle is not\
    \ right angled.\" >&2\n  else\n    echo \"$1  $2  $3\\n  Triangle is right angled.\"\
    \ >&2\n  fi", "    local side1=\"${1}\"\n    local side2=\"${2}\"\n    local side3=\"\
    ${3}\"\n    \n    local side1_length=$(echo \"${side1}\" | wc -c)\n    local side2_length=$(echo\
    \ \"${side2}\" | wc -c)\n    local side3_length=$(echo \"${side3}\" | wc -c)\n\
    \n    local is_right_angled_triangle=\"true\"\n    if [ ${side1_length} -gt ${side2_length}\
    \ ] && [ ${side1_length} -gt ${side3_length} ]; then\n        local left_side=$(echo\
    \ \"${side1}\" | cut -d \".\" -f1)\n        local right_side=$(echo \"${side1}\"\
    \ | cut -d \".\" -f2)\n        local two_sides=$(echo \"${side1}\" | cut -d \"\
    .\" -f3)\n        \n        local angle_in_rad_left=\"$(echo \"${two_sides}*180/${side1_length}\"\
    \ | bc -l)\"\n        local angle_in_rad_right=\"$(echo \"${left_side}*180/${side2_length}\"\
    \ | bc -l)\"\n        local angle_in_rad_angle=\"$(echo \"${right_side}*180/${side3_length}\"\
    \ | bc -l)\"\n        \n        if [ \"${angle_in_rad_left}\" -lt \"${angle_in_rad_angle}\"\
    \ ] || [ \"${angle_in_rad_right}\" -lt \"${angle_in_rad_angle}\" ]; then\n   \
    \         echo \"false\"\n        else\n            echo \"true\"\n        fi\n\
    \    fi", "    local side_length=\"$1\"\n    local side_length2=\"$2\"\n    local\
    \ side_length3=\"$3\"\n\n    local length=\"$( echo \"$side_length * $side_length2\
    \ + $side_length3 * $side_length3 \" | bc )\"\n    local length2=\"$( echo \"\
    $side_length * $side_length3 \" | bc )\"\n    local length3=\"$( echo \"$side_length2\
    \ * $side_length2 \" | bc )\"\n\n    [[ \"$length\" -le \"$length2\" && \"$length\"\
    \ -le \"$length3\" ]] || return 1\n\n    return 0", "    (( $1 )) || (( $1 ))\
    \ || (( $1 ))\n    (( $2 )) || (( $2 )) || (( $2 ))\n    (( $3 )) || (( $3 ))\
    \ || (( $3 ))\n    local a=$(eval echo \"$1\" \\* $1)\n    local b=$(eval echo\
    \ \"$2\" \\* $1)\n    local c=$(eval echo \"$3\" \\* $1)\n    local d=$(eval echo\
    \ \"$1\" \\* $2)\n    local e=$(eval echo \"$2\" \\* $2)\n    local f=$(eval echo\
    \ \"$3\" \\* $2)\n    local g=$(eval echo \"$1\" \\* $3)\n    local h=$(eval echo\
    \ \"$2\" \\* $3)\n    local i=1\n    while [ $i -le 6 ]; do\n        local j=$(eval\
    \ echo \"$i\" \\* $i)\n        local k=$(eval echo \"$j\" \\* $i)\n        local\
    \ l=$(eval echo \"$j\" \\* $j)\n        local m=$(eval echo \"$i\" \\* $j)\n \
    \       if [ $l -eq $k ]; then\n            if [ $l -eq $m ]; then\n         \
    \       return 0\n            fi\n        elif [ $l -eq $m ]; then\n         \
    \   if [ $l -eq $e ]; then\n                return 0\n            fi\n       \
    \ fi\n        i=$(( i + 1 ))\n    done\n    return 1", "  (( $1 == $3 )) && return\
    \ 0\n  (( $1 == $2 )) && return 1\n  (( $1 == $3 )) && return 0", "  local length1\
    \ length2 length3\n  local i j\n\n  length1=$1; length2=$2; length3=$3\n\n  if\
    \ (( length1 < length2 )); then\n    length1=length2; length2=length3; length3=length1\n\
    \  fi\n  if (( length2 < length3 )); then\n    length2=length3; length3=length1;\
    \ length1=length2\n  fi\n\n  for ((i=length1; i<length2; i++))\n  do\n    for\
    \ ((j=length3; j<length2; j++))\n    do\n      if((j > i)) then\n        [ $i\
    \ == $j ] && return 0\n      fi\n    done\n  done\n  return 1", "  local side1=$1\n\
    \  local side2=$2\n  local side3=$3\n  local sum=$(( side1 + side2 + side3 ))\n\
    \  local side1=$(echo \"$side1\" | bc)\n  local side2=$(echo \"$side2\" | bc)\n\
    \  local side3=$(echo \"$side3\" | bc)\n  local total=$(( side1 + side2 + side3\
    \ ))\n  local sum=$(( $sum - total ))\n  echo \"$(($sum >= 0)) || $(($sum < 0))\"",
  "    (( $1 != $2 )) && return 0;\n    (( $1 != $3 )) && return 0;\n    (( $2 !=\
    \ $3 )) && return 0;\n    (( $1 == 0 )) && return 1;\n    (( $1 == 1 )) && return\
    \ 1;\n    (( $1 == 2 )) && return 1;\n    (( $2 == 1 )) && return 1;\n    (( $2\
    \ == 2 )) && return 1;\n    (( $2 == 3 )) && return 1;\n    (( $3 == 1 )) && return\
    \ 1;\n    (( $3 == 2 )) && return 1;\n    (( $3 == 3 )) && return 1;", "    local\
    \ side1_length=$1\n    local side2_length=$2\n    local side3_length=$3\n    local\
    \ sum=$((side1_length+side2_length+side3_length))\n    local test=$((sum%2))\n\
    \    if ((test == 0)); then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi", "  local side1=$1\n  local side2=$2\n  local side3=$3\n  if\
    \ [ -z \"$side1\" ] || [ -z \"$side2\" ] || [ -z \"$side3\" ]; then\n    echo\
    \ \"Usage: $(basename $0) <int 1> <int 2> <int 3>\"\n    exit 0\n  fi\n  if [\
    \ \"$side1\" -gt \"$side2\" ] || [ \"$side1\" -gt \"$side3\" ] || [ \"$side2\"\
    \ -gt \"$side3\" ]; then\n    echo \"Usage: $(basename $0) <int 1> <int 2> <int\
    \ 3>\"\n    exit 0\n  fi\n  local opposite=0\n  if [ \"$side1\" -eq \"$side2\"\
    \ ]; then opposite=1; fi\n  if [ \"$side2\" -eq \"$side3\" ]; then opposite=1;\
    \ fi\n  if [ \"$opposite\" -eq 0 ]; then\n    if [ \"$side1\" -eq \"$side3\" ];\
    \ then return 0 ; fi\n    return 1\n  else\n    if [ \"$side2\" -eq \"$side3\"\
    \ ]; then return 0 ; fi\n    return 1\n  fi", "  len1=$(echo \"$1\" | wc -w)\n\
    \  len2=$(echo \"$2\" | wc -w)\n  len3=$(echo \"$3\" | wc -w)\n  if (( $len1 ==\
    \ $len2 )) && (( $len1 == $len3 )); then\n    echo true\n  else\n    echo false\n\
    \  fi", "  local l1 l2 l3\n  l1=${1:-0}\n  l2=${2:-0}\n  l3=${3:-0}\n\n  # Triangle\
    \ is right-angle if length sides equal 180 or 90.\n  if [ $l1 -eq 180 ] && [ $l2\
    \ -eq 90 ] && [ $l3 -eq 90 ];\n  then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi", "\ttriangle_length=$1\n\tside_length=$2\n\tside_length2=$3\n\n\
    \t# Check if the triangle is right angled triangle\n\t# If the triangle is right\
    \ angled triangle then \n\t# the length of the side must be greater than or equal\
    \ to the \n\t# length of the other two sides\n\tif ((triangle_length >= side_length)\
    \ && \n\t\t(triangle_length >= side_length2)) {\n\t\t# If the triangle is not\
    \ right angled triangle then return false\n\t\treturn false\n\t} else {\n\t\t\
    # If the triangle is right angled triangle\n\t\t# Calculate the area of the triangle\
    \ and \n\t\t# compare it with side lengths\n\t\ttriangle_area=$(awk 'BEGIN{print\
    \ ($1 / $2 * $3)}')\n\t\tif [[ $triangle_area -lt $side_length ]] ; then\n\t\t\
    \treturn true\n\t\telse\n\t\t\treturn false\n\t\tfi\n\tfi", "    \n    length1=$1\n\
    \    length2=$2\n    length3=$3\n    \n    if ((length1 > length2 && length1 >\
    \ length3 && length2 > length3) && (length1 == length2 && length2 == length3)\
    \ && (length3 == length2)) {\n        return true;\n    }\n    else\n        return\
    \ false;", "  # declare -l sum=$1\n  # declare -l len1=$2\n  # declare -l len2=$3\n\
    \  echo $(( (( $1 + $2 ) / 2 ) - ( $1 - ( $2 + $3 ) / 2 ) ))", "\t(( \"$1\" >=\
    \ 1 && \"$1\" <= 3 )) && \n\t(( \"$2\" >= 1 && \"$2\" <= 3 )) && \n\t(( \"$3\"\
    \ >= 1 && \"$3\" <= 3 )) && \n\t(( \"$2\" <= \"$1\" && \"$1\" <= \"$3\" )) ||\
    \ \n\t(( \"$1\" <= \"$2\" && \"$2\" <= \"$3\" )) || \n\t(( \"$1\" <= \"$3\" &&\
    \ \"$3 <= \"$2\" )) || \n\t(( \"$2\" <= \"$3\" && \"$3 <= \"$1\" )) || \n\t((\
    \ \"$1\" == 0 )) || \n\t(( \"$2\" == 0 )) || \n\t(( \"$3\" == 0 )) || \n\t(( \"\
    $1\" > \"$3\" && \"$2\" > \"$3\" && \"$3\" > \"$2\" )) || \n\t(( \"$1\" > \"$2\"\
    \ && \"$2\" >> \"$3\" && \"$3\" > \"$2\" )) || \n\t(( \"$1\" > \"$3\" && \"$2\"\
    \ >> \"$3\" && \"$3\" > \"$1\" )) || \n\t(( \"$1\" > \"$2\" && \"$2\" >> \"$3\"\
    \ && \"$3\" > \"$1\" )) || \n\t(( \"$1\" > \"$3\" && \"$3\" >> \"$2\" && \"$2\"\
    \ > \"$1\" )) || \n\t(( \"$1\" > \"$2\" && \"$3\" >> \"$2\" && \"$2\" > \"$1\"\
    \ )) || \n\t(( \"$1\" > \"$3\" && \"$3\" >> \"$2\" && \"$3\" > \"$1\" )) || \n\
    \t(( \"$2\" > \"$3\" && \"$1\" >> \"$3\" && \"$3\" > \"$2\" )) || \n\t(( \"$2\"\
    \ > \"$1\" && \"$1\" >> \"$3\" && \"$3\" > \"$2\" )) || \n\t(( \"$2\" > \"$3\"\
    \ && \"$3\" >> \"$1\" && \"$1\" > \"$2\" )) || \n\t(( \"$2\" > \"$1\" && \"$3\"\
    \ >> \"$1\" && \"$1\" > \"$2\" )) || \n\t(( \"$2\" > \"$3\" && \"$3\" >> \"$1\"\
    \ && \"$1\" > \"$2\" )) || \n\t(( \"$3\" > \"$1\" && \"$1\" >> \"$2\" && \"$2\"\
    \ > \"$3\" )) || \n\t(( \"$3\" > \"$2\" && \"$2\" >> \"$1\" && \"$1\" > \"$3\"\
    \ )) || \n\t(( \"$3\" > \"$1\" && \"$1\" >> \"$2\" && \"$2\" > \"$3\" )) || \n\
    \t(( \"$3\" > \"$2\" && \"$2\" >> \"$1\" && \"$1\" > \"$", "  local side n1 n2\
    \ n3 num1 num2 num3 sum\n  side=$1\n  n1=$(echo ${side} | cut -d' ' -f1)\n  n2=$(echo\
    \ ${side} | cut -d' ' -f2)\n  n3=$(echo ${side} | cut -d' ' -f3)\n  if [ $n1 -eq\
    \ $n2 -a $n1 -eq $n3 ]; then\n     return 0\n  fi\n  if [ $n2 -eq $n3 -a $n2 -eq\
    \ $n1 ]; then\n     return 0\n  fi\n  if [ $n3 -eq $n1 -a $n3 -eq $n2 ]; then\n\
    \     return 0\n  fi\n  sum=$(( ((n1**2) + (n2**2) + (n3**2)) ** (1/2) ))\n  if\
    \ [ $sum -eq $n1 ]; then\n     return 0\n  fi\n  if [ $sum -eq $n2 ]; then\n \
    \    return 0\n  fi\n  if [ $sum -eq $n3 ]; then\n     return 0\n  fi\n  return\
    \ 1", "    local side1=$1\n    local side2=$2\n    local side3=$3\n    \n    [[\
    \ -z $side1 ]] || [[ -z $side2 ]] || [[ -z $side3 ]] || [[ -z $side1 ]] || [[\
    \ -z $side2 ]] || [[ -z $side3 ]] || { echo \"ERROR: Missing Arguments\" >&2;\
    \ exit 1; }\n    local result=1\n    \n    # Check if three sides are equal\n\
    \    if [ \"$side1\" -eq \"$side2\" ] && [ \"$side1\" -eq \"$side3\" ]; then\n\
    \        result=$result\n    elif [ \"$side1\" -eq \"$side2\" ] || [ \"$side1\"\
    \ -eq \"$side3\" ]; then\n        result=$result\n    else\n        if [ \"$side1\"\
    \ -le \"$side2\" ] && [ \"$side2\" -le \"$side3\" ]; then\n            if [ \"\
    $side1\" -eq \"$side3\" ] && [ \"$side2\" -eq \"$side1\" ]; then\n           \
    \     result=$result\n            else\n                result=$result\n     \
    \       fi\n        fi\n    fi\n    \n    return $result", "\t(( $1 )) && {\n\t\
    \t(( $2 )) && {\n\t\t\t(( $3 )) && {\n\t\t\t\tif (( $1 == $2 && $1 == $3 )) {\n\
    \t\t\t\t\treturn true;\n\t\t\t\t} else if (( $1 == $3 && $2 == $3 )) {\n\t\t\t\
    \t\treturn true;\n\t\t\t\t} else if (( $2 == $3 )) {\n\t\t\t\t\treturn false;\n\
    \t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\
    \t\treturn false;\n\t}", "  local side1 side2 side3\n  side1=$(eval \"$1\")\n\
    \  side2=$(eval \"$2\")\n  side3=$(eval \"$3\")\n  if (( $(echo \"$side1*$side2+$side2*$side3-$side1*$side3\"\
    \ | bc -l) > 0 ))\n  then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "\t(( $1 % 2 )); local n=$(($1 / 2))\n\t(( $2 % 2 )); local k=$(($2 / 2))\n\t((\
    \ $3 % 2 )); local l=$(($3 / 2))\n\tif (( $l != $((2 * k)) )) ; then\n\t\tif ((\
    \ $k == $n )) ; then\n\t\t\tif (( $l < $n )) ; then\n\t\t\t\treturn true\n\t\t\
    \telif (( $l > $n )) ; then\n\t\t\t\treturn false\n\t\t\telif (( $n == $((3 *\
    \ k)) )) ; then\n\t\t\t\tif (( $k > $n )) ; then\n\t\t\t\t\treturn true\n\t\t\t\
    \telif (( $k == $n )) ; then\n\t\t\t\t\treturn false\n\t\t\t\tfi\n\t\t\tfi\n\t\
    \tfi\n\tfi\n\treturn false", "\tif [[ $(($1) > $(($2 - $3)) )) ]] ; then\n\t\t\
    return \"false\"\n\telse\n\t\treturn \"true\"\n\tfi", "  local l1 l2\n  read l1\
    \ < <(perl -MPOSIX=sprintf -E '/(%d+)/ && say sprintf \"%d\", $1'\"$2\"' |wc -l)\n\
    \  read l2 < <(perl -MPOSIX=sprintf -E '/(%d+)/ && say sprintf \"%d\", $3'\"$2\"\
    ' |wc -l)\n  (( $l1 == $l2 ))", "   length1=$1\n   length2=$2\n   length3=$3\n\
    \   if [ $length1 != $length2 -o $length1 != $length3 -o $length2 != $length3\
    \ ]\n   then\n      echo \"false\"\n   else\n      echo \"true\"\n   fi", "\t\
    local side1=$1\n\tlocal side2=$2\n\tlocal side3=$3\n\n\t(( $(eval 'echo $(( $(echo\
    \ $(( $(eval \"echo $side1$side2$side3 \"| wc -l\") - $(echo $(( $(eval \"echo\
    \ $side1$side2$side3 \"| tr a-z A-Z\") - $(eval \"echo $side2$side3$side1 \"|\
    \ tr a-z A-Z\" ) ) ) ) ) )) '))  ))", "    if [[ \"$1\" == \"$2\" && \"$3\" >\
    \ \"$2\" ]]; then \n        echo \"false\";\n    else\n        echo \"true\";\n\
    \    fi", "    local l1 l2 l3\n    l1=$1\n    l2=$2\n    l3=$3\n    if [ $l1 -le\
    \ $l2 -o $l2 -le $l3 -o $l3 -le $l1 ]; then \n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "  local len1=$(( $1 == $2 )) && return 0\n\
    \  local len2=$(( $1 == $3 )) && return 0\n  local len3=$(( $1 == $4 )) && return\
    \ 0\n  local len4=$(( $1 == $5 )) && return 0\n  return $(( ( len1 == 0 || len2\
    \ == 0 || len3 == 0 || len4 == 0 ) && return 0 ))", "    local i\n    local side1=$1\n\
    \    local side2=$2\n    local side3=$3\n    local result\n\n    # check whether\
    \ $side1 and $side2 are equal\n    if [ \"$side1\" != \"$side2\" ]; then\n   \
    \     result=\"false\"\n        return\n    fi\n\n    # check whether $side1 and\
    \ $side2 are equal\n    if [ \"$side1\" == \"$side2\" ]; then\n        result=\"\
    false\"\n        return\n    fi\n\n    # check if $side1 and $side2 are equal\n\
    \    if [ \"$side1\" == \"$side2\" ]; then\n        result=\"false\"\n       \
    \ return\n    fi\n\n    # check whether $side1 and $side3 are equal\n    if [\
    \ \"$side1\" != \"$side3\" ]; then\n        result=\"false\"\n        return\n\
    \    fi\n\n    # check whether $side2 and $side3 are equal\n    if [ \"$side2\"\
    \ != \"$side3\" ]; then\n        result=\"false\"\n        return\n    fi\n\n\
    \    # check whether $side1 and $side3 are equal\n    if [ \"$side1\" == \"$side3\"\
    \ ]; then\n        result=\"false\"\n        return\n    fi\n\n    # check whether\
    \ $side2 and $side3 are equal\n    if [ \"$side2\" == \"$side3\" ]; then\n   \
    \     result=\"true\"\n        return\n    fi\n\n    for i in $(seq 0 $(($(echo\
    \ \"$side1 * $side2 + $side3 * $side1\" | bc -l) / $side1))); do\n        if [\
    \ \"$side1\" -gt \"0\" ]; then\n            if [ \"$side2\" -eq \"0\" ]; then\n\
    \                if [ \"$side3\" -eq \"0\" ]; then\n                    if [ \"\
    $i\" -eq \"$(echo \"$side1 * $side3 + $side2 * $side2\" | bc -l)\" ]; then\n \
    \                       result=\"true\"\n                    fi\n            \
    \    fi\n            else\n                if [ \"$side3\" -eq \"0\" ]; then\n\
    \                    if [ \"$i\" -eq \"$(echo \"$side1 * $side2 + $side3 * $side3\"\
    \ | bc -l)\" ]; then\n                        result=\"true\"\n              \
    \      fi\n                fi\n            fi\n        fi\n    done\n    return",
  "\tlocal length1=$1\n\tlocal length2=$2\n\tlocal length3=$3\n\tlocal min=$(($length1\
    \ < $length2 ? $length1 : $length2))\n\tlocal max=$(($length1 < $length3 ? $length1\
    \ : $length3))\n\tlocal sum=$(($length1 + $length2 + $length3))\n\tlocal sum2=$(($sum\
    \ % $max))\n\tlocal sum3=$(($sum2 % $min))\n\tlocal diff=$(($sum3 - $sum2))\n\t\
    if [ $diff -lt 0 ]; then \n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi",
  "    local len1=$1\n    local len2=$2\n    local len3=$3\n    if (( $len2 > $len1\
    \ )); then\n        local m=$(( $len1 / 2 ))\n        len1=$len2\n        len2=$m\n\
    \    fi\n    if (( $len3 > $len1 )); then\n        local m=$(( $len2 / 2 ))\n\
    \        len1=$len3\n        len3=$m\n    fi\n    local val1=$(( len1 * len1 *\
    \ len1 ))\n    local val2=$(( len2 * len2 * len2 ))\n    local val3=$(( len3 *\
    \ len3 * len3 ))\n    if (( $val1 == $val2 )); then\n        if (( $val3 == $val1\
    \ )); then\n            if (( $len1 == 3 )); then\n                return true\n\
    \            else\n                return false\n            fi\n        else\n\
    \            if (( $len2 == 3 )); then\n                return true\n        \
    \    else\n                return false\n            fi\n        fi\n    else\n\
    \        if (( $val2 == $val3 )); then\n            if (( $len1 == 3 )); then\n\
    \                return true\n            else\n                return false\n\
    \            fi\n        else\n            if (( $val3 == $val1 )); then\n   \
    \             if (( $len2 == 3 )); then\n                    return true\n   \
    \             else\n                    return false\n                fi\n   \
    \         else\n                if (( $len3 == 3 )); then\n                  \
    \  return true\n                else\n                    return false\n     \
    \           fi\n            fi\n        fi\n    fi", "\tlocal len1 len2 len3 sum\n\
    \n\tlen1=$1\n\tlen2=$2\n\tlen3=$3\n\tsum=$((len1+len2+len3))\n\n\tif ((len1==len2)\
    \ && (len2==len3)) {\n\t\techo \"true\"\n\t} else {\n\t\techo \"false\"\n\t}",
  '  echo "$1"*"$2" | grep -q . && echo "true" || echo "false"', "  local side_1_length=$1\n\
    \  local side_2_length=$2\n  local side_3_length=$3\n\n  if [[ \"$side_1_length\"\
    \ -gt \"$side_2_length\" ]] || [[ \"$side_2_length\" -gt \"$side_3_length\" ]]\
    \ || [[ \"$side_3_length\" -gt \"$side_1_length\" ]]; then\n    return false\n\
    \  fi\n\n  local side_1\n  local side_2\n  local side_3\n  side_1=$((side_1_length\
    \ ** 2))\n  side_2=$((side_2_length ** 2))\n  side_3=$((side_3_length ** 2))\n\
    \n  if [[ $side_1 -eq 0 || $side_2 -eq 0 || $side_3 -eq 0 ]]; then\n    return\
    \ false\n  fi\n\n  local angle_1\n  local angle_2\n  local angle_3\n\n  angle_1=$(($(echo\
    \ \"$side_1 ** 0.5 + $side_3 ** 0.5 - $side_2 ** 0.5\" | bc -l) / 2.0))\n  angle_2=$(($(echo\
    \ \"$side_1 ** 0.5 - $side_3 ** 0.5 + $side_2 ** 0.5\" | bc -l) / 2.0))\n  angle_3=$(($(echo\
    \ \"$side_1 ** 0.5 - $side_3 ** 0.5 - $side_2 ** 0.5\" | bc -l) / 2.0))\n\n  local\
    \ triangle_is_right_angle\n  if [[ \"$angle_1\" -ge \"$angle_2\" ]]; then\n  \
    \  if [[ \"$angle_2\" -ge \"$angle_3\" ]]; then\n      triangle_is_right_angle=\"\
    true\"\n    else\n      triangle_is_right_angle=\"false\"\n    fi\n  else\n  \
    \  if [[ \"$angle_3\" -ge \"$angle_2\" ]]; then\n      triangle_is_right_angle=\"\
    false\"\n    else\n      triangle_is_right_angle=\"true\"\n    fi\n  fi\n  return\
    \ $triangle_is_right_angle", "  declare -a arr=(\"$@\")\n\n  ((${arr[1]} != ${arr[2]})\
    \ && return 0)\n  ((${arr[1]} != ${arr[3]}) && return 0)\n\n  if [[ ${arr[2]}\
    \ -eq ${arr[3]} ]]; then\n    return 1\n  else\n    return 0\n  fi", "    local\
    \ length1=${1}\n    local length2=${2}\n    local length3=${3}\n    # Check the\
    \ length of the sides\n    if (( ${length1} < 0 || ${length1} > 91 )); then\n\
    \        echo \"Error: Length of side 1 should be between 0 and 90\"\n       \
    \ return 1\n    fi\n    if (( ${length2} < 0 || ${length2} > 91 )); then\n   \
    \     echo \"Error: Length of side 2 should be between 0 and 90\"\n        return\
    \ 1\n    fi\n    if (( ${length3} < 0 || ${length3} > 91 )); then\n        echo\
    \ \"Error: Length of side 3 should be between 0 and 90\"\n        return 1\n \
    \   fi\n    # Calculate the length of the sides\n    local side1_length=$(($length1\
    \ * $length2))\n    local side2_length=$(($length2 * $length3))\n    local side3_length=$(($length3\
    \ * $length1))\n    # Check if they are equal\n    if [[ $side1_length == $side2_length\
    \ ]] ; then\n        echo \"Error: Side 2 is equal to Side 1\"\n        return\
    \ 1\n    fi\n    if [[ $side1_length == $side3_length ]] ; then\n        echo\
    \ \"Error: Side 3 is equal to Side 1\"\n        return 1\n    fi\n    if [[ $side2_length\
    \ == $side3_length ]] ; then\n        echo \"Error: Side 3 is equal to Side 2\"\
    \n        return 1\n    fi\n    # Check if side 3 is 90 degree\n    if [[ ${side3_length}\
    \ == 90 ]] ; then\n        echo \"Error: Side 3 is 90 degree\"\n        return\
    \ 1\n    fi\n    # Check if side 1 is 90 degree\n    if [[ ${side1_length} ==\
    \ 90 ]] ; then\n        echo \"Error: Side 1 is 90 degree\"\n        return 1\n\
    \    fi\n    # Check if side 2 is 90 degree\n    if [[ ${side2_length} == 90 ]]\
    \ ; then\n        echo \"Error: Side 2 is 90 degree\"\n        return 1\n    fi\n\
    \    # Check if the triangle is right angled or not\n    if (( ${side1_length}\
    \ > ${side2_length} && ${side1_length} > ${side3_length} )) ; then\n        echo\
    \ \"Error: Triangle is not right angled\"\n        return 1\n    fi\n    if ((\
    \ ${side2_length} > ${side1_length} && ${side2_length} > ${side3_length} )) ;\
    \ then\n        echo \"Error: Triangle is not right angled\"\n        return 1\n\
    \    fi\n    if (( ${side3_length} > ${side1_length} && ${side3_length} > ${side2_length}\
    \ )) ; then\n        echo \"Error: Triangle is not right angled\"\n", "  local\
    \ a=$(expr $1 \\* $2)\n  local b=$(expr $1 \\* $3)\n  local c=$(expr $b \\* $2)\n\
    \n  # We only care about the case when the product is less than the other two\
    \ lengths\n  if [ $c -lt $a ]; then\n    return 0\n  fi\n  if [ $c -lt $b ]; then\n\
    \    return 0\n  fi\n  return 1", "  if [ $# -lt 3 ]; then\n    echo \"Usage:\
    \ $(basename $0) <number of sides of triangle>\"\n    return\n  fi\n  local a=$1\n\
    \  local b=$2\n  local c=$3\n  if [ $a -gt $b ]; then\n    if [ $a -gt $c ]; then\n\
    \      echo \"$a is greater than $b and $c is greater than $b\"\n      return\
    \ 1\n    else\n      echo \"$a is greater than $b\"\n      return 0\n    fi\n\
    \  else\n    if [ $b -gt $c ]; then\n      echo \"$b is greater than $a and $c\
    \ is greater than $a\"\n      return 1\n    else\n      echo \"$b is greater than\
    \ $a\"\n      return 0\n    fi\n  fi", "  local side_1=$1\n  local side_2=$2\n\
    \  local side_3=$3\n  if [[ $side_1 -eq $side_3 ]]; then\n    if [[ $side_1 -eq\
    \ $side_2 ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n\
    \  else\n    if [[ $side_2 -eq $side_3 ]]; then\n      echo \"true\"\n    else\n\
    \      echo \"false\"\n    fi\n  fi", "    local a b\n    local c d\n    local\
    \ x y\n    \n    # check validity\n    a=$1\n    b=$2\n    c=$3\n    if [[ -z\
    \ $a ]] || [[ -z $b ]] || [[ -z $c ]] ; then\n        echo \"Usage: $(basename\
    \ ${BASH_SOURCE[0]}) <1st arg> <2nd arg> <3rd arg>\"\n        return 1\n    fi\n\
    \    \n    # check bc usage\n    if [[ -z $(which bc) ]]; then\n        echo \"\
    bc not found in $PATH\"\n        return 1\n    fi\n    \n    # calculate area\
    \ of triangle\n    x=$(bc <<< \"scale=0; ($a*$a + $b*$b - $c*$c -$a*$c + $b*$a\
    \ + $c*$b)/2;\")\n    y=$(bc <<< \"scale=0; ($a*$a + $b*$b +$c*$c -$a*$c - $b*$a\
    \ - $c*$b)/2;\")\n    \n    # return true if triangle is right\n    if [[ $(bc\
    \ <<< \"scale=0; ($x-$a)*($x-$a) + ($y-$b)*($y-$b) >= 0;\") -gt 0 ]]; then\n \
    \       echo 1\n    else\n        echo 0\n    fi", "    local i1=\"$1\"\n    local\
    \ i2=\"$2\"\n    local i3=\"$3\"\n    local side_length=$(( i1 + i2 + i3 ))\n\
    \    if [ $i1 -eq 0 ] || [ $i2 -eq 0 ] || [ $i3 -eq 0 ]\n    then\n        echo\
    \ \"$((i1>i2? i1:i2)>i3? i1:i2):$((i1>i2? i2:i3)>i3? i2:i3):$i3\" > \"output\"\
    \n    else\n        if [ $side_length -lt $(( i2 * i3 )) ]\n        then\n   \
    \         echo \"$((i1>i2? i1:i2)>i3? i1:i2):$((i1>i2? i2:i3)>i3? i2:i3):$i3\"\
    \ > \"output\"\n        else\n            echo \"$((i1>i2? i1:i2)>i3? i1:i2):$((i1>i2?\
    \ i2:i3)>i3? i2:i3):$i3\"\n            right_angle_triangle $(( i1 * i3 )) $((\
    \ i1 * i2 )) $(( i3 * i2 ))\n        fi\n    fi", "   test -z \"$1\" || return\
    \ 1\n   test -z \"$2\" || return 1\n   test -z \"$3\" || return 1\n   if [ \"\
    $1\" -gt \"$2\" ] && [ \"$1\" -gt \"$3\" ]; then\n      [ \"$2\" -gt \"$3\" ]\
    \ && return 0\n      return 1\n   elif [ \"$2\" -gt \"$3\" ] && [ \"$2\" -gt \"\
    $1\" ]; then\n      [ \"$3\" -gt \"$2\" ] && return 0\n      return 1\n   elif\
    \ [ \"$3\" -gt \"$2\" ] && [ \"$3\" -gt \"$1\" ]; then\n      [ \"$1\" -gt \"\
    $2\" ] && return 0\n      return 1\n   fi\n   return 0", "    # convert input\
    \ into an integer and store in variable\n    local a=$1\n    local b=$2\n    local\
    \ c=$3\n    # calculate side length\n    local side_a=$(( $(awk 'END {print $1}'\
    \ <<<$a) - $(awk 'END {print $1}' <<<$b)))\n    local side_b=$(( $(bwk 'END {print\
    \ $1}' <<<$a) - $(bwk 'END {print $1}' <<<$b)))\n    local side_c=$(( $(cwk 'END\
    \ {print $1}' <<<$a) - $(cwk 'END {print $1}' <<<$b)))\n    # trim negative length\
    \ sides\n    while [[ $side_c -lt 0 ]]; do\n        side_a=$(( $(awk 'END {print\
    \ $1}' <<<$a) - $(awk 'END {print $1}' <<<$b)))\n        side_b=$(( $(bwk 'END\
    \ {print $1}' <<<$a) - $(bwk 'END {print $1}' <<<$b)))\n        side_c=$(( $(cwk\
    \ 'END {print $1}' <<<$a) - $(cwk 'END {print $1}' <<<$b)))\n    done\n    # calculate\
    \ the hypotenuse\n    local hypo=$(( $(awk 'END {print $1}' <<<$a) * $(awk 'END\
    \ {print $1}' <<<$b)))\n    local denom=$(( $(awk 'END {print $1}' <<<$a) * $(awk\
    \ 'END {print $1}' <<<$b) ))\n    local numer=$(( $(awk 'END {print $1}' <<<$a)\
    \ * $(awk 'END {print $1}' <<<$b) ))\n    # print out the result\n    if [[ $denom\
    \ -eq $numer ]]; then\n        if [ $hypo -eq $side_b ]; then\n            echo\
    \ \"true\"\n        else\n            echo \"false\"\n        fi\n    else\n \
    \       echo \"false\"\n    fi", "    local len1=$1\n    local len2=$2\n    local\
    \ len3=$3\n    local side1\n    local side2\n    local side3\n    if [ $len1 -lt\
    \ $len2 ] && [ $len1 -lt $len3 ] ; then\n        side1=$len1\n        side2=$len2\n\
    \        side3=$len3\n    elif [ $len2 -lt $len3 ] ; then\n        side1=$len2\n\
    \        side2=$len3\n        side3=$len1\n    else\n        side1=$len3\n   \
    \     side2=$len1\n        side3=$len2\n    fi\n    local result=0\n    for ((\
    \ i=1; i<=$(( side1+1 )); i++ )); do\n        for (( j=1; j<=$(( side2+1 )); j++\
    \ )); do\n            for (( k=1; k<=$(( side3+1 )); k++ )); do\n            \
    \    if [ $side1 -eq 1 ] && [ $side2 -eq 1 ] && [ $side3 -eq 1 ]; then\n     \
    \               result=1\n                    break\n                fi\n    \
    \            if [ $i -eq $j ] && [ $j -eq $k ] ; then\n                    result=1\n\
    \                    break\n                fi\n                if [ $k -gt $i\
    \ ] && [ $k -le $side1 ] && [ $j -gt $i ] && [ $j -le $side2 ] && [ $i -gt $j\
    \ ] ; then\n                    result=1\n                    break\n        \
    \        fi\n            done\n        done\n    done\n    if [ $result -eq 1\
    \ ] ; then\n        return 1\n    else\n        return 0\n    fi", "    if [ $#\
    \ -ne 3 ]; then\n        echo \"Usage: $(basename \"$0\") <length1> <length2>\
    \ <length3>\"\n        exit 1\n    fi\n\n    length1=$1\n    length2=$2\n    length3=$3\n\
    \n    if [ $length1 == $length2 ]; then\n        if [ $length2 == $length3 ];\
    \ then\n            # if the first two are equal, then they form a right angled\
    \ triangle\n            echo true\n        else\n            echo false\n    \
    \    fi\n    else\n        echo false\n    fi", "    a=$1\n    b=$2\n    c=$3\n\
    \n    if [ $a -gt $b ] && [ $b -gt $c ]; then\n        echo true\n    else\n \
    \       echo false\n    fi", "  # The two numbers are integer\n  if (( $1 == $2\
    \ )); then \n    # There are no integers\n    return $1\n  fi\n  \n  # The first\
    \ number is an integer\n  (( a = $1 ))\n  # The second number is an integer\n\
    \  (( b = $2 ))\n  # The third number is an integer\n  (( c = $3 ))\n\n  # Two\
    \ sides are equal\n  if (( $a == $b )); then\n    if (( $a == $c )); then\n  \
    \    return 0\n    else\n      return 1\n    fi\n  fi\n\n  # Two sides are different\n\
    \  if (( $a > $b )); then\n    if (( $c > $a )); then\n      return 1\n    else\n\
    \      return 0\n    fi\n  else\n    if (( $c > $b )); then\n      return 1\n\
    \    else\n      return 0\n    fi\n  fi\n", "    local l h\n    for ((l=${1};\
    \ l>=0; l--)); do\n        for ((h=${2}; h>=0; h--)); do\n            if [[ $l\
    \ == $h ]]; then\n                return 0\n            fi\n        done\n   \
    \ done\n    return 1", "    if [ $1 -gt $3 -o $1 -eq 0 -o $2 -eq 0 -o $3 -eq 0\
    \ ]; then\n        echo \"false : $1 $2 $3 \"\n        return 1\n    fi\n    if\
    \ [ $1 -lt $3 -o $1 -eq $3 -o $2 -eq $3 -o $3 -eq $3 ]; then\n        echo \"\
    false : $1 $2 $3 \"\n        return 1\n    fi\n    \n    if [ $1 -lt $2 -o $1\
    \ -eq $2 -o $2 -eq $3 -o $3 -eq $2 ]; then\n        echo \"true : $1 $2 $3 \"\n\
    \        return 0\n    fi\n    \n    if [ $1 -gt $2 -o $1 -eq $2 -o $2 -eq $3\
    \ -o $3 -eq $1 ]; then\n        echo \"true : $1 $2 $3 \"\n        return 0\n\
    \    fi", '    test "$1" -gt 0 && test "$2" -gt 0 && test "$3" -gt 0 && [ "$1"
    -gt "$2" ] && [ "$1" -gt "$3" ] && [ "$2" -gt "$3" ]', "    local l1 l2 l3 i\n\
    \    l1=$(echo \"$1\" | sed 's/[0-9]//g')\n    l2=$(echo \"$2\" | sed 's/[0-9]//g')\n\
    \    l3=$(echo \"$3\" | sed 's/[0-9]//g')\n\n    for i in $(seq 1 \"$l1\"); do\n\
    \        [ \"$((l1 % i))\" -eq \"$l1\" ] && [ -z \"$l2\" ] && return 0\n     \
    \   [ \"$((l2 % i))\" -eq \"$l2\" ] && [ -z \"$l3\" ] && return 0\n        [ \"\
    $((l3 % i))\" -eq \"$l3\" ] && [ -z \"$l1\" ] && return 0\n    done\n\n    [ \"\
    $((l1 % i))\" -eq \"$l1\" ] && [ \"$((l2 % i))\" -eq \"$l2\" ] && [ \"$((l3 %\
    \ i))\" -eq \"$l3\" ] && return 1", '    (( $1 == $2 || $1 == $3 || $2 == $3 ))',
  "  if [ -z \"$1\" -o -z \"$2\" -o -z \"$3\" ]\n  then\n    echo \"Must provide three\
    \ arguments\"\n    return 1\n  fi\n  if [ $(expr $1 \\* $2) -gt $(expr $3 \\*\
    \ $3) ]\n  then\n    echo \"Triangle has invalid sides\"\n    return 1\n  fi\n\
    \  local sideA=$1\n  local sideB=$2\n  local sideC=$3\n  local result=1\n  local\
    \ lengthA=$(expr $sideA \\* $sideA)\n  local lengthB=$(expr $sideB \\* $sideB)\n\
    \  local lengthC=$(expr $sideC \\* $sideC)\n  local angle=$(($(expr $lengthA \\\
    * $lengthB) \\* $(expr $lengthC \\* $lengthA) - $(expr $lengthB \\* $lengthC)))\n\
    \  if [ $angle -lt 0 ]\n  then\n    echo \"Triangle has invalid sides\"\n    return\
    \ 1\n  fi\n  local angle_rad=$(echo \"scale=5; $angle\" | bc)\n  local left_side_rad=$(echo\
    \ \"scale=5; $sideA\" | bc)\n  local right_side_rad=$(echo \"scale=5; $sideC\"\
    \ | bc)\n  local angle_degree=$(echo \"$angle_rad * 180 / 3.14\" | bc)\n  local\
    \ left_side_90_degree=$(echo \"$left_side_rad * 180 / 3.14\" | bc)\n  local right_side_90_degree=$(echo\
    \ \"$right_side_rad * 180 / 3.14\" | bc)\n  if [ \"$angle_degree\" -eq \"$left_side_90_degree\"\
    \ ]\n  then\n    if [ \"$angle_degree\" -eq \"$right_side_90_degree\" ]\n    then\n\
    \      echo \"Triangle has right angle\"\n      return 0\n    else\n      echo\
    \ \"Triangle has invalid sides\"\n      return 1\n    fi\n  else\n    echo \"\
    Triangle has invalid sides\"\n    return 1\n  fi", "    local a b c\n    a=$1\n\
    \    b=$2\n    c=$3\n    # Check that all sides are positive\n    if [ ${a} -lt\
    \ 0 ] || [ ${b} -lt 0 ] || [ ${c} -lt 0 ]; then\n        return false\n    fi\n\
    \    local result\n    result=$(echo \"-${a} -${b} -${c}\"| bc -l)\n    if [ ${result}\
    \ -lt 0 ]; then\n        return false\n    fi\n    if [ ${result} -gt 0 ]; then\n\
    \        return true\n    fi\n    return true", "  local sideA=$1\n  local sideB=$2\n\
    \  local sideC=$3\n  local sumA=$((sideA+sideB))\n  local sumB=$((sideA+sideC))\n\
    \  local sumC=$((sideB+sideC))\n  echo $(( ${sumA} == ${sumB} && ${sumA} == ${sumC}\
    \ ))", "  local length_1=$1\n  local length_2=$2\n  local length_3=$3\n  # If\
    \ the lengths are all equal, return true.\n  if (( $length_1 == $length_2 && $length_2\
    \ == $length_3 )); then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "  local length=$1\n  local side2=$2\n  local side3=$3\n  local angle=$(( $(echo\
    \ \"$side2 - $side3\" | bc -l) / $(echo \"$side2 - $side1\" | bc -l) ))\n\n  if\
    \ [ \"$angle\" -gt 90 ]\n  then\n    echo \"false\"\n  else\n    echo \"true\"\
    \n  fi", "  local side1=$1\n  local side2=$2\n  local side3=$3\n  local a=${side1}\n\
    \  local b=${side2}\n  local c=${side3}\n  if (( $a == 0 )) || (( $b == 0 )) ||\
    \ (( $c == 0 )) ; then\n    return 1\n  fi\n  local is_right_triangle=\n  if ((\
    \ $a == b )); then\n    is_right_triangle=true\n  else\n    if (( $a > b )); then\n\
    \      if (( $b > c )); then\n        is_right_triangle=true\n      else\n   \
    \     is_right_triangle=false\n      fi\n    else\n      if (( $c > b )); then\n\
    \        is_right_triangle=false\n      else\n        is_right_triangle=true\n\
    \      fi\n    fi\n  fi\n  echo $is_right_triangle", "  local side len1=$1 len2=$2\
    \ len3=$3\n  \n  # Check if first side is greater than the second side.\n  if\
    \ ((len1 > len2) && (len2 > len3)) ; then\n    return 0\n  fi\n  \n  # Check if\
    \ second side is greater than the third side.\n  if ((len2 > len3) && (len3 >\
    \ len1)) ; then\n    return 0\n  fi\n  \n  # Check if third side is greater than\
    \ the first side.\n  if ((len3 > len1) && (len1 > len2)) ; then\n    return 0\n\
    \  fi\n\n  # We return true if the sum of the two sides is equal to the product\
    \ of the\n  # two.\n  if ((len1 + len2 + len3) == (len1 * len2 * len3)) ; then\n\
    \    return 1\n  fi\n\n  # We return false otherwise.\n  return 0", "    length=$(echo\
    \ \"$1\"|sed 's/^..//')\n    angle=$(echo \"$2\"|sed 's/^..//')\n    side=$(echo\
    \ \"$3\"|sed 's/^..//')\n    \n    triangle_area=$(echo \"scale=0; $((length*$((sqrt(3)/2))))\"\
    \ | bc)\n    angle=$(echo \"scale=4; $((angle*$((triangle_area/2))))\" | bc)\n\
    \    \n    if (( \"$side\" = \"$length\" && \"$angle\" = \"90\" ) || ( \"$side\"\
    \ = \"$length\" && \"$angle\" = \"-90\" )) {\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    local a=$1\n    local b=$2\n    local c=$3\n\
    \    if [ $a -gt $b ] || [ $a -gt $c ] || [ $b -gt $c ]; then\n        echo \"\
    false\"\n    else\n        local sum=$(( $a + $b + $c ))\n        local num=$(echo\
    \ $sum | bc -l)\n        echo \"$(( $num - $(( $num % $a )) )) $(( $num - $((\
    \ $num % $b )) )) $(( $num - $(( $num % $c )) ))\"\n    fi", "    # Triangle angle\
    \ is right-angled if abs($3)-abs($2)=abs($1)-abs($2)\n    local a=$1\n    local\
    \ b=$2\n    local c=$3\n    if [ \"$a\" -gt \"$b\" ] || [ \"$a\" -gt \"$c\" ]\
    \ || [ \"$b\" -gt \"$c\" ] ;then\n        return 1\n    else\n        if [ \"\
    $c\" -gt \"$a\" ] && [ \"$b\" -gt \"$c\" ] || [ \"$a\" -gt \"$b\" ] && [ \"$c\"\
    \ -gt \"$a\" ] ; then\n            return 1\n        else\n            return\
    \ 0\n        fi\n    fi", "    local length=${1:?Parameter error}\n    local side1_length=${2:?Parameter\
    \ error}\n    local side2_length=${3:?Parameter error}\n\n    if [[ $length ==\
    \ $side1_length && $length == $side2_length ]]; then\n        return 1\n    fi\n\
    \    if [[ $side1_length == $side2_length ]]; then\n        return 1\n    fi\n\
    \    if [[ $side2_length == $side1_length ]]; then\n        return 0\n    fi\n\
    \n    # Find the angles.\n    local angle1=$(($side1_length / $length))\n    local\
    \ angle2=$(($side2_length / $length))\n    local angle3=$(($side1_length / $side2_length))\n\
    \    local angle4=$(($side2_length / $side1_length))\n\n    if [ $angle1 -gt $angle3\
    \ ]; then\n        if [ $angle2 -gt $angle4 ]; then\n            return 0\n  \
    \      else\n            return 1\n        fi\n    else\n        if [ $angle2\
    \ -gt $angle3 ]; then\n            return 1\n        else\n            return\
    \ 0\n        fi\n    fi", "    local side_1=$1\n    local side_1_length=$(($side_1\
    \ + 0))\n    local side_1_angle=$2\n    local side_2_length=$(($side_1_length\
    \ + 0))\n    local side_2_angle=$3\n    local side_3_length=$(($side_1_length\
    \ + 0))\n    local side_3_angle=$4\n    local angle_sum=$(($side_1_angle + $side_2_angle\
    \ + $side_3_angle))\n    local angle_diff=$(($angle_sum - $side_1_angle - $side_2_angle\
    \ - $side_3_angle))\n    local angle_mod=$(($angle_diff % 360))\n    local right_angle=$((angle_mod\
    \ > 180 ? 0 : 1))\n    local right_angle_triangle=$((right_angle == $side_1_angle\
    \ || right_angle == $side_2_angle || right_angle == $side_3_angle))\n    \n  \
    \  echo ${right_angle_triangle}", "    local side1=${1:0:1}\n    local side2=${1:1:1}\n\
    \    local side3=${1:2:1}\n    if [[ $side1 -eq $side2 ]]; then\n        if [[\
    \ $side1 -eq $side3 ]]; then\n            if [[ $side2 -eq $side3 ]]; then\n \
    \               return 0\n            else\n                return 1\n       \
    \     fi\n        else\n            if [[ $side2 -eq $side3 ]]; then\n       \
    \         return 1\n            else\n                return 0\n            fi\n\
    \        fi\n    else\n        if [[ $side1 -eq $side2 ]]; then\n            if\
    \ [[ $side1 -eq $side3 ]]; then\n                if [[ $side2 -eq $side3 ]]; then\n\
    \                    return 1\n                else\n                    return\
    \ 0\n                fi\n            else\n                return 1\n        \
    \    fi\n        else\n            if [[ $side1 -eq $side3 ]]; then\n        \
    \        return 1\n            else\n                return 0\n            fi\n\
    \        fi\n    fi", "\tlocal n=$1\n\tlocal b=$2\n\tlocal c=$3\n\tlocal a=0\n\
    \tlocal d=$((90-180-$c))\n\tlocal e=$((90-$b-$d))\n\tlocal f=$((90-$a-$e))\n\t\
    local g=$((90-$a-$b))\n\tlocal h=$((90-$a-$c))\n\tif [ \"$n\" -eq \"$b\" ]; then\n\
    \t\tif [ \"$b\" -eq \"$c\" ]; then\n\t\t\techo \"true\"\n\t\telse\n\t\t\techo\
    \ \"false\"\n\t\tfi\n\telif [ \"$a\" -eq \"$e\" ]; then\n\t\tif [ \"$b\" -eq \"\
    $f\" ]; then\n\t\t\techo \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\t\
    elif [ \"$a\" -eq \"$f\" ]; then\n\t\tif [ \"$b\" -eq \"$g\" ]; then\n\t\t\techo\
    \ \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\telif [ \"$a\" -eq \"$g\"\
    \ ]; then\n\t\tif [ \"$b\" -eq \"$h\" ]; then\n\t\t\techo \"true\"\n\t\telse\n\
    \t\t\techo \"false\"\n\t\tfi\n\telse\n\t\techo \"false\"\n\tfi", "\tlocal a b\
    \ c d e\n\ta=$1\n\tb=$2\n\tc=$3\n\td=$(bc <<< \"$b * $c\" | sed -e \"s/./ /\"\
    \ -e \"s/./ /\")\n\te=$(bc <<< \"$a * $c\" | sed -e \"s/./ /\" -e \"s/./ /\")\n\
    \t[ $d -eq $e ]", "\tlocal L1 L2 L3 a b c res\n\t((L1=$(read_line \"$1\"))); \n\
    \t((L2=$(read_line \"$2\"))); \n\t((L3=$(read_line \"$3\"))); \n\ta=$(cat <<<\"\
    $L1\")\n\tb=$(cat <<<\"$L2\")\n\tc=$(cat <<<\"$L3\")\n\tres=$(echo \"( ( $a >\
    \ $b ) && ( $a > $c ) || ( $b > $c ) )\" |bc)\n\tif [ \"$res\" -eq 1 ]; then echo\
    \ \"true\"; else echo \"false\"; fi", "\tIFS='' read -a numbers <<< \"$1\"\n\t\
    IFS='' read -a numbers <<< \"$2\"\n\tIFS='' read -a numbers <<< \"$3\"\n\t[ \"\
    $numbers[0]\" = \"$numbers[1]\" ] && [ \"$numbers[1]\" = \"$numbers[2]\" ] ||\
    \ return 1\n\t[ \"$numbers[2]\" = \"$numbers[3]\" ] && [ \"$numbers[3]\" = \"\
    $numbers[0]\" ] || return 1\n\treturn 0", "    local side length1 length2 length3\n\
    \n    length1=$1\n    length2=$2\n    length3=$3\n\n    # Triangle is right if\
    \ it has three sides with all equal lengths.\n    if [ $length1 -eq $length2 -eq\
    \ $length3 ]; then\n        echo true\n    else\n        echo false\n    fi",
  "    if [ $1 -gt $2 ] || [ $1 -lt $3 ] || [ $2 -lt $3 ]; then\n        return false\n\
    \    fi\n    if [ $1 -eq $2 ] || [ $1 -eq $3 ]; then\n        return true\n  \
    \  fi\n    \n    if [ $1 -eq $3 ]; then\n        if [ $2 -gt $3 ]; then\n    \
    \        return true\n        fi\n        return false\n    fi\n    if [ $2 -eq\
    \ $3 ]; then\n        if [ $1 -gt $3 ]; then\n            return true\n      \
    \  fi\n        return false\n    fi\n    \n    if [ $1 -gt $2 ] && [ $2 -gt $3\
    \ ]; then\n        if [ $1 -gt $3 ]; then\n            return true\n        fi\n\
    \        return false\n    fi\n    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n \
    \       if [ $1 -gt $3 ]; then\n            return true\n        fi\n        return\
    \ false\n    fi", "\t(( $2 > $1 )) && return 1\n\t(( $2 < $1 )) && return 1\n\t\
    (( $3 > $2 )) && return 1\n\t(( $3 < $2 )) && return 1\n\t(( $(echo \"${1} ${2}\
    \ - ${3} ${1} - ${2}\" | bc -l) > 0 )) && return 1\n\t(( $(echo \"${1} ${2} -\
    \ ${3} - ${2} ${1} - ${1}\" | bc -l) > 0 )) && return 1\n\treturn 0", "\techo\
    \ \"$1\" \"$2\" \"$3\" \n\t[ \"$1\" = \"$2\" ] && [ \"$2\" = \"$3\" ] && [ \"\
    $3\" = \"$1\" ] ||\n\t[ \"$1\" = \"$3\" ] && [ \"$2\" = \"$3\" ] && [ \"$3\" =\
    \ \"$1\" ] ||\n\t[ \"$1\" = \"$2\" ] && [ \"$2\" = \"$3\" ] && [ \"$3\" = \"$2\"\
    \ ] || return 1\n\t[ \"$1\" = \"$3\" ] && [ \"$2\" = \"$3\" ] && [ \"$3\" = \"\
    $2\" ] || return 1\n\t[ \"$1\" = \"$2\" ] && [ \"$2\" = \"$3\" ] && [ \"$3\" =\
    \ \"$3\" ] || return 1\n\t[ \"$1\" = \"$2\" ] && [ \"$2\" = \"$3\" ] && [ \"$3\"\
    \ = \"$2\" ] || return 1\n\t[ \"$1\" = \"$3\" ] && [ \"$2\" = \"$3\" ] && [ \"\
    $3\" = \"$3\" ] || return 1\n\t[ \"$1\" = \"$3\" ] && [ \"$2\" = \"$3\" ] && [\
    \ \"$3\" = \"$2\" ] || return 1\n\t[ \"$1\" = \"$3\" ] && [ \"$2\" = \"$3\" ]\
    \ && [ \"$3\" = \"$3\" ] || return 1\n\treturn 0", "    # Check for three integers\n\
    \    if [ $1 -eq 0 -o $2 -eq 0 -o $3 -eq 0 ]\n    then\n        echo \"Usage:\
    \ $(basename $0) integer1 integer2 integer3\"\n        exit 1\n    fi\n\n    #\
    \ Make sure three are positive values\n    [[ -z $(echo \"$1 < 0\" | bc -l) ]]\n\
    \    [[ -z $(echo \"$2 < 0\" | bc -l) ]]\n    [[ -z $(echo \"$3 < 0\" | bc -l)\
    \ ]]\n\n    # Do the math\n    if (($1 == 0)); then\n        # Either 1 or 2 are\
    \ 0\n        (( $(echo \"$2\" | bc -l) ))\n    else\n        if (( $2 == 0 ));\
    \ then\n            # One is 0\n            (( $(echo \"$3\" | bc -l) ))\n   \
    \     else\n            (( $(echo \"($2 * $3 - $1 * $2) % $1\" | bc -l) ))\n \
    \       fi\n    fi\n\n    # Return true or false\n    return $(echo \"$(( $1 ==\
    \ 0 )) && ($(( $2 == 0 )) && ($(( $3 == 0 )))\" | bc -l)", "   local i\n   i=\"\
    `expr ${1}^2 + ${2}^2 + ${3}^2`\"\n   if [ $i -gt 360 ] ; then\n      echo \"\
    false\"\n      return 1\n   fi\n   if [ $i -lt 360 ] ; then\n      echo \"true\"\
    \n      return 0\n   fi\n   echo \"false\"\n   return 1", '    echo $(( $1 % $2
    == $3 % $2 ))', "    if (($1 $2 $3)) ; then\n        (( 90 == $(triangle_angle_check($1\
    \ $2 $3)) )) && return 0\n        return 1\n    fi\n    return 1", "\tlocal length1\
    \ length2 length3\n\t\n\tlength1=$(( $1 * $1 ))\n\tlength2=$(( $2 * $2 ))\n\t\
    length3=$(( $3 * $3 ))\n\n\tif [ $length1 -eq $length2 -eq $length3 ]\n\tthen\n\
    \t\treturn 0\n\telse\n\t\tif [ $length1 -gt $length2 ]\n\t\tthen\n\t\t\tif [ $length2\
    \ -gt $length3 ]\n\t\t\tthen\n\t\t\t\treturn 1\n\t\t\telse\n\t\t\t\treturn 0\n\
    \t\t\tfi\n\t\telse\n\t\t\tif [ $length1 -gt $length3 ]\n\t\t\tthen\n\t\t\t\treturn\
    \ 1\n\t\t\telse\n\t\t\t\tif [ $length3 -gt $length2 ]\n\t\t\t\tthen\n\t\t\t\t\t\
    return 1\n\t\t\t\telse\n\t\t\t\t\treturn 0\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tfi",
  "  (( $1 != $2 )) &&\n  (( $2 != $3 )) &&\n  (( $1 != $3 )) &&\n  (( $2 != $3 ))\
    \ &&\n  (( $1 != $2 )) &&\n  (( $3 != $2 )) &&\n  (( $1 != $3 )) &&\n  (( $3 !=\
    \ $2 ))", "    local side_1_length=$1\n    local side_2_length=$2\n    local side_3_length=$3\n\
    \    # Verify that each side has a positive length.\n    if [[ -z \"$side_1_length\"\
    \ || -z \"$side_2_length\" || -z \"$side_3_length\" ]]; then\n        return \"\
    false\"\n    fi\n\n    # Calculate triangle area and ensure it is greater than\
    \ zero.\n    local triangle_area=$((side_1_length * side_2_length * side_3_length))\n\
    \    if [[ -z \"$triangle_area\" ]]; then\n        return \"false\"\n    fi\n\
    \    if [[ $triangle_area -lt 0 ]]; then\n        return \"false\"\n    fi\n\n\
    \    # Check if any of the sides are 180 degree.\n    local side1_is_right_angle=$((side_2_length\
    \ -  side_1_length))\n    local side2_is_right_angle=$((side_1_length -  side_3_length))\n\
    \    local side3_is_right_angle=$((side_3_length -  side_2_length))\n    if [[\
    \ $side1_is_right_angle -gt 0 ] || \\\n        $side2_is_right_angle -gt 0 ] ||\
    \ \\\n        $side3_is_right_angle -gt 0 ]; then\n        return \"false\"\n\
    \    fi\n\n    # If the triangle area is 0, the triangle is considered right-angled.\n\
    \    if [[ $triangle_area -eq 0 ]]; then\n        return \"true\"\n    fi", "\t\
    (( $1 % 2 == 0 )); if [ $? = 0 ]; then\n\t\t(( $2 % 2 == 0 )); if [ $? = 0 ];\
    \ then\n\t\t\t(( $3 % 2 == 0 )); if [ $? = 0 ]; then\n\t\t\t\tif (( $(echo \"\
    $2 > $1 && $2 > $3\" | bc -l) )) ; then\n\t\t\t\t\treturn true\n\t\t\t\telse\n\
    \t\t\t\t\treturn false\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tfi\n\
    \t\telse\n\t\t\treturn false\n\t\tfi\n\telse\n\t\treturn false\n\tfi", "  local\
    \ length1=$1\n  local length2=$2\n  local length3=$3\n  local sum=$((length1+length2+length3))\n\
    \  local isRightAngle=$(( $((sum%180)) ))\n  return $(( $isRightAngle == 1 ))",
  "    (( $1 >= $2 )) && return 1\n    (( $1 -gt $2 )) && return 1\n    (( $1 -gt\
    \ $3 )) && return 1\n    (( $1 -le $3 )) && return 0", "    local side_1=$1\n\
    \    local side_2=$2\n    local side_3=$3\n\n    if ((${side_1} * ${side_2}) ==\
    \ ${side_3}); then\n        return 0\n    fi\n    if ((${side_1} * ${side_3})\
    \ == ${side_2}); then\n        return 0\n    fi\n    if ((${side_2} * ${side_3})\
    \ == ${side_1}); then\n        return 0\n    fi\n    return 1", "    (( $# !=\
    \ 3 )) && printf \"Error - right_angle_triangle() called with $# arguments\" &&\
    \ exit 1;\n    (( $# == 1 )) && printf \"Error - right_angle_triangle() called\
    \ with $# arguments\" && exit 1;\n    \n    # Check if all arguments are numbers,\
    \ and if they are all numbers.\n    # Numbers are all integers or positive integers\n\
    \    # $1 is an integer\n    (( $# != 3 )) && printf \"Error - right_angle_triangle()\
    \ called with $# arguments\" && exit 1;\n    [[ ! $1 =~ ^[0-9]+$ ]] && printf\
    \ \"Error - right_angle_triangle() called with $# arguments\" && exit 1;\n   \
    \ [[ ! $2 =~ ^[0-9]+$ ]] && printf \"Error - right_angle_triangle() called with\
    \ $# arguments\" && exit 1;\n    [[ ! $3 =~ ^[0-9]+$ ]] && printf \"Error - right_angle_triangle()\
    \ called with $# arguments\" && exit 1;\n    \n    # Check if arguments are all\
    \ numbers.\n    [[ -z $1 || $1 =~ ^[0-9]+$ ]] && printf \"Error - right_angle_triangle()\
    \ called with $# arguments\" && exit 1;\n    [[ -z $2 || $2 =~ ^[0-9]+$ ]] &&\
    \ printf \"Error - right_angle_triangle() called with $# arguments\" && exit 1;\n\
    \    [[ -z $3 || $3 =~ ^[0-9]+$ ]] && printf \"Error - right_angle_triangle()\
    \ called with $# arguments\" && exit 1;\n\n    # Check if the first argument is\
    \ less than the second argument, and if the\n    # second argument is less than\
    \ the third argument. Return true if the \n    # arguments are all greater than\
    \ 0, false otherwise.\n    # $1 is an integer\n    (( $# != 2 )) && printf \"\
    Error - right_angle_triangle() called with $# arguments\" && exit 1;\n    [[ !\
    \ $1 =~ ^[0-9]+$ ]] && printf \"Error - right_angle_triangle() called with $#\
    \ arguments\" && exit 1;\n    \n    # $2 is an integer\n    (( $# != 2 )) && printf\
    \ \"Error - right_angle_triangle() called with $# arguments\" && exit 1;\n   \
    \ [[ ! $2 =~ ^[0-9]+$ ]] && printf \"Error - right_angle_triangle() called with\
    \ $# arguments\" && exit 1;\n\n    (( $2 > $1 )) && printf \"Error - right_angle_triangle()\
    \ called with $# arguments\" && exit 1;\n    (( $2 > $3 )) && printf \"Error -\
    \ right_angle_triangle() called with $# arguments\" && exit 1;\n    ", "    local\
    \ side1 side2 side3\n    local test\n    local i j k l\n    side1=$1\n    side2=$2\n\
    \    side3=$3\n    if [ \"$#\" -ne 1 ] && [ \"$#\" -ne 2 ] && [ \"$#\" -ne 3 ];\
    \ then\n        printf \"[Error] Wrong number of arguments\"\n        return 1\n\
    \    fi\n    if [ \"$side1\" -lt \"$side2\" ] || [ \"$side1\" -lt \"$side3\" ]\
    \ || [ \"$side2\" -lt \"$side3\" ]; then\n        return true\n    fi\n    if\
    \ [ \"$side1\" -gt \"$side2\" ] && [ \"$side1\" -gt \"$side3\" ]; then\n     \
    \   test=\"$side1 $side2 $side3\"\n    elif [ \"$side2\" -gt \"$side1\" ] && [\
    \ \"$side2\" -gt \"$side3\" ]; then\n        test=\"$side1 $side2 $side3\"\n \
    \   elif [ \"$side3\" -gt \"$side1\" ] && [ \"$side3\" -gt \"$side2\" ]; then\n\
    \        test=\"$side1 $side2 $side3\"\n    else\n        return false\n    fi\n\
    \    i=$(( ${#test} - 1 ))\n    j=$(( ${#test} - 2 ))\n    k=$(( ${#test} - 3\
    \ ))\n    l=$(( ${#test} - 4 ))\n    if [ \"$i\" -ne \"1\" ] && [ \"$j\" -ne \"\
    1\" ] && [ \"$k\" -ne \"1\" ] && [ \"$l\" -ne \"1\" ]; then\n        return false\n\
    \    elif [ \"$i\" -eq \"1\" ] && [ \"$j\" -eq \"1\" ] && [ \"$k\" -eq \"1\" ]\
    \ && [ \"$l\" -eq \"1\" ]; then\n        if [ \"$side1\" -eq \"$side2\" ] && [\
    \ \"$side1\" -eq \"$side3\" ]; then\n            return true\n        elif [ \"\
    $side1\" -eq \"$side3\" ] && [ \"$side2\" -eq \"$side3\" ]; then\n           \
    \ return true\n        else\n            return false\n        fi\n    elif [\
    \ \"$i\" -eq \"1\" ] && [ \"$j\" -eq \"1\" ] && [ \"$k\" -eq \"1\" ] && [ \"$l\"\
    \ -eq \"1\" ]; then\n        if [ \"$side1\" -eq \"$side2\" ] && [ \"$side2\"\
    \ -eq \"$side3\" ]; then\n            return true\n        elif [ \"$side1\" -eq\
    \ \"$side3\" ] && [ \"$side3\" -eq \"$side3\" ]; then\n            return true\n\
    \        else\n            return false\n        fi\n    elif [ \"$i\" -eq \"\
    1\" ] && [ \"$j\" -eq \"1\" ] && [ \"$k\" -eq \"1\" ] && [ \"$l\" -eq \"1\" ];\
    \ then\n        if [ \"$side1\" ", "    if [ $1 != $3 -o $2 != $3 ]; then\n  \
    \      return 0\n    fi\n    if [ $1 -gt $2 ]; then\n        echo \"$1 $2 $3\"\
    \ | bc -l\n        echo \"$1 $3 $2\" | bc -l\n        echo \"$3 $1 $2\" | bc -l\n\
    \        echo \"$3 $2 $1\" | bc -l\n        echo \"$2 $3 $1\" | bc -l\n      \
    \  echo \"$1 $2 $3\" | bc -l\n        echo \"$3 $1 $2\" | bc -l\n        echo\
    \ \"$3 $2 $1\" | bc -l\n        echo \"$1 $3 $2\" | bc -l\n        echo \"$1 $2\
    \ $3\" | bc -l\n        echo \"$2 $1 $3\" | bc -l\n        echo \"$2 $3 $1\" |\
    \ bc -l\n        echo \"$3 $2 $1\" | bc -l\n        echo \"$3 $1 $2\" | bc -l\n\
    \    else\n        echo \"$1 $2 $3\" | bc -l\n        echo \"$1 $3 $2\" | bc -l\n\
    \        echo \"$2 $1 $3\" | bc -l\n        echo \"$2 $3 $1\" | bc -l\n      \
    \  echo \"$3 $2 $1\" | bc -l\n        echo \"$3 $1 $2\" | bc -l\n        echo\
    \ \"$1 $3 $2\" | bc -l\n        echo \"$1 $2 $3\" | bc -l\n        echo \"$2 $1\
    \ $3\" | bc -l\n        echo \"$2 $3 $1\" | bc -l\n        echo \"$3 $2 $1\" |\
    \ bc -l\n        echo \"$3 $1 $2\" | bc -l\n        echo \"$1 $3 $2\" | bc -l\n\
    \        echo \"$1 $2 $3\" | bc -l\n        echo \"$2 $1 $3\" | bc -l\n      \
    \  echo \"$2 $3 $1\" | bc -l\n        echo \"$3 $2 $1\" | bc -l\n        echo\
    \ \"$3 $1 $2\" | bc -l\n    fi", "  if [ \"$1\" -gt \"3\" ] || [ \"$2\" -gt \"\
    3\" ] || [ \"$3\" -gt \"3\" ]\n  then\n    echo \"Invalid input\"\n    return\n\
    \  fi\n  \n  local s1 s2 s3\n  s1=`expr \"$1\" : '^[0-9]*$'`\n  s2=`expr \"$2\"\
    \ : '^[0-9]*$'`\n  s3=`expr \"$3\" : '^[0-9]*$'`\n  \n  local left_side=\"$(expr\
    \ \"$1\" : '^[0-9]*')\"\n  local right_side=\"$(expr \"$2\" : '^[0-9]*')\"\n \
    \ local down_side=\"$(expr \"$3\" : '^[0-9]*')\"\n  \n  local i\n  i=1\n  while\
    \ [ $i -le 3 ]\n  do\n    local s\n    s=\"$($i | bc)\"\n    if [ \"$s\" -gt \"\
    $down_side\" ]\n    then\n      down_side=$s\n    fi\n    if [ \"$s\" -lt \"$down_side\"\
    \ ]\n    then\n      down_side=$s\n    fi\n    if [ \"$s\" -gt \"$left_side\"\
    \ ]\n    then\n      left_side=$s\n    fi\n    if [ \"$s\" -lt \"$left_side\"\
    \ ]\n    then\n      left_side=$s\n    fi\n    i=`expr $i + 1`\n  done\n  if [\
    \ \"$down_side\" -eq \"0\" ]\n  then\n    if [ \"$left_side\" -eq \"0\" ]\n  \
    \  then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n\
    \    if [ \"$right_side\" -gt \"$down_side\" ]\n    then\n      echo \"true\"\n\
    \    else\n      echo \"false\"\n    fi\n  fi", " length1=$1\n length2=$2\n length3=$3\n\
    \ \n if [ $length1 -eq $length3 ] && [ $length2 -eq $length3 ]; then\n   echo\
    \ \"true\"\n else\n   echo \"false\"\n fi", "  echo \"$1 $2 $3\" | awk '{print\
    \ $1 \" \" $2 \" \" $3 \" \" $1-$2-$3 \" \" $2-$3-$1}' ", "\t(( $1 == 1 )) &&\
    \ (( $2 == $3 )) && return 0\n\t(( $1 == 2 )) && (( $3 == $2 )) && return 0\n\t\
    (( $1 == $3 )) && return 1", "\tlocal side1=\"${1%,}\"\n\tlocal side2=\"${2%,}\"\
    \n\tlocal side3=\"${3%,}\"\n\tif [[ \"${side1}\" == \"${side2}\" || \"${side1}\"\
    \ == \"${side3}\" ]]\n\tthen\n\t\treturn 0\n\tfi\n\tif [[ \"${side2}\" == \"${side3}\"\
    \ ]]\n\tthen\n\t\treturn 1\n\tfi\n\tif [[ \"${side1}\" == \"${side2}\" || \"${side2}\"\
    \ == \"${side3}\" ]]\n\tthen\n\t\treturn 0\n\tfi\n\tlocal a=`expr ${side1} \\\
    * ${side2}`\n\tlocal b=`expr ${side1} \\* ${side3}`\n\tlocal c=`expr ${side2}\
    \ \\* ${side3}`\n\tlocal angle=$((90 - $((a+b+c)/2)))\n\tif [[ $angle < 0 ]]\n\
    \tthen\n\t\tangle=$((360 + angle))\n\tfi\n\t\n\techo $((${angle} % 360))", "\t\
    [ \"$1\" -gt \"$2\" ] && [ \"$1\" -gt \"$3\" ] && return 1\n\t[ \"$1\" -eq \"\
    $2\" ] && [ \"$2\" -eq \"$3\" ] && return 1\n\treturn 0", "    if (( $1 -eq 1\
    \ )); then\n        (( $2 -eq 1 )) || (( $3 -eq 1 ))\n    elif (( $1 -eq 2 ));\
    \ then\n        (( $3 -eq 1 )) || (( $2 -eq 1 ))\n    elif (( $1 -eq 3 )); then\n\
    \        (( $2 -eq 1 )) || (( $3 -eq 1 ))\n    else\n        (( $2 -eq 1 )) ||\
    \ (( $3 -eq 1 ))\n    fi", "\tlocal a=\"$1\"\n\tlocal b=\"$2\"\n\tlocal c=\"$3\"\
    \n\techo \"$(( ( ( ( $a + $b ) / 2 ) - $c ) / 2 ))\"\n\tif (( \"$(( ( ( $a + $b\
    \ ) / 2 ) - $c ) / 2 )\" == \"$a\" )); then\n\t\treturn 0\n\telif (( \"$(( ( (\
    \ $a + $b ) / 2 ) - $c ) / 2 )\" == \"$b\" )); then\n\t\treturn 0\n\telif (( \"\
    $(( ( ( $a + $b ) / 2 ) - $c ) / 2 )\" == \"$c\" )); then\n\t\treturn 1\n\telse\n\
    \t\treturn 1\n\tfi", '  (( $1 > 0 && $2 > 0 && $3 > 0 )) && (( $1 -gt $2 && $2
    -gt $3 && $3 -gt $1 ))', "    local x1 y1 x2\n    x1=$1; y1=$2; x2=$3\n    if\
    \ [[ \"$x2\" == \"$y1\" ]]; then\n        return 0\n    fi\n    if [[ \"$x2\"\
    \ == \"$y2\" ]]; then\n        return 1\n    fi\n    if [[ \"$y1\" == \"$y2\"\
    \ ]]; then\n        return 0\n    fi\n    local i\n    for i in $(seq 1 \"$x2\"\
    ); do\n        if [[ \"$i\" == \"$x1\" ]]; then\n            return 0\n      \
    \  fi\n        if [[ \"$y1\" == \"$i\" ]]; then\n            return 0\n      \
    \  fi\n    done\n    for i in $(seq 1 \"$y2\"); do\n        if [[ \"$i\" == \"\
    $x1\" ]]; then\n            return 0\n        fi\n        if [[ \"$y2\" == \"\
    $i\" ]]; then\n            return 0\n        fi\n    done\n    if [[ \"$y1\" -eq\
    \ \"$y2\" ]]; then\n        for i in $(seq 1 \"$x1\"); do\n            if [[ \"\
    $i\" == \"$y2\" ]]; then\n                return 0\n            fi\n        done\n\
    \        return 1\n    fi\n    if [[ \"$x1\" -eq \"$x2\" ]]; then\n        return\
    \ 1\n    fi", "\techo $(expr $1 - $2 > 0)\n\techo $(expr $3 - $2 > 0)\n\techo\
    \ $(expr $3 - $1 > 0)\n\techo $(expr $1 - $3 > 0)", "    local side_1=$1\n   \
    \ local side_2=$2\n    local side_3=$3\n    if [ \"$side_1\" -gt \"$side_3\" -o\
    \ \"$side_1\" -gt \"$side_2\" -o \"$side_1\" -gt \"$side_2\" -o \"$side_1\" -gt\
    \ \"$side_3\" ];then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi", "    local side side_1 side_2 side_3\n    local test\n    \n    side_1=$1\n\
    \    side_2=$2\n    side_3=$3\n    \n    if [[ $side_1 == $side_2 ]]; then\n \
    \       # both sides are equal\n        return 1\n    fi\n    \n    # get the\
    \ side of the triangle that does not meet the condition\n    side_1=$side_1\n\
    \    side_2=$side_2\n    side_3=$side_3\n    \n    if [[ $side_1 > $side_2 ]];\
    \ then\n        side_1=$side_1\n        side_2=$side_2\n        side_3=$side_3\n\
    \    fi\n    \n    if [[ $side_1 > $side_3 ]]; then\n        side_1=$side_1\n\
    \        side_2=$side_2\n        side_3=$side_3\n    fi\n    \n    if [[ $side_2\
    \ > $side_3 ]]; then\n        side_1=$side_1\n        side_2=$side_2\n       \
    \ side_3=$side_3\n    fi\n    \n    # test\n    if [[ $side_1 == $side_3 ]]; then\n\
    \        return 0\n    else\n        return 1\n    fi", "\tlocal side1=$1\n\t\
    local side2=$2\n\tlocal side3=$3\n\tif (( side1 == side2 )); then\n\t\tif (( side2\
    \ == side3 )); then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tfi\n\
    \telse\n\t\tlocal result\n\t\tif (( side2 > side3 )); then\n\t\t\tlocal tmp1=side1\n\
    \t\t\tlocal tmp2=side3\n\t\t\tlocal tmp3=side2\n\t\t\tside1=tmp2\n\t\t\tside3=tmp1\n\
    \t\t\tside2=tmp3\n\t\tfi\n\t\tif (( side3 < side1 )); then\n\t\t\tlocal tmp1=side1\n\
    \t\t\tlocal tmp2=side3\n\t\t\tlocal tmp3=side2\n\t\t\tside1=tmp2\n\t\t\tside3=tmp1\n\
    \t\t\tside2=tmp3\n\t\tfi\n\t\tif (( side1 + side2 > side3 + side3 )); then\n\t\
    \t\tlocal tmp1=side2\n\t\t\tlocal tmp2=side3\n\t\t\tlocal tmp3=side1\n\t\t\tside2=tmp1\n\
    \t\t\tside3=tmp2\n\t\t\tside1=tmp3\n\t\tfi\n\t\tif (( side1 + side2 > side3 +\
    \ side3 )); then\n\t\t\tlocal tmp1=side2\n\t\t\tlocal tmp2=side3\n\t\t\tlocal\
    \ tmp3=side1\n\t\t\tside2=tmp1\n\t\t\tside3=tmp2\n\t\t\tside1=tmp3\n\t\tfi\n\t\
    \tif (( side1 + side2 > side3 + side3 )); then\n\t\t\tlocal tmp1=side2\n\t\t\t\
    local tmp2=side3\n\t\t\tlocal tmp3=side1\n\t\t\tside2=tmp1\n\t\t\tside3=tmp2\n\
    \t\t\tside1=tmp3\n\t\tfi\n\t\tif (( side1 + side2 > side3 + side3 )); then\n\t\
    \t\tlocal tmp1=side2\n\t\t\tlocal tmp2=side3\n\t\t\tlocal tmp3=side1\n\t\t\tside2=tmp1\n\
    \t\t\tside3=tmp2\n\t\t\tside1=tmp3\n\t\tfi\n\t\tif (( side1 + side2 > side3 +\
    \ side3 )); then\n\t\t\tlocal tmp1=side2\n\t\t\tlocal tmp2=side3\n\t\t\tlocal\
    \ tmp3=side1\n\t\t\tside2=tmp1\n\t\t\tside3=tmp2\n\t\t\tside1=tmp3\n\t\tfi\n\t\
    \tif (( side1 + side2 > side3 + side3 )); then\n\t\t\tlocal tmp1=side2\n\t\t\t\
    local tmp2=side3\n\t\t\tlocal tmp3=side1\n\t\t\tside2=tmp1\n\t\t\tside3=tmp2\n\
    \t\t\tside1=tmp", '  (( $1 != $3 )) && (( $2 > $1 )) && (( $2 > $3 ))', "  if\
    \ [[ ${#1} -eq ${#2} -eq ${#3} ]]; then\n    if [[ $(( (${#1} - ${#2}) / 2 ))\
    \ == ${#1} -a $(( (${#1} - ${#3}) / 2 )) -gt 0 ]]; then\n      true\n    else\n\
    \      false\n    fi\n  else\n    false\n  fi", "  local a b\n  a=${1:--1}\n \
    \ b=${2:--2}\n  c=${3:--1}\n  (( ${#a} == 3 )) && \n  (( ${#b} == 3 )) && \n \
    \ (( ${#c} == 3 )) && \n  (( ${#a} != ${#b} )) && \n  (( ${#a} != ${#c} )) &&\
    \ \n  (( ${#b} != ${#c} )) && \n  (( $a -ge 0 )) && \n  (( $b -ge 0 )) && \n \
    \ (( $c -ge 0 )) && \n  (( $a + $b == $c )) && \n  (( 2 * $b - 2 * $a + $c !=\
    \ 0 )) && \n  (( 2 * $a - 2 * $b + $c != 0 ))", "  local length side1 side2 side3\n\
    \  length=$1\n  side1=$2\n  side2=$3\n  side3=$4\n  if [ $side1 -gt $side2 ] ||\
    \ [ $side1 -gt $side3 ]; then\n    return true\n  fi\n  if [ $side2 -gt $side3\
    \ ]; then\n    return false\n  fi\n  local length2 length3 length4\n  length2=$length\n\
    \  length3=$length\n  length4=$length\n  length=$(($length * 2))\n  while [ $length\
    \ -lt $((3 * $length)) ]\n  do\n    if [ $(($length2 / $length)) -gt $((2 * $length3\
    \ - $length4)) ]; then\n      length2=$(($length2 / $length))\n      length3=$length2\n\
    \      length4=$(($length3 - $length4))\n    else\n      length3=$(($length3 /\
    \ $length))\n      length4=$length3\n      length2=$(($length4 - $length2))\n\
    \    fi\n  done\n  while [ $length -lt $((2 * $length)) ]\n  do\n    if [ $(($length3\
    \ / $length)) -gt $((2 * $length2 - $length4)) ]; then\n      length3=$(($length3\
    \ / $length))\n      length2=$length3\n      length4=$(($length2 - $length4))\n\
    \    else\n      length2=$(($length2 / $length))\n      length4=$length2\n   \
    \   length3=$(($length4 - $length3))\n    fi\n  done\n  while [ $length -lt $((2\
    \ * $length)) ]\n  do\n    if [ $(($length4 / $length)) -gt $((2 * $length3 -\
    \ $length2)) ]; then\n      length4=$(($length4 / $length))\n      length3=$length4\n\
    \      length2=$(($length3 - $length2))\n    else\n      length3=$(($length3 /\
    \ $length))\n      length2=$length4\n      length4=$(($length2 - $length3))\n\
    \    fi\n  done\n  if [ $(($length2 / $length)) -eq $(($length3 / $length)) ]\
    \ || [ $(($length2 / $length)) -eq $(($length4 / $length)) ]\n  then\n    return\
    \ true\n  else\n    return false\n  fi", '    (( $1 == $2 || $1 == $3 || $2 ==
    $3 )) && echo "true" || echo "false"', "    local a b c\n    read a b c\n    #\
    \ $a + $b + $c is half of the side's length\n    if [ $(($a + $b + $c)) -gt $(($a\
    \ - $b - $c)) ]; then\n        return 0\n    elif [ $(($a + $b + $c)) -lt $(($a\
    \ - $b - $c)) ]; then\n        return 1\n    else\n        return 2\n    fi",
  "    length1=$(echo \"$1\" | cut -d'+' -f1)\n    length2=$(echo \"$2\" | cut -d'+'\
    \ -f1)\n    length3=$(echo \"$3\" | cut -d'+' -f1)\n    echo $(( (( $(echo \"\
    $length1 * $length2 + $length3 * $length1\" | cut -d'+' -f1) ) \\\n          \
    \  == $(echo \"$length1 * $length3 + $length2 * $length3\" | cut -d'+' -f1) )\
    \ \\\n          || ( $(echo \"$length1 * $length2 + $length3 * $length1\" | cut\
    \ -d'+' -f1) \\\n              == $(echo \"$length2 * $length3 + $length1 * $length3\"\
    \ | cut -d'+' -f1) ) \\\n          || ( $(echo \"$length1 * $length2 + $length3\
    \ * $length1\" | cut -d'+' -f1) \\\n              == $(echo \"$length3 * $length2\
    \ + $length1 * $length3\" | cut -d'+' -f1) ) ))", "    local side_1 \"$1\";\n\
    \    local side_2 \"$2\";\n    local side_3 \"$3\";\n\n    local i \"$2\";\n \
    \   local j \"$3\";\n    local k \"$4\";\n    local kk \"$5\";\n\n    if [[ \"\
    $side_1\" == \"$side_3\"\n        && \"$side_2\" == \"$side_3\"\n        && \"\
    $side_1\" > \"$side_2\"\n        ]]; then\n            echo \"true\";\n      \
    \      return 0;\n    fi\n    \n    if [[ \"$side_2\" > \"$side_3\"\n        &&\
    \ \"$side_2\" > \"$side_1\"\n        && \"$side_2\" > \"$side_2\"\n        ]];\
    \ then\n            echo \"false\";\n            return 0;\n    fi\n\n    if [[\
    \ \"$side_3\" > \"$side_1\"\n        && \"$side_3\" > \"$side_2\"\n        &&\
    \ \"$side_3\" > \"$side_3\"\n        ]]; then\n            echo \"false\";\n \
    \           return 0;\n    fi\n\n    if [[ \"$side_1\" > \"$side_2\"\n       \
    \ && \"$side_1\" > \"$side_3\"\n        && \"$side_1\" > \"$side_2\"\n       \
    \ ]]; then\n            echo \"false\";\n            return 0;\n    fi\n\n   \
    \ if [[ \"$side_2\" > \"$side_3\"\n        && \"$side_2\" > \"$side_1\"\n    \
    \    && \"$side_2\" > \"$side_2\"\n        ]]; then\n            echo \"false\"\
    ;\n            return 0;\n    fi\n\n    if [[ \"$side_3\" > \"$side_1\"\n    \
    \    && \"$side_3\" > \"$side_2\"\n        && \"$side_3\" > \"$side_3\"\n    \
    \    ]]; then\n            echo \"false\";\n            return 0;\n    fi\n\n\
    \    i=$((i+1));\n    j=$((j+1));\n    k=$((k+1));\n    kk=$((kk+1));\n\n    if\
    \ [[ \"$i\" == \"$j\" ]]; then\n        if [[ \"$side_1\" == \"$side_3\"\n   \
    \         && \"$side_2\" == \"$side_3\"\n            && \"$side_1\" > \"$side_2\"\
    \n            ]]; then\n                echo \"true\";\n                return\
    \ 0;\n        fi\n\n        if [[ \"$side_2\" > \"$side_3\"\n            && \"\
    $side_2\" > \"$side_1\"\n            && \"$side_2\" > \"$side_2\"\n          \
    \  ]]; then\n                echo \"false\";\n                return 0;\n    \
    \    fi\n\n        if [[ \"$side_3\" > \"$side_1\"\n            && \"$side_3\"\
    \ > \"$side_2\"\n            && \"$side_3\" > \"$side_3\"\n            ]]; then\n\
    \                echo \"false\";\n                return 0;\n", '    echo $(expr
    $1 \* $2 \> $3 \+ $1 \* $3 \> $2)', '  echo $(( $(echo "$1 * $3" | bc) > $(echo
    "$2 * $3" | bc) ))', "    # Your code goes here\n    local side_a $1 side_b $2\
    \ side_c\n    side_a=$1\n    side_b=$2\n    side_c=$3\n    if [ $side_a -eq $side_b\
    \ ]; then\n        if [ $side_a -eq $side_c ]; then\n            if [ $side_a\
    \ -eq 0 ]; then\n                echo \"true\"\n            else\n           \
    \     echo \"false\"\n            fi\n        else\n            if [ $side_a -eq\
    \ 0 ]; then\n                if [ $side_b -eq 0 ]; then\n                    echo\
    \ \"true\"\n                else\n                    echo \"false\"\n       \
    \         fi\n            else\n                if [ $side_b -eq 0 ]; then\n \
    \                   echo \"false\"\n                else\n                   \
    \ if [ $side_c -eq 0 ]; then\n                        echo \"true\"\n        \
    \            else\n                        echo \"false\"\n                  \
    \  fi\n                fi\n            fi\n        fi\n    else\n        if [\
    \ $side_b -eq 0 ]; then\n            if [ $side_a -eq 0 ]; then\n            \
    \    echo \"false\"\n            else\n                if [ $side_c -eq 0 ]; then\n\
    \                    echo \"true\"\n                else\n                   \
    \ echo \"false\"\n                fi\n            fi\n        else\n         \
    \   if [ $side_a -eq 0 ]; then\n                if [ $side_b -eq 0 ]; then\n \
    \                   echo \"false\"\n                else\n                   \
    \ echo \"false\"\n                fi\n            else\n                if [ $side_c\
    \ -eq 0 ]; then\n                    echo \"false\"\n                else\n  \
    \                  if [ $side_a -eq $side_b -eq $side_c -eq 0 ]; then\n      \
    \                  echo \"true\"\n                    else\n                 \
    \       echo \"false\"\n                    fi\n                fi\n         \
    \   fi\n        fi\n    fi", "\tlet a=$(expr $1/2);\n\tlet b=$(expr $2/2);\n\t\
    let c=$(expr $3/2);\n\tlet x1 =$(b);\n\tlet y1 =$(a);\n\tlet x2 =$(c);\n\tlet\
    \ y2 =$(a);\n\tlet x3=$(expr $(( $a * $b )));\n\tlet y3=$(expr $(( $a * $c )));\n\
    \tlet x4=$(expr $(( $b * $c )));\n\tlet y4=$(expr $(( $b * $a )));\n\tlet x5=$(expr\
    \ $(( $c * $a )));\n\tlet y5=$(expr $(( $c * $b )));\n\tlet x6=$(expr $(( $c *\
    \ $c )));\n\tlet y6=$(expr $(( $a * $a )));\n\tlet x7=$(expr $(( $a * $c )));\n\
    \tlet y7=$(expr $(( $a * $b )));\n\tlet x8=$(expr $(( $b * $b )));\n\tlet y8=$(expr\
    \ $(( $b * $c )));\n\tlet x9=$(expr $(( $c * $c )));\n\tlet y9=$(expr $(( $b *\
    \ $a )));\n\tlet x10=$(expr $(( $b * $b )));\n\tlet y10=$(expr $(( $c * $c )));\n\
    \tlet x11=$(expr $(( $c * $a )));\n\tlet y11=$(expr $(( $a * $a )));\n\tlet x12=$(expr\
    \ $(( $a * $c )));\n\tlet y12=$(expr $(( $b * $a )));\n\tlet x13=$(expr $(( $b\
    \ * $c )));\n\tlet y13=$(expr $(( $c * $b )));\n\tlet x14=$(expr $(( $c * $c )));\n\
    \tlet y14=$(expr $(( $a * $a )));\n\tlet x15=$(expr $(( $b * $b )));\n\tlet y15=$(expr\
    \ $(( $c * $c )));\n\tlet x16=$(expr $(( $c * $a )));\n\tlet y16=$(expr $(( $a\
    \ * $a )));\n\tlet x17=$(expr $(( $a * $b )));\n\tlet y17=$(expr $(( $b * $c )));\n\
    \tlet x18=$(expr", "  echo \"$3\" > /tmp/tmp.txt\n  echo \"$1\" > /tmp/tmp.txt\n\
    \  echo \"$2\" > /tmp/tmp.txt\n  echo \"$3\" > /tmp/tmp.txt\n  echo \"$2\" > /tmp/tmp.txt\n\
    \  echo \"$3\" > /tmp/tmp.txt\n  cat /tmp/tmp.txt\n  grep \"^1\" /tmp/tmp.txt\n\
    \  grep \"^3\" /tmp/tmp.txt\n  grep \"^4\" /tmp/tmp.txt\n  grep \"^5\" /tmp/tmp.txt",
  "  length=${1:?Please enter an integer.}\n  angle=${2:?Please enter an integer.}\n\
    \  angle1=${3:?Please enter an integer.}\n  if  ((length == angle)); then\n  \
    \  # Two sides equal angle\n    echo \"true\"\n  else\n    # Angle is 90 degree\n\
    \    if  ((length == angle1)); then\n      # Two sides equal angle\n      echo\
    \ \"true\"\n    else\n      # Not a right angled triangle\n      echo \"false\"\
    \n    fi\n  fi", "  (( $1 == 0 )) || return 1\n  (( $2 == 0 )) || return 1\n \
    \ (( $3 == 0 )) || return 1\n  (( $1 == $2 )) || return 0\n  (( $1 == $3 )) ||\
    \ return 0\n  (( $2 == $3 )) || return 0\n  (( $2 > $1 )) || return 1\n  (( $3\
    \ > $1 )) || return 1\n  (( $1 > $3 )) || return 1\n  (( $2 > $3 )) || return\
    \ 1\n  return 0", "    triangle_side1=${1:?Please enter an integer length of first\
    \ side}\n    triangle_side2=${2:?Please enter an integer length of second side}\n\
    \    triangle_side3=${3:?Please enter an integer length of third side}\n    triangle_side4=${4:?Please\
    \ enter an integer length of fourth side}\n    triangle_side5=${5:?Please enter\
    \ an integer length of fifth side}\n    triangle_side6=${6:?Please enter an integer\
    \ length of sixth side}\n\n    ((triangle_side1 == triangle_side2 && triangle_side2\
    \ == triangle_side3) || (triangle_side4 == triangle_side5 && triangle_side5 ==\
    \ triangle_side6))\n", "  local length1=$1\n  local length2=$2\n  local length3=$3\n\
    \  local angle1=$(( 90 - $length1 ))\n  local angle2=$(( 90 - $length2 ))\n  local\
    \ angle3=$(( 90 - $length3 ))\n  if [ \"$angle1\" -eq \"$angle2\" ] && [ \"$angle1\"\
    \ -eq \"$angle3\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "    if [ $2 -eq 0 ] || [ $3 -eq 0 ] || [ $1 -eq 0 ] ; then\n        echo \"$1 $2\
    \ $3\"\n        return 0\n    fi\n    if [ $1 -gt $3 ] || [ $2 -gt $3 ] || [ $3\
    \ -gt $1 ] ; then\n        echo \"$1 $2 $3\"\n        return 1\n    fi\n    \n\
    \    local angle=$(($3*$3-$2*$2))\n    local rads=$(echo \"scale=4; $angle/180\"\
    \ | bc)\n    local deg=$(echo \"scale=4; $rads*180\" | bc)\n    if [ $deg -gt\
    \ 90 ] ; then\n        echo \"$1 $2 $3\"\n        return 0\n    else\n       \
    \ echo \"$1 $2 $3\"\n        return 1\n    fi", "        IFS='' read -a array\
    \ <<< \"$1\"\n        IFS='' read -a array1 <<< \"$2\"\n        IFS='' read -a\
    \ array2 <<< \"$3\"\n\n        local a=\"${array[0]}\"\n        local b=\"${array[1]}\"\
    \n        local c=\"${array[2]}\"\n\n        local a1=${array1[0]}\n        local\
    \ b1=${array1[1]}\n        local c1=${array1[2]}\n\n        local a2=${array2[0]}\n\
    \        local b2=${array2[1]}\n        local c2=${array2[2]}\n\n        local\
    \ angle1=$(tri_angle \"$a1\" \"$b1\" \"$c1\")\n        local angle2=$(tri_angle\
    \ \"$a2\" \"$b2\" \"$c2\")\n\n        ((angle2 < angle1)) #check if the angle\
    \ is bigger\n\n        if (( angle1 == angle2 )) #if the angle is 90 degree\n\
    \        then\n                return 0\n        fi\n\n        (( angle1 > angle2\
    \ )) #check for the opposite\n        return 1"]
stop_tokens:
- "\n}"
