language: sh
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local i\n  local n\n  local ext_count\n  \n  # Remove all\
    \ non-alphanumeric characters and spaces from our extension names\n  extensions=$(echo\
    \ \"${extensions}\" | sed 's/\\W//g')\n\n  # Get the count of extensions by counting\
    \ non-alphanumeric chars\n  ext_count=$(echo \"${extensions}\" | wc -c)\n\n  for\
    \ (( i=0; i<${ext_count}; i++ )); do\n    # Get the extension's count\n    n=$(echo\
    \ \"${extensions}\" | sed 's/^.\\?//' | sed 's/\\./ /g' | sed 's/^ *//')\n   \
    \ if [[ \"${n}\" == \"${extensions}\" ]]; then\n      break\n    fi\n    # Get\
    \ the extension's score\n    score=$(echo \"${extensions}\" | sed -n -e 's/^'${i}'\\\
    .//p')\n    # Increment the strength if the extension is stronger\n    if [[ \"\
    $score\" -gt \"$strength\" ]]; then\n      strength=$score\n      class=\"${class}.${extensions[i]}\"\
    \n    fi\n  done\n  echo \"$class\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    CLASS=$1\n    EXTENSIONS=$2\n\
    \    TEMP=`echo \"$EXTENSIONS\" | tr \" \" \"\\n\" | sort -rnk2 | head -n 1`\n\
    \    EXTENSION=`echo \"$TEMP\" | cut -d\".\" -f2`\n    echo \"$CLASS.$EXTENSION\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057681
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local Class=$1\n    local\
    \ Extensions=$2\n    local ExtensionsArr=()\n    for Extension in ${Extensions[@]};\
    \ do\n        local Num=${#Extension}\n        if [[ ${Extension::Num} =~ [A-Z]\
    \ ]] ; then\n            local Upper=${Extension:0:1}\n            ExtensionsArr+=(\"\
    ${Upper}\")\n        fi\n    done\n    local Strength=${#ExtensionsArr}\n    if\
    \ [[ ${Strength} -eq 0 ]]; then\n        echo \"Error: No extensions in list\"\
    \n        exit 0\n    fi\n    local StrengthStr\n    StrengthStr=${Strength:0:1}\n\
    \    for Extension in ${ExtensionsArr[@]}; do\n        StrengthStr=${StrengthStr}-${Extension:0:1}\n\
    \    done\n    echo $($Class $StrengthStr)\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl7zh7so4.sh: line 42: Watashi: command not found

    '
  stdout: ''
  timestamp: 1660057681
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local CLASS_NAME=\"$1\"\
    \n    local EXTENTIONS=\"$2\"\n    local STRONGEST_EXTENSION\n    local CAPITALS=0\n\
    \    local SMALLS=0\n\n    for EXTENTION in $EXTENTIONS\n    do\n        CAPITALS+=(${EXTENTION:CAPS:1})\n\
    \        SMALLS+=(${EXTENTION:SM:1})\n    done\n\n    STRONGEST_EXTENSION=$CLASS_NAME.${CAPITALS[${CAPITALS[@]}\
    \ - SM[${SMALLS[@]}]}\n    if [ -z \"$STRONGEST_EXTENSION\" ]\n    then\n    \
    \    echo \"${EXTENTIONS[@]}\" | sed -e \"s/.\\{1,\\}/./g\" | sort | tail -n 1\n\
    \    else\n        echo $STRONGEST_EXTENSION\n    fi\n}\n\ncandidate() {\n   \
    \ Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfovf_f4i.sh: line 34: $CLASS_NAME.${CAPITALS[${CAPITALS[@]} - SM[${SMALLS[@]}]}:
    bad substitution

    '
  stdout: ''
  timestamp: 1660057681
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlet CAP=`echo $1 | awk '{print\
    \ toupper($0)}'`\n\tlet SM=`echo $1 | awk '{print tolower($0)}'`\n\tlet STRONG=`echo\
    \ $2 | awk '{print $1\".\"$2}'`\n\tlet DIFF=`echo $CAP - $SM`\n\tlet STRONGER=`echo\
    \ $CAP + $SM`\n\tlet STRONGEST=`echo $DIFF > $STRONG`\n\tlet LOWEST=`echo $STRONGER\
    \ - $DIFF`\n\tif `echo $STRONGER > $LOWEST` \n\tthen\n\t\techo $STRONGER\n\telse\n\
    \t\techo $STRONG\n\tfi\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbe_mczt0.sh: line 24: let: STRONG=tEN.niNE: syntax error: invalid
    arithmetic operator (error token is ".niNE")

    /tmp/tmpbe_mczt0.sh: line 25: let: -: syntax error: operand expected (error token
    is "-")

    /tmp/tmpbe_mczt0.sh: line 26: let: +: syntax error: operand expected (error token
    is "+")

    /tmp/tmpbe_mczt0.sh: line 27: $STRONG: ambiguous redirect

    /tmp/tmpbe_mczt0.sh: line 27: let: STRONGEST=: syntax error: operand expected
    (error token is "=")

    /tmp/tmpbe_mczt0.sh: line 28: let: -: syntax error: operand expected (error token
    is "-")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASS EXTENSIONS\n\
    \  CLASS=${1:?Please specify a class name!}\n  EXTENSIONS=${2:?Please specify\
    \ the list of extensions!r}\n  # The first part (before the dot .) is the name\
    \ of the class, \n  # the second part (after the dot) is the strongest extension\n\
    \  local STRONGEST_EXTENSION\n  local STRONGEST_EXTENSION_WITHOUT_DOT\n  local\
    \ STRONGEST_EXTENSION_WITH_SOME_CHARACTERS\n  local STRONGEST_EXTENSION_WITH_EQUALS\n\
    \  local STRONGEST_EXTENSION_WITH_SPACE\n  local STRONGEST_EXTENSION_WITH_EQUALS_AND_SPACE\n\
    \  local STRONGEST_EXTENSION_WITH_EQUALS_AND_DASH\n  local STRONGEST_EXTENSION_WITH_EQUALS_AND_DOTS\n\
    \  local STRONGEST_EXTENSION_WITH_DOTS\n  local STRONGEST_EXTENSION_WITH_MULTIPLE_DOTS_AND_EQUALS\n\
    \  local STRONGEST_EXTENSION_WITH_MULTIPLE_DOTS_AND_DASH\n  local STRONGEST_EXTENSION_WITH_MULTIPLE_DOTS_AND_EQUALS_AND_DASH\n\
    \  local STRONGEST_EXTENSION_WITH_SPACES\n  local STRONGEST_EXTENSION_WITH_SPACES_AND_EQUALS\n\
    \  local STRONGEST_EXTENSION_WITH_SPACES_AND_EQUALS_AND_DASH\n  local STRONGEST_EXTENSION_WITH_SPACES_AND_EQUALS_AND_DOTS\n\
    \  local STRONGEST_EXTENSION_WITH_SPACES_AND_DOTS\n  local STRONGEST_EXTENSION_WITH_SPACES_AND_DOTS\n\
    \  local STRONGEST_EXTENSION_WITH_SPACES_AND_EQUALS_AND_DOTS\n  local STRONGEST_EXTENSION_WITH_SPACES_AND_EQUALS_AND_DASH\n\
    \  local STRONGEST_EXTENSION_WITH_SPACES_AND_EQUALS_AND_DASH\n  local STRONGEST_EXTENSION_WITH_SPACES_AND_EQUALS_AND_DASH\n\
    \  local STRONGEST_EXTENSION_WITH_SPACES_AND_EQUALS_AND_DOTS\n  local STRONGEST_EXTENSION_WITH_SPACES_AND_DOTS\n\
    \  local STRONGEST_EXTENSION_WITH_SPACES_AND_DOTS\n  local STRONGEST_EXTENSION_WITH_SPACES_AND_EQUALS_AND_DOTS\n\
    \  local STRONGEST_EXTENSION_WITH_SPACES_AND_EQUALS_AND_\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057681
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local exts=$2\n\
    \  \n  # Get the number of upper case letters in the extension's name\n  local\
    \ CAP=${#exts/[A-Z]/}\n  # Get the number of lower case letters in the extension's\
    \ name\n  local SM=${#exts/[a-z]/}\n  # The strongest extension will be the extension\
    \ with most lower case letters\n  local STRONGEST_EXTENSION=${exts/[a-z]/}\n \
    \ \n  if [ ${CAP} -gt ${SM} ] ; then\n    # If the number of upper case letters\
    \ is greater than the number of lower\n    # case letters, the extension with\
    \ most lower case letters is the strongest\n    STRONGEST_EXTENSION=${exts/[A-Z]/}\n\
    \  fi\n  \n  # If there are two or more extensions with the same strength, choose\
    \ the one\n  # that comes first in the list\n  while [ ${CAP} -gt 0 ] ; do\n \
    \   ext=${exts/.[A-Z]/}\n    \n    if [ ${CAP} -eq ${CAP} ] && [ ${SM} -gt 0 ]\
    \ ; then\n      CAP=${CAP}\n      SM=${SM}\n      STRONGEST_EXTENSION=${ext}\n\
    \    elif [ ${CAP} -eq ${CAP} ] && [ ${SM} -eq 0 ] ; then\n      CAP=${CAP}\n\
    \      SM=${SM}\n      STRONGEST_EXTENSION=${ext}\n    elif [ ${CAP} -gt ${CAP}\
    \ ] && [ ${SM} -gt ${SM} ] ; then\n      CAP=${CAP}\n      SM=${SM}\n      STRONGEST_EXTENSION=${ext}\n\
    \    elif [ ${CAP} -gt ${CAP} ] && [ ${SM} -eq ${SM} ] ; then\n      CAP=${CAP}\n\
    \      SM=${SM}\n      STRONGEST_EXTENSION=${ext}\n    else\n      # At this point,\
    \ CAP and SM are each 0, so we just need to return the\n      # extension's name\n\
    \      STRONGEST_EXTENSION=${ext}\n      break\n    fi\n  done\n  \n  echo \"\
    $class.$STRONGEST_EXTENSION\"\n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwrxt7l0_.sh: line 26: CAP=${#exts/[A-Z]/}: bad substitution

    '
  stdout: ''
  timestamp: 1660057681
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local ext=$1\n    local\
    \ classes=$2\n    local highest=0\n    local lowest=0\n    local lowest_ext=\"\
    \"\n    local highest_ext=\"\"\n    local strength\n    local count\n    local\
    \ i\n    local ext1\n    local ext2\n    local ext3\n    local ext4\n    local\
    \ ext5\n    local ext6\n\n    IFS=$'\\n' read -a classes <<< \"$classes\"\n  \
    \  for ((i=0; i<${#classes[@]}; i++)); do\n        strength=\"${classes[i]//.}\"\
    \n        count=\"${#classes[i]}\"\n        ext1=\"${classes[i]%??}\"\n      \
    \  ext2=\"${classes[i]##*}\"\n        ext3=\"${classes[i]%????????}\"\n      \
    \  ext4=\"${classes[i]%??????????}\"\n        ext5=\"${classes[i]%????????????}\"\
    \n        ext6=\"${classes[i]%????????????????}\"\n        if [ \"${count}\" -gt\
    \ 0 ] && [ \"$highest\" -lt \"$strength\" ]; then\n            highest=\"$strength\"\
    \n            highest_ext=\"$ext1\"\n        elif [ \"$lowest\" -ge \"$strength\"\
    \ ] && [ \"$lowest\" -lt \"$strength\" ]; then\n            lowest=\"$strength\"\
    \n            lowest_ext=\"$ext1\"\n        elif [ \"$lowest\" -ge \"$strength\"\
    \ ] && [ \"$highest\" -ge \"$strength\" ]; then\n            if [ \"$highest_ext\"\
    \ != \"$ext1\" ]; then\n                highest_ext=\"$ext1\"\n            else\n\
    \                if [ \"$lowest_ext\" != \"$ext1\" ]; then\n                 \
    \   lowest_ext=\"$ext1\"\n                fi\n            fi\n        elif [ \"\
    $highest\" -ge \"$strength\" ] && [ \"$highest\" -le \"$strength\" ]; then\n \
    \           if [ \"$lowest_ext\" != \"$ext1\" ]; then\n                lowest_ext=\"\
    $ext1\"\n            else\n                if [ \"$highest_ext\" != \"$ext1\"\
    \ ]; then\n                    highest_ext=\"$ext1\"\n                fi\n   \
    \         fi\n        fi\n    done\n    echo \"$ext.$highest_ext\"\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplwtj6yr7.sh: line 48: [: tEN niNE eIGHt8OKe: integer expression
    expected

    /tmp/tmplwtj6yr7.sh: line 51: [: tEN niNE eIGHt8OKe: integer expression expected

    /tmp/tmplwtj6yr7.sh: line 54: [: tEN niNE eIGHt8OKe: integer expression expected

    /tmp/tmplwtj6yr7.sh: line 62: [: tEN niNE eIGHt8OKe: integer expression expected

    '
  stdout: ''
  timestamp: 1660057681
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    echo \"$1 $2\" | sort -n\
    \ | head -n 1 | cut -d '.' -f 1\n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength=\"-1\"\n  for extension in $extensions; do\n\
    \    local extension_lower=`echo \"$extension\" | tr [:upper:] [:lower:]`\n  \
    \  local extension_cap=`echo \"$extension_lower\" | tr [:lower:] [:upper:]`\n\
    \    if [ $extension_cap = $extension_lower ]; then\n      strength=$(( $strength\
    \ + $extension_cap - $extension_lower ))\n    else\n      strength=$(( $strength\
    \ + $extension_cap ))\n    fi\n  done\n  if [ $strength -lt 1 ]; then\n    return\
    \ $class_name\n  else\n    local sorted_extensions=`sort -r \"$extensions\"`\n\
    \    local first_extension=${sorted_extensions[$(( $sorted_extensions | wc -l\
    \ ))]}\n    local strong_extension=${first_extension}\n    local strong_extension_lower=`echo\
    \ \"$strong_extension\" | tr [:upper:] [:lower:]`\n    for extension in $extensions;\
    \ do\n      local extension_lower=`echo \"$extension\" | tr [:upper:] [:lower:]`\n\
    \      local extension_cap=`echo \"$extension_lower\" | tr [:lower:] [:upper:]`\n\
    \      if [ $extension_cap = $extension_lower ]; then\n        strong_extension=${extension}\n\
    \        strong_extension_lower=$extension_lower\n        break\n      fi\n  \
    \  done\n    echo \"$strong_extension\"\n  fi\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv57yh5rx.sh: line 35: return: Watashi: numeric argument required

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tCAP=$1\n\tSM=$2\n\tS=${CAP}.0\n\
    \twhile [ \"$CAP\" != \"$SM\" ]\n\tdo\n\t\tCAP=$((CAP - 1))\n\t\tSM=$((SM + 1))\n\
    \t\tS=$(($S + ${CAP}.0))\n\tdone\n\tS=$(($S + ${CAP}.0))\n\tS=${CAP}.0\n\twhile\
    \ [ \"$S\" -lt \"$SM\" ]\n\tdo\n\t\tS=$((S + 1))\n\tdone\n\techo \"$1.$2\"\n}\n\
    \ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu97iz242.sh: line 28: tEN niNE eIGHt8OKe: syntax error in expression
    (error token is "niNE eIGHt8OKe")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local ClassName\n  local\
    \ Extension\n  local Sm\n  local Cap\n  local StrongestExtensionName\n\n  ClassName=$1\n\
    \  Extension=$2\n\n  Sm=$(echo $Extension | wc -c)\n  Cap=$(echo $Extension |\
    \ awk '{ print $1 }')\n\n  StrongestExtensionName=$(echo $ClassName | cut -d'_'\
    \ -f1)\n  if [[ $Sm -ge $Cap ]] ; then\n    echo \"$ClassName.${StrongestExtensionName}\"\
    \n  else\n    if [[ $(echo $Extension | sort -n | uniq | wc -c) -ge 2 ]] ; then\n\
    \      echo \"$ClassName.${Extension[1]}\"\n    else\n      echo \"$ClassName\"\
    \n    fi\n  fi\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\t# Your code here\n\t\n\t\
    name=$1\n\textensions=$2\n\t\n\tupper=`echo $extensions | tr \" \" \"\\n\" | tr\
    \ \" \" \"\\n\" | tr \"A\" \"B\" | tr \"C\" \"D\" | sort | uniq | wc -l | xargs\
    \ echo`\n\tlower=`echo $extensions | tr \" \" \"\\n\" | tr \" \" \"\\n\" | tr\
    \ \"a\" \"b\" | tr \"c\" \"d\" | sort | uniq | wc -l | xargs echo`\n\n\tratio=`echo\
    \ $upper - $lower | bc -l`\n\t\n\tif [ ${ratio} -eq 0 ]\n\tthen\n\t\techo \"${name}.A\"\
    \n\telse\n\t\tif [ $ratio -lt 0 ]\n\t\tthen\n\t\t\techo \"${name}.${extensions[0]}\"\
    \n\t\telse\n\t\t\techo \"${name}.${extensions[1]}\"\n\t\tfi\n\tfi\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    # Write your code here\n\
    \    local name\n    local ext\n    name=$1\n    ext=$2\n    local count=0\n \
    \   local max=0\n    local i\n    local length\n    length=${#name}\n\n    for\
    \ (( i = 0; i < length; i++ ))\n    do\n        ((count++))\n        if [ $count\
    \ -eq ${#name} ]\n        then\n            count=0\n        fi\n        if [\
    \ $(( ${name:i:1} - ${ext:i:1} )) -gt ${max} ]\n        then\n            max=$((\
    \ ${name:i:1} - ${ext:i:1} ))\n        fi\n    done\n    echo \"$name.$max\"\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw6nb0gmr.sh: line 40: a -   : syntax error: operand expected (error
    token is "-   ")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name extension_name\n\
    \  class_name=$1\n  extension_name=${@:2}\n  local class_name extension_name\n\
    \  class_name=$1\n  extension_name=${@:2}\n  local CAP SM strength strongest_extension\n\
    \  CAP=${#extension_name}\n  SM=${#class_name}\n  strength=$(( (${CAP} - ${SM})\
    \ ))\n  local class_name extension_name max_strength\n  class_name=$1\n  extension_name=${@:2}\n\
    \  local CAP SM strength strongest_extension\n  CAP=${#extension_name}\n  SM=${#class_name}\n\
    \  strength=$(( (${CAP} - ${SM}) ))\n  if [[ $max_strength == $strength ]]; then\n\
    \    echo \"${class_name}${extension_name}\"\n  else\n    max_strength=$strength\n\
    \    strongest_extension=\"${class_name}\"${extension_name}\n  fi\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  # The strength is given by\
    \ the fraction CAP - SM.\n  # For example:\n  # AA = 0.3\n  # BB = 0.7\n  # CC\
    \ = 0.4\n  local cap=$(echo \"$1\" | awk '{print toupper($1)}')\n  local sm=$(echo\
    \ \"$1\" | awk '{print tolower($1)}')\n  local strength=$(echo \"$2\" | awk \"\
    {print ($cap - $sm) / $cap * 100}\")\n  local extension=$(echo \"$2\" | awk \"\
    {print toupper($1)}\" | awk \"{print substr($1,$2,$3)}\")\n  echo $extension\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: division by zero attempted

    awk: cmd. line:1: {print substr(Watashi,tEN niNE eIGHt8OKe,)}

    awk: cmd. line:1:                                          ^ syntax error

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name\n  local\
    \ extensions\n  local extension_array\n\n  class_name=$1\n  extensions=$2\n\n\
    \  extension_array=(${extensions//\" \" })\n  extension_array=(${extension_array[@]//[!A-Z]})\n\
    \  extension_array=(${extension_array[@]//[!a-z]})\n\n  local strongest_extension\n\
    \  local strength\n  local number_of_uppercase_letters\n  local number_of_lowercase_letters\n\
    \n  number_of_uppercase_letters=${#extension_array[@]}\n  number_of_lowercase_letters=${#extension_array[@]}\n\
    \  \n  if ((number_of_uppercase_letters == number_of_lowercase_letters)); then\n\
    \    strongest_extension=\"${class_name}${extension_array[0]}\"\n  else\n    local\
    \ number_of_strength_differences\n    local strength_difference\n    number_of_strength_differences=$((number_of_uppercase_letters\
    \ - number_of_lowercase_letters))\n    strength_difference=$(echo \"scale=2; (number_of_uppercase_letters\
    \ - number_of_lowercase_letters)*$((number_of_strength_differences/2))/number_of_uppercase_letters\
    \ + $((number_of_strength_differences/2))\" | bc )\n    strongest_extension=\"\
    ${class_name}.${extension_array[0]}${extension_array[number_of_strength_differences]}\"\
    \n  fi\n\n  return $strongest_extension\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9qam9fjs.sh: line 51: return: Watashi: numeric argument required

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name extensions\
    \ strength\n    class_name=\"$1\"\n    extensions=\"$2\"\n\n    strength=0\n \
    \   for extension in $extensions; do\n        local num_uppercase=`echo $extension\
    \ | grep -E '[A-Z]' | wc -l`\n        local num_lowercase=`echo $extension | grep\
    \ -E '[a-z]' | wc -l`\n        strength=$(($num_uppercase*$num_lowercase - $strength))\n\
    \    done\n    \n    local max_strength=0\n    for extension in $extensions; do\n\
    \        local num_uppercase=`echo $extension | grep -E '[A-Z]' | wc -l`\n   \
    \     local num_lowercase=`echo $extension | grep -E '[a-z]' | wc -l`\n      \
    \  max_strength=$(($num_uppercase*$num_lowercase - $max_strength))\n    done\n\
    \    \n    if [[ $max_strength -eq 0 ]]; then\n        return $class_name\n  \
    \  fi\n\n    for extension in $extensions; do\n        local num_uppercase=`echo\
    \ $extension | grep -E '[A-Z]' | wc -l`\n        local num_lowercase=`echo $extension\
    \ | grep -E '[a-z]' | wc -l`\n        local strength=$(($num_uppercase*$num_lowercase\
    \ - $max_strength))\n        if [ $strength -ge 0 ]; then\n            break\n\
    \        fi\n    done\n    \n    # Here we choose the extension that comes first\n\
    \    local i=0\n    for extension in $extensions; do\n        local num_uppercase=`echo\
    \ $extension | grep -E '[A-Z]' | wc -l`\n        local num_lowercase=`echo $extension\
    \ | grep -E '[a-z]' | wc -l`\n        if [ $num_uppercase -ge $num_lowercase ];\
    \ then\n            local suffix=\"${extension%%.*}\"\n            local prefix=\"\
    ${extension#*$suffix}\"\n            local suffix=\"${extension#$prefix%%.*}\"\
    \n            local prefix=\"${extension#$suffix%%.*}\"\n            local suffix=\"\
    ${extension#$suffix}\"\n            local prefix=\"${extension#$prefix}\"\n  \
    \          local suffix=\"${extension#$suffix}\"\n            local prefix=\"\
    ${extension#$prefix}\"\n            local suffix=\"${extension#$suffix}\"\n  \
    \          local prefix=\"${extension#$prefix}\"\n            local suffix=\"\
    ${extension#$suffix}\"\n            local prefix=\"${extension#$prefix}\"\n  \
    \          local suffix=\"${extension#$suffix}\"\n            local prefix=\"\
    ${extension#$prefix}\"\n            local suffix=\"${extension#$suffix}\"\n  \
    \          local prefix=\"${extension#$prefix}\"\n            local suffix=\"\
    ${extension#$\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb4st26wn.sh: line 92: unexpected EOF while looking for matching
    `"''

    /tmp/tmpb4st26wn.sh: line 96: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\nlocal CLASS=$1\nlocal EXT=$2\n\
    local SM # count of lowercase letters in extension\nlocal CM # count of uppercase\
    \ letters in extension\nlocal STRONGEST_EXTENSION # string that contains the strongest\
    \ extension\nlocal CAP # count of upper case letters in extension\nlocal STRONGEST_EXTENSION_EXTENSION\
    \ # extension with most upper case letters\nlocal STRONGEST_EXTENSION_MIDDLE_EXTENSION\
    \ # middle extension of strongest extension\nlocal STRONGEST_EXTENSION_LOWER_EXTENSION\
    \ # extension with most lower case letters\n# Loop through each of the extensions\
    \ in the list to calculate the number of \n# uppercase letters and lowercase letters.\n\
    for EXT in $2\ndo\nCAP=`echo $EXT | tr [A-Z] [A-Z] | tr -d [a-z] | wc -c`\nSM=`echo\
    \ $EXT | tr [a-z] [a-z] | wc -c`\nif (( CAP > SM )); then\nSTRONGEST_EXTENSION_EXTENSION=${EXT}\n\
    STRONGEST_EXTENSION_EXTENSION=`echo $STRONGEST_EXTENSION_EXTENSION | tr [A-Z]\
    \ [A-Z] | tr -d [a-z] | wc -c`\nSTRONGEST_EXTENSION_LOWER_EXTENSION=${EXT}\nSTRONGEST_EXTENSION_LOWER_EXTENSION=`echo\
    \ $STRONGEST_EXTENSION_LOWER_EXTENSION | tr [a-z] [a-z] | wc -c`\nSTRONGEST_EXTENSION_MIDDLE_EXTENSION=${EXT}\n\
    STRONGEST_EXTENSION_MIDDLE_EXTENSION=`echo $STRONGEST_EXTENSION_MIDDLE_EXTENSION\
    \ | tr [a-z] [a-z] | wc -c`\nSTRONGEST_EXTENSION=${STRONGEST_EXTENSION_EXTENSION}\n\
    STRONGEST_EXTENSION=`echo $STRONGEST_EXTENSION | tr [A-Z] [A-Z] | tr -d [a-z]\
    \ | wc -c`\nSTRONGEST_EXTENSION=${STRONGEST_EXTENSION}\nSTRONGEST_EXTENSION_EXTENSION=${EXT}\n\
    STRONGEST_EXTENSION_EXTENSION=`echo $STRONGEST_EXTENSION_EXTENSION | tr [A-Z]\
    \ [A-Z] | tr -d [a-z] | wc -c`\nSTRONGEST_EXTENSION_EXTENSION=`echo $STRONGEST_EXTENSION_EXTENSION\
    \ | tr [A-Z] [A-Z] | tr -d [a-z] | wc -c`\nSTRONGEST_EXTENSION_EXTENSION=`echo\
    \ $STRONGEST_EXTENSION_EXTENSION | tr [A-Z] [A-Z] | tr -d [a-z] | wc -c`\nSTRONGEST_EXTENSION_EXTENSION=`echo\
    \ $STRONGEST_EXTENSION_EXTENSION | \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp__mtc7h8.sh: line 51: unexpected EOF while looking for matching
    ``''

    /tmp/tmp__mtc7h8.sh: line 72: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class_name=$1\n\tlocal\
    \ extensions=$2\n\tlocal length=${#extensions[*]}\n\tlocal maxstrongest=$((length-1))\n\
    \tlocal i=0\n\tlocal strongest=\"\"\n\twhile [ $i -lt $length ]\n\tdo\n\t\tlet\
    \ i++\n\t\tlocal extension=\"${extensions[$i]}\"\n\t\tlocal cap=${extension:0:1}\n\
    \t\tlocal sm=${extension:1:1}\n\t\tlocal strength=$(expr $cap - $sm)\n\t\tif [\
    \ $strength -gt $maxstrongest ]\n\t\tthen\n\t\t\tmaxstrongest=$strength\n\t\t\t\
    strongest=\"${class_name}.${extensions[$i]}\"\n\t\tfi\n\tdone\n\techo \"$strongest\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1l8l68jx.sh: line 35: [: -: integer expression expected

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class extension\n\
    \    local strongest\n\n    class=\"${1}\"\n    extension=\"${2}\"\n    \n   \
    \ local uppercase_num=\"${#extension/[A-Z]/}\"\n    local lowercase_num=\"${#extension/[a-z]/}\"\
    \n    local cap=\"${uppercase_num}-${lowercase_num}\"\n\n    strongest=\"${class}${cap}\"\
    \n    for ext in \"${@:3}\"; do\n        if [[ $ext =~ ([A-Za-z]\\([0-9]+\\)\\\
    .) ]]; then\n            uppercase_num=\"${BASH_REMATCH[2]}\"\n            lowercase_num=\"\
    ${BASH_REMATCH[1]}\"\n            cap=\"${uppercase_num}-${lowercase_num}\"\n\
    \            strongest=\"${strongest}.${ext}\"\n        else\n            uppercase_num=\"\
    ${uppercase_num}\"\n            lowercase_num=\"${lowercase_num}\"\n         \
    \   cap=\"${cap}\"\n            strongest=\"${strongest}${ext}\"\n        fi\n\
    \    done\n    echo \"$strongest\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjvpfjxde.sh: line 28: ${#extension/[A-Z]/}: bad substitution

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal extensions=${2:-}\n\
    \t# Remove all but the first letters of each extension.\n\t\n\t# Use an associative\
    \ array for this to map each extension to its strength.\n\t# The keys of this\
    \ array are the extensions and the values are the strengths.\n\tdeclare -A extensionStrength\n\
    \n\t# Iterate over all extensions and get the strongest one.\n\tfor extension\
    \ in ${extensions[@]}; do\n\t\textension=${extension%%.*} # Remove any trailing\
    \ \".\"\n\t\tif [[ $extension != *[A-Z]* ]]; then\n\t\t\techo \"Error: extension\
    \ \\\"$extension\\\" does not start with an uppercase letter!\" 1>&2\n\t\t\texit\
    \ 1\n\t\tfi\n\t\textension=${extension//[^[:lower:]]/} # Remove all letters other\
    \ than lowercase letters.\n\t\textensionStrength[\"$extension\"]=$(( ${extensionStrength[\"\
    $extension\"]} - 1 ))\n\tdone\n\n\t# Sort the extensions by their strength.\n\t\
    local -A sortedExtensions\n\tsortedExtensions=($(\n\t\tprintf '%s\\n' \"${!extensionStrength[@]}\"\
    \ | \n\t\tsort -rn -k 2 -k 1 \n\t))\n\n\t# Return the strongest extension.\n\t\
    echo ${sortedExtensions[@]} | tr -d '.' | head -n1\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "/tmp/tmpva4l5n_s.sh: line 45: sortedExtensions: $(\n\t\tprintf '%s\\n'\
    \ \"${!extensionStrength[@]}\" | \n\t\tsort -rn -k 2 -k 1 \n\t): must use subscript\
    \ when assigning associative array\n"
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local STRONGEST_EXTENSIONS=$2\n\
    \  local CLASS=$1\n  local EXTS\n  EXTS=$(echo $STRONGEST_EXTENSIONS | sed -e\
    \ 's/ /\\./g' | sort -rn)\n  local EXT\n  local STR\n  STR=$(echo $EXTS | awk\
    \ -F\".\" '{sum=0; for(i=1;i<=NF;i++)sum+=$i;print sum}')\n  local S\n  S=$((${STR}\
    \ / ${#EXTS}))\n  if [[ $S == 0 ]]; then\n    echo \"$CLASS.$EXTS\"\n  else\n\
    \    echo \"$CLASS.${EXTS:0:$S}.${EXTS:$S}\"\n  fi\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class_name=$1\n\tlocal\
    \ extensions=$2\n\n\tlocal length=${#extensions[*]}\n\n\tlocal strength\n\tlocal\
    \ extension\n\tlocal tmp\n\tlocal i\n\n\tfor (( i=length-1; i>=0; i-- )); do\n\
    \t\textension=${extensions[i]}\n\t\ttmp=${extension^^}\n\t\tif [[ \"$extension\"\
    \ == \"$tmp\" ]]; then\n\t\t\tstrength=${strength:+-1}\n\t\telse\n\t\t\tstrength=${CAP:-0}\n\
    \t\t\tif [[ \"$strength\" -ne \"0\" ]]; then\n\t\t\t\tstrength=${strength}\n\t\
    \t\t\tbreak\n\t\t\tfi\n\t\tfi\n\tdone\n\n\tif [[ \"$strength\" -ne \"-1\" ]];\
    \ then\n\t\techo \"${class_name}.${extensions[$((length-strength))]}\"\n\telse\n\
    \t\techo \"${class_name}\"\n\tfi\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASS_NAME=$1\n  local\
    \ EXTENSIONS=$2\n\n  SORT_EXT=${EXTENSIONS//,/ }\n  SORT_EXT=$(echo \"$SORT_EXT\"\
    \ | tr ' ' '\\n' | sort -n | tail -n 1)\n  STRONGEST_EXT_SWITCH=$(echo \"$SORT_EXT\"\
    \ | cut -d '.' -f 1 )\n  STRONGEST_EXT_IF=$(echo \"$SORT_EXT\" | cut -d '.' -f\
    \ 2 )\n\n  STRONGEST_EXT_STRONGEST_EXTENSION=$(echo \"$SORT_EXT\" | cut -d '.'\
    \ -f 1 )\n  STRONGEST_EXT_IF_STRONGEST_EXTENSION=$(echo \"$SORT_EXT\" | cut -d\
    \ '.' -f 2 )\n\n  STRONGEST_EXT_STRONGEST_EXTENSION=$(echo \"$STRONGEST_EXT_STRONGEST_EXTENSION\"\
    \ | tr -d \"[A-Z]\" )\n  STRONGEST_EXT_IF_STRONGEST_EXTENSION=$(echo \"$STRONGEST_EXT_IF_STRONGEST_EXTENSION\"\
    \ | tr -d \"[a-z]\" )\n\n  CLASS_NAME=$(echo \"$CLASS_NAME\" | tr -d \"[\\/]\"\
    \ )\n\n  STRONGEST_EXT_IF_STRONGEST_EXTENSION_WITH_SECOND_STRONGEST_EXT_IF=$(echo\
    \ \"$STRONGEST_EXT_IF_STRONGEST_EXTENSION\" | sed -e \"s/$STRONGEST_EXT_IF_STRONGEST_EXTENSION.$STRONGEST_EXT_IF/$1$STRONGEST_EXT_IF_STRONGEST_EXTENSION/$2\"\
    )\n\n  STRONGEST_EXT_STRONGEST_EXTENSION_WITH_SECOND_STRONGEST_EXT_IF_WITH_SECOND_STRONGEST_EXT_IF=$(echo\
    \ \"$STRONGEST_EXT_IF_STRONGEST_EXTENSION\" | sed -e \"s/$STRONGEST_EXT_STRONGEST_EXTENSION.$STRONGEST_EXT_IF/$STRONGEST_EXT_STRONGEST_EXTENSION_WITH_SECOND_STRONGEST_EXT_IF/$1$STRONGEST_EXT_STRONGEST_EXTENSION_WITH_SECOND_STRONGEST_EXT_IF/$2\"\
    )\n\n  CLASS_NAME=$(echo \"$CLASS_NAME\" | tr -d \"[\\/]\" )\n\n  STRONGEST_EXT_IF_STRONGEST_EXTENSION_WITH_SECOND_STRONGEST_EXT_IF=$(echo\
    \ \"$STRONGEST_EXT_IF_STRONGEST_EXTENSION\" | sed -e \"s/$STRONGEST_EXT_IF_STRON\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplh_pawt3.sh: line 61: unexpected EOF while looking for matching
    `"''

    /tmp/tmplh_pawt3.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: -1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local classname=$1\n  local\
    \ extensions=$2\n  local ext\n\n  local class_cap=${classname:0:1}\n  local class_sm=${classname:1:1}\n\
    \  local class_length=${#classname}\n\n  local extension_cap=${extensions:0:1}\n\
    \  local extension_sm=${extensions:1:1}\n  local extension_length=${#extensions}\n\
    \n  local total_cap=${class_cap}${extension_cap}\n  local total_sm=${class_sm}${extension_sm}\n\
    \n  local strength=-1\n\n  # We want to use integer division so that the strength\
    \ will always\n  # be between 0 and total_cap\n  local div=`echo $((total_cap\
    \ / total_sm))`\n  while [ $div -gt 0 ]; do\n    strength=$((strength + div))\n\
    \    div=`expr $div / 2`\n  done\n\n  local strongest_ext=${classname%.*}.${extensions:0:1}\n\
    \  while [ \"${#strongest_ext}\" -gt \"1\" ]; do\n    extension_cap=${extension_cap}${extensions:1:1}\n\
    \    strongest_ext=${classname%.*}.${extension_cap}\n  done\n  strongest_ext=${strongest_ext}${extension_cap}\n\
    \n  local strongest_ext2\n  for strongest_ext2 in ${extensions}; do\n    if [\
    \ ${#strongest_ext2} -gt \"1\" ]; then\n      if [ \"${#strongest_ext}\" -gt \"\
    ${#strongest_ext2}\" ]; then\n        if [ \"$strongest_ext\" -ne \"$strongest_ext2\"\
    \ ]; then\n          break\n        fi\n      else\n        local div=`echo $((total_cap\
    \ / total_sm))`\n        while [ $div -gt 0 ]; do\n          strength=$((strength\
    \ + div))\n          div=`expr $div / 2`\n        done\n        if [ \"$strongest_ext\"\
    \ -eq \"$strongest_ext2\" ]; then\n          break\n        fi\n      fi\n   \
    \ fi\n  done\n\n  echo \"$classname.$strongest_ext\"\n}\n\ncandidate() {\n   \
    \ Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=31 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=27 encoding='utf-8'>
  timestamp: 1660057687
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  # Your code here\n  extensions=$2\n\
    \  strengths=()\n  for i in $extensions; do\n    lowerCount=0 \n    upperCount=0\n\
    \    for j in $i; do\n      if [[ $j == [A-Z] ]]; then\n        upperCount=$((upperCount+1))\n\
    \      else\n        lowerCount=$((lowerCount+1))\n      fi\n    done\n    strengths+=$((upperCount-lowerCount))\n\
    \  done\n  maxStrength=${strengths[0]}\n  for i in ${!strengths[@]}; do\n    if\
    \ [[ ${strengths[$i]} -gt ${maxStrength} ]]; then\n      maxStrength=${strengths[$i]}\n\
    \    fi\n  done\n  echo \"$1 $2\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name extensions_string\n\
    \    class_name=$1\n    extensions_string=$2\n    extensions_string=$(echo \"\
    $extensions_string\" | sed 's/ //g' | sed 's/,/ /g')\n    local strength first_extension\n\
    \    first_extension=$(echo \"$extensions_string\" | sed 's/.*\\([A-Z]\\)\\([a-z]\\\
    )\\(.*\\)\\(.*\\)/\\1\\3\\2/')\n    local extensions_array\n    extensions_array=$(echo\
    \ \"$extensions_string\" | sed 's/.*\\([A-Z]\\)\\([a-z]\\)\\(.*\\)\\(.*\\)/\\\
    1\\3\\2/')\n    local number_of_capitals\n    number_of_capitals=$(echo \"$first_extension\"\
    \ | tr -cd '[A-Z]' | wc -c)\n    local number_of_lowercases\n    number_of_lowercases=$(echo\
    \ \"$first_extension\" | tr -cd '[a-z]' | wc -c)\n    local number_of_capitals_and_lowercases\n\
    \    number_of_capitals_and_lowercases=$(( number_of_capitals + number_of_lowercases\
    \ ))\n    local capitals_index\n    capitals_index=$(( number_of_capitals_and_lowercases\
    \ / number_of_caps ))\n    local lowercases_index\n    lowercases_index=$(( number_of_capitals_and_lowercases\
    \ % number_of_caps ))\n    local strength_of_extension\n    strength_of_extension=$((\
    \ capitals_index - lowercases_index ))\n    local index\n    index=$(expr $((\
    \ $(echo \"$extensions_array\" | sed 's/.*\\([A-Z]\\)\\([a-z]\\)\\(.*\\)\\(.*\\\
    )/\\1\\3\\2/' | sort -n | tail -n 1) )) - 1)\n    local extension\n    extension=$(echo\
    \ \"$extensions_array\" | sed 's/.*\\([A-Z]\\)\\([a-z]\\)\\(.*\\)\\(.*\\)/\\1\\\
    3\\2/')\n    if [[ \"$first_extension\" == *\"A\"* ]]; then\n        strength_of_extension=$((\
    \ 0 ))\n    elif [[ \"$first_extension\" == *\"B\"* ]]; then\n        strength_of_extension=$((\
    \ 1 ))\n    elif [[ \"$first_extension\" == *\"C\"* ]]; then\n        strength_of_extension=$((\
    \ 2 ))\n    elif [[ \"$first_extension\" == *\"D\"* ]]; then\n        strength_of_extension=$((\
    \ 3 ))\n    elif [[ \"$first_extension\" == *\"E\"* ]]; then\n        strength_of_extension\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps5ar7swa.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmps5ar7swa.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local EXTENSIONS=$2\n \
    \   local RESULT=\"\"\n    # Extract extension name from list of extensions given\
    \ as $2\n    local NAME=$(echo $EXTENSIONS | awk '{print $1}')\n    # Count upper\
    \ case letters in extension name\n    local CAPITALS=0\n    for ((i = 0; i < ${#NAME};\
    \ i++)); do\n        [ \"${NAME:i:1}\" == \"A\" ] && CAPITALS=$((CAPITALS+1))\n\
    \        [ \"${NAME:i:1}\" == \"B\" ] && CAPITALS=$((CAPITALS+1))\n        [ \"\
    ${NAME:i:1}\" == \"C\" ] && CAPITALS=$((CAPITALS+1))\n    done\n    \n    # Count\
    \ lower case letters in extension name\n    local LOWERCASES=0\n    for ((i =\
    \ 0; i < ${#NAME}; i++)); do\n        [ \"${NAME:i:1}\" == \"a\" ] && LOWERCASES=$((LOWERCASES+1))\n\
    \        [ \"${NAME:i:1}\" == \"b\" ] && LOWERCASES=$((LOWERCASES+1))\n      \
    \  [ \"${NAME:i:1}\" == \"c\" ] && LOWERCASES=$((LOWERCASES+1))\n    done\n  \
    \  \n    if [ \"${CAPITALS}\" -gt \"${LOWERCASES}\" ]; then\n        ((STRONGEST_EXTENSION_STRONGEST))=$NAME\n\
    \    elif [ \"${LOWERCASES}\" -gt \"${CAPITALS}\" ]; then\n        ((STRONGEST_EXTENSION_STRONGEST))=\"\
    ${NAME}${CAPITALS}\"\n    else\n        ((STRONGEST_EXTENSION_STRONGEST))=\"${NAME}\"\
    \n    fi\n    echo \"$1\"${STRONGEST_EXTENSION_STRONGEST}\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpguf_o_e9.sh: line 43: syntax error near unexpected token `=$NAME''

    /tmp/tmpguf_o_e9.sh: line 43: `        ((STRONGEST_EXTENSION_STRONGEST))=$NAME''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength\n  local extension\n  local i\n  \n  for ((i=0;\
    \ i<${#extensions[@]}; i++)); do\n    extension=${extensions[$i]}\n    strength=${extension//\\\
    // }\n    if [[ ${strength} -le 0 ]]; then\n      strength=\"${strength}.0\"\n\
    \    fi\n    case \"${extension}\" in\n      ${class_name//_/ } ) extension=\"\
    ${class_name}/${extension}\";;\n      ${class_name//_/ } ) extension=\"${class_name}/${extension}\"\
    ;;\n      * ) extension=\"${extension}\";;\n    esac\n  done\n  echo \"$class_name.$extension\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3pta317o.sh: line 31: [[: tEN niNE eIGHt8OKe: syntax error in expression
    (error token is "niNE eIGHt8OKe")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal classname extensions\
    \ strength uppercase lowercase\n\tlocal class_name ext\n\t\n\tuppercase=$(echo\
    \ $1 | tr '[:lower:]' '[:upper:]')\n\tlowercase=$(echo $1 | tr '[:upper:]' '[:lower:]')\n\
    \t\n\tclassname=${2%%.*}\n\textensions=${2##*.}\n\t\n\tstrength=$(echo $extensions\
    \ | sed -e \"s/$lowercase/$uppercase/g\")\n\t\n\tfor((i=0;i<${#extensions[*]};++i))\n\
    \tdo\n\t\text=${extensions[i]}\n\t\tif [[ \"$ext\" == $lowercase ]]; then\n\t\t\
    \tstrength=${uppercase}\n\t\telse\n\t\t\tstrength=${lowercase}\n\t\tfi\n\t\tif\
    \ [[ ${#strength} -gt -1 ]]; then\n\t\t\tstrength=${strength%?}\n\t\tfi\n\t\t\
    if [[ ${#strength} -gt 0 ]]; then\n\t\t\tbreak\n\t\tfi\n\tdone\n\n\tif [[ $1 =~\
    \ $classname ]]; then\n\t\techo \"$classname.$strength\"\n\telse\n\t\techo \"\
    $classname\"\n\tfi\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") =\
    \ \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name\n    local\
    \ extension\n    local extension_strength\n    local ext\n    local exts\n   \
    \ local i\n\n    exts=$2\n    class_name=$1\n    i=1\n    while [ $i -le ${#exts[*]}\
    \ ]; do\n        ext=${exts[$i]}\n        ext=${ext//\\// }\n        extension_strength=$((${#class_name}-${#ext}))\n\
    \        if [ $extension_strength -gt 0 ] ; then\n            extension=\"${class_name}.$ext\"\
    \n            if [ $extension_strength -eq 1 ] ; then\n                return\
    \ $extension\n            else\n                if [ $extension_strength -eq $((${#class_name}-2))\
    \ ] ; then\n                    return $extension\n                fi\n      \
    \      fi\n        fi\n        i=$((i+1))\n    done\n    echo \"$class_name\"\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class\n\tlocal extensions\n\
    \tlocal extension\n\tlocal extensionsCount\n\tlocal result\n\n\t# split the arguments\n\
    \tclass=$1\n\textensions=$2\n\n\t# count the uppercase letters\n\textensionsCount=0\n\
    \twhile [[ \"$extensions\" =~ [^[:upper:]]+ ]]; do\n\t\textensionsCount=$(( ${extensionsCount}+1\
    \ ))\n\t\textensions=${extensions//[^[:upper:]]/}\n\tdone\n\t\n\t# count the lowercase\
    \ letters\n\textensionsCount=$(( ${extensionsCount}+1 ))\n\textensions=${extensions//[^[:lower:]]/}\n\
    \t\n\t# get the number of chars before and after lowercase letters\n\twhile [[\
    \ \"$extensions\" =~ [a-z][a-z] ]]; do\n\t\textensions=${extensions//[a-z][a-z]/}\n\
    \t\textensionsCount=$(( ${extensionsCount}+1 ))\n\tdone\n\t\n\t# get the number\
    \ of chars before and after uppercase letters\n\twhile [[ \"$extensions\" =~ [A-Z][A-Z]\
    \ ]]; do\n\t\textensions=${extensions//[A-Z][A-Z]/}\n\t\textensionsCount=$(( ${extensionsCount}+1\
    \ ))\n\tdone\n\t\n\t# get the max strength\n\tresult=$class${extensionsCount}\n\
    \t\n\t# return the result\n\techo \"$result\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local classname=$1\n  \
    \  local extensions=$2\n    local cap=${#classname};\n    local sm=${#extensions[0]};\n\
    \    local extension=${extensions[0]};\n    local strongest=${extensions[0]};\n\
    \    local i=1; \n    while [ $i -le $sm ]; do \n        extension=${extensions[i]};\n\
    \        extension=${extension,,}; \n        cap=${#extension};\n        sm=${#extension[0]};\n\
    \        if [ $i -eq $cap ]; then \n            extension=${extensions[i]};\n\
    \            extension=${extension,,}; \n            cap=${#extension};\n    \
    \    fi;\n        if [ $i -eq $sm ]; then \n            extension=${extensions[i]};\n\
    \            extension=${extension,,}; \n            sm=${#extension};\n     \
    \   fi;\n        i=$((i+1));\n    done;\n    if [ $i -gt 1 ]; then \n        extension=${extensions[i]};\n\
    \        extension=${extension,,}; \n        strongest=${extensions[i]};\n   \
    \ fi;\n    echo \"$classname.$strongest\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local className=$1\n  \
    \  local extensions=$2\n    local extensionStrength=-1\n    local bestExtension=\n\
    \    local bestExtensionStrength=\n    local currentExtensionStrength=\n    local\
    \ currentExtension=\n    local extensionIndex=0\n    local extensionLength=\n\
    \    local extensionStrengthIndex=0\n    \n    local classNameLength=$(echo $className\
    \ | wc -w)\n    local extensionLength=$(echo $extensions | wc -w)\n    \n    if\
    \ [ $classNameLength -ne $extensionLength ]; then\n        echo \"ERROR: Both\
    \ class name and extension name must have the same length\"\n        exit 1\n\
    \    fi\n    \n    extensions=$(echo $extensions | sed -e 's/ //g')\n    \n  \
    \  for extension in $extensions; do\n        extensionStrength=$(echo $extension\
    \ | sed -e 's/[A-Z]//g' | sed -e 's/[a-z]//g')\n        if [ \"$extensionStrength\"\
    \ -gt \"$extensionStrengthIndex\" ]; then\n            extensionStrengthIndex=$extensionStrength\n\
    \            currentExtension=$extension\n        fi\n    done\n    \n    for\
    \ extension in $extensions; do\n        extensionStrength=$(echo $extension |\
    \ sed -e 's/[A-Z]//g' | sed -e 's/[a-z]//g')\n        if [ \"$extensionStrength\"\
    \ -gt \"$extensionStrengthIndex\" ]; then\n            extensionStrengthIndex=$extensionStrength\n\
    \            currentExtensionStrength=$extensionStrength\n        fi\n    done\n\
    \    \n    for extension in $extensions; do\n        extensionStrength=$(echo\
    \ $extension | sed -e 's/[A-Z]//g' | sed -e 's/[a-z]//g')\n        if [ \"$extensionStrength\"\
    \ -gt \"$extensionStrengthIndex\" ]; then\n            extensionStrengthIndex=$extensionStrength\n\
    \            currentExtensionStrength=$extensionStrength\n        fi\n    done\n\
    \    \n    for extension in $extensions; do\n        extensionStrength=$(echo\
    \ $extension | sed -e 's/[A-Z]//g' | sed -e 's/[a-z]//g')\n        if [ \"$extensionStrength\"\
    \ -gt \"$extensionStrengthIndex\" ]; then\n            extensionStrengthIndex=$extensionStrength\n\
    \            currentExtensionStrength=$extensionStrength\n        fi\n    done\n\
    \    \n    for extension in $extensions; do\n        extensionStrength=$(echo\
    \ $extension | sed -e 's/[A-Z]//g' | sed -e 's/[a-z]//g')\n        if [ \"$extensionStrength\"\
    \ -gt \"$extensionStrengthIndex\" ]; then\n            extensionStrengthIndex\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppm57vzqa.sh: line 79: syntax error near unexpected token `}''

    /tmp/tmppm57vzqa.sh: line 79: `}''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=${1:?Please give\
    \ the name of a class}\n\tlocal list=${2:?Please give a list of extensions}\n\t\
    local length=${#class}\n\tlocal i=0 \n\tlocal strongest=\"\"\n\tlocal max_extension_length=0\n\
    \tlocal max_extension_length_chars=0\n\twhile [[ $i -lt ${#list} ]]; do\n\t\t\
    local extension=${list[$i]}\n\t\tlocal extension_length=${#extension}\n\t\tif\
    \ [[ $extension_length -lt $max_extension_length ]]; then\n\t\t\tmax_extension_length=$extension_length\n\
    \t\tfi\n\t\t(( length -= extension_length ))\n\t\t(( i += 1 ))\n\tdone\n\tlocal\
    \ extension_length=${#class}\n\t(( extension_length -= max_extension_length ))\n\
    \twhile [[ $extension_length -lt $max_extension_length ]]; do\n\t\tlocal letters=${class:\
    \ - $extension_length}\n\t\tlocal cap_letters=${letters:0:1}\n\t\tlocal sm_letters=${letters:1}\n\
    \t\tlocal strength=$(( ${#cap_letters} + ${#sm_letters} - $extension_length +\
    \ 1 ))\n\t\tif (( $strength >  0 ))\n\t\tthen\n\t\t\tif [[ \"$cap_letters\" >\
    \ $max_extension_length_chars ]]; then\n\t\t\t\tmax_extension_length_chars=$cap_letters\n\
    \t\t\tfi\n\t\t\tif [[ \"$sm_letters\" > $max_extension_length_chars ]]; then\n\
    \t\t\t\tmax_extension_length_chars=$sm_letters\n\t\t\tfi\n\t\tfi\n\t\t(( extension_length\
    \ -= 1 ))\n\tdone\n\techo \"$class.${max_extension_length}\"\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=$1\n\tlocal exts=$2\n\
    \t# Count uppercase letters\n\tlocal cap=${class%[A-Z*]}\n\t# Count lowercase\
    \ letters\n\tlocal sm=${class#*[A-Z]}\n\tlocal sm1=\"${class#*[A-Z][A-Za-z]*}\"\
    \n\tlocal sm2=\"${class#*[A-Z][A-Za-z]*[A-Za-z]*}\"\n\tlocal sm3=\"${class#*[A-Z][A-Za-z]*[A-Za-z]*[A-Za-z]*}\"\
    \n\tlocal sm4=\"${class#*[A-Z][A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*}\"\n\tlocal\
    \ sm5=\"${class#*[A-Z][A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*}\"\n\tlocal\
    \ sm6=\"${class#*[A-Z][A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*}\"\
    \n\tlocal sm7=\"${class#*[A-Z][A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*}\"\
    \n\tlocal sm8=\"${class#*[A-Z][A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*}\"\
    \n\tlocal sm9=\"${class#*[A-Z][A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*}\"\
    \n\tlocal sm10=\"${class#*[A-Z][A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*}\"\
    \n\tlocal sm11=\"${class#*[A-Z][A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*}\"\
    \n\tlocal sm12=\"${class#*[A-Z][A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*}\"\
    \n\tlocal sm13=\"${class#*[A-Z][A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*}\"\
    \n\tlocal sm14=\"${class#*[A-Z][A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Za-z]*[A-Z\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpag6oe813.sh: line 58: unexpected EOF while looking for matching
    `"''

    /tmp/tmpag6oe813.sh: line 62: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local capitals=0\n    local smalls=0\n    local i\n    local\
    \ j\n    local k\n    local strength\n    local max\n    local maxExtension\n\
    \    local extensionsStrongest\n    local extension\n    local extensionStrongest\n\
    \    local i\n    local j\n    local k\n    local extension\n    local extensionName\n\
    \n    extensionStrongest=0\n    extensionName=\"\"\n    for ((i=0; i<${#extensions[@]};\
    \ i++)); do\n        if [[ ${extensions[$i]} == *[A-Z]* ]]; then\n           \
    \ capitals=$((capitals+1))\n        elif [[ ${extensions[$i]} == *[a-z]* ]]; then\n\
    \            smalls=$((smalls+1))\n        else\n            extension=\"${extensions[$i]}\"\
    \n            break\n        fi\n    done\n    \n    if ((capitals > smalls));\
    \ then\n        strength=$(((capitals-smalls)/capitals))\n    else\n        strength=$((smalls/smalls))\n\
    \    fi\n    \n    if [[ ${#extensions[@]} -gt 1 ]]; then\n        for ((j=1;\
    \ j<=${#extensions[@]}; j++)); do\n            extension=\"${extensions[$j]}\"\
    \n            if [[ ${extension} == *[A-Z]* ]]; then\n                capitals=$((capitals+1))\n\
    \            elif [[ ${extension} == *[a-z]* ]]; then\n                smalls=$((smalls+1))\n\
    \            else\n                break\n            fi\n        done\n     \
    \   extensionStrongest=$(((capitals-smalls)/capitals))\n        extensionStrongest=\"\
    ${extensionStrongest}${extensionStrongest:0:${#extensionStrongest}-1}\"\n    else\n\
    \        extensionStrongest=${extensions[0]}\n    fi\n    \n    max=\"${#extensionStrongest}\"\
    \n    maxExtension=\"${extensionStrongest:0:${max}}\" \n    if ((max > 0)); then\n\
    \        extensionName=\"${extensionStrongest:0:${max-1}}\" \n    fi\n    \n \
    \   echo \"${class}.${extensionName}\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  # Capital letters are taken from the extension's name.\n  #\
    \ Numbers are taken from each extension's name's first letter.\n  local capital=`echo\
    \ $extensions | tr [A-Z] [A-Z]`\n  local capital=`echo $capital | cut -d \" \"\
    \ -f1`\n  local lower=`echo $extensions | tr [a-z] [a-z]`\n  local lower=`echo\
    \ $lower | cut -d \" \" -f1`\n  local st=`echo $capital - $lower | bc -l`\n  if\
    \ [ -z \"$st\" ] || [ \"$st\" -eq 0 ]\n  then\n    echo $class_name\n  else\n\
    \    echo $class_name.$(( $(echo $st | bc -l) - 1 ))\n  fi\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: "tr: extra operand \u2018k\u2019\nTry 'tr --help' for more information.\n\
    (standard_in) 1: syntax error\n"
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class ext \n  local\
    \ CAP SM strength strongest i\n  local exts_arr=$(echo $2 | tr \" \" \"\\n\")\n\
    \  # We will use a dictionary\n  exts_arr=($exts_arr)\n  CAP=${#exts_arr[@]}\n\
    \  SM=${CAP}\n  for ((i=0; i < ${CAP}; i++)); do\n    ext=${exts_arr[i]}\n   \
    \ SM=$(( SM - ${#ext} ))\n  done\n  strength=$((${CAP} - ${SM}))\n  strongest=\"\
    ${class}.$ext\"\n  if [ $strength -gt 0 ]; then\n    strongest=$((${strongest}${CAP}\
    \ - 1))\n  fi\n  if [ $strength -gt 0 ]; then\n    strongest=$((${strongest}${SM}))\n\
    \  fi\n  echo \"$strongest\"\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpok9e3_wj.sh: line 36: .eIGHt8OKe3 - 1: syntax error: operand expected
    (error token is ".eIGHt8OKe3 - 1")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local Class Extensions\n\
    \    local STRONGEXT=\"$(echo $1 | sed 's/ /\\./g' | awk '{for(i=1;i<=NF;i++)\
    \ \n     {if($i~/^[A-Z]/ && $(i+1))~/[a-z]/ || $i~/[a-z]/\n      {STRONGEXT=\"\
    $STRONGEXT.$i\"}}}; END{print STRONGEXT}')\"\n    local STRONGEXT=\"$(echo $1\
    \ | sed 's/ /\\./g' | awk '{for(i=1;i<=NF;i++) { if($i~/^[A-Z]/\n      && $(i+1))~/[a-z]/\
    \ || $i~/[a-z]/\n      {STRONGEXT=\"$STRONGEXT.$i\"}}}; END{print STRONGEXT}')\"\
    \n    local STRONGEXT=\"$(echo $1 | sed 's/ /\\./g' | awk '{for(i=1;i<=NF;i++)\
    \ { if($i~/^[A-Z]/\n      && $(i+1))~/[a-z]/ || $i~/[a-z]/\n      {STRONGEXT=\"\
    $STRONGEXT.$i\"}}}; END{print STRONGEXT}')\"\n    local STRONGEXT=\"$(echo $1\
    \ | sed 's/ /\\./g' | awk '{for(i=1;i<=NF;i++) { if($i~/^[A-Z]/\n      && $(i+1))~/[a-z]/\
    \ || $i~/[a-z]/\n      {STRONGEXT=\"$STRONGEXT.$i\"}}}; END{print STRONGEXT}')\"\
    \n    local STRONGEXT=\"$(echo $1 | sed 's/ /\\./g' | awk '{for(i=1;i<=NF;i++)\
    \ { if($i~/^[A-Z]/\n      && $(i+1))~/[a-z]/ || $i~/[a-z]/\n      {STRONGEXT=\"\
    $STRONGEXT.$i\"}}}; END{print STRONGEXT}')\"\n    local STRONGEXT=\"$(echo $1\
    \ | sed 's/ /\\./g' | awk '{for(i=1;i<=NF;i++) { if($i~/^[A-Z]/\n      && $(i+1))~/[a-z]/\
    \ || $i~/[a-z]/\n      {STRONGEXT=\"$STRONGEXT.$i\"}}}; END{print STRONGEXT}')\"\
    \n    local STRONGEXT=\"$(echo $1 | sed 's/ /\\./g' | awk '{for(i=1;i<=NF;i++)\
    \ { if($i~/^[A-Z]/\n      && $(i\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa6lth196.sh: line 41: unexpected EOF while looking for matching
    `''''

    /tmp/tmpa6lth196.sh: line 63: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class_name extension_list\
    \ strength\n\tclass_name=$1\n\textension_list=$2\n\n\tstrength=-1\n\tfor extension\
    \ in ${extension_list}; do\n\t\t[[ \"$extension\" =~ [A-Z]$ ]] && strength=`echo\
    \ $extension | awk '{ print toupper($1) - tolower($1) }'`\n\t\t[[ \"$extension\"\
    \ =~ [a-z]$ ]] && strength=`echo $extension | awk '{ print toupper($1) - tolower($1)\
    \ }'`\n\tdone\n\n\techo \"$class_name.$extension_list\"\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class_name=$1\n\tlocal\
    \ extensions=$2\n\tlocal caps=${#extensions}\n\tlocal sms=${#extensions} - ${#caps}\n\
    \tlocal strength=-1\n\n\tlocal i\n\tlocal j\n\t\n\tfor i in $(seq 0 $caps); do\n\
    \t\tlocal cap=${extensions:$i:1}\n\t\tlocal sm=${extensions:$((i+1)):1}\n\t\t\
    strength=$((${#cap}+${#sm})/${#caps-sms})\n\t\tif [ $strength -gt $((${#class_name}+1))-$((${#cap}+${#sm}))\
    \ ] ; then\n\t\t\tbreak\n\t\tfi\n\tdone\n\t\n\tlocal str=${class_name}\n\t\n\t\
    for j in $(seq 1 $sms); do\n\t\tlocal sm=${extensions:$((j+1)):1}\n\t\tstr=${str:1:${#str}-1}\n\
    \t\tstr=${str}.${sm}\n\tdone\n\t\n\tif [ ${#str} -gt ${#class_name} ] ; then\n\
    \t\tstr=${str:1:${#str}-1}\n\tfi\n\t\n\techo $str\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2dh77j6t.sh: line 25: local: `2'': not a valid identifier

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: syntax error near unexpected
    token `/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: `(${#cap}+${#sm})/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: line 35: [: -gt: unary operator expected

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: syntax error near unexpected
    token `/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: `(${#cap}+${#sm})/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: line 35: [: -gt: unary operator expected

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: syntax error near unexpected
    token `/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: `(${#cap}+${#sm})/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: line 35: [: -gt: unary operator expected

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: syntax error near unexpected
    token `/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: `(${#cap}+${#sm})/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: line 35: [: -gt: unary operator expected

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: syntax error near unexpected
    token `/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: `(${#cap}+${#sm})/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: line 35: [: -gt: unary operator expected

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: syntax error near unexpected
    token `/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: `(${#cap}+${#sm})/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: line 35: [: -gt: unary operator expected

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: syntax error near unexpected
    token `/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: `(${#cap}+${#sm})/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: line 35: [: -gt: unary operator expected

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: syntax error near unexpected
    token `/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: command substitution: line 34: `(${#cap}+${#sm})/${#caps-sms}''

    /tmp/tmp2dh77j6t.sh: line 35: [: -gt: unary operator '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local STRONGEST_EXTENSION=$1\n\
    \  local EXTENSIONS=$2\n  local STRONGEST_EXTENSION_NAME=\"\"\n  local SCORES=$((\
    \ ${#EXTENSIONS[@]} - $(($1 - 1)) ))\n  local SCORES=$(($SCORES > 1 ? $SCORES\
    \ : 1))\n  local MAX_SCORE=0\n  local I=0\n  for i in $(seq 0 $((${#EXTENSIONS[@]}\
    \ - 1)) ); do\n    if [[ \"$EXTENSIONS[$i]\" == \"${EXTENSIONS[$i - 1]}\" ]];\
    \ then\n      SCORES=$(($SCORES - 1))\n    fi\n    if [[ \"$EXTENSIONS[$i]\" >\
    \ \"$STRONGEST_EXTENSION\" ]]; then\n      STRONGEST_EXTENSION_NAME=$EXTENSIONS[$i]\n\
    \      STRONGEST_EXTENSION=$(( ${#STRONGEST_EXTENSION_NAME} - $SCORES ))\n   \
    \ fi\n    if [[ $SCORES -gt $MAX_SCORE ]]; then\n      MAX_SCORE=$SCORES\n   \
    \   I=$i\n    fi\n  done\n  printf \"%s.%s\\n\" \"$STRONGEST_EXTENSION_NAME\"\
    \ \"$EXTENSIONS[$I]\"\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd7u9klez.sh: line 30: EXTENSIONS: bad array subscript

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tstr=$(echo $1 | sed -r 's/\
    \ /\\\\./g')\n\text=$(echo $2 | sed -r 's/ /\\\\./g')\n\tcap=$(echo $ext | awk\
    \ '{print toupper($0)}')\n\tsm=$(echo $ext | awk '{print tolower($0)}')\n\tstrength=$((\
    \ (($cap - $sm) / $cap) * ${#str} ))\n\techo \"$str.$ext\" | sed -r \"s/$str./$str.$((strength\
    \ > ${#str} ? str : ${#str} ))./g\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb8fnspyj.sh: line 26: ((TEN\.NINE\.EIGHT8OKE - ten\.nine\.eight8oke)
    / TEN\.NINE\.EIGHT8OKE) * 7 : syntax error: invalid arithmetic operator (error
    token is "\.NINE\.EIGHT8OKE - ten\.nine\.eight8oke) / TEN\.NINE\.EIGHT8OKE) *
    7 ")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local EXTENSION_NAME=$1\n\
    \  local EXTENSIONS=$2\n  local STRONGEST_EXTENSION\n  \n  for EXTENSION in ${EXTENSIONS};\
    \ do\n    # Get the number of uppercase letters in the extension's name\n    EXTENSION_LENGTH=${#EXTENSION}\n\
    \    \n    # Get number of lowercase letters in the extension's name\n    EXTENSION_LENGTH_LOWERCASE=${#EXTENSION/[A-Z]/}\n\
    \    \n    # Get percentage of extension's name with the length of the extension\n\
    \    EXTENSION_THRESHOLD=${EXTENSION_LENGTH/EXTENSION_LENGTH_LOWERCASE}\n    \n\
    \    # Get the number of uppercase letters in the extension's name\n    EXTENSION_UPPERCASE=${EXTENSION_LENGTH_LOWERCASE}\n\
    \    \n    if [ \"${EXTENSION_THRESHOLD}\" -gt \"0\" ]; then\n      STRONGEST_EXTENSION=$EXTENSION\n\
    \      break\n    fi\n  done\n  \n  if [ -z \"$STRONGEST_EXTENSION\" ]; then\n\
    \    echo \"WARNING: could not find strongest extension\"\n    STRONGEST_EXTENSION=\"\
    Extension not found\"\n  fi\n  \n  echo $STRONGEST_EXTENSION\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp24948no3.sh: line 31: ${#EXTENSION/[A-Z]/}: bad substitution

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1 extensions=$2\n\
    \  local strength=0\n  local i\n  \n  for ((i = 1; i <= ${#extensions[*]}; i++));\
    \ do\n    case \"${extensions[$i]}\" in\n      ${class}${extensions[$((${#extensions[*]}\
    \ - 1))]}|*)\n        strength=$((${strength} * $((${extensions[$i]} - ${extensions[$((${#extensions[*]}\
    \ - 1))]}))));;\n    esac\n  done\n  \n  case $strength in\n    0)\n      echo\
    \ \"$class${extensions[-1]}\"\n    ;;\n    *)\n      echo \"$class.${extensions[$((${#extensions[*]}\
    \ - 1))]}\"\n    ;;\n  esac\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_a4nldny.sh: line 29: - tEN niNE eIGHt8OKe: syntax error in expression
    (error token is "niNE eIGHt8OKe")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local extensions_length=$(expr length \"${extensions}\")\n\
    \    local strongest_extension=\"\"\n    local sm=0\n    local cap=0\n    local\
    \ i=0\n\n    while [ \"$i\" -le \"$extensions_length\" ] \n    do\n        extension=$(expr\
    \ sub \"${i}\" \"${extensions_length}\" \"${extensions[i]}\")\n        cap=$(expr\
    \ sub \"${i}\" \"${extensions_length}\" \"${extensions[i]}\" | wc -c)\n      \
    \  sm=$(expr sub \"${i}\" \"${extensions_length}\" \"${extensions[i]}\" | wc -l)\n\
    \        (( sm += 1 ))\n        (( cap += 1 ))\n        if [ \"$cap\" -eq \"$sm\"\
    \ ]; then\n            (( cap = 0 ))\n        fi\n        if [ \"$cap\" -gt \"\
    $sm\" ] \\\n        && [ \"$extension\" -ne \"\" ] \\\n        && [ \"$extension\"\
    \ != \"null\" ]\n        then\n            if [ \"$extension\" != \"$strongest_extension\"\
    \ ] \\\n            && [ \"$extension\" != \"null\" ]\n            then\n    \
    \            strongest_extension=\"${extension}\"\n            fi\n        fi\n\
    \        (( i += 1))\n    done\n    echo \"${class}.${strongest_extension}\"\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20180\u2019\nexpr: syntax error:\
    \ unexpected argument \u20180\u2019\nexpr: syntax error: unexpected argument \u2018\
    0\u2019\nexpr: syntax error: unexpected argument \u20181\u2019\nexpr: syntax error:\
    \ unexpected argument \u20181\u2019\nexpr: syntax error: unexpected argument \u2018\
    1\u2019\nexpr: syntax error: unexpected argument \u20182\u2019\nexpr: syntax error:\
    \ unexpected argument \u20182\u2019\nexpr: syntax error: unexpected argument \u2018\
    2\u2019\nexpr: syntax error: unexpected argument \u20183\u2019\nexpr: syntax error:\
    \ unexpected argument \u20183\u2019\nexpr: syntax error: unexpected argument \u2018\
    3\u2019\nexpr: syntax error: unexpected argument \u20184\u2019\nexpr: syntax error:\
    \ unexpected argument \u20184\u2019\nexpr: syntax error: unexpected argument \u2018\
    4\u2019\nexpr: syntax error: unexpected argument \u20185\u2019\nexpr: syntax error:\
    \ unexpected argument \u20185\u2019\nexpr: syntax error: unexpected argument \u2018\
    5\u2019\nexpr: syntax error: unexpected argument \u20186\u2019\nexpr: syntax error:\
    \ unexpected argument \u20186\u2019\nexpr: syntax error: unexpected argument \u2018\
    6\u2019\nexpr: syntax error: unexpected argument \u20187\u2019\nexpr: syntax error:\
    \ unexpected argument \u20187\u2019\nexpr: syntax error: unexpected argument \u2018\
    7\u2019\nexpr: syntax error: unexpected argument \u20188\u2019\nexpr: syntax error:\
    \ unexpected argument \u20188\u2019\nexpr: syntax error: unexpected argument \u2018\
    8\u2019\nexpr: syntax error: unexpected argument \u20189\u2019\nexpr: syntax error:\
    \ unexpected argument \u20189\u2019\nexpr: syntax error: unexpected argument \u2018\
    9\u2019\nexpr: syntax error: unexpected argument \u201810\u2019\nexpr: syntax\
    \ error: unexpected argument \u201810\u2019\nexpr: syntax error: unexpected argument\
    \ \u201810\u2019\nexpr: syntax error: unexpected argument \u201811\u2019\nexpr:\
    \ syntax error: unexpected argument \u201811\u2019\nexpr: syntax error: unexpected\
    \ argument \u201811\u2019\nexpr: syntax error: unexpected argument \u201812\u2019\
    \nexpr: syntax error: unexpected argument \u201812\u2019\nexpr: syntax error:\
    \ unexpected argument \u201812\u2019\nexpr: syntax error: unexpected argument\
    \ \u201813\u2019\nexpr: syntax error: unexpected argument \u201813\u2019\nexpr:\
    \ syntax error: unexpected argument \u201813\u2019\nexpr: syntax error: unexpected\
    \ argument \u201814\u2019\nexpr: syntax error: unexpected argument \u201814\u2019\
    \nexpr: syntax error: unexpected argument \u201814\u2019\nexpr: syntax error:\
    \ unexpected argument \u201815\u2019\nexpr: sy"
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local extension=\"$1\"\n\
    \  shift\n  local classes=\"$*\"\n\n  local strongest_extension strength\n  local\
    \ class_name index_of_class_with_strength\n  local i j\n\n  strength=-1\n  class_name=$(echo\
    \ \"$extension\" | cut -d. -f1)\n  index_of_class_with_strength=\"${classes} |\
    \ grep $class_name | awk '{print $1}'\" | sort | uniq | head -1\n\n  for i in\
    \ $(echo $index_of_class_with_strength); do\n    for j in $(echo $index_of_class_with_strength);\
    \ do\n      if [[ \"$i\" -eq \"$j\" ]]; then\n        continue\n      fi\n   \
    \   strength=$((strength+1))\n    done\n  done\n  strength=${strength:-0}\n  if\
    \ [[ $strength -lt 0 ]]; then\n    echo \"$class_name.$extension\"\n  else\n \
    \   i=$((strength - 1))\n    echo \"$class_name.${extension:0:i}\"\n  fi\n}\n\n\
    candidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n\
    \    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\"\
    \ ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class extensions strength\n\
    \  class=$1; extensions=${2:-\"\"}; strength=-1\n  (( strength = ${#extensions}\
    \ == 1 )) || return -1\n  local i=0\n  while [[ ${extensions[i]} == ${class}*\
    \ ]]; do \n    (( ++i ))\n  done\n  local j=0\n  while (( j<${#extensions}) &&\
    \ ( ${extensions[j]} != ${class}* )); do \n    (( ++j ))\n  done\n  (( j==${#extensions}\
    \ )); return ${extensions[$j]}\n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local extension=\"$1\"\n\
    \    local extensions=$2\n    local extensions_sorted=($(echo \"$extensions\"\
    \ | tr '[a-z]' '[A-Z]'))\n    local extension_strength=-1\n    local current_extension_strength=0\n\
    \    local current_extension\n    local num_extensions\n    local extension_strength_string\n\
    \    local i\n    local j\n    \n    extension_strength_string=`echo \"${extension_strength}\"\
    \ | awk '{print toupper($1)}'`\n    current_extension_strength=`echo \"${extension_strength_string}\"\
    \ | awk '{print toupper($1)}'`\n    \n    num_extensions=${#extensions_sorted[@]}\n\
    \    \n    for ((i=0; i < num_extensions; ++i)); do\n        extension=`echo \"\
    ${extensions_sorted[i]}\" | tr '[a-z]' '[A-Z]'`\n        current_extension=${extension_strength_string}\n\
    \        for ((j=i+1; j < num_extensions; ++j)); do\n            extension=`echo\
    \ \"${extensions_sorted[j]}\" | tr '[a-z]' '[A-Z]'`\n            current_extension_strength=`echo\
    \ \"${current_extension}\" | awk '{print toupper($1)}'`\n            \n      \
    \      if [ \"$current_extension_strength\" -gt \"$extension_strength\" ]; then\n\
    \                extension_strength=$current_extension_strength\n            \
    \    current_extension=${extension_strength_string}\n            fi\n        done\n\
    \    done\n    \n    echo \"$extension.$extension_strength\"\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  # This can be solved with\
    \ an associative array, however that requires bash. \n  # We can solve it with\
    \ something simpler: \n  # - split the list into a list of words\n  # - for each\
    \ word: \n  #   - get the number of capital letters in it\n  #   - get the number\
    \ of lowercase letters in it\n  #   - calculate the strength of that word and\
    \ store it in an array\n  #   - sort the array\n  # - for each element in the\
    \ array, print the name of the class and the element\n  # - when the number of\
    \ capital letters minus the number of lowercase letters\n  #   is 0, print the\
    \ name of the class with no extension\n  # - when there are no capital letters\
    \ minus the number of lowercase letters\n  #   is 0, print the name of the class\
    \ with no extension (for zero extensions)\n  # - when the number of capital letters\
    \ is 0 and there are lowercase letters,\n  #   the name of the class with the\
    \ least number of extensions (minus one)\n  # - when there are both capital and\
    \ lowercase letters, return the class name\n  # - when there are some letters\
    \ that are not in the alphabet, we raise a \n  #   ValueError exception \n  \n\
    \  \n  \n  # Solution inspired by this question:\n  # https://stackoverflow.com/questions/46694838/sorting-an-associative-array-in-bash\n\
    \  \n  # Store the classes in an array\n  array=()\n  \n  \n  # Split the extensions\
    \ into a list of words\n  extensions=($2)\n\n  \n  # For each extension\n  for\
    \ word in ${extensions[@]}; do\n    # Get the number of capital letters in it\n\
    \    caps=$(echo \"$word\" | awk '{print toupper($0)}')\n    # Get the number\
    \ of lowercase letters in it\n    lowers=$(echo \"$word\" | awk '{print tolower($0)}')\n\
    \    # Calculate the strength\n    strength=$(echo \"$caps - $lowers\" | bc)\n\
    \    # Add the element to the array\n    array+=($word $strength)\n  done\n\n\
    \  \n  # Sort the array\n  \n  \n  # Get number of capital letters in the first\
    \ word\n  caps=$(echo \"${array[0]}\" | awk '{print toupper($0)}')\n  # Get number\
    \ of lowercase letters in the first word\n  lowers=$(echo \"${array[0]}\" | awk\
    \ '{print tolower($0)}')\n  \n  # Calculate the strength\n  strength=$(echo \"\
    $caps - $lowers\" | bc)\n  \n  # Print the class name with no extension\n  if\
    \ [[ $strength == 0 ]]; then\n    echo \"${array[0]}\"\n  fi\n  # Print the class\
    \ name \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local strongest_extension=\"\
    ${1%%.*}\"\n    local extensions=(${2//,/ })\n    local strength=0\n    for extension\
    \ in \"${extensions[@]}\"; do\n        local cap=${extension%% *}\n        local\
    \ sm=${extension#* }\n        (( strength += (cap - sm) / cap ))\n    done\n \
    \   echo \"$strongest_extension.${extensions[@]}\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgujtb2m8.sh: line 28: ((: strength += (cap - sm) / cap : division
    by 0 (error token is "cap ")

    /tmp/tmpgujtb2m8.sh: line 28: ((: strength += (cap - sm) / cap : division by 0
    (error token is "cap ")

    /tmp/tmpgujtb2m8.sh: line 28: ((: strength += (cap - sm) / cap : division by 0
    (error token is "cap ")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local index=0\n  local max_strength=0\n  local max_index=0\n  local current_extension\n\
    \n  for extension in $extensions\n  do\n    if [[ $extension == *\"$class\"* ]];\
    \ then\n      index=$((index+1))\n    fi\n    current_extension=$extension\n \
    \   if [[ $index == 1 ]]; then\n      if [[ \"$extension\" =~ [A-Z]$ ]]; then\n\
    \        ((max_strength=-1))\n        max_strength=0\n      else\n        ((max_strength=0))\n\
    \      fi\n    else\n      if [[ \"$extension\" =~ [A-Z]$ ]]; then\n        ((max_strength=max_strength-1))\n\
    \        max_strength=0\n      else\n        ((max_strength=max_strength+1))\n\
    \      fi\n    fi\n  done\n\n  ((max_strength=max_strength+1))\n\n  for i in $(seq\
    \ 1 $index)\n  do\n    current_extension=$extensions[i]\n    if [[ \"$current_extension\"\
    \ =~ [A-Z]$ ]]; then\n      ((max_strength=max_strength-1))\n    fi\n  done\n\n\
    \  if [[ \"$max_strength\" -eq 0 ]]; then\n    max_index=$((max_index-1))\n  else\n\
    \    ((max_index=$((max_index+1))))\n  fi\n\n  echo \"$class.$extensions[$max_index]\"\
    \ \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal name=$1\n\tlocal classes=$2\n\
    \tlocal i=${#classes[@]}\n\tlocal strength\n\tlocal extension\n\tlocal j=0\n\t\
    local index\n\tlocal maxStrength=0\n\tfor (( i=0; i<${#classes[@]}; i++ )); do\n\
    \t\tstrength=$(echo $classes[$i] | awk '{print toupper($0)}'| awk '{print NF-1}')\n\
    \t\textension=${classes[$i]%??}\n\t\tstrength=$((${strength}-1))\n\t\tif (( strength\
    \ == 0 )); then\n\t\t\tstrength=-1\n\t\tfi\n\t\tif (( strength > maxStrength ));\
    \ then\n\t\t\tmaxStrength=$strength\n\t\t\textension=$extension\n\t\tfi\n\tdone\n\
    \tindex=$(echo $name | tr '[:upper:]' '[:lower:]' | sed 's/ //g')\n\tname=${index}${extension}\n\
    \techo \"$name\"\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  # Your code goes here.\n\n\
    \  # get the length of each extension\n  lengths=()\n  for i in \"${2}\"; do\n\
    \    lengths+=(${#i})\n  done\n\n  # sort the length array\n  for i in \"${lengths[@]}\"\
    ; do\n    sort -n <<<\"${lengths[@]}\"\n  done\n\n  # get the strongest one\n\
    \  result=\"\"\n  for i in \"${lengths[@]}\"; do\n    if [ ${#i} -gt 0 ]; then\n\
    \      result=$1${result}${i#0}\n    fi\n  done\n  echo \"$result\"\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local classname extensions\
    \ strength i extension score\n  classname=$1\n  extensions=$2\n  # remove .class\
    \ extension\n  extension=${classname%.class}\n  # sort extensions by increasing\
    \ strength\n  extensions=$(sort -k 2 <<<\"$extensions\")\n  # initialize score\
    \ with -Infinity to indicate no strongest\n  score=-1.0\n  # iterate over extensions\
    \ to find best match\n  for ((i = 0; i < ${#extensions[*]}; i++))\n  do\n    #\
    \ set extension score to 0 to indicate no match yet\n    score=0\n    # set extension\
    \ name to be lowercase\n    extension=${extensions[i]}\n    # iterate over extensions\
    \ to find possible matches\n    for ((j = 0; j < ${#extensions[*]}; j++))\n  \
    \  do\n      # set extension name to lowercase\n      extension=${extensions[j]}\n\
    \      # check if extension name matches at this position\n      if [ \"$extension\"\
    \ = \"$extension\" ]\n      then\n        # set extension score to match strength\n\
    \        score=$((strength+1))\n        break\n      fi\n    done\n    # exit\
    \ if match found\n    if [ \"$score\" -gt 0 ]\n    then\n      break\n    fi\n\
    \  done\n  # return matching extension name\n  echo \"$classname.${extensions[$((${#extensions[@]}\
    \ > 1 )) ]}\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8y39jpf0.sh: line 75: unexpected EOF while looking for matching
    `"''

    /tmp/tmp8y39jpf0.sh: line 79: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n   local CLASS=$1\n   local\
    \ EXTS=$2\n\n   for ext in $EXTS; do\n      local SM=${ext:1}\n      local CAP=${ext:2..${#SM}}\n\
    \      local STR=$(expr $CAP - $SM)\n      if [ $STR -gt -1 ] && [ \"$STR\" !=\
    \ \"\" ]; then\n         return $CLASS.$EXT\n      fi\n   done\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnnjawehn.sh: line 27: ext: 2..2: syntax error: invalid arithmetic
    operator (error token is "..2")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASSES=$2\n  local\
    \ STRONGEST_EXTENSION=\"\"\n  \n  for extension in $(cat $1) ; do\n    [[ $extension\
    \ =~ ([A-Z]*[A-Z]*) ]] && STRONGEST_EXTENSION+=\"${BASH_REMATCH[0]}.${extension}\"\
    ;\n  done\n  \n  echo -n \"$CLASSES.$STRONGEST_EXTENSION\";\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'cat: Watashi: No such file or directory

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local _class_=$1\n    local\
    \ _extensions=$2\n    local _extension_strength=\"\"\n\n    # Find extension with\
    \ the strongest strength\n    for _extension in ${_extensions}; do\n        local\
    \ _extension_components=${_extension//./ }\n        local _extension_length=$((${#_extension_components}))\n\
    \n        _extension_strength=${_extension_length/$(_class_ | tr A-Z a-z)${#_class_}}\n\
    \        \n        if [[ \"${_extension_strength}\" -eq \"${_extension_strength}\"\
    \ ]]; then\n            # found the best match\n            echo \"${_class_}.${_extension}\"\
    \n            return 0\n        fi\n    done\n\n    # no extension found\n   \
    \ echo \"${_class_}.${_extensions[0]}\"\n    return 1\n}\n\ncandidate() {\n  \
    \  Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvhj82cjr.sh: line 31: _class_: command not found

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strongest\n  local i\n  \n  for ((i=0; i<${#extensions[@]};\
    \ i++)); do\n    local extension=${extensions[$i]}\n    # ignore empty extensions\
    \ (probably from the user typing something like '')\n    if [[ ${extension:0:1}\
    \ = ' ' ]]; then continue; fi\n    # ignore empty extensions (probably from the\
    \ user typing something like '')\n    if [[ ${extension:0:1} = '' ]]; then continue;\
    \ fi\n    \n    local CAP_extension=${extension::-1}\n    local CAP_extension_length=${#CAP_extension}\n\
    \    local SM=${extension::1}\n    local SM_length=${#SM}\n    \n    if [[ CAP_extension_length\
    \ -gt SM_length ]]; then\n      strongest=${extension}\n      break\n    fi\n\
    \  done\n  \n  if [[ \"$strongest\" == \"\" ]]; then\n    # no extension with\
    \ a strength of -1 was found. \n    echo \"$class_name.nostrongest\"\n  else\n\
    \    # found an extension with a strength of -1\n    echo \"$class_name.$strongest\"\
    \n  fi\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_to_check list_to_check\
    \ strength output_string \n  class_to_check=\"${1}\"\n  list_to_check=\"${2}\"\
    \n  strength=${3:-1}\n  output_string=\"\"\n\n  for item in ${list_to_check};\
    \ do\n    strength=${strength}\n    item=\"${item//[^A-Z]}${item//[^a-z]}${item//[[:space:]]/.}\"\
    \n    class_to_check=\"${class_to_check}.${item}\"\n  done\n  strength=$(echo\
    \ \"${class_to_check}\" | tr -d '[:alpha:]' | tr -d '[:lower:]' | tr -d '[:digit:]')\n\
    \  \n  # If there are no lowercase letters in the class, return as is\n  if [\
    \ \"${class_to_check}\" == \"${class_to_check#*[a-z]}\" ]; then\n      output_string=\"\
    ${class_to_check}\"\n      return\n  fi\n\n  # If there are lowercase letters\
    \ in the class, return with the strength of the first letter\n  if [ \"${class_to_check}\"\
    \ == \"${class_to_check#*[A-Z]}\" ]; then\n      output_string=\"${class_to_check%.*}\"\
    \n      return\n  fi\n\n  # If there are multiple letters in the class, return\
    \ the letter with the strongest strength\n  if [ \"${class_to_check}\" == \"${class_to_check#*[[:alpha:]]}\"\
    \ ]; then\n      output_string=\"${class_to_check%.*}\"\n      return\n  fi\n\n\
    \  # If all else fails, return the one with the most letters in the class\n  output_string=\"\
    ${class_to_check%.*}\"\n  return\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class extension\n\
    \    local i j\n    local cap\n    local sm\n    local strongest_extension\n\n\
    \    class=$(echo $1 | tr '[:upper:]' '[:lower:]')\n    extension=$(echo $2 |\
    \ tr '[:upper:]' '[:lower:]')\n\n    # count upper case letters\n    cap=${#class}\n\
    \    # count lower case letters\n    sm=${#extension}\n\n    strongest_extension=\"\
    ${class}.${extension}\"\n\n    # Check if extension is a valid extension\n   \
    \ if [[ ${extension:0:1} == \"#\" ]]; then\n        # check if extension is valid\
    \ \n        for ((i=1; i<${#extension}; i++))\n        do\n            if [[ ${extension:$i:1}\
    \ == \"#\" ]]; then\n                let i++\n            fi\n        done\n \
    \   fi\n\n    if [ $cap - $sm -ne 0 ]; then\n        echo \"Error: Number of capitals\
    \ $cap does not equal number of lowercase letters $sm\"\n        echo \"Number\
    \ of capitals: $cap\"\n        echo \"Number of lowercase letters: $sm\"\n   \
    \     echo \"Extension: $extension\"\n        echo \"Strongest extension: $strongest_extension\"\
    \n        echo \"Extension list:\"\n        echo $2\n        exit 1\n    else\n\
    \        if [ $cap -eq 1 ]; then\n            local i=1\n            while [ $i\
    \ -le ${#extension} ]\n            do\n                if [[ ${extension:$i:1}\
    \ == \"#\" ]]; then\n                    let i++\n                fi\n       \
    \     done\n            strongest_extension=\"${extension:$i}\"\n        fi\n\
    \    fi\n\n    echo \"$strongest_extension\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpir1xagjo.sh: line 49: [: too many arguments

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    CLASS=$1\n    EXTENSIONS=$2\n\
    \    STRONGEST_EXTENSION=\"${EXTENSIONS}\"\n    for EXTENSION in $EXTENSIONS;\
    \ do\n        CAP=`echo $EXTENSION | tr '[A-Z]' '[a-z]' | wc -c`\n        SM=`echo\
    \ $EXTENSION | tr '[a-z]' '[A-Z]' | wc -c`\n        STRONGEST_EXTENSION=\"$CLASS.$CAP.$SM\"\
    \n        STRONGEST_EXTENSION=\"$STRONGEST_EXTENSION\" \n        if [ \"$CAP\"\
    \ -gt \"$SM\" ]; then\n            break\n        fi\n    done\n    echo \"$STRONGEST_EXTENSION\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class list\n  class=${1//(.)/\
    \ }\n  list=($2)\n  local i\n  local len=${#list[@]}\n  local sum\n  local max\n\
    \  local min\n  local maxi\n  local mini\n  local strength\n  local i\n  local\
    \ j\n  for ((i=0; i<${#list[@]}; i++)); do\n    sum=0\n    for ((j=0; j<${#list[@]};\
    \ j++)); do\n      sum=$((sum+${list[$j]//(.)/ }))\n    done\n    sum=$((sum/${#list[@]}))\n\
    \    strength=$((${#class}*${sum})/${#list[@]})\n    if [ $i -eq $i ]; then\n\
    \      strength=$((${i}*${sum})/${#list[@]})\n    fi\n    if [ $strength -gt $max\
    \ ]; then\n      max=$strength\n      maxi=\"$i\"\n      mini=\"$j\"\n    fi\n\
    \  done\n  echo \"$class.${list[$maxi]}\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoafq7p38.sh: command substitution: line 41: syntax error near unexpected
    token `/${#list[@]}''

    /tmp/tmpoafq7p38.sh: command substitution: line 41: `(${#class}*${sum})/${#list[@]}''

    /tmp/tmpoafq7p38.sh: command substitution: line 43: syntax error near unexpected
    token `/${#list[@]}''

    /tmp/tmpoafq7p38.sh: command substitution: line 43: `(${i}*${sum})/${#list[@]}''

    /tmp/tmpoafq7p38.sh: command substitution: line 41: syntax error near unexpected
    token `/${#list[@]}''

    /tmp/tmpoafq7p38.sh: command substitution: line 41: `(${#class}*${sum})/${#list[@]}''

    /tmp/tmpoafq7p38.sh: command substitution: line 43: syntax error near unexpected
    token `/${#list[@]}''

    /tmp/tmpoafq7p38.sh: command substitution: line 43: `(${i}*${sum})/${#list[@]}''

    /tmp/tmpoafq7p38.sh: command substitution: line 41: syntax error near unexpected
    token `/${#list[@]}''

    /tmp/tmpoafq7p38.sh: command substitution: line 41: `(${#class}*${sum})/${#list[@]}''

    /tmp/tmpoafq7p38.sh: command substitution: line 43: syntax error near unexpected
    token `/${#list[@]}''

    /tmp/tmpoafq7p38.sh: command substitution: line 43: `(${i}*${sum})/${#list[@]}''

    /tmp/tmpoafq7p38.sh: line 38: sum+YEs.WeCaNe: syntax error: invalid arithmetic
    operator (error token is ".WeCaNe")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASS=\"$1\"\n  local\
    \ EXTERNAL_EXTENSIONS=\"$2\"\n\n  # Strip whitespace in EXTERNAL_EXTENSIONS\n\
    \  while IFS= read -r EXTENSION; do\n    EXTERNAL_EXTENSIONS+=\" $EXTENSION\"\n\
    \  done <<< \"$(echo $EXTERNAL_EXTENSIONS | sed -e 's/ /, /g')\"\n\n  # Count\
    \ upper and lowercase letters in EXTERNAL_EXTENSIONS\n  local EXTERNAL_EXTENSIONS_UPPER_CASE=0\n\
    \  local EXTERNAL_EXTENSIONS_LOWER_CASE=0\n  for i in $EXTERNAL_EXTENSIONS; do\n\
    \    [[ \"$i\" =~ [A-Z] ]] && EXTERNAL_EXTENSIONS_UPPER_CASE=$((EXTERNAL_EXTENSIONS_UPPER_CASE+1))\
    \ || continue\n    [[ \"$i\" =~ [a-z] ]] && EXTERNAL_EXTENSIONS_LOWER_CASE=$((EXTERNAL_EXTENSIONS_LOWER_CASE+1))\
    \ || continue\n  done\n\n  # Find the strongest extension\n  local STRONGEST_EXTENSIONS=\"\
    \"\n  local STRONGEST_EXTENSION=\"\"\n  local STRONGEST_EXTENSIONS_UPPER_CASE=0\n\
    \  local STRONGEST_EXTENSIONS_LOWER_CASE=0\n  local STRONGEST_EXTENSION_UPPER_CASE=0\n\
    \  local STRONGEST_EXTENSION_LOWER_CASE=0\n  local STRONGEST_EXTENSION_SCORE=0\n\
    \  for i in $EXTERNAL_EXTENSIONS; do\n    [[ \"$i\" =~ [A-Z] ]] && STRONGEST_EXTENSIONS_UPPER_CASE=$((STRONGEST_EXTENSIONS_UPPER_CASE+1))\
    \ || continue\n    [[ \"$i\" =~ [a-z] ]] && STRONGEST_EXTENSIONS_LOWER_CASE=$((STRONGEST_EXTENSIONS_LOWER_CASE+1))\
    \ || continue\n    [[ \"$i\" =~ [A-Z] ]] && STRONGEST_EXTENSION_UPPER_CASE=$((STRONGEST_EXTENSION_UPPER_CASE+1))\
    \ || continue\n    [[ \"$i\" =~ [a-z] ]] && STRONGEST_EXTENSION_LOWER_CASE=$((STRONGEST_EXTENSION_LOWER_CASE+1))\
    \ || continue\n    ((STRONGEST_EXTENSION_SCORE=STRONGEST_EXTENSION_SCORE+STRONGEST_EXTENSION_UPPER_CASE-STRONGEST_EXTENSION_LOWER_CASE))\
    \ || continue\n    ((STRONGEST_EXTENSION_SCORE=STRONGEST_EXTENSION_SCORE+STRONGE\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6ggw95qw.sh: line 52: unexpected EOF while looking for matching
    `)''

    /tmp/tmp6ggw95qw.sh: line 73: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local STRONGEST_EXTENSION\
    \ EXTENSION\n  local SM CAP STRONGEST_EXTENSION_LIST STRONGEST_EXTENSION_NAME\
    \ SM_CAP\n  local -a SM_CAP\n  STRONGEST_EXTENSION=\"$1\"\n  SM_CAP=()\n  EXTENSION=\"\
    $2\"\n  while IFS= read -r EXTENSION\n  do\n    SM_CAP[${#SM_CAP[*]}]=\"$EXTENSION\"\
    \n  done < <(echo \"${EXTENSION//./ }\" | sort -u)\n  SM_CAP=( \"${SM_CAP[@]}\"\
    \ )\n  for (( i = 0; i < ${#SM_CAP[*]} - 1; i++ )); do\n    ((CAP = CAP + SM_CAP[i]))\n\
    \  done\n  SM_CAP[${#SM_CAP[*]}]=\"${CAP}\"\n  STRONGEST_EXTENSION_LIST=\"${STRONGEST_EXTENSION}.${SM_CAP[*]}\"\
    \n  SM_CAP=( \"${SM_CAP[@]}\" )\n  CAP=0\n  for (( i = 0; i < ${#SM_CAP[*]} -\
    \ 1; i++ )); do\n    ((CAP = CAP + SM_CAP[i]))\n    if ((CAP > STRONGEST_EXTENSION_LIST));\
    \ then\n      STRONGEST_EXTENSION_LIST=\"${STRONGEST_EXTENSION}.${SM_CAP[*]}\"\
    \n    fi\n    ((CAP = CAP - SM_CAP[i]))\n  done\n  STRONGEST_EXTENSION_LIST=\"\
    ${STRONGEST_EXTENSION}.${CAP}\"\n  echo $STRONGEST_EXTENSION_LIST\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu4pap4r9.sh: line 41: ((: tEN niNE eIGHt8OKe: syntax error in expression
    (error token is "niNE eIGHt8OKe")

    /tmp/tmpu4pap4r9.sh: line 42: ((: Watashi.tEN niNE eIGHt8OKe : syntax error: invalid
    arithmetic operator (error token is ".tEN niNE eIGHt8OKe ")

    /tmp/tmpu4pap4r9.sh: line 45: ((: tEN niNE eIGHt8OKe: syntax error in expression
    (error token is "niNE eIGHt8OKe")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength=$(echo \"$extensions\" | awk '{cap=$1; sm=$2}\
    \ {cap=$2 ; sm=$1} (cap-sm)/2 ; print cap\"-\"$sm')\n  local extension=$(grep\
    \ -w $strength $extensions)\n  echo \"$class_name.$extension\"\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: {cap=$1; sm=$2} {cap=$2 ; sm=$1} (cap-sm)/2 ; print cap"-"$sm

    awk: cmd. line:1:                                               ^ syntax error

    grep: niNE: No such file or directory

    grep: eIGHt8OKe: No such file or directory

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal Strongest_Extension_Name=\"\
    $1\"\n\tlocal Extensions=\"$2\"\n\tlocal SM_Count\n\tSM_Count=$(echo \"$Extensions\"\
    \ | sed \"s/[^[:lower:]]//g\" | sort | uniq -c  | sort -n | tail -n 1)\n\tlocal\
    \ Strongest_Extension_Strength=\"${SM_Count}\"\n\tif [[ -z \"${Strongest_Extension_Strength}\"\
    \ ]]; then\n\t\tfor Extension in $Extensions; do\n\t\t\tStrongest_Extension_Strength=\"\
    $(echo \"$Extension\" | sed \"s/[[:upper:]]//g\" | sort | uniq -c  | sort -n |\
    \ tail -n 1)\"\n\t\t\tif [[ -z \"${Strongest_Extension_Strength}\" ]]; then\n\t\
    \t\t\tStrongest_Extension_Strength=\"$(echo \"$Extension\" | sed \"s/[^[:lower:]]//g\"\
    \ | sort | uniq -c  | sort -n | head -n 1)\"\n\t\t\tfi\n\t\tdone\n\tfi\n\techo\
    \ ${Strongest_Extension_Name}.${Strongest_Extension_Strength}\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal SM CAP classname extensions\
    \ i\n\tSM=0\n\tCAP=0\n\tclassname=$1\n\textensions=$2\n\tfor ((i=0;i<${#extensions[@]};i++))\
    \ do\n\t\t((SM+=$((${CAP}+${CAP:1:${#CAP}})))); CAP=${CAP:0:$SM}\n\tdone\n\textension=\"\
    ${extensions[${CAP}-1]}\"\n\tclassname=\"${classname}.${extension}\"\n\textension=\"\
    ${extension:0:${#extension}}\"\n\tclassname=\"${classname}\"\n\techo \"${classname}\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp91qnz8vk.sh: line 28: 0+: syntax error: operand expected (error
    token is "+")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n\n    local strongest_extension=$(\n        echo \"${extensions}\"\
    \ | \\\n        sort | \\\n        awk '\n            BEGIN{\n               \
    \ max=0\n                first_extension=0\n            }\n            {\n   \
    \             if($1 ~ /^[A-Z]/){\n                    lower=$1-32\n          \
    \          upper=$1+32\n                    if(upper>max){\n                 \
    \       max=$lower\n                        first_extension=$1\n             \
    \       }\n                } else if($1 ~ /^[a-z]/){\n                    lower=$1-64\n\
    \                    upper=$1+64\n                    if(upper>max){\n       \
    \                 max=$lower\n                        first_extension=$1\n   \
    \                 }\n                }\n            }\n            END{\n    \
    \            if(first_extension>0){\n                    print \"%s.%s\"%(class_name,first_extension)\n\
    \                }\n            }' | \\\n        tail -1)\n\n    echo \"$strongest_extension\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:26:                     print "%s.%s"%(class_name,first_extension)

    awk: cmd. line:26:                                                               ^
    unexpected newline or end of string

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local CLASS=\"${1:?Must\
    \ give a class name as a string}\"\n    local EXTS=\"${2:?Must give a list of\
    \ extensions as a list of strings\"}\"\n    local STRENGTHS=\"\"\n    local STRENGTH\n\
    \    local EXT\n    local STRENGTH_INDEX\n    local EXTS_CONTAINS_STRENGTH\n\n\
    \    for EXT in \"${EXTS[@]}\"; do\n        STRENGTH=\"$(echo \"${EXT}\" | tr\
    \ 'A-Z' 'a-z'|wc -c)\"\n        EXTS_CONTAINS_STRENGTH=\"${EXTS:$EXT}\"\n    \
    \    if [[ \"$STRENGTH\" -gt \"$STRENGTHS\" ]]; then\n            STRENGTHS=\"\
    ${STRENGTHS} $STRENGTH\"\n        fi\n    done\n    STRENGTH_INDEX=\"${STRENGTHS:-1}\"\
    \n\n    if [[ -n \"$STRENGTH_INDEX\" ]]; then\n        EXT=${EXTS:$STRENGTH_INDEX}\n\
    \    else\n        echo \"$CLASS has no extension with highest strength.\"\n \
    \       echo \"Returning $CLASS.\"\n        echo \"You might want to add the file\
    \ extension to the class name.\"\n        echo \"If this behavior is not desired,\
    \ just remove the word 'extension'\n        echo \"from the string that specifies\
    \ the extension.\"\n        EXT=${EXTS:-1}\n    fi\n\n    echo \"$CLASS.$EXT\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6fbrubkt.sh: line 67: unexpected EOF while looking for matching
    `"''

    /tmp/tmp6fbrubkt.sh: line 71: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n\n    # split the extensions by spaces\n    local exts=$(echo\
    \ $extensions | tr \" \" \"\\n\")\n\n    # get the number of uppercase letters\n\
    \    local CAP=$(echo $exts | grep -c '[A-Z]')\n\n    # get the number of lowercase\
    \ letters\n    local SM=$(echo $exts | grep -c '[a-z]')\n\n    # compute the strength\
    \ of the extension\n    local STRONGEST_EXTENSION=$(($CAP - $SM))\n    \n    #\
    \ check if there are more than one extensions\n    if [ $STRONGEST_EXTENSION -gt\
    \ 0 ]; then\n        for ext in $exts; do\n            local EXT_STRONGEST_EXTENSION=$(echo\
    \ $ext | grep -c '[A-Z]')\n\n            if [ $EXT_STRONGEST_EXTENSION -eq 1 ];\
    \ then\n                STRONGEST_EXTENSION=$ext\n                break\n    \
    \        fi\n        done\n    fi\n\n    # format the extension with the strongest\
    \ strength\n    echo \"$class_name.$STRONGEST_EXTENSION\"\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal extensions=$2\n\t\n\
    \tlet numLetters=${#extensions}\n\tlet numUpper=${#${extensions:0:${#extensions}}}\
    \ \n\tlet numLower=${#${extensions:${#extensions}}} \n\tlet numUpper-=numLower\n\
    \tlet strength=$((${CAP}/${SM}))\n\n\tif [ $numUpper -lt 0 ] ; then \n\t\techo\
    \ \"no upper case letters\"\n\telse\n\t\tif [ $numLower -lt 0 ] ; then \n\t\t\t\
    echo \"no lower case letters\"\n\t\telse\n\t\t\tif [ $strength -ge 0 ] ; then\
    \ \n\t\t\t\techo ${extensions:0:numUpper}\n\t\t\telse\n\t\t\t\techo \"no extensions\"\
    \n\t\t\tfi\n\t\tfi\n\tfi\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0hbw65v0.sh: line 25: numUpper=${#${extensions:0:${#extensions}}}:
    bad substitution

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local CLASS \n    CLASS=\"\
    $1\"\n    local EXTENSIONS\n    EXTENSIONS=\"$2\"\n    for extension in ${EXTENSIONS};\
    \ do\n        local STRONGEST_EXTENSION\n        STRONGEST_EXTENSION=\"${CLASS}.${extension}\"\
    \n        local STRONGEST_EXTENSION_WITH_SMARTCAPS\n        STRONGEST_EXTENSION_WITH_SMARTCAPS=\"\
    ${STRONGEST_EXTENSION//[[:upper:]]/}${STRONGEST_EXTENSION//[[:lower:]]/}\"\n \
    \       local STRONGEST_EXTENSION_WITH_SMARTCAPS_AND_STRENGTH\n        STRONGEST_EXTENSION_WITH_SMARTCAPS_AND_STRENGTH=\"\
    ${STRONGEST_EXTENSION_WITH_SMARTCAPS//[[:upper:]]/}${STRONGEST_EXTENSION//[[:lower:]]/}-$((${#EXTENSIONS}\
    \ / ${#STRONGEST_EXTENSION_WITH_SMARTCAPS}))\"\n        if [[ $STRONGEST_EXTENSION\
    \ = $STRONGEST_EXTENSION_WITH_SMARTCAPS ]] ; then\n            echo \"${STRONGEST_EXTENSION}\"\
    \n            STRONGEST_EXTENSION=\"${STRONGEST_EXTENSION_WITH_SMARTCAPS}\"\n\
    \            break\n        elif [[ $STRONGEST_EXTENSION = $STRONGEST_EXTENSION_WITH_SMARTCAPS_AND_STRENGTH\
    \ ]] ; then\n            echo \"${STRONGEST_EXTENSION}\"\n            STRONGEST_EXTENSION=\"\
    ${STRONGEST_EXTENSION_WITH_SMARTCAPS_AND_STRENGTH}\"\n            break\n    \
    \    fi\n    done\n    echo \"${CLASS}.${STRONGEST_EXTENSION}\"\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tCLASS=$1\n\tEXTENSTIONS=$2\n\
    \n\t# Sort extension names by strength\n\tEXTENSTIONS=( $(echo $EXTENSTIONS |\
    \ tr \" \" \"\\n\") )\n\tEXTENSTIONS=( $(sort -u <<< $EXTENSTIONS) )\n\n\t# Count\
    \ uppercase letters\n\tUPPERCASE=0\n\tfor x in \"${EXTENSTIONS[@]}\"; do\n\t\t\
    if [[ $x =~ [A-Z] ]]; then\n\t\t\tUPPERCASE=$(( UPPERCASE + 1 ))\n\t\tfi\n\tdone\n\
    \n\t# Count lowercase letters\n\tLOWERCASE=0\n\tfor x in \"${EXTENSTIONS[@]}\"\
    ; do\n\t\tif [[ $x =~ [a-z] ]]; then\n\t\t\tLOWERCASE=$(( LOWERCASE + 1 ))\n\t\
    \tfi\n\tdone\n\n\t# Compute strength\n\tSTRONGEST=${CAP}${LOWERCASE}\n\tif [[\
    \ ${CAP} -eq 0 || ${LOWERCASE} -eq 0 ]]; then\n\t\tSTRONGEST=$(( $CAP + $LOWERCASE\
    \ ))\n\tfi\n\techo $CLASS.$EXTENSTIONS[${#EXTENSTIONS[@]}]\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local _class=${1}\n  local\
    \ _extensions=${2}\n\n  # Get the number of uppercase letters in the extension\
    \ name\n  local _uppercase_length=$(echo \"${_extensions}\" | sed -rn \"s/^.*\\\
    .\\([A-Z]*\\)$/\\1/p\")\n\n  # Get the number of lowercase letters in the extension\
    \ name\n  local _lowercase_length=$(echo \"${_extensions}\" | sed -rn \"s/^.*\\\
    .\\([a-z]*\\)$/\\1/p\")\n\n  # Find the strongest extension\n  local _strength=$(echo\
    \ \"${_extensions}\" | sed -rn \"s/^.*\\.\\([A-Z]*\\)$/\\1/p\")\n  if [[ ${_uppercase_length}\
    \ -gt ${_lowercase_length} ]]; then\n    _strength=$((${_uppercase_length} - ${_lowercase_length}))\n\
    \  fi\n  echo \"${_class}.${_extensions}${_strength}\"\n}\n\ncandidate() {\n \
    \   Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 23: invalid reference \1 on `s'' command''s
    RHS

    sed: -e expression #1, char 23: invalid reference \1 on `s'' command''s RHS

    sed: -e expression #1, char 23: invalid reference \1 on `s'' command''s RHS

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal extensions=$2\n\tlocal\
    \ extension\n\tlocal extension_length\n\tlocal extension_strength\n\tlocal number_of_extensions\n\
    \tlocal number_of_upper_case_letters\n\tlocal number_of_lower_case_names\n\tlocal\
    \ number_of_lower_case_letters\n\tlocal extension_name\n\tlocal extension_found\n\
    \tlocal number_of_extensions_str\n\tlocal number_of_upper_case_letters_str\n\t\
    local number_of_lower_case_names_str\n\tlocal number_of_lower_case_letters_str\n\
    \tlocal i\n\t\n\textension_found=false\n\tnumber_of_extensions=$(echo \"$extensions\"\
    \ | wc -c)\n\tnumber_of_upper_case_letters=$(echo \"$extensions\" | tr -cs 'A-Z'+\
    \ | wc -l)\n\tnumber_of_lower_case_names=$(echo \"$extensions\" | tr -cs 'a-z'+\
    \ | wc -l)\n\tnumber_of_lower_case_letters=$(echo \"$extensions\" | tr -cs 'a-z'+\
    \ | tr -cs 'A-Z'+ | wc -l)\n\tnumber_of_extensions_str=\"$(echo \"$number_of_extensions\"\
    \ | bc)\"\n\tnumber_of_upper_case_letters_str=\"$(echo \"$number_of_upper_case_letters\"\
    \ | bc)\"\n\tnumber_of_lower_case_names_str=\"$(echo \"$number_of_lower_case_names\"\
    \ | bc)\"\n\tnumber_of_lower_case_letters_str=\"$(echo \"$number_of_lower_case_letters\"\
    \ | bc)\"\n\n\textension_strength=-1\n\tfor ((i=1; i<=$number_of_extensions; ++i));\
    \ do\n\t\textension_length=$(echo \"$extensions\" | sed -n \"$i\"p)\n\t\textension_name=$(echo\
    \ \"$extensions\" | cut -d '.' -f 1-$extension_length)\n\t\textension=$(echo \"\
    $extensions\" | sed -n \"$i\"q)\n\t\textension_strength=$(( $(echo \"$extension_strength\
    \ + $extension_length\" | bc -l) ))\n\t\textension_found=true\n\tdone\n\t\n\t\
    if [ \"$extension_found\" = false ]; then\n\t\techo \"Not enough extensions to\
    \ determine a suitable extension for the class\"\n\t\texit -1\n\tfi\n\t\n\textension_length=$(echo\
    \ \"$extensions\" | sed -n \"$extension_strength\"p)\n\textension_name=$(echo\
    \ \"$extensions\" | cut -d '.' -f 1-$extension_length)\n\textension=$(echo \"\
    $extensions\" | sed -n \"$extension_strength\"q)\n\t\n\techo \"$extension_name\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "cut: invalid field value \u2018tEN\u2019\nTry 'cut --help' for more information.\n\
    (standard_in) 1: syntax error\n(standard_in) 2: syntax error\n(standard_in) 2:\
    \ syntax error\n(standard_in) 2: syntax error\n(standard_in) 2: syntax error\n\
    (standard_in) 2: syntax error\n(standard_in) 2: syntax error\n(standard_in) 2:\
    \ syntax error\n(standard_in) 2: syntax error\n(standard_in) 2: syntax error\n\
    (standard_in) 2: syntax error\n(standard_in) 2: syntax error\n(standard_in) 2:\
    \ syntax error\n(standard_in) 2: syntax error\n(standard_in) 2: syntax error\n\
    (standard_in) 2: syntax error\n(standard_in) 2: syntax error\n(standard_in) 2:\
    \ syntax error\n(standard_in) 2: syntax error\nsed: -e expression #1, char 2:\
    \ invalid usage of line address 0\nsed: -e expression #1, char 2: invalid usage\
    \ of line address 0\n"
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local classname extensions\
    \ extension strength index\n    classname=$1\n    extensions=$2\n    strength=${#extensions}\n\
    \    for (( index = 0; index < ${#extensions}; index+=1 )); do\n        extension=${extensions[index]}\n\
    \        extension=${extension//[ ]/}\n        extension=${extension//[A-Z]/}\n\
    \        extension=${extension//[a-z]/}\n        strength=\"${strength+1}\"\n\
    \    done\n    strength=\"${strength}-1\"\n    extension=${extension}\n    extension=${extension//[\
    \ ]/}\n    extension=${extension//[A-Z]/}\n    extension=${extension//[a-z]/}\n\
    \    extension=${extension//[^a-zA-Z0-9]/}\n    if [[ \"${extension}\" == \"$extensions\"\
    \ ]]; then\n        extension=${extension}\n    else\n        extension=\"\"\n\
    \    fi\n    echo \"$classname.$extension\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local CAP=\"${1:0:1}\"\n\
    \    local SM=\"${1:1:1}\"\n    local EXT=\"${@:2}\"\n    local STRONG=\"\"\n\
    \    for EXT in $EXT; do\n        STRONG=\"${CAP}-${SM}${EXT}\"\n        if !\
    \ echo \"${STRONG}\" | sed -n \"s/.*\\(${CAP}-${SM}\\).*\\(${EXT}\\).*/\\1/p\"\
    \ ; then\n            STRONG=\"${EXT}\"\n        fi\n    done\n    echo \"$1\"\
    ${STRONG}\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local name=\"$1\"\n   \
    \ local extensions=\"$2\"\n    local strength=0\n    local extension\n    local\
    \ first_extension\n    local count\n    for extension in $extensions; do\n   \
    \     count=`echo $extension | sed -r 's/[A-Z]//' | sed -r 's/[a-z]//' | sed 's/[^a-zA-Z]//g'`\n\
    \        if [[ $count -gt 0 ]]; then\n            if ((strength == 0)); then\n\
    \                first_extension=\"$extension\"\n                strength=$count\n\
    \            else\n                if ((strength > count)); then\n           \
    \         first_extension=\"$extension\"\n                    strength=$count\n\
    \                fi\n            fi\n        fi\n    done\n    echo $name.$first_extension\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ ext=$2\n    local c\n    local ext1\n    local ext2\n    local count=0\n   \
    \ local max=0\n    local i\n    local extlist\n    extlist=$(echo $ext | tr '\
    \ ' '\\n' | sort -n)\n    for c in $extlist; do\n        count=$((count+1))\n\
    \        ext1=$(echo $c | tr 'A-Z' 'a-z')\n        ext2=$(echo $c | tr 'a-z' 'A-Z')\n\
    \        max=$((max+1))\n        if [[ $count -eq $max ]]; then\n            echo\
    \ $class$1.$ext1\n            break\n        fi\n    done\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local cls=\"$1\"\n    local\
    \ exts=$2\n\n    local strongest_ext=\"\"\n    local ext\n    local strongest_ext_len\n\
    \    local strongest_ext_len_instances\n    local strongest_ext_len_instances_max\n\
    \    local strongest_ext_count\n    local i\n\n    for ext in $exts; do\n    \
    \    strongest_ext_len_instances_max=0\n        strongest_ext_len_instances=0\n\
    \n        # Compute instances of extension letters in class\n        for (( i=0;\
    \ i < ${#ext} ; i++ )); do\n            if [ ${ext:$i:1} == ${ext:$i:1:1} ]; then\n\
    \                strongest_ext_len_instances_max=$(( ${strongest_ext_len_instances_max}\
    \ + 1 ))\n            fi\n        done\n\n        # Compute maximum instance count\n\
    \        strongest_ext_len_instances_max=$(( ${strongest_ext_len_instances_max}\
    \ ))\n\n        # Compute average instance count\n        strongest_ext_len_instances=\"\
    ${strongest_ext_len_instances} ${strongest_ext_len_instances_max}\"\n\n      \
    \  # Compute total count and check if we have found the best so far\n        strongest_ext_count=$((\
    \ ${strongest_ext_len_instances} ))\n        if [ $strongest_ext_count -gt $strongest_ext_len_instances_max\
    \ ]; then\n            strongest_ext=$ext\n            strongest_ext_len=$strongest_ext_len_instances\n\
    \        fi\n    done\n\n    echo \"$cls.$strongest_ext\"\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqqiig97r.sh: line 39: ext: 1:1: syntax error in expression (error
    token is ":1")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local EXTENSION=\"$1\"\n\
    \    local EXTENSIONS=\"$2\"\n    local STRENGTH\n    local STRENGTHS\n    local\
    \ EXTENSION_LENGTH\n    local EXT\n    local EXTS\n    local EXT\n    local STRENGTH\n\
    \    local STRENGTHS\n    local EXT\n    local EXTS\n    local S\n    local E\n\
    \    local L\n    local S\n    local E\n    local L\n    local S\n    local E\n\
    \    local L\n    local E\n    local L\n    local S\n    local E\n    local L\n\
    \    local E\n    local L\n    local S\n    local E\n    local L\n    local E\n\
    \    local L\n    local S\n    local E\n    local L\n    local E\n    local L\n\
    \    local S\n    local E\n    local L\n    local E\n    local L\n    local S\n\
    \    local E\n    local L\n    local E\n    local L\n    local S\n    local E\n\
    \    local L\n    local E\n    local L\n    local S\n    local E\n    local L\n\
    \    local E\n    local L\n    local S\n    local E\n    local L\n    local E\n\
    \    local L\n    local S\n    local E\n    local L\n    local E\n    local L\n\
    \    local S\n    local E\n    local L\n    local E\n    local L\n    local S\n\
    \    local E\n    local L\n    local E\n    local L\n    local S\n    local E\n\
    \    local L\n    local E\n    local L\n    local S\n    local E\n    local L\n\
    \    local E\n    local L\n    local S\n    local E\n    local L\n    local E\n\
    \    local L\n    local S\n    local E\n    local L\n    local E\n    local L\n\
    \    local S\n    local E\n    local L\n    local E\n    local L\n    local S\n\
    \    local E\n    local L\n    local E\n    local L\n    local S\n    local E\n\
    \    local L\n    local E\n    local L\n    local S\n    local E\n    local L\n\
    \    local E\n    local L\n    local S\n    local E\n    local L\n    local E\n\
    \    local \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local strength=0\n  local extensions_sorted\n  \n  # Sort the extensions based\
    \ on the strength of the extension\n  extensions_sorted=$(echo $extensions | tr\
    \ '[:upper:]' '[:lower:]' | sort -n)\n\n  # Loop through sorted extensions to\
    \ find the strongest one\n  for i in $extensions_sorted; do\n    extension=$(echo\
    \ $i | cut -d' ' -f1)\n    strength=$(echo $i | cut -d' ' -f2)\n    # Strongest\
    \ extensions have strength -1 \n    if [ \"$strength\" = \"-1\" ]; then \n   \
    \   break\n    elif [ \"$strength\" = \"$strength\" ]; then \n      break\n  \
    \  elif [ \"$strength\" -lt \"$strength\" ]; then \n      break\n    else\n  \
    \    extension=$extension\n      strength=$strength\n    fi\n  done\n\n  # Replace\
    \ the extension in the class with the strongest one\n  class=${class%.}${extension}\n\
    \  \n  echo $class\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") =\
    \ \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class list SM\n  local\
    \ -a ext\n  local -i maxStrongest\n  \n  # The strength of a extension is given\
    \ by the fraction of CAP to SM\n  # (number of upper case letters in the extension's\
    \ name) - \n  # number of lowercase letters in the extension's name (number of\
    \ \n  # lowercase letters).\n  SM=$(echo \"${1}\" | tr \"[:upper:]\" \"[:lower:]\"\
    \ | wc -l)\n  CAP=$(echo \"${1}\" | tr [:upper:] [:lower:] | tr -cd [:lower:]\
    \ | wc -l )\n\n  # Find the strongest extension\n  max=-1\n  for ext in ${2};\
    \ do\n    IFS=' ' read -a ext <<< \"${ext}\"\n    local -a extStrongest\n    \n\
    \    # If the number of upper case letters is greater than the number of \n  \
    \  # lowercase letters then the extension is stronger\n    if (( \"${CAP}\" >\
    \ \"${SM}\" )); then\n      extStrongest=( ${ext[@]} )\n    else\n      # If the\
    \ number of uppercase letters is equal to the number of lowercase \n      # letters\
    \ then the extension is weaker\n      if (( \"${CAP}\" == \"${SM}\" )); then\n\
    \        for (( i=0; i<${#ext[@]}; i++ )); do\n          extStrongest[i]=${extStrongest[i]}${ext[i]}\n\
    \        done\n      else\n        # If the number of uppercase letters is less\
    \ than the number of lowercase \n        # letters then use the longest extension\
    \ with the strongest extension.\n        extStrongest=( ${ext[@]/#/${ext[${CAP}]}}${ext[${CAP}]}\
    \ )\n      fi\n    fi\n    \n    # If this extension has the maximum number of\
    \ strongest extensions then \n    # return it.\n    local maxStrongest=( ${#extStrongest[@]}\
    \ == 1 )\n    local maxStrongestNum=${#extStrongest[@]}\n    for (( i=0; i<${#extStrongest[@]};\
    \ i++ )); do\n      (( maxStrongestNum > maxStrongest )) && maxStrongest=${extStrongest[i]}\n\
    \    done\n  done\n  \n  # If there are no extensions with the maximum strength\
    \ then return \n  # the class as is\n  if (( \"${maxStrongest}\" == 0 )); then\n\
    \    echo ${1}\n  else\n    # Return the class\n    echo ${class}.${maxStrongest}\n\
    \  fi\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp3q2285v.sh: line 59: ==: syntax error: operand expected (error
    token is "==")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name extensions\
    \ strengh extension_name extension_strenght\n  \n  class_name=$1\n  extensions=$2\n\
    \  \n  extension_strenght=0\n  \n  for i in ${extensions}; do\n    extension_name=`echo\
    \ $i | cut -d'_' -f 1`\n    extension_strenght=`echo $extension_name | awk '{print\
    \ $1}'`\n    \n    if [[ $extension_strenght -gt $extension_strenght ]]; then\n\
    \      extension_strenght=$extension_strenght\n    fi\n  done\n  \n  echo $class_name\"\
    .${extension_name}\"\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") =\
    \ \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprt3w_9mm.sh: line 33: [[: YEs.WeCaNe: syntax error: invalid arithmetic
    operator (error token is ".WeCaNe")

    /tmp/tmprt3w_9mm.sh: line 33: [[: 32145tggg: value too great for base (error token
    is "32145tggg")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: -1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local Class_Name=\"$1\"\n\
    \  local Extensions=\"$2\"\n  local Extensions_Array=($Extensions)\n  local Strength\n\
    \  local Strongest_Extension\n  local Num_Sorted\n  local Extension\n\n  # Initialize\
    \ variables\n  Strength=0\n  Num_Sorted=0\n  Strongest_Extension=''\n  while [[\
    \ $Extensions_Array[Num_Sorted] != '' ]]; do\n    Extension=${Extensions_Array[Num_Sorted]}\n\
    \    Extension=${Extension//'/'\\\\/}\n    Extension=${Extension//\\\\ /}\n  \
    \  Extension=${Extension//_ /}\n    Strength=$((Strength + ${#Extension} - ${#Class_Name}))\n\
    \    Num_Sorted=$((Num_Sorted + 1))\n  done\n\n  # Check for all extensions having\
    \ same strength\n  while [[ ${Num_Sorted} -gt 0 ]]; do\n    Extension=${Extensions_Array[Num_Sorted]}\n\
    \    Extension=${Extension//'/'\\\\/}\n    Extension=${Extension//\\\\ /}\n  \
    \  Extension=${Extension//_ /}\n    Strength=$((Strength + ${#Extension} - ${#Class_Name}))\n\
    \    Num_Sorted=$((Num_Sorted + 1))\n  done\n  Strongest_Extension=$(echo $Class_Name\
    \ | tr '[:lower:]' '[:upper:]')\n  for (( Index = 0; Index < ${#Extensions_Array[@]};\
    \ Index++ )); do\n    Extension=${Extensions_Array[$Index]}\n    Extension=${Extension//'/'\\\
    \\/}\n    Extension=${Extension//\\\\ /}\n    Extension=${Extension//_ /}\n  \
    \  if [ \"$Strength\" == \"$((${#Extension} - ${#Class_Name}))\" ]; then\n   \
    \   Strongest_Extension=\"${Strongest_Extension}${Extension}\"\n    fi\n  done\n\
    \n  echo ${Strongest_Extension}\n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=43 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=15 encoding='utf-8'>
  timestamp: 1660057687
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local extensions=${2}\n\
    \    local class_name=${1}\n    local strength=0\n    local extension\n\n    extension=\"\
    ${extensions[@]}\"\n    IFS=' ' read -ra extension_list <<< \"${extension}\"\n\
    \    IFS=$'\\n' read -ra class_name_list <<< \"${class_name}\"\n    IFS=$'\\n'\
    \ read -ra extension_strength <<< \"${extension_list[@]}\"\n    IFS=$'\\n' read\
    \ -ra class_name_strength <<< \"${class_name_list[@]}\"\n\n    for i in \"${!extension_strength[@]}\"\
    ; do\n        strength=\"${extension_strength[$i]}\"\n        if [ \"${strength}\"\
    \ -gt \"${class_name_strength[$i]}\" ]; then\n            extension=\"${extension_list[$i]}\"\
    \n        fi\n    done\n\n    echo \"${class_name}${extension}\"\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9_3rm0pv.sh: line 35: [: tEN niNE eIGHt8OKe: integer expression
    expected

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASS EXTENSIONS\n\
    \  CLASS=$1\n  EXTENSIONS=$2\n  local SM_COUNT\n  SM_COUNT=$(echo \"${EXTENSIONS}\"\
    \ | tr \" \" \"\\n\" | sort | uniq | wc -l)\n  local CAP_COUNT\n  CAP_COUNT=$(echo\
    \ \"${EXTENSIONS}\" | tr \"[A-Z]\" \"[a-z]\" | sort | uniq | wc -l)\n  local STRONGEST_EXTENSION\n\
    \  STRONGEST_EXTENSION=$(echo \"${EXTENSIONS}\" | tr \"[a-z]\" \"[A-Z]\" | sort\
    \ | uniq)\n  local STRONGEST_EXTENSION_STRENGTH\n  STRONGEST_EXTENSION_STRENGTH=${CAP_COUNT}-${SM_COUNT}\n\
    \  # Sort extensions by strength\n  if [ ${STRONGEST_EXTENSION_STRENGTH} -gt 0\
    \ ]; then\n    echo \"${STRONGEST_EXTENSION}.${STRONGEST_EXTENSION_STRENGTH}\"\
    \n  else\n    echo \"$CLASS\"\n  fi\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpf44odwzg.sh: line 34: [: 1-3: integer expression expected

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class_name=$1\n\tlocal\
    \ extensions=$2\n\tlocal length=${#extensions[*]}\n\tlocal length2=0\n\tlocal\
    \ strength=0\n\tlocal i\n\n\tfor (( i=0; i<length; i++ ))\n\tdo\n\t\tlet length2=length2+${#extensions[$i]}\n\
    \tdone\n\n\tlet strength=${CAP}-1\n\tif (( length2==length ))\n\tthen\n\t\tfor\
    \ (( i=0; i<length; i++ ))\n\t\tdo\n\t\t\tlet strength=${CAP}-${CAP}+${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-${CAP}+${CAP}-${CAP}-${CAP}-${CAP}-${CAP}-\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6ca7gs8j.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmp6ca7gs8j.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \n  local extensions_length=\"${#extensions}\"\n\n  local strength\n  local extension\n\
    \n  for (( i=1; i<${extensions_length}; i++ )); do\n    extension=${extensions:$i}\n\
    \    strength=$(echo \"${extension}\" | tr \"[:upper:]\" \"[:lower:]\" | awk '{print\
    \ tolower($0)}-')\n    \n    if [ \"${extension}\" != \"${class:0:1}\" ] || [\
    \ \"$strength\" -gt 0 ]; then\n      echo $class.${extension}\n      return\n\
    \    fi\n  done\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"\
    Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:2: {print tolower($0)}-

    awk: cmd. line:2:                     ^ unexpected newline or end of string

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASS EXTENSIONS\n\
    \  CLASS=$1\n  EXTENSIONS=$2\n  local EXT\n  local STRONG\n  local STRONGEXT\n\
    \  local INDEX\n  local COUNT\n  local SCORE\n  COUNT=0\n  SCORE=0\n  INDEX=-1\n\
    \  EXT=`echo $EXTENSIONS | tr \" \" _`\n  while [ $# -gt 0 ]\n  do\n    STRONGEXT=$1\n\
    \    INDEX=`echo $EXT | grep -w $STRONGEXT | wc -l`\n    if [[ $INDEX -eq 0 ]]\n\
    \    then\n      break\n    else\n      EXT=${EXT:0:$INDEX}\n    fi\n    COUNT=`echo\
    \ $EXT | grep -w $STRONGEXT | wc -l`\n    SCORE=`echo $EXT | grep -w $STRONGEXT\
    \ | cut -d . -f 1 | bc`\n    COUNT=$(($COUNT-1))\n    SCORE=$(($SCORE-1))\n  \
    \  EXT=${EXT:1}\n  done\n  SCORE=$(($SCORE+1))\n  STRONGEXT=$CLASS.$EXT\n  if\
    \ [ $COUNT -gt 1 ]\n  then\n    STRONGEXT=$CLASS.$EXT\n  else\n    STRONGEXT=$CLASS.$EXTENSIONS\n\
    \  fi\n  echo $STRONGEXT\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=\"$1\"\
    \n    local extensions=\"$2\"\n    local strength\n    local extension\n    local\
    \ i\n\n    # Split $extensions in a list of extensions, each extension\n    #\
    \ being an element of the list that has no spaces in\n    # the middle of its\
    \ name.\n    for extension in $extensions; do\n        extension=\"${extension//[\
    \ ]/}\"\n    done\n\n    # Create a dictionary that has the number of letters\n\
    \    # in each extension in $extensions as its keys and values\n    # as their\
    \ number of occurrences.\n    declare -A extensions\n    for i in $(seq 0 \"$#\"\
    ); do\n        extensions[${i#*.}]=\"${#${extensions[${i% *}]}}\"\n    done\n\n\
    \    # Calculate the strength of the extension.\n    for extension in ${extensions[@]};\
    \ do\n        strength+=\"${extensions[$extension]}\"\n    done\n    strength=\"\
    ${strength//[0-9]/}\"\n\n    # If there are two or more extensions with the same\n\
    \    # strength, choose the one that comes first in the\n    # list.\n    case\
    \ \"$strength\" in\n        0 )\n            echo \"$class_name\"\n          \
    \  ;;\n        1 )\n            echo \"$class_name.$extensions[0]\"\n        \
    \    ;;\n        2 )\n            echo \"$class_name.$extensions[0] $class_name.$extensions[1]\"\
    \n            ;;\n    esac\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpy928ols4.sh: line 40: ${#${extensions[${i% *}]}}: bad substitution

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  echo \"$2 | sort -k 3 -n\
    \ | head -1\" | while read EXTENSION_NAME; do\n    case \"$EXTENSION_NAME\" in\n\
    \      \"$1\")\n        echo \"$1\"\n        exit 0\n        ;;\n      *)\n  \
    \      echo \"$1\"\n        exit 0\n        ;;\n    esac\n  done\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASS_NAME=$1\n  local\
    \ EXTENSIONS=(\"${@:2}\")\n  local STRONGEST_EXTENSION=\"Class\"$((${#CLASS_NAME}\
    \ - ${#EXTENSIONS}))\n  local STRONGEST_EXTENSION_EXTENSION=\"\"\n  for EXT in\
    \ \"${EXTENSIONS[@]}\"; do\n    local CAPTION_OF_EXT=\"${EXT//./}\"\n    local\
    \ CAPTION_OF_EXT_CAPITALIZED=\"${CAPTION_OF_EXT,,}\"\n    local CAPITALIZED_EXT=\"\
    ${CAPTION_OF_EXT_CAPITALIZED,,}\"\n    local CAPITALIZED_EXT_CAPITALIZED=\"${CAPITALIZED_EXT,,}\"\
    \n    local CAPITALIZED_EXT_CAPITALIZED_UPPER=\"${CAPITALIZED_EXT_CAPITALIZED,,}${CAPITALIZED_EXT,,}\"\
    \n    local CAPITALIZED_EXT_CAPITALIZED_UPPER_CAPITALIZED=\"${CAPITALIZED_EXT_CAPITALIZED_UPPER,,}${CAPITALIZED_EXT,,}\"\
    \n    local CAPITALIZED_EXT_CAPITALIZED_UPPER_CAPITALIZED_CAPITALIZED=\"${CAPITALIZED_EXT_CAPITALIZED_UPPER_CAPITALIZED,,}${CAPITALIZED_EXT,,}\"\
    \n    local CAPITALIZED_EXT_CAPITALIZED_UPPER_CAPITALIZED_CAPITALIZED_CAPITALIZED=\"\
    ${CAPITALIZED_EXT_CAPITALIZED_UPPER_CAPITALIZED_CAPITALIZED,,}${CAPITALIZED_EXT,,}\"\
    \n    local CAPITALIZED_EXT_CAPITALIZED_UPPER_CAPITALIZED_CAPITALIZED_CAPITALIZED_CAPITALIZED=\"\
    ${CAPITALIZED_EXT_CAPITALIZED_UPPER_CAPITALIZED_CAPITALIZED_CAPITALIZED,,}${CAPITALIZED_EXT,,}\"\
    \n    local CAPITALIZED_EXT_CAPITALIZED_UPPER_CAPITALIZED_CAPITALIZED_CAPITALIZED_CAPITALIZED_CAPITALIZED=\"\
    ${CAPITALIZED_EXT_CAPITALIZED_UPPER_CAPITALIZED_CAPITALIZED_CAPITALIZED,,}${CAPITALIZED_EXT,,}\"\
    \n    local CAPITALIZED_EXT_CAPITALIZED_UPPER_CAPITALIZED_CAPITALIZED_CAPITALIZED_CAPITALIZED_CAPITALIZED\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmfd4kbhb.sh: line 38: syntax error near unexpected token `}''

    /tmp/tmpmfd4kbhb.sh: line 38: `}''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\t# initialize a counter\n\t\
    CAP=${1:0:1}\n\tSM=${1:1:1}\n\tfor i in $2\n\tdo\n\t\tif [[ \"$i\" =~ ^[[:upper:]]+$\
    \ ]]; then\n\t\t\tSM=$((SM + ${#i} - 1))\n\t\tfi\n\t\tif [[ \"$i\" =~ ^[[:lower:]]+$\
    \ ]]; then\n\t\t\tCAP=$((CAP + ${#i} - 1))\n\t\tfi\n\tdone\n\tSM=$((SM + 1))\n\
    \tCAP=$((CAP + 1))\n\techo ${1:0:1} ${1:1:1}\n\tCAP=$((CAP - SM))\n\tCAP=$(($CAP\
    \ + 1))\n\techo ${1:0:1}${CAP:0:1}\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local classname=\"$1\"\n\
    \    local extensions=\"$2\"\n    local counter=0\n    local extension\n    local\
    \ extension_strength\n    local tmp\n    local i\n    local count\n    \n    for\
    \ extension in ${extensions[*]}; do\n        extension_strength=$(echo \"$extension\"\
    \ | tr -cd \"[A-Z]\" | wc -c) \n        extension_strength=$((${extension_strength}-1))\n\
    \        count=$(echo \"$extension\" | grep -w \"$classname\" | wc -l)\n     \
    \   count=$((${count}-1))\n        \n        if (( count != 0 )); then\n     \
    \       extension=$(echo \"$extension\" | sed 's/$classname.*//')\n          \
    \  extension=$(echo \"$extension\" | sed \"s/$classname/$extension\")\n      \
    \      extension=$(echo \"$extension\" | sed \"s/$extension.$classname/$extension\"\
    )\n            extension=\"${extension}.${extension_strength}\"\n            extension=\"\
    ${extension}${extensions[$((counter+1))]}\"\n            break\n        fi\n \
    \       ((counter++))\n    done\n    \n    for i in $extension; do\n        tmp=$(echo\
    \ \"$i\" | sed \"s/^./.${extension_strength}/g\")\n        tmp=\"${tmp}${extensions[$((counter+1))]}\"\
    \n        extension=\"${extension}${tmp}\"\n    done\n    \n    echo \"$classname.$extension\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 13: unterminated `s'' command

    sed: -e expression #1, char 11: unterminated `s'' command

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local CLASS EXTENSIONS\n\
    \    CLASS=${1:-\"\"}\n    EXTENSIONS=\"${2:-\"\"}\n    EXTENSIONS=\"${EXTENSIONS}\"\
    \ # Remove trailing space\n    EXTENSIONS=\"${EXTENSIONS}\" # Remove leading and\
    \ trailing space\n    EXTENSIONS=\"${EXTENSIONS}\" # Remove extra space\n    EXTENSIONS=\"\
    ${EXTENSIONS}\" # Replace all whitespace with period\n    EXTENSIONS=\"${EXTENSIONS}\"\
    \ # Convert periods to underscores\n    EXTENSIONS=\"${EXTENSIONS}\" # Convert\
    \ all upper case letters to lower case\n    EXTENSIONS=\"${EXTENSIONS}\" # Replace\
    \ all upper case letters with an underscore\n    EXTENSIONS=\"${EXTENSIONS}\"\
    \ # Replace all upper case letters with an underscore\n    EXTENSIONS=\"${EXTENSIONS}\"\
    \ # Remove all periods\n    EXTENSIONS=\"${EXTENSIONS}\" # Remove all spaces\n\
    \    EXTENSIONS=\"${EXTENSIONS}\" # Remove all underscores\n    EXTENSIONS=\"\
    ${EXTENSIONS}\" # Convert all upper case letters to lower case\n    EXTENSIONS=\"\
    ${EXTENSIONS}\" # Replace all upper case letters with an underscore\n    EXTENSIONS=\"\
    ${EXTENSIONS}\" # Replace all upper case letters with an underscore\n    EXTENSIONS=\"\
    ${EXTENSIONS}\" # Replace all periods with periods\n    EXTENSIONS=\"${EXTENSIONS}\"\
    \ # Replace all spaces with periods\n    EXTENSIONS=\"${EXTENSIONS}\" # Replace\
    \ all underscores with underscores\n    EXTENSIONS=\"${EXTENSIONS}\" # Convert\
    \ all upper case letters to lower case\n    EXTENSIONS=\"${EXTENSIONS}\" # Replace\
    \ all upper case letters with an underscore\n    EXTENSIONS=\"${EXTENSIONS}\"\
    \ # Replace all upper case letters with an underscore\n    EXTENSIONS=\"${EXTENSIONS}\"\
    \ # Replace all periods with periods\n    EXTENSIONS=\"${EXTENSIONS}\" # Replace\
    \ all spaces with periods\n    EXTENSIONS=\"${EXTENSIONS}\" # Replace all underscores\
    \ with underscores\n    EXTENSIONS=\"${EXTENSIONS}\" # Convert all upper case\
    \ letters to lower case\n    EXTENSIONS=\"${EXTENSIONS}\" # Replace all upper\
    \ case letters with an underscore\n    EXTENSIONS=\"${EXTENSIONS}\" # Replace\
    \ all upper case letters with an underscore\n    EXTENSIONS=\"${EXTENSIONS}\"\
    \ # Replace all periods with periods\n    EXTENSIONS=\"${EXTENSIONS}\" # Replace\
    \ all spaces with periods\n    EXTENSIONS=\"${EXTENSIONS}\" # Replace all underscores\
    \ with underscores\n    EXTENSIONS=\"${EXTENSIONS}\" # Convert all upper case\
    \ letters to lower case\n    EXTENSIONS=\"${EXTENSIONS}\" # Replace all upper\
    \ case letters with an under\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd4a1lmfc.sh: line 72: unexpected EOF while looking for matching
    `"''

    /tmp/tmpd4a1lmfc.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  # Complete the code here.\n\
    \  a=\"${1#${1%?}}\"\n  a=\"${a%??}\"\n  a=\"${a##*[A-Z]}\"\n  a=\"${a##*[a-z]}\"\
    \n  echo ${a}\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    # get the number of uppercase\
    \ letters in the extension name\n    UPPER_CASE=${1:0:1}\n    UPPER_CASE=$((${UPPER_CASE}+1))\n\
    \n    # get the number of lowercase letters in the extension name\n    LOWER_CASE=${1:0:1}\n\
    \    LOWER_CASE=$((${LOWER_CASE}-${LOWER_CASE}))\n\n    # get the number of characters\
    \ used in the extension\n    STRONGEST_EXTENSION=${1:0:${UPPER_CASE}}\n    STRONGEST_EXTENSION=$((${STRONGEST_EXTENSION}-${LOWER_CASE}))\n\
    \n    STRONGEST_EXTENSION=${STRONGEST_EXTENSION}.${2:0:${STRONGEST_EXTENSION}}\n\
    \    STRONGEST_EXTENSION=${STRONGEST_EXTENSION}.${2:${STRONGEST_EXTENSION}}\n\
    \    STRONGEST_EXTENSION=${STRONGEST_EXTENSION}.${2:${STRONGEST_EXTENSION}}\n\
    \    STRONGEST_EXTENSION=${STRONGEST_EXTENSION}.${2:${STRONGEST_EXTENSION}}\n\n\
    \    return $STRONGEST_EXTENSION\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo_jdkpgg.sh: line 35: 2: 0.: syntax error: invalid arithmetic operator
    (error token is ".")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal _class=$1\n\tlocal\
    \ _extensions=$2\n\tlocal _strength=$(echo $_extensions | sed -E \"s/[[:upper:]]/-/g\"\
    \ | sed -E \"s/[[:lower:]]/-/g\")\n\tfor _extension in $_extensions; do\n\t\t\
    local _extensionName=$(echo $_extension | cut -d '.' -f 1)\n\t\tlocal _extensionStrength=$(echo\
    \ $_extension | cut -d '.' -f 2)\n\t\tif [ $_extensionStrength -eq $_strength\
    \ ]; then\n\t\t\techo $_class.$_extensionName\n\t\tfi\n\tdone\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpb0c3nu7b.sh: line 28: [: tEN: integer expression expected

    /tmp/tmpb0c3nu7b.sh: line 28: [: niNE: integer expression expected

    /tmp/tmpb0c3nu7b.sh: line 28: [: eIGHt8OKe: integer expression expected

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class_name=$1\n\tlocal\
    \ extensions=$2\n\tlocal extension_strength=-1\n\tlocal ext=${extensions[0]}\n\
    \tlocal ext_start=${ext:0:1}\n\tlocal ext_length=${#ext}\n\tlocal ext_letters=${ext:1:$ext_length}\n\
    \n\tlocal letter_strength=0\n\tlocal letter_count=0\n\tlocal letter\n\tlocal extension_letter\n\
    \n\tfor letter in ${extension_letters}; do\n\t\tlocal letter_count=0\n\t\tlocal\
    \ letter_strength=0\n\t\tlocal letter\n\t\tlocal letter_value\n\t\tfor extension_letter\
    \ in ${extensions}; do\n\t\t\tlocal letter=${extension_letter:0:1}\n\t\t\tlocal\
    \ letter_value=${extension_letter:1:1}\n\t\t\tif [[ \"${letter}\" == ${letter_value}\
    \ ]]; then\n\t\t\t\tletter_count=$((${letter_count}+1))\n\t\t\t\tletter_strength=${letter_strength}+${letter_value}\n\
    \t\t\tfi\n\t\tdone\n\t\tif [[ ${letter_count} -eq 0 ]]; then\n\t\t\techo \"Error:\
    \ No extensions containing ${ext}\" 1>&2\n\t\t\texit 1\n\t\tfi\n\t\tletter=${extension_letter:0:1}\n\
    \t\tletter_value=${extension_letter:1:1}\n\t\tif [[ ${letter} -eq ${letter_value}\
    \ ]]; then\n\t\t\tletter_strength=${letter_strength}+${letter_value}\n\t\tfi\n\
    \t\textension_strength=$((${extension_strength}+${letter_strength}))\n\tdone\n\
    \n\textension_strength=$((${extension_strength}+${letter_strength}))\n\n\tif [[\
    \ ${extension_strength} -ge 0 ]]; then\n\t\techo \"${class_name}${ext}\"\n\telse\n\
    \t\techo \"Error: Strongest extension could not be determined.\" 1>&2\n\t\texit\
    \ 1\n\tfi\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'Error: Strongest extension could not be determined.

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=\"${1:?Missing\
    \ class name}\"\n\tlocal exts=\"${2:?Missing extensions list}\"\n\n\tlocal strength\n\
    \tlocal ext\n\tlocal i\n\n\tlocal exts\n\texts=\"${exts// /|}\"\n\texts=$(echo\
    \ $exts | sed -e \"s/'//g\" -e \"s/|//g\" -e \"s/$/ /g\")\n\texts=$(echo $exts\
    \ | cut -c9-)\n\texts=$(echo $exts | cut -d- -f1)\n\n\tfor i in $(seq 0 $((${#exts}-1))\
    \ )\n\tdo\n\t\tstrength=$(echo $exts | cut -c2- | awk -F. '{printf \"%.1f\\n\"\
    , ($1*$2)/($2+$3)}')\n\t\text=$(echo $exts | cut -c$i+1)\n\t\tif [[ $strength\
    \ == $ext[1|length] ]]\n\t\tthen\n\t\t\tbreak\n\t\tfi\n\tdone\n\n\techo ${class}.${ext}\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmpi4ryd3cf.sh: line 39: syntax error in conditional expression: unexpected\
    \ token `|'\n/tmp/tmpi4ryd3cf.sh: line 39: syntax error near `|l'\n/tmp/tmpi4ryd3cf.sh:\
    \ line 39: `\t\tif [[ $strength == $ext[1|length] ]]'\n"
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local className=\"$1\"\n\
    \    local extensionList=\"$2\"\n    local extensionName\n    local extensionStrength\n\
    \    local extensionLower\n    local extensionUpper\n\n    extensionStrength=0\n\
    \    extensionLower=false\n    extensionUpper=false\n    extensionName=\n    while\
    \ read -r extension; do\n        if [ \"$extensionLower\" == \"false\" ]; then\n\
    \            extensionLower=true\n            extensionName=$extension\n     \
    \   fi\n        if [ \"$extensionUpper\" == \"false\" ]; then\n            extensionUpper=true\n\
    \            extensionName=$extension\n        fi\n        extensionStrength=$((${#extensionName}-${#extension}))\n\
    \        if [ \"$extensionStrength\" -gt \"$extensionStrength\" ]; then\n    \
    \        extensionName=$extension\n            extensionStrength=$extensionStrength\n\
    \        fi\n    done < <(echo $extensionList | sed 's/[[:space:]]\\+/ /g')\n\
    \    echo \"$className.$extensionName\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class extensions\
    \ strongest_extension strength count_uppercase count_lowercase index\n    class=$1\n\
    \    shift\n    extensions=$(printf \"%s\" \"$@\")\n    strongest_extension=\"\
    \"\n    strength=0\n    count_uppercase=0\n    count_lowercase=0\n    index=1\n\
    \    for extension in ${extensions}; do\n        extension=${extension//./}\n\
    \        strength=$(( $(( ${#extension} - ${#class} )) \\\n                * $((\
    \ ${#extension} + 1 )) / 2 ))\n        case \"${extension}\" in\n            *[A-Z]*)\
    \ count_uppercase=$(( $count_uppercase + 1 )) ;;\n            *[a-z]*) count_lowercase=$((\
    \ $count_lowercase + 1 )) ;;\n        esac\n        if (( strength > strongest_extension\
    \ )); then\n            strongest_extension=${extension}\n        fi\n    done\n\
    \    echo \"${class}.${strongest_extension}\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal CLASS EXTENSIONS\n\t\
    CLASS=$1\n\tEXTENSIONS=$2\n\n\tlocal MAX_STRING_LENGTH=0\n\tlocal STRONGEST_EXTENSION=\"\
    \"\n\n\t# Loop through the extensions and try to find the strongest one\n\tfor\
    \ extension in $EXTENSIONS\n\tdo\n\t\tEXTENSION=${extension:0:1}\n\t\tSTRONGEST_EXTENSION=${EXTENSION%.*}\n\
    \n\t\t# Get the number of characters in the extension\n\t\tlocal NUMBER_CHARACTERS=0\n\
    \t\tfor char in $STRONGEST_EXTENSION\n\t\tdo\n\t\t\tNUMBER_CHARACTERS=$(( ${#char}\
    \ + 1 ))\n\t\tdone\n\n\t\t# The number of characters in an extension is the number\
    \ of uppercase \n\t\t# letters - the number of lowercase letters\n\t\tlocal STRONGEST_EXTENSION_CHARACTERS=$((\
    \ ${NUMBER_CHARACTERS} - ${#EXTENSION} ))\n\n\t\t# Now that we know how many characters\
    \ in STRONGEST_EXTENSION we need to \n\t\t# find STRONGEST_EXTENSION\n\t\tlocal\
    \ STRONGEST_EXTENSION_NUMBERS=0\n\t\tfor char in $EXTENSION\n\t\tdo\n\t\t\tSTRONGEST_EXTENSION_NUMBERS=$((\
    \ ${#char} + 1 ))\n\t\tdone\n\n\t\t# The strength is the fraction of CAP - SM\n\
    \t\tlocal STRONGEST_EXTENSION_STRONGEST=$(( ${CAP} + ${SM} - ${STRONGEST_EXTENSION_NUMBERS}\
    \ ))\n\n\t\t# We found STRONGEST_EXTENSION\n\t\tif [ $STRONGEST_EXTENSION_STRONGEST\
    \ -gt 0 ]\n\t\tthen\n\t\t\tMAX_STRING_LENGTH=$(( ${MAX_STRING_LENGTH} + 1 ))\n\
    \t\t\tbreak\n\t\tfi\n\tdone\n\n\t# Return the name of the class followed by the\
    \ extension that has the strongest\n\t# strength. Example: ClassName.STRONGEST_EXTENSION\n\
    \techo \"$CLASS.$STRONGEST_EXTENSION\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal ClassName Extension\n\
    \tExtension=${2:-}\n\t[[ $Extension =~ ^[A-Z]+ ]] || { echo \"Error - invalid\
    \ extension.\" ; exit 1 }\n\t[[ $Extension =~ ^[a-z]+ ]] || { echo \"Error - invalid\
    \ extension.\" ; exit 1 }\n\tread -r ClassName < <(echo \"${1:?Usage: $(Strongest_Extension\
    \ <class> <extension>).\" ; exit 1)\n\tlocal CAP SM\n\tCAP=${ClassName#\"${1%\"\
    .\"}\"}\n\tSM=${ClassName#\"${CAP%\".\"}\"}\n\t[[ $CAP -gt $SM ]] || { echo \"\
    Error - invalid extension.\" ; exit 1 }\n\tlocal i STRONG_EXTENSION\n\tSTRONG_EXTENSION=\"\
    ${CAP}\"\n\tfor i in \"${2[@]}\"; do\n\t\t[[ \"${i}\" =~ $STRONG_EXTENSION ]]\
    \ || STRONG_EXTENSION=\"${i}\"\n\tdone\n\techo ${1:-}${STRONG_EXTENSION}\n}\n\n\
    candidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n\
    \    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\"\
    \ ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdpcu2zvj.sh: line 53: unexpected EOF while looking for matching
    `"''

    /tmp/tmpdpcu2zvj.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local cls extension\n  for\
    \ extension in $(echo $2 | tr ' ' ','); do\n    local cap=${extension:0:1}\n \
    \   local sm=${extension:1}\n    local strongest=\"${cls}.${cap}\"\n    if [ $cap\
    \ -gt $sm ]; then\n      strongest=\"${strongest}${cap - sm}\"\n    fi\n    echo\
    \ \"${strongest}\"\n  done\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2dv8kigf.sh: line 27: [: t: integer expression expected

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal CLASS=$1\n\tlocal EXTS=$2\n\
    \tlocal EXT\n\n\tEXT=$(sort -z $EXTS | head -n 1)\n\tCLASS=${CLASS%.*}\n\tCLASS=${CLASS#${EXT%%.*}}\n\
    \tCLASS=${CLASS/${EXT//\\//.}}\n\tCLASS=${CLASS/\\.*/}\n\tCLASS=${CLASS%.*}\n\t\
    CLASS+=\".${EXT}\"\n\tCLASS=\"${CLASS//[^A-Z]/}\"\n\tCLASS=\"${CLASS//[A-Z]/}\"\
    \n\tCLASS=\"${CLASS//\\([A-Z]\\)/}\"\n\tCLASS=\"${CLASS//\\([A-Z][a-z]\\)/}\"\n\
    \tCLASS=\"${CLASS//\\([A-Z][a-z][a-z]\\)/}\"\n\tCLASS=\"${CLASS//\\([A-Z][a-z][a-z][a-z]\\\
    )/}\"\n\tCLASS=\"${CLASS//\\([A-Z][a-z][a-z][a-z][a-z]\\)/}\"\n\tCLASS=\"${CLASS//\\\
    ([A-Z][a-z][a-z][a-z][a-z][a-z]\\)/}\"\n\tCLASS=\"${CLASS//\\([A-Z][a-z][a-z][a-z][a-z][a-z][a-z]\\\
    )/}\"\n\tCLASS=\"${CLASS//\\([A-Z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\\)/}\"\n\
    \tCLASS=\"${CLASS//\\([A-Z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\\)/}\"\n\t\
    CLASS=\"${CLASS//\\([A-Z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\\)/}\"\n\
    \tCLASS=\"${CLASS//\\([A-Z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\\\
    )/}\"\n\tCLASS=\"${CLASS//\\([A-Z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\\\
    )/}\"\n\tCLASS=\"${CLASS//\\([A-Z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\\\
    )/}\"\n\tCLASS=\"${CLASS//\\([A-Z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\\\
    )/}\"\n\tCLASS=\"${CLASS//\\([A-Z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\\\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp7_rsfn7.sh: line 66: unexpected EOF while looking for matching
    `"''

    /tmp/tmpp7_rsfn7.sh: line 70: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal className=$1\n\tlocal\
    \ extensionList=$2\n\tlocal strongestExtensionName\n\tlocal numberOfA\n\tlocal\
    \ numberOfB\n\tlocal numberOfC\n\tlocal numberOfD\n\tlocal numberOfE\n\tlocal\
    \ numberOfF\n\tlocal numberOfG\n\tlocal numberOfH\n\tlocal numberOfI\n\tlocal\
    \ numberOfJ\n\tlocal numberOfK\n\tlocal numberOfL\n\tlocal numberOfM\n\tlocal\
    \ numberOfN\n\tlocal numberOfO\n\tlocal numberOfP\n\tlocal numberOfQ\n\tlocal\
    \ numberOfR\n\tlocal numberOfS\n\tlocal numberOfT\n\tlocal numberOfU\n\tlocal\
    \ numberOfV\n\tlocal numberOfW\n\tlocal numberOfX\n\tlocal numberOfY\n\tlocal\
    \ numberOfZ\n\tlocal numberOfA\n\tlocal numberOfB\n\tlocal numberOfC\n\tlocal\
    \ numberOfD\n\tlocal numberOfE\n\tlocal numberOfF\n\tlocal numberOfG\n\tlocal\
    \ numberOfH\n\tlocal numberOfI\n\tlocal numberOfJ\n\tlocal numberOfK\n\tlocal\
    \ numberOfL\n\tlocal numberOfM\n\tlocal numberOfN\n\tlocal numberOfO\n\tlocal\
    \ numberOfP\n\tlocal numberOfQ\n\tlocal numberOfR\n\tlocal numberOfS\n\tlocal\
    \ numberOfT\n\tlocal numberOfU\n\tlocal numberOfV\n\tlocal numberOfW\n\tlocal\
    \ numberOfX\n\tlocal numberOfY\n\tlocal numberOfZ\n\n\tnumberOfA=$( echo $extensionList\
    \ | egrep -o \"[A-Z]*\" | wc -l )\n\tnumberOfB=$( echo $extensionList | egrep\
    \ -o \"[a-z]*\" | wc -l )\n\tnumberOfC=$( echo $extensionList | egrep -o \"[A-Za-z]*\"\
    \ | wc -l )\n\tnumberOfD=$( echo $extensionList | egrep -o \"[0-9]*\" | wc -l\
    \ )\n\tnumberOfE=$( echo $extensionList | egrep -o \"[a-zA-Z]*\" | wc -l )\n\t\
    numberOfF=$( echo $extensionList | egrep -o \"[A-Za-z]*\" | wc -l )\n\tnumberOfG=$(\
    \ echo $extensionList | egrep -o \"[0-9]*\" | wc -l )\n\tnumberOfH=$( echo $extensionList\
    \ | egrep -o \"[0-9]*\" | wc -l )\n\tnumberOfI=$( echo $extensionList | egrep\
    \ -o \"[0-9]*\" | wc -l )\n\tnumberOfJ=$( echo $extensionList | egrep -o \"[0-9]*\"\
    \ | wc -l )\n\tnumberOfK=$( echo $extensionList | \n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp84as5c0z.sh: line 88: unexpected EOF while looking for matching
    `)''

    /tmp/tmp84as5c0z.sh: line 109: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASS_NAME=\"${1?No\
    \ argument supplied}\"\n  local EXTENSIONS=\"${2?No argument supplied}\"\n  local\
    \ STRONGEST_EXTENSION\n  local STRENGTH\n\n  for extension in \"${EXTENSIONS}\"\
    ; do\n    STRENGTH=\"${extension,,}\"\n    case \"${STRENGTH}\" in\n      *[!A-Z]*)\n\
    \        echo \"${CLASS_NAME}: ${EXTENSIONS} is invalid\"\n        return\n  \
    \      ;;\n      *)\n        local CAPACITY\n        CAPACITY=${#STRENGTH}\n \
    \       local SMALLCAPACITY\n        SMALLCAPACITY=${CAPACITY:-1}\n        local\
    \ STRENGTH\n        STRENGTH=\"${CAPACITY}-${SMALLCAPACITY}\"\n        case \"\
    ${STRENGTH}\" in\n          *[!A-Z]*)\n            echo \"${CLASS_NAME}: ${EXTENSIONS}\
    \ is invalid\"\n            return\n            ;;\n          *)\n           \
    \ local SMALLCAPACITY\n            SMALLCAPACITY=${CAPACITY:-1}\n            local\
    \ CAPACITY\n            CAPACITY=${SMALLCAPACITY}\n            case \"${CAPACITY}\"\
    \ in\n              *[!A-Z]*)\n                echo \"${CLASS_NAME}: ${EXTENSIONS}\
    \ is invalid\"\n                return\n                ;;\n              *)\n\
    \                CAPACITY=${CAPACITY}\n                break\n               \
    \ ;;\n            esac\n            ;;\n        esac\n        break\n        ;;\n\
    \    esac\n  done\n\n  STRONGEST_EXTENSION=\"${CLASS_NAME}.${EXTENSIONS:0:CAPACITY}\"\
    \n  if [[ ${EXTENSIONS:CAPACITY} == *\" \" ]]; then\n    echo \"${CLASS_NAME}:\
    \ ${EXTENSIONS} is invalid\"\n  else\n    echo \"${STRONGEST_EXTENSION}\"\n  fi\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n\n    for extension in $extensions; do\n        strength=$(echo\
    \ \"$extension\" | awk '{print toupper($0)}') - $(echo \"$extension\" | awk '{print\
    \ tolower($0)}')\n        \n        if [ $strength -gt 0 ]; then\n           \
    \ echo \"$class.$extension\"\n            return\n        fi\n    done\n}\n\n\
    candidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n\
    \    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\"\
    \ ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfizybz85.sh: line 26: -: command not found

    /tmp/tmpfizybz85.sh: line 28: [: -gt: unary operator expected

    /tmp/tmpfizybz85.sh: line 26: -: command not found

    /tmp/tmpfizybz85.sh: line 28: [: -gt: unary operator expected

    /tmp/tmpfizybz85.sh: line 26: -: command not found

    /tmp/tmpfizybz85.sh: line 28: [: -gt: unary operator expected

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local CLASS_NAME=\"$1\"\
    \n    local EXTENSIONS=\"$2\"\n    local SM_CAP=$(echo \"${EXTENSIONS}\" | awk\
    \ '{ print toupper($1)-tolower($2) }')\n    local CLASS_EXTEN=\"_\"\n    local\
    \ SM_COUNT=$(echo \"${EXTENSIONS}\" | awk '{ print tolower($1)-tolower($2) }')\n\
    \    local STRONGEST_EXTENSION=\"\"\n    local STRONGEST_CAP\n    local STRONGEST_COUNT\n\
    \    local CAP\n    local COUNT\n    local STRONGEST_STRONGEST_CAP\n    local\
    \ STRONGEST_STRONGEST_COUNT\n    local STRONGEST_EXTENSIONS\n    local STRONGEST_SM_CAP\n\
    \    local STRONGEST_SM_COUNT\n    local STRONGEST_STRONGEST_SM_CAP\n    local\
    \ STRONGEST_STRONGEST_SM_COUNT\n    local STRONGEST_EXTENSIONS\n    local STRONGEST_STRONGEST_EXTENSIONS\n\
    \    \n    STRONGEST_STRONGEST_SM_CAP=$(( SM_CAP / STRONGEST_SM_COUNT ))\n   \
    \ STRONGEST_STRONGEST_SM_COUNT=$(( SM_COUNT / STRONGEST_SM_COUNT ))\n    \n  \
    \  STRONGEST_STRONGEST_CAP=$(( STRONGEST_CAP / STRONGEST_STRONGEST_SM_COUNT ))\n\
    \    STRONGEST_STRONGEST_COUNT=$(( STRONGEST_COUNT / STRONGEST_STRONGEST_SM_COUNT\
    \ ))\n    \n    STRONGEST_STRONGEST_EXTENSIONS=\"\"\n    for (( i=0; i<${STRONGEST_STRONGEST_CAP};\
    \ i++ )); do\n        CAP=$(( CAP + STRONGEST_STRONGEST_CAP - i ))\n        COUNT=$((\
    \ COUNT + STRONGEST_STRONGEST_COUNT - i ))\n        STRONGEST_STRONGEST_EXTENSIONS=\"\
    ${STRONGEST_STRONGEST_EXTENSIONS}${CLASS_NAME}${CLASS_EXTEN}${CAP}\"\n    done\n\
    \n    STRONGEST_STRONGEST_EXTENSIONS=\"${STRONGEST_STRONGEST_EXTENSIONS}${CLASS_NAME}${CLASS_EXTEN}${COUNT}\"\
    \n    STRONGEST_EXTENSIONS=\"${STRONGEST_EXTENSIONS}.${STRONGEST_STRONGEST\n}\n\
    \ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc62spn31.sh: line 73: unexpected EOF while looking for matching
    `"''

    /tmp/tmpc62spn31.sh: line 77: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal ClassName=$1\n\tlocal\
    \ Extensions=$2\n\tlocal strongest_extension=\"\"\n\tlocal extension_strength=0\n\
    \tlocal count=0\n\tlocal extension_found=0\n\tlocal ext\n\tlocal new_extension\n\
    \tlocal i\n\n\tfor i in $Extensions; do\n\t\text=${i%.*}\n\t\textension_found=0\n\
    \t\textension_strength=0\n\t\tnew_extension=$ext\n\t\t\n\t\twhile true; do\n\t\
    \t\tif [[ \"$new_extension\" == *\"$new_extension\"* ]]; then\n\t\t\t\textension_strength=$(($extension_strength\
    \ + 1))\n\t\t\t\tnew_extension=${new_extension#\"$new_extension\"}\n\t\t\t\textension_found=1\n\
    \t\t\t\tbreak\n\t\t\telif [[ \"$new_extension\" == *\"$new_extension\"* ]]; then\n\
    \t\t\t\textension_strength=$(($extension_strength + 1))\n\t\t\t\tnew_extension=${new_extension#\"\
    $new_extension\"}\n\t\t\t\textension_found=1\n\t\t\t\tbreak\n\t\t\telif [[ \"\
    $new_extension\" == *\"$new_extension\"* ]]; then\n\t\t\t\textension_strength=$(($extension_strength\
    \ + 1))\n\t\t\t\tnew_extension=${new_extension#\"$new_extension\"}\n\t\t\t\textension_found=1\n\
    \t\t\t\tbreak\n\t\t\telif [[ \"$new_extension\" == *\"$new_extension\"* ]]; then\n\
    \t\t\t\textension_strength=$(($extension_strength + 1))\n\t\t\t\tnew_extension=${new_extension#\"\
    $new_extension\"}\n\t\t\t\textension_found=1\n\t\t\t\tbreak\n\t\t\telif [[ \"\
    $new_extension\" == *\"$new_extension\"* ]]; then\n\t\t\t\textension_strength=$(($extension_strength\
    \ + 1))\n\t\t\t\tnew_extension=${new_extension#\"$new_extension\"}\n\t\t\t\textension_found=1\n\
    \t\t\t\tbreak\n\t\t\telif [[ \"$new_extension\" == *\"$new_extension\"* ]]; then\n\
    \t\t\t\textension_strength=$(($extension_strength + 1))\n\t\t\t\tnew_extension=${new_extension#\"\
    $new_extension\"}\n\t\t\t\textension_found=1\n\t\t\t\tbreak\n\t\t\telif [[ \"\
    $new_extension\" == *\"$new_extension\"* ]]; then\n\t\t\t\textension_strength=$(($extension_strength\
    \ + 1))\n\t\t\t\tnew_extension=${new_extension#\"$new_extension\"}\n\t\t\t\textension_found=1\n\
    \t\t\t\tbreak\n\t\t\telif [[ \"$new_extension\" == *\"$new_extension\"* ]]; then\n\
    \t\t\t\textension_strength=$(($extension_strength + 1))\n\t\t\t\tnew_extension=${new_extension#\"\
    $new_extension\"}\n\t\t\t\textension_found=1\n\t\t\t\tbreak\n\t\t\telif [[ \"\
    $new_extension\" == *\"$new_extension\"* ]]; then\n\t\t\t\textension_strength=$(($extension_strength\
    \ + \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgxlggjoi.sh: line 80: unexpected EOF while looking for matching
    `)''

    /tmp/tmpgxlggjoi.sh: line 101: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASS_NAME=\"$1\"\n\
    \  local EXTENSIONS=\"$2\"\n\n  local CAPACITIES=0\n  local SMALLCAPS=0\n\n  local\
    \ EXTENSION_SCORES=()\n\n  for i in $(echo $EXTENSIONS | tr \" \" \"\\n\") ; do\n\
    \    EXTENSION=\"$(echo $i | tr \"[A-Z]\" \"[a-z]\")\"\n    EXTENSION=\"${EXTENSION%.*}\"\
    \n\n    SMALLCAPS+=\"$(echo $EXTENSION | tr \"[a-z]\" \"[A-Z]\")\"\n    CAPACITIES+=\"\
    $(echo $EXTENSION | tr \"[A-Z]\" \"[a-z]\" | wc -c) \" \n  done\n\n  CAPACITIES=\"\
    $CAPACITIES ${CAPACITIES%?}\"\n  SMALLCAPS=\"$SMALLCAPS ${SMALLCAPS%?}\"\n\n \
    \ local STRONGEST_EXTENSION=\"\"\n\n  # Find out the strongest extension\n  if\
    \ [[ \"$CAPACITIES\" -gt \"$SMALLCAPS\" ]]; then\n    local SMALLEST_CAPACITY=$((\
    \ $CAPACITIES ))\n\n    for i in $(echo $EXTENSIONS | tr \" \" \"\\n\") ; do\n\
    \      EXTENSION=\"$(echo $i | tr \"[A-Z]\" \"[a-z]\")\"\n      EXTENSION=\"${EXTENSION%.*}\"\
    \n\n      if [[ ${CAPACITIES} -ge ${SMALLCAPS} ]]; then\n        if [[ $EXTENSION\
    \ = $EXTENSION ]] ; then\n          SMALLEST_CAPACITY=$(( $SMALLEST_CAPACITY ))\n\
    \          EXTENSION_SCORES+=($EXTENSION)\n        fi\n      else\n        if\
    \ [[ $EXTENSION = $EXTENSION ]] ; then\n          SMALLEST_CAPACITY=$(( $SMALLEST_CAPACITY\
    \ ))\n        fi\n      fi\n\n      CAPACITIES-=$(( $CAPACITIES ))\n      SMALLCAPS-=$((\
    \ $SMALLCAPS ))\n    done\n\n    # Find out which of the extensions comes first\
    \ in the list\n    local STRONGEST_EXTENSION=$(echo $EXTENSION_SCORES | sort -n\
    \ | head -1 )\n  else\n    local CAPACITY=$(( $SMALLCAPS ))\n\n    for i in $(echo\
    \ $EXTENSIONS | tr \" \" \"\\n\") ; do\n      EXTENSION=\"$(echo $i | tr \"[A-Z]\"\
    \ \"[a-z]\")\"\n      EXTENSION=\"${EXTENSION%.*}\"\n\n      if [[ ${CAPACITY}\
    \ -ge ${SMALLCAPS} ]]; then\n        if [[ $EXTENSION = $EXTENSION ]] ; then\n\
    \          EXTENSION_S\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwad9m1j9.sh: line 78: syntax error near unexpected token `}''

    /tmp/tmpwad9m1j9.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\nlocal _class _extension\nlocal\
    \ _length _strength\nlocal _i _j _k _l _m\n\n_class=$1\n_extension=$2\n\n# initialize\
    \ variables\n_length=0\n_strength=0\n_l=$(echo $_extension | wc -w)\n_extension=$(echo\
    \ $_extension | sed 's/ /./g')\n_i=1\n\n# loop through extensions until we find\
    \ one with the strongest strength\nfor _k in ${_extension}; do\n    _j=1\n   \
    \ \n    while [[ $_k =~ $_extension\\_$_j\\.\\* ]]; do\n        ((_strength+=$_j))\n\
    \        _j=$((_j+1))\n    done\n\n    ((_length-=$_k))\n    ((_i-=$_l))\n   \
    \ ((_j-=1))\ndone\n\necho \"$(_class)_$(_strength).$(_extension)\"\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl2jxzgbk.sh: line 45: ((: _length-=tEN.niNE.eIGHt8OKe: syntax error:
    invalid arithmetic operator (error token is ".niNE.eIGHt8OKe")

    /tmp/tmpl2jxzgbk.sh: line 50: _class: command not found

    /tmp/tmpl2jxzgbk.sh: line 50: _strength: command not found

    /tmp/tmpl2jxzgbk.sh: line 50: _extension: command not found

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class extension\n\t\
    local i SM CA CA_SM CA_A CA_A_A CA_A_A_A CA_A_A_B CA_B B B BA AA Be CC CC_A CC_A_C\
    \ CC_A_C CC_A_C CC_A_D CC_A_E CC_A_E CC_A_F CC_A_G CC_A_H CC_A_I CC_A_J CC_A_K\
    \ CC_A_L CC_A_M CC_A_M CC_A_N CC_A_N CC_A_O PA PC PE PE PF FA FC FE FE FE FE FE\
    \ FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE\
    \ FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE\
    \ FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE\
    \ FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE\
    \ FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE\
    \ FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE\
    \ FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE FE\
    \ FE FE \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name extension\
    \ strongest_extension\n  # Get the name of the class\n  class_name=$1\n  # Get\
    \ the list of extensions\n  IFS=$'\\n' read -ra extensions <<< \"$2\"\n  # Initialize\
    \ \"strongest_extension\" to the first extension\n  strongest_extension=${extensions[0]}\n\
    \  # Get the number of uppercase letters in the extension name\n  CAP=$(($( echo\
    \ \"${strongest_extension}\" | tr 'A-Z' '[a-z]' | wc -l )))\n  # Get the number\
    \ of lowercase letters in the extension name\n  SM=$(($( echo \"${strongest_extension}\"\
    \ | tr 'a-z' '[A-Z]' | wc -l )))\n  # Get the fraction of capital letters in the\
    \ extension name compared to \n  # lowercase letters\n  fracCAPCAP=${CAP} - ${SM}\n\
    \  # Get the strongest extension name\n  while [[ \"${CAP}\" -le 0 ]]; do\n  \
    \  ((CAP++))\n    ((SM++))\n    fracCAPCAP=$((${CAP} - ${SM}))\n    strongest_extension=${extensions[${CAP}-1]}\n\
    \  done\n  echo \"${class_name}.${strongest_extension}\"\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpb6nyvzjt.sh: line 35: -: command not found

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local _extension_str=\".$1\"\
    \n  local _ext\n  local _ext1\n  local _ext2\n  local _ext3\n  local _ext4\n \
    \ local _ext5\n  local _ext6\n  local _ext7\n  local _ext8\n  local _ext9\n  local\
    \ _ext10\n  local _ext11\n  local _ext12\n  local _ext13\n  local _ext14\n  local\
    \ _ext15\n  local _ext16\n  local _ext17\n  local _ext18\n  local _ext19\n  local\
    \ _ext20\n  local _ext21\n  local _ext22\n  local _ext23\n  local _ext24\n  local\
    \ _ext25\n  local _ext26\n  local _ext27\n  local _ext28\n  local _ext29\n  local\
    \ _ext30\n  local _ext31\n  local _ext32\n  local _ext33\n  local _ext34\n  local\
    \ _ext35\n  local _ext36\n  local _ext37\n  local _ext38\n  local _ext39\n  local\
    \ _ext40\n  local _ext41\n  local _ext42\n  local _ext43\n  local _ext44\n  local\
    \ _ext45\n  local _ext46\n  local _ext47\n  local _ext48\n  local _ext49\n  local\
    \ _ext50\n  local _ext51\n  local _ext52\n  local _ext53\n  local _ext54\n  local\
    \ _ext55\n  local _ext56\n  local _ext57\n  local _ext58\n  local _ext59\n  local\
    \ _ext60\n  local _ext61\n  local _ext62\n  local _ext63\n  local _ext64\n  local\
    \ _ext65\n  local _ext66\n  local _ext67\n  local _ext68\n  local _ext69\n  local\
    \ _ext70\n  local _ext71\n  local _ext72\n  local _ext73\n  local _ext74\n  local\
    \ _ext75\n  local _ext76\n  local _ext77\n  local _ext78\n  local _ext79\n  local\
    \ _ext80\n  local _ext81\n  local _ext82\n  local _ext83\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n\n  local max_extension=$(Sort ${extensions} | awk '{print $1}')\n\
    \  local max_strength=-1\n  local max_extension_length=-1\n\n  local extension\n\
    \  local strength\n  for extension in ${extensions[@]}; do\n    strength=$(echo\
    \ $extension |\n      awk '{\n        for(i=2; i<=NF; i++) \n        { \n    \
    \      if($i==\"'$max_extension'\") \n          { \n            print $i; \n \
    \           break; \n          } \n        } \n      }'\n    )\n    if [[ $strength\
    \ -gt $max_strength ]]\n    then\n      max_extension=$extension\n      max_strength=$strength\n\
    \      max_extension_length=${#extension}\n    fi\n  done\n\n  if [[ $max_extension_length\
    \ -gt 1 ]]\n  then\n    echo \"$class_name.$max_extension\"\n  else\n    echo\
    \ \"$class_name\"\n  fi\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv8ua7ja4.sh: line 25: Sort: command not found

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASS EXTENSIONS\n\
    \  CLASS=$1\n  EXTENSIONS=$2\n  local EXTENTION_LENGTH\n  EXTENTION_LENGTH=$#${EXTENSIONS}\n\
    \n  # $# is the number of arguments passed to the function\n  echo \"$CLASS.${EXTENSIONS[$EXTENTION_LENGTH]}\"\
    ;\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpeer5l4gc.sh: line 29: 2tEN: value too great for base (error token
    is "2tEN")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local classname=$1\n  \
    \  local extensions=$2\n    local maxStrength=-1\n    local maxExtension=\n  \
    \  local maxExtensionName=\n    local maxExtensionStrength=\n\n    # iterate over\
    \ the extensions and find the highest one\n    for i in $extensions\n    do\n\
    \        local letters=${i:0:1}\n        local strength=${i#${classname}*.}\n\
    \        if [[ $strength -gt $maxStrength ]]\n        then\n            maxStrength=$strength\n\
    \            maxExtension=$i\n            maxExtensionName=$classname\n      \
    \      maxExtensionStrength=$strength\n        fi\n    done\n\n    echo \"$classname.$maxExtension\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local extension_strongest_index\n    local extension\n  \
    \  local extension_strength\n    local extension_name\n    local class_name_with_extension\n\
    \    local extension_name_with_extension\n    local strongest\n    local strongest_extension_index\n\
    \    local class_name_with_extension_with_strongest\n    local extension_name_with_extension_with_strongest\n\
    \    local strongest_extension_strength\n    local extension_strength_with_strongest\n\
    \    local strongest_extension\n    local strongest_extension_name\n\n    # First\
    \ find out if the list of extensions has extensions with equal strength.\n   \
    \ extension_strength_with_strongest=0\n    extension_strongest_index=0\n    for\
    \ extension in $extensions; do\n        extension_name=${extension%.*}\n     \
    \   extension_strength=${extension##*[![:lower:]]}\n        if (( $extension_strength_with_strongest\
    \ < $extension_strength )); then\n            extension_strength_with_strongest=$extension_strength\n\
    \            extension_strongest_index=$extension_strongest_index\n        fi\n\
    \    done\n\n    # Now find out if the extension with the strongest strength is\
    \ in the list of extensions\n    # with the equal strength. If it is, then that\
    \ extension will be the strongest.\n    strongest_extension_name=$extensions[$extension_strongest_index]\n\
    \    extension_strongest_index=$(( $extension_strongest_index+1 ))\n    if ((\
    \ $extension_strongest_index > 0 )); then\n        strongest=$extensions[$extension_strongest_index]\n\
    \    fi\n\n    # Add the strongest extension to the class name.\n    class_name_with_extension_with_strongest=$class.$strongest\n\
    \    extension_name_with_extension_with_strongest=$strongest\n\n    # Remove the\
    \ extensions we already know about.\n    extensions=$( echo $extensions | sed\
    \ \"s/${extension_name_with_strongest}//g\" )\n\n    # Now find the extension\
    \ that has the strongest strength and append it to the class name.\n    for extension\
    \ in $extensions; do\n        extension_name=${extension%.*}\n        extension_strength=${extension##*[![:lower:]]}\n\
    \        if (( $extension_strength > $extension_strength_with_strongest )); then\n\
    \            class_name_with_extension_with_strongest=$class_name_with_extension_with_strongest.$extension_name\n\
    \            extension_name_with_extension_with_strongest=$extension\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpspinhmxe.sh: line 73: syntax error near unexpected token `}''

    /tmp/tmpspinhmxe.sh: line 73: `}''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strength=$(echo \"${#extensions}\" | awk '{sum += $1}')\n\
    \  local class_name_length=${#class_name}\n  local strength_length=${#strength}\n\
    \  local i=0\n  local j=0\n  local name_index=0\n  local strength_index=0\n  local\
    \ extension_index=0\n  local extension_length=0\n  local number_of_extensions=${#extensions[@]}\n\
    \  local max_extension_length=0\n  local max_extension=\"\"\n  local max_strength=-1\n\
    \  local max_extension_index=0\n  local extension_number=0\n  local j=0\n  local\
    \ extension_strength=0\n  local extension_numbers=\"\"\n  while [ \"$j\" -lt \"\
    $number_of_extensions\" ]; do\n    local extension_strength=$(echo \"${extensions[$j]}\"\
    \ | awk '{sum += $1}')\n    if [ \"$extension_strength\" -gt \"$max_strength\"\
    \ ]; then\n      max_strength=$extension_strength\n      max_extension=$extensions[$extension_index]\n\
    \      max_extension_index=$j\n    fi\n    extension_numbers=\"$extension_numbers\
    \ ${extension_index}\"\n    extension_index=$(( ${extension_index} + 1 ))\n  \
    \  j=$(( ${j} + 1 ))\n  done\n  echo \"$max_extension.$max_strength\" \n}\n\n\
    candidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n\
    \    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\"\
    \ ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe6cv3di6.sh: line 44: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n   local class=$1\n   local\
    \ extensions=$2\n\n   for extension in $extensions\n   do\n      local extension_length=${#extension}\n\
    \      local extension_cap=${extension_length#0}\n      local extension_sm=${extension_length%$extension_cap}\n\
    \      local strength=$(echo $extension | awk '{print ('\"$extension_length\"\
    ' - '\"$extension_sm\"')/('\"$extension_cap\"' - '\"$extension_sm\"')}')\n   \
    \   if [ $strength -gt 0 ]; then\n         return $class.$extension\n      fi\n\
    \   done\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: {print (3 - )/(3 - )}

    awk: cmd. line:1:             ^ syntax error

    awk: cmd. line:1: {print (3 - )/(3 - )}

    awk: cmd. line:1:              ^ syntax error

    awk: cmd. line:1: {print (3 - )/(3 - )}

    awk: cmd. line:1:               ^ unterminated regexp

    awk: cmd. line:1: {print (3 - )/(3 - )}

    awk: cmd. line:1:                      ^ unexpected newline or end of string

    /tmp/tmpo7dcnpf3.sh: line 31: [: -gt: unary operator expected

    awk: cmd. line:1: {print (4 - )/(4 - )}

    awk: cmd. line:1:             ^ syntax error

    awk: cmd. line:1: {print (4 - )/(4 - )}

    awk: cmd. line:1:              ^ syntax error

    awk: cmd. line:1: {print (4 - )/(4 - )}

    awk: cmd. line:1:               ^ unterminated regexp

    awk: cmd. line:1: {print (4 - )/(4 - )}

    awk: cmd. line:1:                      ^ unexpected newline or end of string

    /tmp/tmpo7dcnpf3.sh: line 31: [: -gt: unary operator expected

    awk: cmd. line:1: {print (9 - )/(9 - )}

    awk: cmd. line:1:             ^ syntax error

    awk: cmd. line:1: {print (9 - )/(9 - )}

    awk: cmd. line:1:              ^ syntax error

    awk: cmd. line:1: {print (9 - )/(9 - )}

    awk: cmd. line:1:               ^ unterminated regexp

    awk: cmd. line:1: {print (9 - )/(9 - )}

    awk: cmd. line:1:                      ^ unexpected newline or end of string

    /tmp/tmpo7dcnpf3.sh: line 31: [: -gt: unary operator expected

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local -n a=\n  local -n b=\n\
    \  local -n c=\n  local -n d=\n  local -n e=\n  local -n f\n  local -n h\n  local\
    \ -n i\n  local -n j\n  local -n k\n  local -n l\n  local -n m\n  local -n n\n\
    \  local -n o\n  local -n p\n  local -n q\n  local -n r\n  local -n s=\n  local\
    \ -n t\n  local -n u\n  local -n v\n  local -n w\n  local -n x\n  local -n y\n\
    \  local -n z\n  local -n A\n  local -n B\n  local -n C\n  local -n D\n  local\
    \ -n E\n  local -n F\n  local -n G\n  local -n H\n  local -n I\n  local -n J\n\
    \  local -n K\n  local -n L\n  local -n M\n  local -n N\n  local -n O\n  local\
    \ -n P\n  local -n Q\n  local -n R\n  local -n S\n  local -n T\n  local -n U\n\
    \  local -n V\n  local -n W\n  local -n X\n  local -n Y\n  local -n Z\n  local\
    \ -n a\n  local -n b\n  local -n c\n  local -n d\n  local -n e\n  local -n f\n\
    \  local -n h\n  local -n i\n  local -n j\n  local -n k\n  local -n l\n  local\
    \ -n m\n  local -n n\n  local -n o\n  local -n p\n  local -n q\n  local -n r\n\
    \  local -n s\n  local -n t\n  local -n u\n  local -n v\n  local -n w\n  local\
    \ -n x\n  local -n y\n  local -n z\n  local -n A\n  local -n B\n  local -n C\n\
    \  local -n D\n  local -n E\n  local -n F\n  local -n G\n  local -n H\n  local\
    \ -n I\n  \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0c7lmlbz.sh: line 22: local: `'': not a valid identifier

    /tmp/tmp0c7lmlbz.sh: line 23: local: `'': not a valid identifier

    /tmp/tmp0c7lmlbz.sh: line 24: local: `'': not a valid identifier

    /tmp/tmp0c7lmlbz.sh: line 25: local: `'': not a valid identifier

    /tmp/tmp0c7lmlbz.sh: line 26: local: `'': not a valid identifier

    /tmp/tmp0c7lmlbz.sh: line 39: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=${1:?Class name\
    \ not given}\n\tlocal extensions=${2:?Extension names not given}\n\n\tlocal strength=\"\
    \"\n\tlocal ext=\"\"\n\tlocal exts=()\n\tlocal num=0\n\n\t# Loop through each\
    \ extension\n\tfor i in $extensions\n\tdo\n\t\t# Get number of uppercase\n\t\t\
    num=`echo $i | tr -cd [A-Z]`\n\t\t# Get number of lowercase\n\t\tnum+=`echo $i\
    \ | tr -cd [a-z]`\n\t\t# Get strength\n\t\tstrength=`echo $i | sed -n \"s/^\\\
    ([^ ]*\\).*/\\1/p\"`\n\t\t# If strongest, store it\n\t\tif [[ $strength == \"\
    $num\" ]]\n\t\tthen\n\t\t\text=${i}\n\t\t\tbreak\n\t\tfi\n\tdone\n\n\techo $class.$ext\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "tr: extra operand \u2018x\u2019\nOnly one string may be given when deleting\
    \ without squeezing repeats.\nTry 'tr --help' for more information.\ntr: extra\
    \ operand \u2018x\u2019\nOnly one string may be given when deleting without squeezing\
    \ repeats.\nTry 'tr --help' for more information.\ntr: extra operand \u2018x\u2019\
    \nOnly one string may be given when deleting without squeezing repeats.\nTry 'tr\
    \ --help' for more information.\n"
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASS=\"$1\" EXTN=\"\
    $2\"\n  local LENGTH=$(echo \"${EXTN}\" | wc -w)\n  local SM=${#EXTN}\n  local\
    \ CAP=${#CLASS}\n  local SM_NUM=$(expr $SM - 1)\n  local CAP_NUM=$(expr $CAP -\
    \ 1)\n  local STRONG=\"\"\n\n  local EXTN_NUM=0\n  for E in ${EXTN}\n  do\n  \
    \  EXTN_NUM=$((EXTN_NUM + ${CAP_NUM}*(${EXTN_NUM}+${SM_NUM})/${CAP_NUM}))\n  done\n\
    \  \n  local EXTN_STR=\"\"\n  for E in ${EXTN}\n  do\n    EXTN_STR=${EXTN_STR}${CAP}${EXTN_NUM}\n\
    \    EXTN_NUM=$((EXTN_NUM + 1))\n  done\n\n  echo \"$CLASS.$EXTN_STR\"\n}\n\n\
    candidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n\
    \    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\"\
    \ ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ exts=$2\n    local ext\n    local strongest\n    local i\n\n    strongest=\"\
    \"\n\n    for ext in $exts; do\n\tcase $ext in\n\t\t*.[A-Z]*|*.[a-z]*|*.[0-9]*|*.\\\
    *|*[^A-Z]*|*[^a-z]*|*[^0-9]*|*[^A-Z]*\\*|*[^a-z]*\\*)\n\t\t    echo \"${class}.${ext}\"\
    \n\t\t\tstrongest=\"${class}.${ext}\"\n\t\t\tbreak\n\t\tesac\n    done\n\n   \
    \ if [ -z \"$strongest\" ]; then\n\tfor ext in $exts; do\n\t    if [ \"$ext\"\
    \ = \"*\" ] || [ -z \"$ext\" ]; then\n\t\t\techo \"${class}\"\n\t\t\tstrongest=\"\
    ${class}\"\n\t\t\tbreak\n\t    fi\n\tdone\n    fi\n\n    echo \"$strongest\"\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  local strongest=\"\"\n  local count=0\n  local idx=0\n  local\
    \ extension_map\n  local extension_str\n\n  extension_map=(\n    \"$(rev <<< \"\
    ${extensions// /.\")\"\n  )\n\n  # If the class is empty or does not have any\
    \ uppercase letters, then return it.\n  if [ -z \"$class_name\" ] || [ \"$class_name\"\
    \ = \" \" ]; then\n    echo \"$class_name\"\n    return 0\n  fi\n  \n  # Create\
    \ an array with lowercase letters as indexes and uppercase letters as values.\n\
    \  declare -A lowercase=(\n    [A]=a\n    [B]=b\n    [C]=c\n    [D]=d\n    [E]=e\n\
    \    [F]=f\n    [G]=g\n    [H]=h\n    [I]=i\n    [J]=j\n    [K]=k\n    [L]=l\n\
    \    [M]=m\n    [N]=n\n    [O]=o\n    [P]=p\n    [Q]=q\n    [R]=r\n    [S]=s\n\
    \    [T]=t\n    [U]=u\n    [V]=v\n    [W]=w\n    [X]=x\n    [Y]=y\n    [Z]=z\n\
    \  )\n  \n  # Go through all the extensions, increment the count variable by \n\
    \  # one if an extension is of the same strength, and append the extension\n \
    \ # to the string only if the count is greater than zero. \n  for extension_str\
    \ in \"${extension_map[@]}\"; do\n    if [ \"$extension_str\" != \"$extension\"\
    \ ]; then\n      count=$(( $count + 1 ))\n      if [ \"$count\" -ge 1 ]; then\n\
    \        extension=\"$extension_str\"\n      fi\n    fi\n  done\n\n  # If the\
    \ string has no extensions, return it.\n  if [ \"$count\" -eq 0 ]; then\n    echo\
    \ \"$class_name\"\n    return 0\n  fi\n\n  # If the extensions all have the same\
    \ strength, return the last extension.\n  if [ \"$count\" -eq 1 ]; then\n    echo\
    \ \"$class_name.$extension\"\n    return 0\n  fi\n\n  # If there are multiple\
    \ extensions with the same strength choose the \n  # one that comes first in the\
    \ list.\n  if [ \"$count\" -gt 1 ]; then\n    idx=0\n    while [ ${lowercase[$idx]}\
    \ = \"${lowercase[$count]}\" ]; do\n      idx=$(( $idx + 1 ))\n    done\n    extension=\"\
    $class_name.$extension_map[$idx]\" \n  fi\n\n  # Return the string.\n  echo \"\
    $\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgnt7vgxm.sh: line 122: unexpected EOF while looking for matching
    `"''

    /tmp/tmpgnt7vgxm.sh: line 126: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=\"$1\"\
    \n    local extensions=$2\n    local strength=0\n    for extension in $extensions\n\
    \    do\n        strength=$((strength+$(echo \"$extension\" | tr '[A-Z]' '[a-z]')\
    \ - $(echo \"$extension\" | tr '[a-z]' '[A-Z]')))\n    done\n    echo \"$class_name.$extensions[$(($strength))]\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local classname=\"$1\"\n\
    \  local extensions=\"$2\"\n\n  local max=-99999\n  local maxstr=\"\"\n  local\
    \ ext=\n  \n  while read -r ext; do\n    [[ \"$ext\" =~ [A-Z].* ]] || continue\n\
    \    let \"CAP=${#ext}\"\n    let \"SM=${#ext}\"-$CAP\n    \n    if [[ \"$CAP\"\
    \ -gt \"$max\" ]]; then\n      max=$CAP\n      maxstr=\"$classname.$ext\"\n  \
    \  elif [[ \"$SM\" -gt \"$max\" ]]; then\n      max=$SM\n      maxstr=\"$classname.$ext\"\
    \n    fi\n  done <<< \"$extensions\"\n  \n  [[ -n \"$maxstr\" ]] && echo \"$maxstr\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local strongestExtension=$1\n\
    \  local extensions=$2\n  local i=0\n\n  while [ \"$i\" -lt \"$#\" ]; do\n   \
    \ local CAP=$(itoa $i)\n    local SM=$(itoa $((i+1)))\n    if [ \"$(echo $CAP\
    \ | grep -c $SM)\" -eq \"0\" ]; then\n      local SM=$(itoa $((i+2)))\n    fi\n\
    \    if [ \"$(echo $SM|grep -c $CAP)\" -eq \"0\" ]; then\n      local CAP=$(itoa\
    \ $((i+1)))\n    fi\n    local strongestExtension=\"${strongestExtension}.${CAP}${SM}\"\
    \n    i=$((i+1))\n  done\n  echo ${strongestExtension}\n}\n\ncandidate() {\n \
    \   Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpj3d70w5g.sh: line 27: itoa: command not found

    /tmp/tmpj3d70w5g.sh: line 28: itoa: command not found

    Usage: grep [OPTION]... PATTERNS [FILE]...

    Try ''grep --help'' for more information.

    /tmp/tmpj3d70w5g.sh: line 29: [: : integer expression expected

    Usage: grep [OPTION]... PATTERNS [FILE]...

    Try ''grep --help'' for more information.

    /tmp/tmpj3d70w5g.sh: line 32: [: : integer expression expected

    /tmp/tmpj3d70w5g.sh: line 27: itoa: command not found

    /tmp/tmpj3d70w5g.sh: line 28: itoa: command not found

    Usage: grep [OPTION]... PATTERNS [FILE]...

    Try ''grep --help'' for more information.

    /tmp/tmpj3d70w5g.sh: line 29: [: : integer expression expected

    Usage: grep [OPTION]... PATTERNS [FILE]...

    Try ''grep --help'' for more information.

    /tmp/tmpj3d70w5g.sh: line 32: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local STRONGS=${2:-''}\n\
    \  local CLASS=${1:-''}\n  local LIST=${3:-''}\n  local SEGS=${4:-''}\n  local\
    \ STRONG=${5:-''}\n  local MATCH=-1\n\n  echo \"$LIST\" | while read EXT; do\n\
    \      STRONG=$(echo $EXT | awk '{print toupper(substr($1,1,1))}-{print tolower(substr($1,2))}')\n\
    \      if [[ $STRONGS =~ $STRONG ]]; then\n        MATCH=1\n        break\n  \
    \    fi\n  done\n\n  if [[ ${MATCH} == 0 ]]; then\n    STRONGS=${STRONGS%.*} #\
    \ remove the extension\n    echo \"${CLASS}.${STRONGS}\"\n  else\n    STRONGS=$(echo\
    \ \"$LIST\" | sort -n | head -1 | cut -d . -f 1)\n    echo \"${CLASS}.${STRONGS}\"\
    \n  fi\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: {print toupper(substr($1,1,1))}-{print tolower(substr($1,2))}

    awk: cmd. line:1:                                 ^ syntax error

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local CLASS=\"${1}\"; shift\n\
    \    local EXTENSIONS=\"${@}\"\n    local STRENGTH\n    local EXT\n    local MAX_STRENGTH\n\
    \    local EXTS\n    local EXT\n    local EXTENSION\n    local STR\n    local\
    \ NUM_CAP\n    local NUM_SM\n    NUM_CAP=0\n    NUM_SM=0\n    for EXT in $EXTENSIONS;\
    \ do\n        case \"$EXT\" in\n            \\*[A-Z]*) NUM_CAP=$((NUM_CAP+${#EXT}));\
    \ EXT=\"${EXT//[A-Z]/}\"; break ;;\n            \\*[a-z]*) NUM_SM=$((NUM_SM+${#EXT}));\
    \ EXT=\"${EXT//[a-z]/}\"; break ;;\n        esac\n    done\n    if [[ \"$NUM_CAP\"\
    \ -lt \"$NUM_SM\" ]] && [[ -n $EXTS ]]; then\n        EXTENSION=\"${EXTS[1]}\"\
    \n    elif [[ \"$NUM_SM\" -lt \"$NUM_CAP\" ]] && [[ -n $EXTS ]]; then\n      \
    \  EXTENSION=\"${EXTS[0]}\"\n    elif [[ -n $EXTS ]]; then\n        EXTENSION=\"\
    ${EXTS[0]}\"\n    else\n        echo \"No extension with any capitals or lowercase\
    \ letters found.\"\n        exit 0\n    fi\n    MAX_STRENGTH=$(echo \"$NUM_CAP\
    \ - $NUM_SM\" | bc)\n    for EXT in $EXTENSIONS; do\n        case \"$EXT\" in\n\
    \            \\*[A-Z]*) STRENGTH=$((STRENGTH-${#EXT})); EXT=\"${EXT//[A-Z]/}\"\
    ; break ;;\n            \\*[a-z]*) STRENGTH=$((STRENGTH-${#EXT})); EXT=\"${EXT//[a-z]/}\"\
    ; break ;;\n        esac\n    done\n    if [[ \"$STRENGTH\" -lt 0 ]]; then\n \
    \       echo \"No extension with any capitals or lowercase letters found.\"\n\
    \        exit 0\n    fi\n    STR=\"$(echo \"$CLASS\" | sed \"s/\\./_/g\" | sed\
    \ \"s/^$EXTENSION\\./$EXTENSION\\./\")\"\n    echo \"$STR.$(echo \"$STR\" | sed\
    \ \"s/_$EXTENSION\\././\")\"\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal cls=\"$1\"\n\tlocal\
    \ ext=\"$2\"\n\tlocal cap=0\n\tlocal sm=0\n\tlocal n=0\n\tlocal m=0\n\tlocal strongest=\"\
    \"\n\n\tfor ext in ${ext}; do\n\t\tcase \"${ext}\" in\n\t\t\t[A-Z]*) cap=$((cap+1));;\n\
    \t\t\t[a-z]*) sm=$((sm+1));;\n\t\tesac\n\tdone\n\tm=$(((cap-sm+1)));\n\tn=$((${#ext}-m));\n\
    \tif (( n > 0 )); then\n\t\tfor (( i=0; i<n; i++ )); do\n\t\t\tif [ \"${ext:$i:1}\"\
    \ = \"${ext:$i:1}\" ] 2>/dev/null; then\n\t\t\t\tstrongest=\"${cls}/${ext:$i:1}\"\
    \n\t\t\tfi\n\t\tdone\n\tfi\n\techo \"${strongest}\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local _ext_class _ext_strength\n\
    \    _ext_class=${1%%\\.*}\n    _ext_class=${_ext_class%.*}\n    for _ext in $2\n\
    \    do\n        _ext_strength=$(echo $_ext | awk '{print toupper(substr($1,length($1)-1,1))}'\n\
    \        | awk '{print tolower($1)}')\n        if [ -z \"${_ext_strength}\" ]\n\
    \        then\n            echo \"${_ext_class}.${_ext}\"\n            continue\n\
    \        fi\n        if [ -n \"${!_ext_strength:-}\" ]\n        then\n       \
    \     echo \"${_ext_class}.${_ext}\"\n        fi\n    done\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptvo_wwml.sh: command substitution: line 30: syntax error near unexpected
    token `|''

    /tmp/tmptvo_wwml.sh: command substitution: line 30: `        | awk ''{print tolower($1)}'')''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class\n    local\
    \ extensions_array\n    local extension\n\n    extensions_array=$2\n    class=$1\n\
    \    \n    extension=${extensions_array[0]}\n    \n    for(( i = 1 ; i < ${#extensions_array[@]}\
    \ ; i++)); do\n        extension=${extensions_array[i]}\n        \n        CAP=$(echo\
    \ $extension |grep -o '[A-Z]' | wc -c)\n        SM=$(echo $extension |grep -o\
    \ '[a-z]' | wc -c)\n        \n        if (( (CAP-SM) == 0 )) ; then\n        \
    \    echo \"$class.$extension\"\n            return\n        fi\n        \n  \
    \      (( CAP > SM ))\n    done\n    \n    extension=${extensions_array[${#extensions_array[@]}-1]}\n\
    \    echo \"$class.$extension\"\n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class extension\n\
    \    local i=0\n    local max=0\n    local min=0\n    local strongest_extension\n\
    \    \n    for extension in $2; do\n        if [[ $class == *${extension}* ]];\
    \ then\n            ((i+=1))\n        fi\n    done\n    \n    for extension in\
    \ $2; do\n        if (( i == 0 )); then\n            strongest_extension=${extension}\n\
    \        else\n            local c=${extension%%?}\n            local m=${extension#*${c}}\n\
    \            local f=(${#m})\n            local b=$(( c+1 ))\n            local\
    \ l=$(( b-c ))\n            local s=(${#l})\n            local strongest=${extension}\n\
    \            if (( f > 0 )); then\n                if (( s > 0 )); then\n    \
    \                (( f*=l ))\n                fi\n            fi\n            if\
    \ (( f > max )); then\n                max=f\n                strongest_extension=${extension}\n\
    \            elif (( f < max )); then\n                if (( f > min )); then\n\
    \                    min=f\n                fi\n            fi\n        fi\n \
    \   done\n    \n    echo \"$class.${strongest_extension}\"\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal Class Extension\n\t\
    Class=\"${1}\"\n\tExtension=\"${2}\"\n\tlocal SM\n\tSM=$(echo \"${Extension}\"\
    \ | tr '[:upper:]' '[:lower:]' | wc -c)\n\tlocal CAP\n\tCAP=$(echo \"${Extension}\"\
    \ | tr '[:upper:]' '[:lower:]' | sort | uniq | wc -c)\n\tlocal Strength\n\tStrength=$((\
    \ (CAP - SM) / CAP ))\n\techo \"${Class}.${Extension}${Strength}\"\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal Class Extensions Strongest_Extension\
    \ Strongest_Extension_Num Strength\n\tClass=\"$1\" Extensions=\"$2\"\n\tStrongest_Extension_Num=0\n\
    \tStrength=0\n\tfor extension in $Extensions; do\n\t\tcase \"$extension\" in\n\
    \t\t\t\"$Class\".*)\n\t\t\t\text=\"${extension//.}\"\n\t\t\t\text=\"${ext%.}\"\
    \n\t\t\t\tExtension=\"${ext}\"\n\t\t\t\tStrongest_Extension=\"${Class}.${Extension}\"\
    \n\t\t\t\tStrength=\"${CAP}${CAP}-${SM}${SM}\"\n\t\t\t\tbreak\n\t\t\t;;\n\t\t\t\
    *) echo \"$extension\" ;;\n\t\tesac\n\tdone\n\t(( Strength > Strongest_Extension_Num\
    \ ? Strength = Strongest_Extension_Num : Strongest_Extension_Num = Strength ))\n\
    \techo \"$Strongest_Extension\"\n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7ptku94j.sh: line 39: ((: Strength > Strongest_Extension_Num ?
    Strength = Strongest_Extension_Num : Strongest_Extension_Num = Strength : attempted
    assignment to non-variable (error token is "= Strength ")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1 extensions=$2\
    \ \n    local i ext min max str strongest_ext\n\n    min=$(echo $extensions |\
    \ awk -F '' '{for(i=1; i<=NF; i++)\n        {if(length($i) < length($(min[i])))\
    \ min[i]=$i}}END{for(i=1; i<=NF; i++){\n        if(length($min[i]) > length($max[i])){max[i]=$min[i]}else{\n\
    \        max[i]=$max[i]}}}')\n\n    max=$(echo $extensions | awk -F '' '{for(i=1;\
    \ i<=NF; i++)\n        {if(length($i) < length($(max[i]))) max[i]=$i}}END{for(i=1;\
    \ i<=NF; i++){\n        if(length($min[i]) > length($max[i])){max[i]=$min[i]}else{\n\
    \        max[i]=$max[i]}}}')\n    str=$class\n    for(i in min)\n        str=${str}.$i\n\
    \    for(i in max)\n        str=${str}.$i\n    return $str\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpho1nuha_.sh: line 35: syntax error near unexpected token `(''

    /tmp/tmpho1nuha_.sh: line 35: `    for(i in min)''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal extension=${1#*.}\n\
    \tlocal length=${#extension}\n\tlocal cap=${extension:0:1}\n\tlocal sm=${extension:1:1}\n\
    \tlocal strongest_extension=\"\"\n\tlocal strongest_strength=0\n\tlocal extensions_in_class=\"\
    \"\n\tlocal number_of_classes_in_extension=0 \n\t\n\textensions_in_class=$($1\
    \ -lt $2 | awk '{print $1}')\n\tnumber_of_classes_in_extension=${#extensions_in_class}\n\
    \n\tfor ((i=2;i<=number_of_classes_in_extension;i++)); do\n\t\tcap=${extension:1:1}\n\
    \t\tsm=${extension:$i:1}\n\t\tstrongest_strength=${(cap-$sm)/(cap+$sm)}\n\t\t\
    if (( strongest_strength > strongest_strength )) ; then\n\t\t\tstrongest_extension=$extensions_in_class[i]\n\
    \t\tfi\n\tdone\n\techo $strongest_extension\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpklzf78pk.sh: line 31: Watashi: command not found

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  # Get a list of the extensions\n\
    \  local ext=\"$2\"\n  local ext_list=$(echo \"$ext\" | tr \" \" \"\\n\")\n  #\
    \ Set up the strongest extension\n  local strength=${CAP}\n  local ext\n  # Iterate\
    \ through the list of extensions\n  for ext in $ext_list; do\n    # Get the extension\
    \ name\n    local ext_name=$(echo \"$ext\" | awk '{print tolower($0)}')\n    #\
    \ Get the number of capital letters \n    local cap_count=$(echo \"$ext_name\"\
    \ | awk '{print toupper($0)}')\n    # Get the number of lowercase letters\n  \
    \  local lc_count=$(echo \"$ext_name\" | awk '{print length($0)}')\n    # Set\
    \ the strength based on the fraction CAP-SM\n    local strength=$((${CAP}/${SM}\
    \ - ${cap_count}/${lc_count}))\n    # If the extension's strength is greater than\
    \ the current strongest\n    # extension's strength, then save this as the strongest\
    \ extension\n    if [[ \"$strength\" -gt \"$strength\" ]]; then\n      echo \"\
    $1\" \"$ext_name\"\n      break\n    fi\n  done\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8443j_zg.sh: line 37: / - TEN/3: syntax error: operand expected
    (error token is "/ - TEN/3")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name extension_list\
    \ strength extension\n  \n  extension_list=$2\n  \n  while read -r extension;\
    \ do\n    strength=$((${#extension} + ${#${extension:0:1}} - ${#${extension:1:1}}\
    \ - 1))\n    [[ ${strength} -gt $((${#class_name}+${#extension:0:1}-1)) ]] &&\
    \ strength=${#extension}\n    echo \"$class_name.$extension\"\n  done <<< \"$extension_list\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpum19ltvd.sh: line 27: ${#extension} + ${#${extension:0:1}} - ${#${extension:1:1}}
    - 1: bad substitution

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local _class _l\n  _l=$2\n\
    \  [[ -z \"$1\" ]] && echo \"ERROR: No class specified!\" && return 1\n  [[ -z\
    \ \"$2\" ]] && echo \"ERROR: No extensions specified!\" && return 1\n  \n  _class=`echo\
    \ $1 | tr '[:upper:]' '[:lower:]'`\n  [[ -z \"$_class\" ]] && echo \"ERROR: Class\
    \ name not valid!\" && return 1\n\n  for extension in $2; do\n    if [[ -z $(echo\
    \ $_class | grep $extension) ]]; then\n      echo \"\"\n      echo \"ERROR: No\
    \ such extension \\\"$extension\\\" found in class \\\"$_class\\\"\"\n      echo\
    \ \"Usage: $(basename $0) <class> <extension(s)>\"\n      return 1\n    fi\n \
    \   _l=$(echo $_l | sed \"s#$extension#$extension\\.$extension#g\")\n  done\n\
    \  \n  echo \"$1_$_l\"\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local extension_name extensions\
    \ strongest_extension strength\n\n  extension_name=${1:?'No extension given.'}\n\
    \  extensions=${2:?'No extensions given.'}\n\n  strength=$( \\\n    echo ${extension_name}\
    \ | \\\n      tr [A-Z] [a-z] | \\\n      tr '[:upper:]' '[:lower:]' | \\\n   \
    \   wc -l | \\\n      sed \"s/[[:space:]]//g\" )\n\n  for extension in ${extensions//,/\
    \ }; do\n    [ -n \"$extension_name\" ] || continue\n\n    [ -z \"$extension_name\"\
    \ ] && continue\n\n    case \"$strength\" in\n      [!-z \"$extension_name\"])\
    \ ;;\n      [!-z \"$extension\"] ) strength=${strength#\"$extension\"} ;;\n  \
    \    *) \n        strength=${strength-$extension}\n        extension_name=${extension_name#\"\
    $extension\"}\n    \n        # To ensure that the extension always comes first\
    \ in the list \n        # we must sort and sort again the list of extensions.\n\
    \        [ -z \"$extensions\" ] || \\\n          extensions=$(echo \"$extensions,$extension\"\
    \ | sort | sort -u)\n\n        strength=${strength-$extension_name}\n    \n  \
    \      break ;;\n    esac\n  done\n\n  strongest_extension=${extension_name}\n\
    \  [ -n \"$extension_name\" ] && strongest_extension=${extension_name}.$strength\n\
    \n  [ -z \"$strongest_extension\" ] || echo \"${strongest_extension}\"\n}\n\n\
    candidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n\
    \    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\"\
    \ ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqxkgo15j.sh: line 40: syntax error near unexpected token `"$extension_name"]''

    /tmp/tmpqxkgo15j.sh: line 40: `      [!-z "$extension_name"]) ;;''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal CLASS=$1\n\tlocal EXTENSIONS=$2\n\
    \tlocal SM_STRONGEST_PARENT=0\n\tlocal STRONGEST_EXTENSION=\n\tlocal STRONG=-1\n\
    \tfor EXTENSION in $EXTENSIONS; do\n\t\tlocal CAP=$((${EXTENSION//./}.length))\n\
    \t\tlocal SM=$((${EXTENSION//./}.length - ${CAP}))\n\t\tif [[ $CAP -gt $SM ]];\
    \ then\n\t\t\tSM_STRONGEST_PARENT=$CAP\n\t\t\tSTRONGEST_EXTENSION=$EXTENSION\n\
    \t\t\tSTRONG=$CAP\n\t\telse\n\t\t\tSM_STRONGEST_PARENT=$SM\n\t\t\tSTRONGEST_EXTENSION=$EXTENSION\n\
    \t\t\tSTRONG=$SM\n\t\tfi\n\tdone\n\techo \"$CLASS.$STRONGEST_EXTENSION\"\n}\n\n\
    candidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n\
    \    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\"\
    \ ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjuhbhwgi.sh: line 28: tEN.length: syntax error: invalid arithmetic
    operator (error token is ".length")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal CLASS EXT \n\tlocal\
    \ SM SC_\n\n\tCLASS=$1\n\tshift\n\tSC_=$( echo \"$1\" | sed 's/\\([A-Z]\\)/ \\\
    1/g' )\n\tEXTS=()\n\n\tfor EXT in \"$@\" ; do\n\t\tif [ \"$EXT\" == \"$CLASS\"\
    \ ] ; then\n\t\t\treturn \"$EXT\"\n\t\tfi\n\tdone\n\n\tSM=$( echo \"$SC_\" | sed\
    \ 's/\\([a-z]\\)/ \\1/g' | sort --reverse | head -1 )\n\n\tSM_=$( echo \"$SM\"\
    \ | sed 's/\\(.\\)\\(.\\)/\\1-\\2/g' )\n\n\tif [ \"$SM_\" == \"$SC_\" ] ; then\n\
    \t\treturn \"$CLASS.$EXT\"\n\tfi\n\t\n\tcase \"$SM_\" in\n\t\ta)\n\t\t\tif [ \"\
    $SM_\" == ab ] ; then\n\t\t\t\treturn \"$CLASS.AbC\"\n\t\t\tfi\n\t\t\tif [ \"\
    $SM_\" == ba ] ; then\n\t\t\t\treturn \"$CLASS.BaC\"\n\t\t\tfi\n\t\t\tif [ \"\
    $SM_\" == ca ] ; then\n\t\t\t\treturn \"$CLASS.CaC\"\n\t\t\tfi\n\t\t\tif [ \"\
    $SM_\" == abc ] ; then\n\t\t\t\treturn \"$CLASS.AbCc\"\n\t\t\tfi\n\t\t\tif [ \"\
    $SM_\" == ba ] ; then\n\t\t\t\treturn \"$CLASS.BaCc\"\n\t\t\tfi\n\t\t\tif [ \"\
    $SM_\" == ca ] ; then\n\t\t\t\treturn \"$CLASS.CaCc\"\n\t\t\tfi\n\t\t;;\n\t\t\
    b)\n\t\t\tif [ \"$SM_\" == ab ] ; then\n\t\t\t\treturn \"$CLASS.AbB\"\n\t\t\t\
    fi\n\t\t\tif [ \"$SM_\" == ba ] ; then\n\t\t\t\treturn \"$CLASS.BaB\"\n\t\t\t\
    fi\n\t\t\tif [ \"$SM_\" == ca ] ; then\n\t\t\t\treturn \"$CLASS.CaB\"\n\t\t\t\
    fi\n\t\t\tif [ \"$SM_\" == abc ] ; then\n\t\t\t\treturn \"$CLASS.AbBc\"\n\t\t\t\
    fi\n\t\t\tif [ \"$SM_\" == ba ] ; then\n\t\t\t\treturn \"$CLASS.BaBc\"\n\t\t\t\
    fi\n\t\t\tif [ \"$SM_\" == ca ] ; then\n\t\t\t\treturn \"$CLASS.CaBc\"\n\t\t\t\
    fi\n\t\t;;\n\t\tc)\n\t\t\tif [ \"$SM_\" == ab ] ; then\n\t\t\t\treturn \"$CLASS.AbC\"\
    \n\t\t\tfi\n\t\t\tif [ \"$SM_\n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptgilx05a.sh: line 106: unexpected EOF while looking for matching
    `"''

    /tmp/tmptgilx05a.sh: line 110: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASS_NAME=\"${1:?}\"\
    \n  local EXTENSIONS=\"${2:?}\"\n  # First we get the class name without the \"\
    _\"\n  CLASS_NAME=\"${CLASS_NAME//_/}\"\n  # Now we get the extensions by splitting\
    \ the space-separated list.\n  EXTENSIONS=\"${EXTENSIONS//,/ }\"\n  # Now we calculate\
    \ the strength of each extension\n  local SM_NUM=${#EXTENSIONS}\n  local CAP_NUM=${#CLASS_NAME}\n\
    \  local SM_CAP=0\n  local CAP_CAP=0\n  local SM_STRONG=\"\"\n  local CAP_STRONG=\"\
    \"\n  # Get the number of uppercase letters in the class name.\n  for (( i = 0;\
    \ i < CAP_NUM; i++ )); do\n    SM_CAP+=\"${CLASS_NAME:$i:1}\"\n  done\n  # Get\
    \ the number of lowercase letters in the class name.\n  for (( i = 0; i < CAP_NUM;\
    \ i++ )); do\n    CAP_CAP+=\"${CLASS_NAME:$i:1}\"\n  done\n  SM_CAP=\"${SM_CAP//\
    \ /}\"\n  CAP_CAP=\"${CAP_CAP// /}\"\n  # Get the strength for each extension.\n\
    \  local STRONG_CAP=0\n  for (( i = 0; i < CAP_NUM; i++ )); do\n    STRONG_CAP+=\"\
    ${CAP_CAP:$i:1}\"\n  done\n  STRONG_CAP=\"${STRONG_CAP// /}\"\n  for (( i = 0;\
    \ i < CAP_NUM; i++ )); do\n    local STRONG_SM=0\n    for (( j = 0; j < SM_NUM;\
    \ j++ )); do\n      if [[ \"${CAP_CAP:$i:1}\" == \"${EXTENSIONS:$j:1}\" ]]; then\n\
    \        STRONG_SM+=\"${SM_CAP:$j:1}\"\n      fi\n    done\n    local STRONG=\"\
    ${STRONG_CAP:$i:1}\"\n    if [[ ${STRONG_SM} -lt ${STRONG} ]]; then\n      STRONG=\"\
    ${STRONG_SM}\"\n    fi\n    local STRONG_EXT=\"${EXTENSIONS:$i:1}\"\n    local\
    \ STRONG_STRONG=\"${STRONG}${STRONG_EXT}\"\n    if [[ ${STRONG_STRONG} -lt ${STRONG}\
    \ ]]; then\n      STRONG_STRONG=\"${STRONG_STRONG}\"\n    fi\n    if [[ \"${STRONG}\"\
    \ != \"\" ]]; then\n      SM_STRONG=\"${SM_STRONG}${STRONG_STRONG}\"\n      CAP_STRONG=\"\
    ${CAP_STRONG}${STRONG_STRONG}\"\n    fi\n  done\n  SM_STRONG=\"${S\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpll68yy_h.sh: line 89: unexpected EOF while looking for matching
    `"''

    /tmp/tmpll68yy_h.sh: line 93: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    # Write your code here.\n\
    \    local classname=$1\n    local extensions=$2\n    local strongest=''\n   \
    \ local max=0\n    local idx=0\n    \n    for extension in $extensions\n    do\n\
    \        extension=\"${extension#*[a-z]}\"\n        extension=\"${extension%%[^A-Z]}${extension}\"\
    \n        extension=\"${extension//[[:space:]]/}\"\n        local cap=${extension//[a-z]/}\n\
    \        local sm=${extension//[A-Z]/}\n        \n        local strongest=\"${classname}.${extension}\"\
    \n        \n        if [ $cap -gt $sm ]\n        then\n            max=$cap\n\
    \            idx=$(( idx+1 ))\n        fi\n    done\n    \n    # Make sure that\
    \ there is only one extension with the max strength\n    [ ${idx} = 0 ] && return\
    \ 1\n    \n    # Keep the one with the highest strength first\n    local ext=${extensions[$idx]}\n\
    \    extensions[$idx]=$ext\n    extension=\"${ext#*[a-z]}\"\n    extension=\"\
    ${ext%%[^A-Z]}${extension}\"\n    extension=\"${extension//[[:space:]]/}\"\n \
    \   local cap=${extension//[a-z]/}\n    local sm=${extension//[A-Z]/}\n    \n\
    \    local strongest=\"${classname}.${extension}\"\n    \n    if [ $cap -gt $sm\
    \ ]\n    then\n        max=$cap\n        idx=$(( idx+1 ))\n    fi\n    \n    extensions[$idx]=$strongest\n\
    \    \n    # Return the result\n    echo ${extensions[*]}\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2ehm35_u.sh: line 39: [: ENEN: unary operator expected

    /tmp/tmp2ehm35_u.sh: line 39: [: NENE: integer expression expected

    /tmp/tmp2ehm35_u.sh: line 39: [: IGH8OKIGH8OK: integer expression expected

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class_name=\"$1\"\n\
    \tlocal extensions=\"$2\"\n\n\tlocal strongest_extension=\"\"\n\tlocal strongest_extension_strength=-1\n\
    \n\tfor extension in $extensions\n\tdo\n\t\textension=\"${extension// /$SLASH}\"\
    \n\t\textension=\"${extension// /-}\"\n\n\t\tlocal uppercase_count=0\n\t\tlocal\
    \ lowercase_count=0\n\n\t\tlocal i=0\n\t\tfor character in $extension\n\t\tdo\n\
    \t\t\ti=$((i+1))\n\t\t\tif [[ \"$character\" == \"A\" ]]\n\t\t\tthen\n\t\t\t\t\
    uppercase_count=$((uppercase_count+1))\n\t\t\telif [[ \"$character\" == \"B\"\
    \ ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\t\t\telif [[\
    \ \"$character\" == \"C\" ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\
    \t\t\telif [[ \"$character\" == \"D\" ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\
    \t\t\telif [[ \"$character\" == \"E\" ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\
    \t\t\telif [[ \"$character\" == \"F\" ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\
    \t\t\telif [[ \"$character\" == \"G\" ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\
    \t\t\telif [[ \"$character\" == \"H\" ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\
    \t\t\telif [[ \"$character\" == \"I\" ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\
    \t\t\telif [[ \"$character\" == \"J\" ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\
    \t\t\telif [[ \"$character\" == \"K\" ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\
    \t\t\telif [[ \"$character\" == \"L\" ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\
    \t\t\telif [[ \"$character\" == \"M\" ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\
    \t\t\telif [[ \"$character\" == \"N\" ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\
    \t\t\telif [[ \"$character\" == \"O\" ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\
    \t\t\telif [[ \"$character\" == \"P\" ]]\n\t\t\tthen\n\t\t\t\tuppercase_count=$((uppercase_count+1))\n\
    \t\t\telif \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu81b8n18.sh: line 89: syntax error near unexpected token `}''

    /tmp/tmpu81b8n18.sh: line 89: `}''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASS EXTENSIONS\n\
    \  CLASS=$1\n  EXTENSIONS=$2\n  local CAP SM STRENGTH\n  CAP=${CLASS//[A-Z]/}\n\
    \  SM=${CLASS//[a-z]/}\n  STRENGTH=$((${CAP} - ${SM}))\n  local FIRST_EXTENSION\
    \ FIRST_EXTENSION_EXTENSION COUNTER_EXTENSION\n  FIRST_EXTENSION=${EXTENSIONS}\n\
    \  FIRST_EXTENSION_EXTENSION=${FIRST_EXTENSION}\n  COUNTER_EXTENSION=0\n  while\
    \ [[ $COUNTER_EXTENSION <= ${#FIRST_EXTENSION_EXTENSION} ]]\n  do\n    if [[ $FIRST_EXTENSION_EXTENSION\
    \ == $COUNTER_EXTENSION ]]\n    then\n      FIRST_EXTENSION_EXTENSION=\".${FIRST_EXTENSION_EXTENSION}\"\
    \n      COUNTER_EXTENSION=$((COUNTER_EXTENSION + 1))\n    else\n      FIRST_EXTENSION_EXTENSION=\"\
    ${FIRST_EXTENSION_EXTENSION}.${FIRST_EXTENSION_EXTENSION}\"\n      COUNTER_EXTENSION=$((COUNTER_EXTENSION\
    \ + 1))\n    fi\n  done\n  echo \"$CLASS.$FIRST_EXTENSION_EXTENSION\"\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg31l_hmi.sh: line 33: syntax error in conditional expression

    /tmp/tmpg31l_hmi.sh: line 33: syntax error near `${#FIRST_EXTENSION_EXTENSION}''

    /tmp/tmpg31l_hmi.sh: line 33: `  while [[ $COUNTER_EXTENSION <= ${#FIRST_EXTENSION_EXTENSION}
    ]]''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\t# Convert the argument into\
    \ a class name and a set of extensions\n\t# separated by spaces.\n\tlocal CLASS_NAME=\"\
    $1\"\n\tlocal EXT=\"$2\"\n\tlocal STRONGEXT=\"\"\n\t\n\tCLASS=\"$(echo \"$EXT\"\
    \ | sed -e 's/[^A-Z]*//g')\"\n\tSTRONGEXT=\"$(echo \"$EXT\" | sed -e 's/[A-Z]*//g')\"\
    \n\n\t# Count uppercase letters and lowercase letters\n\tUPPER=$(echo \"$STRONGEXT\"\
    \ | wc -c)\n\tLOWER=$(echo \"$STRONGEXT\" | sed -e 's/[A-Z]*//g' | wc -c)\n\t\n\
    \t# Sort extensions by strength\n\tSORTED=$(echo \"$EXT\" | sort -k 2 -n | head\
    \ -1)\n\t\n\t# Get the strongest extension by sorting the list and taking the\
    \ first\n\t# element. Note that the extension list has duplicates and we only\
    \ use the first element of each duplicate.\n\tSTRONGEXT=\"$(echo \"$SORTED\" |\
    \ head -1)\"\n\t\n\t# Make sure the strongest extension is indeed a real extension\n\
    \tif [ \"$CLASS\" == \"\" ]; then\n\t\tCLASS=\"$STRONGEXT\"\n\tfi\n\t\n\treturn\
    \ \"$CLASS\"\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpww78rdxr.sh: line 47: return: ENNEIGHOK: numeric argument required

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    # Remove all non-alphanumeric\
    \ characters and convert to lowercase.\n    lower=$( echo \"$1\" | tr A-Z a-z\
    \ | sed 's/ //g' )\n    # Get the number of lowercase letters in the extension's\
    \ name.\n    lower=$( echo \"${lower}\" | wc -l )\n    # Get the number of uppercase\
    \ letters in the extension's name.\n    upper=$( echo \"${lower}\" | tr -cd [A-Z]\
    \ | wc -l )\n    # Get the number of consecutive uppercase letters in the extension's\
    \ name.\n    upper=$( echo \"${lower}\" | sed 's/.*\\([A-Z]\\)\\(.*\\)/\\1/g'\
    \ | wc -l )\n    # Calculate the strength of the extension.\n    lower=$(( upper\
    \ - lower ))\n    # If the extension is stronger than the one with the largest\
    \ strength,\n    # then just return $1, otherwise return $1 followed by the extension\n\
    \    # with the strongest strength.\n    if [ \"$lower\" -ge \"$upper\" ]\n  \
    \  then\n        echo \"$1\"\n    else\n        echo \"$1${lower}\"\n    fi\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class=$1\n  local extensions=$2\n\
    \  local max_strength\n  local extension_strength\n\n  max_strength=0\n  for extension\
    \ in ${extensions[@]}; do\n    extension_strength=$(echo $extension | awk '{print\
    \ toupper(substr($1,NF-1,1)) - toupper(substr($1,NF,1))}')\n    echo ${extension_strength}\n\
    \    if [[ ${extension_strength} -eq ${max_strength} ]]; then\n      max_strength=${extension_strength}\n\
    \      echo ${max_strength}\n    fi\n  done\n\n  if [[ ${max_strength} -eq 0 ]];\
    \ then\n    echo ${class}.UNKNOWN\n  else\n    echo ${class}.${max_strength}\n\
    \  fi\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local extension_strength=-1\n    local extension_name\n\
    \n    for extension_name in ${extensions[@]}\n    do\n        extension_strength=$(($extension_strength\
    \ + ${${class_name}//${extension_name}/}))\n    done\n\n    local result=\"\"\n\
    \    if [ \"$extension_strength\" -gt 0 ]\n    then\n        result=$(\"${class_name}\"\
    ).${extension_name}\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp97ma1e13.sh: line 29: $extension_strength + ${${class_name}//${extension_name}/}:
    bad substitution

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class_name extensions\
    \ strength extensions_array best_extension best_extension_array\n\tclass_name=$1\n\
    \textensions=$2\n\n\t# Split up the list of extensions by the space\n\textensions_array=(${extensions//./\
    \ })\n\n\t# Go through the list of extensions\n\tfor extension in \"${extensions_array[@]}\"\
    ; do\n\t\tstrength=$((${#extension}-1 ))\n\t\tif [ \"$strength\" -lt 0 ]; then\n\
    \t\t\techo \"$class_name.$extension\"\n\t\t\treturn\n\t\tfi\n\t\tbest_extension=$extension\n\
    \t\tbest_extension_array=( ${best_extension//./} )\n\t\tstrength=$((${#best_extension_array[@]}-1\
    \ ))\n\t\tif [ \"$strength\" -lt 0 ]; then\n\t\t\techo \"$class_name.$best_extension\"\
    \n\t\t\treturn\n\t\tfi\n\tdone\n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tCAP=\"${1//[^A-Z]/}\"\n\t\
    SM=\"${CAP//[A-Z]/}\"\n\tSM=$(( SM - 1 ))\n\tSM=$(( $SM + 1))\n\tSM=${SM//[^0-9]/}\n\
    \techo \"$2.$CAP$SM\"\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local ext=\"$2\";\n  local\
    \ cap=\"$(echo $ext | tr '[A-Z]' '[AC]' | wc | awk '{print $1}')\";\n  local sm=\"\
    $(echo $ext | tr '[a-z]' '[ac]' | wc | awk '{print $1}')\";\n  local strength=\"\
    $(( $cap - $sm ))\";\n  local strongest=\"$(echo $ext | awk -F '.' '{print $1}'\
    \ | sort -g | tail -1)\";\n  echo $strongest.${strongest}.$ext;\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local CLASS_NAME=$1\n \
    \   local EXTENSTIONS=$2\n    local SONIC=$3\n    local STRONGEST_EXTENSION=\"\
    \"\n    local EXTENSTION_LENGTH=0\n    local SONIC_LENGTH=0\n    local SONIC_STRENGTH=0\n\
    \n    # Step 1: Count the number of CAP-SM pairs in SONIC. SONIC_LENGTH is the\
    \ number of \n    # CAP-SM pairs in SONIC and EXTENSTION_LENGTH is the number\
    \ of extensions \n    # whose names have CAP-SM.\n    for EXTENSTION in ${EXTENSTIONS};\
    \ do\n        [[ \"$EXTENSTION\" =~ ^[A-Z]*$ ]] || continue\n        [[ \"$EXTENSTION\"\
    \ =~ ^[A-Z]+[A-Z]+ ]] || continue\n        SONIC_LENGTH=$((SONIC_LENGTH+1))\n\
    \    done\n\n    # Step 2: Count the number of lowercase letters in SONIC. SONIC_LENGTH\
    \ is the number of \n    # lowercase letters in SONIC and EXTENSTION_LENGTH is\
    \ the number of extensions \n    # whose names have lowercase letters.\n    for\
    \ EXTENSTION in ${EXTENSTIONS}; do\n        [[ \"$EXTENSTION\" =~ ^[a-z]*$ ]]\
    \ || continue\n        SONIC_LENGTH=$((SONIC_LENGTH+1))\n    done\n\n    # Step\
    \ 3: Count the number of CAP-SM pairs in the extensions. SONIC_LENGTH is the number\
    \ of \n    # CAP-SM pairs in SONIC and EXTENSTION_LENGTH is the number of extensions\
    \ \n    # whose names have CAP-SM.\n    for EXTENSTION in ${EXTENSTIONS}; do\n\
    \        [[ \"$EXTENSTION\" =~ ^[A-Z]*$ ]] || continue\n        [[ \"$EXTENSTION\"\
    \ =~ ^[A-Z]+[A-Z]+ ]] || continue\n        [[ \"$EXTENSTION\" =~ ^[A-Z]+[A-Z]+[A-Z]+\
    \ ]] || continue\n        EXTENSTION_LENGTH=$((EXTENSTION_LENGTH+1))\n    done\n\
    \n    # Step 4: Count the number of lowercase letters in the extensions. SONIC_LENGTH\
    \ is the number of \n    # lowercase letters in SONIC and EXTENSTION_LENGTH is\
    \ the number of extensions \n    # whose names have lowercase letters.\n    for\
    \ EXTENSTION in ${EXTENSTIONS}; do\n        [[ \"$EXTENSTION\" =~ ^[a-z]*$ ]]\
    \ || continue\n        [[\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcci_s2i0.sh: line 63: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpcci_s2i0.sh: line 63: syntax error near `}''

    /tmp/tmpcci_s2i0.sh: line 63: `}''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n local extension_list extension\
    \ strength cap sm i j\n extension_list=$2 \n extension=`echo $extension_list |\
    \ sed 's/[A-Z]//g'`\n sm=`echo $extension_list | sed 's/[a-z]//g'`\n cap=`echo\
    \ $extension_list | sed 's/[A-Z][a-z]//g'`\n strength=-1\n i=1\n j=1\n while [\
    \ $i -le $sm ]\n do\n   strength=`echo $cap | sed 's/\\(..\\)/\\1*/'`\n   j=$((j\
    \ + 1))\n   i=$((i + 1))\n done\n strength=`echo $((cap - $j)) | bc -l`\n echo\
    \ \"$extension.$(( strength + 1 ))\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpccbcwnfu.sh: line 30: [: EN: integer expression expected

    /tmp/tmpccbcwnfu.sh: line 36: tEN niNE eIG8O: syntax error in expression (error
    token is "niNE eIG8O")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal ext=(\"${!2}\")\n\t\
    local n1=$(echo $ext | sed 's/ /\\n/g' | sort | uniq | wc -l)\n\tlocal n2=$(echo\
    \ $ext | sed 's/ /\\n/g' | sort | uniq -c | wc -l)\n\tlocal n3=$(echo $ext | sed\
    \ 's/ /\\n/g' | sort -n | uniq -c | wc -l)\n\tlet \"n3=$n3-$n2\"\n\techo \"${1}.${ext[0]}\"\
    \n\tif [ $n3 -gt 0 ]\n\tthen\n\t\techo $(echo $ext | sed \"s/[^.]*.//g\" | sort\
    \ | uniq -c | sort -n | tail -1)\n\telse\n\t\techo $(echo $ext | sed \"s/[^.]*.//g\"\
    \ | sort | uniq -c | sort -rn | head -1)\n\tfi\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplrpzqhyz.sh: line 22: tEN niNE eIGHt8OKe: invalid variable name

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local STRONGEST_EXTENSION\n\
    \  local EXT\n  local STRONGEXT\n\n  STRONGEST_EXTENSION=\"${1}\"\n  EXT=\"${2}\"\
    \n\n  STRONGEXT=\"\"\n  for EX in \"${EXT}\"; do\n    STRONGEXT=\"${STRONGEXT}${EX}\"\
    .\"${CAP[${EX}-1]}${SM[${EX}-1]}\"\n  done\n\n  echo \"${STRONGEST_EXTENSION}.${STRONGEXT}\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpskfv8hb4.sh: line 31: tEN niNE eIGHt8OKe-1: syntax error in expression
    (error token is "niNE eIGHt8OKe-1")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local CLASS_NAME=\"$1\"\
    \n    local EXTS=\"$2\"\n    local STRONG=0\n    local NEXT_EXT\n    local STRONG_CHARACTERS\n\
    \    local C\n    local CHAR\n\n    for C in \"${EXTS[@]}\"; do\n        CHAR=\"\
    ${C:0:1}\"\n        STRONG_CHARACTERS=\"${CHAR,,}\"\n        STRONG=\"${STRONG}${STRONG_CHARACTERS,,}\"\
    \n        if [[ \"${CHAR}\" == \"$CHAR\" ]]; then\n            NEXT_EXT=\"${C}\"\
    \n        fi\n    done\n\n    if [[ $STRONG > -1 ]]; then\n        echo \"${CLASS_NAME}.${NEXT_EXT}\"\
    \n    else\n        echo \"${CLASS_NAME}\"\n    fi\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal ClassName ExtensionNames\
    \ ExtensionStrength\n\t# Strip out the \"class\" portion of the class name\n\t\
    ClassName=`echo $1 | cut -d. -f1 | sed 's/ /\\\\ /g'`\n\tExtensionNames=`echo\
    \ $2 | tr \" \" \"\\\\ \" | sed 's/ /\\\\ /g'`\n\tExtensionStrength=`echo $2 |\
    \ tr '[A-Z]' '[A-Z]-[a-z]' | sed 's/ /\\\\ /g'`\n\tlocal ExtensionName\n\tlocal\
    \ ExtensionStrengthIndex\n\t# Iterate through all of the extensions and find the\
    \ one with the strongest strength\n\tfor ExtensionName in $ExtensionNames; do\n\
    \t\tExtensionStrengthIndex=$((ExtensionStrengthIndex+1))\n\tdone\n\tExtensionStrengthIndex=$((ExtensionStrengthIndex-1))\n\
    \techo $ClassName.$ExtensionNames[$ExtensionStrengthIndex].$ExtensionNames[$ExtensionStrengthIndex]\n\
    }\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'tr: range-endpoints of '']-['' are in reverse collating sequence order

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASS=$1\n  local EXT=$2\n\
    \  local CAP=${EXT//[[:upper:]]/}\n  local SM=${EXT//[[:lower:]]/}\n  local STRONGEST=\"\
    \"\n\n  for i in $(echo $EXT); do\n    if [[ $CAP -ne ${i//[[:upper:]]/} ]]; then\n\
    \      CAP=$CAP\n    elif [[ $SM -ne ${i//[[:lower:]]/} ]]; then\n      SM=$SM\n\
    \    else\n      CAP=$((CAP - SM))\n    fi\n  done\n  for i in $(echo $EXT); do\n\
    \    if [[ $CAP -ne ${i//[[:upper:]]/} ]]; then\n      CAP=$CAP\n    elif [[ $SM\
    \ -ne ${i//[[:lower:]]/} ]]; then\n      SM=$SM\n    else\n      CAP=$((CAP +\
    \ SM))\n    fi\n  done\n\n  if [[ $CAP -ne $SM ]]; then\n    STRONGEST=$CLASS${CAP}\n\
    \  else\n    STRONGEST=$CLASS${SM}\n  fi\n\n  echo $STRONGEST\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1cyeysvv.sh: line 29: [[: t ni et8e: syntax error in expression
    (error token is "ni et8e")

    /tmp/tmp1cyeysvv.sh: line 31: [[: EN NE IGH8OK: syntax error in expression (error
    token is "NE IGH8OK")

    /tmp/tmp1cyeysvv.sh: line 34: t ni et8e: syntax error in expression (error token
    is "ni et8e")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n  \n  local strongest_extension=\"$(echo $extensions | sort -n\
    \ | tail -1)\"\n  local class_name_length=${#class_name}\n  local class_name_with_extension=\"\
    ${class_name%%$strongest_extension}\"\n  local class_name_with_extension_length=${#class_name_with_extension}\n\
    \  local strongest_extension_length=${#strongest_extension}\n  \n  if [ \"$class_name_length\"\
    \ -lt \"$strongest_extension_length\" ]; then\n    echo \"$class_name\"\n  else\n\
    \    local uppercase_letters=\"\"\n    local lowercase_letters=\"\"\n    for ((\
    \ i=0; i<strongest_extension_length; i++ )); do\n      uppercase_letters=\"${uppercase_letters}${strongest_extension:$i:1}\"\
    \n      lowercase_letters=\"${lowercase_letters}${strongest_extension:$i:1}\"\n\
    \    done\n    local strength=-1\n    if (( class_name_length < strongest_extension_length\
    \ )); then\n      strength=$(( class_name_length - class_name_with_extension_length\
    \ ))\n    fi\n    local strength_part=\"$(( strength % 2 ))\"\n    local strength_part_length=${#strength_part}\n\
    \    local strongest_extension_strength_part=\"${strongest_extension:$strongest_extension_length:$strength_part_length}\"\
    \n    \n    lowercase_letters=\"$lowercase_letters\"\n    uppercase_letters=\"\
    $uppercase_letters\"\n    \n    if [ \"$lowercase_letters\" != \"y\" ] || [ \"\
    $uppercase_letters\" != \"Y\" ]; then\n      local lowercase_letters_length=${#lowercase_letters}\n\
    \      lowercase_letters=\"$lowercase_letters\" # We are going to use these two\
    \ variables later\n      if [ \"$lowercase_letters_length\" -lt \"$strongest_extension_length\"\
    \ ]; then\n        lowercase_letters=\"y\"\n      fi\n    else\n      lowercase_letters=\"\
    Y\"\n    fi\n    if [ \"$uppercase_letters\" != \"Y\" ] && [ \"$lowercase_letters\"\
    \ != \"y\" ]; then\n      lowercase_letters=\"y\"\n    fi\n    if [ \"$lowercase_letters\"\
    \ != \"Y\" ] && [ \"$uppercase_letters\" != \"y\" ]; then\n      lowercase_letters=\"\
    y\"\n    fi\n    \n    if [ \"$uppercase_letters\" != \"y\" ] && [ \"$lowercase_letters\"\
    \ != \"y\" ]; then\n      lowercase_letters=\"y\"\n    fi\n    if [ \"$lowercase_letters\"\
    \ != \"Y\" ] && [ \"$uppercase_\n}\n\ncandidate() {\n    Strongest_Extension \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnsdm332f.sh: line 87: unexpected EOF while looking for matching
    `"''

    /tmp/tmpnsdm332f.sh: line 91: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$(echo $1 |\
    \ tr '[A-Z]' '[a-z]')\n    local extensions=$(echo $2 | tr ' ' '\\n')\n    local\
    \ strongest=${extensions[0]}\n    local index=0\n    for extension in $extensions;\
    \ do\n        local cap=${extension:0:1}\n        local sm=${extension:1}\n  \
    \      local strength=$(echo $cap - $sm | bc)\n        if [[ \"$index\" -lt \"\
    $#\" ]]; then\n            if [[ \"$strength\" -ge 0 ]]; then\n              \
    \  strongest=$extension\n                break\n            fi\n        else\n\
    \            if [[ \"$strength\" -gt 0 ]]; then\n                strongest=$extension\n\
    \                break\n            fi\n        fi\n        index=$((index+1))\n\
    \    done\n    echo \"$class.$strongest\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strongest=${extensions[${#extensions[*]} -\
    \ 1]}\n    local i=0\n    local j=0\n    for extension in ${extensions[*]}; do\n\
    \        case \"${extension%% *}\" in\n            \"${strongest}\" )\n      \
    \          i=${i}\n                ;;\n            \"${strongest^^}\" )\n    \
    \            j=${j}\n                ;;\n            *)\n                i=${i}\n\
    \                j=${j}\n                ;;\n        esac\n    done\n    ((i--))\
    \ \n    ((j--))\n    if [ \"${i}\" -eq 0 ]; then\n        echo \"${class_name}${extensions[0]}\"\
    \n    elif [ \"${j}\" -eq 0 ]; then\n        echo \"${class_name}${extensions[1]}\"\
    \n    else\n        echo \"${class_name}${extensions[${i}-1]}${extensions[${j}-1]}\"\
    \n    fi\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7wpmy822.sh: line 48: extensions: bad array subscript

    /tmp/tmp7wpmy822.sh: line 48: extensions: bad array subscript

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local cls=\"$1\"\n  local\
    \ exts=\"$2\"\n  local ext\n  local i\n  local max\n  local maxlen\n  local min\n\
    \  local minlen\n  local name\n  local n\n  local s\n  local x\n  local y\n  local\
    \ z\n  local strongest\n\n  for ((i=0; i<\"${#exts[@]}\"; i+=1)); do\n    ext=\"\
    ${exts[i]}\"\n    x=\"${ext:0:1}\"\n    y=\"${ext:1:1}\"\n    z=\"${ext:2:1}\"\
    \n    name=\"${cls}.${x}${y}${z}\"\n    if [[ ! \"$name\" = \"$cls\" ]]; then\n\
    \      name=\"${cls}.${y}${z}\"\n    fi\n    if [[ ! \"$name\" = \"$cls\" ]];\
    \ then\n      name=\"${cls}.${z}\"\n    fi\n    if [[ ! \"$name\" = \"$cls\" ]];\
    \ then\n      name=\"${cls}\"\n    fi\n    \n    if [[ \"$name\" = \"$cls\" ]];\
    \ then\n      strongest=\"${name}\"\n      continue\n    fi\n\n    name=${name%.*}\n\
    \    name=${name#*.}\n\n    if [[ ! \"$name\" = \"$cls\" ]]; then\n      if [[\
    \ ! \"$name\" = \"$cls\" ]]; then\n        if [[ ! \"$name\" = \"$cls\" ]]; then\n\
    \          if [[ ! \"$name\" = \"$cls\" ]]; then\n            if [[ ! \"$name\"\
    \ = \"$cls\" ]]; then\n              if [[ \"$name\" = \"$cls\" ]]; then\n   \
    \             strongest=\"${name}\"\n                continue \n             \
    \ fi\n            fi\n          fi\n        fi\n      fi\n    fi\n\n    if [[\
    \ \"$name\" = \"$cls\" ]]; then\n      strongest=\"${name}\"\n      continue\n\
    \    fi\n\n    if [[ \"$name\" = \"$cls\" ]]; then\n      strongest=\"${name}\"\
    \n      continue\n    fi\n\n    if [[ \"$name\" = \"$cls\" ]]; then\n      strongest=\"\
    ${name}\"\n      continue\n    fi\n\n    if [[ \"$name\" = \"$cls\" ]]; then\n\
    \      strongest=\"${name}\"\n      continue\n    fi\n\n    if [[ \"$name\" =\
    \ \"$cls\" ]]; then\n      strongest=\"${name}\"\n      continue\n    fi\n\n \
    \   if [[ \"$name\" = \"$cls\" ]]; then\n      strongest=\"${name}\"\n      continue\n\
    \    fi\n\n    if [[ \"$name\" = \"$cls\" ]]; then\n      strongest\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp654ufb7a.sh: line 109: syntax error near unexpected token `}''

    /tmp/tmp654ufb7a.sh: line 109: `}''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strongest_extension=\"\"\n    local ext_length=${#extensions[@]}\n\
    \    for ((i = 0; i < ${ext_length}; i++)); do\n        local ext_name=${extensions[i]}\n\
    \        local ext_cap=${ext_name:0:1}\n        local ext_sm=${ext_name:1}\n \
    \       local ext_sm=${ext_sm,,}\n        local ext_cap=${ext_cap,,}\n       \
    \ local strongest_extension_strength=0\n        local j=0\n        for ((j = 0;\
    \ j < ${#class_name}; j++)); do\n            local letter=${class_name:$j:1}\n\
    \            local letter_cap=${letter:0:1}\n            local letter_sm=${letter:1}\n\
    \            local letter_sm=${letter_sm,,}\n            local letter_cap=${letter_cap,,}\n\
    \            if [ ${letter_cap} -ge ${ext_cap} ]; then\n                if [ ${letter_sm}\
    \ -ge ${ext_sm} ]; then\n                    let strongest_extension_strength=${strongest_extension_strength}+1\n\
    \                else\n                    let strongest_extension_strength=${strongest_extension_strength}-1\n\
    \                fi\n            else\n                break\n            fi\n\
    \        done\n        if [ ${strongest_extension_strength} -eq 0 ]; then\n  \
    \          break\n        fi\n        ((strongest_extension_strength=strongest_extension_strength*${ext_cap}-${ext_sm}))\n\
    \    done\n    if [ ${strongest_extension_strength} -eq 0 ]; then\n        break\n\
    \    fi\n    echo $class_name${strongest_extension_strength}\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoxzejfs3.sh: line 40: [: w: integer expression expected

    /tmp/tmpoxzejfs3.sh: line 56: break: only meaningful in a `for'', `while'', or
    `until'' loop

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class=\"$1\"\n\tlocal\
    \ extensions=$2\n\tlocal strength=0\n\tlocal i=0\n\tlocal extension_strongest=\"\
    none\"\n\tlocal extension_next=\"none\"\n\tlocal extension_last=\"none\"\n\tlocal\
    \ extension_last_index=0\n\tlocal extension_index=0\n\tlocal extension_length=${#extensions[@]}\n\
    \tlocal extension_char\n\tlocal extension_last_char\n\tlocal extension_last_index\n\
    \n\techo \"${class}\" | awk '{for(i=1;i<=NF;i++){if($i==\"'\"${extensions[extension_index]}\"\
    '\"){strength=strength+1}}}'\n\textension_strongest=${extensions[extension_index]}\n\
    \n\textension_next=${extensions[(extension_index+1)]}\n\textension_last=${extensions[(extension_index+2)]}\n\
    \n\textension_length=${#extension_strongest}\n\textension_char=$extension_strongest\n\
    \textension_last_char=$extension_last\n\textension_last_index=$extension_length\n\
    \textension_index=$((extension_index+1))\n\twhile [[ ${extension_last_index} -gt\
    \ ${extension_index} ]]; do\n\t\textension_last_char=${extensions[(extension_last_index-1)]}\n\
    \t\textension_last_index=$((extension_last_index-1))\n\tdone\n\n\textension_char=${extension_strongest}\n\
    \textension_last_char=${extension_last}\n\textension_last_index=$((extension_last_index+1))\n\
    \twhile [[ ${extension_last_index} -gt ${extension_index} ]]; do\n\t\textension_char=${extensions[(extension_index-1)]}\n\
    \t\textension_last_index=$((extension_index-1))\n\tdone\n\n\techo \"${class}.${extension_strongest}\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal class_name\n\tlocal\
    \ extensions=($2)\n\n\tlocal STRONGEST_EXTENSION_NAME_TEMPLATE=\"%2s.%3s\"\n\t\
    local STRONGEST_EXTENSION_NAME\n\tlocal STRONGEST_EXTENSION_INDEX\n\n\tlocal extension_strength\n\
    \n\t# Initialize variables\n\tclass_name=$1\n\textension_strength=-1\n\n\tfor\
    \ extension in ${extensions[@]}; do\n\t\tlocal extension_class_name\n\t\tlocal\
    \ extension_length\n\t\tlocal extension_strength\n\n\t\textension_class_name=${extension%%\
    \ *}\n\t\textension_length=${#extension_class_name}\n\t\textension_strength=$((extension_length\
    \ / class_name))\n\n\t\tif [[ ${extension_strength} > ${extension_strength} ]];\
    \ then\n\t\t\tSTRONGEST_EXTENSION_INDEX=${#extension_strength}\n\t\t\tSTRONGEST_EXTENSION_NAME=${extension_class_name}\n\
    \t\tfi\n\tdone\n\n\tif [[ ${STRONGEST_EXTENSION_INDEX} == ${#extension_strength}\
    \ ]]; then\n\t\tSTRONGEST_EXTENSION_NAME=${extension_strength}\n\tfi\n\n\techo\
    \ \"${class_name}${STRONGEST_EXTENSION_NAME}\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn9wan9w_.sh: line 42: extension_length / class_name: division by
    0 (error token is "class_name")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local STRONGEST_EXTENSION=`echo\
    \ $1 | awk '{\n    for (i=1;i<=NF;i++) {\n      a = toupper($i)\n      b = tolower($i)\n\
    \      c = length(a)\n      d = length(b)\n      printf \"%.\"$(( c > d ? c -\
    \ d : d - c))\"s%s \", a, i\n    }\n  }'`\n  echo $STRONGEST_EXTENSION\n}\n\n\
    candidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n\
    \    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\"\
    \ ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name\n  local\
    \ extension\n  local strength\n  local count\n\n  class_name=$1\n  extensions=$2\n\
    \n  echo \"$class_name $extensions[0]\"\n\n  count=0\n  for i in ${extensions[@]};\
    \ do\n    strength=$(echo \"$i\" | awk '{for (i=1;i<NF;i++) printf \"%s \", $i}')\n\
    \    if [ ! \"$i\" == \"$extensions[0]\" ]; then\n      strength=$(echo $strength\
    \ - $count) | bc\n    fi\n    if [ \"$strength\" == 0 ]; then\n      echo \"$class_name.$i\"\
    \n    fi\n    ((count++))\n  done\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=$2\n    local extension strength max min count\n    \n    for extension\
    \ in $extensions; do\n        strength=$(echo \"$extension\" | awk '{ print toupper($1)-tolower($1)\
    \ }')\n        max=$(echo $extension | awk '{ print length($0) }')\n        min=$((\
    \ $(expr $max + 1) ))\n        \n        count=$(expr $max \\* $min )\n      \
    \  if (( $strength > -1 )); then\n            echo $class.$extension\n       \
    \     return\n        fi\n    done\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_to_check class_extension\
    \ extension_list extension count count_letter \\\n      max_letters min_letters\
    \ strenght x\n\n  class_to_check=$1\n  extension_list=$2\n  count=0\n  count_letter=0\n\
    \  max_letters=0\n  min_letters=0\n  strenght=0\n\n  # Convert each extension\
    \ to lowercase to make them easier to compare\n  for x in $extension_list; do\n\
    \    extension=\"${x//./ }\"\n    count_letter=${#extension}\n    count=$((${count}+${count_letter}))\n\
    \    if [[ ${count_letter} -gt ${max_letters} ]]; then\n      max_letters=${count_letter}\n\
    \    fi\n    if [[ ${count_letter} -lt ${min_letters} ]]; then\n      min_letters=${count_letter}\n\
    \    fi\n  done\n\n  # Compute the strength per extension\n  for x in $extension_list;\
    \ do\n    extension=\"${x//./ }\"\n    count_letter=${#extension}\n    strenght=$((${strenght}+${count_letter})/${count})\n\
    \  done\n\n  # Sort the list by decreasing strength\n  strenght=$((${strenght}-1))\n\
    \  extension_list=$(awk '{print ('\"$extension_list\" | sort -n | sed \"s/^/'$class_to_check'.'\"\
    $strenght\"'/g\")}');\n\n  # Return the class with the strongest extension \n\
    \  for x in $extension_list; do\n    extension=\"${x//./ }\"\n    if [[ $extension\
    \ == ${class_to_check}* ]]; then\n      echo \"$class_to_check.$strenght\"\n \
    \     break;\n    fi\n  done\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc4m3z1ll.sh: line 55: unexpected EOF while looking for matching
    `''''

    /tmp/tmpc4m3z1ll.sh: line 85: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local ext=\"$2\"\n    local\
    \ strongest_ext=\"${ext,,}\" # convert to uppercase\n    strongest_ext=${strongest_ext//\
    \ /}\n    strongest_ext=${strongest_ext//-/ }\n    strongest_ext=$(echo \"$strongest_ext\"\
    \ | sed -e 's/[^[:lower:]]//g')\n    local count\n    strongest_ext=${strongest_ext,,}\
    \ # convert to lowercase\n    for (( i=${#strongest_ext} - 1 ; i >= 0 ; i-- ));\
    \ do\n        count=${strongest_ext:${i}}\n        if [[ $count -gt 0 ]]; then\n\
    \            strongest_ext=${strongest_ext:0:$i}\n            (( count-- ))\n\
    \        fi\n    done\n    echo \"$1.${strongest_ext}\"\n}\n\ncandidate() {\n\
    \    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\t# Split $2 into array of\
    \ strings based on space\n\tmapfile -t EXTS < <(echo \"$2\" | tr ' ' '\\n')\n\n\
    \t# Initialize max and min as floats\n\tMAX=-1\n\tMIN=100000000000\n\n\t# Traverse\
    \ the array\n\tfor e in \"${EXTS[@]}\"; do\n\t\t# If it's empty, skip the extension.\n\
    \t\t[ -z \"$e\" ] && continue\n\n\t\t# Capitalize\n\t\te1=${e^^}\n\n\t\t# If it's\
    \ empty, skip the extension.\n\t\t[ -z \"$e1\" ] && continue\n\n\t\t# Capitalize\n\
    \t\te2=${e1^^}\n\n\t\t# If it's empty, skip the extension.\n\t\t[ -z \"$e2\" ]\
    \ && continue\n\n\t\t# Calculate strength\n\t\tSTRONGEST=${#e1}\n\t\tSTRONGEST=${#e2}\n\
    \t\tSTRONGEST=${STRONGEST/#/}\n\n\t\t# Check if it's better than the previous\
    \ extension.\n\t\tif [ \"$STRONGEST\" -gt \"$MAX\" ]; then\n\t\t\t# New max so\
    \ replace the old one with this.\n\t\t\tMAX=$STRONGEST\n\t\tfi\n\t\tif [ \"$STRONGEST\"\
    \ -lt \"$MIN\" ]; then\n\t\t\t# New min so replace the old one with this.\n\t\t\
    \tMIN=$STRONGEST\n\t\tfi\n\n\t\t# Replace with extension\n\t\textension=\"${e%.*}\"\
    \n\n\t\t# Replace with extension\n\t\textension=\"${extension%%.*}\"\n\n\t\t#\
    \ Replace with extension\n\t\textension=\"${extension%%.*}\"\n\n\t\t# Replace\
    \ with extension\n\t\textension=\"${extension%%.*}\"\n\n\t\t# Replace with extension\n\
    \t\textension=\"${extension%%.*}\"\n\n\t\t# Replace with extension\n\t\textension=\"\
    ${extension%%.*}\"\n\n\t\t# Replace with extension\n\t\textension=\"${extension%%.*}\"\
    \n\n\t\t# Replace with extension\n\t\textension=\"${extension%%.*}\"\n\n\t\t#\
    \ Replace with extension\n\t\textension=\"${extension%%.*}\"\n\n\t\t# Replace\
    \ with extension\n\t\textension=\"${extension%%.*}\"\n\n\t\t# Replace with extension\n\
    \t\textension=\"${extension%%.*}\"\n\n\t\t# Replace with extension\n\t\textension=\"\
    ${extension%%.*}\"\n\n\t\t# Replace with extension\n\t\textension=\"${extension%%.*}\"\
    \n\n\t\t# Replace with extension\n\t\textension=\"${extension%%.*}\"\n\n\t\t#\
    \ Replace with extension\n\t\textension=\"${extension%%.*}\"\n\n\t\t# Replace\
    \ with extension\n\t\textension=\"${extension%%.*}\"\n\n\t\t# Replace with extension\n\
    \t\textension=\"${extension%%.*}\"\n\n\t\t# Replace with extension\n\t\textension=\"\
    ${extension%\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm7wfeo6o.sh: line 130: unexpected EOF while looking for matching
    `"''

    /tmp/tmpm7wfeo6o.sh: line 134: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=\"$1\"\
    \n    local extensions=$2\n    local strongest=\"${extensions[0]}\"\n    local\
    \ i=1\n    local strongest_index=0\n    local strongest_strength=0\n    local\
    \ total_strongest_strength=0\n\n    while [[ $i -lt ${#extensions[@]} ]]; do\n\
    \        local strongest_extension=\"${extensions[i]}\"\n\n        if [[ \"$strongest\"\
    \ == \"$strongest_extension\" ]]; then\n            strongest_index=$i\n     \
    \       strongest_strength=1\n        else\n            strongest_strength=$((strongest_strength\
    \ + 1))\n        fi\n        i=$((i + 1))\n\n        total_strongest_strength=$((total_strongest_strength\
    \ + strongest_strength))\n    done\n\n    local strongest_strength_string=$((strongest_strength\
    \ + 1))\n\n    if [ $strongest_strength_string -gt 1 ]; then\n        local strongest_extension=\"\
    ${extensions[strongest_index]}\"\n        local strongest_extension_strength=$((strongest_strength\
    \ - 1))\n\n        if [ $strongest_extension_strength -gt 1 ]; then\n        \
    \    local strongest_extension=\"${extensions[strongest_index-1]}\"\n\n      \
    \      if [ $strongest_extension_strength -gt 1 ]; then\n                local\
    \ strongest_extension=\"${extensions[strongest_index-2]}\"\n            fi\n \
    \       fi\n    fi\n\n    local strongest_extension=\"${extensions[strongest_index]}\"\
    \n\n    echo \"$class_name.$strongest_extension\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=$1\n    local\
    \ extensions=\"$2\"\n    # Extension names must be composed of CAP letters and\
    \ SM\n    # letters, where the SM is one letter (case-insensitive) per\n    #\
    \ extension, and the CAP is one letter per extension.\n    local SM=`echo $extensions\
    \ | sed -e \"s/ /\\\\\\\\ /g\"`\n    local CAP=`echo $extensions | sed -e \"s/\
    \ /\\\\\\\\ /g\" | sed -e \"s/^./\\L&/\" | sed -e \"s/.$//g\"`\n    local extensions_cap_and_sm=\"\
    \\\\$CAP\\\\$SM\"\n    echo \"$class.\\${$extensions_cap_and_sm}\"\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tset +o nounset\n\tset -o\
    \ errexit\n\n\tclass_name=$1\n\textensions=$2\n\n\tfor i in $(echo $extensions\
    \ | tr \" \" \"\\n\"); do\n\t\t[[ \"$i\" =~ [A-Z] ]] || continue\n\t\t[[ $(echo\
    \ $i | tr A-Z a-z | wc -c) -ge 3 ]] || continue\n\t\tstrength=$(echo $i | tr A-Z\
    \ a-z | sort | tail -n 1)\n\t\tstrongest_extension=$(echo $i | sed 's/\\([A-Z]\\\
    )/\\1_/g')\n\t\tif [[ \"$strength\" -eq \"$strongest_extension\" ]]; then\n\t\t\
    \techo $class_name\"_$strongest_extension\"\n\t\t\tbreak\n\t\tfi\n\tdone\n}\n\n\
    candidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n\
    \    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\"\
    \ ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n\n  local strongest=\"${extensions[*]}\"\n  local count=0\n \
    \ local last_count=0\n  local ext\n\n  for ext in $extensions\n  do\n    local\
    \ count=$((${#extensions[*]} - $count))\n    if [ \"$ext\" == \"$strongest\" ];\
    \ then\n      last_count=$count\n    fi\n  done\n  echo -n \"$class_name.${strongest}\"\
    \n  [ $last_count -gt 0 ] && echo -n \".${extensions[${#strongest}]}\"\n}\n\n\
    candidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n\
    \    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\"\
    \ ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_=$1\n    local\
    \ extensions_=$2\n    local strongest_extension_=$(echo \"$extensions_\" | \\\n\
    \    sort -n | \\\n    cut -d \".\" -f1 )\n\n    echo \"$class_.${strongest_extension_}\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local name\n  local extensions\
    \ strength\n  \n  # Extract the class name from the string passed as the first\
    \ argument\n  name=\"$1\" \n  names=( ${name//./ } )\n  name=\"${names[${#names}-1]}\"\
    \n\n  # Extract the extensions list from the string passed as the second argument\n\
    \  extensions=( ${2//./ } )\n\n  # Find the strongest extension\n  strength=0\n\
    \  for extension in \"${extensions[@]}\"; do\n    length=${#extension}\n    letters=${#${name^*}}\n\
    \    if [[ $length -gt $strength ]]; then\n      strength=$length\n      extension=\"\
    ${extension}\"\n    fi\n  done\n  \n  # Return the extension with the highest\
    \ strength\n  echo \"$name.$extension\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppogbm_8c.sh: line 37: ${#${name^*}}: bad substitution

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal -n Strongest_Extension_Var=$1\n\
    \tlocal -a Exts=($2)\n\tlocal Strongest_Extension_Strength=-1\n\tlocal Ext\n\t\
    local ExtStr\n\tlocal ExtStr2\n\tlocal Strongest\n\tlocal Strongest2\n\n\tfor\
    \ ExtStr in \"${Exts[@]}\"; do\n\t\t# Break up ExtStr into extension name and\
    \ extension's strength\n\t\tExt=\"${ExtStr%% *}\"\n\t\tExtStr2=${ExtStr#* }\n\t\
    \tExtStr2=\"${ExtStr2%% *}\"\n\n\t\t[ \"${ExtStr}\" = \"${ExtStr2}\" ] \\\n\t\t\
    \t&& { ExtStr=\"${ExtStr}\"; ExtStr2=\"NONE\"; ExtStr2=\"${ExtStr2}\"; }\n\t\t\
    # ExtStr2 could be a number: convert it to string\n\t\t[ \"$ExtStr2\" = \"NONE\"\
    \ ] && ExtStr2=\"${ExtStr2}\" \n\t\t# Get extension strength\n\t\tif [ \"$ExtStr2\"\
    \ != \"\" ]; then\n\t\t\tExtStr2=\"${ExtStr2% * }\"\n\t\t\tExtStr2=\"${ExtStr2//[0-9]/}\"\
    \n\t\t\tExtStr2=\"${ExtStr2//[a-z]/}\"\n\t\t\tExtStr2=\"${ExtStr2//[A-Z]/}\"\n\
    \t\t\tExtStr2=\"${ExtStr2//[,]/}\"\n\t\t\tExtStr2=\"${ExtStr2//[^A-Za-z]/}\"\n\
    \t\t\tExtStr2=\"${ExtStr2//[^A-Za-z0-9]/}\"\n\t\t\tExtStr2=\"${ExtStr2//[^a-zA-Z]/}\"\
    \n\t\t\tExtStr2=\"${ExtStr2//[^0-9a-z]/}\"\n\t\t\tExtStr2=\"${ExtStr2//[^0-9]/}\"\
    \n\t\t\tExtStr2=\"${ExtStr2//[^0-9]/}\"\n\t\t\tExtStr2=\"${ExtStr2//[^0-9]/}\"\
    \n\t\t\tExtStr2=\"${ExtStr2//[^a-z]/}\"\n\t\t\tExtStr2=\"${ExtStr2//[^A-Z]/}\"\
    \n\t\t\tExtStr2=\"${ExtStr2//[^A-Z]/}\"\n\t\t\tExtStr2=\"${ExtStr2//[^A-Z]/}\"\
    \n\t\t\tExtStr2=\"${ExtStr2//[^0-9]/}\"\n\t\t\tExtStr2=\"${ExtStr2//[^0-9]/}\"\
    \n\t\t\tExtStr2=\"${ExtStr2//[^A-Z]/}\"\n\t\t\tExtStr2=\"${ExtStr2//[^A-Z]/}\"\
    \n\t\t\tExtStr2=\"${ExtStr2//[^A-Z]/}\"\n\t\t\tExtStr2=\"${ExtStr2//[^0-9]/}\"\
    \n\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcox4_yy5.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmpcox4_yy5.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tlocal CLASS EXTENSIONS\n\t\
    CLASS=$1\n\tEXTENSIONS=$2\n\tfor i in $EXTENSIONS\n\tdo\n\t\tCAP=${i%?}\n\t\t\
    SM=${i#*[A-Z]}\n\t\tstrength=$(( CAP - SM))\n\t\tif [[ $strength -lt 0 ]]\n\t\t\
    then\n\t\t\tstrength=$(( SM - CAP))\n\t\tfi\n\t\tif [[ \"$strength\" -eq 0 ]]\n\
    \t\tthen\n\t\t\tcontinue\n\t\tfi\n\t\tcase \"$i\" in\n\t\t\t$CLASS.*\\.[A-Z][A-Z]*\
    \ )\n\t\t\t\techo -n \"$CLASS.$i\"\n\t\t\t\tbreak\n\t\t\t\t;;\n\t\t\t$CLASS.*\\\
    .[A-Z][a-z]* )\n\t\t\t\techo -n \"$CLASS.$i\"\n\t\t\t\tbreak\n\t\t\t\t;;\n\t\t\
    \t$CLASS.*\\.[a-z][A-Z]* )\n\t\t\t\techo -n \"$CLASS.$i\"\n\t\t\t\tbreak\n\t\t\
    \t\t;;\n\t\t\t$CLASS.*\\.[a-z][a-z]* )\n\t\t\t\techo -n \"$CLASS.$i\"\n\t\t\t\t\
    break\n\t\t\t\t;;\n\t\tesac\n\tdone\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n\tCLASS=\"${1}\"\n\tEXTENSIONS=\"\
    ${2}\"\n\n\tSORTED_EXTENSIONS=$(sort --field-separator=\" \" <<<\"$EXTENSIONS\"\
    )\n\t\n\tNUM_EXTENSIONS=$(echo \"$SORTED_EXTENSIONS\" | wc -w)\n\t\n\tSTRONGEST_EXTENSIONS=\"\
    \"\n\tSTRONGEST_EXTENSIONS_ARRAY=()\n\tSTRONGEST_EXTENSIONS_ARRAY_STRIPPED=()\n\
    \tSTRONGEST_EXTENSIONS_STR=\"-1\"\n\t\n\tSTRONGEST_EXTENSIONS_STR=\"$CLASS\"\n\
    \tSTRONGEST_EXTENSIONS_ARRAY_STRIPPED+=(\"$CLASS\")\n\t\n\tfor EXT in \"$SORTED_EXTENSIONS\"\
    ; do\n\t\tSTRONGEST_EXTENSIONS_ARRAY+=(\"$EXT\")\n\tdone\n\n\tfor i in $(seq 0\
    \ \"$NUM_EXTENSIONS-1\"); do\n\t\tSTRONGEST_EXTENSIONS_STR=\"${STRONGEST_EXTENSIONS_STR}.${STRONGEST_EXTENSIONS_ARRAY[$i]}\"\
    \n\t\tSTRONGEST_EXTENSIONS_ARRAY_STRIPPED+=(\"${STRONGEST_EXTENSIONS_ARRAY[$i]}\"\
    )\n\tdone\n\t\n\tSTRONGEST_EXTENSIONS_STR=\"${STRONGEST_EXTENSIONS_STR}.${STRONGEST_EXTENSIONS_ARRAY[$NUM_EXTENSIONS-1]}\"\
    \n\tSTRONGEST_EXTENSIONS_ARRAY_STRIPPED+=(\"${STRONGEST_EXTENSIONS_ARRAY[$NUM_EXTENSIONS-1]}\"\
    )\n\n\tfor EXT in \"$STRONGEST_EXTENSIONS_ARRAY_STRIPPED\"; do\n\t\tSTRONGEST_EXTENSIONS+=\"\
    .${EXT}\"\n\tdone\n\t\n\tSTRONGEST_EXTENSIONS=\"${STRONGEST_EXTENSIONS%?}\"\n\t\
    \n\tcase \"$STRONGEST_EXTENSIONS_STR\" in\n\t\t-1)\n\t\t\techo \"-1\"\n\t\t\t\
    ;;\n\t\t*\"$CLASS\"*)\n\t\t\techo \"$STRONGEST_EXTENSIONS\"\n\t\t\t;;\n\t\t*)\n\
    \t\t\techo \"${STRONGEST_EXTENSIONS_STR}\"\n\t\t\t;;\n\tesac\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: "seq: invalid floating point argument: \u20183-1\u2019\nTry 'seq --help'\
    \ for more information.\n"
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=\"$1\"\n\
    \  local extensions=\"$2\"\n  local strength=-1\n  local result\n  \n  for i in\
    \ $extensions\n  do\n    case \"${i:0:1}\" in\n      [[:upper:]]) \n        strength=${#i};;\n\
    \      [[:lower:]])\n        strength=${#i};;\n      *)\n        strength=${#i};;\n\
    \    esac\n  done\n  if [ \"$strength\" -le 0 ]; then \n    echo \"$class_name.${#extensions[*]}\"\
    \n  else\n    local max_strength=0\n    local max_index=0\n    for i in $extensions\n\
    \    do\n      if [ \"$strength\" -gt \"$max_strength\" ]\n      then\n      \
    \  max_strength=\"$strength\"\n        max_index=\"$i\"\n      fi\n    done\n\
    \    echo \"$class_name.$max_index\"\n  fi\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local strongest extensions\
    \ class\n  IFS=' ' read -a strongest <<< \"$2\"\n  class=\"${strongest[0]}\"\n\
    \  extensions=$(echo \"${strongest[@]}\" | tr ' ' '\\n' | sort -rn | head -1)\n\
    \  echo \"$class.${extensions}\" # Don't need quotes because of spaces within\
    \ names\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local classname extension_list\
    \ strength\n  local extension extension_length i\n  local strongest_extension\
    \ strongest_strength i\n\n  classname=$1\n  extension_list=$2\n\n  strongest_extension=null\n\
    \  strength=-1\n\n  # Make sure that extension_list is a space-separated list.\n\
    \  echo \"${extension_list}\" | tr -s ' ' '\\n' | sort -k 2 | tr '\\n' ' '\n\n\
    \  # Get the extensions' length.\n  extension_length=${#extension_list}\n\n  for\
    \ i in $(seq 0 ${extension_length}); do\n    extension=${extension_list:$i:1}\n\
    \    extension_length=$((${#extension} - 1))\n\n    # Iterate through each character\
    \ of the extension and check if it\n    # is a capital letter. Store the strongest\
    \ extension and its\n    # strength if it is.\n    for ((i=${#extension}-1; i>=0;\
    \ i--)); do\n      case \"${extension:$i:1}\" in\n        [A-Z]) strength=$((strength+1))\
    \ ;;\n      esac\n    done\n\n    # If we found a strongest extension then break\
    \ from loop. Else, \n    # increment the strength for next extension.\n    if\
    \ (( strength != -1 )); then\n      if (( strength < strongest_strength )); then\n\
    \        strongest_extension=extension\n        strongest_strength=strength\n\
    \      fi\n      break\n    fi\n  done\n\n  if (( strength == -1 )); then\n  \
    \  echo \"Error: No strongest extension found. Aborting.\"\n    return 1\n  fi\n\
    \n  # Return the classname, extension, and strongest_extension.\n  echo \"${classname}${strongest_extension}\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local classname=$1\n  \
    \  local extensions=$2\n    local strength=0\n    for extension in $extensions\n\
    \    do\n        local capital=${extension:0:1}\n        local lower=${extension:1}\n\
    \        local strongest=${classname}.${capital}${lower}\n        local strongest2=${classname}.${lower}${capital}\n\
    \        local strongest3=${classname}.${capital}${lower}${capital}\n        local\
    \ strongest4=${classname}.${capital}${lower}${lower}\n        if [[ ${strongest}\
    \ -lt ${strongest2} ]]; then\n            strength=${strongest}\n        fi\n\
    \        if [[ ${strongest2} -lt ${strongest3} ]]; then\n            strength=${strongest2}\n\
    \        fi\n        if [[ ${strongest3} -lt ${strongest4} ]]; then\n        \
    \    strength=${strongest3}\n        fi\n    done\n    echo \"$classname.$extensions[$((${#extensions[@]}\
    \ - 1))]\"\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_0dv_77d.sh: line 33: [[: Watashi.tEN: syntax error: invalid arithmetic
    operator (error token is ".tEN")

    /tmp/tmp_0dv_77d.sh: line 36: [[: Watashi.ENt: syntax error: invalid arithmetic
    operator (error token is ".ENt")

    /tmp/tmp_0dv_77d.sh: line 39: [[: Watashi.tENt: syntax error: invalid arithmetic
    operator (error token is ".tENt")

    /tmp/tmp_0dv_77d.sh: line 33: [[: Watashi.niNE: syntax error: invalid arithmetic
    operator (error token is ".niNE")

    /tmp/tmp_0dv_77d.sh: line 36: [[: Watashi.iNEn: syntax error: invalid arithmetic
    operator (error token is ".iNEn")

    /tmp/tmp_0dv_77d.sh: line 39: [[: Watashi.niNEn: syntax error: invalid arithmetic
    operator (error token is ".niNEn")

    /tmp/tmp_0dv_77d.sh: line 33: [[: Watashi.eIGHt8OKe: syntax error: invalid arithmetic
    operator (error token is ".eIGHt8OKe")

    /tmp/tmp_0dv_77d.sh: line 36: [[: Watashi.IGHt8OKee: syntax error: invalid arithmetic
    operator (error token is ".IGHt8OKee")

    /tmp/tmp_0dv_77d.sh: line 39: [[: Watashi.eIGHt8OKee: syntax error: invalid arithmetic
    operator (error token is ".eIGHt8OKee")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class=${1:?Not given}\n\
    \    local extensions=${2:?Not given}\n    local cap=0\n    local sm=0\n    local\
    \ strength\n    local i\n    for ((i=0; i < ${#extensions[@]}; i++)); do\n   \
    \     case ${extensions[i]} in \n            C*) cap++; \n            S*) sm++;\
    \ \n        esac\n    done\n    strength=$((cap-sm / 2))\n    echo \"$class.$((${#extensions[@]}))\"\
    \n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
    \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
    Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing\
    \ zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate\
    \ \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\"\
    \ \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\"\
    \ \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[\
    \ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n\
    \    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\"\
    \ \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps2ux7xu2.sh: line 31: syntax error near unexpected token `)''

    /tmp/tmps2ux7xu2.sh: line 31: `            S*) sm++; ''

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class_name=$1\n \
    \   local extensions=$2\n    local strongest_extension=\"\"\n    local first_extension=\"\
    \"\n    local class_strongest_extension=\"\"\n    local strongest_strength=0\n\
    \    local extension_length=0\n    local extension_strongest_strength=0\n\n  \
    \  while read -r line || [[ -n $line ]]; do\n        extension_length=$((${#line}/2))\n\
    \        extension_strongest_strength=$((${line:$extension_length-2}/${#line}))\n\
    \        if (( ${extension_strongest_strength} < 0 )) ; then\n            strongest_extension=\"\
    ${line}\"\n        fi\n    done <<< \"$extensions\"\n\n    local extension_found=0\n\
    \    while read -r line || [[ -n $line ]]; do\n        extension_length=$((${#line}/2))\n\
    \        extension_strongest_strength=$((${line:$extension_length-2}/${#line}))\n\
    \        if (( ${extension_strongest_strength} > 0 )) ; then\n            extension_found=1\n\
    \        fi\n        if (( ${extension_strongest_strength} > strongest_strength\
    \ )) ; then\n            strongest_extension=\"${line}\"\n        fi\n    done\
    \ <<< \"$extensions\"\n\n    if [ $extension_found -eq 0 ]; then\n        strongest_strength=0\n\
    \    fi\n\n    local index=0\n    while read -r line || [[ -n $line ]]; do\n \
    \       extension_length=$((${#line}/2))\n        extension_strongest_strength=$((${line:$extension_length-2}/${#line}))\n\
    \        if (( ${extension_strongest_strength} > 0 )) ; then\n            first_extension=\"\
    ${line}\"\n        fi\n        index=$((index+1))\n    done <<< \"$extensions\"\
    \n\n    if [ $strongest_strength -eq 0 ]; then\n        echo \"$class_name\"\n\
    \    else\n        echo \"$class_name.$strongest_extension\"\n    fi\n}\n\ncandidate()\
    \ {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate\
    \ \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n\
    \    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\"\
    ) = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\"\
    ) = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\"\
    \ ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\")\
    \ = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW\
    \ Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb 91245\")\
    \ = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4lhelvws.sh: line 33: E eIGHt8OKe/18: syntax error in expression
    (error token is "eIGHt8OKe/18")

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local CLASS EXTS\n  CLASS=$1\n\
    \  EXTS=$2\n  \n  local SM_EXTS\n  SM_EXTS=\"$(echo $EXTS | sed 's/[^a-z]//g'\
    \ | sed 's/ //g' | sort | uniq -c)\"\n  \n  if [ \"$SM_EXTS\" == \"\" ]; then\
    \ \n    echo \"Could not find any extension that satisfies the strength requirement.\"\
    \n  else\n    local CAP_EXTS\n    CAP_EXTS=\"$(echo $SM_EXTS | sed 's/ //g' |\
    \ sort | uniq -c)\"\n    local CAP\n    CAP=$(echo \"$CAP_EXTS\" | head -1)\n\
    \    local SM\n    SM=$(echo \"$CAP_EXTS\" | head -2)\n    local STRONGEST_EXTENSION\n\
    \    STRONGEST_EXTENSION=\"$CLASS.$CAP\"\n    for i in $(seq $SM) ; do\n     \
    \ STRONGEST_EXTENSION=\"$STRONGEST_EXTENSION.$CAP_EXTS[$i]\"\n    done\n  fi\n\
    \  \n  echo $STRONGEST_EXTENSION\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "seq: invalid floating point argument: \u20181tniete\u2019\nTry 'seq --help'\
    \ for more information.\n"
  stdout: ''
  timestamp: 1660057682
- exit_code: 1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local ext=\"$2\"\n  local\
    \ tmpStrongestExtension=''\n  local extCount=0\n\n  for e in \"$ext\" ; do\n \
    \   case \"$e\" in\n      [A-Z]*)\n        extCount=$(( ${#e} - ${#e%%[A-Z]*}\
    \ ))\n        extCount=$(( ${extCount} + ${extCount} % 2 ))\n        extCount=$((\
    \ ${extCount} + 1 ))\n        tmpStrongestExtension+=\"_$e\"\n      ;;\n     \
    \ [a-z]*)\n        tmpStrongestExtension+=\"_$e\"\n      ;;\n      *)\n      \
    \  echo \"Invalid extension: $e\"\n        return 1\n      ;;\n    esac\n  done\n\
    \n  echo \"${1}.${tmpStrongestExtension}\"\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057682
- exit_code: 2
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local\
    \ extensions=$2\n\n  local strength count\n\n  count=$(echo \"$extensions\" |\
    \ awk -F . '{count+=$1} END {print count}')\n  strength=$(echo \"$extensions\"\
    \ | awk '{for(i=1;i<=NF;i++) if($i~/[A-Z]/'){strength+=$i} - $i}/[A-Z]/' | sort\
    \ -nr | head -n 1)\n\n  if [[ $strength -eq 0 ]]\n  then\n    echo \"$class_name\"\
    \n  else\n    echo \"$class_name.$strength\"\n  fi\n}\n\ncandidate() {\n    Strongest_Extension\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE\
    \ eIGHt8OKe\") = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani\
    \ NazeDa YEs.WeCaNe 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate\
    \ \"__YESIMHERE\" \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\"\
    \ ]]\n    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[\
    \ $(candidate \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate\
    \ \"YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\"\
    \ ]]\n    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx84_m2bg.sh: line 28: unexpected EOF while looking for matching
    `''''

    /tmp/tmpx84_m2bg.sh: line 56: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057682
- exit_code: -1
  program: "#!/bin/bash\n# You will be given the name of a class (a string) and a\
    \ list of extensions.\n# The extensions are to be used to load additional classes\
    \ to the class. The\n# strength of the extension is as follows: Let CAP be the\
    \ number of the uppercase\n# letters in the extension's name, and let SM be the\
    \ number of lowercase letters \n# in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n# You should find the strongest extension and return\
    \ a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are\
    \ two or more extensions with the same strength, you should\n# choose the one\
    \ that comes first in the list.\n# For example, if you are given \"Slices\" as\
    \ the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension\
    \ \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is\
    \ a space-separated list\nStrongest_Extension() {\n    local class extensions\n\
    \    IFS=\" \" read class extensions\n    local cap sm i\n    cap=$(echo \"${class}\"\
    \ | awk '{print toupper($0)}')\n    for ((i=0;i<${#extensions[@]};++i)); do\n\
    \        sm=$(echo \"${extensions[i]}\" | awk '{print tolower($0)}')\n       \
    \ if (( cap - sm < 0 )); then\n            echo \"${class}.${extensions[i]}\"\n\
    \        fi\n    done\n}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\"\
    ) = \"Watashi.eIGHt8OKe\" ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe\
    \ 32145tggg\") = \"Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\"\
    \ \"t eMptY nothing zeR00 NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n\
    \    [[ $(candidate \"K\" \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate\
    \ \"__HAHA\" \"Tab 123 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"\
    YameRore\" \"HhAas okIWILL123 WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n\
    \    [[ $(candidate \"finNNalLLly\" \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\"\
    \ ]]\n    [[ $(candidate \"_\" \"Bb 91245\") = \"_.Bb\" ]]\n    [[ $(candidate\
    \ \"Sp\" \"671235 Bb\") = \"Sp.671235\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=11 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=7 encoding='utf-8'>
  timestamp: 1660057687
