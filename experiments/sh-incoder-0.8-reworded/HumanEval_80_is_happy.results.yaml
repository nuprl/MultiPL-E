language: sh
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=\"\
    $1\"\n    local len\n    len=${#str}\n    if [ $len -gt 3 ] ; then\n        local\
    \ i\n        for ((i = 1; i <= len-3 ; i++)); do\n            local j\n      \
    \      for ((j=1 ; j <= 3 ; j++)); do\n                if [ \"${str:$((i-j)):1}\"\
    \ != \"a\" -a \"${str:$((i-j)):1}\" != \"e\" -a \"${str:$((i-j)):1}\" != \"i\"\
    \ -a \"${str:$((i-j)):1}\" != \"o\" -a \"${str:$((i-j)):1}\" != \"u\" ] ; then\n\
    \                    return 0\n                fi\n            done\n        done\n\
    \        return 1\n    else\n        return 0\n    fi\n}\n\ncandidate() {\n  \
    \  is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    [[ $1 =~\
    \ (.{3})(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph5uzzrcs.sh: line 21: unexpected EOF while looking for matching
    `)''

    /tmp/tmph5uzzrcs.sh: line 41: unexpected argument to conditional binary operator

    /tmp/tmph5uzzrcs.sh: line 41: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n   local line=$1\n\
    \   if [ \"$line\" == \"\" ]; then\n       return 1\n   fi\n   if [ \"$line\"\
    \ == \"_\" ] || [ \"$line\" == \"-\" ] || [ \"$line\" == \".\" ]; then\n     \
    \  return 0\n   fi\n   local flag=0\n   for i in `seq 1 $((${#line}-1))`; do\n\
    \       if [ \"$i\" -eq \"$((i-1))\" ]; then\n           flag=$((flag + 1))\n\
    \       else\n           if [ \"$line\" == \"$line$i\" ] || [ \"$line\" == \"\
    $line$((i-1))\" ]; then\n               flag=$((flag + 1))\n           else\n\
    \               flag=0\n           fi\n       fi\n   done\n   if [ $flag -ge 3\
    \ ]; then\n       return 0\n   else\n       return 1\n   fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    len=${#1}\n\
    \    if [ $len -ge 3 -a $(seq 0 $((len-3)) | xargs -n1 echo ${1//[a-z]/}) != $(seq\
    \ 0 $((len-3)) | xargs -n1 echo ${1//[a-z]/} | sort -u) ]\n    then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\"\
    \ ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyyst_wrg.sh: line 22: [: too many arguments

    '
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length counter\n  length=$(echo $string | wc -w)\n  if [ \"$length\"\
    \ -lt 3 ]; then\n    echo true\n  else\n    for counter in {1..3}; do\n      while\
    \ [[ \"$string\" =~ (.)\\1\\1 ]]; do\n        (( counter++ ))\n      done\n  \
    \    if [ $counter -eq 3 ]; then\n        echo false\n        break\n      else\n\
    \        echo true\n        break\n      fi\n    done\n  fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\tlocal input=\"\
    $1\"\n\tlocal length=\"${#input}\"\n\t\n\tif [ \"$length\" -lt \"3\" ] || [ \"\
    $length\" -gt \"3\" ]; then\n\t\techo \"false\"\n\t\treturn\n\tfi\n\t\n\tlocal\
    \ output\n\tfor (( i=0; i<$length-3; i++ )); do\n\t\tlocal char=\"${input:$i:1}\"\
    \n\t\tlocal nextChar=\"${input:$i+1:1}\"\n\t\tlocal nextNextChar=\"${input:$i+2:1}\"\
    \n\t\tif [ \"$char\" == \"$nextChar\" ] || [ \"$char\" == \"$nextNextChar\" ];\
    \ then\n\t\t\tcontinue\n\t\tfi\n\t\toutput=\"true\"\n\t\treturn\n\tdone\n\toutput=\"\
    false\"\n\treturn\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local input=\"\
    $1\"\n    if [[ ${#input} -lt 3 ]]\n    then\n        echo \"true\"\n    else\n\
    \        local arr=\"${input:0:3}\"\n        local other=\"${input:3:$(( ${#input}\
    \ - 1 ))}\"\n        local happy=true\n        for element in ${arr}\n       \
    \ do\n            if [[ \"$element\" == \"$other\" ]]\n            then\n    \
    \            happy=false\n                break\n            else\n          \
    \      happy=true\n                break\n            fi\n        done\n     \
    \   if $happy\n        then\n            echo \"true\"\n        else\n       \
    \     echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    ${1}\"\n  local len=${#string}\n\n  if [ \"$len\" -lt \"3\" ] || [ \"$len\" -gt\
    \ \"3\" ] ; then\n    return 0\n  fi\n\n  local i\n  local prev\n  for i in $(seq\
    \ 1 $len) ; do\n    prev=\"${string:$i:1}\"\n    if [ \"$prev\" == \"$string\"\
    \ ] || [ \"$prev\" == \"${string:$i:2}\" ] || [ \"$prev\" == \"${string:$i:1}\"\
    \ ] ; then\n      return 0\n    fi\n  done\n  return 1\n}\n\ncandidate() {\n \
    \   is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s=$1\n\
    \  \n  local len=${#s}\n  if [ ${len} -lt 3 ]; then\n    return 0\n  fi\n  \n\
    \  for ((i=0; i<${len}-3; i++)); do\n    local j=$((i+1))\n    local k=$((j+1))\n\
    \    \n    [[ ${s:$i:1} != ${s:$j:1} && ${s:$j:1} != ${s:$k:1} ]] && return 1\n\
    \  done\n  return 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    # Your code here\n    length=$(echo ${string} | wc -c)\n    if [ ${length}\
    \ -ge 3 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local __s\
    \ ; __s=\"${1}\" ; [[ \"$__s\" =~ ([[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]|[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]|[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]|[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]])\
    \ ]] || return 1\n  [[ ${#__s} -lt 3 ]] || return 0\n  [[ ${#__s} -eq ${#__s}\
    \ * 3 ]] || return 1\n  local __i ; local __x ; local __y\n  for __i in {0..${#__s}}\
    \ ; do\n    __x=${__s:$__i:3} ; [[ ! -z ${!__x} ]] || return 0\n    __y=${__s:$__i:$((__i\
    \ + 2))} ; [[ ! -z ${!__y} ]] || return 0\n  done\n  return 1\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcw05r84b.sh: line 23: syntax error in conditional expression

    /tmp/tmpcw05r84b.sh: line 23: syntax error near `*''

    /tmp/tmpcw05r84b.sh: line 23: `  [[ ${#__s} -eq ${#__s} * 3 ]] || return 1''

    '
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local IFS=\"\
    \ \"; echo \"$1\" | grep \"^[[:digit:]]\\{1,3\\}$\"\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local str=$1\n\
    \  local n\n  local count=1\n  local hapsh\n  hapsh=\"false\"\n  for i in $(seq\
    \ 1 $((${#str})-2)) ; do\n    if [[ \"${str[$i]}\" = \"a\" ]] || [[ \"${str[$i]}\"\
    \ = \"e\" ]] || [[ \"${str[$i]}\" = \"i\" ]] || [[ \"${str[$i]}\" = \"o\" ]] ||\
    \ [[ \"${str[$i]}\" = \"u\" ]] || [[ \"${str[$i]}\" = \"y\" ]] ; then\n      count=$((\
    \ $count + 1 ))\n      if (( count % 3 )); then\n        hapsh=\"true\"\n    \
    \  fi\n    fi\n  done\n  echo $hapsh\n}\n\ncandidate() {\n    is_happy \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppik0dkq0.sh: command substitution: line 26: syntax error near unexpected
    token `-2''

    /tmp/tmppik0dkq0.sh: command substitution: line 26: `(${#str})-2''

    /tmp/tmppik0dkq0.sh: command substitution: line 26: syntax error near unexpected
    token `-2''

    /tmp/tmppik0dkq0.sh: command substitution: line 26: `(${#str})-2''

    /tmp/tmppik0dkq0.sh: command substitution: line 26: syntax error near unexpected
    token `-2''

    /tmp/tmppik0dkq0.sh: command substitution: line 26: `(${#str})-2''

    '
  stdout: ''
  timestamp: 1660059260
- exit_code: -1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    # Your code goes here\n    local count=0\n    local n=0\n    local h=0\n\
    \    while [ \"${s:0:1}\" != \"$\" ]; do\n        s=${s//[^a-z]/}\n        if\
    \ [ $h -eq 3 ]; then\n            ((count++))\n            h=0\n        else\n\
    \            h=1\n        fi\n        n=$((n+1))\n    done\n    if [ $count -lt\
    \ 3 ]; then\n        echo false\n    else\n        echo true\n    fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=13 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=3 encoding='utf-8'>
  timestamp: 1660059265
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n   [[ \"${#1}\"\
    \ -ge 3 ]] && {\n       for (( i = 0; i < 3; i++ )); do\n           [[ \"${#1}\"\
    \ -ge 3 ]] && {\n               [[ \"${!1}\" == \"${!1:0:i}\" ]] && {\n      \
    \             [[ \"${!1}\" == \"${!1:1:i}\" ]] && {\n                       [[\
    \ \"${!1}\" == \"${!1:2:i}\" ]] && {\n                           break\n     \
    \                  }\n                   }\n               }\n           }\n \
    \      done\n   }\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \n    # Check if the string has three or more characters\n    if [ $# -eq 1 ];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s=$1\
    \ || return 1\n  [[ $s =~ ^.{3}[^a-z]*$ ]] && [[ $s =~ ^(.)\\1{3} ]] && echo \"\
    true\" || echo \"false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s=\"\
    $1\"\n  local length=${#s}\n  if [[ $length -lt 3 ]]; then\n    return $length\n\
    \  fi\n  for i in $(seq 0 $(($length - 3))); do\n    if (($((i + 1)) == $length)\
    \ || ($((i + 2)) == $length) || ($((i + 3)) == $length)) {\n      continue\n \
    \   fi\n    if (( $(echo \"$s[$i]\" = \"$s[$(($i + 1))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i + 2))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i + 3))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 1))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 2))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 3))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i + 1))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i + 2))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i + 3))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 1))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 2))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 3))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 2))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 1))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 3))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 2))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 1))]\" | grep -c -c 1)) ==\
    \ 0 \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvzuy741o.sh: line 27: syntax error near unexpected token `{''

    /tmp/tmpvzuy741o.sh: line 27: `    if (($((i + 1)) == $length) || ($((i + 2))
    == $length) || ($((i + 3)) == $length)) {''

    '
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local input=\"\
    $1\"\n  local len=0\n  local counter=1\n  local string=$input\n  local letters=$(echo\
    \ \"$string\" | tr '[:upper:]' '[:lower:]')\n  while [ -n \"$string\" ]\n  do\n\
    \    len=$((len+1))\n    string=${string#?}\n    if [ \"$len\" -ge 3 ] && [ \"\
    $counter\" -ge 3 ]\n    then\n      local chars=$(echo \"$string\" | tr '[:upper:]'\
    \ '[:lower:]')\n      local unique=${chars}\n      local result=\"\"\n      local\
    \ i=1\n      for char in $unique\n      do\n        if [ \"$i\" -eq \"$counter\"\
    \ ]\n        then\n          result=\"$result$char\"\n        else\n         \
    \ result=\"$result$char\"\n        fi\n        i=$((i+1))\n      done\n      echo\
    \ \"$result\"\n    fi\n    counter=$((counter+1))\n  done\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    if [[ $string =~ (^|(.))\\1\\1\\1$ ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\techo \"$1\"\
    \ | wc -m | bc -l | awk '{print $1 == \"3\"}'\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local count\n\n    count=$(( $(echo $string | awk '{print length($0)}') ))\n\
    \    if [[ $count -ge 3 ]]; then\n        local index\n        for (( i = 0; i\
    \ < 3; i++ )); do\n            index=$(echo $string | awk -v i=\"$i\" 'substr($0,i,1){print\
    \ i}')\n            if [[ $index == $(echo $string | awk -v i=\"$index\" 'substr($0,i,1){print\
    \ i}') ]]; then\n                echo \"true\"\n                break\n      \
    \      else\n                echo \"false\"\n            fi\n        done\n  \
    \  else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n local a=$1\
    \ b=$2 c=$3 d=$4 e=$5\n if [ \"$a\" == \"$b\" ] && [ \"$b\" == \"$c\" ] && [ \"\
    $c\" == \"$d\" ] && [ \"$d\" == \"$e\" ]\n then\n  return 0\n else\n  return 1\n\
    \ fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  if [ -z \"\
    $1\" ]\n    then\n      echo \"Usage: $0 s\" >&2\n      exit 1\n  fi\n  local\
    \ result=false\n  local length\n  local char\n  for length in {1..${#1}};\n  do\n\
    \      char=${1:0:$length}\n      if [[ ${#char} -eq 3 ]]\n      then\n      \
    \    chars=$char\n      fi\n      if [[ $chars != $char ]]\n      then\n     \
    \     result=true\n      fi\n  done\n  echo $result\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvvu3vwg_.sh: line 31: 1: {1..1}: syntax error: operand expected
    (error token is "{1..1}")

    '
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  local count=1\n  while [ $count -le $length ]\n\
    \  do\n    local letter=${string:$count:1}\n    local letter1=${string:$count+1}\n\
    \    local letter2=${string:$count+2}\n    local letter3=${string:$count+3}\n\
    \    if [ \"$letter\" = \"$letter1\" -o \"$letter\" = \"$letter2\" -o \"$letter\"\
    \ = \"$letter3\" ]\n    then\n      count=$(( count + 4 ))\n    else\n      count=$((\
    \ count + 1 ))\n    fi\n  done\n  if [ \"$count\" = \"$length\" ]\n  then\n  \
    \  echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local input=\"\
    $1\"\n\n    echo $(expr length \"$input\" ) >= 3 && $(\n        seq -f \"$input\"\
    \ -g 1 |\n        egrep -v '([a-zA-Z])\\1\\1\\1'\n    )\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'seq: invalid option -- ''g''

    Try ''seq --help'' for more information.

    '
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\tlocal a=\"\
    $1\"\n\tlocal b=\"$2\"\n\tlocal c=\"$3\"\n\n\tif [ ${#a} -lt 3 ] || [ -z \"$a\"\
    \ ] || [ -z \"$b\" ] || [ -z \"$c\" ]; then\n\t\techo \"empty string\"\n\telse\n\
    \t\tfor (( i=0; i<${#a}; i++ )); do\n\t\t\tif [[ ${b} == *${a}${a}${a}* ]]; then\n\
    \t\t\t\techo \"$1 is a hapsh\"\n\t\t\t\treturn\n\t\t\tfi\n\t\tdone\n\t\techo \"\
    $1 is not a hapsh\"\n\tfi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local -r\
    \ string=\"$1\"\n    local -n count=\"count\"\n    local -i i\n\n    # Remove\
    \ leading and trailing space\n    string=${string#\"${string%%[![:space:]]*}\"\
    }\n    string=${string%\"${string##*[![:space:]]}\"}\n\n    # Count each letter\n\
    \    for i in {1..${#string}}; do\n        count[\"${string[i]}\"${string[i+1]}\"\
    ${string[i+2]}\"${string[i+3]}\"]=${count[\"${string[i]}\"${string[i+1]}\"${string[i+2]}\"\
    ${string[i+3]}\"]+1}\n    done\n    \n    # Remove consecutive duplicates\n  \
    \  string=${string#${string%?}}\n\n    # Check if count is at least 3\n    if\
    \ [[ ${#string} -gt 3 ]]; then\n        local -r result=\"true\"\n        for\
    \ i in {1..3}; do\n            if [[ ${count[\"${string[i]}\"${string[i+1]}\"\
    ${string[i+2]}\"${string[i+3]}\"]} -ge 2 ]]; then\n                result=\"false\"\
    \n                break\n            fi\n        done\n    else\n        result=\"\
    false\"\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpt5j2z8s5.sh: line 65: unexpected EOF while looking for matching
    `"''

    /tmp/tmpt5j2z8s5.sh: line 69: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n local str=$1\n\
    \ echo $str\n if [[ ${#str} -eq 3 ]]; then\n  for (( i=1; i<${#str}; i++ )); do\n\
    \   if [[ $str[$i] != $str[$i-1] ]]; then\n    return 1\n   fi\n  done\n else\n\
    \  return 1\n fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local -r\
    \ string=$1\n  [[ -z \"${string}\" ]] && return 1\n  [[ \"${#string}\" -lt 3 ]]\
    \ && return 1\n  local count\n  count=1\n  local letter\n  for letter in $(seq\
    \ 1 ${#string}); do\n    (( count++ ))\n    if [[ \"${string}\" =~ \"(^|[[:space:]])${string::${letter}}(|[[:space:]]$)\"\
    \ ]]; then\n      (( count-- ))\n      if [[ \"${count}\" -eq 0 ]]; then\n   \
    \     echo \"true\"\n        return\n      fi\n    fi\n  done\n  echo \"false\"\
    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=$1\n\
    \    echo $str | grep -q \"^$str$\" && echo true || echo false\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    echo \"\
    $1\" | while read s;\n    do\n        echo \"${#s}\"\n        if [[ ${#s} -lt\
    \ 3 ]];\n        then\n            echo \"$1\" | while read i;\n            do\n\
    \                echo \"${i}\"\n                if [[ ${#i} -lt 3 ]];\n      \
    \          then\n                    echo \"$1\"\n                    exit 0\n\
    \                else\n                    echo \"$i\"\n                fi\n \
    \           done\n        fi\n    done\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: -1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    read -r\
    \ s\n    if [[ ${#s} -lt 3 ]]; then\n        echo \"false\"\n    else\n      \
    \  local i=1\n        while [[ ${#s} -gt 0 ]]; do\n            if [[ $(echo $s\
    \ | grep -c \"^${s:$i:1}$\") -gt 1 ]]; then\n                echo \"false\"\n\
    \                break\n            fi\n            (( i++ ))\n        done\n\
    \        if [[ $(echo $s | grep -c \"^${s:$i:1}$\") -eq 1 ]]; then\n         \
    \   echo \"true\"\n        else\n            echo \"false\"\n        fi\n    fi\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=21 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660059266
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local hapsh\n  if (( ${#string} < 3 )); then\n    return 1\n  fi\n  local\
    \ length=\"${#string}\"\n  local i=0\n  local j=1\n  hapsh=\"0\"\n  while [ $j\
    \ -le $length ]\n  do\n    hapsh=\"0\"\n    for (( i=0; i<3; i++ )); do\n    \
    \  local c=\"${string:$j:1}\"\n      if [[ ${#c} = \"3\" ]]; then\n        for\
    \ (( j+=1; j < $length; j++ )); do\n          if [[ \"$c\" == \"${string:j:1}\"\
    \ ]]; then\n            hapsh=1\n            break\n          fi\n        done\n\
    \      fi\n    done\n    if [ \"$hapsh\" -eq \"0\" ]; then\n      hapsh=\"1\"\n\
    \    fi\n    (( j++ ))\n  done\n  echo $hapsh\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  str=$1\n\
    \  length=${#str}\n  if [[ $length -gt 3 ]]; then\n    echo $length\n  else\n\
    \    echo 1\n  fi\n  echo $(( (length == 3 && $(echo \"$str\" | tr a-z A-Z | sort\
    \ | uniq -u | wc -l)) == 3 ))\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    for (( i = 0; i < len; i++ )); do\n        if [ ${s:$i:1}\
    \ != ${s:$i:1} ]; then\n            echo \"false\"\n            return 0\n   \
    \     fi\n    done\n    echo \"true\"\n    return 0\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local flag=0\n\n    if [[ $# -lt 1 || $1 =~ [^a-zA-Z0-9_] ]]; then\n    \
    \    echo \"$1 is not hapsh\"\n    else\n        if [[ ${#s} -ge 3 ]]; then\n\
    \            for i in {3..${#s}}; do\n                let \"flag+=($(i+3))\"\n\
    \            done\n        else\n            echo \"$1 is hapsh\"\n        fi\n\
    \        if [[ $flag -eq 0 ]]; then\n            echo \"$1 is hapsh\"\n      \
    \  else\n            echo \"$1 is unhapsh\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\tlocal s=$1\n\
    \tif [ $# -eq 0 ]\n\tthen\n\t\techo \"false\"\n\telse\n\t\tlet count1=0\n\t\t\
    let count2=0\n\t\tlet count3=0\n\t\tfor i in $(seq 0 3 ${#s})\n\t\tdo\n\t\t\t\
    if [[ ${s:i:1} == ${s:i:1} && ${s:i:2} == ${s:i:2} && ${s:i:3} == ${s:i:3} ]]\n\
    \t\t\tthen\n\t\t\t\tcount1=$((count1+1))\n\t\t\telif [[ ${s:i:1} == ${s:i:1} &&\
    \ ${s:i:2} == ${s:i:2} && ${s:i:3} != ${s:i:3} ]]\n\t\t\tthen\n\t\t\t\tcount2=$((count2+1))\n\
    \t\t\telif [[ ${s:i:1} == ${s:i:1} && ${s:i:2} != ${s:i:2} && ${s:i:3} == ${s:i:3}\
    \ ]]\n\t\t\tthen\n\t\t\t\tcount3=$((count3+1))\n\t\t\tfi\n\t\tdone\n\n\t\tif [[\
    \ $count1 > 0 && $count2 > 0 && $count3 > 0 ]]\n\t\tthen\n\t\t\techo \"true\"\n\
    \t\telse\n\t\t\techo \"false\"\n\t\tfi\n\tfi\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\tlocal string=\"\
    ${1}\"\n\tlocal happy=\"false\"\n\tlocal length=${#string}\n\tlet \"length=length/3-1\"\
    \n\t\n\tif [ \"${length}\" -lt \"0\" ]; then\n\t\techo \"${happy}\"\n\t\treturn\
    \ \"${happy}\"\n\tfi\n\t\n\tlocal counter=1\n\tlocal temp\n\tlocal i\n\twhile\
    \ [ \"${counter}\" -lt \"${length}\" ]; do\n\t\ttemp=\"${string:$counter:1}\"\n\
    \t\t\n\t\tif [[ \"${temp}\" == \"a\" ]] ; then\n\t\t\techo \"${happy}\"\n\t\t\t\
    return \"${happy}\"\n\t\tfi\n\t\t\n\t\t(( counter = counter + 1 ))\n\tdone\n\t\
    \n\techo \"${happy}\"\n\treturn \"${happy}\"\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7gsle5u8.sh: line 28: return: false: numeric argument required

    /tmp/tmp7gsle5u8.sh: line 28: return: false: numeric argument required

    /tmp/tmp7gsle5u8.sh: line 46: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  # Write your code here\n  \n  local length=${#string}\n  \n  if [[ $length\
    \ -lt 3 ]]; then\n    echo \"false\"\n  else\n    local count=0\n    local tmp=0\n\
    \    local happy=\"false\"\n    \n    for (( c=1; c<$length; c++ )); do\n    \
    \  if [[ $(echo \"${string:$c:1}\") == \"a\" || $(echo \"${string:$c:1}\") ==\
    \ \"e\" || $(echo \"${string:$c:1}\") == \"i\" || $(echo \"${string:$c:1}\") ==\
    \ \"o\" || $(echo \"${string:$c:1}\") == \"u\" || $(echo \"${string:$c:1}\") ==\
    \ \"y\" ]]; then\n        count=`expr $count + 1`\n        if [[ $count == 3 ]];\
    \ then\n          happy=\"true\"\n          break\n        fi\n      else\n  \
    \      tmp=`expr $tmp + 1`\n        if [[ $tmp == 3 ]]; then\n          happy=\"\
    true\"\n          break\n        fi\n      fi\n    done\n    \n    if [[ $happy\
    \ == \"false\" ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n\
    \    fi\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s='$1'\n\
    \  if [ -z \"$s\" ]\n  then\n    echo \"Error! Empty string passed\"\n    exit\
    \ 1\n  fi\n  local len=\"${#s}\"\n  if [ \"$len\" -lt 3 ]\n  then\n    echo \"\
    Error! String is too short or too long!\"\n    exit 1\n  fi\n  local count=1\n\
    \  while [ \"$count\" -lt \"$len\" ]\n  do\n    local c=${s:$count:1}\n    local\
    \ count2=1\n    while [ \"$count2\" -le \"3\" ]\n    do\n      local c2=${c:$count2:1}\n\
    \      local count3=1\n      while [ \"$count3\" -le \"3\" ]\n      do\n     \
    \   local c3=${c2:$count3:1}\n        if [ \"$c3\" -ne \"$c\" ]\n        then\n\
    \          echo \"false\"\n          exit 0\n        fi\n        local count3=$((count3+1))\n\
    \      done\n      local count2=$((count2+1))\n    done\n    local count=$((count+1))\n\
    \  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local S=\"\
    $1\"\n\n  [[ -z $S ]] && { echo \"Empty String\"; return 1; }\n  [[ -z \"`echo\
    \ $S | tr -dc '0-9' | sort -u | wc -l`\" ]] && { echo \"Empty String\"; return\
    \ 1; }\n  [[ \"`echo $S | tr -dc '0-9' | sort -u | wc -l`\" -lt 3 ]] && { echo\
    \ \"String is Hapsh\"; return 0; }\n  [[ \"`echo $S | tr -dc '0-9' | sort -u |\
    \ wc -l`\" -gt 3 ]] && { echo \"String is not Hapsh\"; return 1; }\n  [[ \"`echo\
    \ $S | tr -dc '0-9' | sort -u | wc -l`\" -eq 3 ]] && { echo \"String is Hapsh\"\
    ; return 0; }\n  [[ \"`echo $S | tr -dc '0-9' | sort -u | wc -l`\" -ne 3 ]] &&\
    \ { echo \"String is not Hapsh\"; return 1; }\n  [[ \"`echo $S | tr -dc '0-9'\
    \ | sort -u | wc -l`\" -lt 3 ]] && { echo \"String is Hapsh\"; return 0; }\n \
    \ [[ \"`echo $S | tr -dc '0-9' | sort -u | wc -l`\" -gt 3 ]] && { echo \"String\
    \ is not Hapsh\"; return 1; }\n  [[ \"`echo $S | tr -dc '0-9' | sort -u | wc -l`\"\
    \ -eq 3 ]] && { echo \"String is Hapsh\"; return 0; }\n  [[ \"`echo $S | tr -dc\
    \ '0-9' | sort -u | wc -l`\" -ne 3 ]] && { echo \"String is not Hapsh\"; return\
    \ 1; }\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    [[ $1 =~\
    \ (.{3,}([a-z])[a-z]([a-z])[a-z]) ]] && [[ $1 =~ (.{3,}([a-z])[a-z]([a-z])([a-z])([a-z])\
    \ ]] && [[ $1 =~ (.{3,}([a-z])[a-z]([a-z])([a-z])([a-z])([a-z]) ]]\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_wyg1gsv.sh: line 21: unexpected EOF while looking for matching
    `)''

    /tmp/tmp_wyg1gsv.sh: line 41: unexpected argument to conditional binary operator

    /tmp/tmp_wyg1gsv.sh: line 41: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local chars\n\
    \    local string=\"$1\"\n    local length=${#string}\n\n    if [ \"${length}\"\
    \ -lt \"3\" ]; then\n        return 0\n    fi\n\n    for ((i=0; i<length; i++));\
    \ do\n        chars=$(echo $string | sed -n \"$i{p}\")\n        if [[ -z $chars\
    \ ]]; then\n            continue\n        fi\n        chars=$(echo $chars | tr\
    \ a-z A-Z)\n        if [ \"$chars\" != \"AAA\" ] && [ \"$chars\" != \"BBB\" ]\
    \ && [ \"$chars\" != \"CCC\" ] && [ \"$chars\" != \"DDD\" ] && [ \"$chars\" !=\
    \ \"EEE\" ] && [ \"$chars\" != \"FFF\" ] && [ \"$chars\" != \"GGG\" ] && [ \"\
    $chars\" != \"HHH\" ] && [ \"$chars\" != \"III\" ] && [ \"$chars\" != \"JJJ\"\
    \ ] && [ \"$chars\" != \"KKK\" ] && [ \"$chars\" != \"LLL\" ] && [ \"$chars\"\
    \ != \"MMM\" ] && [ \"$chars\" != \"NNN\" ] && [ \"$chars\" != \"OOO\" ] && [\
    \ \"$chars\" != \"PPP\" ] && [ \"$chars\" != \"QQQ\" ] && [ \"$chars\" != \"RRR\"\
    \ ] && [ \"$chars\" != \"SSS\" ] && [ \"$chars\" != \"TTT\" ] && [ \"$chars\"\
    \ != \"UUU\" ] && [ \"$chars\" != \"VVV\" ] && [ \"$chars\" != \"WWW\" ] && [\
    \ \"$chars\" != \"XXXX\" ] && [ \"$chars\" != \"YYYY\" ] && [ \"$chars\" != \"\
    ZZZ\" ]; then\n            return 0\n        fi\n    done\n    return 1\n}\n\n\
    candidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    [[ $1 =~\
    \ $happy_regexp ]] && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n  \
    \  is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local STRING=$1\n\
    \    local result=\"True\"\n    if (( ${#STRING} < 3 )) ; then\n        result=\"\
    False\"\n    fi\n    for (( i = 3; i <= ${#STRING}; i=i+3 )); do\n        local\
    \ j=1\n        local temp=${STRING:$j:3}\n        while [ $j -le ${#temp} ]; do\n\
    \            (( ${#temp} != 1 && temp != ${temp#??} ))\n            (( j+=3 ))\n\
    \            temp=${STRING:$j:3}\n        done\n        result=$(expr ${result}\
    \ || expr ${result} == \"False\")\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    ${1}\"\n  echo $(echo \"${string}\" | awk '{print length}') == \"3\" &&\n  echo\
    \ \"${string}\" | awk '{\n    for (i=1; i <= NF; i++) {\n      print $i\n    }\n\
    \  }' | sort | uniq -c | grep -c \"${string}\"\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  strlen=$1\n\
    \  [[ \"$strlen\" -gt 3 ]] || return 1\n  \n  for i in $(seq 1 $(($strlen-3)));\
    \ do\n    var=$((i+3))\n    if [ ! \"$strlen\" -eq \"$var\" ]; then\n      break\n\
    \    else\n      [[ \"$strlen\" = \"$var\" ]] || return 1\n    fi\n  done\n  return\
    \ 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"\
    false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\"\
    ) = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate\
    \ \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    echo $1\
    \ | awk '{if(length($1)==3 && $1==\"a\" && $2==\"b\" && $3==\"c\" && $4==\"d\"\
    \ && $5==\"e\" && $6==\"f\") {return 1;} else return 0;}}'\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: {if(length($1)==3 && $1=="a" && $2=="b" && $3=="c" &&
    $4=="d" && $5=="e" && $6=="f") {return 1;} else return 0;}}

    awk: cmd. line:1:                                                                                       ^
    `return'' used outside function context

    awk: cmd. line:1: {if(length($1)==3 && $1=="a" && $2=="b" && $3=="c" && $4=="d"
    && $5=="e" && $6=="f") {return 1;} else return 0;}}

    awk: cmd. line:1:                                                                                                       ^
    `return'' used outside function context

    awk: cmd. line:1: {if(length($1)==3 && $1=="a" && $2=="b" && $3=="c" && $4=="d"
    && $5=="e" && $6=="f") {return 1;} else return 0;}}

    awk: cmd. line:1:                                                                                                                 ^
    syntax error

    '
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n   if [[ \"\
    $#\" -eq 1 ]]\n   then\n      echo \"$1\" | awk '{for(i=1;i<=NF;i++)if(length($i)>1\
    \ && $i ~ /[[:alpha:]]/){ for(j=1;j<=NF;j++)if((j-i) == 1 && $j!~ /[[:alpha:]]/){\
    \ print \"true\"}}}' | cut -d '=' -f 2\n   else\n      echo \"false\"\n   fi\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    # your\
    \ code goes here\n    s=\"${1:-}\"\n    if [[ \"${#s}\" -ne 3 ]]; then\n     \
    \   return 0;\n    fi\n    [[ \"${s:3}\" == \"${s:0:3}\" ]] && return 0 || return\
    \ 1\n    [[ \"${s:3:5}\" == \"${s:0:3}\" ]] && return 0 || return 1\n    [[ \"\
    ${s:3:5}\" == \"${s:1:3}\" ]] && return 0 || return 1\n    [[ \"${s:3:5}\" ==\
    \ \"${s:2:3}\" ]] && return 0 || return 1\n    [[ \"${s:3:5}\" == \"${s:3:3}\"\
    \ ]] && return 0 || return 1\n    [[ \"${s:3:5}\" == \"${s:4:3}\" ]] && return\
    \ 0 || return 1\n    [[ \"${s:3:5}\" == \"${s:5:3}\" ]] && return 0 || return\
    \ 1\n    [[ \"${s:3:5}\" == \"${s:6:3}\" ]] && return 0 || return 1\n    [[ \"\
    ${s:3:5}\" == \"${s:7:3}\" ]] && return 0 || return 1\n    [[ \"${s:3:5}\" ==\
    \ \"${s:8:3}\" ]] && return 0 || return 1\n    [[ \"${s:3:5}\" == \"${s:9:3}\"\
    \ ]] && return 0 || return 1\n    [[ \"${s:3:5}\" == \"${s:10:3}\" ]] && return\
    \ 0 || return 1\n    [[ \"${s:3:5}\" == \"${s:11:3}\" ]] && return 0 || return\
    \ 1\n    [[ \"${s:3:5}\" == \"${s:12:3}\" ]] && return 0 || return 1\n    [[ \"\
    ${s:3:5}\" == \"${s:13:3}\" ]] && return 0 || return 1\n    [[ \"${s:3:5}\" ==\
    \ \"${s:14:3}\" ]] && return 0 || return 1\n    [[ \"${s:3:5}\" == \"${s:15:3}\"\
    \ ]] && return 0 || return 1\n    [[ \"${s:3:5}\" == \"${s:16:3}\" ]] && return\
    \ 0 || return 1\n    [[ \"${s:3:5}\" == \"${s:17:3}\" ]] && return 0 || return\
    \ 1\n    [[ \"${s:3:5}\" == \"${s:18:3}\" ]] && return 0 || return 1\n    [[ \"\
    ${s:3:5}\" == \"${s:19:3}\" ]] && return 0 || return 1\n    [[ \"${s:3:5}\" ==\
    \ \"${s:20:3}\" ]] && return 0 || return 1\n    [[ \"${s:3:5}\" == \"${s:21:3}\"\
    \ ]] && return 0 || return 1\n    [[ \"${s:3:5}\" == \"${s:22:3}\" ]] && return\
    \ 0 || return 1\n    [[ \"${s:3:\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd9ied8qh.sh: line 66: unexpected EOF while looking for matching
    `"\''\n/tmp/tmpd9ied8qh.sh: line 70: unexpected token `\xff\'' in conditional
    command\n/tmp/tmpd9ied8qh.sh: line 70: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local str=$1\n\
    \  local len=${#str}\n  [[ \"${str}\" =~ (^|.)(.{3}).(.{3}) ]] || return 1\n \
    \ [[ \"${#BASH_REMATCH[3]}\" -eq 3 ]] || return 1\n  [[ \"${#BASH_REMATCH[4]}\"\
    \ -eq 3 ]] || return 1\n  local str2=${BASH_REMATCH[3]}\n  [[ -z \"${str2}\" ]]\
    \ || return 1\n  [[ -z \"${str2}\" ]]  || return 1\n  [[ \"${str}\" == \"${str2}\"\
    \ ]]  || return 1\n  [[ \"${str}\" = \"${str2}\" ]]  || return 1\n  return 0\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local input=$1\n\
    \    echo ${#input} > /proc/$$/fd/0\n    echo $((${#input}/3)) == 0 &> /dev/null\n\
    \    echo $((${#input}/3)) == 1 &> /dev/null\n    echo $((${#input}/3)) == 2 &>\
    \ /dev/null\n    echo $((${#input}/3)) == 3 &> /dev/null\n    echo $((${#input}/3))\
    \ == 4 &> /dev/null\n    echo $((${#input}/3)) == 5 &> /dev/null\n    echo $((${#input}/3))\
    \ == 6 &> /dev/null\n    echo $((${#input}/3)) == 7 &> /dev/null\n    echo $((${#input}/3))\
    \ == 8 &> /dev/null\n    echo $((${#input}/3)) == 9 &> /dev/null\n    echo $((${#input}/3))\
    \ == 10 &> /dev/null\n    echo $((${#input}/3)) == 11 &> /dev/null\n    echo $((${#input}/3))\
    \ == 12 &> /dev/null\n    echo $((${#input}/3)) == 13 &> /dev/null\n    echo $((${#input}/3))\
    \ == 14 &> /dev/null\n    echo $((${#input}/3)) == 15 &> /dev/null\n    echo $((${#input}/3))\
    \ == 16 &> /dev/null\n    echo $((${#input}/3)) == 17 &> /dev/null\n    echo $((${#input}/3))\
    \ == 18 &> /dev/null\n    echo $((${#input}/3)) == 19 &> /dev/null\n    echo $((${#input}/3))\
    \ == 20 &> /dev/null\n    echo $((${#input}/3)) == 21 &> /dev/null\n    echo $((${#input}/3))\
    \ == 22 &> /dev/null\n    echo $((${#input}/3)) == 23 &> /dev/null\n    echo $((${#input}/3))\
    \ == 24 &> /dev/null\n    echo $((${#input}/3)) == 25 &> /dev/null\n    echo $((${#input}/3))\
    \ == 26 &> /dev/null\n    echo $((${#input}/3)) == 27 &> /dev/null\n    echo $((${#input}/3))\
    \ == 28 &> /dev/null\n    echo $((${#input}/3)) == 29 &> /dev/null\n    echo $((${#input}/3))\
    \ == 30 &> /dev/null\n    echo $((${#input}/3)) == 31 &> /dev/null\n    echo $((${#input}/3))\
    \ == 32 &> /dev/null\n    echo $((${#input}/3)) == 33 &> /dev/null\n    echo $((${#input}/3))\
    \ == 34 &> /dev/null\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  # Your code\
    \ here\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpr0whykb8.sh: line 22: syntax error near unexpected token `}''\n/tmp/tmpr0whykb8.sh:
    line 22: `}''\n"'
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=\"\
    $1\"\n    local len=$((${#str}-1))\n    if [ \"$len\" -gt \"3\" ]\n    then\n\
    \        local i\n        local count=\"$(seq 0 \"$len\")\"\n        for ((i =\
    \ 0; i < ${#str}; i++)); do\n            if [[ ${count[i]} -gt 1 ]]\n        \
    \    then\n                return 1\n            fi\n            (( count[$i]++\
    \ ))\n        done\n        return 0\n    fi\n    return 0\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    local is_hapsh=\"false\"\n    local a\n    local b\n\
    \    local c\n    local d\n    local is_hapsh=false\n    \n    for (( i = 0; i\
    \ < len; i++ )); do\n        a=${s:$i:1}\n        b=${s:$i:2}\n        c=${s:$i:3}\n\
    \        d=${s:$i:4}\n        if [[ $a != $b or $c != $d ]]; then\n          \
    \  echo \"false\"\n            is_hapsh=\"false\"\n            echo \"$i\"\n \
    \           break;\n        else\n            echo \"true\"\n            is_hapsh=\"\
    true\"\n            echo \"$i\"\n            break;\n        fi\n    done\n  \
    \  echo $is_hapsh\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpibt5b99_.sh: line 35: syntax error in conditional expression\n/tmp/tmpibt5b99_.sh:
    line 35: syntax error near `or''\n/tmp/tmpibt5b99_.sh: line 35: `        if [[
    $a != $b or $c != $d ]]; then''\n"'
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  [[ \"${#1}\"\
    \ -ge 3 ]] && {\n    # count from beginning to end 3\n    # ${s%%[!$s]} remove\
    \ from string $s the last 3 characters\n    # ${s#*[!$s]} remove from string $s\
    \ the first 3 characters\n    # ${s%$s#*[!$s]} remove from string $s everything\
    \ before last 3 characters\n    # ${s%$s%%[!$s]} remove from string $s everything\
    \ before first 3 characters\n    # ${s#*[!$s]#*[!$s]} remove from string $s everything\
    \ before last 3 characters, followed by everything before first 3 characters\n\
    \    test -z \"$2\" && return 1\n    [[ \"$1\" =~ [!$2] ]] && return 1\n    [[\
    \ \"$1\" =~ \"$2\" ]] && return 0\n  }\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n\n    length=$(echo \"$string\" | wc -c)\n    [[ -z $length ]] && return\
    \ 1\n    [[ \"$length\" -lt 3 ]] && return 1\n    local letters=\"\"\n    local\
    \ counter=0\n    for (( i=0; i<${#string}; i++ )); do\n        [[ \"$string\"\
    \ == *\"${string:i:1}\"* ]] || return 1\n        [[ \"${letters}${string:i:1}\"\
    \ == \"${letters}${string:i:1}${string:i+1:1}\" ]]\n        counter=$(( counter\
    \ + 1 ))\n        if [ \"$counter\" -gt 3 ]; then return 1; fi\n        letters=\"\
    ${letters}${string:i:1}\"\n    done\n    return 0\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local count\n    local letter\n    local counts\n    local letter3\n\
    \n    count=0\n    counts=()\n    while [[ $string ]]; do\n        count=$(($count+1))\n\
    \        counts+=(\"$count\")\n        letter=$string\n        string=${string#?}\n\
    \    done\n\n    if (( (( ${#counts[@]} >= 3 )) )); then\n        letter3=$string\n\
    \        string=${string#?}\n        letter3=${letter3%?}\n\n        count3=0\n\
    \        while (( ${#letter3} > 0 )); do\n            if [[ ${counts[count3++]}\
    \ == 1 ]]; then\n                count3=0\n            fi\n        done\n    else\
    \ # string length is <= 3\n        return 0\n    fi\n\n    if (( (( ${#counts[@]}\
    \ > 3 )) )); then\n        echo \"false\"\n        return 2\n    fi\n\n    echo\
    \ \"true\"\n    return 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    # Your\
    \ code here\n    # Hints:\n    # Look at the following regular expression:\n \
    \   # https://stackoverflow.com/questions/42790550/how-can-i-check-whether-each-letter-in-a-string-is-a-happy-pair\n\
    \    grep -q \"^.{3,}[a-zA-Z]\" $1\n}\n\ncandidate() {\n    is_happy \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''grep: a: No such file or directory\n'''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local S=\"\
    $1\"\n  local L\n  local R\n  local T\n\n  L=${S}\n  R=\"${L//[!a-z]/}\"\n  T=\"\
    ${L//[!A-Z]/}\"\n  if [ \"${#S}\" -eq \"3\" ] && [ \"${#R}\" -eq \"3\" ] && [\
    \ \"${#T}\" -eq \"3\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    string=$1\n\
    \    length=`echo $string | wc -c`\n    if [ ${length} -lt 3 ]\n    then\n   \
    \     echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  if [ \"$#\"\
    \ -lt 1 ]; then\n    echo \"The function is expecting a string argument.\"\n \
    \   return 1\n  fi\n  local str=$1\n  local len=$((${#str} + 1))\n  if [ ${len}\
    \ -lt 3 ]; then\n    echo \"The string is too short.\"\n    return 1\n  fi\n \
    \ local num=0\n  while [ \"$num\" -lt ${#str} ]; do\n    local c=\"${str}\"${num}\n\
    \    local d=\"${c}\"\n    if [ \"${!d}\" != \"${c}\" ]; then\n      num=$((num\
    \ + 1))\n      continue\n    fi\n    num=$((num + 1))\n  done\n  echo \"${str}${num}${str}\"\
    \ | grep -q \"^[[:alpha:]]{3}$\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    # get the\
    \ string from function argument\n    local string=${1}\n\n    # convert string\
    \ to lower case\n    local string_lowercase=${string,,}\n\n    # get the length\
    \ of the string\n    local string_length=${#string}\n\n    # check if string length\
    \ is at least 3 and also check if every 3 letters are distinct\n    if (( ${string_length}\
    \ >= 3 )) && ((${#string_lowercase} % 3 != 0)); then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=\"\
    $1\"\n    if [[ \"$str\" == *\"#\"* ]]; then\n        echo \"false\"\n       \
    \ return\n    fi\n    local nchars=$(echo \"${str}\" | wc -c)\n    if [[ $nchars\
    \ -lt 3 ]]; then\n        echo \"false\"\n        return\n    fi\n    for i in\
    \ $(seq 0 $((nchars - 3)); do\n        if [[ $(echo \"${str}\" | grep -c \"${str:i:1}\"\
    ) -eq 0 ]]; then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    echo \"true\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpwicq1zb5.sh: line 31: unexpected EOF while looking for matching
    `)''\n/tmp/tmpwicq1zb5.sh: line 57: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local i lastchar\
    \ char count\n  local string=\"$1\"\n  if [[ ! \"$string\" =~ ^[a-zA-Z]+$ ]];\
    \ then\n    echo \"Invalid string: $1\"\n    return 1\n  fi\n  i=0\n  count=0\n\
    \  lastchar=\n  while [[ $i -lt ${#string} ]]; do\n    char=${string:$i:1}\n \
    \   if [[ \"${lastchar}\" != \"${char}\" ]]; then\n      if (( $count++ < 3 ));\
    \ then\n        ((count++))\n      else\n        ((lastchar=\"\"))\n      fi\n\
    \    fi\n    (( i++ ))\n  done\n  [[ \"${string}\" =~ ^.{3}[a-z]+ ]]\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj1prtwyw.sh: line 33: ((: 0++ < 3 : syntax error: operand expected
    (error token is "< 3 ")\n/tmp/tmpj1prtwyw.sh: line 36: ((: lastchar=: syntax error:
    operand expected (error token is "=")\n'''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local -a\
    \ s\n    s=\"${1}\"\n    \n    if ! [ \"${#s}\" -ge \"3\" ] || ! [ \"${#s}\" -lt\
    \ \"3\" ] || (echo \"${s}\" | grep -E -v '^[a-z]+$' | grep -q '^[a-z]{3}$'); then\n\
    \        echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    echo \"\
    $1\" | grep -q '^[a-z]{3,}$'\n    if [ $? -eq 0 ]; then echo \"true\"; else echo\
    \ \"false\"; fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    if [ ${#1}\
    \ -le 3 ]; then\n        for ((i=0; i < ${#1}; i++))\n            do\n       \
    \         if [ ${#1} == ${i} ]\n                    then\n                   \
    \ exit 0\n                fi\n            done\n        exit 1\n    else\n   \
    \     exit 0\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    echo $1\
    \ | awk '{\n    for(i=1; i<=NF; i++)\n    {\n        for(j=1; j<=i; j++)\n   \
    \     {\n            if((i == j) && ($i != $j))\n            {\n             \
    \   a[j++]=$i;\n            }\n        }\n    }\n\n    for(k=1; k<=length(a);\
    \ k++)\n    {\n        if(length(a[k]) >= 3)\n        {\n            for(l=1;\
    \ l<length(a[k]); l++)\n            {\n                if(!((a[l] == a[k][l])||(a[l]\
    \ == a[l+1])))\n                {\n                    a[k]=false;\n         \
    \       }\n            }\n        }\n    }\n\n    if(a[1])\n    {\n        printf\
    \ \"true\\n\"\n    }\n    else\n    {\n        printf \"false\\n\"\n    }\n  \
    \  }'\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"awk: cmd. line:27: (FILENAME=- FNR=1) fatal: attempt to use scalar `a''
    as an array\n"'
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  if [[ \"$string\" == *\"$1\"* ]]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  # Your code\
    \ here\n  a=\"${1}\"\n  echo $a\n  length=${#a}\n  if [ $length -le 3 ]\n  then\n\
    \    for ((i=0; i<3; i++)); do\n      if [[ ${a:$i:1} == \"$(awk '{print $1}'\
    \ <<< ${a:$i-1:1})\" ]]; then\n        return $false\n      else\n        return\
    \ $true\n      fi\n    done\n  else\n    return $false\n  fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local STRING=$1\n\
    \  local HAPHS_COUNT=3\n  local STR_LENGTH=${#STRING}\n  local HAPHS=''\n  for\
    \ (( i=0;i<STR_LENGTH;i++ ))\n    do\n      local CURRENT=${STRING:$i:1}\n   \
    \   local HAPH_EXISTS=''\n      for (( j=0;j<=i;j++ ))\n        do\n         \
    \ local HAPH=${STRING:$j:1}\n          HAPH_EXISTS=$((HAPH_EXISTS+1))\n      \
    \  done\n      HAPHS=$((HAPHS+HAPH))\n    done\n  if [[ STR_LENGTH -ge $HAPHS_COUNT\
    \ ]] ; then\n    if [[ $HAPH_EXISTS == $HAPHS_COUNT ]] ; then\n      return 1\n\
    \    else\n      return 0\n    fi\n  else\n    return 0\n  fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\tlocal -r\
    \ string=\"$1\"\n\tlocal -r len=${#string}\n\tlocal i j\n\t[ \"${len}\" -ge 3\
    \ ] || return 1\n\t[ \"$string\" = \"${string:0:3}\" ] || return 1\n\tfor((i=0;i<3;++i));\
    \ do\n\t\t(( j=i+1 ))\n\t\t[ \"$string\" = \"${string:j:1}\" ] || return 1\n\t\
    \t[ \"$string\" = \"${string::j:1}\" ] || return 1\n\t\t[ \"$string\" = \"${string:j:j:1}\"\
    \ ] || return 1\n\tdone\n\t[ \"$string\" = \"${string:0:3}${string:3:6}\" ] ||\
    \ return 1\n\t[ \"$string\" = \"${string:0:3}${string:3:6}${string::6:6}\" ] ||\
    \ return 1\n\t[ \"$string\" = \"${string:0:3}${string:3:6}${string::6:6}${string::7:6}\"\
    \ ] || return 1\n\treturn 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local str=\"\
    $1\"\n  local len=$((${#str} + 1))\n  ((${#str} >= 3)); # Make sure we have at\
    \ least 3 letters\n  local i=0\n  local j=0\n  local distinct\n  while ((${#str}\
    \ >= 3)); do\n    distinct=0\n    j=$((${#str} + 3))\n    for ((i=0; i < j; i++));\
    \ do\n      [[ \"$str\" == \"$((${str#?}:${str#$((${#str} - 1))})\" ]]\n     \
    \ if [ \"$?\" != \"0\" ]; then\n        distinct=1 break\n      fi\n    done\n\
    \    if [ \"$distinct\" = \"0\" ]; then\n      echo \"true\"\n      break\n  \
    \  fi\n    str=\"${str:1:$((${#str} - 1))}\"\n    ((${#str} -= 1))\n  done\n \
    \ echo \"false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp56vtpi8.sh: line 59: unexpected EOF while looking for matching
    `"\''\n/tmp/tmpp56vtpi8.sh: line 63: unexpected argument to conditional binary
    operator\n/tmp/tmpp56vtpi8.sh: line 63: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660078640
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local happy_string=\"happy\"\n  local length=\"$((${#string} - 1))\"\n\
    \  (( $length >= 3 ))\n  (( $length == 3 ))\n  local i\n\n  for i in $(seq 0 $(($length\
    \ - 2)); do\n    (( ${string:$i:1} == ${string:$(($i+2)):1} ))\n  done\n\n  ((\
    \ $( echo \"$string\" | grep -c \"$happy_string\" ) ))\n}\n\ncandidate() {\n \
    \   is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp92y_d8_d.sh: line 28: unexpected EOF while looking for matching
    `)''\n/tmp/tmp92y_d8_d.sh: line 52: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local str=\"\
    $1\"\n\n  if (( $# < 1 )); then\n    echo \"[ERROR] No input!!!\"\n    return\
    \ 0\n  fi\n\n  local count1=\"$(echo $str | wc -c)\"\n  if (( $count1 < 3 ));\
    \ then\n    echo \"[ERROR] String too short!!!\"\n    return 0\n  fi\n\n  local\
    \ count2=\"$(echo $str | tr \"[:lower:]\" \"[:upper:]\" | wc -c)\"\n  if (( $count2\
    \ < 3 )); then\n    echo \"[ERROR] String not valid!!!\"\n    return 0\n  fi\n\
    \n  local count3=\"$(echo $str | sed 's/[a-z]\\([a-z]\\)\\([a-z]\\)\\([a-z]\\\
    )\\([a-z]\\)/\\1\\2\\3\\4\\5/g' | wc -c)\"\n  if (( $count3 < 3 )); then\n   \
    \ echo \"[ERROR] String not valid!!!\"\n    return 0\n  fi\n\n  local count4=\"\
    $(echo $str | sed 's/[a-z]\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)\\([a-z]\\)/\\1\\2\\\
    3\\4/g' | wc -c)\"\n  if (( $count4 < 3 )); then\n    echo \"[ERROR] String not\
    \ valid!!!\"\n    return 0\n  fi\n\n  local count5=\"$(echo $str | sed 's/[a-z]\\\
    ([a-z]\\)\\([a-z]\\)\\([a-z]\\)/\\1\\2\\3/g' | wc -c)\"\n  if (( $count5 < 3 ));\
    \ then\n    echo \"[ERROR] String not valid!!!\"\n    return 0\n  fi\n\n  local\
    \ count6=\"$(echo $str | sed 's/[a-z]\\([a-z]\\)\\([a-z]\\)/\\1\\2/g' | wc -c)\"\
    \n  if (( $count6 < 3 )); then\n    echo \"[ERROR] String not valid!!!\"\n   \
    \ return 0\n  fi\n\n  echo \"true\"\n  return 0\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  # Your code\
    \ here\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpr0whykb8.sh: line 22: syntax error near unexpected token `}''\n/tmp/tmpr0whykb8.sh:
    line 22: `}''\n"'
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  if [[ ${#1}\
    \ -gt 3 ]];then\n    for i in {1..3}; do\n      if [[ ${#1} -eq ${i} ]];then\n\
    \        flag=false\n        for j in {4..$((${#1} - 1))}; do\n          if [[\
    \ ${!j} = ${!j+1} ]];then\n            flag=true\n          fi\n        done\n\
    \        if [[ ${flag} = true ]];then\n          echo \"false\"\n          exit\
    \ 0\n        else\n          echo \"true\"\n          exit 0\n        fi\n   \
    \   else\n        echo \"true\"\n        exit 0\n      fi\n    done\n  else\n\
    \    echo \"true\"\n    exit 0\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n   if [[ $1\
    \ =~ $happy_regex ]]; then\n      echo \"true\"\n   else\n      echo \"false\"\
    \n   fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \n    local len=${#s}\n    local i=0\n    local result=\"false\"\n    local char\n\
    \    while (( $i < len )); do\n        char=$(expr $i \\* 3)\n        if [[ \"\
    ${s:$char:1}\" != \"${s:$char+1:1}\" ]]; then\n            result=\"true\"\n \
    \           break\n        fi\n        i=$(( $i + 1 ))\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    if [[ $string == *[^a-z]* ]]; then\n        return 0\n    fi\n    local i\n\
    \    local j\n    local k\n    local letter\n    local letter1\n    local letter2\n\
    \    local letter3\n    local letter4\n    local letter5\n    local letter6\n\
    \    local letter7\n    local letter8\n    local letter9\n    local letter10\n\
    \    local letter11\n    local letter12\n    local letter13\n    local letter14\n\
    \    local letter15\n    local letter16\n    local letter17\n    local letter18\n\
    \    local letter19\n    local letter20\n    local letter21\n    local letter22\n\
    \    local letter23\n    local letter24\n    local letter25\n    local letter26\n\
    \    local letter27\n    local letter28\n    local letter29\n    local letter30\n\
    \    local letter31\n    local letter32\n    local letter33\n    local letter34\n\
    \    local letter35\n    local letter36\n    local letter37\n    local letter38\n\
    \    local letter39\n    local letter40\n    local letter41\n    local letter42\n\
    \    local letter43\n    local letter44\n    local letter45\n    local letter46\n\
    \    local letter47\n    local letter48\n    local letter49\n    local letter50\n\
    \    local letter51\n    local letter52\n    local letter53\n    local letter54\n\
    \    local letter55\n    local letter56\n    local letter57\n    local letter58\n\
    \    local letter59\n    local letter60\n    local letter61\n    local letter62\n\
    \    local letter63\n    local letter64\n    local letter65\n    local letter66\n\
    \    local letter67\n    local letter68\n    local letter69\n    local letter70\n\
    \    local letter71\n    local letter72\n    local letter73\n    local letter74\n\
    \    local letter75\n    local letter76\n    local letter77\n    local letter78\n\
    \    local letter79\n    local letter80\n    local letter81\n    local letter82\n\
    \    local letter83\n    local letter84\n    local letter85\n    local letter86\n\
    \    local letter87\n    local letter88\n    local letter89\n    local letter90\n\
    \    local letter91\n    local letter92\n    local letter93\n    local letter94\n\
    \    local letter95\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: -1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  read input\n\
    \  while read line; do\n    length=\"${#line}\"\n    if [ \"${length}\" -lt 3\
    \ ]; then\n      echo \"false\"\n      return\n    fi\n    count=0\n    for ((\
    \ i=1; i<${#line}-3; i++ )); do\n      if [[ ${line:$i:1} == ${line:$((i+1)):1}\
    \ ]]; then\n        count=$((count+1))\n      else\n        break\n      fi\n\
    \    done\n    if [ \"${count}\" -gt 2 ]; then\n      echo \"false\"\n      return\n\
    \    fi\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=30>
  stdout: <_io.BufferedReader name=11>
  timestamp: 1660078645
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local a\n\
    \  a=\"$1\"\n  echo \"$a\" | grep -q \"^([a-zA-Z]{3})$\"\n  if [ $? -eq 0 ];\n\
    \  then\n    echo \"false\"\n  else\n    echo \"\"\n    echo \"true\"\n  fi\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    len=${#1}\n\
    \    if [ $len -gt 3 ]\n    then\n        awk '\n            BEGIN{\n        \
    \        print \"false\"\n                exit\n            }\n            {\n\
    \                for (i=1;i<=NF;i++) {\n                    if ($i ~ /[^aeiou]/)\
    \ {\n                        print \"false\"\n                        exit\n \
    \                   }\n                }\n                print \"true\"\n   \
    \             exit\n            }\n        ' <<< $1 >/dev/null || echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=\"\
    $1\"\n    [[ \"${#str}\" -gt 3 ]] || return 1\n    local i\n    for (( i=1; i<\"\
    ${#str}\"; i++ )); do\n        if [[ \"${str:$i:1}\" = \"${str:$((i+2)):1}\" ]];\
    \ then\n            echo \"true\"\n            return 0\n        fi\n    done\n\
    \    echo \"false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s=$1\n\
    \  local length=\"${#s}\"\n  [[ $length -gt 3 ]] || return 1\n  for (( i=0; i<${#s};\
    \ i++ )); do\n    [[ \"${s:$i:1}\" == \"$s:$((i+2))\" ]] || return 1\n  done\n\
    \  echo \"$length characters\"\n  return 0\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local length=${#s}\n    local result\n    if [[ $length -le 3 ]]; then\n\
    \        result=true\n    elif [[ $(grep -c \"^${s}\\([0-9]*\\)$\" <<< \"$s\"\
    ) -eq 3 ]]; then\n        result=false\n    else\n        result=true\n    fi\n\
    \    echo $result\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local n\n\
    \  for (( n = 0; n <= ${#1}; n++ )); do\n    local letter\n    letter=${1:$n:1}\n\
    \    if [[ ${letter} == ${letter}* ]]; then\n      echo \"false\"\n      return\
    \ 0\n    fi\n  done\n  echo \"true\"\n  return 0\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local length=$((${#string} + 1))\n    if [ $length -gt 3 ]; then\n      \
    \  echo \"false\"\n        return\n    fi\n    local last_char\n    local count\n\
    \    local result\n    for ((i = 0; i < ${#string}; i++)); do\n        last_char=${string:$i:1}\n\
    \        count=$(echo \"${string:$i:1}\" | wc -c)\n        echo \"$count\"\n \
    \       if [[ $count -gt 3 ]]; then\n            result=$(echo \"$string\" | awk\
    \ -F\"-\" '{print $1}')\n            if [[ $result =~ $last_char ]]; then\n  \
    \              echo \"false\"\n                return\n            fi\n      \
    \  fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: -1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local i s\n\
    \  read s\n  for i in $(seq 0 $((${#s}-1))); do\n    if [[ ${s:$i:1} == ${s:$((i+1)):1}\
    \ ]]; then\n      return 1\n    fi\n  done\n  return 0\n}\n\ncandidate() {\n \
    \   is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=31>
  stdout: <_io.BufferedReader name=3>
  timestamp: 1660078645
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s\n\
    \  s=\"${1}\"\n  if [[ $# -gt 0 ]]; then\n    local len\n    len=${#s}\n    if\
    \ (( len < 3 )) ; then\n      return 0\n    else\n      local count\n      local\
    \ flag\n      flag=0\n      count=1\n      while (( count <= len )); do\n    \
    \    if (( $flag != 0 )); then\n          if [[ ${s:$count:1} = ${s:$((count +\
    \ 2)):1} ]]; then\n            (( count++ ))\n          else\n            (( flag\
    \ = 0 ))\n          fi\n        else\n          if [[ ${s:$count:1} = ${s:$((count\
    \ + 2)):1} ]]; then\n            (( count++ ))\n          else\n            ((\
    \ flag = 1 ))\n          fi\n        fi\n      done\n      (( flag != 0 ))\n \
    \     return $flag\n    fi\n  else\n    return 0\n  fi\n}\n\ncandidate() {\n \
    \   is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\tlocal string=$1\n\
    \tlength=$(expr length \"$string\")\n\tif [ $length -gt 3 ]; then\n\t\tlocal i=0\
    \ j=0\n\t\twhile [ \"$i\" -lt \"$length\" ]; do\n\t\t\tif [ \"$j\" -eq \"$length\"\
    \ ]; then\n\t\t\t\treturn \"true\"\n\t\t\tfi\n\t\t\tlocal letter=$( echo \"$string\"\
    \ | awk \"NR==$i{print \\$j}\" )\n\t\t\tif [ \"$letter\" == \"$letter\" ]; then\n\
    \t\t\t\tlocal count=$( echo \"$string\" | awk \"NR==$i{print \\$j+1}\" )\n\t\t\
    \t\tif [ $count -gt 3 ]; then\n\t\t\t\t\treturn \"false\"\n\t\t\t\tfi\n\t\t\t\t\
    j=$count\n\t\t\tfi\n\t\t\ti=$(( $i + 1 ))\n\t\tdone\n\tfi\n\treturn \"true\"\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpxspm5a_d.sh: line 40: return: true: numeric argument required\n'''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local i\
    \ flag1=0\n    local j=0\n    local k=0\n    local l\n    local s=$1\n    local\
    \ count\n    local max\n    local count2\n    local flag2\n    local flag3\n \
    \   local flag4\n    local flag5\n    local flag6\n    local flag7\n    local\
    \ flag8\n    local flag9\n    local flag10\n    local flag11\n    local flag12\n\
    \    local flag13\n    local flag14\n    local flag15\n    local flag16\n    local\
    \ flag17\n    local flag18\n    local flag19\n    local flag20\n    local flag21\n\
    \    local flag22\n    local flag23\n    local flag24\n    local flag25\n    local\
    \ flag26\n    local flag27\n    local flag28\n    local flag29\n    local flag30\n\
    \    local flag31\n    local flag32\n    local flag33\n    local flag34\n    local\
    \ flag35\n    local flag36\n    local flag37\n    local flag38\n    local flag39\n\
    \    local flag40\n    local flag41\n    local flag42\n    local flag43\n    local\
    \ flag44\n    local flag45\n    local flag46\n    local flag47\n    local flag48\n\
    \    local flag49\n    local flag50\n    local flag51\n    local flag52\n    local\
    \ flag53\n    local flag54\n    local flag55\n    local flag56\n    local flag57\n\
    \    local flag58\n    local flag59\n    local flag60\n    local flag61\n    local\
    \ flag62\n    local flag63\n    local flag64\n    local flag65\n    local flag66\n\
    \    local flag67\n    local flag68\n    local flag69\n    local flag70\n    local\
    \ flag71\n    local flag72\n    local flag73\n    local flag74\n    local flag75\n\
    \    local flag76\n    local flag77\n    local flag78\n    local flag79\n    local\
    \ flag80\n    local flag81\n    local flag82\n    local flag83\n    local flag84\n\
    \    local flag85\n    local flag86\n    local flag87\n    local flag88\n    local\
    \ flag89\n    local flag90\n    local flag91\n    local flag92\n    local flag93\n\
    \    local flag94\n    local flag95\n    local flag\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s\n\
    \    s=\"$1\"\n    [[ \"$s\" = *[[:space:]]* ]] && echo \"false\" || echo \"true\"\
    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  length=$(echo \"${#string}\" | wc -l)\n  if [[ ${length} -ge 3 ]]; then\n\
    \    for ((i=0;i<${#string};i++))\n    do\n      local char=\"${string[i]}\"\n\
    \      local count=1\n      for ((j=i;j<${#string};j++))\n      do\n        local\
    \ char_=\"${string[j]}\"\n        if [ \"${char}\" = \"${char_}\" ]\n        then\n\
    \          count=$((count+1))\n        else\n          break\n        fi\n   \
    \   done\n      if [[ ${count} -ge 3 ]]\n      then\n        echo \"${string}\"\
    \n        break\n      else\n        echo \"false\"\n      fi\n    done\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=$1\n\
    \n    local length=$((${#str} + 1))\n    if [[ ${#str} != 3 ]] || [[ \"${str}\"\
    \ != \"${str:3}\" ]]; then\n        return\n    fi\n    local count=1\n    while\
    \ [[ ${count} -le ${length} ]]; do\n        if [[ \"${str:$((count + 1))}\" ==\
    \ \"${str:$((count + 2))}\" ]]; then\n            if [[ \"${str:$((count + 3))}\"\
    \ == \"${str:$((count + 2))}\" ]]; then\n                count=$((count + 4))\n\
    \                continue\n            fi\n            if [[ \"${str:$((count\
    \ + 3))}\" != \"${str:$((count + 2))}\" ]]; then\n                return\n   \
    \         fi\n            if [[ \"${str:$((count + 4))}\" != \"${str:$((count\
    \ + 2))}\" ]]; then\n                return\n            fi\n            if [[\
    \ \"${str:$((count + 5))}\" == \"${str:$((count + 3))}\" ]]; then\n          \
    \      count=$((count + 6))\n                continue\n            fi\n      \
    \      if [[ \"${str:$((count + 5))}\" != \"${str:$((count + 3))}\" ]]; then\n\
    \                return\n            fi\n        fi\n        count=$((count +\
    \ 1))\n    done\n    return\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    echo $(echo\
    \ \"$1\" | wc -c) -gt 3\n    echo $(echo \"$1\" | sort -u | uniq -uc | wc -l)\
    \ -gt 3\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=$1\n\
    \    # empty string\n    if [ -z \"$str\" ]; then\n        echo \"false\";\n \
    \       return;\n    fi\n\n    # single character\n    if [ ! -z \"$str\" ]; then\n\
    \        echo \"false\";\n        return;\n    fi\n\n    # too short\n    if [\
    \ $(len $str) -lt 3 ]; then\n        echo \"false\";\n        return;\n    fi\n\
    \n    local first_char=$(head -n 1 <<< \"$str\")\n    local second_char=$(tail\
    \ -n 1 <<< \"$str\")\n    local third_char=$(head -n 2 <<< \"$str\")\n\n    #\
    \ characters are distinct\n    if [ $first_char -ne $second_char ] && [ $first_char\
    \ -ne $third_char ]; then\n        echo \"false\";\n        return;\n    fi\n\n\
    \    # characters are distinct\n    if [ $second_char -ne $third_char ]; then\n\
    \        echo \"false\";\n        return;\n    fi\n\n    # characters are distinct\n\
    \    if [ $third_char -ne $first_char ]; then\n        echo \"false\";\n     \
    \   return;\n    fi\n\n    echo \"true\";\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local char\n\
    \  local count\n\n  local str=\"$1\"\n  # echo \"$str\"\n  if (( ${#str} < 3 ));\
    \ then\n    echo \"$str is too short\"\n    return 1\n  fi\n\n  count=0\n  for\
    \ char in $str; do\n    (( count += 1 ))\n    if (( $count % 3 )); then\n    \
    \  if (( $(echo $char != ${str:$((count-1)):1} )); then\n        echo \"$char\
    \ is not distinct\"\n        return 1\n      else\n        echo \"$char is distinct\"\
    \n        return 0\n      fi\n    fi\n  done\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpndyiqdi3.sh: line 35: syntax error near unexpected token `then''\n/tmp/tmpndyiqdi3.sh:
    line 35: `      if (( $(echo $char != ${str:$((count-1)):1} )); then''\n"'
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  echo $1 |\
    \ awk '{print length}' >/dev/null 2>&1\n  echo $(echo $1 | sed 's/[^a-z]//g' |\
    \ sort | uniq | wc -l | xargs echo -n > /dev/null 2>&1) >/dev/null 2>&1\n}\n\n\
    candidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    if [[ \"$string\" == \"\" ]]\n    then\n        echo \"false\"\n        return\
    \ 0;\n    fi\n    local length=$((${#string} - 2))\n    if [[ \"$length\" -lt\
    \ 3 ]]\n    then\n        echo \"false\"\n        return 0;\n    fi\n    local\
    \ last_char=$(echo \"${string:$((length-1))}\" | awk '{print $1}')\n    local\
    \ check_char=$(echo \"${string:$((length-2))}\" | awk '{print $1}')\n    local\
    \ check_char1=$(echo \"${string:$((length-3))}\" | awk '{print $1}')\n    local\
    \ check_char2=$(echo \"${string:$((length-4))}\" | awk '{print $1}')\n    if [[\
    \ $last_char != $check_char && $check_char != $check_char1 && $check_char1 !=\
    \ $check_char2 && $check_char2 != $last_char ]]\n    then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local input=$1\n\
    \    if [ \"${#input}\" -lt \"3\" ]\n    then\n        echo \"false\"\n    else\n\
    \        local string=`echo $input | sed \"s/.{3}//g\"`\n        local hapsh=true\n\
    \        local i=0;\n        for string in $string; do\n            local distinct=${string//[!$string]/}\n\
    \            if [[ ! \"$distinct\" = $string ]]; then\n                hapsh=false\n\
    \            fi\n            ((i++))\n        done\n        if [[ $hapsh = true\
    \ ]]\n        then\n            echo \"true\"\n        else\n            echo\
    \ \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    # your\
    \ code goes here\n    local s=$1\n    len=$(( ${#s} + 1 ))\n    if [[ $len -gt\
    \ 3 ]]; then\n        if [[ \"$s\" == *\"${s:2:1}\"* && \"$s\" == *\"${s:3:1}\"\
    * && \"$s\" == *\"${s:4:1}\"* ]]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s='$1';\n\
    \    local len=${#s};\n    if [ \"${len}\" -lt 3 ]; then\n        echo \"false\"\
    ;\n    else\n        local n=1\n        local k=1\n        while [ $((k*3)) -le\
    \ ${len} ]; do\n            if [ \"${s:$k:1}\" == \"${s:$((k+1)):1}\" ] || [ \"\
    ${s:$k:1}\" == \"${s:$((k+2)):1}\" ] || [ \"${s:$k:1}\" == \"${s:$((k+3)):1}\"\
    \ ]; then\n                let n=$n+1;\n            fi\n            let k=$((k+4));\n\
    \        done\n        if [ $n -eq 3 ]; then\n            echo \"true\";\n   \
    \     else\n            echo \"false\";\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local input=$1\n\
    \  local len=$2\n  if [ $len -gt 3 ] || [ $len -eq 0 ]; then\n    echo \"false\"\
    \n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpk_m7n2n2.sh: line 23: [: -gt: unary operator expected\n/tmp/tmpk_m7n2n2.sh:
    line 23: [: -eq: unary operator expected\n'''
  stdout: b''
  timestamp: 1660078640
- exit_code: -1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=0\n  local i=0\n  local hapsh=0\n  while [ $i -lt ${#string} ];\
    \ do\n    if [ ${string[$i]} == ${string[$i+1]} ]; then\n      (( i++ ))\n   \
    \   (( i++ ))\n      (( i++ ))\n    else\n      (( length++ ))\n      hapsh=1\n\
    \    fi\n  done\n  if [ $length -ge 3 ]; then\n    for i in $(seq 0 $(( $length\
    \ - 1 ))); do\n      if [ ${string[$i]} == ${string[$i+1]} ]; then\n        ((\
    \ i++ ))\n        (( i++ ))\n        (( i++ ))\n      else\n        (( hapsh=1\
    \ ))\n        break\n      fi\n    done\n  fi\n  if [ $hapsh -eq 1 ]; then\n \
    \   echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=64>
  stdout: <_io.BufferedReader name=62>
  timestamp: 1660078645
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\tlocal string=\"\
    $1\"\n\tif [ $(echo \"$string\" | grep -c \"^[0-9]*$\") -eq 1 ]; then\n\t\tif\
    \ [ $(echo \"$string\" | grep -c \"^[0-9]*$\") -eq 1 ]; then\n\t\t\treturn 0\n\
    \t\telse\n\t\t\treturn 1\n\t\tfi\n\telse\n\t\treturn 1\n\tfi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local arg=\"\
    $1\"\n    local length=0\n    local letters=()\n    local hsh=true\n    local\
    \ isHapsh=true\n    for (( i=1; i<$#; i++ )); do\n        local char=$($arg |\
    \ awk '{print substr($0,1,'$i')}')\n        letters+=(\"$char\")\n    done\n \
    \   for (( i=0; i<${#letters[*]}; i++ )); do\n        (( length++ ))\n       \
    \ if [ \"$length\" -eq \"3\" ]; then\n            local c=${letters[i]}\n    \
    \        if [[ ${letters[(i-1)]} == \"$c\" ]]; then\n                if [[ ${letters[(i-2)]}\
    \ != \"$c\" ]]; then\n                    hsh=false\n                    break\n\
    \                fi\n                if [[ ${letters[(i-3)]} != \"$c\" ]]; then\n\
    \                    hsh=false\n                    break\n                fi\n\
    \            fi\n        fi\n    done\n    if [[ \"$hsh\" == \"true\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local STR=$1\n\
    \  echo \"$STR\" | awk '{\n    flag = 0\n    for (i = 1; i <= NF; i++) {\n   \
    \   if($i == $i && $i == $i && $i == $i && $i == $i){\n        flag = 1\n    \
    \  }\n    }\n    if(flag == 0){\n      return 0\n    } else {\n      return 1\n\
    \    }\n  }'\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"awk: cmd. line:9:       return 0\nawk: cmd. line:9:       ^ `return''
    used outside function context\nawk: cmd. line:11:       return 1\nawk: cmd. line:11:       ^
    `return'' used outside function context\n"'
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local IFS=\
    \ read -r -n 1 input\n    # convert input to lowercase so we don't need to worry\
    \ about case changes\n    local string=\"${input^^}\"\n    local length=\"${#string}\"\
    \n\n    # exit if length is less than 3\n    if [[ ${length} < 3 ]]; then\n  \
    \      echo \"false\"\n        return\n    fi\n    # exit if all three characters\
    \ are identical\n    if [[ ${string:3} == ${string:3} ]]; then\n        echo \"\
    true\"\n        return\n    fi\n    # exit if any two characters are different\n\
    \    for (( i = 3; i < ${length}; i++ )); do\n        if [[ ${string:$i} != ${string:$((i\
    \ - 1))} ]]; then\n            echo \"true\"\n            return\n        fi\n\
    \    done\n    echo \"false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpm6grtmt9.sh: line 21: local: `-r'': not a valid identifier\n/tmp/tmpm6grtmt9.sh:
    line 21: local: `-n'': not a valid identifier\n/tmp/tmpm6grtmt9.sh: line 21: local:
    `1'': not a valid identifier\n/tmp/tmpm6grtmt9.sh: line 21: local: `-r'': not
    a valid identifier\n/tmp/tmpm6grtmt9.sh: line 21: local: `-n'': not a valid identifier\n/tmp/tmpm6grtmt9.sh:
    line 21: local: `1'': not a valid identifier\n/tmp/tmpm6grtmt9.sh: line 21: local:
    `-r'': not a valid identifier\n/tmp/tmpm6grtmt9.sh: line 21: local: `-n'': not
    a valid identifier\n/tmp/tmpm6grtmt9.sh: line 21: local: `1'': not a valid identifier\n"'
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s\
    \ i\n    local count\n\n    s=\"$1\"\n    count=$(echo \"${#s}\" | awk '{print\
    \ length}')\n\n    ((count >= 3)) && echo \"$1\"\n\n    for (( i = 3; i <= count;\
    \ i=i+3 )); do\n        if [[ ${s:$i,3} == ${s:$(($i-2)):1} ]]; then\n       \
    \     echo \"$1\"\n            return 0;\n        fi\n    done\n    echo \"$1\"\
    \n    return 1\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local str=\"\
    $1\"\n  # +++your code here+++\n  local len=\"${#str}\"\n  if [ -z \"$len\" ]\
    \ || [ \"$len\" -lt 3 ]\n  then\n    return 1\n  fi\n  local flag=false\n  for\
    \ (( i=0; i<3; i++ )); do\n    local letter=$(echo $str|cut -d'#' -f${i})\n  \
    \  if [ -z \"$letter\" ]\n    then\n      return 1\n    else\n      if [ -n \"\
    ${str:0:1}\" ] \n      then\n        flag=false\n      fi\n      flag=$(( flag\
    \ == true && [ \"$letter\" = \"${str:$(($i + 1))}\" ] ))\n    fi\n  done\n  echo\
    \ \"$flag\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s='$1';\n\
    \  if [[ \"$s\" == *\"happy\"* ]]; then\n    echo \"true\";\n  else\n    echo\
    \ \"false\";\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local i\n\
    \    local str=$1\n    if [[ ${#str} -lt 3 ]]; then\n        echo \"false\"\n\
    \        return 1;\n    fi\n    for i in $(seq 1 ${#str}); do\n        if [[ ${str:$i:1}\
    \ == ${str:$((i+1)):1} ]]; then\n            echo \"false\"\n            return\
    \ 1;\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local happy=0\n    local happy_count=0\n\
    \    local next_letter\n    local i\n\n    for ((i=0; i<len; i++)); do\n     \
    \   next_letter=${string:$i:1}\n        if [ \"$next_letter\" == \"$string\" ]\
    \ ; then\n            happy_count=$((happy_count+1))\n        else\n         \
    \   happy_count=$((happy_count+0))\n            happy=$((happy+1))\n        fi\n\
    \        count=$((happy_count+count))\n        if [ $count -eq 3 ] ; then\n  \
    \          if [ $happy_count -eq 3 ] ; then\n                happy=$((happy+1))\n\
    \            fi\n            happy_count=0\n        fi\n    done\n    if [ $happy\
    \ -eq 3 ] ; then\n        return 1\n    else\n        return 0\n    fi\n}\n\n\
    candidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: -1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  # Write your\
    \ code here\n  local my_string=$1\n  if [[ ${#my_string} < 3 ]]; then\n    echo\
    \ \"false\"\n  else\n    local last_char=$my_string\n    while [[ ${#my_string}\
    \ > 0 ]]; do\n      if [[ ${#last_char} -eq 3 ]]; then\n        last_char=false\n\
    \      else\n        if [[ ${last_char} == ${my_string:3} ]]; then\n         \
    \ echo \"true\"\n        else\n          echo \"false\"\n        fi\n      fi\n\
    \      last_char=${my_string:(-1)}\n    done\n  fi\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=36>
  stdout: <_io.BufferedReader name=34>
  timestamp: 1660078645
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local count=0\n    local hap_str=$(echo $string | tr -d ' ')\n    local hap_arr=($hap_str)\n\
    \n    for index in ${!hap_arr[@]}; do\n        ((count++))\n        if [ ${hap_arr[$index]}\
    \ != ${hap_arr[$((index + 1))]} ]; then\n            count=0\n        fi\n   \
    \ done\n\n    if [ ${count} -ge 3 ]; then\n        echo \"false\"\n    else\n\
    \        echo \"true\"\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpj9tp62vr.sh: line 28: [: a: unary operator expected\n'''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    local count=0\n    local start=0\n    local end=0\n\
    \    local char\n    while (( len > 1 )) ; do\n        char=${s:$start:$end}\n\
    \        (( char != $char ))\n        (( count++ ))\n        if (( count % 3 ==\
    \ 0)) ; then\n            (( end=$start + 1 ))\n        fi\n        (( start=$end\
    \ ))\n        (( len-- ))\n    done\n    if [[ $(( end - 1 )) -ne 3 ]] ; then\n\
    \        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n  \
    \  is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local input=$1\n\
    \    local len=${#input}\n    if [[ $len == 0 ]]; then\n        return $HAPPY_ERR1\n\
    \    elif ((len >= 3)); then\n        local last_char\n        local last_char1\n\
    \        local last_char2\n        local last_char3\n        local last_char4\n\
    \        local last_char5\n        local last_char6\n        local last_char7\n\
    \        local last_char8\n        local last_char9\n        local last_char10\n\
    \        local last_char11\n        local last_char12\n        local last_char13\n\
    \        local last_char14\n        local last_char15\n        local last_char16\n\
    \        local last_char17\n        local last_char18\n        local last_char19\n\
    \        local last_char20\n        local last_char21\n        local last_char22\n\
    \        local last_char23\n        local last_char24\n        local last_char25\n\
    \        local last_char26\n        local last_char27\n        local last_char28\n\
    \        local last_char29\n        local last_char30\n        local last_char31\n\
    \        local last_char32\n        local last_char33\n        local last_char34\n\
    \        local last_char35\n        local last_char36\n        local last_char37\n\
    \        local last_char38\n        local last_char39\n        local last_char40\n\
    \        local last_char41\n        local last_char42\n        local last_char43\n\
    \        local last_char44\n        local last_char45\n        local last_char46\n\
    \        local last_char47\n        local last_char48\n        local last_char49\n\
    \        local last_char50\n        local last_char51\n        local last_char52\n\
    \        local last_char53\n        local last_char54\n        local last_char55\n\
    \        local last_char56\n        local last_char57\n        local last_char58\n\
    \        local last_char59\n        local last_char60\n        local last_char61\n\
    \        local last_char62\n        local last_char63\n        local last_char64\n\
    \        local last_char65\n        local last_char66\n        local last_char67\n\
    \        local last_char68\n        local last_char69\n        local last_char70\n\
    \        local last_char71\n        local last_char72\n        local last_char73\n\
    \        local last_char74\n        local last_char75\n        local last_char76\n\
    \        local last_char77\n        local last_char78\n        \n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpgc9f8u6q.sh: line 106: syntax error near unexpected token `}''\n/tmp/tmpgc9f8u6q.sh:
    line 106: `}''\n"'
  stdout: b''
  timestamp: 1660078640
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    # Write your code here\n    # check length\n    local length=$((${#string}\
    \ - 1))\n    if (($length >= 3)); then\n        # check every 3 letters are distinct\n\
    \        local char1=$(echo $string | cut -c 1)\n        local char2=$(echo $string\
    \ | cut -c 2)\n        local char3=$(echo $string | cut -c 3)\n        local char4=$(echo\
    \ $string | cut -c 4)\n        local char5=$(echo $string | cut -c 5)\n      \
    \  local char6=$(echo $string | cut -c 6)\n        local char7=$(echo $string\
    \ | cut -c 7)\n        local char8=$(echo $string | cut -c 8)\n        local char9=$(echo\
    \ $string | cut -c 9)\n        local char10=$(echo $string | cut -c 10)\n    \
    \    local char11=$(echo $string | cut -c 11)\n        local char12=$(echo $string\
    \ | cut -c 12)\n        local char13=$(echo $string | cut -c 13)\n        local\
    \ char14=$(echo $string | cut -c 14)\n        local char15=$(echo $string | cut\
    \ -c 15)\n        local char16=$(echo $string | cut -c 16)\n        local char17=$(echo\
    \ $string | cut -c 17)\n        local char18=$(echo $string | cut -c 18)\n   \
    \     local char19=$(echo $string | cut -c 19)\n        local char20=$(echo $string\
    \ | cut -c 20)\n        local char21=$(echo $string | cut -c 21)\n        local\
    \ char22=$(echo $string | cut -c 22)\n        local char23=$(echo $string | cut\
    \ -c 23)\n        local char24=$(echo $string | cut -c 24)\n        local char25=$(echo\
    \ $string | cut -c 25)\n        local char26=$(echo $string | cut -c 26)\n   \
    \     local char27=$(echo $string | cut -c 27)\n        local char28=$(echo $string\
    \ | cut -c 28)\n        local char29=$(echo $string | cut -c 29)\n        local\
    \ char30=$(echo $string | cut -c 30)\n        local char31=$(echo $string | cut\
    \ -c 31)\n        local char32=$(echo $string | cut -c 32)\n        local char33=$(echo\
    \ $string | cut -c 33)\n        local char34=$(echo $string | cut -c 34)\n   \
    \     local char35=$(echo $string | cut -c 35)\n        local char36=$(echo $string\
    \ | cut -c 36)\n        local char37=$(echo $string | cut -c 37)\n        local\
    \ char38=$(echo $string | cut -c 38)\n        local char39=$(echo $string | cut\
    \ -c 39)\n        local char40=$(echo $string | cut -c 40)\n        local char41=$(echo\
    \ $string | cut -c 41)\n        local char\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpqcc_qoc7.sh: line 69: syntax error near unexpected token `}''\n/tmp/tmpqcc_qoc7.sh:
    line 69: `}''\n"'
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    [[ \"$1\"\
    \ =~ ^.{3,}$ ]] || return 1\n    [[ \"${#1}\" -lt 3 ]] || return 1\n    local\
    \ str=$1\n    local result\n    result=0\n    for (( i = 0; i < ${#str}; i++ ));\
    \ do\n        result=$(($result || $(( ${str:i:3} == ${str:i:1} ))));\n    done\n\
    \    return $(($result == 0))\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s\n\
    \    s=\"$1\"\n    if [[ \"$s\" =~ ^.{3,}$ && ${#s} -eq 3 ]]; then\n        for\
    \ ((i=0; i < ${#s}; i++))\n        do\n            if [[ $((i % 3)) -ne 0 ]];\
    \ then\n                if [[ ${s[i]} == ${s[i+1]} ]]; then\n                \
    \    [[ -z ${s[i+2]} ]] || return 1\n                fi\n            fi\n    \
    \    done\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    if [[ \"${#string}\" -lt 3 ]]; then\n        echo\
    \ \"false\"\n    else\n        local i=1\n        while [[ $((i++)) -lt ${len}\
    \ ]]; do\n            if [[ ${string:$i:1} == ${string:$i:1} ]]; then\n      \
    \          echo \"true\"\n                break\n            else\n          \
    \      echo \"false\"\n            fi\n        done\n    fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    [[ $s == $'aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ' ]] || return\n\
    \n    # find out how many characters are in the string.\n    # and find out how\
    \ many consecutive characters are the same as the original.\n    local count_1=1\n\
    \    local count_2=1\n    for i in $(seq 1 $((${#s}-1)))\n    do\n        [[ \"\
    ${s:$i:1}\" == \"${s:$((i+1))}\" ]] && ((count_1=$(expr ${count_1} + 1))) || ((count_2=$(expr\
    \ ${count_2} + 1)));\n    done\n\n    ((${count_1} > 3)) || return\n    ((${count_2}\
    \ < 3)) || return\n\n    for i in $(seq 2 $((${#s}-1)))\n    do\n        [[ \"\
    ${s:$i:1}\" == \"${s:$((i-1))}\" ]] && ((count_1=$(expr ${count_1} + 1))) || ((count_2=$(expr\
    \ ${count_2} + 1)));\n    done\n\n    ((${count_1} > 3)) || return\n    ((${count_2}\
    \ < 3)) || return\n\n    echo $0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local a=\"\
    $1\"\n\n  local len=\"$((${#a}+1))\"\n  if [ \"${#a}\" -lt 3 ]; then\n    return\
    \ 1\n  fi\n  for ((i = 0; i < len ; i++))\n  do\n    local j=0\n    while [ \"\
    $j\" -lt 3 ]\n    do\n      j=$((j+1))\n      if [ \"$j\" -eq \"${#a}\" ]; then\n\
    \        j=0\n        echo \"${a}\" | grep -q -v \" ${a}\"\n        if [ $? ==\
    \ 0 ]; then\n          echo \"true\"\n        else\n          echo \"false\"\n\
    \        fi\n        return 0\n      fi\n      local c=\"${i:$j}\"\n      if !\
    \ [[ \"$c\" =~ ^[a-z]$ ]]; then\n        return 0\n      fi\n    done\n  done\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local -r\
    \ s=$1\n  echo \"${#s}\" == \"${#s// // 1}\" || return 1\n  echo \"${s}\"\n  local\
    \ i=0\n  local -a map\n  local -a count\n  map=()\n  count=0\n  while [ \"${count}\"\
    \ -gt 0 ]; do\n    map[${#map[@]:$i}]=true\n    (( i += 1 ))\n    (( count-- ))\n\
    \  done\n  for (( i=0; i <= ${#s}; i++ )); do\n    if ! ${map[$i]}; then\n   \
    \   return 0\n    fi\n  done\n  return 1\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp00o1w_8o.sh: line 22: ${#s// // 1}: bad substitution\n'''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  string=$1\n\
    \  length=${#string}\n  if [ $length -le 3 ]\n    then\n      for (( c = 0; c\
    \ < length; c++ ))\n        do\n          if [[ ${string:c:3} == *[A-z] ]]\n \
    \           then\n              return 1\n          fi\n        done\n      return\
    \ 0\n    else\n      return 0\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local -n\
    \ a=$1\n  [[ \"${#a}\" -lt 3 ]] && return 1\n  local -i t=0\n  while [[ $t -lt\
    \ 3 ]]; do\n    [[ \"${a[$((t++))}\" != \"${a[$(((t-1)))]}\" ]] ] && return 1\n\
    \  done\n  [[ \"${#a}\" -eq 3 ]] && return 0\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjgo9_r6r.sh: line 25: syntax error near unexpected token `]\''\n/tmp/tmpjgo9_r6r.sh:
    line 25: `    [[ "${a[$((t++))}" != "${a[$(((t-1)))]}" ]] ] && return 1\''\n'''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local IFS=$'\\\
    n'\n    local x\n    local happy=\"^.{3,}\"\n    local notHappy=\"^(.)\\1{2,}\"\
    \n    for x in \"${@}\"; do\n        if [[ \"$x\" =~ $happy ]]; then\n       \
    \     echo \"true\"\n        fi\n        if [[ \"$x\" =~ $notHappy ]]; then\n\
    \            echo \"false\"\n        fi\n    done\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    if [[ $1\
    \ =~ ^[a-zA-Z]+$ ]];\n    then\n        local len=$((${#1}))\n        if [[ $len\
    \ -gt 3 ]];\n        then\n            local a=${1:0:3}\n            local b=${1:3:3}\n\
    \            local c=${1:6:3}\n            local d=${1:9:3}\n            local\
    \ e=${1:12:3}\n            local f=${1:15:3}\n            local g=${1:18:3}\n\
    \            local h=${1:21:3}\n            local i=${1:24:3}\n            local\
    \ j=${1:27:3}\n            local k=${1:30:3}\n            local l=${1:33:3}\n\
    \            local m=${1:36:3}\n            local n=${1:39:3}\n            local\
    \ o=${1:42:3}\n            local p=${1:45:3}\n            local q=${1:48:3}\n\
    \            local r=${1:51:3}\n            local s=${1:54:3}\n            local\
    \ t=${1:57:3}\n            local u=${1:60:3}\n            local v=${1:63:3}\n\
    \            local w=${1:66:3}\n            local x=${1:69:3}\n            local\
    \ y=${1:72:3}\n            local z=${1:75:3}\n            if [ $a == $b ] && $b\
    \ == $c ] && $c == $d ] && $d == $e ] && $e == $f ] && $f == $g ] && $g == $h\
    \ ] && $h == $i ] && $i == $j ] && $j == $k ] && $k == $l ] && $l == $m ] && $m\
    \ == $n ] && $n == $o ] && $o == $p ] && $p == $q ] && $q == $r ] && $r == $s\
    \ ] && $s == $t ] && $t == $u ] && $u == $v ] && $v == $w ] && $w == $x ] && $x\
    \ == $y ] && $y == $z ];\n            then\n                echo \"true\"\n  \
    \          else\n                echo \"false\"\n            fi\n        else\n\
    \            echo \"false\"\n        fi\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    [[ ${#1}\
    \ -ge 3 ]] || return 0\n    local i j\n    for i in $(seq 1 ${#1}); do\n     \
    \   # let ((j=0))\n        while [ $((j++)) -lt 3 ]; do\n            [[ \"${1:$i:1}\"\
    \ == \"${1:$((j)):1}\" ]] || return 1\n        done\n    done\n    return 0\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local _line=$1\n\
    \  local _length=${#_line}\n  if (( $_length < 3 )); then\n    return 0\n  fi\n\
    \  local _counter=0 \n  while (( $_counter < 3 )); do\n    if (( ${_line:$((_counter+1)):$((_length-1))}\
    \ != ${_line:$((_counter)):$((_length-1))} )); then\n      return 0\n    fi\n\
    \    ((_counter++))\n  done\n  return 1\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s\n\
    \    s=\"${1}\"\n    len=${#s}\n    echo $len\n    if [ $len -le 3 ]; then\n \
    \       echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078640
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  if [ -n \"$string\" ]; then\n    local count=0\n    local count2=0\n \
    \   local count3=0\n    for char in $string; do\n      if [ $char == \"a\" ] ||\
    \ [ $char == \"e\" ] || [ $char == \"i\" ] || [ $char == \"o\" ] || [ $char ==\
    \ \"u\" ]; then\n        count=$(( count+1 ))\n      fi\n      if [ $count -eq\
    \ 3 ]; then\n        local count2=$(( count2+1 ))\n      fi\n      if [ $count2\
    \ -eq 3 ]; then\n        local count3=$(( count3+1 ))\n      fi\n    done\n  \
    \  if [ $count -gt 3 ] || [ $count2 -gt 3 ] || [ $count3 -gt 3 ]; then\n     \
    \ echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    echo \"string:\
    \ \\\"$string\\\" is null\"\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=$1\n\
    \    local len=$((${#str}+2))\n    local count=1\n    local result\n    while\
    \ [ ${count} -le ${len} ]\n    do\n        result=$(echo \"${str}\" | grep -c\
    \ \"${str:$count:1}\")\n        if [ ${result} -eq 1 ]\n        then\n       \
    \     count=`expr $count + 1`\n        else\n            count=`expr $count +\
    \ 1`\n        fi\n    done\n    if [ ${count} -eq 3 ]\n    then\n        result=\"\
    true\"\n    else\n        result=\"false\"\n    fi\n    echo $result\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    length=$(expr length $s)\n    if [ $length -ge 3 ]; then\n        for ((i=0;\
    \ i<3; i++)); do\n            for ((j=0; j<3; j++)); do\n                if [\
    \ \"${s:$i:$j}\" = $(echo $s | cut -c $i+$j) ]; then\n                    let\
    \ count++\n                fi\n            done\n        done\n        if [[ $count\
    \ -gt 1 ]]; then\n            echo \"true\"\n        else\n            echo \"\
    false\"\n        fi\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"cut: invalid byte/character position \xe2\x80\x98+0\xe2\x80\x99\nTry
    ''cut --help'' for more information.\n/tmp/tmpdil1q763.sh: line 26: [: : unary
    operator expected\ncut: invalid byte/character position \xe2\x80\x98+1\xe2\x80\x99\nTry
    ''cut --help'' for more information.\n/tmp/tmpdil1q763.sh: line 26: [: a: unary
    operator expected\ncut: invalid byte/character position \xe2\x80\x98+2\xe2\x80\x99\nTry
    ''cut --help'' for more information.\n/tmp/tmpdil1q763.sh: line 26: [: ab: unary
    operator expected\ncut: invalid byte/character position \xe2\x80\x98+0\xe2\x80\x99\nTry
    ''cut --help'' for more information.\n/tmp/tmpdil1q763.sh: line 26: [: : unary
    operator expected\ncut: invalid byte/character position \xe2\x80\x98+1\xe2\x80\x99\nTry
    ''cut --help'' for more information.\n/tmp/tmpdil1q763.sh: line 26: [: b: unary
    operator expected\ncut: invalid byte/character position \xe2\x80\x98+2\xe2\x80\x99\nTry
    ''cut --help'' for more information.\n/tmp/tmpdil1q763.sh: line 26: [: bc: unary
    operator expected\ncut: invalid byte/character position \xe2\x80\x98+0\xe2\x80\x99\nTry
    ''cut --help'' for more information.\n/tmp/tmpdil1q763.sh: line 26: [: : unary
    operator expected\ncut: invalid byte/character position \xe2\x80\x98+1\xe2\x80\x99\nTry
    ''cut --help'' for more information.\n/tmp/tmpdil1q763.sh: line 26: [: c: unary
    operator expected\ncut: invalid byte/character position \xe2\x80\x98+2\xe2\x80\x99\nTry
    ''cut --help'' for more information.\n/tmp/tmpdil1q763.sh: line 26: [: cd: unary
    operator expected\n"'
  stdout: b''
  timestamp: 1660078641
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  echo \"$1\"\
    \ | wc -w | xargs -n1 -r echo \"$1\" | grep -q '^3'\n  echo \"$1\" | xargs -n1\
    \ -r echo \"$1\" | grep -q '^3\\|^1\\|^2\\|^\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\\
    )\\(.\\)'\n  echo \"$1\" | xargs -n1 -r echo \"$1\" | grep -q '^3\\|^1\\|^2\\\
    |^\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)'\n  echo \"$1\" | xargs -n1 -r echo\
    \ \"$1\" | grep -q '^3\\|^1\\|^2\\|^3\\|^\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\\
    (.\\)'\n  echo \"$1\" | xargs -n1 -r echo \"$1\" | grep -q '^3\\|^1\\|^2\\|^3\\\
    |^3\\|^\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)'\n  echo \"$1\" | xargs -n1 -r echo\
    \ \"$1\" | grep -q '^3\\|^1\\|^2\\|^3\\|^3\\|^3\\|^\\(.\\)\\(.\\)\\(.\\)\\(.\\\
    )\\(.\\)'\n  echo \"$1\" | xargs -n1 -r echo \"$1\" | grep -q '^3\\|^1\\|^2\\\
    |^3\\|^3\\|^3\\|^3\\|^\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)'\n  echo \"$1\" | xargs\
    \ -n1 -r echo \"$1\" | grep -q '^3\\|^1\\|^2\\|^3\\|^3\\|^3\\|^3\\|^3\\|^\\(.\\\
    )\\(.\\)\\(.\\)\\(.\\)\\(.\\)'\n  echo \"$1\" | xargs -n1 -r echo \"$1\" | grep\
    \ -q '^3\\|^1\\|^2\\|^3\\|^3\\|^3\\|^3\\|^3\\|^3\\|^\\(.\\)\\(.\\)\\(.\\)\\(.\\\
    )\\(.\\)'\n  echo \"$1\" | xargs -n1 -r echo \"$1\" | grep -q '^3\\|^1\\|^2\\\
    |^3\\|^3\\|^3\\|^3\\|^3\\|^3\\|^3\\|^\\(.\\)\\(.\\)\\(.\\)\\(.\\)\\(.\\)'\n  echo\
    \ \"$1\" | xargs -n1 -r echo \"$1\" | grep -q '^\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp9nks1g6n.sh: line 31: unexpected EOF while looking for matching
    `''''\n/tmp/tmp9nks1g6n.sh: line 51: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local -r\
    \ string=\"$1\"\n  [[ -z \"$string\" ]] && return 1\n  [[ \"$string\" == *\"$string\"\
    * ]] || return 1\n  [[ -z \"$string\"[2,$((${#string} + 1))] ]] && return 1\n\
    \  local i=2 count=1\n  while [ $i -le $((${#string} - 1)) ]; do\n    (( count++\
    \ ))\n    (( i++ ))\n  done\n  [[ $(echo \"$string\" | sort -u | wc -l ) == ${#string}\
    \ ]] && return 1\n  local j=1 count2=1 result=0\n  while [ $j -le $((${#string}\
    \ - 3)) ]; do\n    [[ $(echo \"$string\" | sort -u | cut -c $j | wc -l ) == 1\
    \ ]] && result=1\n    (( count2++ ))\n    (( j++ ))\n  done\n  [ $result -eq 1\
    \ ] && return 1\n  return 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    if [[ $length -gt 3 ]]; then\n    \
    \    [[ $string == *[a-zA-Z0-9]* ]] || return 1\n        local count=1\n     \
    \   for i in $(seq 1 \"$length\"); do\n            [[ \"${string:$i:$i}\" != \"\
    ${string:($((i+1)))}\" ]] || count=$((count+1))\n        done\n        [[ \"$count\"\
    \ -ge 3 ]] || return 1\n    else\n        return 0\n    fi\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local -i\
    \ i\n  local str=\"$1\"\n\n  echo -n \"$str\" | grep -q $'^[[:alnum:]]*[[:alnum:]]*$'\
    \ && return 0\n  echo -n \"$str\" | grep -q $'^[[:alnum:]]*[[:alnum:]]+$' && return\
    \ 0\n  echo -n \"$str\" | grep -q $'^[[:alnum:]]*$'\n  local -i len=\"$(( ${#str}\
    \ ))\"\n  [[ $len -gt 3 ]] || return 1\n\n  for i in $(seq 0 \"$(( ${#str} - 4\
    \ ))\"); do\n    if echo \"$str\" | grep -q $'^[[:alpha:]]{3}$' && echo \"$str\"\
    \ | grep -q $'^[[:alpha:]]{3}[[:alpha:]]{3}$' && echo \"$str\" | grep -q $'^[[:alpha:]]{3}[[:alpha:]]{3}[[:alpha:]]{3}$';\
    \ then\n      echo -n \"false\" && return 0\n    fi\n  done\n  echo -n \"true\"\
    \ && return 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=$(expr ${#s})\n    if [[ ${len} -lt 3 ]]; then\n        echo \"\
    false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: -1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local count\n    local prev\n    prev=\"a\"\n    count=0\n    while [[ $s\
    \ ]]; do\n        if [[ \"$s\" == \"$prev\" ]]; then\n            ((count++))\n\
    \        else\n            if (( count == 3 )); then\n                if [[ \"\
    $prev\" == \"$s\" ]]; then\n                    return 0\n                else\n\
    \                    return 1\n                fi\n            else\n        \
    \        count=0\n            fi\n        fi\n        prev=\"$s\"\n    done\n\
    \    return 1\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=37>
  stdout: <_io.BufferedReader name=29>
  timestamp: 1660078646
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local i\
    \ j k l n\n    local str=\"$1\"\n    local num_hapsh\n    local hapsh\n    [[\
    \ \"$str\" =~ ^.{3,}$ ]] || return 1\n    for (( i = 0; i < \"${#str}\"; i++ ));\
    \ do\n        num_hapsh=0\n        for (( j = 1; j < \"${#str}\"; j++ )); do\n\
    \            if [[ $((j-i)) == 1 ]]; then\n                continue\n        \
    \    else\n                if [[ ${str:$j:1} == ${str:$j+1:1} ]]; then\n     \
    \               num_hapsh=1\n                    break\n                fi\n \
    \           fi\n        done\n        if [[ $num_hapsh == 1 ]]; then\n       \
    \     return 0\n        fi\n    done\n    return 1\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local a=$1\n\
    \  local b=$a\n  while [[ \"$b\" != \"a\" ]]; do\n    echo \"$b\"\n    b=\"${b:0:2}${b:2:2}${b:3:2}${b:4:2}${b:5:2}${b:6:2}${b:7:2}${b:8:2}${b:9:2}${b:10:2}${b:11:2}${b:12:2}${b:13:2}${b:14:2}${b:15:2}${b:16:2}${b:17:2}${b:18:2}${b:19:2}${b:20:2}${b:21:2}${b:22:2}${b:23:2}${b:24:2}${b:25:2}${b:26:2}${b:27:2}${b:28:2}${b:29:2}${b:30:2}${b:31:2}${b:32:2}${b:33:2}${b:34:2}${b:35:2}${b:36:2}${b:37:2}${b:38:2}${b:39:2}${b:40:2}${b:41:2}${b:42:2}${b:43:2}${b:44:2}${b:45:2}${b:46:2}${b:47:2}${b:48:2}${b:49:2}${b:50:2}${b:51:2}${b:52:2}${b:53:2}${b:54:2}${b:55:2}${b:56:2}${b:57:2}${b:58:2}${b:59:2}${b:60:2}${b:61:2}${b:62:2}${b:63:2}${b:64:2}${b:65:2}${b:66:2}${b:67:2}${b:68:2}${b:69:2}${b:70:2}${b:71:2}${b:72:2}${b:73:2}${b:74:2}${b:75:2}${b:76:2}${b:77:2}${b:78:2}${b:79:2}${b:80:2}${b:81:2}${b:82:2}${b:83:2}${b:84:2}${b:85:2}${b:86:2}${b:87:2}${b:88:2}${b:89:2}${b:90:2}${b:91:2}${b:92:2}${b:93:2}${b:94:2}${b:95:2}${b:96:2}${b:97:2}${b:98:2}${b:99:2}${b:100:2}${b:101:2}${b:\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfov2cdmv.sh: line 41: unexpected EOF while looking for matching
    `"\''\n/tmp/tmpfov2cdmv.sh: line 45: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660078641
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s='$1';\n\
    \  [[ -z \"$s\" ]] && return 1;\n  local len=${#s};\n  [[ -z \"$len\" ]] && return\
    \ 1;\n  [[ -z \"$3\" ]] && return 1;\n  [[ -z \"$len\" -gt 3 ]] && return 1;\n\
    \  local i=0;\n  while [ \"$i\" -lt \"$len\" ]; do\n    local c=${s:$i:1};\n \
    \   [[ \"$c\" == \"$s\" ]] && return 0;\n    [[ \"$c\" != \"a\" && \"$c\" != \"\
    e\" && \"$c\" != \"i\" && \"$c\" != \"o\" && \"$c\" != \"u\" ]] && return 0;\n\
    \    local j=$((i+3));\n    while [ \"$j\" -lt \"$len\" ]; do\n      local c=${s:$j:1};\n\
    \      [[ \"$c\" == \"$s\" ]] && return 0;\n      [[ \"$c\" != \"a\" && \"$c\"\
    \ != \"e\" && \"$c\" != \"i\" && \"$c\" != \"o\" && \"$c\" != \"u\" ]] && return\
    \ 0;\n      j=$((j+1));\n    done\n    i=$((i+1));\n  done\n  return 1;\n}\n\n\
    candidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5c2o240r.sh: line 26: syntax error in conditional expression\n/tmp/tmp5c2o240r.sh:
    line 26: syntax error near `-gt\''\n/tmp/tmp5c2o240r.sh: line 26: `  [[ -z "$len"
    -gt 3 ]] && return 1;\''\n'''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  # Your code here\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  [[ \"$string\" =~ ^[[:alpha:]]{3,}$ ]] || return 1\n  [[ \"$string\" =~\
    \ ^[[:alpha:]]{3,}\\([[:alpha:]]{3}\\)\\+[[:alpha:]]{3}$ ]] || return 1\n  return\
    \ 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"\
    false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\"\
    ) = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate\
    \ \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \n  # Return True if length of string >=3 and every 3 consecutive letters are\
    \ distinct\n  # Return False otherwise\n  local i=0 j=0 charcount=0 result=0 char\n\
    \n  while [ $i -lt ${#string} ]; do\n    char=${string:$i:1}\n    charcount=$((charcount+1))\n\
    \    i=$((i+1))\n    if ((j % 3 == 0)); then\n      if [ \"$char\" != \"${string:$j:1}\"\
    \ ]; then\n        charcount=$((charcount-1))\n        result=$((result+1))\n\
    \      fi\n      j=$((j+1))\n    else\n      j=$((j+1))\n    fi\n  done\n\n  if\
    \ ((charcount >= 3)); then\n    if ((result == 0)); then\n      return 0\n   \
    \ else\n      return 1\n    fi\n  else\n    return 0\n  fi\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local IFS=$'\\\
    n';\n    local a=\"`awk '{print \\$0}'`\"\n    local b=\"`awk '{print \\$1}'`\"\
    \n    local c=\"`awk '{print \\$2}'`\"\n    local d=\"`awk '{print \\$3}'`\"\n\
    \    local e=\"`awk '{print \\$4}'`\"\n    local f=\"`awk '{print \\$5}'`\"\n\
    \    local g=\"`awk '{print \\$6}'`\"\n    local h=\"`awk '{print \\$7}'`\"\n\
    \    local i=\"`awk '{print \\$8}'`\"\n    local j=\"`awk '{print \\$9}'`\"\n\
    \    local k=\"`awk '{print \\$10}'`\"\n    local l=\"`awk '{print \\$11}'`\"\n\
    \    local m=\"`awk '{print \\$12}'`\"\n    local n=\"`awk '{print \\$13}'`\"\n\
    \    local o=\"`awk '{print \\$14}'`\"\n    local p=\"`awk '{print \\$15}'`\"\n\
    \    local q=\"`awk '{print \\$16}'`\"\n    local r=\"`awk '{print \\$17}'`\"\n\
    \    local s=\"`awk '{print \\$18}'`\"\n    if [[ ${#s} -lt 3 ]] || ([[ ${#s}\
    \ -gt 3 && ${#b} -lt 3 ]] || ([[ ${#s} -gt 3 && ${#c} -lt 3 ]] || ([[ ${#s} -gt\
    \ 3 && ${#d} -lt 3 ]] || ([[ ${#s} -gt 3 && ${#e} -lt 3 ]] || ([[ ${#s} -gt 3\
    \ && ${#f} -lt 3 ]] || ([[ ${#s} -gt 3 && ${#g} -lt 3 ]] || ([[ ${#s} -gt 3 &&\
    \ ${#h} -lt 3 ]] || ([[ ${#s} -gt 3 && ${#i} -lt 3 ]] || ([[ ${#s} -gt 3 && ${#j}\
    \ -lt 3 ]] || ([[ ${#s} -gt 3 && ${#k} -lt 3 ]] || ([[ ${#s} -gt 3 && ${#l} -lt\
    \ 3 ]] || ([[ ${#s} -gt 3 && ${#m} -lt 3 ]] \n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpppps5o_3.sh: line 42: syntax error near unexpected token `}''\n/tmp/tmpppps5o_3.sh:
    line 42: `}''\n"'
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  echo \"$1\"\
    \ | wc -l | xargs -I{} echo '3<{}&&!($1 |sort | uniq -d)'\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    ${1}\"\n  [[ -z \"${string}\" ]] && return 1\n  local len=\"${#string}\"\n  [[\
    \ ${len} -lt 3 ]] && return 1\n  local last=\"${string}\"\n  [[ \"${last:0:3}\"\
    \ == \"${last:0:3}\" ]] && return 0\n  local i\n  for ((i=3; i<${#last}-3; i++));\
    \ do\n    local j\n    for ((j=0; j<3; j++)); do\n      [[ \"${last:$i:3}\" ==\
    \ \"${last:$i:$j}\" ]] && return 0\n    done\n  done\n  return 1\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s=$1\n\
    \  local len=$((${#s}))\n  if [[ $len -gt 3 ]]; then\n    local i\n    local j\n\
    \    for ((i=0;i<$len;i++)); do\n      for ((j=$i;j<$len;j++)); do\n        if\
    \ [[ ${s:$i:1} = ${s:j:1} ]]; then\n          echo \"false\"\n          exit 0\n\
    \        fi\n      done\n    done\n  else\n    echo \"true\"\n    exit 0\n  fi\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    read -n1\
    \ char\n    while [[ $char != \"\\c\" ]] && [[ $char !=\"$\" ]] && [[ $char !=\"\
    \\n\" ]] ; do\n        echo -ne \"$char\"\n        read -n1 char\n    done\n}\n\
    \ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg11ffd_2.sh: line 22: conditional binary operator expected\n/tmp/tmpg11ffd_2.sh:
    line 22: syntax error near `!="$"\''\n/tmp/tmpg11ffd_2.sh: line 22: `    while
    [[ $char != "\\c" ]] && [[ $char !="$" ]] && [[ $char !="\\n" ]] ; do\''\n'''
  stdout: b''
  timestamp: 1660078641
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local STRING=\"\
    $1\"\n    local length=\"${#STRING}\"\n    local i\n    local j\n    local result\n\
    \    local letter\n    for ((i=0; i<length; i++)) {\n        letter=\"${STRING[i]}\"\
    \n        for ((j=i+1; j<length; j++)) {\n            if [[ \"${STRING[j]}\" ==\
    \ \"${letter}\" ]]; then\n                (( j > i )) && break\n            fi\n\
    \        done\n        (( j >= length )) && result=true\n        (( i > 0 )) &&\
    \ result=false\n        if (( result )); then\n            break\n        fi\n\
    \    }\n    echo \"$result\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp5bcnli4f.sh: line 33: syntax error near unexpected token `done''\n/tmp/tmp5bcnli4f.sh:
    line 33: `        done''\n"'
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    len=$1\n\
    \    echo $len |\n    awk '{\n    s=$1;\n    for(i=1;i<=len-2;i++)\n    {\n  \
    \      print s[i]\n    }\n    print s[len-1]\n    }'\n}\n\ncandidate() {\n   \
    \ is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\"\
    \ ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'b"awk: cmd. line:7: (FILENAME=- FNR=1) fatal: attempt to use scalar `s''
    as an array\n"'
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    string=\"\
    ${1}\"\n    length=$(expr length \"$string\")\n    true_count=0\n    false_not_distinct=0\n\
    \    for ((i=1;i<=$length;i++))\n    do\n        letter=$(expr substr \"$string\"\
    \ \"$i\" 1)\n        (( $i == 1 )) && true_count=$true_count+$letter\n       \
    \ (( $i != $length-1 )) && false_count=$false_count+$letter\n    done\n    if\
    \ (( $true_count+$false_not_distinct >= 3 ))\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    if [[ \"\
    ${#1}\" -lt 3 ]]; then\n        echo \"false\"\n    else\n        # use two variables\
    \ to store the first and second letters\n        first=\"${1:0:1}\"\n        second=\"\
    ${1:1:1}\"\n        # use third variable to store third letter\n        third=\"\
    ${1:2:1}\"\n        # if the third letter is different from the first two letters\n\
    \        if [ \"$third\" != \"$first\" ] && [ \"$third\" != \"$second\" ]; then\n\
    \            echo \"true\"\n        else\n            echo \"false\"\n       \
    \ fi\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    local length=\"${#string}\"\n    if [ \"${length}\" -lt 3 ]; then\n\
    \        return false\n    fi\n    local c=0\n    for (( i=0;i<${#string};i++\
    \ )); do\n        if [ \"${string[i]}\" != \"${string[c-4]}\" ]; then\n      \
    \      c=$(( c + 1 ))\n        fi\n    done\n    if [ \"${c}\" -eq 4 ]; then\n\
    \        return true\n    fi\n    return false\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmps9qc39w4.sh: line 24: return: false: numeric argument required\n'''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s\n\
    \    s=\"${1}\"\n    if [[ \"${#s}\" -gt 3 ]]; then\n        echo \"false\"\n\
    \    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  echo \"$1\"\
    \ | awk '{\n    for(i=1;i<=NF;i++) {\n      for(j=i+1;j<=NF;j++) {\n        printf\
    \ \"%s \" $i $j\n      }\n      printf \"\\n\"\n    }\n  }'\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    echo \"\
    $1\" | awk '{\n            len=length($1)\n            if(len < 3)\n         \
    \   {\n                printf( \"false\\n\" )\n                return\n      \
    \      }\n\n            for(i=2; i<=len-3; i++)\n            {\n             \
    \   for(j=2; j<=i-3; j++)\n                {\n                    for(k=2; k<=j-3;\
    \ k++)\n                    {\n                        if($i==$j && $i==$k &&\
    \ $i==$k)\n                        {\n                            printf( \"true\\\
    n\" )\n                            return\n                        }\n       \
    \             }\n                }\n            }\n\n            printf( \"false\\\
    n\" )\n        }'\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"awk: cmd. line:6:                 return\nawk: cmd. line:6:                 ^
    `return'' used outside function context\nawk: cmd. line:18:                             return\nawk:
    cmd. line:18:                             ^ `return'' used outside function context\n"'
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local STR=\"\
    $1\"\n\n  # Length check\n  if [ \"$STR\" == \"$STR\" ]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  echo \"$1\"\
    \ | tr -d ' ' | cut -c3- | sort -u | wc -w | bc\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s=\"\
    $1\"\n  local n=\"${#s}\"\n  (( n >= 3 )) || return 1\n  local x=\"${s:0:3}\"\n\
    \  local y=\"${s:3:3}\"\n  (( x == \"${y}\" )) || return 1\n  local z=\"${s:6:4}\"\
    \n  local a=\"${s:9:2}\"\n  local b=\"${s:12:2}\"\n  (( a != b )) || return 1\n\
    \  (( x == y )) || return 1\n  (( x == z )) || return 1\n  (( y == z )) || return\
    \ 1\n  (( x == a )) || return 1\n  (( y == a )) || return 1\n  (( z == a )) ||\
    \ return 1\n  return 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local len=${#string}\n  if [ $len -gt 3 ]; then\n    for i in $(seq 0 3); do\n\
    \      if [[ \"$string\" != ${string::$i} ]]; then\n        echo \"$string\"\n\
    \        return 0\n      fi\n    done\n  fi\n  echo \"$string\"\n  return 0\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string\
    \ len $((${#1}))\n    while [ \"$len\" -gt \"3\" ]\n    do\n        echo $1\n\
    \        let \"len-=3\"\n    done\n    local i j $((len-1))\n    for ((i = 0;\
    \ i <= len; i++)); do\n        local string\n        local j\n        for ((j\
    \ = 0; j < i; j++)); do\n            if [ \"$i\" -eq \"$j\" ]; then\n        \
    \        local c\n                c=$(echo $1 | cut -c-1 <<<$(echo $1 | cut -c\
    \ $i-1))\n                string=\"$string$c\"\n            else\n           \
    \     local c\n                c=$(echo $1 | cut -c-1 <<<$(echo $1 | cut -c $j))\n\
    \                string=\"$string$c\"\n            fi\n        done\n        echo\
    \ ${string%?}\n    done\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpz87vj67p.sh: line 21: local: `1'': not a valid identifier\n/tmp/tmpz87vj67p.sh:
    line 22: [: : integer expression expected\n/tmp/tmpz87vj67p.sh: line 27: local:
    `-1'': not a valid identifier\n"'
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local len=${#string}\n  local i=0 j=0\n  while [ $i -lt ${#string} ]\n\
    \  do\n    local letter=${string:$i:1}\n    local rest=${string:$((i + 1)):1}\n\
    \    local letter2=${rest:$j:1}\n    local rest2=${rest:$((j + 1)):1}\n    local\
    \ letter3=${rest2:$k:1}\n    local rest3=${rest2:$((k + 1)):1}\n    if [ ${#letter}\
    \ -eq 0 ]\n    then\n      return 1\n    fi\n    if [ $((i + 3)) -eq ${#string}\
    \ ]\n    then\n      return 1\n    fi\n    if [[ $((i + 2)) -ne ${#string} ]]\n\
    \    then\n      return 1\n    fi\n    if [[ -z ${letter} || ${letter2} = ${letter}\
    \ || ${letter3} = ${letter} ]]\n    then\n      return 1\n    fi\n    i=$((i +\
    \ 1))\n    j=$((j + 1))\n    k=$((k + 1))\n  done\n  echo -n \"true\"\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    echo \"${#string}\" | grep -q \"^3\" &&\n    awk '\n        BEGIN {\n\
    \            s=\"\"\n        }\n        {\n            s=$0\n        }\n     \
    \   END {\n            split(s,a,\"\")\n            for(j=0;j<length(a);j++) {\n\
    \                k=0\n                for(i=0;i<length(a);i++) {\n           \
    \         k++\n                    if(a[i] == a[j]) {\n                      \
    \  k=0 // reset count if it is not distinct\n                    }\n         \
    \       }\n                if(i==j && k >= 3) {\n                    print 1 //\
    \ print true\n                    break\n                }\n            }\n  \
    \          print 0 // print false\n        }\n    '\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local _s=$1\n\
    \  local _len=`echo $_s | wc -w`\n  if ((_len < 3)); then\n    return 1\n  fi\n\
    \  local _hapsh=1\n  local _flag=true\n  local _s1=\"${_s#????}\"\n  local _s2=\"\
    ${_s#??????}\"\n  local _s3=\"${_s#????????}\"\n  local _s4=\"${_s#??????????}\"\
    \n  local _s5=\"${_s#????????????}\"\n  local _s6=\"${_s#??????????????}\"\n \
    \ local _s7=\"${_s#????????????????}\"\n  local _s8=\"${_s#??????????????????}\"\
    \n  local _s9=\"${_s#????????????????????}\"\n  local _s10=\"${_s#??????????????????????}\"\
    \n  local _s11=\"${_s#????????????????????????????}\"\n  local _s12=\"${_s#????????????????????????????????????}\"\
    \n  local _s13=\"${_sn\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9fvqz8rr.sh: line 56: unexpected EOF while looking for matching
    `"\''\n/tmp/tmp9fvqz8rr.sh: line 60: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    echo \"\"\n    local length=0\n    while [ ${#string} -gt 0 ]; do\n     \
    \   local letter=$(echo \"${string}\" | cut -d \"^\" -f 1)\n        if [ \"$letter\"\
    \ = \"a\" ]; then\n            echo ${length}\n            return\n        fi\n\
    \        (( length = length + 1 ))\n        echo ${length}\n    done\n    echo\
    \ 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"\
    false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\"\
    ) = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate\
    \ \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local a=\"\
    $(echo \"$1\" | tr a-z A-Z)\"\n    local b=\"$(echo \"$1\" | tr A-Z a-z)\"\n \
    \   local c=\"$(echo \"$1\" | tr a-z A-Z)\"\n    local d=\"$(echo \"$1\" | tr\
    \ A-Z a-z)\"\n    local e=\"$(echo \"$1\" | tr a-z A-Z)\"\n    local f=\"$(echo\
    \ \"$1\" | tr A-Z a-z)\"\n    local g=\"$(echo \"$1\" | tr a-z A-Z)\"\n    local\
    \ h=\"$(echo \"$1\" | tr A-Z a-z)\"\n    local i=\"$(echo \"$1\" | tr a-z A-Z)\"\
    \n    local j=\"$(echo \"$1\" | tr A-Z a-z)\"\n    local k=\"$(echo \"$1\" | tr\
    \ a-z A-Z)\"\n    local l=\"$(echo \"$1\" | tr A-Z a-z)\"\n    local m=\"$(echo\
    \ \"$1\" | tr a-z A-Z)\"\n    local n=\"$(echo \"$1\" | tr A-Z a-z)\"\n    local\
    \ o=\"$(echo \"$1\" | tr a-z A-Z)\"\n    local p=\"$(echo \"$1\" | tr A-Z a-z)\"\
    \n    local q=\"$(echo \"$1\" | tr a-z A-Z)\"\n    local r=\"$(echo \"$1\" | tr\
    \ A-Z a-z)\"\n    local s=\"$(echo \"$1\" | tr A-Z a-z)\"\n    local t=\"$(echo\
    \ \"$1\" | tr a-z A-Z)\"\n    local u=\"$(echo \"$1\" | tr A-Z a-z)\"\n    local\
    \ v=\"$(echo \"$1\" | tr a-z A-Z)\"\n    local w=\"$(echo \"$1\" | tr A-Z a-z)\"\
    \n    local x=\"$(echo \"$1\" | tr a-z A-Z)\"\n    local y=\"$(echo \"$1\" | tr\
    \ A-Z a-z)\"\n    local z=\"$(echo \"$1\" | tr a-z A-Z)\"\n    local A=\"$(echo\
    \ \"$1\" | tr A-Z a-z)\"\n    local B=\"$(echo \"$1\" | tr a-z A-Z)\"\n    local\
    \ C=\"$(echo \"$1\" | tr A-Z a-z)\"\n    local D=\"$(echo \"$1\" | tr a-z A-Z)\"\
    \n    local E=\"$(echo \"$1\" | tr A-Z a-z)\"\n    local F=\"$(echo \"$1\" | tr\
    \ a-z A-Z)\"\n    local G=\"$(echo \"$1\" | tr A-Z a-z)\"\n    local H=\"$(echo\
    \ \"$1\" | tr A-Z a-z)\"\n    local I=\"\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjkb2x6hc.sh: line 71: unexpected EOF while looking for matching
    `"\''\n/tmp/tmpjkb2x6hc.sh: line 75: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local a=${1:0:3}\n\
    \    local b=${1:3:3}\n    local c=${1:6:3}\n    local d=${1:9:3}\n\n    echo\
    \ \"${#a}\" | grep -q \"^3\" && echo \"true\" || echo \"false\"\n    echo \"${#b}\"\
    \ | grep -q \"^3\" && echo \"true\" || echo \"false\"\n    echo \"${#c}\" | grep\
    \ -q \"^3\" && echo \"true\" || echo \"false\"\n    echo \"${#d}\" | grep -q \"\
    ^3\" && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n        local\
    \ s=$1\n        if [[ $s == *[[:upper:]]* ]]; then\n                echo \"false\"\
    \n        else\n                echo \"true\"\n        fi\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local happy=\"false\"\n    local length=\"3\"\n    local test=\"a\" #aa bb\
    \ cc dd ee ff gg hh hi jk ll mm nn\n    for i in {1..$length}; do\n        #echo\
    \ \"$i ${test:i}\"\n        if [[ $string == ${test:$i} ]]; then\n           \
    \ echo \"true\"\n        else\n            echo \"false\"\n        fi\n    done\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1e5zcebj.sh: line 27: test: {1..3}: syntax error: operand expected
    (error token is "{1..3}")\n'''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  length=$(echo\
    \ $1 | wc -c)\n  if [ $length -gt 3 ]; then\n    exit\n  fi\n  a=\"\"\n  for i\
    \ in $(seq 0 $((length-2))); do\n    a+=$1$i\n  done\n  echo $a | uniq -d\n}\n\
    \ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=\"\
    $1\"\n    [[ \"$str\" == \"$str\" ]] && return 1\n    echo \"$str\" | grep -E\
    \ \"^.{3,}(\\{2\\})$\" > /dev/null\n}\n\ncandidate() {\n    is_happy \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local str=$1\n\
    \  local length\n  length=${#str}\n  [ $length -gt 3 ] || return 1\n  local flag=0\n\
    \  for i in {1..3};do\n    local n1=${str:$i:1}\n    local n2=${str:$i+1:1}\n\
    \    [ \"$n1\" != \"$n2\" ] && (( flag=1 ))\n  done\n  [ $flag -eq 0 ] && return\
    \ 1\n  return 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local -r\
    \ string=$1\n    # return 0 iff string is not hapsh\n    [ -z \"$string\" ] ||\
    \ [[ -z $(echo $string | tr a-z A-Z) ]] || [[ $(echo \"$string\" | wc -c) -lt\
    \ 3 ]] || (( $(echo \"$string\" | tr a-z A-Z | sort | uniq | wc -l) < 3 ))\n}\n\
    \ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local -i\
    \ count\n  count=0\n  for char in $*\n  do\n    if [ \"$count\" -eq 0 ]\n    then\n\
    \      if [ \"$(echo \"$char\" | uniq)\" = \"$char\" ]\n      then\n        ((count++))\n\
    \      fi\n      continue\n    fi\n    if [ \"$count\" -eq 3 ]\n    then\n   \
    \   if [ \"$(echo \"$char\" | uniq)\" = \"$char\" ]\n      then\n        ((count++))\n\
    \      else\n        ((count=0))\n      fi\n      continue\n    fi\n  done\n \
    \ if [ \"$count\" -lt 3 ]\n  then\n    echo false\n  else\n    echo true\n  fi\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\t[ -z \"$1\"\
    \ ] || [ -z \"${1}#\" ] || [ -z \"${1}%\" ] && echo \"invalid input\" && return\
    \ 1\n\tlocal happy=0\n\tfor (( c=0; c<${#1}; c+=3 )); do\n\t\tlocal x=\"${1}${1}${1}\"\
    \n\t\tlocal y=\"${1}${2}${1}\"\n\t\tlocal z=\"${2}${2}${2}\"\n\t\tif [ \"${x}\"\
    \ != \"${y}\" ] || [ \"${x}\" != \"${z}\" ]; then\n\t\t\thappy=1 && break\n\t\t\
    fi\n\tdone\n\t[ \"${happy}\" = 1 ] && return 0\n\techo \"false\" && return 1\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local str=\"\
    $1\"\n  echo \"$str\" | grep -q \"^.{3}\" || echo \"false\"\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local str=$1\n\
    \  if [ -z \"$str\" ]; then\n    echo \"Missing string\" >&2\n    return 1\n \
    \ fi\n  # echo \"$str\" | egrep -q '^.{3,}' && echo \"true\" || echo \"false\"\
    \n  # echo \"$str\" | egrep -q '^.{3,}' && echo \"true\" || echo \"false\"\n \
    \ echo \"$str\" | grep -q '^.{3,}'\n}\n\ncandidate() {\n    is_happy \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local STR=$1\n\
    \  local LENGTH=${#STR}\n  local HAPSH=\"yes\"\n  if [ $LENGTH -ge 3 ]; then\n\
    \    for (( i=3; i<=$LENGTH; i++ )); do\n      [[ \"$STR\" = \"${STR:$i:1}\" ]]\n\
    \    done\n    HAPSH=\"no\"\n  fi\n  echo \"$HAPSH\"\n}\n\ncandidate() {\n   \
    \ is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\"\
    \ ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local -n\
    \ string=\"$1\"\n\n    if [ \"$string\" != \"$string\" ] || [ \"$string\" == \"\
    \" ] ; then\n        echo \"false\"\n        return 0\n    fi\n\n    local length=\"\
    ${#string}\"\n    if [ \"$length\" -lt 3 ] ; then\n        echo \"false\"\n  \
    \      return 0\n    fi\n\n    local -a array\n    array=($string)\n\n    for\
    \ i in \"${!array[@]}\"; do\n        local c=\"${array[$i]}\"\n        for j in\
    \ \"${!array[@]}\"; do\n            local c2=\"${array[$j]}\"\n\n            if\
    \ [ \"$c\" == \"$c2\" ] ; then\n                array=\"$array[$j:$((i+1))]\"\n\
    \                break\n            fi\n        done\n    done\n\n    local -n\
    \ result=\"$1\"\n    local expected=false\n    for x in \"${array[@]}\"; do\n\
    \        expected=true\n        break\n    done\n\n    if [ \"$expected\" = true\
    \ ] ; then\n        echo \"true\"\n        return 0\n    fi\n\n    local -n result=\"\
    $1\"\n    local expected=false\n    for x in \"${array[@]}\"; do\n        expected=false\n\
    \        break\n    done\n\n    if [ \"$expected\" = true ] ; then\n        echo\
    \ \"true\"\n        return 0\n    fi\n\n    echo \"false\"\n    return 0\n}\n\n\
    candidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local _line=\"\
    $1\"\n  local length=\"${#_line}\"\n  if (( length < 3 )); then\n    echo \"false\"\
    \n  else\n    local index=\"0\"\n    while (( \"$index\" < \"$length\" )); do\n\
    \      local first_letter=\"${_line:$index:1}\"\n      local next_letter=\"${_line:$index:2}\"\
    \ \n      ((index+=3))\n      if (( \"${#first_letter}\" == \"${#next_letter}\"\
    \ )); then\n        local next_letter_not_equal=\"${next_letter}\"\n        if\
    \ [[ ! \"${first_letter}\" == *\"$next_letter_not_equal\"* ]]; then\n        \
    \  echo \"false\"\n        fi\n      else\n        echo \"true\"\n      fi\n \
    \   done\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\tlocal string=\"\
    $1\"\n\tlocal length=${#string}\n\tlocal count=0\n\tlocal char\n\tlocal prev\n\
    \tlocal char2\n\tlocal char3\n\tlocal char4\n\tlocal char5\n\tlocal char6\n\n\t\
    while [[ $length -gt 0 ]]; do\n\t\tchar=${string:0:1}\n\t\tchar2=\"${string:1:1}\"\
    \n\t\tchar3=\"${string:2:1}\"\n\t\tchar4=\"${string:3:1}\"\n\t\tchar5=\"${string:4:1}\"\
    \n\t\tchar6=\"${string:5:1}\"\n\n\t\tif [ \"$char\" != \"$char2\" ] || [ \"$char\"\
    \ != \"$char3\" ] || [ \"$char\" != \"$char4\" ] || [ \"$char\" != \"$char5\"\
    \ ] || [ \"$char\" != \"$char6\" ]; then\n\t\t\tlet count+=1\n\t\tfi\n\n\t\tstring=${string:1:1}\n\
    \t\tlength=$((${#string} - 1))\n\tdone\n\n\tif [[ $count -gt 3 ]]; then\n\t\t\
    return true\n\telse\n\t\treturn false\n\tfi\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpiudb0ee3.sh: line 51: return: false: numeric argument required\n'''
  stdout: b''
  timestamp: 1660078641
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s=$1\n\
    \  ((${#s} == 0)) && return 1\n  local i=0\n  while [ $i -lt ${#s} ]; do\n   \
    \ ((${#s} == $i)) && return 0\n    ((${#s} == $i+1)) || (let \"i+=1\")\n  done\n\
    \  ((${#s} >= 3)) && ((${#s}-3 <= ${#s}/3))\n  ((${#s} == $i)) && (let \"i+=1\"\
    )\n  ((${#s} >= $i)) && (let \"i-=1\")\n  ((${#s} >= $i)) && (let \"i+=1\")\n\
    \  ((${#s} >= $i)) && (let \"i+=1\")\n  ((${#s} >= $i)) && (let \"i+=1\")\n  ((${#s}\
    \ >= $i)) && (let \"i+=1\")\n  ((${#s} >= $i)) && (let \"i+=1\")\n  ((${#s} >=\
    \ $i)) && (let \"i+=1\")\n  ((${#s} >= $i)) && (let \"i+=1\")\n  ((${#s} >= $i))\
    \ && (let \"i+=1\")\n  ((${#s} >= $i)) && (let \"i+=1\")\n  ((${#s} >= $i)) &&\
    \ (let \"i+=1\")\n  ((${#s} >= $i)) && (let \"i+=1\")\n  ((${#s} >= $i)) && (let\
    \ \"i+=1\")\n  ((${#s} >= $i)) && (let \"i+=1\")\n  ((${#s} >= $i)) && (let \"\
    i+=1\")\n  ((${#s} >= $i)) && (let \"i+=1\")\n  ((${#s} >= $i)) && (let \"i+=1\"\
    )\n  ((${#s} >= $i)) && (let \"i+=1\")\n  ((${#s} >= $i)) && (let \"i+=1\")\n\
    \  ((${#s} >= $i)) && (let \"i+=1\")\n  ((${#s} >= $i)) && (let \"i+=1\")\n  ((${#s}\
    \ >= $i)) && (let \"i+=1\")\n  ((${#s} >= $i)) && (let \"i+=1\")\n  ((${#s} >=\
    \ $i)) && (let \"i+=1\")\n  ((${#s} >= $i)) && (let \"i+=1\")\n  ((${#s} >= $i))\
    \ && (let \"i+=1\")\n  ((${#s} >= $i)) && (let \"i+=1\")\n  ((${#s} >= $i)) &&\
    \ (\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"\
    false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\"\
    ) = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate\
    \ \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp9vc1ue45.sh: line 58: syntax error near unexpected token `}''\n/tmp/tmp9vc1ue45.sh:
    line 58: `}''\n"'
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    ${1}\"\n    # Your code here\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local IFS=$'\\\
    n'\n    local string=$1\n    local result=$?\n    if [ $result = 0 ]; then\n \
    \       if [[ ${#string} -ge 3 ]]; then\n            local i=0\n            local\
    \ j=0\n            local k=0\n            while [[ ${#string} -gt 0 ]]; do\n \
    \               local letter=$string[$i]\n                let i++\n          \
    \      if [[ -z ${string[$i]} ]]; then\n                    let j=$i\n       \
    \             let k=$i\n                    break\n                fi\n      \
    \          let j=$i\n                let k=$i\n            done\n            let\
    \ string=${string%$j}\n            local letter=$string[$k]\n            while\
    \ [[ $letter != ${string[$j]} ]]; do\n                let j=$j\n            done\n\
    \            let result=$(( $j != $k ))\n        fi\n    fi\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    echo $((${#s}>3))\n    echo $((${#s}%3))\n    echo $((${#s}==0))\n    echo\
    \ $((${#s}>=3))\n    echo $((${#s}<=3))\n    echo $((${#s}==0 && ${#s}%3))\n \
    \   echo $((${#s}>=3 && ${#s}%3==0))\n    echo $((${#s}==0 && ${#s}>=3 && ${#s}%3==0))\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s='$1';\n\
    \  local i=0;\n  local j=0;\n  for i in \"${s!:}\"; do\n    for j in \"${s!:}\"\
    ; do\n      [[ \"${s:$i:2}\" != \"${s:$j:2}\" ]] || return 0;\n    done;\n  done;\n\
    \  return 1;\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp9y44vb7q.sh: line 24: ${s!:}: bad substitution\n'''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=0\n    local a\n    local count\n    local i\n    \n    for ((i=1;i<${#s}+1;i++));\
    \ do\n        a=${s:$i:1}\n        if [[ -n $a ]]; then\n            if [[ \"\
    $a\" == \"a\" || \"$a\" == \"b\" || \"$a\" == \"c\" || \"$a\" == \"d\" || \"$a\"\
    \ == \"e\" || \"$a\" == \"f\" || \"$a\" == \"g\" || \"$a\" == \"h\" || \"$a\"\
    \ == \"i\" || \"$a\" == \"j\" || \"$a\" == \"k\" || \"$a\" == \"l\" || \"$a\"\
    \ == \"m\" || \"$a\" == \"n\" || \"$a\" == \"o\" || \"$a\" == \"p\" || \"$a\"\
    \ == \"q\" || \"$a\" == \"r\" || \"$a\" == \"s\" || \"$a\" == \"t\" || \"$a\"\
    \ == \"u\" || \"$a\" == \"v\" || \"$a\" == \"w\" || \"$a\" == \"x\" || \"$a\"\
    \ == \"y\" || \"$a\" == \"z\" ]]; then\n                if [[ \"$count\" -lt 3\
    \ ]]; then\n                    count=$count+1\n                fi\n         \
    \   else\n                count=0\n            fi\n        fi\n    done\n    if\
    \ [[ $len -gt 3 ]]; then\n        echo \"false\"\n    else\n        echo \"true\"\
    \n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  # write your code here\n  return 0\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local len=${#string}\n    local count=0\n    local count1=0\n    local count2=0\n\
    \    local count3=0\n    local count4=0\n    local count5=0\n    local count6=0\n\
    \    local count7=0\n    local count8=0\n    local count9=0\n    local count10=0\n\
    \    local count11=0\n    local count12=0\n    local count13=0\n    local count14=0\n\
    \    local count15=0\n    local count16=0\n    local count17=0\n    local count18=0\n\
    \    local count19=0\n    local count20=0\n    local count21=0\n    local count22=0\n\
    \    local count23=0\n    local count24=0\n    local count25=0\n    local count26=0\n\
    \    local count27=0\n    local count28=0\n    local count29=0\n    local count30=0\n\
    \    local count31=0\n    local count32=0\n    local count33=0\n    local count34=0\n\
    \    local count35=0\n    local count36=0\n    local count37=0\n    local count38=0\n\
    \    local count39=0\n    local count40=0\n    local count41=0\n    local count42=0\n\
    \    local count43=0\n    local count44=0\n    local count45=0\n    local count46=0\n\
    \    local count47=0\n    local count48=0\n    local count49=0\n    local count50=0\n\
    \    local count51=0\n    local count52=0\n    local count53=0\n    local count54=0\n\
    \    local count55=0\n    local count56=0\n    local count57=0\n    local count58=0\n\
    \    local count59=0\n    local count60=0\n    local count61=0\n    local count62=0\n\
    \    local count63=0\n    local count64=0\n    local count65=0\n    local count66=0\n\
    \    local count67=0\n    local count68=0\n    local count69=0\n    local count70=0\n\
    \    local count71=0\n    local count72=0\n    local count73=0\n    local count74=0\n\
    \    local count75=0\n    local count76=0\n    local count77=0\n    local count78=0\n\
    \    local count79=0\n    local count80=0\n    local count81=0\n    local count82=0\n\
    \    local \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=$1\n\
    \    if [ -z \"$str\" ]; then\n        echo \"$1 is empty\"\n        exit 0\n\
    \    fi\n    len=${#str}\n    if [ \"$len\" -lt 3 ]; then\n        echo \"$1 is\
    \ too short\"\n        exit 0\n    fi\n    local len2=$((len-1))\n    local i\n\
    \    for (( i = 0; i < len2; i++ )); do\n        if [ \"${str:i:1}\" = \"${str:i+1:1}\"\
    \ ]; then\n            (( i++ ))\n        fi\n    done\n    if [ \"$i\" -eq \"\
    $len\" ]; then\n        echo \"$1 is hapsh\"\n    else\n        echo \"$1 is not\
    \ hapsh\"\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: -1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  # Write your\
    \ code here\n  local input=$1\n  local output=$input\n  while [[ -n $output ]];\
    \ do\n    if [[ ${#input} -lt 3 ]]; then\n      output=\"false\"\n    elif [[\
    \ ${#output} -lt 3 ]]; then\n      output=\"true\"\n    elif ! [[ $output =~ ([a-z]*(([a-z]|[0-9])*){3})\
    \ ]]; then\n      output=\"false\"\n    else\n      output=\"true\"\n    fi\n\
    \  done\n  echo $output\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=32>
  stdout: <_io.BufferedReader name=18>
  timestamp: 1660078646
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    # Write your code here\n    local count=$(echo $s | wc -w)\n    if [ $count\
    \ -ge 3 ]; then\n        local n=0\n        local f=1\n        while [ $n -lt\
    \ $count ]; do\n            local i\n            local j\n            i=$(echo\
    \ $s | cut -c1$n)\n            j=$(echo $s | cut -c1$n+1)\n            if [ $i\
    \ != $j ]; then\n                let f=0\n            fi\n            n=$((n+1))\n\
    \        done\n        if [ $f -eq 0 ]; then\n            echo \"true\"\n    \
    \    else\n            echo \"false\"\n        fi\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\tlocal string=$1\n\
    \n\tif [[ $string =~ ^[[:alnum:]]+$ ]]\n\tthen\n\t\tlocal length=${#string}\n\n\
    \t\tif [ $length -ge 3 ]\n\t\tthen\n\t\t\tlocal i=0\n\t\t\tlocal string2=\"${string}\"\
    \n\n\t\t\twhile [[ $((i++)) -ge 3 ]]\n\t\t\tdo\n\t\t\t\tstring2=\"${string2##*[[:alpha:]]}\"\
    \n\t\t\t\tstring2=\"${string2%[[:alpha:]]*}\"\n\t\t\tdone\n\n\t\t\techo $string2\n\
    \t\telse\n\t\t\techo true\n\t\tfi\n\telse\n\t\techo false\n\tfi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local a\
    \ b\n    a=$1; b=$2\n    echo $((${#a} > 3 && ${#b} > 0 && (($((${#a} - 3)) %\
    \ ${#b})) == 0))\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660078641
