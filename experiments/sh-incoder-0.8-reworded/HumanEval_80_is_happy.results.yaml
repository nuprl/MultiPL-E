language: sh
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=\"\
    $1\"\n    local len\n    len=${#str}\n    if [ $len -gt 3 ] ; then\n        local\
    \ i\n        for ((i = 1; i <= len-3 ; i++)); do\n            local j\n      \
    \      for ((j=1 ; j <= 3 ; j++)); do\n                if [ \"${str:$((i-j)):1}\"\
    \ != \"a\" -a \"${str:$((i-j)):1}\" != \"e\" -a \"${str:$((i-j)):1}\" != \"i\"\
    \ -a \"${str:$((i-j)):1}\" != \"o\" -a \"${str:$((i-j)):1}\" != \"u\" ] ; then\n\
    \                    return 0\n                fi\n            done\n        done\n\
    \        return 1\n    else\n        return 0\n    fi\n}\n\ncandidate() {\n  \
    \  is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    [[ $1 =~\
    \ (.{3})(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.)(.\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph5uzzrcs.sh: line 21: unexpected EOF while looking for matching
    `)''

    /tmp/tmph5uzzrcs.sh: line 41: unexpected argument to conditional binary operator

    /tmp/tmph5uzzrcs.sh: line 41: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n   local line=$1\n\
    \   if [ \"$line\" == \"\" ]; then\n       return 1\n   fi\n   if [ \"$line\"\
    \ == \"_\" ] || [ \"$line\" == \"-\" ] || [ \"$line\" == \".\" ]; then\n     \
    \  return 0\n   fi\n   local flag=0\n   for i in `seq 1 $((${#line}-1))`; do\n\
    \       if [ \"$i\" -eq \"$((i-1))\" ]; then\n           flag=$((flag + 1))\n\
    \       else\n           if [ \"$line\" == \"$line$i\" ] || [ \"$line\" == \"\
    $line$((i-1))\" ]; then\n               flag=$((flag + 1))\n           else\n\
    \               flag=0\n           fi\n       fi\n   done\n   if [ $flag -ge 3\
    \ ]; then\n       return 0\n   else\n       return 1\n   fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    len=${#1}\n\
    \    if [ $len -ge 3 -a $(seq 0 $((len-3)) | xargs -n1 echo ${1//[a-z]/}) != $(seq\
    \ 0 $((len-3)) | xargs -n1 echo ${1//[a-z]/} | sort -u) ]\n    then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\"\
    \ ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyyst_wrg.sh: line 22: [: too many arguments

    '
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local length counter\n  length=$(echo $string | wc -w)\n  if [ \"$length\"\
    \ -lt 3 ]; then\n    echo true\n  else\n    for counter in {1..3}; do\n      while\
    \ [[ \"$string\" =~ (.)\\1\\1 ]]; do\n        (( counter++ ))\n      done\n  \
    \    if [ $counter -eq 3 ]; then\n        echo false\n        break\n      else\n\
    \        echo true\n        break\n      fi\n    done\n  fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\tlocal input=\"\
    $1\"\n\tlocal length=\"${#input}\"\n\t\n\tif [ \"$length\" -lt \"3\" ] || [ \"\
    $length\" -gt \"3\" ]; then\n\t\techo \"false\"\n\t\treturn\n\tfi\n\t\n\tlocal\
    \ output\n\tfor (( i=0; i<$length-3; i++ )); do\n\t\tlocal char=\"${input:$i:1}\"\
    \n\t\tlocal nextChar=\"${input:$i+1:1}\"\n\t\tlocal nextNextChar=\"${input:$i+2:1}\"\
    \n\t\tif [ \"$char\" == \"$nextChar\" ] || [ \"$char\" == \"$nextNextChar\" ];\
    \ then\n\t\t\tcontinue\n\t\tfi\n\t\toutput=\"true\"\n\t\treturn\n\tdone\n\toutput=\"\
    false\"\n\treturn\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local input=\"\
    $1\"\n    if [[ ${#input} -lt 3 ]]\n    then\n        echo \"true\"\n    else\n\
    \        local arr=\"${input:0:3}\"\n        local other=\"${input:3:$(( ${#input}\
    \ - 1 ))}\"\n        local happy=true\n        for element in ${arr}\n       \
    \ do\n            if [[ \"$element\" == \"$other\" ]]\n            then\n    \
    \            happy=false\n                break\n            else\n          \
    \      happy=true\n                break\n            fi\n        done\n     \
    \   if $happy\n        then\n            echo \"true\"\n        else\n       \
    \     echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    ${1}\"\n  local len=${#string}\n\n  if [ \"$len\" -lt \"3\" ] || [ \"$len\" -gt\
    \ \"3\" ] ; then\n    return 0\n  fi\n\n  local i\n  local prev\n  for i in $(seq\
    \ 1 $len) ; do\n    prev=\"${string:$i:1}\"\n    if [ \"$prev\" == \"$string\"\
    \ ] || [ \"$prev\" == \"${string:$i:2}\" ] || [ \"$prev\" == \"${string:$i:1}\"\
    \ ] ; then\n      return 0\n    fi\n  done\n  return 1\n}\n\ncandidate() {\n \
    \   is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s=$1\n\
    \  \n  local len=${#s}\n  if [ ${len} -lt 3 ]; then\n    return 0\n  fi\n  \n\
    \  for ((i=0; i<${len}-3; i++)); do\n    local j=$((i+1))\n    local k=$((j+1))\n\
    \    \n    [[ ${s:$i:1} != ${s:$j:1} && ${s:$j:1} != ${s:$k:1} ]] && return 1\n\
    \  done\n  return 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    # Your code here\n    length=$(echo ${string} | wc -c)\n    if [ ${length}\
    \ -ge 3 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local __s\
    \ ; __s=\"${1}\" ; [[ \"$__s\" =~ ([[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]|[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]|[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]]|[[:alpha:]][[:alpha:]][[:alpha:]][[:alpha:]])\
    \ ]] || return 1\n  [[ ${#__s} -lt 3 ]] || return 0\n  [[ ${#__s} -eq ${#__s}\
    \ * 3 ]] || return 1\n  local __i ; local __x ; local __y\n  for __i in {0..${#__s}}\
    \ ; do\n    __x=${__s:$__i:3} ; [[ ! -z ${!__x} ]] || return 0\n    __y=${__s:$__i:$((__i\
    \ + 2))} ; [[ ! -z ${!__y} ]] || return 0\n  done\n  return 1\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcw05r84b.sh: line 23: syntax error in conditional expression

    /tmp/tmpcw05r84b.sh: line 23: syntax error near `*''

    /tmp/tmpcw05r84b.sh: line 23: `  [[ ${#__s} -eq ${#__s} * 3 ]] || return 1''

    '
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local IFS=\"\
    \ \"; echo \"$1\" | grep \"^[[:digit:]]\\{1,3\\}$\"\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local str=$1\n\
    \  local n\n  local count=1\n  local hapsh\n  hapsh=\"false\"\n  for i in $(seq\
    \ 1 $((${#str})-2)) ; do\n    if [[ \"${str[$i]}\" = \"a\" ]] || [[ \"${str[$i]}\"\
    \ = \"e\" ]] || [[ \"${str[$i]}\" = \"i\" ]] || [[ \"${str[$i]}\" = \"o\" ]] ||\
    \ [[ \"${str[$i]}\" = \"u\" ]] || [[ \"${str[$i]}\" = \"y\" ]] ; then\n      count=$((\
    \ $count + 1 ))\n      if (( count % 3 )); then\n        hapsh=\"true\"\n    \
    \  fi\n    fi\n  done\n  echo $hapsh\n}\n\ncandidate() {\n    is_happy \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppik0dkq0.sh: command substitution: line 26: syntax error near unexpected
    token `-2''

    /tmp/tmppik0dkq0.sh: command substitution: line 26: `(${#str})-2''

    /tmp/tmppik0dkq0.sh: command substitution: line 26: syntax error near unexpected
    token `-2''

    /tmp/tmppik0dkq0.sh: command substitution: line 26: `(${#str})-2''

    /tmp/tmppik0dkq0.sh: command substitution: line 26: syntax error near unexpected
    token `-2''

    /tmp/tmppik0dkq0.sh: command substitution: line 26: `(${#str})-2''

    '
  stdout: ''
  timestamp: 1660059260
- exit_code: -1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    # Your code goes here\n    local count=0\n    local n=0\n    local h=0\n\
    \    while [ \"${s:0:1}\" != \"$\" ]; do\n        s=${s//[^a-z]/}\n        if\
    \ [ $h -eq 3 ]; then\n            ((count++))\n            h=0\n        else\n\
    \            h=1\n        fi\n        n=$((n+1))\n    done\n    if [ $count -lt\
    \ 3 ]; then\n        echo false\n    else\n        echo true\n    fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=13 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=3 encoding='utf-8'>
  timestamp: 1660059265
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n   [[ \"${#1}\"\
    \ -ge 3 ]] && {\n       for (( i = 0; i < 3; i++ )); do\n           [[ \"${#1}\"\
    \ -ge 3 ]] && {\n               [[ \"${!1}\" == \"${!1:0:i}\" ]] && {\n      \
    \             [[ \"${!1}\" == \"${!1:1:i}\" ]] && {\n                       [[\
    \ \"${!1}\" == \"${!1:2:i}\" ]] && {\n                           break\n     \
    \                  }\n                   }\n               }\n           }\n \
    \      done\n   }\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \n    # Check if the string has three or more characters\n    if [ $# -eq 1 ];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s=$1\
    \ || return 1\n  [[ $s =~ ^.{3}[^a-z]*$ ]] && [[ $s =~ ^(.)\\1{3} ]] && echo \"\
    true\" || echo \"false\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s=\"\
    $1\"\n  local length=${#s}\n  if [[ $length -lt 3 ]]; then\n    return $length\n\
    \  fi\n  for i in $(seq 0 $(($length - 3))); do\n    if (($((i + 1)) == $length)\
    \ || ($((i + 2)) == $length) || ($((i + 3)) == $length)) {\n      continue\n \
    \   fi\n    if (( $(echo \"$s[$i]\" = \"$s[$(($i + 1))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i + 2))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i + 3))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 1))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 2))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 3))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i + 1))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i + 2))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i + 3))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 1))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 2))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 3))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 2))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 1))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 3))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 2))]\" | grep -c -c 1)) ==\
    \ 0 \\\n        && $(echo \"$s[$i]\" = \"$s[$(($i - 1))]\" | grep -c -c 1)) ==\
    \ 0 \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvzuy741o.sh: line 27: syntax error near unexpected token `{''

    /tmp/tmpvzuy741o.sh: line 27: `    if (($((i + 1)) == $length) || ($((i + 2))
    == $length) || ($((i + 3)) == $length)) {''

    '
  stdout: ''
  timestamp: 1660059260
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local input=\"\
    $1\"\n  local len=0\n  local counter=1\n  local string=$input\n  local letters=$(echo\
    \ \"$string\" | tr '[:upper:]' '[:lower:]')\n  while [ -n \"$string\" ]\n  do\n\
    \    len=$((len+1))\n    string=${string#?}\n    if [ \"$len\" -ge 3 ] && [ \"\
    $counter\" -ge 3 ]\n    then\n      local chars=$(echo \"$string\" | tr '[:upper:]'\
    \ '[:lower:]')\n      local unique=${chars}\n      local result=\"\"\n      local\
    \ i=1\n      for char in $unique\n      do\n        if [ \"$i\" -eq \"$counter\"\
    \ ]\n        then\n          result=\"$result$char\"\n        else\n         \
    \ result=\"$result$char\"\n        fi\n        i=$((i+1))\n      done\n      echo\
    \ \"$result\"\n    fi\n    counter=$((counter+1))\n  done\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=\"\
    $1\"\n    if [[ $string =~ (^|(.))\\1\\1\\1$ ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n  \
    \  [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\techo \"$1\"\
    \ | wc -m | bc -l | awk '{print $1 == \"3\"}'\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n\
    \    local count\n\n    count=$(( $(echo $string | awk '{print length($0)}') ))\n\
    \    if [[ $count -ge 3 ]]; then\n        local index\n        for (( i = 0; i\
    \ < 3; i++ )); do\n            index=$(echo $string | awk -v i=\"$i\" 'substr($0,i,1){print\
    \ i}')\n            if [[ $index == $(echo $string | awk -v i=\"$index\" 'substr($0,i,1){print\
    \ i}') ]]; then\n                echo \"true\"\n                break\n      \
    \      else\n                echo \"false\"\n            fi\n        done\n  \
    \  else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n local a=$1\
    \ b=$2 c=$3 d=$4 e=$5\n if [ \"$a\" == \"$b\" ] && [ \"$b\" == \"$c\" ] && [ \"\
    $c\" == \"$d\" ] && [ \"$d\" == \"$e\" ]\n then\n  return 0\n else\n  return 1\n\
    \ fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  if [ -z \"\
    $1\" ]\n    then\n      echo \"Usage: $0 s\" >&2\n      exit 1\n  fi\n  local\
    \ result=false\n  local length\n  local char\n  for length in {1..${#1}};\n  do\n\
    \      char=${1:0:$length}\n      if [[ ${#char} -eq 3 ]]\n      then\n      \
    \    chars=$char\n      fi\n      if [[ $chars != $char ]]\n      then\n     \
    \     result=true\n      fi\n  done\n  echo $result\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvvu3vwg_.sh: line 31: 1: {1..1}: syntax error: operand expected
    (error token is "{1..1}")

    '
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  local length=${#string}\n  local count=1\n  while [ $count -le $length ]\n\
    \  do\n    local letter=${string:$count:1}\n    local letter1=${string:$count+1}\n\
    \    local letter2=${string:$count+2}\n    local letter3=${string:$count+3}\n\
    \    if [ \"$letter\" = \"$letter1\" -o \"$letter\" = \"$letter2\" -o \"$letter\"\
    \ = \"$letter3\" ]\n    then\n      count=$(( count + 4 ))\n    else\n      count=$((\
    \ count + 1 ))\n    fi\n  done\n  if [ \"$count\" = \"$length\" ]\n  then\n  \
    \  echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local input=\"\
    $1\"\n\n    echo $(expr length \"$input\" ) >= 3 && $(\n        seq -f \"$input\"\
    \ -g 1 |\n        egrep -v '([a-zA-Z])\\1\\1\\1'\n    )\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'seq: invalid option -- ''g''

    Try ''seq --help'' for more information.

    '
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\tlocal a=\"\
    $1\"\n\tlocal b=\"$2\"\n\tlocal c=\"$3\"\n\n\tif [ ${#a} -lt 3 ] || [ -z \"$a\"\
    \ ] || [ -z \"$b\" ] || [ -z \"$c\" ]; then\n\t\techo \"empty string\"\n\telse\n\
    \t\tfor (( i=0; i<${#a}; i++ )); do\n\t\t\tif [[ ${b} == *${a}${a}${a}* ]]; then\n\
    \t\t\t\techo \"$1 is a hapsh\"\n\t\t\t\treturn\n\t\t\tfi\n\t\tdone\n\t\techo \"\
    $1 is not a hapsh\"\n\tfi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local -r\
    \ string=\"$1\"\n    local -n count=\"count\"\n    local -i i\n\n    # Remove\
    \ leading and trailing space\n    string=${string#\"${string%%[![:space:]]*}\"\
    }\n    string=${string%\"${string##*[![:space:]]}\"}\n\n    # Count each letter\n\
    \    for i in {1..${#string}}; do\n        count[\"${string[i]}\"${string[i+1]}\"\
    ${string[i+2]}\"${string[i+3]}\"]=${count[\"${string[i]}\"${string[i+1]}\"${string[i+2]}\"\
    ${string[i+3]}\"]+1}\n    done\n    \n    # Remove consecutive duplicates\n  \
    \  string=${string#${string%?}}\n\n    # Check if count is at least 3\n    if\
    \ [[ ${#string} -gt 3 ]]; then\n        local -r result=\"true\"\n        for\
    \ i in {1..3}; do\n            if [[ ${count[\"${string[i]}\"${string[i+1]}\"\
    ${string[i+2]}\"${string[i+3]}\"]} -ge 2 ]]; then\n                result=\"false\"\
    \n                break\n            fi\n        done\n    else\n        result=\"\
    false\"\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpt5j2z8s5.sh: line 65: unexpected EOF while looking for matching
    `"''

    /tmp/tmpt5j2z8s5.sh: line 69: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n local str=$1\n\
    \ echo $str\n if [[ ${#str} -eq 3 ]]; then\n  for (( i=1; i<${#str}; i++ )); do\n\
    \   if [[ $str[$i] != $str[$i-1] ]]; then\n    return 1\n   fi\n  done\n else\n\
    \  return 1\n fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local -r\
    \ string=$1\n  [[ -z \"${string}\" ]] && return 1\n  [[ \"${#string}\" -lt 3 ]]\
    \ && return 1\n  local count\n  count=1\n  local letter\n  for letter in $(seq\
    \ 1 ${#string}); do\n    (( count++ ))\n    if [[ \"${string}\" =~ \"(^|[[:space:]])${string::${letter}}(|[[:space:]]$)\"\
    \ ]]; then\n      (( count-- ))\n      if [[ \"${count}\" -eq 0 ]]; then\n   \
    \     echo \"true\"\n        return\n      fi\n    fi\n  done\n  echo \"false\"\
    \n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local str=$1\n\
    \    echo $str | grep -q \"^$str$\" && echo true || echo false\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    echo \"\
    $1\" | while read s;\n    do\n        echo \"${#s}\"\n        if [[ ${#s} -lt\
    \ 3 ]];\n        then\n            echo \"$1\" | while read i;\n            do\n\
    \                echo \"${i}\"\n                if [[ ${#i} -lt 3 ]];\n      \
    \          then\n                    echo \"$1\"\n                    exit 0\n\
    \                else\n                    echo \"$i\"\n                fi\n \
    \           done\n        fi\n    done\n}\n\ncandidate() {\n    is_happy \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[\
    \ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\"\
    \ ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\"\
    ) = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: -1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    read -r\
    \ s\n    if [[ ${#s} -lt 3 ]]; then\n        echo \"false\"\n    else\n      \
    \  local i=1\n        while [[ ${#s} -gt 0 ]]; do\n            if [[ $(echo $s\
    \ | grep -c \"^${s:$i:1}$\") -gt 1 ]]; then\n                echo \"false\"\n\
    \                break\n            fi\n            (( i++ ))\n        done\n\
    \        if [[ $(echo $s | grep -c \"^${s:$i:1}$\") -eq 1 ]]; then\n         \
    \   echo \"true\"\n        else\n            echo \"false\"\n        fi\n    fi\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=21 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660059266
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    $1\"\n  local hapsh\n  if (( ${#string} < 3 )); then\n    return 1\n  fi\n  local\
    \ length=\"${#string}\"\n  local i=0\n  local j=1\n  hapsh=\"0\"\n  while [ $j\
    \ -le $length ]\n  do\n    hapsh=\"0\"\n    for (( i=0; i<3; i++ )); do\n    \
    \  local c=\"${string:$j:1}\"\n      if [[ ${#c} = \"3\" ]]; then\n        for\
    \ (( j+=1; j < $length; j++ )); do\n          if [[ \"$c\" == \"${string:j:1}\"\
    \ ]]; then\n            hapsh=1\n            break\n          fi\n        done\n\
    \      fi\n    done\n    if [ \"$hapsh\" -eq \"0\" ]; then\n      hapsh=\"1\"\n\
    \    fi\n    (( j++ ))\n  done\n  echo $hapsh\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  str=$1\n\
    \  length=${#str}\n  if [[ $length -gt 3 ]]; then\n    echo $length\n  else\n\
    \    echo 1\n  fi\n  echo $(( (length == 3 && $(echo \"$str\" | tr a-z A-Z | sort\
    \ | uniq -u | wc -l)) == 3 ))\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate\
    \ \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local len=${#s}\n    for (( i = 0; i < len; i++ )); do\n        if [ ${s:$i:1}\
    \ != ${s:$i:1} ]; then\n            echo \"false\"\n            return 0\n   \
    \     fi\n    done\n    echo \"true\"\n    return 0\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n\
    \    local flag=0\n\n    if [[ $# -lt 1 || $1 =~ [^a-zA-Z0-9_] ]]; then\n    \
    \    echo \"$1 is not hapsh\"\n    else\n        if [[ ${#s} -ge 3 ]]; then\n\
    \            for i in {3..${#s}}; do\n                let \"flag+=($(i+3))\"\n\
    \            done\n        else\n            echo \"$1 is hapsh\"\n        fi\n\
    \        if [[ $flag -eq 0 ]]; then\n            echo \"$1 is hapsh\"\n      \
    \  else\n            echo \"$1 is unhapsh\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\tlocal s=$1\n\
    \tif [ $# -eq 0 ]\n\tthen\n\t\techo \"false\"\n\telse\n\t\tlet count1=0\n\t\t\
    let count2=0\n\t\tlet count3=0\n\t\tfor i in $(seq 0 3 ${#s})\n\t\tdo\n\t\t\t\
    if [[ ${s:i:1} == ${s:i:1} && ${s:i:2} == ${s:i:2} && ${s:i:3} == ${s:i:3} ]]\n\
    \t\t\tthen\n\t\t\t\tcount1=$((count1+1))\n\t\t\telif [[ ${s:i:1} == ${s:i:1} &&\
    \ ${s:i:2} == ${s:i:2} && ${s:i:3} != ${s:i:3} ]]\n\t\t\tthen\n\t\t\t\tcount2=$((count2+1))\n\
    \t\t\telif [[ ${s:i:1} == ${s:i:1} && ${s:i:2} != ${s:i:2} && ${s:i:3} == ${s:i:3}\
    \ ]]\n\t\t\tthen\n\t\t\t\tcount3=$((count3+1))\n\t\t\tfi\n\t\tdone\n\n\t\tif [[\
    \ $count1 > 0 && $count2 > 0 && $count3 > 0 ]]\n\t\tthen\n\t\t\techo \"true\"\n\
    \t\telse\n\t\t\techo \"false\"\n\t\tfi\n\tfi\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n\tlocal string=\"\
    ${1}\"\n\tlocal happy=\"false\"\n\tlocal length=${#string}\n\tlet \"length=length/3-1\"\
    \n\t\n\tif [ \"${length}\" -lt \"0\" ]; then\n\t\techo \"${happy}\"\n\t\treturn\
    \ \"${happy}\"\n\tfi\n\t\n\tlocal counter=1\n\tlocal temp\n\tlocal i\n\twhile\
    \ [ \"${counter}\" -lt \"${length}\" ]; do\n\t\ttemp=\"${string:$counter:1}\"\n\
    \t\t\n\t\tif [[ \"${temp}\" == \"a\" ]] ; then\n\t\t\techo \"${happy}\"\n\t\t\t\
    return \"${happy}\"\n\t\tfi\n\t\t\n\t\t(( counter = counter + 1 ))\n\tdone\n\t\
    \n\techo \"${happy}\"\n\treturn \"${happy}\"\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7gsle5u8.sh: line 28: return: false: numeric argument required

    /tmp/tmp7gsle5u8.sh: line 28: return: false: numeric argument required

    /tmp/tmp7gsle5u8.sh: line 46: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n\
    \  # Write your code here\n  \n  local length=${#string}\n  \n  if [[ $length\
    \ -lt 3 ]]; then\n    echo \"false\"\n  else\n    local count=0\n    local tmp=0\n\
    \    local happy=\"false\"\n    \n    for (( c=1; c<$length; c++ )); do\n    \
    \  if [[ $(echo \"${string:$c:1}\") == \"a\" || $(echo \"${string:$c:1}\") ==\
    \ \"e\" || $(echo \"${string:$c:1}\") == \"i\" || $(echo \"${string:$c:1}\") ==\
    \ \"o\" || $(echo \"${string:$c:1}\") == \"u\" || $(echo \"${string:$c:1}\") ==\
    \ \"y\" ]]; then\n        count=`expr $count + 1`\n        if [[ $count == 3 ]];\
    \ then\n          happy=\"true\"\n          break\n        fi\n      else\n  \
    \      tmp=`expr $tmp + 1`\n        if [[ $tmp == 3 ]]; then\n          happy=\"\
    true\"\n          break\n        fi\n      fi\n    done\n    \n    if [[ $happy\
    \ == \"false\" ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n\
    \    fi\n  fi\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"\
    false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"\
    aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s='$1'\n\
    \  if [ -z \"$s\" ]\n  then\n    echo \"Error! Empty string passed\"\n    exit\
    \ 1\n  fi\n  local len=\"${#s}\"\n  if [ \"$len\" -lt 3 ]\n  then\n    echo \"\
    Error! String is too short or too long!\"\n    exit 1\n  fi\n  local count=1\n\
    \  while [ \"$count\" -lt \"$len\" ]\n  do\n    local c=${s:$count:1}\n    local\
    \ count2=1\n    while [ \"$count2\" -le \"3\" ]\n    do\n      local c2=${c:$count2:1}\n\
    \      local count3=1\n      while [ \"$count3\" -le \"3\" ]\n      do\n     \
    \   local c3=${c2:$count3:1}\n        if [ \"$c3\" -ne \"$c\" ]\n        then\n\
    \          echo \"false\"\n          exit 0\n        fi\n        local count3=$((count3+1))\n\
    \      done\n      local count2=$((count2+1))\n    done\n    local count=$((count+1))\n\
    \  done\n  echo \"true\"\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"\
    aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate\
    \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[\
    \ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\"\
    \ ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local S=\"\
    $1\"\n\n  [[ -z $S ]] && { echo \"Empty String\"; return 1; }\n  [[ -z \"`echo\
    \ $S | tr -dc '0-9' | sort -u | wc -l`\" ]] && { echo \"Empty String\"; return\
    \ 1; }\n  [[ \"`echo $S | tr -dc '0-9' | sort -u | wc -l`\" -lt 3 ]] && { echo\
    \ \"String is Hapsh\"; return 0; }\n  [[ \"`echo $S | tr -dc '0-9' | sort -u |\
    \ wc -l`\" -gt 3 ]] && { echo \"String is not Hapsh\"; return 1; }\n  [[ \"`echo\
    \ $S | tr -dc '0-9' | sort -u | wc -l`\" -eq 3 ]] && { echo \"String is Hapsh\"\
    ; return 0; }\n  [[ \"`echo $S | tr -dc '0-9' | sort -u | wc -l`\" -ne 3 ]] &&\
    \ { echo \"String is not Hapsh\"; return 1; }\n  [[ \"`echo $S | tr -dc '0-9'\
    \ | sort -u | wc -l`\" -lt 3 ]] && { echo \"String is Hapsh\"; return 0; }\n \
    \ [[ \"`echo $S | tr -dc '0-9' | sort -u | wc -l`\" -gt 3 ]] && { echo \"String\
    \ is not Hapsh\"; return 1; }\n  [[ \"`echo $S | tr -dc '0-9' | sort -u | wc -l`\"\
    \ -eq 3 ]] && { echo \"String is Hapsh\"; return 0; }\n  [[ \"`echo $S | tr -dc\
    \ '0-9' | sort -u | wc -l`\" -ne 3 ]] && { echo \"String is not Hapsh\"; return\
    \ 1; }\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\"\
    ) = \"false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate\
    \ \"xyy\") = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n  \
    \  [[ $(candidate \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 2
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    [[ $1 =~\
    \ (.{3,}([a-z])[a-z]([a-z])[a-z]) ]] && [[ $1 =~ (.{3,}([a-z])[a-z]([a-z])([a-z])([a-z])\
    \ ]] && [[ $1 =~ (.{3,}([a-z])[a-z]([a-z])([a-z])([a-z])([a-z]) ]]\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_wyg1gsv.sh: line 21: unexpected EOF while looking for matching
    `)''

    /tmp/tmp_wyg1gsv.sh: line 41: unexpected argument to conditional binary operator

    /tmp/tmp_wyg1gsv.sh: line 41: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local chars\n\
    \    local string=\"$1\"\n    local length=${#string}\n\n    if [ \"${length}\"\
    \ -lt \"3\" ]; then\n        return 0\n    fi\n\n    for ((i=0; i<length; i++));\
    \ do\n        chars=$(echo $string | sed -n \"$i{p}\")\n        if [[ -z $chars\
    \ ]]; then\n            continue\n        fi\n        chars=$(echo $chars | tr\
    \ a-z A-Z)\n        if [ \"$chars\" != \"AAA\" ] && [ \"$chars\" != \"BBB\" ]\
    \ && [ \"$chars\" != \"CCC\" ] && [ \"$chars\" != \"DDD\" ] && [ \"$chars\" !=\
    \ \"EEE\" ] && [ \"$chars\" != \"FFF\" ] && [ \"$chars\" != \"GGG\" ] && [ \"\
    $chars\" != \"HHH\" ] && [ \"$chars\" != \"III\" ] && [ \"$chars\" != \"JJJ\"\
    \ ] && [ \"$chars\" != \"KKK\" ] && [ \"$chars\" != \"LLL\" ] && [ \"$chars\"\
    \ != \"MMM\" ] && [ \"$chars\" != \"NNN\" ] && [ \"$chars\" != \"OOO\" ] && [\
    \ \"$chars\" != \"PPP\" ] && [ \"$chars\" != \"QQQ\" ] && [ \"$chars\" != \"RRR\"\
    \ ] && [ \"$chars\" != \"SSS\" ] && [ \"$chars\" != \"TTT\" ] && [ \"$chars\"\
    \ != \"UUU\" ] && [ \"$chars\" != \"VVV\" ] && [ \"$chars\" != \"WWW\" ] && [\
    \ \"$chars\" != \"XXXX\" ] && [ \"$chars\" != \"YYYY\" ] && [ \"$chars\" != \"\
    ZZZ\" ]; then\n            return 0\n        fi\n    done\n    return 1\n}\n\n\
    candidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    [[ $1 =~\
    \ $happy_regexp ]] && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n  \
    \  is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local STRING=$1\n\
    \    local result=\"True\"\n    if (( ${#STRING} < 3 )) ; then\n        result=\"\
    False\"\n    fi\n    for (( i = 3; i <= ${#STRING}; i=i+3 )); do\n        local\
    \ j=1\n        local temp=${STRING:$j:3}\n        while [ $j -le ${#temp} ]; do\n\
    \            (( ${#temp} != 1 && temp != ${temp#??} ))\n            (( j+=3 ))\n\
    \            temp=${STRING:$j:3}\n        done\n        result=$(expr ${result}\
    \ || expr ${result} == \"False\")\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\"\
    ) = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=\"\
    ${1}\"\n  echo $(echo \"${string}\" | awk '{print length}') == \"3\" &&\n  echo\
    \ \"${string}\" | awk '{\n    for (i=1; i <= NF; i++) {\n      print $i\n    }\n\
    \  }' | sort | uniq -c | grep -c \"${string}\"\n}\n\ncandidate() {\n    is_happy\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"false\" ]]\n\
    \    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\") = \"\
    true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate \"\
    adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  strlen=$1\n\
    \  [[ \"$strlen\" -gt 3 ]] || return 1\n  \n  for i in $(seq 1 $(($strlen-3)));\
    \ do\n    var=$((i+3))\n    if [ ! \"$strlen\" -eq \"$var\" ]; then\n      break\n\
    \    else\n      [[ \"$strlen\" = \"$var\" ]] || return 1\n    fi\n  done\n  return\
    \ 0\n}\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"\
    false\" ]]\n    [[ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\"\
    ) = \"false\" ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate\
    \ \"iopaxioi\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    echo $1\
    \ | awk '{if(length($1)==3 && $1==\"a\" && $2==\"b\" && $3==\"c\" && $4==\"d\"\
    \ && $5==\"e\" && $6==\"f\") {return 1;} else return 0;}}'\n}\n\ncandidate() {\n\
    \    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a\") = \"\
    false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[ $(candidate\
    \ \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\" ]]\n    [[ $(candidate\
    \ \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: {if(length($1)==3 && $1=="a" && $2=="b" && $3=="c" &&
    $4=="d" && $5=="e" && $6=="f") {return 1;} else return 0;}}

    awk: cmd. line:1:                                                                                       ^
    `return'' used outside function context

    awk: cmd. line:1: {if(length($1)==3 && $1=="a" && $2=="b" && $3=="c" && $4=="d"
    && $5=="e" && $6=="f") {return 1;} else return 0;}}

    awk: cmd. line:1:                                                                                                       ^
    `return'' used outside function context

    awk: cmd. line:1: {if(length($1)==3 && $1=="a" && $2=="b" && $3=="c" && $4=="d"
    && $5=="e" && $6=="f") {return 1;} else return 0;}}

    awk: cmd. line:1:                                                                                                                 ^
    syntax error

    '
  stdout: ''
  timestamp: 1660059261
- exit_code: 1
  program: "#!/bin/bash\n# You are given a string s.\n# Your task is to check if the\
    \ string is hapsh or not.\n# A string is hapsh if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy a)\n\
    # \"false\"\n# >>> $(is_happy aa)\n# \"false\"\n# >>> $(is_happy abcd)\n# \"true\"\
    \n# >>> $(is_happy aabb)\n# \"false\"\n# >>> $(is_happy adb)\n# \"true\"\n# >>>\
    \ $(is_happy xyy)\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n   if [[ \"\
    $#\" -eq 1 ]]\n   then\n      echo \"$1\" | awk '{for(i=1;i<=NF;i++)if(length($i)>1\
    \ && $i ~ /[[:alpha:]]/){ for(j=1;j<=NF;j++)if((j-i) == 1 && $j!~ /[[:alpha:]]/){\
    \ print \"true\"}}}' | cut -d '=' -f 2\n   else\n      echo \"false\"\n   fi\n\
    }\n\ncandidate() {\n    is_happy \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a\") = \"false\" ]]\n    [[ $(candidate \"aa\") = \"false\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"true\" ]]\n    [[ $(candidate \"aabb\") = \"false\" ]]\n    [[\
    \ $(candidate \"adb\") = \"true\" ]]\n    [[ $(candidate \"xyy\") = \"false\"\
    \ ]]\n    [[ $(candidate \"iopaxpoi\") = \"true\" ]]\n    [[ $(candidate \"iopaxioi\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059261
