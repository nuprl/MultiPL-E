language: sh
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ output\n  local input\n  local strange\n  output=\"$1\"\n  shift\n  input=\"\
    $1\"\n  shift\n  strange=\"$1\"\n  shift\n  while [ $# -gt 0 ]\n  do\n    local\
    \ item=$1\n    local idx\n    local strange_item\n    idx=\"$(( $# - 1 ))\"\n\
    \    strange_item=\"\\\"${strange}$(( idx ))\\\"\"\n    if [ $item -ne \"$strange_item\"\
    \ ]; then\n      output=\"$output$strange_item\"\n      output=\"$output$item\"\
    \n      strange=\"$strange\"\n    fi\n    shift\n  done\n  output=\"$output$strange\"\
    \n  output=\"$output$input\"\n  echo \"$output\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  IFS=$'\\\
    n' read -r -a array <<<\"$1\"\n  unset IFS\n\n  while true; do\n    break\n  \
    \  prev=0\n    for (( c=0; c<${#array[@]}; c++ )); do\n      val=${array[$c]}\n\
    \      # only change to 'prev' when needed\n      if (( prev != val )); then\n\
    \        prev=${val}\n        (( r--, array[c] = array[c] ))\n      fi\n    done\n\
    \    array=rc(array)\n  done\n\n  # convert array back into space-separated str\n\
    \  IFS=' ' read -ra a <<<\"${array[@]}\"\n  echo \"${a[*]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmqbbfee8.sh: line 29: syntax error near unexpected token `(''

    /tmp/tmpmqbbfee8.sh: line 29: `    array=rc(array)''

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Get\
    \ an iterable that splits the string on spaces\n  # And filter out empty strings\
    \ before passing them to map\n  local -a items=($(echo $1 |sed 's/^ *//g' |sed\
    \ 's/ *$//g'))\n  local -a sorted=()\n  local i item\n  local j\n  for ((i=0;\
    \ i<${#items[@]}; i++)); do\n    item=\"${items[i]}\"\n    for ((j=0; j<${#items[@]};\
    \ j++)); do\n      [[ \"${items[j]}\" -gt \"$item\" ]] && break\n    done\n  \
    \  if [[ ${j} -eq ${#items[@]} ]]; then\n      # item is greater than all others\n\
    \      sorted+=(\"$item\")\n    fi\n  done\n  printf '%s\\n' \"${sorted[@]}\"\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ strange_array=(\"$@\")\n  local i=0\n  local sorted=()\n  while [ \"${#strange_array[@]}\"\
    \ -gt 0 ]; do\n    sorted[i]=\"${strange_array[i]}\"\n    sorted[i]=\"${strange_array[$i]}\"\
    \n    sorted[i]=\"${strange_array[$i]}\"\n    i=$(($i+1))\n  done\n  local output\n\
    \  output=\"$( IFS=$'\\n' echo \"${sorted[*]}\" )\"\n  echo $output\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=12 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660059350
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ x=\"$1\"\n  shift\n  local output\n  local i val\n  output=\"$(IFS=' '; echo\
    \ \"$x\")\"\n  for i in $(seq 0 \"$((${#x} - 1))\"); do\n    val=\"$(echo \"$output\"\
    \ | tr \"\\c\" \" \")\"\n    output=\"$(echo \"$output\" | tr \"\\c\" \" \")\"\
    \n    echo \"$(echo \"$output\" | sort -r -n | sed -r -e \"s/^[[:digit:]]+[ ]*(.*)/\\\
    1/\")\"\n  done\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ string=\"$1\"\n    local sorted\n    local i var\n    local temp\n    sorted=()\n\
    \n    # Remove all spaces from string\n    string=\"${string// /}\"\n\n    # Remove\
    \ all empty elements\n    string=\"${string//$'\\n'/ }\"\n\n    # Split the string\
    \ into array of elements divided by spaces\n    IFS=$'\\n' read -r -a array <<<\
    \ \"$string\"\n\n    # Sort each element of the array in descending order\n  \
    \  for element in \"${array[@]}\"; do\n        element=\"${element// /}\"\n  \
    \      element=${element//$'\\n'/ }\n        IFS=' ' read -r i var <<< \"${element}\"\
    \n        # Put each element into the sorted array\n        sorted+=(\"\\\"$var\\\
    \"\")\n    done\n\n    # Put sorted array into the final result\n    IFS=$'\\\
    n' read -r -a array <<< \"${sorted[@]}\"\n    echo \"${array[@]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ _list=$1\n  shift\n\n  local _sorted=$(strange_sort_string \"$_list\")\n  local\
    \ _sorted=$(strange_sort_string \"$_sorted\")\n\n  echo $_sorted\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppkfarxer.sh: line 18: strange_sort_string: command not found

    /tmp/tmppkfarxer.sh: line 19: strange_sort_string: command not found

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ IFS=$'\\n'\n  # This doesn't work if we pass an empty list, so we don't need\
    \ a special case.\n  if [ -z \"$1\" ]; then\n    return 0\n  fi\n  local IFS='\\\
    n' arr=\"$1\"\n  local output=''\n  local i\n  for (( i=0; i<${#arr[@]}-1; i++\
    \ )); do\n    local j\n    for (( j=0; j<${#arr[@]}-i; j++ )); do\n      if [[\
    \ ${arr[$j]} == ${arr[$j+1]} ]]; then\n        arr[$j+1]=\"${arr[$j+1]}\"\n  \
    \    else\n        arr[$j]=\"${arr[$j]}\"\n        arr[$j+1]=\"${arr[$j+1]}\"\n\
    \        break\n      fi\n    done\n  done\n  output=\"$arr[@]\"\n  output=\"\
    ${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\
    \\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"\
    ${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\
    \\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"\
    ${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\
    \\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"\
    ${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\
    \\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"\
    ${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\
    \\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"\
    ${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\
    \\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"\
    ${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\
    \\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"\
    ${output// /\\\\}\"\n  output=\"${output// /\\\\}\"\n  output=\"${output// /\\\
    \\}\"\n  output\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmwofge31.sh: line 74: output: command not found

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    if\
    \ [ -z \"$1\" ]\n    then\n        echo \"[]\"\n        return\n    fi\n    echo\
    \ \"$1\" | sed 's/ /\",\"/g' | sort -n | sed -e 's/,$//g'\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=$1; shift\n    local min=$1; shift\n\n    local i=$((min + 1))\n    local\
    \ tmp=$(echo $list | cut -d\"[\" -f$i);\n    echo $tmp\n    while [ $i -le $(($min\
    \ + 1)) ]; do\n        i=$((i + 1))\n        tmp=$(echo $list | cut -d\"[\" -f$i);\n\
    \        echo $tmp\n    done\n    echo $list\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ IFS=$'\\n'\n    local arr=($1)\n    for (( i=${#arr[@]}-1; i>0; i-- )); do\n\
    \        local minimum=${arr[i]}\n        local maximum=${minimum}\n        for\
    \ (( j=i+1; j<${#arr[@]}; j++ )); do\n            local test=${arr[j]}\n     \
    \       if (( test > minimum )); then\n                minimum=${test}\n     \
    \       fi\n            if (( test < maximum )); then\n                maximum=${test}\n\
    \            fi\n        done\n        arr[i]=${minimum}\n        arr[j]=${maximum}\n\
    \    done\n    local IFS=$IFS_OLD\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Split\
    \ $1 by space into array\n  IFS=$'\\ '\n  arr=($1)\n\n  # Sort the array\n  arr=(\
    \ ${arr[*]} )  # This is not an in-place sort\n\n  # Put back the IFS\n  IFS=$IFS_ORIG\n\
    \n  # Return sorted array\n  printf \"\\\"%s\\\"\\n\" ${arr[@]}\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ i str arr\n    i=0\n    str=$(echo $1 | sed -r 's/^[ \\t]*//;s/[ \\t]*$//;s/[[:space:]]*,[[:space:]]*/,/g')\n\
    \    while [ -n \"$str\" ]; do\n        arr[i]=$str\n        let \"i++\"\n   \
    \     str=$(echo $1 | sed -r 's/^[ \\t]*//;s/[ \\t]*$//;s/[[:space:]]*,[[:space:]]*/,/g')\n\
    \    done\n    arr[$i]=$1\n    echo ${arr[@]}\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=28 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=18 encoding='utf-8'>
  timestamp: 1660059350
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=$(echo \"$1\" | tr '[:space:]' '\\n' | sort -n -k 2\n      | tail -n +2\
    \ | head -n -1\n      | tr '\\n' '[:space:]' | sed -r 's/^.\\+\"(.+)\"/\\\\1/')\n\
    \    echo \"$list\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmthu5wus.sh: command substitution: line 19: syntax error near unexpected
    token `|''

    /tmp/tmpmthu5wus.sh: command substitution: line 19: `      | tail -n +2 | head
    -n -1''

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ string=\"${1}\"\n  local strange_sort\n  strange_sort=\"$(echo \"${string}\"\
    \ | tr \"\\n\" \" \" | sort -n)\"\n  echo \"${strange_sort}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ Sort is stable if items have equal values\n    local sorted_list=\"$1\"\n  \
    \  local sorted_string=\"\"\n    local i=1 max_str=\"\\\"$2\\\"\"\n\n    while\
    \ [ \"$sorted_list\" ] ; do\n        if [ \"$sorted_list\" == \"$max_str\" ];\
    \ then\n            ((i++))\n            max_str=\"\\\"$i\\\"\"\n        fi\n\
    \        sorted_string=\"$sorted_string \\\"$sorted_list\\\"\"\n        sorted_list=\"\
    $max_str\"\n    done\n    echo \"$sorted_string\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=26 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=23 encoding='utf-8'>
  timestamp: 1660059350
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -i i j\n  local -a sorted_list=( )\n  local strange_list\n  local tmp\n  for\
    \ i; do\n    strange_list=\"${strange_list} \\\"${i}\\\"\"\n  done\n  # sort is\
    \ stable, so sort twice\n  # first sort by minimum integer in list\n  strange_list=$(sort\
    \ ${strange_list})\n  strange_list=$(sort ${strange_list})\n  # then sort by maximum\
    \ integer in list\n  strange_list=$(sort ${strange_list})\n  strange_list=$(sort\
    \ ${strange_list})\n  # and then sort by minimum integer in list\n  strange_list=$(sort\
    \ ${strange_list})\n  strange_list=$(sort ${strange_list})\n  # then sort by maximum\
    \ integer in list\n  strange_list=$(sort ${strange_list})\n  strange_list=$(sort\
    \ ${strange_list})\n  # and then sort by minimum integer in list\n  strange_list=$(sort\
    \ ${strange_list})\n  strange_list=$(sort ${strange_list})\n  # and then sort\
    \ by maximum integer in list\n  strange_list=$(sort ${strange_list})\n  strange_list=$(sort\
    \ ${strange_list})\n  # and then sort by minimum integer in list\n  strange_list=$(sort\
    \ ${strange_list})\n  strange_list=$(sort ${strange_list})\n  # and then sort\
    \ by maximum integer in list\n  strange_list=$(sort ${strange_list})\n  strange_list=$(sort\
    \ ${strange_list})\n  # and then sort by minimum integer in list\n  strange_list=$(sort\
    \ ${strange_list})\n  strange_list=$(sort ${strange_list})\n  # and then sort\
    \ by maximum integer in list\n  strange_list=$(sort ${strange_list})\n  strange_list=$(sort\
    \ ${strange_list})\n  # and then sort by minimum integer in list\n  strange_list=$(sort\
    \ ${strange_list})\n  strange_list=$(sort ${strange_list})\n  # and then sort\
    \ by maximum integer in list\n  strange_list=$(sort ${strange_list})\n  strange_list=$(sort\
    \ ${strange_list})\n  # and then sort by minimum integer in list\n  strange_list=$(sort\
    \ ${strange_list})\n  strange_list=$(sort ${strange_list})\n  # and then sort\
    \ by maximum integer in list\n  strange_list=$(sort ${strange_list})\n  strange_list=$(sort\
    \ ${\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbi8adynd.sh: line 64: unexpected EOF while looking for matching
    `)''

    /tmp/tmpbi8adynd.sh: line 85: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ arr=$1\n    local n=$2\n    # Make sure we have enough elements\n    if (( n\
    \ )); then\n        # Sort the array\n        local sorted_arr\n        for ((\
    \ i=0; i<$n; i++ )); do\n            sorted_arr+=${arr:$i:1}\n        done\n \
    \       # Strip the quotes from the strings\n        local i=$n\n        while\
    \ (( i-- )); do\n            sorted_arr=${sorted_arr%\"}\"}\n        done\n  \
    \      # Remove the quotes from string and return\n        echo $sorted_arr\n\
    \    fi\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  echo\
    \ \"$1\" | tr \" \" \"\\n\" | sort -rn | tr \" \" \"\\n\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ IFS=$'\\n';\n    local list=\"$1\"\n    local output=''\n    local last=$(echo\
    \ \"${list}\" | head -n 1)\n\n    while [ -n \"${list}\" ]; do\n        local\
    \ first=$(echo \"${list}\" | head -n 1)\n        local rest=$(echo \"${list}\"\
    \ | tail -n ${#last})\n        local temp=\"\\\"${last}\\\"\"\n        local last=$(echo\
    \ \"${rest}\" | head -n 1)\n\n        output+=\"${temp} \"\n        list=\"${rest}\"\
    \n    done\n    output+=\"${last}\"\n    echo \"${output}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=27 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=13 encoding='utf-8'>
  timestamp: 1660059350
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ strange_list\n    strange_list=\"'$1'\"\n    strange_list=$(echo $strange_list\
    \ | sed \"s/ /'/g\")\n    strange_list=$(echo $strange_list | sed \"s/'//g\")\n\
    \    strange_list=$(echo $strange_list | sed \"s/,/ '/g\")\n    strange_list=$(echo\
    \ $strange_list | sed \"s/'//g\")\n    echo $strange_list\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ sorted_list\n  local list\n  local i\n\n  if [ -z \"$1\" ]; then return 1; fi\n\
    \  list=( $1 )\n  for (( i=0; i<${#list}; i++ )); do\n    sorted_list+=($(echo\
    \ $list | sort -n))\n  done\n  printf \"%s\" ${sorted_list[@]}\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=\"$1\"\n    local length=\"${#list}\"\n    local min\n    local max\n\n\
    \    min=\"${list[1]}\"\n    max=\"${list[$length-1]}\"\n    local i=0\n\n   \
    \ while [[ $i -lt $length ]]; do\n        if [[ $list[i] -gt $max ]]; then\n \
    \           list=\"$min $list\"\n        elif [[ $list[i] -lt $min ]]; then\n\
    \            list=\"$list $min\"\n        else\n            list=\"$list $list[i]\"\
    \n        fi\n        let i+=1\n    done\n    echo \"$list\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9lhralgd.sh: line 25: [[: 1 2 3 4[i]: syntax error in expression
    (error token is "2 3 4[i]")

    /tmp/tmp9lhralgd.sh: line 27: [[: 1 2 3 4[i]: syntax error in expression (error
    token is "2 3 4[i]")

    /tmp/tmp9lhralgd.sh: line 25: [[: 1 2 3 4 1 2 3 4[i][i]: syntax error in expression
    (error token is "2 3 4 1 2 3 4[i][i]")

    /tmp/tmp9lhralgd.sh: line 27: [[: 1 2 3 4 1 2 3 4[i][i]: syntax error in expression
    (error token is "2 3 4 1 2 3 4[i][i]")

    /tmp/tmp9lhralgd.sh: line 25: [[: 1 2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i][i]:
    syntax error in expression (error token is "2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i][i]")

    /tmp/tmp9lhralgd.sh: line 27: [[: 1 2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i][i]:
    syntax error in expression (error token is "2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i][i]")

    /tmp/tmp9lhralgd.sh: line 25: [[: 1 2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i] 1 2
    3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i][i][i]: syntax error in expression (error
    token is "2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i] 1 2 3 4 1 2 3 4[i] 1 2 3 4 1
    2 3 4[i][i][i][i]")

    /tmp/tmp9lhralgd.sh: line 27: [[: 1 2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i] 1 2
    3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i][i][i]: syntax error in expression (error
    token is "2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i] 1 2 3 4 1 2 3 4[i] 1 2 3 4 1
    2 3 4[i][i][i][i]")

    /tmp/tmp9lhralgd.sh: line 25: [[: 1 2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i] 1 2
    3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i][i] 1 2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i]
    1 2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i][i][i][i]: syntax error in expression
    (error token is "2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i] 1 2 3 4 1 2 3 4[i] 1 2
    3 4 1 2 3 4[i][i][i] 1 2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i] 1 2 3 4 1 2 3 4[i]
    1 2 3 4 1 2 3 4[i][i][i][i][i]")

    /tmp/tmp9lhralgd.sh: line 27: [[: 1 2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i] 1 2
    3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i][i] 1 2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i]
    1 2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i][i][i][i]: syntax error in expression
    (error token is "2 3 4 1 2 3 4[i] 1 2 3 4 1 2 3 4[i][i] 1 2 3 4 1 2 3 4[i] 1 2
    3 4 1 2 '
  stdout: ''
  timestamp: 1660059345
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list=$1\n  local i strange result\n  # Make sure there is something to sort\n\
    \  if [ \"${#list}\" -eq 0 ]; then\n    return \"\"\n  fi\n  # Make sure there\
    \ is only one argument in $list\n  if [ \"${#list}\" -gt 1 ]; then\n    echo \"\
    strange_sort_list(): ${list} must have only 1 argument\"\n    return \"\"\n  fi\n\
    \  list=${list//\" \"/\",\"}\n  list=${list//\"[ ]*\"/\"[ \"}\n  list=${list//\"\
    ]\"/ ]}\n  list=${list//\" }\"/ }\n  list=${list//\" ,\"}\n  list=${list//\" ,\"\
    }\n  list=${list//\" ]\"/ ]}\n  list=${list//\" ]\"/ }\n  list=${list//\" \"/\"\
    ,\"}\n  list=${list//\"[ ]*\"/\"[ \"}\n  list=${list//\"]\"/ ]}\n  list=${list//\"\
    \ }\"/ }\n  list=${list//\" ,\"}\n  list=${list//\" ,\"}\n  list=${list//\" ]\"\
    / }\n  list=${list//\" \"/\",\"}\n  list=${list//\"[ ]*\"/\"[ \"}\n  list=${list//\"\
    ]\"/ ]}\n  list=${list//\" }\"/ }\n  list=${list//\" ,\"}\n  list=${list//\" ,\"\
    }\n  list=${list//\" ]\"/ }\n  result=''\n  strange=0\n  while [ \"${#list}\"\
    \ -gt 0 ]; do\n    if [ \"${strange}\" -eq 0 ]; then\n      strange=1 result=\"\
    ${list[${#list}-1]}\"\n      list=$(echo \"${list}\"|sed -e \"s/ \\\"/ /g\")\n\
    \    else\n      if [ \"${strange}\" -gt 1 ]; then\n        result=\"${result}\
    \ \\\"${list[${#list}-1]}\\\"\"\n        list=$(echo \"${list}\"|sed -e \"s/ \\\
    \"/ /g\")\n      else\n        result=\"${result} \\\"${list[${#list}-1]}\\\"\"\
    \n        list=$(echo \"${list}\"|sed -e \"s/ \\\"/ /g\")\n        strange=0\n\
    \      fi\n    fi\n  done\n  result=${result//\"[ \"/\" ]\"} \n  result=${result//\"\
    \ ]\"/ } \n  result=${result//\"[ \" /\" ]\"} \n  result=${result//\" \" /\"/\
    \ } \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj_ylyi3_.sh: line 85: unexpected EOF while looking for matching
    `"''

    /tmp/tmpj_ylyi3_.sh: line 89: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ L1 L2 L3 L4 L5 L6 L7 L8 L9 L10 L11 L12 L13 L14 L15 L16 L17 L18 L19 L20 L21 L22\
    \ L23 L24 L25 L26 L27 L28 L29 L30 L31 L32 L33 L34 L35 L36 L37 L38 L39 L40 L41\
    \ L42 L43 L44 L45 L46 L47 L48 L49 L50\n  local SORT=\"\\\"${1:?Missing first argument}\\\
    \"\"\n  local i\n  L1=${SORT:2:-1}\n  L2=${SORT:4:-1}\n  L3=${SORT:6:-1}\n  L4=${SORT:8:-1}\n\
    \  L5=${SORT:10:-1}\n  L6=${SORT:12:-1}\n  L7=${SORT:14:-1}\n  L8=${SORT:16:-1}\n\
    \  L9=${SORT:18:-1}\n  L10=${SORT:20:-1}\n  L11=${SORT:22:-1}\n  L12=${SORT:24:-1}\n\
    \  L13=${SORT:26:-1}\n  L14=${SORT:28:-1}\n  L15=${SORT:31:-1}\n  L16=${SORT:33:-1}\n\
    \  L17=${SORT:35:-1}\n  L18=${SORT:37:-1}\n  L19=${SORT:39:-1}\n  L20=${SORT:41:-1}\n\
    \  L21=${SORT:42:-1}\n  L22=${SORT:44:-1}\n  L23=${SORT:46:-1}\n  L24=${SORT:48:-1}\n\
    \  L25=${SORT:50:-1}\n  L26=${SORT:52:-1}\n  L27=${SORT:54:-1}\n  L28=${SORT:56:-1}\n\
    \  L29=${SORT:58:-1}\n  L30=${SORT:60:-1}\n  L31=${SORT:61:-1}\n  L32=${SORT:63:-1}\n\
    \  L33=${SORT:65:-1}\n\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[\
    \ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\"\
    \ ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n\
    \    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[\
    \ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    set\
    \ -x\n    local input_array=\"$1\"\n    local output_array=()\n    local current_num\n\
    \n    # Sort from smallest to greatest\n    for current_num in \"${input_array[@]}\"\
    ; do\n        # Sort from greatest to smallest\n        for (( i = ${#input_array[@]}\
    \ - 2 ; i >= 0 ; i-- )); do\n            # If the current number is smaller than\
    \ the next\n            if [ ${input_array[i]} -gt ${input_array[i+1]} ]; then\n\
    \                # Put the current number in output array\n                output_array+=(${input_array[i]})\n\
    \                # Remove the current number from input array\n              \
    \  shift $i\n            fi\n        done\n        # Append current number to\
    \ output array\n        output_array+=(${current_num})\n    done\n\n    # Remove\
    \ extra quotes\n    output_array=( \"${output_array[@]}\" )\n    # Return array\n\
    \    printf '%s\\n' \"${output_array[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '++ local ''input_array=1 2 3 4''

    ++ output_array=()

    ++ local output_array

    ++ local current_num

    ++ for current_num in "${input_array[@]}"

    ++ (( i = 1 - 2  ))

    ++ (( i >= 0  ))

    ++ output_array+=(${current_num})

    ++ output_array=("${output_array[@]}")

    ++ printf ''%s\n'' 1 2 3 4

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ i\n  local sorted\n  sorted=()\n  i=$1\n  while (( ${#i} > 0 )); do\n    sorted+=(\"\
    $i\")\n    i=$(echo $i | awk '{print $NF}' | sort)\n  done\n  echo \"${sorted[@]}\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=47 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=43 encoding='utf-8'>
  timestamp: 1660059350
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -r list=\"$1\"\n    local -a sorted=()\n    local -a sorted_with_delimiter_sorted=()\n\
    \    local -a delimiters_sorted=()\n    local -a delimiters_sorted_with_delimiters=()\n\
    \    local -a delimiters_sorted_with_spaces=()\n    local -a delimiters_sorted_with_underscores=()\n\
    \    local -a sorted_with_underscores=()\n\n    # Sort with delimiters\n    #\
    \ Add delimiters first\n    for delimiter in \"${IFS}\"; do\n        delimiters_sorted+=(\"\
    ${delimiter}\")\n    done\n    # Sort with spaces\n    for word in \"${list[@]}\"\
    ; do\n        delimiters_sorted_with_spaces+=(\"${word}\")\n    done\n    # Sort\
    \ with underscores\n    for word in \"${list[@]}\"; do\n        delimiters_sorted_with_underscores+=(\"\
    ${word}\")\n    done\n    # Sort with delimiters\n    for delimiter in \"${IFS}\"\
    ; do\n        delimiters_sorted_with_delimiters+=(\"${delimiter}\")\n    done\n\
    \    # Sort with underscores\n    for word in \"${list[@]}\"; do\n        sorted_with_underscores+=(\"\
    ${word}\")\n    done\n    # Add delimiters last\n    for delimiter in \"${IFS}\"\
    ; do\n        sorted_with_delimiter_sorted+=(\"${delimiter}\")\n    done\n   \
    \ # Sort with spaces last\n    for word in \"${list[@]}\"; do\n        sorted_with_underscores+=(\"\
    ${word}\")\n    done\n    for word in \"${list[@]}\"; do\n        sorted+=(\"\
    ${word}\")\n    done\n    # Sort with delimiters last\n    for delimiter in \"\
    ${IFS}\"; do\n        sorted_with_delimiter_sorted+=(\"${delimiter}\")\n    done\n\
    \    for word in \"${list[@]}\"; do\n        sorted+=(\"${word}\")\n    done\n\
    \    for word in \"${list[@]}\"; do\n        sorted+=(\"${word}\")\n    done\n\
    \    # Return\n    IFS=$'\\n' \"${sorted_with_delimiter_sorted[@]}\" > \"$1\"\n\
    \    IFS=$'\\n' \"${sorted_with_delimiters[@]}\" > \"$1\"\n    IFS=$'\\n' \"${sorted_with_underscores[@]}\"\
    \ > \"$1\"\n    IFS=$'\\n' \"${delimiters_sorted_with_delimiters[@]}\" > \"$1\"\
    \n    IFS=$'\\n' \"${delimiters_sorted_with_spaces[@\n}\n\ncandidate() {\n   \
    \ strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwcjbg3r4.sh: line 88: unexpected EOF while looking for matching
    `"''

    /tmp/tmpwcjbg3r4.sh: line 92: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ i\n\n  i=1\n  while [ \"$i\" -le \"${#1}\" ] ; do\n    local j\n\n    j=$(\n\
    \      eval echo \\${${#1}[$((${i}-1))]}\n      echo \"${#1}[$((${i}-1))]\"\n\
    \    )\n\n    local tmp\n    tmp=${#1}\n    echo \"$((${j}))\"\n    eval echo\
    \ \"${#1}[$((${j}))]=\\${${#1}[$((${i}-1))]}\"\n    eval ${#1}[$((${j}))]=\\${${#1}[$((${i}-1))]}\"\
    \n    i=$((${i}+1))\n  done\n\n  local val\n  val=$1\n\n  local strange_sort_list\n\
    \n  strange_sort_list=$(\n    eval echo \"$2\"\n    echo \"\"\n  )\n\n  return\
    \ 0\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjipmkz4b.sh: line 61: unexpected EOF while looking for matching
    `"''

    /tmp/tmpjipmkz4b.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    if\
    \ [[ -z \"$1\" ]]; then\n        echo \"$2\"\n    else\n        local item\n \
    \       local i\n        local output\n        output=$(IFS=\" \"; echo \"$1\"\
    )\n        for i in $(seq 0 $((${#output[@]}-1))); do\n            item=$(echo\
    \ \"$output[$i]\")\n            local j\n            for j in $(seq 0 $((${#output[@]}-1)));\
    \ do\n                if [[ $j == $i ]]; then\n                    output[$j]=\"\
    $item\"\n                    rm -v $item && break\n                else\n    \
    \                output[$j]=\"${output[$j-1]}\"\n                fi\n        \
    \    done\n        done\n        IFS=\"$OLDIFS\"\n        echo \"${output[@]}\"\
    \n    fi\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ input=\"$1\"\n  shift\n  local output\n  # If the list is empty, return an empty\
    \ list\n  if [ \"${input}\" = \"${input}\" ]; then\n    return \"\"\n  fi\n  #\
    \ Create a set of values from input and remove duplicates\n  # We will use a set\
    \ to remove duplicates efficiently\n  output=$(echo \"${input}\" | tr \" \" \"\
    \\n\" | sort -u | tr \"\\n\" \" \")\n  # If there are no more values in input,\
    \ return empty list\n  if [ \"${output}\" = \"${output}\" ]; then\n    return\
    \ \"\"\n  fi\n  echo \"${output}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptwe5qo73.sh: line 20: return: : numeric argument required

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    if\
    \ [[ \"$1\" == \"\" ]]; then\n        echo \"\"\n        return\n    fi\n    IFS='\
    \ ' read -r -a strange_list <<< \"$1\"\n    for strange_value in \"${strange_list[@]}\"\
    ; do\n        tmp_min=$strange_value\n        tmp_max=$(echo \"${strange_list[@]}\"\
    \ | sort -nk 1,1 -nk 2,2 | head -1)\n        tmp_min=\"${strange_list[@]}\" |\
    \ sort -nk 1,1 -nk 1,2 | head -1 | cut -d' ' -f1\n        tmp_max=\"${strange_list[@]}\"\
    \ | sort -nk 1,1 -nk 1,2 | head -1 | cut -d' ' -f1\n        if [[ \"$tmp_min\"\
    \ == \"$strange_value\" ]]; then\n            tmp_min=\"${strange_list[@]}\" |\
    \ sort -nk 1,1 -nk 1,2 | head -1 | cut -d' ' -f2\n            tmp_max=\"${strange_list[@]}\"\
    \ | sort -nk 1,1 -nk 1,2 | head -1 | cut -d' ' -f2\n        fi\n        if [[\
    \ \"$tmp_max\" == \"$strange_value\" ]]; then\n            tmp_min=\"${strange_list[@]}\"\
    \ | sort -nk 1,1 -nk 1,2 | head -1 | cut -d' ' -f3\n            tmp_max=\"${strange_list[@]}\"\
    \ | sort -nk 1,1 -nk 1,2 | head -1 | cut -d' ' -f3\n        fi\n        tmp_min=\"\
    ${strange_list[@]}\" | sort -nk 1,1 -nk 1,2 | head -1 | cut -d' ' -f4\n      \
    \  tmp_max=\"${strange_list[@]}\" | sort -nk 1,1 -nk 1,2 | head -1 | cut -d' '\
    \ -f4\n        echo \"$tmp_min\"\n        echo \"$tmp_max\"\n    done\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ items=$1\n    local sorted=0\n    local min=\"${items[0]}\"\n    local max=\"\
    ${items[-1]}\"\n\n    for (( i=0; i<${#items[@]}; i++ )); do\n        local j=0\n\
    \        local k=-1\n\n        (( j+=1 ))\n        local ichar=\"${items[j]:0:1}\"\
    \n        local jchar=\"${items[j]:1:1}\"\n        if [ \"$ichar\" = \"$jchar\"\
    \ ]; then\n            j=$(( j-1 ))\n            k=$(( k-1 ))\n        fi\n\n\
    \        if [ \"$ichar\" != \"$jchar\" ]; then\n            (( sorted=sorted+1\
    \ ))\n            local temp=\"${items[$i]}\"\n            items[$i]=\"${items[$j]}\"\
    \n            items[$j]=\"${temp}\"\n        fi\n    done\n\n    for (( j=min;\
    \ j<=max; j++ )); do\n        (( sorted=sorted+1 ))\n        local temp=\"${items[$j]}\"\
    \n        items[$j]=\"${items[$i]}\"\n        items[$i]=\"${temp}\"\n    done\n\
    \n    for (( i=0; i<${#items[@]}; i++ )); do\n        local temp=\"${items[$i]}\"\
    \n        items[$i]=\"${items[$sorted-1]}\"\n        items[$sorted-1]=\"${temp}\"\
    \n    done\n\n    # Escape quotes in the string array elements\n    for item in\
    \ \"${items[@]}\"; do\n        echo \"\\\"$item\\\"\"\n    done\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpofs77793.sh: line 18: items: bad array subscript

    /tmp/tmpofs77793.sh: line 40: ((: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    /tmp/tmpofs77793.sh: line 49: items: bad array subscript

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ LIST=\"$1\"\n    local STRANGE=()\n    local SORTED\n    # Add elements to STRANGE\
    \ array in order they appear\n    for x in $LIST; do\n        if [ $x -gt 0 ];\
    \ then\n            SORTED+=(\"$x\")\n        fi\n    done\n    # Sort STRANGE\
    \ in order from largest to smallest\n    for x in \"${SORTED[@]:1:${#SORTED[@]}}\"\
    ; do\n        STRANGE+=(\"$x\")\n    done\n    # Remove double quotes from each\
    \ element of STRANGE\n    for x in \"${STRANGE[@]}\"; do\n        STRANGE+=($(echo\
    \ \"$x\" | sed \"s/\\\"//g\"))\n    done\n    echo \"${STRANGE[@]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tlocal\
    \ IFS=$'\\ '\n\tlocal IFS=\" \"\n\tlocal items=()\n\tlocal i=$#\n\twhile [ $i\
    \ -gt 0 ]; do\n\t\tlocal item\n\t\titem=$1\n\t\tshift\n\t\tlocal value=${item}\n\
    \t\titems+=(\"\\\"${value}\\\"\")\n\t\ti=$i-1\n\tdone\n\techo \"${items[*]}\"\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8vvq4i61.sh: line 19: [: 1-1: integer expression expected

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  IFS='\
    \ ' read -r -a array <<< \"$1\"\n  for i in ${array[@]/*}; do\n    sort -nr <<<\
    \ \"${i} \"\n  done\n  printf '\"%s\"' \"${array[@]}\"\n}\n\ncandidate() {\n \
    \   strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Removing\
    \ double quotes\n  IFS=$'\\t' read -r -a list <<<\"$1\"\n  # Sorting by first\
    \ integer value\n  printf '%s\\n' \"${list[*]}\" | sort -g | sed 's/\"//g'\n}\n\
    \ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ temp_file=$1\n    local sorted_list=\"\"\n    local min_value=10000000\n   \
    \ local max_value=0\n    local current_value=0\n    local sorted_list=\"\"\n\n\
    \    while read line; do\n        if [ -n \"$line\" ]; then\n            current_value=$line\n\
    \        fi\n    done < $temp_file\n\n    for ((i=0; i<$current_value; i++));\
    \ do\n        if [ $i -eq 0 ]; then\n            sorted_list=\"$current_value\
    \ $line\"\n        else\n            sorted_list=\"$sorted_list $current_value\
    \ $line\"\n        fi\n    done < $temp_file\n\n    while read line; do\n    \
    \    if [ -n \"$line\" ]; then\n            if [[ $current_value -gt $min_value\
    \ ]]; then\n                min_value=$current_value\n            fi\n       \
    \     if [[ $current_value -lt $max_value ]]; then\n                max_value=$current_value\n\
    \            fi\n        fi\n    done < $temp_file\n\n    for ((i=$min_value;\
    \ i<=$max_value; i++)); do\n        if [ $i -eq 0 ]; then\n            sorted_list=\"\
    $line\"\n        else\n            sorted_list=\"$sorted_list $line\"\n      \
    \  fi\n    done < $temp_file\n\n    echo ${sorted_list//$'\"'/ }\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpm_rp9ghq.sh: line 14: $temp_file: ambiguous redirect

    /tmp/tmpm_rp9ghq.sh: line 28: $temp_file: ambiguous redirect

    /tmp/tmpm_rp9ghq.sh: line 14: $temp_file: ambiguous redirect

    /tmp/tmpm_rp9ghq.sh: line 47: $temp_file: ambiguous redirect

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list\n    # $1 is a space-separated list\n    list=\"${1}\"\n    # Split the\
    \ list at spaces\n    IFS=$'\\0' list=(${list})\n    # sort it\n    sort -k 2n\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=21 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660059350
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ tmp\n    local -n a=\n    local count\n    IFS=$'\\n' read -d '' -a arr <<<\"\
    $1\"\n    for i in \"${arr[@]}\"; do\n        count=0\n        tmp=\n        for\
    \ j in \"${arr[@]}\"; do\n            ((count++))\n            if [ \"$i\" -gt\
    \ \"$j\" ]; then\n                tmp=\"$j\"\n                break\n        \
    \    else\n                tmp=\"$i\"\n            fi\n        done\n        arr[$count]=\"\
    $tmp\"\n    done\n    IFS=' '\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n  \
    \  strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbh3_l5be.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpbh3_l5be.sh: line 24: [: 1 2 3 4: integer expression expected

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ IFS=\\  \n    local IFS=$'\\n'\n    local IFS=$'\\t'\n    local IFS=$'\\r' \n\
    \n    local strange_sorting=1\n    local strange_sorted_list=()\n\n    local strange_sorted_string=\"\
    -\"\n    local strange_sorted_num=0\n    local strange_sorted_nums=\"-\"\n   \
    \ local strange_sorted_nums_first=true\n\n    local i=0\n    while [ $i -lt $1\
    \ ]; do\n        local j=$((i+1))\n        if [ $strange_sorting -eq 1 ]; then\n\
    \            strange_sorted_list[i]=$(echo $strange_sorted_nums ${strange_sorted_num}${strange_sorted_nums_first})\n\
    \            strange_sorted_string=$(echo $strange_sorted_nums ${strange_sorted_num}${strange_sorted_nums_first})\n\
    \        else\n            strange_sorted_list[i]=$(echo $strange_sorted_nums_first\
    \ ${strange_sorted_num}${strange_sorted_nums})\n            strange_sorted_string=$(echo\
    \ $strange_sorted_nums_first ${strange_sorted_num}${strange_sorted_nums})\n  \
    \      fi\n        local temp=$strange_sorted_nums\n        strange_sorted_nums=$strange_sorted_num\n\
    \        local temp=$strange_sorted_num\n        strange_sorted_num=$temp\n  \
    \      temp=$strange_sorted_nums_first\n        strange_sorted_nums_first=$temp\n\
    \        if [ $i -eq $j ]; then\n            if [ $strange_sorting -eq 1 ]; then\n\
    \                strange_sorted_nums=$strange_sorted_num$strange_sorted_nums\n\
    \            else\n                strange_sorted_nums=$strange_sorted_num$strange_sorted_num\n\
    \            fi\n        fi\n        i=$((j-1))\n        echo $strange_sorted_list[i]\n\
    \        strange_sorting=$((strange_sorting -1))\n    done\n    echo $strange_sorted_list[0]\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa8u7m65r.sh: line 29: [: 1 2 3 4: integer expression expected

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ strange_str=\"\"\n  local arr=( $1 )\n  local i\n  for (( i=1; i<${#arr[*]};\
    \ i++ )); do\n    strange_str=\"${strange_str}'\\\"${arr[i]}\\\",\"\n  done\n\
    \  echo \"${strange_str%,}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ strange_sort strange_sort_str strange_sort_tmp tmp_val i\n    strange_sort=\"\
    $1\"\n    strange_sort_str=\"${strange_sort//[!0-9]/}\"\n    strange_sort_tmp=\"\
    ${strange_sort_str%${strange_sort_str}}\"\n    for i in $strange_sort_tmp\n  \
    \  do\n        tmp_val=$i\n        tmp_val=\"${strange_sort_tmp//[0-9]/}\"\n \
    \       strange_sort_str=\"${strange_sort_str//${tmp_val}/${i}}\"\n    done\n\
    \    echo \"\\\"${strange_sort_str}\\\"\" \n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=\"$1\"\n    if [[ \"${#list}\" -eq 0 ]]; then\n        echo \"\"\n    \
    \    return\n    fi\n\n    local min\n    local max\n    local i\n    # find min\
    \ and max elements\n    for i in $(seq 1 $((${#list}-1))); do\n        if [[ \"\
    ${list[i]}\" -lt \"${list[min]}\" ]]; then\n            min=$((i-1))\n       \
    \ fi\n        if [[ \"${list[i]}\" -gt \"${list[max]}\" ]]; then\n           \
    \ max=$((i-1))\n        fi\n    done\n\n    # sort it\n    local sorted\n    sorted=$(eval\
    \ echo \\$\\{${min}_${max}_${min}_${max}\\})\n    eval \"$list\"=\"${sorted}\"\
    \n\n    # rebuild list\n    local rebuild\n    rebuild=$(eval echo \\$\\{${min}_${max}_${max}_${min}\\\
    })\n    eval \"$list\"=\"${rebuild}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8t4jm_jf.sh: line 26: [[: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")

    /tmp/tmp8t4jm_jf.sh: line 29: [[: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    /tmp/tmp8t4jm_jf.sh: line 26: [[: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    /tmp/tmp8t4jm_jf.sh: line 29: [[: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    /tmp/tmp8t4jm_jf.sh: line 26: [[: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    /tmp/tmp8t4jm_jf.sh: line 29: [[: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    /tmp/tmp8t4jm_jf.sh: line 26: [[: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    /tmp/tmp8t4jm_jf.sh: line 29: [[: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    /tmp/tmp8t4jm_jf.sh: line 26: [[: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    /tmp/tmp8t4jm_jf.sh: line 29: [[: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    /tmp/tmp8t4jm_jf.sh: line 26: [[: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    /tmp/tmp8t4jm_jf.sh: line 29: [[: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    /tmp/tmp8t4jm_jf.sh: line 37: 1: command not found

    /tmp/tmp8t4jm_jf.sh: line 42: 1: command not found

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ i\n  for i in $@; do\n    local j\n    for j in $(seq 0 $((i-1)) 2); do\n  \
    \    echo -n \"${!j}\"\n    done\n    echo -n \" \"\n  done\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: "seq: invalid Zero increment value: \u20180\u2019\nTry 'seq --help' for\
    \ more information.\n"
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ IFS=' ' arr=($1 $2 $3 $4)\n    arr=(\"${arr[@]}\")\n    IFS=$'\\n'\n    echo\
    \ \"${arr[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    sort\
    \ -k 1,1n -k 2,2nr -k 3,3n -k 4,4nr -k 5,5n \\\n        <<< \"$1\" |\n       \
    \ sed \"s/\\\"//g\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ Write your own code here\n    local list_str=$( IFS=\" \"; echo \"$1\" | sed\
    \ 's/ /\"\"/g' )\n    # echo \"${list_str}\"\n    echo \"${list_str}\" >> /tmp/strange.log\n\
    \    echo \"$(sort /tmp/strange.log)\" >> /tmp/strange.log\n    local strange_list=(\
    \ $(grep -v \"^#\" /tmp/strange.log | sed 's/\"//g') )\n    rm /tmp/strange.log\n\
    \    echo \"${strange_list[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ IFS=\" \"\n    sort -n \"$1\" | sed -E 's/\"([0-9]+)\"/\\1/' | sort -n | sed\
    \ -E 's/\"([0-9]+)\"/\\1/'\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: ''1 2 3 4'': No such file or directory

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Get\
    \ array of integers\n  local integers=( \"$1\" )\n\n  # Sort in descending order\n\
    \  integer \"${integers[@]}\" | sort -nr -k1,1 -k2,2n | tr '\\n' ' ' > \"$1.sorted\"\
    \n\n  # Remove quotes, surrounding spaces, and trailing spaces and return array\n\
    \  local sorted=( $(sed -E 's/^\"?([^\"]+)\"$//g; s/^ +/\\n/g; s/\\n *$//g' \"\
    $1.sorted\" ) )\n\n  # Remove quotes, surrounding spaces, and trailing spaces\n\
    \  local sorted=($(\n    sed -E 's/^\"?([^\"]+)\"$//g; s/^ +/\\n/g; s/\\n *$//g'\
    \ \"$1.sorted\" |\n    tr '\\n' ' '\n  ))\n\n  # Remove quotes\n  local sorted=($(\n\
    \    sed -E 's/^\"?([^\"]+)\"$//g; s/^ +/\\n/g; s/\\n *$//g' \"$1.sorted\" |\n\
    \    tr '\\n' ' '\n  ))\n\n  # Remove trailing spaces\n  local sorted=($(\n  \
    \  sed -E 's/^ +/\\n/g; s/\\n *$//g' \"$1.sorted\" |\n    tr '\\n' ' '\n  ))\n\
    \n  # Remove surrounding spaces\n  local sorted=($(\n    sed -E 's/^([^\"]+)\"\
    $//g; s/^ +/\\n/g; s/\\n *$//g' \"$1.sorted\" |\n    tr '\\n' ' '\n  ))\n\n  #\
    \ Remove leading spaces\n  local sorted=($(\n    sed -E 's/^[ \\t]+/\\n/g; s/\\\
    n *$//g' \"$1.sorted\" |\n    tr '\\n' ' '\n  ))\n\n  # Remove leading spaces\
    \ and line breaks\n  local sorted=($(\n    sed -E 's/^[ \\t]+//g; s/\\n *$//g'\
    \ \"$1.sorted\" |\n    tr '\\n' ' '\n  ))\n\n  # Remove trailing line breaks\n\
    \  local sorted=($(\n    sed -E 's/\\n *$//g' \"$1.sorted\" |\n    tr '\\n' '\
    \ '\n  ))\n\n  # Remove all empty values\n  local sorted=($(\n    local sorted=(\
    \ )\n    for x in \"${sorted[@]}\"; do [ -n \"$x\" ] && sorted+=( \"$x\" ); \n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdehhvpmj.sh: line 67: unexpected EOF while looking for matching
    `)''

    /tmp/tmpdehhvpmj.sh: line 90: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ _IFS=\"$IFS\"\n    local _IFS$1=\n    local _IFS$1$1=\n    IFS=$_IFS$1$1 _IFS=$_IFS\
    \ $1\n    IFS=$_IFS $1\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[\
    \ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\"\
    \ ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n\
    \    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[\
    \ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpthhgcyzz.sh: line 16: local: `2'': not a valid identifier

    /tmp/tmpthhgcyzz.sh: line 16: local: `3'': not a valid identifier

    /tmp/tmpthhgcyzz.sh: line 16: local: `4='': not a valid identifier

    /tmp/tmpthhgcyzz.sh: line 17: local: `2'': not a valid identifier

    /tmp/tmpthhgcyzz.sh: line 17: local: `3'': not a valid identifier

    /tmp/tmpthhgcyzz.sh: line 17: local: `41'': not a valid identifier

    /tmp/tmpthhgcyzz.sh: line 17: local: `2'': not a valid identifier

    /tmp/tmpthhgcyzz.sh: line 17: local: `3'': not a valid identifier

    /tmp/tmpthhgcyzz.sh: line 17: local: `4='': not a valid identifier

    /tmp/tmpthhgcyzz.sh: line 18: 1: command not found

    /tmp/tmpthhgcyzz.sh: line 19: 1: command not found

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ strange output\n    strange=$1\n\n    if [ -z \"$strange\" ]; then\n       \
    \ return \"\"\n    fi\n\n    local last_val=\"${strange##* }\"\n\n    while [[\
    \ \"$strange\" =~ (^|[[:space:]])([0-9]+)\\t([^\\t]+)\\t([0-9]+)[[:space:]]$\n\
    \      ]]; do\n        local val1=${BASH_REMATCH[2]}\n        local val2=${BASH_REMATCH[3]}\n\
    \        local val3=${BASH_REMATCH[4]}\n        if [ $val2 < $last_val ]; then\n\
    \            output+=\" $val1\\ $val2\\ $val3\"\n        else\n            output+=\"\
    \ $val3\\ $val2\\ $val1\"\n        fi\n        last_val=$val3\n    done\n\n  \
    \  echo \"$output\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ string=$1 output\n    IFS= read -r -d '' -a array <<< \"$string\"\n    output=$(for\
    \ (( i=${#array[*]} - 1 )\n             ; i >= 0\n             ; i-- )\n    do\n\
    \        (( ${array[$i]} > array[${#array[@]}-1] )) &&\n        output+=\"${array[$i]}${array[@]:$i}\
    \ \"\n    done)\n    echo \"$output\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpptpc2a03.sh: command substitution: line 24: syntax error near `)''

    /tmp/tmpptpc2a03.sh: command substitution: line 24: `for (( i=${#array[*]} - 1
    )''

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ IFS=$'\\n'\n    local output\n    for output in $( seq 1 $( wc -l <<< \"$1\"\
    \ | cut -d \" \" -f 1 ) ); do\n        # find smallest element among remaining\
    \ elements.\n        # $( expr \"$output\" - \"$smallest\" ) prints number from\
    \ 1 to n of elements after smallest element.\n        smallest=$( expr \"$output\"\
    \ - \"$smallest\" ) \n    done\n\n    # remove smallest element from remaining\
    \ elements one by one.\n    local i\n    for output in $( seq 1 $( wc -l <<< \"\
    $1\" | cut -d \" \" -f 1 ) ); do\n        # find smallest element among remaining\
    \ elements.\n        # $( expr \"$output\" - \"$smallest\" ) prints number from\
    \ 1 to n of elements after smallest element.\n        smallest=$( expr \"$output\"\
    \ - \"$smallest\" ) \n    done\n\n    for output in $( seq 1 $( wc -l <<< \"$1\"\
    \ | cut -d \" \" -f 1 ) ); do\n        smallest=$( expr \"$output\" - \"$smallest\"\
    \ ) \n    done\n\n    # repeat above steps untill all remaining elements are sorted.\n\
    \    for output in $( seq 1 $( wc -l <<< \"$1\" | cut -d \" \" -f 1 ) ); do\n\
    \        smallest=$( expr \"$output\" - \"$smallest\" ) \n    done\n\n    IFS=$'\
    \ \\t\\n'\n    echo \"$( echo \"${!output[*]}\" | tr ' ' '\"' )\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'expr: non-integer argument

    expr: non-integer argument

    expr: non-integer argument

    expr: non-integer argument

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Check\
    \ if first argument isn't a list.\n  [[ \"$1\" == *\" \"* ]] && return 0\n  #\
    \ Check if $1 list contains just a single item.\n  [[ \"$#\" -eq 1 ]] && [[ \"\
    $1\" == *\"[0-9]\"* ]] && return 0\n  # Check if first item is a number.\n  [[\
    \ \"$1\" =~ ^[0-9]+$ ]] || return 0\n  # Find length of list.\n  num_ints=$(echo\
    \ \"$1\" | wc -w)\n  # Sort first number of list.\n  sort -n \"$1\" | head -n\"\
    $num_ints\" | tail -n +2\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  echo\
    \ \"$1\" | tr ' ' '\\n' | sort --parallel=8 --reverse | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list_array\n  list_array=(${1// / })\n  echo \"${list_array[*]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -n input=$1\n    local -n output=$2\n    local strange_sorter='{\n        local\
    \ key=$1;\n        local val=${input#*};\n        local length=${#val};\n    \
    \    local min;\n        local max;\n        if [ \"${#val}\" -gt 0 ]; then\n\
    \            min=\"${val[0]}\";\n            max=\"${val[length-1]}\";\n     \
    \   else\n            min='\"0\";\n            max='\"9\";\n        fi;\n    \
    \    local index;\n        for ((index=min;index<=max;index++)); do\n        \
    \    echo \"\\\"${val}\\\" \\\"${index}\\\"\"\n        done\n    }'\n    eval\
    \ $strange_sorter | sort -n -k 2 -r | sed \"s/ /\\\"/g\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2nhdemr8.sh: line 15: local: `1 2 3 4'': invalid variable name
    for name reference

    /tmp/tmp2nhdemr8.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp2nhdemr8.sh: eval: line 36: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ _strange_sort_list=\"$1\"\n    local _strange_sort_list_array=()\n    local\
    \ _strange_sort_list_line=()\n\n    for _strange_sort_list_item in $(_strange_sort_list);\
    \ do\n        _strange_sort_list_line+=($(_strange_sort_list_item))\n    done\n\
    \n    _strange_sort_list_array+=(\"${_strange_sort_list_line[@]}\")\n\n    while\
    \ [[ $(_strange_sort_list_array[0]) ]] && [[ $(_strange_sort_list_array[0]) -gt\
    \ 0 ]]; do\n        _strange_sort_list_array=()\n        for _strange_sort_list_item\
    \ in $(_strange_sort_list); do\n            local _strange_sort_list_item_array=()\n\
    \n            for _strange_sort_list_item_item in $(_strange_sort_list_item);\
    \ do\n                _strange_sort_list_item_array+=(\"\\\"${_strange_sort_list_item_item}\\\
    \"\")\n            done\n\n            _strange_sort_list_array+=(\"${_strange_sort_list_item_array[@]}\"\
    )\n        done\n    done\n\n    # Remove last quotes\n    _strange_sort_list_array=()\n\
    \n    for _strange_sort_list_item in $(_strange_sort_list); do\n        _strange_sort_list_array+=(\"\
    \\\"${_strange_sort_list_item}\\\"\")\n    done\n\n    # Sort by values\n    _strange_sort_list_array=(\"\
    ${_strange_sort_list_array[@]}\" | sort -n)\n\n    # Remove quotes\n    _strange_sort_list_array=()\n\
    \n    for _strange_sort_list_item in $(_strange_sort_list); do\n        _strange_sort_list_array+=(\"\
    ${_strange_sort_list_item}\")\n    done\n\n    # Remove last quotes\n    _strange_sort_list_array=()\n\
    \n    for _strange_sort_list_item in $(_strange_sort_list); do\n        _strange_sort_list_array+=(\"\
    ${_strange_sort_list_item}\")\n    done\n\n    # Sort by keys\n    _strange_sort_list_array=(\"\
    ${_strange_sort_list_array[@]}\" | sort -k)\n\n    # Remove quotes\n    _strange_sort_list_array=()\n\
    \n    for _strange_sort_list_item in $(_strange_sort_list); do\n        _strange_sort_\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpttd0ksf_.sh: line 46: syntax error near unexpected token `|''

    /tmp/tmpttd0ksf_.sh: line 46: `    _strange_sort_list_array=("${_strange_sort_list_array[@]}"
    | sort -n)''

    /tmp/tmpttd0ksf_.sh: line 51: _strange_sort_list: command not found

    /tmp/tmpttd0ksf_.sh: line 58: _strange_sort_list: command not found

    /tmp/tmpttd0ksf_.sh: line 63: syntax error near unexpected token `|''

    /tmp/tmpttd0ksf_.sh: line 63: `    _strange_sort_list_array=("${_strange_sort_list_array[@]}"
    | sort -k)''

    /tmp/tmpttd0ksf_.sh: line 70: syntax error near unexpected token `}''

    /tmp/tmpttd0ksf_.sh: line 70: `}''

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ sorted_list=\"$1\"\n  local sorted_list_name=\"$2\"\n  local sorted_list_path=\"\
    $3\"\n  # This works in bash/zsh\n  local sorted_list_lines=$(\n    echo \"$sorted_list\"\
    \n    | sed \"/^$/d\"\n    | tr -cd '[:digit:]'\n    | tr -cd '[:alpha:]'\n  \
    \  | tr -cd '[:blank:]'\n    | tr -cd '[:punct:]'\n    | tr -cd '[:lower:]'\n\
    \    | tr -cd '[:upper:]'\n    | tr -cd '[:print:]'\n    | sort -n\n  )\n  # This\
    \ works in bash\n  # We need to escape $sorted_list_name here\n  # In bash, ${sorted_list_name}\
    \ is equivalent to ${sorted_list_name:0:1}\n  # Since we have already removed\
    \ the empty string in the beginning\n  # We only need to add one more double quote\
    \ and it will do the job.\n  # Example (for path with spaces, this needs to be\
    \ escaped): $sorted_list_path/$(echo $sorted_list_name)\n  sorted_list=\"$(echo\
    \ \"$sorted_list\" | sed \"s/$sorted_list_name/$sorted_list_path/\")\"\n  # This\
    \ works in bash/zsh\n  # We need to escape $sorted_list_lines here\n  # In bash,\
    \ ${sorted_list_lines} is equivalent to ${sorted_list_lines:0:1}\n  # Since we\
    \ have already removed the empty string in the beginning\n  # We only need to\
    \ add one more double quote and it will do the job.\n  # Example (for path with\
    \ spaces, this needs to be escaped): $sorted_list_lines/$(echo $sorted_list_lines)\n\
    \  sorted_list=\"$(echo \"$sorted_list\" | sed \"s/$sorted_list_lines/$sorted_list_path/\"\
    )\"\n  eval \"$sorted_list_name=$sorted_list\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptp4z7ztz.sh: command substitution: line 33: syntax error near unexpected
    token `|''

    /tmp/tmptp4z7ztz.sh: command substitution: line 33: `    | sed "/^$/d"''

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tlocal\
    \ list=\"$1\"\n\tlocal length=\"$2\"\n\tlocal min=\"$3\"\n\tlocal max\n\tlocal\
    \ i j k\n\tlocal string\n\t# First take out the min and the max values\n\t# and\
    \ store them in variables min and max.\n\tmax=$(( $length - 2 ))\n\tmin=$(( $length\
    \ + 1 ))\n\tlist=\"$( echo \\\"$list\\\" | tr ' ' '\\n' | sed \\\"s/$min $max//\\\
    \" )\"\n\t# Then loop through all the values and add them to the\n\t# result array.\n\
    \tfor (( i = 0; i < $length; i++ )); do\n\t\tstring=\"$( echo $list | sed \\\"\
    s/$i $(( i+1 ))//\\\" )\"\n\t\tlist=$(echo \"$list\" | tr ' ' '\\n' | sed \\\"\
    s/$(( i+1 )) $max//\\\" )\n\t\tfor (( j = $(( i + 1 )); j < $max; j++ )); do\n\
    \t\t\tlist=\"$( echo $list | sed \\\"s/$(( j+1 )) $(( j+2 ))//\\\" )\"\n\t\tdone\n\
    \t\tlist=$(echo \"$list\" | tr ' ' '\\n' | sed \\\"s/$(( i+1 )) $(( i+2 ))//\\\
    \" )\n\t\tfor (( k = $min; k < $max; k++ )); do\n\t\t\tlist=\"$( echo $list |\
    \ sed \\\"s/$k $(( k+1 ))//\\\" )\"\n\t\tdone\n\t\tlist=$(echo \"$list\" | tr\
    \ ' ' '\\n' | sed \\\"s/$(( i+1 )) $(( i+2 ))//\\\" )\n\tdone\n\techo \"$list\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "sed: invalid option -- '2'\nUsage: sed [OPTION]... {script-only-if-no-other-script}\
    \ [input-file]...\n\n  -n, --quiet, --silent\n                 suppress automatic\
    \ printing of pattern space\n      --debug\n                 annotate program\
    \ execution\n  -e script, --expression=script\n                 add the script\
    \ to the commands to be executed\n  -f script-file, --file=script-file\n     \
    \            add the contents of script-file to the commands to be executed\n\
    \  --follow-symlinks\n                 follow symlinks when processing in place\n\
    \  -i[SUFFIX], --in-place[=SUFFIX]\n                 edit files in place (makes\
    \ backup if SUFFIX supplied)\n  -l N, --line-length=N\n                 specify\
    \ the desired line-wrap length for the `l' command\n  --posix\n              \
    \   disable all GNU extensions.\n  -E, -r, --regexp-extended\n               \
    \  use extended regular expressions in the script\n                 (for portability\
    \ use POSIX -E).\n  -s, --separate\n                 consider files as separate\
    \ rather than as a single,\n                 continuous long stream.\n      --sandbox\n\
    \                 operate in sandbox mode (disable e/r/w commands).\n  -u, --unbuffered\n\
    \                 load minimal amounts of data from the input files and flush\n\
    \                 the output buffers more often\n  -z, --null-data\n         \
    \        separate lines by NUL characters\n      --help     display this help\
    \ and exit\n      --version  output version information and exit\n\nIf no -e,\
    \ --expression, -f, or --file option is given, then the first\nnon-option argument\
    \ is taken as the sed script to interpret.  All\nremaining arguments are names\
    \ of input files; if no input files are\nspecified, then the standard input is\
    \ read.\n\nGNU sed home page: <https://www.gnu.org/software/sed/>.\nGeneral help\
    \ using GNU software: <https://www.gnu.org/gethelp/>.\n/tmp/tmpzq7neb7n.sh: line\
    \ 35: ((: i < : syntax error: operand expected (error token is \"< \")\n"
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list_input=\"$1\"\n    local strange_sort_output=\"\"\n    for (( i=1; i <=\
    \ ${#list_input}; i++ )); do\n        # Extract number from $i\n        list_number=\"\
    ${list_input/$i/$i}\"\n        # Add \" to beginning and end of $list_number\n\
    \        strange_sort_output+=\"\\\"$list_number\\\"\"\n    done\n    echo ${strange_sort_output}\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ arg=\"$1\"\n    local strange_list output\n    local i=$(( ${#arg} -1 ))\n \
    \   local j=$(( ${#arg} -1 ))\n    while [ $i -ge 0 ]; do\n        output=\"$arg\"\
    \n        while [ $j -ge 0 ]; do\n            i=$(( i -1 ))\n            j=$((\
    \ j -1 ))\n            output=\"$output '${arg:$i:1}'\"\n        done\n      \
    \  output=\"$output '${arg:$j:1}'\"\n        arg=\"$(echo $output | sed -n 's/.*=//p')\"\
    \n    done\n    echo \"$output\"\n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -n arr=$1 sorting_result=$2\n\n  if [ -z \"${arr}\" ] || [ -z \"${sorting_result}\"\
    \ ]; then\n    echo >&2 \"Bad parameters.\"\n    exit 1\n  fi\n\n  local -n array=(\
    \ $arr )\n  local -n result=( $sorting_result )\n  local -n value\n  local -n\
    \ tmp\n\n  result=()\n  local -i i i_s\n  local -i i_m\n  local -i i_min\n\n \
    \ i_s=${#array[@]}\n  i_m=i_s\n  i_min=0\n\n  for (( i=0; i < i_s; i++ )); do\n\
    \    value=${array[i]}\n\n    if [ $i_m -lt ${i} ]; then\n      i_m=$i\n    fi\n\
    \n    if [ $i_m -lt $i_min ]; then\n      i_min=$i_m\n    fi\n\n    if (( value\
    \ == $array[i_m] )); then\n      # We already have our result\n      result+=(\"\
    $value\")\n      (( i-m ))\n      (( i_s--))\n      (( i_m++ ))\n    elif [ $i_m\
    \ -gt $i_min ]; then\n      # We don't have our result\n      i_s=$i\n      result+=(\"\
    $value\")\n    else\n      # We have both our result and new value\n      (( i_s--))\n\
    \      result+=(\"$i_min\")\n      result+=(\"$value\")\n      (( i_m++ ))\n \
    \     i_min=$value\n    fi\n  done\n\n  printf '%s\\n' \"${result[@]}\"\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2aqp13p6.sh: line 15: local: `1 2 3 4'': invalid variable name
    for name reference

    /tmp/tmp2aqp13p6.sh: line 15: local: `'': not a valid identifier

    Bad parameters.

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ IFS=\" \"\n  read -r -a array <<< \"$1\"\n  local i j\n  local array2=($(sort\
    \ -n <<<\"${array[@]}\" |\n      awk 'BEGIN{n=0} {if (n<NR) print $0}' |\n   \
    \   cut -d '\"' -f 2-))\n  local array3=($(sort -n <<<\"${array2[@]}\" |\n   \
    \   awk 'BEGIN{n=0} {if (n<NR) print $0}' |\n      cut -d '\"' -f 2-))\n  for\
    \ ((i=0; i<${#array[@]}; i++))\n  do\n    for ((j=0; j<${#array2[@]}; j++))\n\
    \    do\n      if (( \"${array2[j]}\" > \"${array[j]}\" ))\n      then\n     \
    \   array[j]=${array2[j]}\n        array2[j]=${array3}\n        break\n      fi\n\
    \    done\n  done\n  echo ${array[@]}\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ numbers=$1\n    local newArray\n    local minValue=0\n    local maxValue=$(strange_sort_list_maxLength\
    \ numbers)\n    local arrayList\n    # print numbers, minValue, maxValue\n   \
    \ echo \"numbers: $numbers\" \\\n        >&2\n    echo \"minValue: $minValue\"\
    \ \\\n        >&2\n    echo \"maxValue: $maxValue\" \\\n        >&2\n    # create\
    \ array\n    newArray=()\n    # print newArray, minValue, maxValue\n    echo \"\
    newArray: $newArray\" \\\n        >&2\n    # loop through numbers array\n    for\
    \ index in $(seq 0 $(( maxValue - minValue + 1 ))); do\n        local thisValue=$((\
    \ numbers[index] - minValue ))\n        echo \"thisValue: $thisValue\" \\\n  \
    \          >&2\n        local thisPosition=\"$index\"\n        local thisPositionInList=\"\
    $thisPosition\"\n        # loop through this number list and get index\n     \
    \   local indexInList=0\n        local number\n        while (( \"$indexInList\"\
    \ < \"$maxValue\" )) && \\\n              (( \"$number\" = \"$numbers[$indexInList]\"\
    \ )) && \\\n              [ \"$indexInList\" != \"0\" ]; then\n            ((\
    \ indexInList = indexInList + 1 ))\n            (( number = numbers[indexInList-1]\
    \ ))\n        done\n        # print indexInList\n        echo \"indexInList: $indexInList\"\
    \ \\\n            >&2\n        # print number, indexInList\n        echo \"number:\
    \ $number\" \\\n            >&2\n        echo \"thisPosition: $thisPosition\"\
    \ \\\n            >&2\n        echo \"thisPositionInList: $thisPositionInList\"\
    \ \\\n            >&2\n        local thisValueInList=$(( thisValue - minValue\
    \ ))\n        echo \"thisValueInList: $thisValueInList\" \\\n            >&2\n\
    \        echo \"insert thisValue into arrayList at thisPositionInList: \" \\\n\
    \            \"${newArray[$thisPositionInList]}\" \\\n            >&2\n      \
    \  newArray[$thisPositionInList]=\"$number\"\n        echo \"newArray: $newArray\"\
    \ \\\n            >&2\n    done\n    # print newArray\n    echo \"newArray: $newArray\"\
    \ \\\n        >&2\n    # print minValue, maxValue\n    echo \"minValue: $minValue\"\
    \ \\\n        >&2\n    echo \"maxValue: $maxValue\" \\\n        >&2\n    # remove\
    \ duplicates\n    arrayList=\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_ruoyjj8.sh: line 44: syntax error near unexpected token `then''

    /tmp/tmp_ruoyjj8.sh: line 44: `              [ "$indexInList" != "0" ]; then''

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ strange_sort_list=\"$1\"\n  local -a list=()\n  local -a sorted=()\n\n  for\
    \ str in $strange_sort_list; do\n    list+=(\"\\\"$str\\\"\")\n  done\n\n  for\
    \ ((i=0; i < ${#list[@]}; i+=3)) ; do\n    sorted+=(\"${list[$i]}\" \"${list[$(i+1)]}\"\
    \ \"${list[$(i+2)]}\" \"${list[$i]}\" \"${list[$(i+1)]}\" \"${list[$(i+2)]}\"\
    \ \"${list[$i]}\" \"${list[$(i+1)]}\" \"${list[$(i+2)]}\" \"${list[$i]}\" \"${list[$(i+1)]}\"\
    \ \"${list[$(i+2)]}\" \"${list[$i]}\")\n  done\n\n  printf \"%s\\n\" \"${sorted[@]}\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp320_nvhq.sh: line 24: i+1: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+2: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+1: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+2: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+1: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+2: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+1: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+2: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+1: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+2: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+1: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+2: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+1: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+2: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+1: command not found

    /tmp/tmp320_nvhq.sh: line 24: i+2: command not found

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ IFS=\"$1\"; shift;\n  IFS=' '\n  local L=\"$1\";\n\n  while read i; do\n   \
    \ i=$(echo $i | sed 's/^\"//' | sed 's/\"$//')\n    eval i=\\$i\n    done\n  IFS=\"\
    $IFS_OLD\";\n  eval \"L=\\\"$L\\\";\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=46 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660059350
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ string=$1\n  local list=($(echo $string | tr \" \" \"\\n\" | sort -n -t))\n\
    \  echo \"$list\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: option requires an argument -- ''t''

    Try ''sort --help'' for more information.

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ string=\"$1\";\n    IFS=' ' read -r -a array <<< \"$string\";\n\n    local temp=\"\
    $1\";\n    local temp_max=${array[0]};\n    local temp_min=${array[1]};\n\n  \
    \  local i j;\n    for ((i=0; i < ${#array[@]}; i++)); do\n        if [[ ${array[$i]}\
    \ -gt ${temp_max} ]]; then\n            temp_max=${array[$i]};\n        fi;\n\
    \        if [[ ${array[$i]} -lt ${temp_min} ]]; then\n            temp_min=${array[$i]};\n\
    \        fi;\n    done;\n\n    for ((j=0; j < ${#array[@]}; j++)); do\n      \
    \  if [[ ${array[$j]} -lt ${temp_min} ]]; then\n            array[$j]=${temp_min};\n\
    \            temp_min=${array[$j]};\n        fi;\n        if [[ ${array[$j]} -gt\
    \ ${temp_max} ]]; then\n            array[$j]=${temp_max};\n            temp_max=${array[$j]};\n\
    \        fi;\n    done;\n\n    for ((i=0; i < ${#array[@]}; i++)); do\n      \
    \  array[$i]=\"${array[$i]}\";\n    done;\n\n    echo \"${array[@]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059345
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ IFS= read -r -a array <<< \"$1\"\n  local i k\n  i=0\n  k=${#array[@]}\n  for\
    \ ((i=0; i<k; i++)); do\n    local j=0\n    if [ $i -ne 0 ] && [ $((k-1-i)) -eq\
    \ 0 ]; then\n      array[k-1]=${array[k-1]}\n    fi\n    for ((j=$i; j<k; j++));\
    \ do\n      if [ $((j-i)) -eq 0 ]; then\n        array[j-1]=${array[j-1]}\n  \
    \    fi\n      if [ $((k-1-j)) -eq 0 ]; then\n        array[k-1]=${array[k-1]}\n\
    \      fi\n      if [ \"${array[j]}\" -gt \"${array[j-1]}\" ]; then\n        array[j-1]=${array[j]}\n\
    \      fi\n      if [ \"${array[j]}\" -lt \"${array[j-1]}\" ]; then\n        array[j-1]=${array[j]}\n\
    \      fi\n    done\n  done\n  printf '%s\\n' \"${array[@]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzgljgqls.sh: line 15: local: `-r'': not a valid identifier

    /tmp/tmpzgljgqls.sh: line 15: local: `-a'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ i\n    local string=\"\\\"\\${1// /\\\" \\\"}\\\"\"\n    shift\n\n    for ((\
    \ i=0; i < ${#string}; i++ )); do\n        local j\n        local string2\n  \
    \      string2=\"${string#$i }\"\n        (( j=i+1 ))\n        string2=\"${string2%\
    \ }\"\n        string=\"${string2//\\ $j }\"\n    done\n    echo \"$string\"\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=$1\n    shift\n\n    # remove possible space from front by unsetting\n\
    \    if [[ \"${#list}\" -gt 0 ]]; then\n        list=\"${list%% }\"\n    fi\n\n\
    \    # remove possible space from back by unsetting\n    if [[ \"${#list}\" -gt\
    \ 0 ]]; then\n        list=\"${list##* }\"\n    fi\n\n    # turn string to array\n\
    \    list=( \"${list}\" )\n\n    # sort it\n    IFS=$'\\n' sort -n <<<\"${list[*]}\"\
    \n\n    # format back into string\n    IFS=$' ' read -a list <<<\"$(IFS=$'\\n'\
    \ sort -n)\"\n\n    # put quotes around elements\n    list=\"${list[*]}\"\n\n\
    \    # return list\n    echo \"${list[*]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=60 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660059350
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ IFS=\" \"\n  local -n list=\"${1}\"\n  local -a tmp\n  local -a sorted\n  local\
    \ i\n\n  tmp=()\n  sorted=()\n  for ((i=0; i < ${#list[@]}; i++)); do\n    local\
    \ -n val=\"${list[i]}\"\n    local -n key=\"$((i + 1))\"\n\n    IFS=\"-\"\n  \
    \  local -n tmp_name=\"$val\"\n    local -n tmp_key=\"$key\"\n\n    # Put $val\
    \ between $key$IFS and $tmp_key$IFS\n    ((i > 0)) && tmp+=($tmp_name)\n    ((i\
    \ > 0)) && sorted+=($tmp_key)\n\n    ((i > 0)) && tmp+=($tmp_key)\n    ((i > 0))\
    \ && sorted+=($val)\n\n    ((i > 1)) && tmp+=($tmp_key)\n    ((i > 1)) && sorted+=($tmp_name)\n\
    \n    ((i > 2)) && tmp+=($tmp_key)\n    ((i > 2)) && sorted+=($tmp_name)\n  done\n\
    \n  echo \"${sorted[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp365nqm7x.sh: line 16: local: `1 2 3 4'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ strange_list_str=$1\n  local sorted_str=\"\"\n  local strange_list_split=`echo\
    \ $strange_list_str | tr ' ' ','`\n  for strange_list_item in $strange_list_split;\
    \ do\n    local sorted_item=$strange_list_item\n    if [ $strange_list_item -gt\
    \ $sorted_str ]; then\n      sorted_item=$sorted_str\n    fi\n    sorted_str=\"\
    $sorted_str \\\"$sorted_item\\\"\"\n  done\n  echo $sorted_str\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp112l0ovf.sh: line 20: [: 1,2,3,4: unary operator expected

    '
  stdout: ''
  timestamp: 1660059345
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Sort\
    \ integer string from $1 to array\n  arr=($1)\n\n  # Check if $1 is empty\n  if\
    \ [ -z \"$1\" ] ; then\n    echo \"$arr\"\n    return 0\n  fi\n\n  # Initialize\
    \ a count for number of non-space\n  nnonspace=0\n  for ((i=0; i<${#arr[@]}; ++i))\
    \ ; do\n    if [ ${arr[$i]} != \"`echo $arr[$i] | sed 's/\\s/'`\" ] ; then\n \
    \     nnonspace=1\n    fi\n  done\n\n  # Initialize a count for number of space\n\
    \  nspace=0\n  for ((i=0; i<${#arr[@]}; ++i)) ; do\n    if [ ${arr[$i]} == \"\
    \ \" ] ; then\n      nspace=1\n    fi\n  done\n\n  # Initialize a count for number\
    \ of quote\n  nquote=0\n  for ((i=0; i<${#arr[@]}; ++i)) ; do\n    if [ ${arr[$i]}\
    \ == '\"' ] ; then\n      nquote=1\n    fi\n  done\n\n  # Initialize an index\
    \ for current element\n  i=0\n\n  # Initialize a temporary array to hold sorted\
    \ elements\n  arr_sorted=()\n\n  # Go through the array\n  while [ $i -lt ${#arr[@]}\
    \ ]; do\n    # Initialize a count for number of nonspace elements\n    nnonspace_current=0\n\
    \    for (( j=0; j<${#arr[@]}; ++j)) ; do\n      if [ ${arr[$j]} != \"`echo $arr[$j]\
    \ | sed 's/\\s/'`\" ] ; then\n        nnonspace_current=1\n        break\n   \
    \   fi\n    done\n\n    # Initialize a count for number of space elements\n  \
    \  nspace_current=0\n    for (( j=0; j<${#arr[@]}; ++j)) ; do\n      if [ ${arr[$j]}\
    \ == \" \" ] ; then\n        nspace_current=1\n        break\n      fi\n    done\n\
    \n    # Initialize a count for number of quote elements\n    nquote_current=0\n\
    \    for (( j=0; j<${#arr[@]}; ++j)) ; do\n      if [ ${arr[$j]} == '\"' ] ; then\n\
    \        nquote_current=1\n        break\n      fi\n    done\n\n    # Initialize\
    \ a count for number of non-space, space, quote elements\n    nnonspace_space_quote_current=0\n\
    \    for (( j=0; j<${#arr[@]}; ++j)) ; do\n      if [ ${arr[$j]} != \"`echo $arr[$j]\
    \ | sed 's/\\s/'`\" ] && [ ${arr[$j]} \n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv8mam7yy.sh: line 87: syntax error near unexpected token `}''

    /tmp/tmpv8mam7yy.sh: line 87: `}''

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=\"$1\"\n    if [[ \"$list\" = *\" \"* ]]; then\n        list=$(echo \"\
    $list\" | sed -E 's/^([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+)/\"\\\\1\"\\2\"\\3\"\\\
    4\"/')\n    else\n        list=$(echo \"$list\" | sed -E 's/^([0-9]+) ([0-9]+)\
    \ ([0-9]+)/\"\\\\1\"\\2\"/')\n    fi\n    list=\"$list\" | sort -n\n    list=\"\
    $list\" | sed -e 's/^/\"/g' -e 's/$/\"/g'\n    echo \"$list\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    echo\
    \ \"$1\" | tr '[a-z]' '[A-Z]'\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list\n    list=(\"$@\")\n    local minimum=${list[0]}\n    local maximum=${list[0]}\n\
    \    for x in ${list[@]:1}; do\n        if [ \"$x\" -gt \"$maximum\" ]; then\n\
    \            maximum=$x\n        elif [ \"$x\" -lt \"$minimum\" ]; then\n    \
    \        minimum=$x\n        fi\n    done\n    echo $(echo $minimum $maximum $minimum)\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ strange_sort_list_output\n    local strange_sort_list_input=$1\n    if [ -z\
    \ \"$strange_sort_list_input\" ]; then\n        return 0\n    fi\n    strange_sort_list_output=$(sort\
    \ -n <<<\"$strange_sort_list_input\")\n    # strip quotes from each element of\
    \ strange_sort_list_output\n    strange_sort_list_output=( $(echo \"${strange_sort_list_output}\"\
    \ | sed 's/\"//g') )\n    strange_sort_list_output=( \"${strange_sort_list_output[@]}\"\
    \ )\n    echo \"${strange_sort_list_output[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ string=${1:-}\n  local output=\"$(echo \"${string}\" | tr ' ' '\\n' | sort -n\
    \ -s)\"\n  [[ ! -z \"$output\" ]] && echo \"$output\"\n}\n\ncandidate() {\n  \
    \  strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Trim\
    \ spaces\n  local input=$1\n  local input=${input// /}\n\n  if [ \"$input\" ==\
    \ \"\" ]\n  then\n    return 0\n  fi\n\n  local output\n  local output\n  output=$(for\
    \ num in $input; do\n    if [ $num -ge $min ]\n    then\n      min=$num\n    elif\
    \ [ $num -le $max ]\n    then\n      max=$num\n    fi\n    echo $num\n  done |\
    \ sort -n)\n  output=${output// /}\n  output=${output// /}\n  echo $output\n}\n\
    \ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2x4mm71v.sh: line 36: [: 1234: unary operator expected

    /tmp/tmp2x4mm71v.sh: line 39: [: 1234: unary operator expected

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ i\n    local string=$1\n    IFS=\" \"\n    i=$((${#string} + 1))\n    local\
    \ result=()\n    while ((${#string} > 0)); do\n        local val=${string:${#string}\
    \ - 1}\n        local tmp\n        if ((${#string} > 1)); then\n            if\
    \ ((${#string} > i)) ; then\n                tmp=$(strange_sort_list ${string:0:i-1})\n\
    \                val=$tmp\n            fi\n        fi\n        result+=(\"${val}\"\
    )\n        (( ${#string} -= 1 ))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=39 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=57 encoding='utf-8'>
  timestamp: 1660059351
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -i i list\n  list=\"$1\"\n  for (( i=0; i<${#list}; i++ )); do\n    [[ -n ${list[$i]}\
    \ ]] || return 1\n    case \"${list[$i]}\" in\n      \"\" | 0)\n        echo \"\
    ${list[$i]}\"\n        continue\n        ;;\n      \"\\`\" | '\\`')\n        echo\
    \ \"${list[$i]}\"\n        continue\n        ;;\n      \"0\" | 0)\n        echo\
    \ \"${list[$i]}\"\n        continue\n        ;;\n      *)\n        echo \"${list[$i]}\
    \ 0\"\n        (( list[$i]--))\n        ;;\n    esac\n  done\n  return 0\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd85iz7rc.sh: line 16: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Strip\
    \ quotes and double quotes\n  local input=$1\n  local strange=\"\"\n  for i in\
    \ $input; do\n    if [[ $i =~ '[' ]]; then\n      strange+=\"${i#\\[}\"\n    \
    \  strange+=\"${i%\\]}\"\n    elif [[ $i =~ ' ' ]]; then\n      strange+=\"${i#\\\
    \ \"}\"\n      strange+=\"${i%\\ \"}\"\n    elif [[ $i =~ '\"' ]]; then\n    \
    \  strange+=\"${i#\\\"}\"\n      strange+=\"${i%\\\"}\"\n    else\n      strange+=\"\
    $i\"\n    fi\n  done\n\n  echo \"$strange\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbck32h11.sh: line 50: unexpected EOF while looking for matching
    `"''

    /tmp/tmpbck32h11.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tlocal\
    \ item\n\tlocal items=\"\"\n\tlocal items0=\"\"\n\n\tIFS=' '\n\n\titems=$1\n\n\
    \tIFS='\"'\n\techo \"$items\" | while read -r -a items0; do\n\t\titems=$items$item0[@]\n\
    \tdone\n\n\tIFS=$'\\n'\n\n\tif [ -z \"$items\" ]\n\tthen\n\t\techo \"[]\"\n\t\
    else\n\t\techo \"[$(sort -n -k 2 <<<\"$items\")]\"\n\tfi\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list=\"$1\"\n  if [[ $list == \"\" ]]; then\n    return 0\n  fi\n  local min=$(\
    \ echo $list | awk '{print $1}' )\n  local max=$( echo $list | awk '{print $NF}'\
    \ )\n  local tmp=$( echo $list | awk '{print $1; print $NF}' )\n  # print min\n\
    \  echo \"$min\"\n  # print max\n  echo \"$max\"\n  # print tmp\n  echo \"$tmp\"\
    \n  # print min then max then tmp\n  echo \"$min $max $tmp\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ strange_list=$1\n\n    local first_element=$(echo $strange_list | cut -d'\"\
    ' -f1)\n    local last_element=$(echo $strange_list | cut -d'\"' -f2)\n    local\
    \ final_list=''\n    local i=0\n    while [ \"$i\" -le \"$(echo \"$last_element\
    \ - $first_element\" | bc)\" ]; do\n        local temp_strange_list='\"' + ($((\
    \ $first_element + $i )%$last_element )) + '\"'\n        final_list+=\"$(echo\
    \ $temp_strange_list)\\n\"\n        i=$(( $i+1 ))\n    done\n    echo $final_list\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpulrqv8dd.sh: line 22: syntax error near unexpected token `(''

    /tmp/tmpulrqv8dd.sh: line 22: `        local temp_strange_list=''"'' + ($(( $first_element
    + $i )%$last_element )) + ''"''''

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -i strange_sort j=0\n  local strange strange_sort_list=\"$1\"\n  if [[ -z \"\
    ${strange_sort_list}\" ]]; then\n    return 0\n  fi\n\n  strange=\"\n    \" #\
    \ start with a blank to allow re-use\n  # loop through each number in the list\n\
    \  for j; do\n    # get the next number\n    local strange_next=${strange_sort_list#*$strange}\n\
    \    # get the first number in the list\n    local strange_first=${strange_sort_list#*\
    \ }\n    # get the rest of the list\n    local strange_rest=${strange_sort_list%$strange}\n\
    \    # swap the numbers\n    if [[ $j == 1 ]]; then\n      strange_next=${strange_first}\n\
    \      strange_rest=${strange_next}\n    fi\n    if [[ $(expr compare \"$strange_sort\"\
    \ \"${strange_next}\" ) -eq 0 ]]; then\n      # first numbers are equal, swap\
    \ with the next number\n      strange_sort_list=\"$strange $strange_next\"\n \
    \     strange=${strange_rest}\n      strange_sort_list=\"$strange_sort_list\"\n\
    \    fi\n    # swap with the next number\n    strange_sort_list=\"$strange_sort_list\
    \ $strange_next\"\n    strange=${strange_rest}\n  done\n  echo \"$strange_sort_list\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphbt3ai6l.sh: line 24: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ tmp_list\n  tmp_list=$($(eval \"echo \\\"$1\\\"\" | sed -e \"s/ /\\\\ /g\"))\n\
    \  if [[ $tmp_list == \"\" ]]; then\n    echo \"[]\"\n  else\n    echo \"$(sort\
    \ -g <<<$tmp_list)\"\n  fi\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe51j9dyo.sh: line 16: 1: command not found

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ strange_sort_array=($1);\n  local sorted=();\n  local min=1;\n  local max=${#strange_sort_array[@]};\n\
    \  local i=0;\n  while ((i < max)) {\n    local j=0;\n    while ((j < i)) {\n\
    \      if ((strange_sort_array[j] < strange_sort_array[i])) {\n        local temp=strange_sort_array[j];\n\
    \        strange_sort_array[j]=strange_sort_array[i];\n        strange_sort_array[i]=temp;\n\
    \        sorted+=($strange_sort_array[i]);\n        j++;\n      }\n      else\
    \ {\n        local temp=strange_sort_array[j];\n        strange_sort_array[j]=strange_sort_array[i];\n\
    \        strange_sort_array[i]=temp;\n        sorted+=($strange_sort_array[i]);\n\
    \        i=j;\n      }\n    }\n    i=$((i+1));\n  }\n  return $sorted;\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8wzyyk9q.sh: line 20: syntax error near unexpected token `{''

    /tmp/tmp8wzyyk9q.sh: line 20: `  while ((i < max)) {''

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ sorted_list\n    sorted_list=( $1 )\n    while (( ${#sorted_list[@]} > 1 ));\
    \ do\n        local min\n        min=$(sort -n <<< \"${sorted_list[@]}\")\n  \
    \      local max\n        max=$(sort -n <<< \"${sorted_list[@]:0:((${#sorted_list[@]}\
    \ - 1))}\")\n        sorted_list=( \"${sorted_list[@]:0:((${#sorted_list[@]} -\
    \ 1))}\" \"$min\" \"$max\" \"$min\" )\n    done\n    echo \"${sorted_list[@]}\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=50 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=38 encoding='utf-8'>
  timestamp: 1660059351
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ IFS=$'\\n'\n    local list_string=$(echo \"$1\" | tr ' ' ',')\n    local list_array=($list_string)\n\
    \    local min_idx=0\n    local max_idx=0\n    local min_value=${list_array[0]}\n\
    \    local max_value=${list_array[0]}\n\n    for (( idx=1; idx<${#list_array[@]};\
    \ idx++ )); do\n        local curr_value=${list_array[idx]};\n\n        if [ $curr_value\
    \ -gt $max_value ]; then\n            max_value=$curr_value\n            max_idx=$idx\n\
    \        elif [ $curr_value -lt $min_value ]; then\n            min_value=$curr_value\n\
    \            min_idx=$idx\n        fi\n    done\n\n    local out_array=($(echo\
    \ \"${list_array[*]}\"))\n    local sorted_array=($(echo \"${out_array[*]}\";\
    \ echo \"${out_array[max_idx]}\"; echo \"${out_array[min_idx]}\"; ))\n    echo\
    \ \"${sorted_array[*]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ str=\"\"\n  local nums=$@\n\n  local smallest=$( echo \"${nums[*]}\" | awk '{print\
    \ $1}' | sort -n | head -1 )\n  local largest=$( echo \"${nums[*]}\" | awk '{print\
    \ $1}' | sort -n | tail -1 )\n  for item in \"${nums[@]}\"; do\n    if [ \"$item\"\
    \ -gt \"$smallest\" ];\n    then\n      local temp=$item\n      item=$smallest\n\
    \      smallest=$temp\n    fi\n    if [ \"$item\" -lt \"$largest\" ];\n    then\n\
    \      local temp=$item\n      item=$largest\n      largest=$temp\n    fi\n  \
    \  local temp=\"\\\"$item\\\"\"\n    str=\"$str $temp\"\n  done\n  echo \"$str\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpul_c9y1h.sh: line 21: [: 1 2 3 4: integer expression expected

    /tmp/tmpul_c9y1h.sh: line 27: [: 1 2 3 4: integer expression expected

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list nums\n  list=\"$1\"\n  shift\n  nums=\"\"\n  while [ \"$list\" != \"\"\
    \ ]; do\n    nums=$nums$list\" \"\n    list=\"$1\"\n    shift\n  done\n  echo\
    \ ${nums::-1}\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ sorted_list=(\"$@\")\n  local min_index=${#sorted_list[@]}\n  local min=\"${sorted_list[$min_index-1]}\"\
    \n  local i=0\n  while [ $i -lt $min_index ]; do\n    local j=$((i+1))\n    local\
    \ tmp=${sorted_list[i]}\n    sorted_list[i]=${sorted_list[j]}\n    sorted_list[j]=${tmp}\n\
    \    i=$((j-1))\n  done\n  echo \"${sorted_list[@]}\"\n}\n\ncandidate() {\n  \
    \  strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=41 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=16 encoding='utf-8'>
  timestamp: 1660059351
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ strange_str=\"\"\n  local string=\"$1\"\n  # echo \"string: $string\"\n  if\
    \ [[ -z \"$string\" ]]; then\n    return 0\n  fi\n  IFS=' ' read -ra arr <<< \"\
    $string\"\n  local i\n  for i in \"${arr[@]}\"; do\n    case \"$i\" in\n     \
    \ *)\n        local j\n        for j in \"${arr[@]:i}\"; do\n          strange_str+=\"\
    $j \"\n        done\n        ;;\n      *)\n        strange_str+=\"$i \"\n    \
    \    ;;\n    esac\n  done\n  # echo \"strange_str: $strange_str\"\n  return \"\
    ${strange_str}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpes9yj9h4.sh: line 37: return: 2 3 4 3 4 4 : numeric argument required

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ IFS=$'\\ '\n  local IFS_CTRL=$'^'\n  local IFS_NEWLINE=$'\\n'\n  local IFS_NULL=$'\\\
    000'\n  local IFS_TAB=$'\\t'\n  local IFS_SPACE=$' '\n  local IFS_COMMA=$','\n\
    \n  local array=\"$1\"\n  shift\n\n  # remove trailing commas\n  array=\"${array%,*}\"\
    \n  array=\"${array##*,}\"\n\n  # split string into array\n  IFS=$IFS_NEWLINE\n\
    \  local -a arr\n  IFS=$IFS_TAB\n  local -a arr2\n  IFS=$IFS_COMMA\n  local -a\
    \ arr3\n  IFS=$IFS_CTRL\n  local -a arr4\n  IFS=$IFS_SPACE\n  local -a arr5\n\
    \  IFS=$IFS_NULL\n  local -a arr6\n  IFS=$IFS_SPACE\n  local -a arr7\n  IFS=$IFS_TAB\n\
    \  local -a arr8\n  IFS=$IFS_CTRL\n  local -a arr9\n  IFS=$IFS_NEWLINE\n  local\
    \ -a arr10\n  IFS=$IFS_CTRL\n  local -a arr11\n  IFS=$IFS_COMMA\n  local -a arr12\n\
    \  IFS=$IFS_NEWLINE\n  local -a arr13\n  IFS=$IFS_CTRL\n  local -a arr14\n  IFS=$IFS_COMMA\n\
    \  local -a arr15\n  IFS=$IFS_NEWLINE\n  local -a arr16\n  IFS=$IFS_TAB\n  local\
    \ -a arr17\n  IFS=$IFS_CTRL\n  local -a arr18\n  IFS=$IFS_NEWLINE\n  local -a\
    \ arr19\n  IFS=$IFS_CTRL\n  local -a arr20\n  IFS=$IFS_NEWLINE\n  local -a arr21\n\
    \  IFS=$IFS_TAB\n  local -a arr22\n  IFS=$IFS_CTRL\n  local -a arr23\n  IFS=$IFS_NEWLINE\n\
    \  local -a arr24\n  IFS=$IFS_CTRL\n  local -a arr25\n  IFS=$\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list_str=$1\n\n  local i=0;\n  while [ $i -lt ${#list_str} ]; do\n    # Check\
    \ if last character is '.' then we need to add double quotes around\n    if [[\
    \ ${list_str:$i:1} == . ]]; then\n      # Add double quotes\n      list_str+=\"\
    \\\"${list_str:$i:1}\\\"\"\n      # Remove last character\n      list_str=\"${list_str:0:${#list_str}-1}\"\
    \n      # Skip next iteration\n      i=$((i+1))\n    else\n      # Check if next\
    \ character is '.' then we need to add double quotes around\n      if [[ ${list_str:$i:1}\
    \ == . ]]; then\n        # Remove last character\n        list_str=\"${list_str:0:${#list_str}-1}\"\
    \n        # Skip next iteration\n        i=$((i+1))\n      fi\n      # Check if\
    \ previous character is '.' then we need to add double quotes around\n      if\
    \ [[ ${list_str:$((i-1)):1} == . ]]; then\n        # Remove first character\n\
    \        list_str=\"${list_str:1:$i}\"\n        # Skip next iteration\n      \
    \  i=$((i+1))\n      fi\n      # Check if previous character is '.' then we need\
    \ to add double quotes around\n      if [[ ${list_str:$((i-1)):1} == . ]]; then\n\
    \        # Remove first character\n        list_str=\"${list_str:1:$i}\"\n   \
    \     # Skip next iteration\n        i=$((i+1))\n      fi\n      # Check if previous\
    \ character is '.' then we need to add double quotes around\n      if [[ ${list_str:$((i-1)):1}\
    \ == . ]]; then\n        # Remove first character\n        list_str=\"${list_str:1:$i}\"\
    \n        # Skip next iteration\n        i=$((i+1))\n      fi\n      # Check if\
    \ previous character is '.' then we need to add double quotes around\n      if\
    \ [[ ${list_str:$((i-1)):1} == . ]]; then\n        # Remove first character\n\
    \        list_str=\"${list_str:1:$i}\"\n        # Skip next iteration\n      \
    \  i=$((i+1))\n      fi\n      # Check if previous character is '.' then we need\
    \ to add double quotes around\n      if [[ ${list_str:$((i-1)):1} == . ]]; then\n\
    \        # Remove first character\n        list_str=\"${list_str:1:$i}\"\n   \
    \     # Skip next iteration\n        i=$((i+1))\n      fi\n      # Check if previous\
    \ character is '.' then we need to add double quotes around\n      if [[ ${list_str:$((i-1)):1}\
    \ == . ]]; then\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa8uechm_.sh: line 72: syntax error near unexpected token `}''

    /tmp/tmpa8uechm_.sh: line 72: `}''

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    IFS=$'\
    \ '\n    set -- \"$1\"\n    local a=\"${#}\"\n    local i\n    for (( i = 0; i\
    \ < $a; i++ )); do\n        local j=$(( i + 1 ))\n        local k=$(( j - 1 ))\n\
    \        local swap\n        if [[ $i == $a ]]; then\n            break\n    \
    \    fi\n        local current=$(( $i + 1 ))\n        if [[ $current -gt $j ]];\
    \ then\n            swap=$(( $current + 1 ))\n        else\n            swap=$((\
    \ $j + 1 ))\n        fi\n        local tmp\n        tmp=\"\\${$swap}\"\n     \
    \   set  \"${$swap}\"=\"${$i}\"\n        set  \"${$i}\"=\"${$j}\"\n        set\
    \  \"${$j}\"=\"${tmp}\"\n    done\n    echo \"${@}\"\n}\n\ncandidate() {\n   \
    \ strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpaczwlkcq.sh: line 34: ${$swap}: bad substitution

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ IFS=$'\\n' arr=($(echo $1 | tr ' ' '\\n'))\n    for (( i=0; i<${#arr[@]}; i++\
    \ )); do\n        local min_idx=0\n        local max_idx=${#arr[@]}\n        while\
    \ [[ $min_idx -lt $max_idx ]]; do\n            local idx=$(( $min_idx+1 ))\n \
    \           if [[ ${arr[$idx]} -gt ${arr[$min_idx]} ]]; then\n               \
    \ min_idx=$idx\n            else\n                local idx=$(( $max_idx-1 ))\n\
    \                if [[ ${arr[$idx]} -gt ${arr[$max_idx]} ]]; then\n          \
    \          max_idx=$idx\n                else\n                    arr[$min_idx]=\"\
    ${arr[$min_idx]} ${arr[$idx]}\"\n                    arr[$idx]=\"${arr[$idx]}\
    \ ${arr[$max_idx]}\"\n                    arr[$max_idx]=\"${arr[$max_idx]} ${arr[$idx]}\"\
    \n                    min_idx=$idx\n                    max_idx=$idx\n       \
    \         fi\n            fi\n        done\n        arr[$i]=${arr[$i]%?}\n   \
    \ done\n    printf '%s\\n' \"${arr[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=45 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=66 encoding='utf-8'>
  timestamp: 1660059351
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Remember:\
    \ ${1[0]} is the first word in the list\n  # ${1[1]} is the second word in the\
    \ list\n  # ${1[2]} is the third word in the list\n  # ${1[3]} is the fourth word\
    \ in the list\n  local i tmp strange_list num_strange_list\n\n  # Split $1 on\
    \ space, and store it in an array\n  IFS=' ' read -ra strange_list <<< \"$1\"\n\
    \n  # Check if the first element of strange_list is larger than all the others\n\
    \  if [ \"${strange_list[0]}\" -gt \"${strange_list[1]}\" ]; then\n    # Make\
    \ a new list with the first element moved down\n    read -ra tmp <<< \"${strange_list[@]}\"\
    \n    tmp[0]=\"${strange_list[0]}\"\n    strange_list[0]=\"${strange_list[1]}\"\
    \n    strange_list[1]=\"${tmp[0]}\"\n    num_strange_list=\"${#strange_list[@]}\"\
    \n  fi\n\n  # Check if the second element of strange_list is larger than all the\
    \ others\n  if [ \"${strange_list[1]}\" -gt \"${strange_list[2]}\" ]; then\n \
    \   # Make a new list with the second element moved down\n    read -ra tmp <<<\
    \ \"${strange_list[@]}\"\n    tmp[1]=\"${strange_list[1]}\"\n    strange_list[1]=\"\
    ${strange_list[2]}\"\n    strange_list[2]=\"${tmp[1]}\"\n    num_strange_list=\"\
    ${#strange_list[@]}\"\n  fi\n\n  # Check if the third element of strange_list\
    \ is larger than all the others\n  if [ \"${strange_list[2]}\" -gt \"${strange_list[3]}\"\
    \ ]; then\n    # Make a new list with the third element moved down\n    read -ra\
    \ tmp <<< \"${strange_list[@]}\"\n    tmp[2]=\"${strange_list[2]}\"\n    strange_list[2]=\"\
    ${strange_list[3]}\"\n    strange_list[3]=\"${tmp[2]}\"\n    num_strange_list=\"\
    ${#strange_list[@]}\"\n  fi\n\n  # Check if the fourth element of strange_list\
    \ is larger than all the others\n  if [ \"${strange_list[3]}\" -gt \"${strange_list[0]}\"\
    \ ]; then\n    # Make a new list with the fourth element moved down\n    read\
    \ -ra tmp <<< \"${strange_list[@]}\"\n    tmp[3]=\"${strange_list[3]}\"\n    strange_list[3]=\"\
    ${strange_list[0]}\"\n    strange_list[0]=\"${tmp[3]}\"\n    num_strange_list=\"\
    ${#strange_list[@]}\"\n  fi\n\n  # Add the quote\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ sortedlist=$(strange_sort_list \"$1\" \"$2\" \"$3\" \"$4\")\n  local spaces=\n\
    \  if [[ $# == 4 && $4 != \"__\" ]];then\n    spaces=$4\n  fi\n  local string=\"\
    \"\n  local result=$(\n    IFS=\"$(printf \"\\n\\t\")\"\n    printf \"[%q%s%q%s%q%s%q%s%q%s]\"\
    \ \\\n      \"${sortedlist[@]}\" \"$spaces\" \\\n      \"${sortedlist[@]:0:$((${#sortedlist[@]}\
    \ - 1))}\" \"$spaces\" \\\n      \"${sortedlist[@]:$((${#sortedlist[@]} - 1))}\"\
    \ \"$spaces\" \\\n      \"${sortedlist[@]:$((${#sortedlist[@]} + 1))}\" \"$spaces\"\
    \ \\\n    )\n  IFS=\"$IFS_OLD\"\n  return $result\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=44 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=34 encoding='utf-8'>
  timestamp: 1660059351
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ i j k x y\n  read -r -a array <<< \"$1\"\n  for (( i=0; i < ${#array[@]}; i++\
    \ )); do\n    k=${array[i]}\n    for (( j=i+1; j < ${#array[@]}; j++ )); do\n\
    \      x=${array[j]}\n      if [[ $x -ge $k ]]; then\n        y=$k\n        k=$x\n\
    \        array[$i]=$y\n        array[$j]=$(printf '%q' \"$k\")\n      fi\n   \
    \ done\n  done\n  printf '%s\\n' \"${array[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ input=$1\n  local output=''\n  local input_array=( ${input} )\n  local max_value=${input_array[0]}\n\
    \  local min_value=${input_array[1]}\n  local i=2\n  while [ $i -lt ${#input_array[@]}\
    \ ]; do\n    local current=${input_array[i]}\n    local current_str=''\n    local\
    \ j=i-1\n    while [ $j > 0 ] && [ ${input_array[j]} -gt ${min_value} ]; do\n\
    \      current_str=${input_array[j]}\n      j=$(( j - 1 ))\n    done\n    local\
    \ current_str=${input_array[j]}\n    local current_str_r='\"'\n    if [[ $current_str\
    \ != *\"\\n\"* ]]; then\n      current_str_r=$current_str\n    fi\n    local current_str_l='\"\
    '\n    if [[ $current_str != *\"\\n\"* ]]; then\n      current_str_l=$current_str\n\
    \    fi\n    local temp_str=\n    if [ -n \"$current_str_r\" ]; then\n      temp_str+=$current_str_r\n\
    \    fi\n    if [ -n \"$current_str_l\" ]; then\n      temp_str+=$current_str_l\n\
    \    fi\n    if [ -n \"${current_str}\" ]; then\n      temp_str+=$current_str\n\
    \    fi\n    if [ -n \"${temp_str}\" ]; then\n      output+=\"$temp_str\\n\"\n\
    \    fi\n    i=$(( i + 1 ))\n  done\n  if [ -z \"$output\" ]; then\n    output=$input_array\n\
    \  fi\n  echo \"$output\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list=\"$1\"\n  local count=0\n  while IFS= read -r line; do\n    count=$((count+1))\n\
    \    local index\n    if [ \"$count\" -lt \"$list\" ]; then\n      index=$(($count+1))\n\
    \    else\n      index=$(($count-1))\n    fi\n    echo \"\\\"$line\\\"\"\n  done\
    \ <<< \"$list\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp08mzt013.sh: line 20: [: 1 2 3 4: integer expression expected

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=\"${1}\"\n    if [ -z \"$list\" ]; then\n        return \"\"\n    fi\n\
    \    local res=\"\"\n    local prev=\"\"\n    local count=1\n    local tmp=\"\
    $(tempfile)\"\n    local tmp2=\"$(tempfile)\"\n    for element in $list; do\n\
    \        echo -n \"\\\"$element\\\" \" >>\"$tmp\"\n        if [ \"$count\" -lt\
    \ \"$#\" ]; then\n            prev=\"$element\"\n            count=$((count+1))\n\
    \            echo \"$count\" >>\"$tmp\"\n        fi\n    done\n    sort -n -k\
    \ 1 \"$tmp\" >>\"$tmp2\"\n    count=0\n    for element in $list; do\n        echo\
    \ -n \"$count\\t\\\"$element\\\"\\t\" >>\"$tmp2\"\n        prev=\"$element\"\n\
    \        count=$((count+1))\n    done\n    sort -n -k 1 -n \"$tmp2\" >>\"$tmp\"\
    \n    count=0\n    for element in $list; do\n        echo \"$count\\t\\\"$prev\\\
    \"\\t\\\"$element\\\"\\t\" >>\"$tmp\"\n        count=$((count+1))\n    done\n\
    \    sort -n -k 1 -n \"$tmp\" >>\"$tmp2\"\n    for element in $list; do\n    \
    \    echo \"$element\"\n    done\n    rm \"$tmp\" \"$tmp2\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -i start=$1\n    local -i len=${#start}\n    local item result\n    for (( i=0;\
    \ i<len; i++ )); do\n        item=${start$i}\n        result=()\n        if [\
    \ \"$item\" -gt \"$result\" ]; then\n            result+=$item\n        fi\n \
    \       result+=($item)\n    done\n    eval echo '${result[*]}'\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdew0q302.sh: line 15: local: 1 2 3 4: syntax error in expression
    (error token is "2 3 4")

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ _arg1=\"$1\"\n    local _arg1_split=(${_arg1})\n    _arg1_len=${#_arg1_split[*]}\n\
    \    if [ \"${_arg1_len}\" -gt \"1\" ]\n    then\n        for (( _arg1_i=1 ; _arg1_i<${_arg1_len}\
    \ ; _arg1_i+=1 ))\n        do\n            _arg1_int=\"${_arg1_split[_arg1_i]}\"\
    \n            for (( _arg1_j=${_arg1_i+1} ; _arg1_j<${_arg1_len} ; _arg1_j+=1\
    \ ))\n            do\n                _arg1_int=\"${_arg1_int} ${_arg1_split[_arg1_j]}\"\
    \n            done\n            _arg1_split=(${_arg1_int})\n            _arg1_len=${#_arg1_split[*]}\n\
    \        done\n    fi\n    _arg1_sort=(${_arg1_split[*]})\n    _arg1_sort=( ${_arg1_sort[@]}\
    \ | sort -n )\n    echo \"${_arg1_sort[*]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_4m2buga.sh: line 32: syntax error near unexpected token `|''

    /tmp/tmp_4m2buga.sh: line 32: `    _arg1_sort=( ${_arg1_sort[@]} | sort -n )''

    /tmp/tmp_4m2buga.sh: line 34: syntax error near unexpected token `}''

    /tmp/tmp_4m2buga.sh: line 34: `}''

    '
  stdout: '

    '
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ var=\"${1}\"\n    local output=\"\"\n    IFS=$'\\n'\n    for var in $var; do\n\
    \        output=\"${output}\\\"${var}\\\",\"\n    done\n    output=\"${output%?}\"\
    \n    echo \"${output}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Check\
    \ parameter type\n  if [[ \"$#\" -ne 1 ]]; then\n    echo \"strange_sort_list\
    \ expects 1 argument\"\n    return 1\n  fi\n\n  # Get parameters\n  IFS=' ' read\
    \ -ra array <<< \"$1\"\n\n  # Sort list\n  for i in \"${array[@]}\"; do\n    if\
    \ [ \"$i\" -gt \"$min\" ]; then\n      min=$i\n    fi\n    if [ \"$i\" -lt \"\
    $max\" ]; then\n      max=$i\n    fi\n  done\n\n  # Reverse sort\n  for i in \"\
    ${!array[@]}\"; do\n    element=\"${array[$i]}\"\n    if [ \"$element\" -lt \"\
    $min\" ]; then\n      min=\"$element\"\n    fi\n    if [ \"$element\" -gt \"$max\"\
    \ ]; then\n      max=\"$element\"\n    fi\n  done\n\n  # Construct output\n  for\
    \ i in \"${!array[@]}\"; do\n    element=\"${array[$i]}\"\n    sorted=\"$sorted$element\"\
    \n    if [ \"$element\" -lt \"$min\" ]; then\n      min=\"$element\"\n    fi\n\
    \    if [ \"$element\" -gt \"$max\" ]; then\n      max=\"$element\"\n    fi\n\
    \  done\n\n  # Return output\n  echo \"\\\"$sorted\\\"\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcjt6bre4.sh: line 26: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 29: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 26: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 29: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 26: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 29: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 26: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 29: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 37: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 40: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 37: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 40: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 37: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 40: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 37: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 40: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 49: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 52: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 49: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 52: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 49: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 52: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 49: [: : integer expression expected

    /tmp/tmpcjt6bre4.sh: line 52: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ items=$1\n    local min_val=0\n    local max_val=0\n    for item in $items;\
    \ do\n        if [ \"$item\" -gt \"$max_val\" ]; then\n            max_val=$item\n\
    \        elif [ \"$item\" -lt \"$min_val\" ]; then\n            min_val=$item\n\
    \        fi\n    done\n    # Now we have min_val and max_val\n    # Sort the list\
    \ in descending order\n    local sorted_list=\"\"\n    for ((i = min_val; i <=\
    \ max_val; i++)); do\n        sorted_list+=\"\\\"$i\\\"\"\n    done\n    echo\
    \ $sorted_list\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ sorted_list=$(strange_sort_list $1)\n  local tmp=${sorted_list[0]}\n  local\
    \ strange_sort_list_output=\"\"\n\n  while read -r line; do\n    if [[ \"$line\"\
    \ != \"$tmp\" ]];then\n      strange_sort_list_output+=\"\\\"$line\\\"\\n\"\n\
    \    fi\n  done < <(printf \"%s\\n\" \"$sorted_list\")\n  echo \"$strange_sort_list_output\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=48 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=33 encoding='utf-8'>
  timestamp: 1660059351
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    IFS=$'\\\
    n'\n    set $1 | sort -n | sed -r 's/^\\s*(\\S+)\\s*(\\S+)\\s*$/\\1\\n\\2/g'\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ items=$1\n    local tmp\n    local output\n    local i\n    local count\n\n\
    \    if [[ -z \"$items\" ]]; then\n        return output\n    fi\n    IFS=' '\
    \ read -r -a items <<< \"$items\"\n    count=${#items[@]}\n    output=()\n   \
    \ for i in $(seq $(( count -1 ))); do\n        tmp=\"${items[$i]}${items[$(( $i\
    \ + 1 ))]}\"\n        output+=(\"\\\"$tmp\\\"\")\n    done\n    IFS=' '\n    echo\
    \ \"${output[*]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    sort\
    \ -n -k$((${#1}-1)) $1\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[\
    \ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\"\
    \ ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n\
    \    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[\
    \ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: 1: No such file or directory

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -n list=(\"$1\")\n    local temp=$(mktemp)\n    sort -n <<<\"${list[@]}\"\n\
    \    sort -n -t '\"' -k1,1 -k2,2n -k3,3n -k4,4n -k5,5n |\n        sed -E 's/^(\"\
    [^\"]*\"|[^ ]*) ([^ ]*)/\\3\\2\\1/g'\n    rm -f \"$temp\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=52 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=3 encoding='utf-8'>
  timestamp: 1660059351
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ str=\"\"\n    local str1=\"\"\n    local j=0\n    local i=1\n    local count=0\n\
    \    local min=$1\n    local max=$1\n\n    # Find minimum value\n    read min\n\
    \    while [ -n \"$min\" ] ; do\n        str1=$(echo $min | sed 's/ /\\\\ /g')\n\
    \        min=$(echo $min | sed 's/ /\\\\ /g' | sed 's/^/\"/')\n        str1=$(echo\
    \ \"$str1\" | sed 's/ /\\\\ /g')\n        str=$str$str1\n        min=$(echo $min\
    \ | sed 's/ /\\\\ /g' | sed 's/^/\"/')\n    done\n\n    # Find maximum value\n\
    \    while [ -n \"$max\" ] ; do\n        str1=$(echo $max | sed 's/ /\\\\ /g')\n\
    \        max=$(echo $max | sed 's/ /\\\\ /g' | sed 's/^/\"/')\n        str1=$(echo\
    \ \"$str1\" | sed 's/ /\\\\ /g')\n        str=$str$str1\n        max=$(echo $max\
    \ | sed 's/ /\\\\ /g' | sed 's/^/\"/')\n    done\n\n    # Sort remaining values\n\
    \    while [ -n \"$i\" ] ; do\n        str1=$(echo $i | sed 's/ /\\\\ /g')\n \
    \       str=$str$str1\n        i=$(echo $i | sed 's/ /\\\\ /g' | sed 's/^/\"/')\n\
    \    done\n    echo $str\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=15 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=59 encoding='utf-8'>
  timestamp: 1660059351
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=$1\n    local string=''\n    local min\n    local max\n    local count\n\
    \n    list=${list//[[:space:]]/}\n    for word in $list; do\n        if [[ -z\
    \ \"$min\" ]]; then\n            min=${word}\n            max=${word}\n      \
    \      count=1\n        elif [[ \"$min\" -gt \"$word\" ]]; then\n            min=$word\n\
    \            count=`expr $count + 1`\n        elif [[ \"$max\" -lt \"$word\" ]];\
    \ then\n            count=$count\n            if [ \"$count\" -gt 1 ]; then\n\
    \                max=$word\n            else\n                max=$word\n    \
    \        fi\n        fi\n    done\n\n    local newlist\n    newlist=$(echo $list\
    \ | sed \"s/$min/$max/g\" | sort -nr)\n\n    # Add leading quote\n    newlist=\"\
    '$newlist'\"\n\n    echo $newlist\n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ string=\"$1\"\n\n    # Return an empty list if empty string or no arguments\
    \ are passed\n    if [ -z \"$string\" ] || [ ! -z \"$(echo \"$string\" | wc -w)\"\
    \ ]; then\n        echo \"[]\"\n        return\n    fi\n\n    IFS=$'\\t' read\
    \ -r -a array <<< \"$string\"\n    local list_string=\"\"\n    local i\n    for\
    \ ((i = 0; i < ${#array[@]}; ++i)); do\n        list_string+=\"\\\"${array[i]}\\\
    \" \"\n    done\n    echo $list_string\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ sorted_list=\"\"\n    local line\n    local integers=$1\n\n    # Remove spaces\
    \ before and after each integer\n    while read line; do\n        sorted_list=\"\
    $sorted_list $(echo $line | sed 's/ //g')\"\n    done <<< \"$integers\"\n\n  \
    \  # Sort list from least to greatest\n    sort --field-separator=\" \" \"$sorted_list\"\
    \ > \"$sorted_list.temp\"\n    mv \"$sorted_list.temp\" \"$sorted_list\"\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: '' 1234'': No such file or directory

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # echo\
    \ \"$1\"\n  local IFS=$'\\n'\n  local arr=($1)\n  local strange=$(IFS=, echo \"\
    ${arr[*]}\")\n  local strange_list=($(echo $strange | tr \",\" \"\\n\"))\n\n \
    \ for (( i = 0; i < ${#strange_list[@]}; i++ )); do\n    strange_list[i]=$(echo\
    \ \"${strange_list[i]}\" | sed -e \"s/\\\"//g\")\n  done\n\n  printf '[%s\\n'\
    \ \"${strange_list[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tlocal\
    \ strange_sort_array=()\n\tlocal item\n\tlocal i\n\tlocal j\n\tlocal tmp\n\n\t\
    for i in $(echo $1 |sed 's/^ *//'|sed 's/ *$//');do\n\t\tj=$(( $i > $j )) && [[\
    \ \"$strange_sort_array\" =~ ^[0-9]+ ]] || [[ \"$strange_sort_array\" =~ ^\"[0-9]+\
    \ ]] && echo \"$strange_sort_array\"\n\t\ttmp=${strange_sort_array[$j]}\n\t\t\
    strange_sort_array[$j]=\"$i\"\n\t\tstrange_sort_array[$i]=\"$tmp\"\n\tdone\n\n\
    \t[[ \"$strange_sort_array\" =~ ^[0-9]+ ]] || [[ \"$strange_sort_array\" =~ ^\"\
    [0-9]+ ]] && echo \"$strange_sort_array\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnmx_qzzz.sh: line 29: syntax error near unexpected token `}''

    /tmp/tmpnmx_qzzz.sh: line 29: `}''

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=$(echo \"$1\" | tr \" \" \"\\n\"); shift\n    local min_val=$(echo $list\
    \ | tr \"\\n\" '\\n' | sort -n); shift\n    local max_val=$(echo $list | tr \"\
    \\n\" '\\n' | sort -nr);\n    local result=\"$(echo \"$min_val\" \"$max_val\"\
    \ | tr \"\\n\" '\\n' | sort -nr)\";\n    echo \"$result\";\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ items=$1\n  local sorted=( ${items} )\n  local max=${#sorted[@]}\n  local min=${#sorted[@]}\n\
    \  local i=0 j=0\n  while [ $i -lt $min ]; do\n    sorted[$((j++))]=${sorted[$i]}\n\
    \    ((i++))\n  done\n  while [ $i -lt $max ]; do\n    sorted[$((j++))]=${sorted[$i]}\n\
    \    ((i++))\n  done\n  sorted[$((j++))]=${sorted[$min]}\n  printf '%s\\n' \"\
    ${sorted[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ _strange_sorting=$1\n    local _sorted_list=''\n    while IFS=' ' read -r _number\
    \ _; do\n        _sorted_list=\"${_sorted_list} ${_number}\\\"\"\n    done < <(sort\
    \ -n -k 2,2 -k 1,1 -k 3,3 <<< \"${_strange_sorting}\")\n    echo \"${_sorted_list}\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ IFS=$1 # Delimit list items using IFS\n    local IFS2=\"-\" # Delimit list items\
    \ using IFS with dash\n    local IFS3=\".\" # Delimit list items using IFS with\
    \ dot\n    local IFS4=\"$IFS\" # Copy IFS for local use\n    local IFS5=\"$IFS\"\
    \ # Copy IFS for local use\n    local IFS6=\"$IFS\" # Copy IFS for local use\n\
    \    local IFS7=\"$IFS\" # Copy IFS for local use\n    local IFS8=\"$IFS\" # Copy\
    \ IFS for local use\n    local IFS9=\"$IFS\" # Copy IFS for local use\n    local\
    \ IFS10=\"$IFS\" # Copy IFS for local use\n    local IFS11=\"$IFS\" # Copy IFS\
    \ for local use\n    local IFS12=\"$IFS\" # Copy IFS for local use\n    local\
    \ IFS13=\"$IFS\" # Copy IFS for local use\n    local IFS14=\"$IFS\" # Copy IFS\
    \ for local use\n    local IFS15=\"$IFS\" # Copy IFS for local use\n    local\
    \ IFS16=\"$IFS\" # Copy IFS for local use\n    local IFS17=\"$IFS\" # Copy IFS\
    \ for local use\n    local IFS18=\"$IFS\" # Copy IFS for local use\n    local\
    \ IFS19=\"$IFS\" # Copy IFS for local use\n    local IFS20=\"$IFS\" # Copy IFS\
    \ for local use\n    local IFS21=\"$IFS\" # Copy IFS for local use\n    local\
    \ IFS22=\"$IFS\" # Copy IFS for local use\n    local IFS23=\"$IFS\" # Copy IFS\
    \ for local use\n    local IFS24=\"$IFS\" # Copy IFS for local use\n    local\
    \ IFS25=\"$IFS\" # Copy IFS for local use\n    local IFS26=\"$IFS\" # Copy IFS\
    \ for local use\n    local IFS27=\"$IFS\" # Copy IFS for local use\n    local\
    \ IFS28=\"$IFS\" # Copy IFS for local use\n    local IFS29=\"$IFS\" # Copy IFS\
    \ for local use\n    local IFS30=\"$IFS\" # Copy IFS for local use\n    \n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  unset\
    \ strange_sorted_list\n  unset strange_sorted_list_length\n  local strange_sorted_list_line\n\
    \  local i tmp tmp_length tmp_i\n  # Parse the list into separate lines of whitespace-separated\
    \ values\n  strange_sorted_list_line=$(echo \"$1\" | tr ' ' '\\n')\n  tmp_length=${#strange_sorted_list_line}\n\
    \  for ((i=0; i < ${tmp_length}; i++)); do\n    # If the current element of the\
    \ line is greater than the last element,\n    # append it to strange_sorted_list\n\
    \    if [[ ${strange_sorted_list_line:$i:1} -gt ${strange_sorted_list_line:$i:${#strange_sorted_list_line}}\
    \ ]]; then\n      strange_sorted_list_line=$(echo \"$strange_sorted_list_line\
    \ ${strange_sorted_list_line:$i:1}\")\n    fi\n    # If the current element of\
    \ the line is less than the second to last element,\n    # append it to the beginning\
    \ of the list\n    if [[ ${strange_sorted_list_line:$i:1} -lt ${strange_sorted_list_line:$i:${#strange_sorted_list_line}}\
    \ ]]; then\n      strange_sorted_list_line=$(echo \"${strange_sorted_list_line:0:$i}\
    \ ${strange_sorted_list_line:$i:1}\")\n    fi\n    strange_sorted_list+=\"${strange_sorted_list_line:$i:1}\"\
    \n    strange_sorted_list_length=$(expr ${#strange_sorted_list} + 1)\n  done\n\
    \  # Parse the list into separate lines of whitespace-separated values\n  strange_sorted_list_line=$(echo\
    \ \"$strange_sorted_list\" | tr ' ' '\\n')\n  # Remove empty and duplicate entries\n\
    \  tmp_length=${#strange_sorted_list_line}\n  for ((i=0; i < ${tmp_length}; i++));\
    \ do\n    tmp_length=$(expr ${#strange_sorted_list_line} - 1)\n    tmp_i=1\n \
    \   while [[ $i -le $tmp_length ]]; do\n      # If the current element of the\
    \ line is greater than the last element,\n      # append it to strange_sorted_list\n\
    \      if [[ ${strange_sorted_list_line:$i:1} -gt ${strange_sorted_list_line:$i:$tmp_length}\
    \ ]]; then\n        strange_sorted_list_line=$(echo \"$strange_sorted_list_line\
    \ ${strange_sorted_list_line:$i:1}\")\n      fi\n      # If the current element\
    \ of the line is less than the second to last element,\n      # append it to the\
    \ beginning of the list\n      if [\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpokgyrqvv.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpokgyrqvv.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ sorted_list=$(strange_sort_string \"$1\");\n    local sorted_list_count=${#sorted_list[@]};\n\
    \    local i;\n    local temp_string=\"\";\n    local current_string=\"\";\n \
    \   local current_index=0;\n    local num_spaces=0;\n\n    echo \"$sorted_list\"\
    \ | awk '{for(i=1;i<=NF;i++){current_string=$i;current_index++;printf \"%s:%s\\\
    n\", current_string, current_index};}' | sort -n | sed ':a;N;$!ba;s/\\n/:/g' |\
    \ tr '\\n' ':' | sed 's/^::/:/g' | sed 's/^:[^:]*$//g' | sed \"s/^:/\\\"/g\" |\
    \ sed 's/:$/\\\"/g' >strange_list;\n    if [ \"$sorted_list_count\" -ne \"$#\"\
    \ ]; then\n        echo \"Invalid input: Only $sorted_list_count integers expected!\"\
    ;\n        exit 1;\n    fi\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8ajn63hs.sh: line 15: strange_sort_string: command not found

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [[ \"$1\" =~ ^-?[0-9]+$ ]]; then\n    local strange=\"\"\n    local tmp=\"\"\
    \n    for k in $(echo \"$1\" | sed -e 's/^-?[0-9]* //'); do\n      if [[ \"$tmp\"\
    \ != \"\" ]]; then\n        (( tmp > k || strange == \"\" )) && strange+=\"$tmp\"\
    \n        tmp=\"\"\n      fi\n      tmp=$(( k > tmp )) && strange+=\"$k\"\n  \
    \  done\n    [[ $strange != \"\" ]] && strange+=\"$tmp\"\n    echo \"$strange\"\
    \n  else\n    echo \"$1\"\n  fi\n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ input=$1 \n    local output \n    local tmp \n    \n    # initialize empty array\n\
    \    output=( )\n    \n    # loop through input array\n    for i in \"${input[@]}\"\
    ; do\n        # check if the current element is the minimum\n        if [ \"${i}\"\
    \ -lt \"${i-0}\" ]; then\n            # if it is, swap the minimum and the current\
    \ element\n            tmp=\"${i-0}\"\n            i=$i\n        else\n      \
    \      # otherwise, swap the current element with the minimum\n            tmp=\"\
    ${i}\"\n        fi\n    \n        # append to output array \n        output+=(\
    \ \"$tmp\" )\n    done\n    \n    # return output \n    echo \"${output[@]}\"\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzsbviwin.sh: line 25: [: 1 2 3 4: integer expression expected

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    echo\
    \ $1 | tr ' ' '\\n' | sort -n | tr ' ' '\\n'\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ IFS=\" \" # Inter-field separator\n    local IFS=\"\\n\" # Inter-file separator\n\
    \    local strange_list # Output strange list\n    local strange_list_count #\
    \ Count of elements in strange list\n    local strange_list_min_max # Minimum\
    \ & maximum value of strange list\n    local strange_list_value # Current value\
    \ in strange list\n    local strange_list_min_index # Position of minimum value\
    \ in strange list\n    local strange_list_max_index # Position of maximum value\
    \ in strange list\n    local strange_list_max_value # Maximum value of strange\
    \ list\n    local strange_list_min_value # Minimum value of strange list\n   \
    \ local strange_list_max_str # Maximum value of strange list in quotes\n    local\
    \ strange_list_min_str # Minimum value of strange list with quotes\n\n    strange_list=$1\
    \ #Input strange list\n    strange_list_count=$(echo \"${strange_list}\" | wc\
    \ -l) # Count of elements in strange list\n    # Determine positions of minimum\
    \ and maximum value of strange list\n    strange_list_min_max=$(echo \"${strange_list}\"\
    \ | sed -e 's/^[0-9]\\+\\(\\([0-9]\\+\\)\\)$/\\\\1/g' | sort -g | head -1)\n \
    \   # Determine values of minimum and maximum values of strange list\n    strange_list_value=$(echo\
    \ \"${strange_list_min_max}\" | sed -e 's/\"//g' | sed -e 's/\\([0-9]\\+\\)\\\
    ([0-9]\\+\\)/\\\\1\\\\2/g')\n    strange_list_min_str=$(echo \"${strange_list}\"\
    \ | sed -e 's/^[0-9]\\+\\(\\([0-9]\\+\\)\\)$/\\\\1/g' | sort -g | head -1)\n \
    \   strange_list_max_str=$(echo \"${strange_list_min_max}\" | sed -e 's/\"//g'\
    \ | sed -e 's/\\([0-9]\\+\\)\\([0-9]\\+\\)/\\\\1\\\\2/g' | sort -g | tail -1)\n\
    \n    # Determine values of maximum and minimum values of strange list\n    strange_list_min_index=$(echo\
    \ \"${strange_list_min_max}\" | sed -e 's/\"//g' | sed -e 's/\\([0-9]\\+\\)\\\
    ([0-9]\\+\\)/\\\\1\\\\2/g' | sed -e 's/^[0-9]\\+\\(\\([0-9]\\+\\)\\)$/\\\\1/g'\
    \ | sort -g | head -2 | tail -1)\n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list=\"$1\"\n  if [[ -z \"$list\" ]]; then\n    echo []\n    return 0\n  fi\n\
    \  list=$(echo \"$list\" | tr ' ' '\\n')\n  local max=0\n  local min=$(( ${#list}\
    \ - 1 ))\n  while (( min <= max )); do\n    let \"min+=2\"\n    let \"max--\"\n\
    \  done\n  while (( max >= 0 )); do\n    local n=$(( max + 1 ))\n    local tmp=\"\
    ${list[0]}\"\n    while (( \"$n\" <= ${#list} )); do\n      tmp=\"${tmp},${list[$n]}\"\
    \n      let \"n++\"\n    done\n    list=\"$tmp\"\n    let \"max--\"\n  done\n\
    \  list=$(echo \"$list\" | tr ' ' '\\n')\n  echo ${list[@]}\n  return 0\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ strange=\"$1\"\n  local result\n  IFS=' ' read -r -a arr <<< \"$strange\"\n\
    \  result=()\n  for i in \"${arr[@]}\"; do\n    case \"$i\" in\n      \"$i\")\
    \ continue;;\n      *) result+=(\"$i\");;\n    esac\n  done\n  printf '%s\\n'\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ int_list=\n  local max_int=0\n  local min_int=0\n  local length=$(( ${#1} -\
    \ 2 ))\n  local length2=$(( ${#1} ))\n\n  for (( i = 1; i < $length; i++ )); do\n\
    \    if [[ $1 == *[!0-9]* ]]; then\n      int_list+=\"\\\"$i\\\" \"\n    elif\
    \ (( $i >= $max_int )); then\n      max_int=$i\n    fi\n    if [[ $1 == *[!0-9]*\
    \ ]]; then\n      int_list+=\"\\\"$i\\\" \"\n    elif (( $i <= $min_int )); then\n\
    \      min_int=$i\n    fi\n  done\n\n  if (( $length2 == 0 )); then\n    return\
    \ $int_list\n  fi\n  strange_sort_list $int_list $max_int $min_int $length2\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=56 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=65 encoding='utf-8'>
  timestamp: 1660059351
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ $1 must be passed as a string, no checks performed\n    local tmpvar=$1\n  \
    \  local i=0\n    local strange_sorting=( )\n    while [[ ${tmpvar:0:1} = \" \"\
    \ ]]; do\n        strange_sorting+=( \"${tmpvar:1}\" )\n        tmpvar=${tmpvar:2}\n\
    \        i=$(( i+1 ))\n    done\n    if [ ${i} == 0 ]; then\n        strange_sorting+=(\
    \ \"${tmpvar:1}\" )\n        tmpvar=${tmpvar:1}\n    fi\n    # now strange_sorting\
    \ contains all the integer in $1, in order\n    # with minimum integer at the\
    \ end\n    while [[ ${tmpvar:0:1} = \" \" ]]; do\n        strange_sorting+=( \"\
    ${tmpvar:1}\" )\n        tmpvar=${tmpvar:2}\n        i=$(( i+1 ))\n    done\n\
    \    if [ ${i} == 0 ]; then\n        strange_sorting+=( \"${tmpvar:1}\" )\n  \
    \  fi\n    # now strange_sorting contains all the integer in $1, in order\n  \
    \  # with maximum integer at the end\n    while [[ ${tmpvar:0:1} = \" \" ]]; do\n\
    \        strange_sorting+=( \"${tmpvar:1}\" )\n        tmpvar=${tmpvar:2}\n  \
    \      i=$(( i+1 ))\n    done\n    # now strange_sorting contains all the integer\
    \ in $1, in order\n    # with minimum integer first and maximum integer last\n\
    \    i=0\n    while [[ ${tmpvar:0:1} = \" \" ]]; do\n        strange_sorting+=(\
    \ \"${tmpvar:1}\" )\n        tmpvar=${tmpvar:2}\n        i=$(( i+1 ))\n    done\n\
    \    if [ ${i} == 0 ]; then\n        strange_sorting+=( \"${tmpvar:1}\" )\n  \
    \  fi\n    # now strange_sorting contains all the integer in $1, in order\n  \
    \  # with maximum integer first and minimum integer last\n    i=0\n    while [[\
    \ ${tmpvar:0:1} = \" \" ]]; do\n        strange_sorting+=( \"${tmpvar:1}\" )\n\
    \        tmpvar=${tmpvar:2}\n        i=$(( i+1 ))\n    done\n    if [ ${i} ==\
    \ 0 ]; then\n        strange_sorting+=( \"${tmpvar:1}\" )\n    fi\n    # now strange_sorting\
    \ contains all the integer in $1, in order\n    # with minimum integer \n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ strange_list=\"$1\"\n    IFS=$'\\n'\n    strange_list=$(echo $strange_list |\
    \ tr ' ' ',')\n    local sort_list\n    for strange in $strange_list; do\n   \
    \     sort_list=$sort_list$strange\n    done\n    IFS=$' \\t\\n'\n    echo \"\
    ${sort_list%,}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # $1\
    \ is space separated list to be sorted\n  # $2 will hold result\n  echo \"$1\"\
    \ | tr ' ' '\\n' | sort -nr | tr '\\n' ' '\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ _strange_list=\"$(strange_sort_helper $1)\"\n    local _result\n    _result=$(echo\
    \ \"${_strange_list}\" | sed -e 's/\\\"//g')\n    [[ -n $result ]] && _result=\"\
    ${result} + ${_result}\"\n    [[ -n ${_strange_list} ]] && _result=\"${_result}\
    \ + $(strange_sort_helper ${_strange_list})\"\n    [[ -n ${_strange_list} ]] &&\
    \ _result=\"${_result} + $(strange_sort_helper ${_strange_list})\" &&\n    _result=$(echo\
    \ \"${_result}\" | sed -e 's/+ / \" \" /g')\n    [[ -n ${_strange_list} ]] &&\
    \ _result=\"${_result} + $(strange_sort_helper ${_strange_list})\"\n    [[ -n\
    \ ${_strange_list} ]] && _result=\"${_result} + $(strange_sort_helper ${_strange_list})\"\
    \ &&\n    _result=$(echo \"${_result}\" | sed -e 's/+ / \" \" /g')\n    [[ -n\
    \ ${_strange_list} ]] && _result=\"${_result} + $(strange_sort_helper ${_strange_list})\"\
    \n    [[ -n ${_strange_list} ]] && _result=\"${_result} + $(strange_sort_helper\
    \ ${_strange_list})\"\n    [[ -n ${_strange_list} ]] && _result=\"${_result} +\
    \ $(strange_sort_helper ${_strange_list})\"\n    [[ -n ${_strange_list} ]] &&\
    \ _result=\"${_result} + $(strange_sort_helper ${_strange_list})\"\n    [[ -n\
    \ ${_strange_list} ]] && _result=\"${_result} + $(strange_sort_helper ${_strange_list})\"\
    \n    [[ -n ${_strange_list} ]] && _result=\"${_result} + $(strange_sort_helper\
    \ ${_strange_list})\"\n    [[ -n ${_strange_list} ]] && _result=\"${_result} +\
    \ $(strange_sort_helper ${_strange_list})\"\n    [[ -n ${_strange_list} ]] &&\
    \ _result=\"${_result} + $(strange_sort_helper ${_strange_list})\"\n    [[ -n\
    \ ${_strange_list} ]] && _result=\"${_result} + $(strange_sort_helper ${_strange_list})\"\
    \n    [[ -n ${_strange_list} ]] && _result=\"${_result} + $(strange_sort_\n}\n\
    \ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2383eigy.sh: line 34: unexpected EOF while looking for matching
    `)''

    /tmp/tmp2383eigy.sh: line 55: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list_var=($1)\n\n    local sorted_var=()\n    local min_var=${list_var[0]}\n\
    \    local max_var=${list_var[0]}\n    local next_var=${list_var[0]}\n\n    for\
    \ var in \"${list_var[@]:1}\"; do\n        if [[ $var -gt $min_var ]]; then\n\
    \            min_var=$var\n        fi\n        if [[ $var -lt $max_var ]]; then\n\
    \            max_var=$var\n        fi\n\n        if [[ $var -gt $next_var ]];\
    \ then\n            next_var=$var\n        fi\n\n        sorted_var+=(\"$next_var\"\
    )\n    done\n\n    sorted_var+=(\"$min_var\")\n    sorted_var+=(\"$max_var\")\n\
    \    sorted_var+=(\"$next_var\")\n\n    echo \"${sorted_var[@]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ i temp s\n    IFS=' ' read -r -a array <<< \"$1\"\n    s=\"\"\n    for ((i=0;\
    \ i < ${#array[@]}; i++)); do\n        # skip empty values\n        if [[ ${array[$i]}\
    \ != \"\" ]]; then\n            s=\"$s ${array[$i]}\"\n        else\n        \
    \    break\n        fi\n    done\n    s=$(printf %s \"$s\")\n    echo ${s%?}\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list_str=\"$1\"\n    local list_arr=($list_str)\n    local list_len=${#list_arr[@]}\n\
    \    local list_ind\n    local list_str=\"\"\n    for list_ind in \"${!list_arr[@]}\"\
    ; do\n        local list_arr_sub=\"${list_arr[$list_ind]}\"\n        # Strange\
    \ sorting, is when you start with the minimum value,\n        # then maximum of\
    \ the remaining integers, then minimum and so on.\n        if [ \"$list_ind\"\
    \ -gt \"$((list_len-1))\" ]; then\n            list_str=\"${list_str}\\\"$list_arr_sub\\\
    \"\"\n        else\n            list_str=\"${list_str}\\\"$list_arr_sub\\\" #\
    \ $list_arr_sub is $list_arr[$list_ind]\n        fi\n    done\n    echo \"$list_str\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpam1ssbpt.sh: line 47: unexpected EOF while looking for matching
    `"''

    /tmp/tmpam1ssbpt.sh: line 51: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ IFS=\" \"$1\" IFS=$'\\n'\n  local list=($1)\n  # The first element will be the\
    \ minimum.\n  local minimum=\"${list[0]}\"\n  # The last element will be the maximum.\n\
    \  local maximum=\"${list[${#list[@]}-1]}\"\n  local rest\n  while (( ${#list[*]}\
    \ > 0 )); do\n    # Take the next number and subtract it from all the numbers.\n\
    \    rest=$(echo \"${list[*]}\" | sort -nr -k 2 | head -1)\n    # Then add the\
    \ minimum value to all the numbers.\n    list+=(\"$minimum\")\n    # And add the\
    \ remaning number + the minimum value to all the numbers.\n    list+=(\"$rest\"\
    )\n  done\n  # Return the list with quotes, unquoting any spaces.\n  echo \"${list[*]}\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyxi4k_ab.sh: line 48: unexpected EOF while looking for matching
    `"''

    /tmp/tmpyxi4k_ab.sh: line 52: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -i strange_list_flag=0\n  local strange_list_length=0\n  local strange_list_index=0\n\
    \  local strange_list_output\n  local -i strange_list_index_flag=0\n\n  strange_list_length=${#1}\n\
    \  strange_list_output=\"\"\n\n  if [[ \"$strange_list_length\" -eq 0 ]]; then\n\
    \    return \"${strange_list_output}\"\n  fi\n\n  for strange_list_index in $(seq\
    \ 0 \"$((strange_list_length-1))\"); do\n    while [[ \"${strange_list_output}\"\
    \ = *\"\\\"${strange_list_index}\\\"\"* ]] && \\\n         [[ \"$strange_list_index\"\
    \ -eq \"$strange_list_length\" ]] &&\\\n         [ \"$strange_list_flag\" = 0\
    \ ]; do\n      strange_list_index=$((strange_list_index+1))\n    done\n\n    if\
    \ [ \"$strange_list_flag\" = 0 ]; then\n      strange_list_output+=\"${1}\"\n\
    \    fi\n\n    strange_list_flag=1\n  done\n\n  [[ \"$strange_list_flag\" = 0\
    \ ]] && return \"$strange_list_output\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ IFS=\" \" \n    sort -nr <<< \"$1\" | sed 's/ /\",\"/g'\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ i\n    local temp\n    local output_string=\"[\"\n\n    # loop through each\
    \ argument in turn and sort them\n    for i in  $( echo $1 | sed 's/ //g' ); do\n\
    \        # loop through the string backwards and add it to a temp variable\n \
    \       temp=$( echo $i | sed 's/ //g' | xargs printf \"%.0f\" )\n\n        #\
    \ if the temp is less than the previous one\n        # then append it to the output\n\
    \        if [ \"$temp\" -lt \"$i\" ]; then\n            output_string=\"$output_string\
    \ '\\\"'$i'\\\"'   \"\n        fi\n\n        # if the temp was greater than the\
    \ previous one\n        # then append the temp variable to the output\n      \
    \  if [ \"$temp\" -gt \"$i\" ]; then\n            output_string=\"$output_string\
    \ '\\\"'$temp'\\\"'   \"\n        fi\n\n        # if the temp was equal to the\
    \ previous one\n        # then append a space before the temp\n        if [ \"\
    $temp\" -eq \"$i\" ]; then\n            output_string=\"$output_string '\\\"'$temp'\\\
    \"'   \"\n        fi\n\n        # if the temp is equal to the previous one\n \
    \       # then append a comma before the temp\n        if [ \"$temp\" -eq \"$i\"\
    \ ]; then\n            output_string=\"$output_string '\\\"'$temp'\\\"'   \"\n\
    \        fi\n\n        # if the temp is less than the previous one\n        #\
    \ then append a comma before the temp\n        if [ \"$temp\" -lt \"$i\" ]; then\n\
    \            output_string=\"$output_string '\\\"'$temp'\\\"'   \"\n        fi\n\
    \    done\n    output_string=\"$output_string]\" # end the output string with\
    \ a closing bracket\n    echo $output_string\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Check\
    \ if list is empty\n  if [ -z \"$1\" ]; then\n    return \"\"\n  fi\n\n  # Make\
    \ an array out of arguments\n  IFS=' ' read -r -a array <<< \"$1\"\n\n  # Sort\
    \ it\n  printf \"%s\\n\" \"${array[@]}\" |\n    sort -n\n\n  # Put the array back\n\
    \  printf \"%s\\n\" \"${array[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tIFS='\
    \ ' read -r -a array <<<\"$1\"\n\tIFS=$'\\n' local sorted=()\n\tlocal i=0\n\t\
    while [ $i -lt \"${#array[@]}\" ]; do\n\t\tlocal value=${array[$i]}\n\t\tlocal\
    \ j=i+1\n\t\twhile [ $j -lt \"${#array[@]}\" ]; do\n\t\t\tif [ \"$value\" = \"\
    ${array[$j]}\" ]; then\n\t\t\t\tsorted+=(\"\\\"${array[j]}\\\" \\\"${array[$i]}\\\
    \"\")\n\t\t\t\tbreak\n\t\t\telif [ \"$value\" = \"${array[$i]}\" ]; then\n\t\t\
    \t\tsorted+=(\"\\\"${array[j]}\\\" \\\"${array[$i]}\\\"\")\n\t\t\t\tbreak\n\t\t\
    \telif [ \"$value\" = \"${array[j]}\" ]; then\n\t\t\t\tsorted+=(\"\\\"${array[j]}\\\
    \" \\\"${array[$i]}\\\"\")\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\t(( j++ ))\n\t\tdone\n\
    \t\t(( i++ ))\n\tdone\n\techo \"${sorted[*]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzp3ioqnc.sh: line 21: [: i+1: integer expression expected

    /tmp/tmpzp3ioqnc.sh: line 21: [: i+1: integer expression expected

    /tmp/tmpzp3ioqnc.sh: line 21: [: i+1: integer expression expected

    /tmp/tmpzp3ioqnc.sh: line 21: [: i+1: integer expression expected

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list=\"$1\"\n  [[ \"$list\" =~ -z \"$list\" ]]\n  local min_str=$(echo \"$list\"\
    \ | sed 's/^\\(\\([0-9]\\+\\)\\).*/\\1/')\n  local max_str=$(echo \"$list\" |\
    \ sed 's/^\\([0-9]\\+\\)$/\\1/')\n  [[ \"$min_str\" < \"$max_str\" ]]\n  local\
    \ sort_str=$(echo $list | sed 's/^\\([0-9]\\+\\)$/\\1/')\n  local result\n  local\
    \ count\n  local max_count\n  local min_count\n  local max_min\n  local max_max\n\
    \  local min_max\n  local max\n  local min\n  local output\n\n  if [[ ! -z \"\
    $list\" ]]; then\n    result=$(echo $sort_str | sed 's/^\\(\\([^0-9]\\+\\)\\)\\\
    ([0-9]\\+\\)/\\1\\2/')\n    count=$(echo $result | wc -l)\n    if [[ count -gt\
    \ 0 ]]; then\n      output=$(echo $result | sed 's/^\\(\\([^0-9]\\+\\)\\)\\([0-9]\\\
    +\\)/\\1\\2/')\n      max_count=$(echo $output | sed 's/^\\([0-9]\\+\\)\\([^0-9]\\\
    +\\)/\\1/')\n      min_count=$(echo $output | sed 's/^\\([^0-9]\\+\\)\\([0-9]\\\
    +\\)/\\1/')\n      max_min=$(echo $output | sed 's/^\\([0-9]\\+\\)$/\\1/')\n \
    \     max_max=$(echo $output | sed 's/^\\(.*\\)\\([0-9]\\+\\)/\\1/')\n      min_max=$(echo\
    \ $output | sed 's/^\\(.*\\)\\([^0-9]\\+\\)/\\1/')\n      max=$max_count\n   \
    \   min=$min_count\n      while [[ $min -lt $max && $min -gt $min ]] && [[ $min\
    \ -eq $max_min && $max -eq $min_max ]]; do\n        [[ \"$min\" -ge $max_min ]]\
    \ && max=$((max_max+1)) && max=$((min+1))\n        [[ \"$max\" -ge $min_max ]]\
    \ && min=$((min_max+1)) && min=$((max-1))\n      done\n      if [[ $min -lt $max\
    \ && $min -eq $max_min ]]; then\n        min=$(echo $result | sed 's/^\\(\\([^0-9]\\\
    +\\)\\)\\([0-9]\\+\\)/\\1\\2/')\n        max=$(echo $result \n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2nc59eh_.sh: line 16: syntax error in conditional expression

    /tmp/tmp2nc59eh_.sh: line 16: syntax error near `"$list"''

    /tmp/tmp2nc59eh_.sh: line 16: `  [[ "$list" =~ -z "$list" ]]''

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ strange_sort_list_cmd=\"$1\"\n    if [[ $strange_sort_list_cmd != \"\" ]]; then\n\
    \        local strange_sort_list_cmds=( ${strange_sort_list_cmd} )\n        local\
    \ sorted_array=( )\n        local array_length=${#strange_sort_list_cmds[@]}\n\
    \        for (( i = 0; i < ${array_length}; i++ )); do\n            local next_index=$(expr\
    \ $i + 1)\n            local next_value=${strange_sort_list_cmds[$next_index]}\n\
    \            for (( j = 0; j < ${array_length}; j++ )); do\n                if\
    \ [[ \"${strange_sort_list_cmds[$j]}\" < \"$next_value\" ]]; then\n          \
    \          local temp=${strange_sort_list_cmds[$j]}\n                    strange_sort_list_cmds[$j]=${strange_sort_list_cmds[$next_index]}\n\
    \                    strange_sort_list_cmds[$next_index]=$temp\n             \
    \       next_index=$next_index\n                    break\n                fi\n\
    \            done\n            sorted_array+=( \"${strange_sort_list_cmds[$i]}\"\
    \ )\n        done\n        echo \"${sorted_array[@]}\"\n    else\n        echo\
    \ \"\"\n    fi\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ i tmp list\n  tmp=\"$1\"\n  list=()\n\n  if [ -z \"$tmp\" ]; then\n    return\
    \ \"\"\n  fi\n\n  i=0\n  while IFS=' ' read -r num &&\n         [ \"$num\" !=\
    \ \"$tmp\" ]\n  do\n    list+=(\"$num\")\n    i=$((i+1))\n  done < <(printf \"\
    %s\" \"$tmp\" | sort -u | sed 's/^.*\"\\([^\"]*\\)\".*/\\1/')\n\n  printf \"[%s]\"\
    \ ${list[@]}\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ sorted_string=$1\n  local -a sorted_array=($sorted_string)\n  local sorted_array\n\
    \  local sorted_index\n  local sorted_value\n\n  local -a sorted_array_sorted=()\n\
    \  local -a sorted_array_unsorted=()\n\n  local i\n  local j\n\n  for ((i = 0;\
    \ i < ${#sorted_array[@]}; i++)); do\n    sorted_index=$((i))\n    sorted_value=${sorted_array[sorted_index]}\n\
    \    sorted_array_sorted[$i]=$sorted_value\n  done\n\n  unset sorted_index\n \
    \ unset sorted_value\n\n  for ((i = 1; i < ${#sorted_array[@]}; i++)); do\n  \
    \  sorted_value=${sorted_array[$i]}\n    sorted_array_unsorted[$i]=$sorted_value\n\
    \  done\n\n  for i in ${!sorted_array_sorted[@]}; do\n    sorted_index=$((i))\n\
    \    sorted_value=${sorted_array_sorted[$sorted_index]}\n    sorted_array_sorted[$i]=$sorted_value\n\
    \  done\n\n  for i in ${!sorted_array_unsorted[@]}; do\n    sorted_index=$((i))\n\
    \    sorted_value=${sorted_array_unsorted[$sorted_index]}\n    sorted_array_unsorted[$i]=$sorted_value\n\
    \  done\n\n  unset sorted_array_sorted\n  unset sorted_array_unsorted\n\n  printf\
    \ '%s\\n' \"${sorted_array_sorted[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=\"$1\"\n    local length=\"${#list}\"\n    local i=0 result=()\n    local\
    \ min=${list[0]}\n    local max=${list[0]}\n\n    # First pass: find the minimum\
    \ value\n    for ((i=0;i<length;i++)); do\n        [[ ${list[i]} < min ]] && min=${list[i]}\n\
    \    done\n\n    # Second pass: find the maximum value\n    for ((i=0;i<length;i++));\
    \ do\n        [[ ${list[i]} > max ]] && max=${list[i]}\n    done\n\n    # Third\
    \ pass: build result list\n    while [[ -n \"${list[i]}\" ]]; do\n        result+=(\"\
    ${list[i]}\")\n        ((i++))\n    done\n\n    # Append max to result, if it's\
    \ not the last element\n    if [[ -n \"${list[i]}\" ]]; then\n        result+=(\"\
    ${list[i]}\")\n    fi\n\n    # Append min to result, if it's not the last element\n\
    \    if [[ -n \"${list[i]}\" ]]; then\n        result+=(\"${min}\")\n    fi\n\n\
    \    # Append all remaining list elements to the result\n    for ((i=1;i<length;i++));\
    \ do\n        result+=(\"${list[i]}\")\n    done\n\n    # Sort result list\n \
    \   sort -g <<<\"${result[*]}\"\n\n    return 0\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ strange_list=\"$1\";\n    local temp_str=\"\";\n    local i=0;\n    local current_val=\"\
    \";\n    local current_key=\"\";\n\n    IFS=$' \\t\\n' read -ra temp_str <<< \"\
    $strange_list\";\n    IFS=' '\n\n    for i in \"${temp_str[@]}\"; do\n       \
    \ current_key=$i;\n        current_val=\"$i\";\n\n        (( i == temp_str[0]\
    \ )) && {\n            current_val=temp_str[1];\n            current_key=temp_str[2];\n\
    \        }\n\n        [[ \"$i\" != \"$current_val\" ]] && (( i < current_val ))\
    \ && {\n            temp_str[$i]=\"$current_val\";\n            temp_str[$i]=\"\
    $current_key\";\n        }\n\n        (( i > current_val )) && {\n           \
    \ temp_str[$i]=\"$current_key\";\n            temp_str[$i]=\"$current_val\";\n\
    \        }\n    done;\n\n    echo \"${temp_str[@]}\"\n}\n\ncandidate() {\n   \
    \ strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    if\
    \ [ -z \"$1\" ]; then return 1; fi\n    array=( \"$1\" )\n    MIN=\"$((${array[0]}+1))\"\
    \n    MAX=\"$((${array[0]}-1))\"\n    echo -n \"$(sort -n -t \" \" \"$MAX\" \"\
    $MAX\" \"$MIN\" \"$MIN\" \"$MAX\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\"\
    \ \"$MIN\" \"$MAX\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\"\
    \ \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MAX\"\
    \ \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\"\
    \ \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\"\
    \ \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\"\
    \ \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\"\
    \ \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\"\
    \ \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\"\
    \ \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\"\
    \ \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\"\
    \ \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\"\
    \ \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\"\
    \ \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\"\
    \ \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\"\
    \ \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\"\
    \ \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \"$MIN\" \"$MAX\" \n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqpcmyj4c.sh: line 19: unexpected EOF while looking for matching
    `)''

    /tmp/tmpqpcmyj4c.sh: line 40: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    echo\
    \ \"$1\" | sed -e 's/ /\", \"/g' | sed -e 's/^/\"/' -e 's/$/\"/' | sort | sed\
    \ -e 's/^/\"/\"/g' -e 's/$/\"/' | sed -e 's/\"/\"/g' | sed -e 's/$/\"/g'\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 7: unknown option to `s''

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ temp_file=$1\n  shift\n  local temp_list=$1\n  local temp_list_size=0\n  local\
    \ temp_sorted_list=\"\"\n  local temp_array_sorted=()\n  local temp_array_sorted_size=0\n\
    \  local temp_array_sorted_index=0\n  local temp_array_sorted_item=\"\"\n  local\
    \ temp_array_sorted_item_index=0\n  local temp_array_sorted_item_index2=0\n  local\
    \ temp_array_sorted_item_index3=0\n\n  if [[ -z \"${temp_list_size}\" ]]; then\n\
    \    temp_list_size=${#temp_list[@]}\n  else\n    temp_list_size=${temp_list_size}\n\
    \  fi\n\n  while [ \"$temp_list_size\" -gt 0 ]; do\n    temp_array_sorted_item_index=0\n\
    \    temp_array_sorted_item_index2=0\n    temp_array_sorted_item_index3=0\n\n\
    \    while [ \"$temp_array_sorted_size\" -le \"$temp_list_size\" ]; do\n     \
    \ temp_array_sorted_item_index=$(( temp_array_sorted_index + 1 ))\n      temp_array_sorted_item_index2=$((\
    \ temp_array_sorted_item_index + 1 ))\n      temp_array_sorted_item_index3=$((\
    \ temp_array_sorted_item_index2 + 1 ))\n\n      if [[ \"${temp_list[$temp_array_sorted_item_index]}\"\
    \ -gt \"${temp_list[$temp_array_sorted_item_index2]}\" ]]; then\n        temp_array_sorted[$temp_array_sorted_item_index3]=${temp_list[$temp_array_sorted_item_index]}\n\
    \        temp_array_sorted_item_index3=$(( temp_array_sorted_item_index3 + 1 ))\n\
    \        temp_array_sorted_item_index=$(( temp_array_sorted_item_index + 1 ))\n\
    \      elif [[ \"${temp_list[$temp_array_sorted_item_index2]}\" -gt \"${temp_list[$temp_array_sorted_item_index3]}\"\
    \ ]]; then\n        temp_array_sorted[$temp_array_sorted_item_index3]=${temp_list[$temp_array_sorted_item_index2]}\n\
    \        temp_array_sorted_item_index3=$(( temp_array_sorted_item_index3 + 1 ))\n\
    \        temp_array_sorted_item_index=$(( temp_array_sorted_item_index + 1 ))\n\
    \      elif [[ \"${temp_list[$temp_array_sorted_item_index3]}\" -gt \"${temp_list[$temp_array_sorted_item_index]}\"\
    \ ]]; then\n        temp_array_sorted[$temp_array_sorted_item_index3]=${temp_list[$temp_array_sorted_item_index]}\n\
    \        temp_array_sorted_item_index3=$(( temp_array_sorted_item_index3 + 1 ))\n\
    \        temp_array_sorted_item_index=$(( temp_array_sorted_item_index + 1 ))\n\
    \      else\n        temp_array_sorted[$temp_array_sorted_\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8uejggts.sh: line 57: unexpected EOF while looking for matching
    `]''

    /tmp/tmp8uejggts.sh: line 78: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  strange_sort_list\
    \ \"$1\" \"$2\" \"$3\" \"${4[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt8xnsaw4.sh: line 15: ${4[@]}: bad substitution

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tlocal\
    \ strange_list=$(strange_sort_helper)\n\tif [ -z \"$strange_list\" ]; then\n\t\
    \techo \"[]\"\n\telse\n\t\techo \"$strange_list\"\n\tfi\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3owvkx1i.sh: line 15: strange_sort_helper: command not found

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  IFS=$'\
    \ ' read -r -a elements <<<\"$1\"\n  result=()\n  for elem in \"${elements[@]}\"\
    ; do\n    case \"$elem\" in\n      *-*)\n        for (( j=${#elem}; j >= 1; j--\
    \ )); do\n          (( ${elem:j:1} == \"-\" )) && break\n          result+=(\"\
    $elem\")\n        done\n        ;;\n      *)\n        result+=(\"$elem\")\n  \
    \      ;;\n    esac\n  done\n  printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ str=\"\"\n    for n in $(echo $1 | tr \" \" \"\\n\");\n    do\n        local\
    \ last=\"$n\"\n        local next=$(echo $n | cut -d ' ' -f 2)\n        while\
    \ [[ \"$last\" -gt \"$next\" ]]\n        do\n            local a=\"$last\"\n \
    \           local b=\"$next\"\n            last=$a\n            next=$b\n    \
    \    done\n        local num=\"$last\"\n        str+=\"\\\"$num\\\" \"\n    done\n\
    \    echo \"$str\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=$(echo $1 | sed 's/ /\" \"/g')\n    local -a res\n    local tmp\n    local\
    \ tmp2\n    local tmp3\n\n    echo -n $list | while read -r val; do\n        res=()\n\
    \        tmp=$(echo $val | sed 's/ /\" \"/g')\n        tmp2=$(echo $tmp | cut\
    \ -d'\"' -f 1)\n        tmp3=$(echo $tmp | cut -d'\"' -f 2)\n        if [[ -n\
    \ \"$tmp2\" ]]; then\n            tmp2=\"\\\"$tmp2\\\"\"\n        fi\n       \
    \ if [[ -n \"$tmp3\" ]]; then\n            tmp3=\"\\\"$tmp3\\\"\"\n        fi\n\
    \        res+=( $tmp2 $tmp3 )\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ l\n    local i\n    local c\n    local i\n    local ret\n\n    if [ \"${#}\"\
    \ -eq 0 ]; then\n        echo \"[ ]\"\n        return\n    fi\n    local sorted_list\n\
    \    sorted_list=()\n    IFS=$'\\t' read -r l\n    for c in $l; do\n        IFS=$'\\\
    n' read -r i || continue\n        sorted_list=(\"${sorted_list[@]}\" \"$i\")\n\
    \    done\n    IFS=$'\\n' read -r l\n    for c in $l; do\n        IFS=$'\\t' read\
    \ -r i || continue\n        sorted_list=(\"${sorted_list[@]}\" \"$i\")\n    done\n\
    \    IFS=$'\\n' read -r l\n    for c in $l; do\n        IFS=$'\\n' read -r i ||\
    \ continue\n        sorted_list=(\"${sorted_list[@]}\" \"$i\")\n    done\n   \
    \ IFS=$'\\n' read -r l\n    for c in $l; do\n        IFS=$'\\n' read -r i || continue\n\
    \        sorted_list=(\"${sorted_list[@]}\" \"$i\")\n    done\n    IFS=$'\\n'\
    \ read -r l\n    for c in $l; do\n        IFS=$'\\t' read -r i || continue\n \
    \       sorted_list=(\"${sorted_list[@]}\" \"$i\")\n    done\n    IFS=$'\\n' read\
    \ -r l\n    for c in $l; do\n        IFS=$'\\n' read -r i || continue\n      \
    \  sorted_list=(\"${sorted_list[@]}\" \"$i\")\n    done\n    IFS=$'\\n' read -r\
    \ l\n    for c in $l; do\n        IFS=$'\\t' read -r i || continue\n        sorted_list=(\"\
    ${sorted_list[@]}\" \"$i\")\n    done\n    IFS=$'\\n' read -r l\n    for c in\
    \ $l; do\n        IFS=$'\\n' read -r i || continue\n        sorted_list=(\"${sorted_list[@]}\"\
    \ \"$i\")\n    done\n    IFS=$'\\n' read -r l\n    for c in $l; do\n        IFS=$'\\\
    t' read -r i || continue\n        sorted_list=(\"${sorted_list[@]}\" \"$i\")\n\
    \    done\n    IFS=$'\\n' read -r l\n    for c in $l; do\n        IFS=$'\\n' read\
    \ -r i || continue\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgazshm9m.sh: line 75: syntax error near unexpected token `}''

    /tmp/tmpgazshm9m.sh: line 75: `}''

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -n sorted_list=(\"${1// /}\")\n    local sorted_list_sorted\n\n    for element\
    \ in \"${sorted_list[@]}\"; do\n        local current_index=0\n        local current_val=${sorted_list[current_index]}\n\
    \        local current_val_index=0\n        local current_val_val=${sorted_list[current_val_index]}\n\
    \n        for element_val in \"${sorted_list[@]}\"; do\n            if [ \"${element}\"\
    \ -le \"${element_val}\" ]; then\n                current_val=\"${element_val}\"\
    \n                current_val_index=$((current_val_index+1))\n               \
    \ break\n            fi\n        done\n        sorted_list_sorted+=( \"\\\"${current_val}\\\
    \"\" )\n    done\n    printf '%s\\n' \"${sorted_list_sorted[@]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmr3tp096.sh: line 15: local: sorted_list: reference variable cannot
    be an array

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ Split $1 on space\n    IFS=' ' read -a list <<< \"$1\"\n\n    # Take min and\
    \ max values from list\n    min=$(echo \"${list[@]}\" | xargs -n1 echo -n) # min\
    \ value from list\n    max=$(echo \"${list[@]}\" | xargs -n1 echo -n) # max value\
    \ from list\n\n    # Sort list\n    list=$(echo \"${list[@]}\" | sort -n | xargs\
    \ -n1 | xargs printf \"%s\")\n\n    # Append min and max values back\n    echo\
    \ \"${list} $min $max\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ i j strange list unquoted\n  IFS=$'\\n' list=\"$1\" unquoted=\"$list\"\n  list=\"\
    $strange\"\n  strange=\"\\\"$unquoted\\\" \"\n  while [[ $list ]]; do\n    i=$((\
    \ j=0 ))\n    while [[ $strange ]]; do\n      j=$(( j+1 ))\n      unquoted=\"\
    $(echo \"$list\" | sed -E 's/^'\"$strange\"'//' | tr '\\n' ' ' | sort -n | cut\
    \ -d'\"' -f $j)\"\n      if [[ ! \"$unquoted\" =~ ^\"[^\"]*\"$ ]]; then\n    \
    \    unquoted=\"\\\"$unquoted\\\"\"\n      fi\n      list=\"$strange$unquoted\"\
    \n      strange=\" \"\n    done\n    i=$(( i+1 ))\n  done\n  echo \"$list\"\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu7xih0d2.sh: line 24: syntax error in conditional expression

    /tmp/tmpu7xih0d2.sh: line 41: syntax error near `"1''

    /tmp/tmpu7xih0d2.sh: line 41: `    [[ $(candidate "1 2 3 4") = "1 4 2 3" ]]''

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tstrange_sort_list_helper\
    \ $1 \"\" \"\" $2\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyril9u6w.sh: line 15: strange_sort_list_helper: command not found

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ IFS=$1\n    shift\n    local tmp=$1\n    local _list_=$tmp\n    # split into\
    \ array\n    IFS=\" \" read -r -a _array <<<\"$_list_\"\n    # sort array in reverse\
    \ order, first by lowest integer and\n    # then by highest integer\n    sort\
    \ -r --field-separator=\" \" _array\n    # convert into string\n    IFS=$IFS\n\
    \    _list_=\"\"\n    for element in \"${_array[@]}\"; do\n        _list_+=\"\\\
    \"$element\\\"\\n\"\n    done\n    echo \"${_list_}\"\n}\n\ncandidate() {\n  \
    \  strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: _array: No such file or directory

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ line=$1\n    IFS=$'\\t' read -r -a array <<< \"$line\"\n    local length=${#array[@]}\n\
    \    for (( i = 0; i < $length; i++ )); do\n        local j=$(( i + 1 ))\n   \
    \     for (( j = 0; j < $length; j++ )); do\n            local k=$(( j + 1 ))\n\
    \            if [[ $array[i] -gt $array[j] ]]; then\n                array[$k]=${array[$i]}\n\
    \                array[$i]=$array[j]\n                array[$j]=${array[$k]}\n\
    \            fi\n        done\n    done\n    echo \"${array[@]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyqq_zj70.sh: line 22: [[: 1 2 3 4[i]: syntax error in expression
    (error token is "2 3 4[i]")

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Set\
    \ default values\n  local LIST=\"$1\"\n  local FIRST=\"$(echo $LIST | cut -d\"\
    \ \" -f1)\"\n  local SECOND=\"$(echo $LIST | cut -d\" \" -f2)\"\n  local THIRD=\"\
    $(echo $LIST | cut -d\" \" -f3)\"\n  local FOURTH=\"$(echo $LIST | cut -d\" \"\
    \ -f4)\"\n\n  # Sort according to given number\n  if [ \"$FIRST\" -gt \"$SECOND\"\
    \ ]; then\n    echo '\"' \"$FIRST\"\n    echo \"$SECOND\"\n    echo \"$THIRD\"\
    \n    echo \"$FOURTH\"\n    echo \"$FIRST\" > $1\n  elif [ \"$FIRST\" -lt \"$SECOND\"\
    \ ]; then\n    echo '\"' \"$FIRST\"\n    echo \"$SECOND\"\n    echo \"$THIRD\"\
    \n    echo \"$FOURTH\"\n    echo \"$SECOND\" > $1\n  else\n    echo '\"' \"$FIRST\"\
    \n    echo \"$SECOND\"\n    echo \"$THIRD\"\n    echo \"$FOURTH\"\n  fi\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3uu11wwp.sh: line 34: $1: ambiguous redirect

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  IFS=$'\\\
    n' read -a array <<< \"$1\"\n  result=()\n  sorted=()\n  for i in \"${array[@]}\"\
    ; do\n    sorted+=(\"$i\")\n  done\n  for i in \"${sorted[@]}\"; do\n    [[ -z\
    \ \"$result\" ]] \\\n      && result+=($i) >/dev/null || result+=(${sorted[$#sorted]}>$i)\n\
    \  done\n  printf '%s\\n' \"${result[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp89cyfkp3.sh: line 23: syntax error near unexpected token `>''

    /tmp/tmp89cyfkp3.sh: line 23: `      && result+=($i) >/dev/null || result+=(${sorted[$#sorted]}>$i)''

    /tmp/tmp89cyfkp3.sh: line 24: syntax error near unexpected token `done''

    /tmp/tmp89cyfkp3.sh: line 24: `  done''

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ L=$1\n    local i=$2\n    local temp\n    local strange\n    local new_strange\n\
    \    while [ $i -gt 0 ]; do\n        temp=${L[i-1]}\n        strange=${L[i]}\n\
    \        if [ \"$strange\" = \"$temp\" ]; then\n            temp=${L[i]}\n   \
    \         strange=${L[i-1]}\n        fi\n        new_strange=\"'$strange'\"\n\
    \        i=$((i-1))\n        if [ \"$i\" = \"0\" ]; then\n            L+=($new_strange)\n\
    \        else\n            L+=($new_strange $temp)\n        fi\n    done\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppnr8gfnp.sh: line 20: [: -gt: unary operator expected

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list_str=$1\n  if [[ -z $list_str ]]; then\n    return \"\"\n  fi\n  local strange_list=\"\
    \"\n  local strange_counter=0\n  local min=$list_str[0]\n  local max=$list_str[0]\n\
    \  for i in $list_str; do\n    if [ \"$min\" == \"$i\" ]; then \n      min=$i\n\
    \    elif [ \"$max\" == \"$i\" ]; then \n      max=$i\n    else\n      strange_list+=\"\
    \\\"$i\\\" \" \n      (( strange_counter++ ))\n    fi\n  done\n  strange_list+=\"\
    \\\"$max\\\" \\\"$min\\\"\"\n  echo \"$strange_list\"\n}\n\ncandidate() {\n  \
    \  strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ $1 is what was passed in the command line\n    local IFS=\" \"\n    # $2 is\
    \ a variable which holds one argument\n    local ARG=$2\n    # $3 is another variable\
    \ which holds another argument and so on\n    local X=$3\n    # $4 is yet another\
    \ variable which holds a string and so on\n    local Y=$4\n\n    # Put all arguments\
    \ into a string\n    local list=\"\"\n    # Loop through the argument strings\n\
    \    while [ $# -gt 0 ]\n    do\n        # Append the argument to the argument\
    \ string\n        list=\"$list \\\"$ARG\\\"\"\n        # Remove the first argument\
    \ from the argument list\n        shift\n        # Remove the last argument from\
    \ the argument list\n        shift\n    # Loop back to the top\n    done\n\n \
    \   # Trim space\n    list=`echo $list | sed -e \"s/^[ \\t]*//\"`\n\n    # Split\
    \ the arguments by space\n    list=\"`echo $list | awk '{print $1}'`\"\n\n   \
    \ # If there is only one argument\n    if [ ${#list} = 0 ]; then\n        echo\
    \ \"$ARG\"\n    # If there is more than 1 argument\n    elif [ ${#list} -gt 1\
    \ ]; then\n        # Loop through all arguments not including the first and last\n\
    \        # Loop from the first argument to the last\n        for (( c=1; c <=\
    \ ${#list}; c+=1 )); do\n            echo \"$X$(c-1)$Y$list$c\"\n        done\n\
    \    # If there is only one argument\n    else\n        # Loop through all arguments\
    \ not including the first and last\n        # Loop from the first argument to\
    \ the last\n        for (( c=1; c <= ${#list}; c+=1 )); do\n            echo \"\
    $X$c$Y$list$c\"\n        done\n    fi\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpftl09ecd.sh: line 52: c-1: command not found

    /tmp/tmpftl09ecd.sh: line 52: c-1: command not found

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ strange list i len min max\n  list=$(echo \"$1\" | sed \"s/ //g\")\n  min=$(echo\
    \ $list | cut -s -d ' ' | sort -n | head -1)\n  max=$(echo $list | cut -s -d '\
    \ ' | sort -nr | head -1)\n  len=$(( $(wc -l <<< \"$list\") - 1 ))\n  printf -v\
    \ strange '[\"%s\"]' \"$min\"\n  (( len > 1 )) && printf -v strange \"${strange[@]:$((len-1))}\"\
    \n  printf -v strange \"${strange[@]}\"\n  printf '%s\\n' \"${strange[@]}\"\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: you must specify a list of bytes, characters, or fields

    Try ''cut --help'' for more information.

    cut: you must specify a list of bytes, characters, or fields

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Split\
    \ $1 into individual elements\n  local list=\"$1\"\n  local element\n  local max_index\n\
    \  local min_index\n  local i\n  local temp\n  local len\n\n  # If no elements,\
    \ return empty list\n  if [[ -z \"$list\" ]]; then\n    return 0\n  fi\n\n  #\
    \ Set min_index to the first element in the list\n  # Set max_index to the last\
    \ element in the list\n  max_index=\"$((${#list} - 1))\"\n  min_index=\"$((${#list}\
    \ - 1))\"\n\n  # Loop until min_index hits zero or min_index hits the end of the\
    \ list\n  # or max_index hits the beginning of the list\n  for i in $(seq 0 \"\
    $max_index\"); do\n    element=$(echo \"$list\" | sed \"s/ .*$//\")\n    if [[\
    \ -z \"$element\" ]]; then\n      break\n    fi\n    if [[ \"$element\" -gt \"\
    $list\" ]]; then\n      break\n    fi\n    if [[ \"$element\" -lt \"$list\" ]];\
    \ then\n      break\n    fi\n    if [[ \"$i\" -lt \"$min_index\" ]]; then\n  \
    \    min_index=\"$i\"\n    fi\n    if [[ \"$i\" -gt \"$max_index\" ]]; then\n\
    \      max_index=\"$i\"\n    fi\n  done\n\n  # If min_index hits the beginning\
    \ of the list, then add an extra element\n  # and decrement max_index to make\
    \ the list circular\n  if [[ \"$min_index\" -eq \"$max_index\" ]]; then\n    list=\"\
    ${list} 0\"\n    max_index=\"$((${#list} - 1))\"\n  fi\n\n  # Loop until min_index\
    \ hits the end of the list\n  # or max_index hits the beginning of the list\n\
    \  for i in $(seq 0 \"$min_index\"); do\n    element=$(echo \"$list\" | sed \"\
    s/ .*$//\")\n    if [[ -z \"$element\" ]]; then\n      break\n    fi\n    if [[\
    \ \"$element\" -gt \"$list\" ]]; then\n      break\n    fi\n    if [[ \"$element\"\
    \ -lt \"$list\" ]]; then\n      break\n    fi\n    if [[ \"$i\" -lt \"$max_index\"\
    \ ]]; then\n      max_index=\"$i\"\n    fi\n  done\n\n  # Loop until min_index\
    \ hits the beginning of the list\n  # or max_index hits the end of the list\n\
    \  for i in $(seq 0 \"$max_index\"); do\n    element=$(echo \"$list\" | sed \"\
    s/ .*$//\")\n    if [[ -z \"$element\" ]]; then\n      break\n    fi\n    if [[\
    \ \"$element\" -gt \"$list\" ]]; then\n      break\n\n}\n\ncandidate() {\n   \
    \ strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpux5upl54.sh: line 90: syntax error near unexpected token `}''

    /tmp/tmpux5upl54.sh: line 90: `}''

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list_string=\"$1\"\n\n  local integer_list=\"\"\n  for integer in $list_string;\
    \ do\n    integer_list+=\"'$integer'\"\n  done\n\n  # sort string version of array\
    \ list numerically\n  local sorted_list=\"$(sort -n <<<\"$integer_list\")\"\n\n\
    \  # remove unnecessary quotation marks\n  local sorted_list_string=\"${sorted_list#\"\
    '}\"\n\n  # get only unique elements\n  local sorted_list_string=\"$(echo \"$sorted_list_string\"\
    \ | uniq)\"\n\n  # return sorted list\n  echo \"$sorted_list_string\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmei64ah8.sh: line 49: unexpected EOF while looking for matching
    `"''

    /tmp/tmpmei64ah8.sh: line 53: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ _list=$1\n  local _list _ret=()\n  IFS=\" \"; for _item in $_list; do\n    local\
    \ _item\n    read _item <<< \"$_item\"\n    _ret+=(\"\\\"$_item\\\"\")\n  done\n\
    \  echo \"${_ret[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[\
    \ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\"\
    \ ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n\
    \    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[\
    \ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ strange_list\n  strange_list=\"$1\"\n  local num_items\n  num_items=$( echo\
    \ \"$strange_list\" | tr -cd \"0-9\" )\n  local sorted_list\n  sorted_list=( $(echo\
    \ \"${strange_list}\" | sort -n | sed -e 's/^\"//' -e 's/\"$//' ) )\n  num_items=$((\
    \ $num_items - 1 ))\n  for i in $(seq $num_items); do\n    sorted_list[i]=$(echo\
    \ \"${sorted_list[$i]}\" | sed -e \"s/^\\\"//\" -e \"s/\\\"$//\")\n  done\n  echo\
    \ \"${sorted_list[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059349
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ output\n    output=$(comm -23 \\\n             <(echo $1 |tr ' ' '\\n' |sort\
    \ -n \\\n             >$HOME/tmp.strange_sort_list) \\\n             <(echo $1\
    \ |tr ' ' '\\n' |sort -r -n \\\n             >$HOME/tmp.strange_sort_list) )\n\
    \    rm -f $HOME/tmp.strange_sort_list\n    echo $output\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ shellcheck disable=SC2034\n    local _strange_sort_list_script=\"${FUNCNAME[0]}\"\
    \n    local _strange_sort_list_input=\"${1:-}\"\n    local _strange_sort_list_output\n\
    \    local _strange_sort_list_temp\n    local _strange_sort_list_delimiter=\"\
    \ \"\n    local _strange_sort_list_temp1=\"${_strange_sort_list_input:$((${#_strange_sort_list_input}-1))}\"\
    \n    local _strange_sort_list_temp2=\"${_strange_sort_list_temp:+$strange_sort_list_delimiter$strange_sort_list_temp}\"\
    \n    _strange_sort_list_output=$(\n        if [ -z \"$_strange_sort_list_input\"\
    \ ]; then\n            # nothing left to do\n            echo \"${_strange_sort_list_temp1}\"\
    \n        else\n            _strange_sort_list_temp=\"${_strange_sort_list_temp1}\"\
    \n            for (( i=0; i<${#_strange_sort_list_input}; i++ )); do\n       \
    \         local _strange_sort_list_temp3=\"${_strange_sort_list_input:$i:1}\"\n\
    \                case \"$i\" in\n                    0)\n                    \
    \    echo \"${_strange_sort_list_temp1}${_strange_sort_list_temp2}\"\n       \
    \                 ;;\n                    *)\n                        echo \"\
    ${_strange_sort_list_temp1}${_strange_sort_list_temp3}\"\n                   \
    \     ;;\n                esac\n                _strange_sort_list_temp2=\"${_strange_sort_list_temp3:$((${#_strange_sort_list_temp3}-1))}\"\
    \n            done\n        fi\n    )\n    IFS=\"$_strange_sort_list_delimiter\"\
    \n    echo \"$_strange_sort_list_output\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ items=$1\n  local output=\"\"\n  local count=0\n  local maxcount=0\n  local\
    \ mincount=0\n  local minstr=\"'\"\n  local maxstr=\"'\"\n  for item in ${items}\
    \ ; do\n    if [ $count -eq 1 ]; then\n      mincount=$((mincount+1))\n      minstr=\"\
    ${minstr}${item},\"\n    elif [ $count -eq $maxcount ]; then\n      maxcount=$((maxcount+1))\n\
    \      maxstr=\"${maxstr}${item},\"\n    else\n      count=$((count+1))\n    \
    \  if [ $count -le $maxcount ]; then\n        mincount=$((mincount+1))\n     \
    \   minstr=\"${minstr}${item},\"\n      fi\n      if [ $count -ge $mincount ];\
    \ then\n        maxcount=$((maxcount+1))\n        maxstr=\"${maxstr}${item},\"\
    \n      fi\n    fi\n  done\n  echo \"${minstr}${maxstr}\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ sorted_list sorted_strings sorted_numbers=\"\"\n    local list_elements=(\"\
    $@\")\n    local last_element i\n\n    for ((i=0; i<${#list_elements[*]}; i++));\
    \ do\n        last_element=${list_elements[i]}\n        for ((j=0; j<${#list_elements[*]};\
    \ j++)); do\n            if [[ $(($i+$j)) -ne 0 ]]; then\n                if [[\
    \ \"$list_elements[$i]\" -gt \"$list_elements[$j]\" ]]; then\n               \
    \     sorted_numbers=\"${sorted_numbers} \\\"${list_elements[$i]}\\\"\"\n    \
    \                list_elements[$i]=$list_elements[$j]\n                    list_elements[$j]=$last_element\n\
    \                    i=$(($i+$j))\n                    j=$(($i+1))\n         \
    \       else\n                    sorted_strings=\"${sorted_strings} \\\"${list_elements[$j]}\\\
    \"\"\n                    list_elements[$j]=$list_elements[$i]\n             \
    \       list_elements[$i]=$last_element\n                    j=$(($i+1))\n   \
    \                 i=$(($i+$j))\n                fi\n            fi\n        done\n\
    \    done\n    sorted_list=\"$( printf \"[ \\\"%s\\\" ]\" $sorted_numbers)\"\n\
    \    sorted_list=\"$( printf \"[ \\\"%s\\\" ]\" $sorted_strings)\"\n    echo $sorted_list\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ item\n  local -a items\n\n  # convert list into array with one item\n  items=($1)\n\
    \n  # sort items\n  echo \"${items[@]}\" | sort -n -k 1,1n -k 2,2n -k 3,3n -k\
    \ 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -n arr=$1\n    local i\n    local sorted\n    local min\n    local max\n   \
    \ local strange\n    local strange_line\n    local strange_line2\n    local line\n\
    \    local line2\n    local val\n    local newline\n\n    # Sort strange lines\
    \ and remove duplicate lines.\n    # Sort line by number until non-number line.\n\
    \    # Do not split a line if another line is strange line.\n    # Add quotes\
    \ to the lines.\n    strange=$(\n        awk -F'[ ]*' '\n            !/^[^0-9]/\
    \ {\n                printf \"%s \", $0;\n                next;\n            }\n\
    \            $NF != \"\" {\n                printf \"%s \", $0;\n            \
    \    next;\n            }\n            ++cnt;\n            cnt = 0;\n        \
    \    split($1, arr, \" \");\n            for (i = 1; i < ARRLEN; i++) {\n    \
    \            val = arr[i];\n                val = \"\\\"\" val << \"\\\"\";\n\
    \                arr[i] = val;\n            }\n            sort(arr);\n      \
    \      for (i = 1; i < ARRLEN; i++) {\n                val = arr[i];\n       \
    \         printf(\"\\\"%s\\\"\", val);\n            }\n            exit 0;\n \
    \       ' <<< $2)\n\n    # Remove duplicate lines.\n    # Sort line by number\
    \ until non-number line.\n    # Add quotes to the lines.\n    strange=$(\n   \
    \     awk -F'[ ]*' '\n            !/^[^0-9]/ {\n                printf \"%s \"\
    , $0;\n                next;\n            }\n            $NF != \"\" {\n     \
    \           printf \"%s \", $0;\n                next;\n            }\n      \
    \      ++cnt;\n            cnt = 0;\n            split($1, arr, \" \");\n    \
    \        for (i = 1; i < ARRLEN; i++) {\n                val = arr[i];\n     \
    \           val = \"\\\"\" val << \"\\\"\";\n                arr[i] = val;\n \
    \           }\n            sort(arr);\n            for (i = 1; i < ARRLEN; i++)\
    \ {\n                val = arr[i];\n                printf(\"\\\"%s\\\"\", val);\n\
    \            }\n            exit 0;\n        ' <<< $strange)\n\n    # Remove duplicate\
    \ lines.\n    # Sort line by number until non-number line.\n    # Add quotes to\
    \ the lines.\n    strange=$(\n        awk -F'[ ]*' '\n            !/^[^0-9]/ {\n\
    \                printf \"%s \", $0;\n                next;\n            }\n \
    \           $NF != \"\" {\n                printf \"%s \", $0;\n             \
    \   next;\n            }\n            ++cnt;\n            cnt = 0;\n         \
    \   split($1, arr, \" \");\n            for (i = 1; i < ARRLEN; i++) {\n     \
    \           val = arr[i];\n\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnce94yah.sh: line 91: unexpected EOF while looking for matching
    `''''

    /tmp/tmpnce94yah.sh: line 126: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list_string=$1\n    local i=0\n    local string=\"\"\n    while [ $i -lt $list_string\
    \ ]; do\n        if [ ${list_string:$i:1} == \"5\" ]; then\n            string+=\"\
    \\\"5\\\"\"\n        else\n            string+=\"${list_string:$i:1}\"\n     \
    \   fi\n        i=$((i+1))\n    done\n    string=$(echo $string | sed \"s/ \\\"\
    5\\\"\" ) # Remove '\"\"' at the start and end\n    string=$(echo $string | sed\
    \ \"s/ \\\"\\//\\\"\" ) # Remove '\"\"' at the start and end\n    string=$(echo\
    \ $string | sed \"s/^5//\" ) # Remove first '5' at the start\n    string=$(echo\
    \ $string | sed \"s/5$//\" ) # Remove last '5' at the end\n    string=$(echo $string\
    \ | sed \"s/ //g\" ) # Remove spaces from start and end\n    echo \"$string\"\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqo5afd34.sh: line 18: [: too many arguments

    sed: -e expression #1, char 6: unterminated `s'' command

    sed: -e expression #1, char 8: unterminated `s'' command

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ string=\"$1\"\n    if [[ -z \"$string\" ]]; then\n        echo \"$string\"\n\
    \        return\n    fi\n    local array=( $string )\n    local length=${#array[@]}\n\
    \    if [[ $length == 1 ]]; then\n        echo \"$array\"\n        return\n  \
    \  fi\n\n    local index=0\n    local startIndex=0\n    local currentIndex=0\n\
    \    local nextIndex=0\n\n    local length=0\n    local currentNumber=${array[0]}\n\
    \    local previousNumber=${array[1]}\n    local currentIndexValue=${array[0]}\n\
    \n    local currentString='\"'+${currentNumber//./\\\\}+'\"'\n\n    while (( index\
    \ < length )); do\n        nextIndex=$(( index+1 ))\n        if (( nextIndex ==\
    \ length )); then\n            nextIndex=0\n        fi\n        nextNumber=${array[nextIndex]}\n\
    \        previousNumber=${array[previousIndex]}\n        nextIndexValue=${array[nextIndex]}\n\
    \        previousIndexValue=${array[previousIndex]}\n\n        if [[ \"${nextNumber}\"\
    \ == \"${currentNumber}\" ]]; then\n            previousNumber=\"${previousNumber}\"\
    \n        else\n            if [[ \"${previousNumber}\" == \"${currentNumber}\"\
    \ ]]; then\n                currentIndexValue=\"${currentIndexValue}\"\n     \
    \       else\n                currentIndexValue=\"${currentIndexValue} ${currentNumber}\"\
    \n            fi\n        fi\n\n        previousIndex=$index\n\n        if [[\
    \ \"${nextNumber}\" == \"${currentNumber}\" ]]; then\n            previousNumber=\"\
    ${previousNumber}\"\n        else\n            if [[ \"${previousNumber}\" ==\
    \ \"${currentNumber}\" ]]; then\n                previousNumber=\"${previousNumber}\
    \ ${previousNumber}\"\n            else\n                if [[ \"${previousNumber}\"\
    \ == \"${nextNumber}\" ]]; then\n                    previousNumber=\"${previousNumber}\
    \ ${previousNumber}\"\n                else\n                    previousNumber=\"\
    ${previousNumber} ${nextNumber}\"\n                fi\n            fi\n      \
    \  fi\n\n        index=$nextIndex\n        currentNumber=${nextNumber}\n\n   \
    \     currentIndexValue=${nextIndexValue}\n        currentIndex=\"${currentIndexValue}${currentIndex}\"\
    \n\n        echo \"$currentIndex\"\n    done\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [[ -z \"$1\" ]]\n  then\n    return 0\n  fi\n\n  # We use sed here because we\
    \ want a literal backslash inside the\n  # string to be treated literally, so\
    \ sed can do what we need.\n  local input_lines=$(sed -E 's/^ *//;s/ *$//;/^[^\"\
    ]*$/!d;s/^[^\"]*(\"[^\"]*\"|[^,]*),.*$/\"\\1\"/' <<< \"$1\")\n\n  local sorted_list=\"\
    $(sort -n <<<\"$input_lines\" | sed -E 's/^/\"/;s/ $//;s/,/\"/')\"\n  if [[ -n\
    \ \"$sorted_list\" ]]\n  then\n    eval \"$sorted_list\"\n  fi\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8b67l2wz.sh: eval: line 27: unexpected EOF while looking for matching
    `"''

    /tmp/tmp8b67l2wz.sh: eval: line 28: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=\"$1\"\n    local tmp\n\n    local sorted_list=()\n    local last_key=\"\
    \"\n\n    local i\n    local num_spaces\n    for i in  \"$list\"\n    do\n   \
    \     if [ $i -gt 0 ]; then\n            sorted_list+=( \"$i\" )\n        else\n\
    \            num_spaces=\"${#sorted_list[*]}\"\n            if [ $num_spaces -ne\
    \ 0 ]; then\n                last_key=${sorted_list[$((num_spaces-1))]}\n    \
    \        fi\n            sorted_list+=( \"$last_key\" )\n        fi\n    done\n\
    \n    echo \"${sorted_list[*]}\"\n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp95ik0awy.sh: line 25: [: too many arguments

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ IFS=\" \"\n  local list=\"$1\"\n  local min\n  local max\n  local tmp\n  min=${list[0]}\n\
    \  max=${list[${#list[@]} - 1]}\n  shift\n  shift\n\n  while [ \"${#list[@]}\"\
    \ -gt 0 ] ; do\n    tmp=${list[0]}\n    list=(\"${list[@]:1}\")\n    # If the\
    \ numbers are equal, swap the minimum and maximum\n    if [ \"${min}\" = \"${max}\"\
    \ ]; then\n      tmp=${min}\n      min=${max}\n      max=tmp\n      shift\n  \
    \    continue\n    fi\n\n    while (( ${#list[@]} > 0 )); do\n      local cur=${list[0]}\n\
    \      list=(\"${list[@]:1}\")\n      # swap the minimum\n      if [ \"${min}\"\
    \ = \"${cur}\" ]; then\n        tmp=${min}\n        min=${cur}\n        cur=${tmp}\n\
    \      fi\n      # swap the maximum\n      if [ \"${max}\" = \"${cur}\" ]; then\n\
    \        tmp=${max}\n        max=${cur}\n        cur=${tmp}\n      fi\n    done\n\
    \  done\n\n  echo \"$min$max\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ line\n  local lines\n\n  lines=$( echo \"$1\" | tr -s \" \" )\n  lines=$(echo\
    \ \"$lines\" | sed -e 's/^[[:space:]]*//' )\n  lines=$(echo \"$lines\" | sed -e\
    \ 's/[[:space:]]*$//' )\n  lines=$(echo \"$lines\" | sed -e 's/[[:space:]]*$//'\
    \ )\n\n  lines=$(echo \"$lines\" | sed -e 's/^[[:space:]]*//' )\n\n  lines=$(\
    \ echo \"$lines\" | sed -e 's/^[[:space:]]*//' )\n\n  lines=$(echo \"$lines\"\
    \ | sed -e 's/[[:space:]]*$//' )\n\n  lines=$(echo \"$lines\" | sed -e 's/[[:space:]]*$//'\
    \ )\n\n  lines=$(echo \"$lines\" | sed -e 's/^[[:space:]]*//' )\n\n  lines=$(echo\
    \ \"$lines\" | sed -e 's/^[[:space:]]*//' )\n\n  lines=$(echo \"$lines\" | sed\
    \ -e 's/^[[:space:]]*//' )\n\n  lines=$(echo \"$lines\" | sed -e 's/^[[:space:]]*//'\
    \ )\n\n  lines=$(echo \"$lines\" | sed -e 's/^[[:space:]]*//' )\n\n  lines=$(echo\
    \ \"$lines\" | sed -e 's/^[[:space:]]*//' )\n\n  lines=$(echo \"$lines\" | sed\
    \ -e 's/^[[:space:]]*//' )\n\n  lines=$(echo \"$lines\" | sed -e 's/^[[:space:]]*//'\
    \ )\n\n  lines=$(echo \"$lines\" | sed -e 's/^[[:space:]]*//' )\n\n  lines=$(echo\
    \ \"$lines\" | sed -e 's/^[[:space:]]*//' )\n\n  lines=$(echo \"$lines\" | sed\
    \ -e 's/^[[:space:]]*//' )\n\n  lines=$(echo \"$lines\" | sed -e 's/^[[:space:]]*//'\
    \ )\n\n  lines=$(echo \"$lines\" | sed -e 's/^[[:space:]]*//' )\n\n  lines=$(echo\
    \ \"$lines\" | sed -e 's/^[[:space:]]*//' )\n\n  lines=$(echo \"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpymeosmhd.sh: line 76: unexpected EOF while looking for matching
    `"''

    /tmp/tmpymeosmhd.sh: line 80: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ sorted_list\n  sorted_list=$@\n  local tmp_list\n  tmp_list=($(strange_sort_list_helper\
    \ \"${sorted_list}\"))\n  # echo \"${tmp_list}\" | tr \" \" \"\\n\"\n  echo \"\
    ${tmp_list}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpamwmzvbq.sh: line 18: strange_sort_list_helper: command not found

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list string\n  list=\"$1\"\n\n  # Strip out all spaces within the list.\n  #\
    \ \"list =\" \"1 2 3 4\" -->\n  #   list=\"1 2 3 4\"\n  list=\"${list// /}\"\n\
    \n  # Split the list on spaces.\n  # \"list =\" \"1 2 3 4\" -->\n  #   list=\"\
    1\"\n  #   list=\"2\"\n  #   list=\"3\"\n  #   list=\"4\"\n  list=\"${list/ /}\"\
    \n\n  # Remove quotes from the list.\n  # \"list =\" \"1 2 3 4\" -->\n  #   list=\"\
    1 2 3 4\"\n  list=\"${list//\\\"/}\"\n\n  # If there is only one item in the list,\
    \ return it without quotes.\n  # \"list =\" \"1 2 3 4\" -->\n  #   list=\"1 2\
    \ 3 4\"\n  #   list=1 2 3 4\n  if [ \"${#list}\" -eq 1 ]; then\n    string=\"\
    ${list}\"\n  else\n    string=$(echo $list | tr \" \" \"\\n\")\n  fi\n\n  # Sort\
    \ and remove quotes from the list to give a list\n  # of strings.  This gives\
    \ a list that looks like\n  # this \"string =\" \"1 2 3 4\"\n  string=$(echo $string\
    \ | tr \" \" \"\\n\" | sort -n | sed 's/^\"//' | sed 's/\"$//')\n\n  # Finally,\
    \ return the final list sorted by string value.\n  # \"string =\" \"1 2 3 4\"\n\
    \  #   list=\"1 2 3 4\"\n  #   list=\"1 2 3 4\"\n  #   list=\"1 2 3 4\"\n  # \
    \  list=\"1 2 3 4\"\n  echo $string\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ int_list=$1\n\n  sort <<< \"$int_list\" | sed -re 's/ ([0-9])/-\\1/g'\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ i str maxval maxi\n    local str2 str3\n    str=\"$1\"\n    local maxval1=$($(echo\
    \ \"$str\" | tr \" \" \"\\n\" | sort -n | head -1 | tr -d \"\\n\"))\n    maxval2=$($(echo\
    \ \"$str\" | tr \" \" \"\\n\" | sort -n | head -2 | tr -d \"\\n\"))\n    maxi=$($(echo\
    \ \"$str\" | tr \" \" \"\\n\" | sort -n | head -3 | tr -d \"\\n\"))\n    maxval3=$($(echo\
    \ \"$str\" | tr \" \" \"\\n\" | sort -n | head -4 | tr -d \"\\n\"))\n    local\
    \ str1\n    local str4\n    local str5\n    local str6\n    str1=$($(echo \"$str\"\
    \ | tr \" \" \"\\n\" | sort -n | tail -1 | tr -d \"\\n\"))\n    str4=$($(echo\
    \ \"$str\" | tr \" \" \"\\n\" | sort -n | tail -2 | tr -d \"\\n\"))\n    str5=$($(echo\
    \ \"$str\" | tr \" \" \"\\n\" | sort -n | tail -3 | tr -d \"\\n\"))\n    str6=$($(echo\
    \ \"$str\" | tr \" \" \"\\n\" | sort -n | tail -4 | tr -d \"\\n\"))\n    # Sort\
    \ each of the \"pieces\" of the string separately.\n    # Put \"pieces\" together.\n\
    \    local str7\n    if [ \"$str1\" -gt \"$maxval1\" ]; then\n        str7=\"\\\
    \"$str1\\\"\"\n    elif [ \"$str1\" -eq \"$maxval1\" ]; then\n        str7=\"\\\
    \"$maxi\\\"\"\n    else\n        str7=\"\\\"$str4\\\"\"\n    fi\n    if [ \"$str2\"\
    \ -gt \"$maxval2\" ]; then\n        str7=\"$str7 \\\"$str2\\\"\"\n    elif [ \"\
    $str2\" -eq \"$maxval2\" ]; then\n        str7=\"$str7 \\\"$maxi\\\"\"\n    else\n\
    \        str7=\"$str7 \\\"$maxi\\\"\"\n    fi\n    if [ \"$str3\" -gt \"$maxval3\"\
    \ ]; then\n        str7=\"$str7 \\\"$str3\\\"\"\n    elif [ \"$str3\" -eq \"$maxval3\"\
    \ ]; then\n        str7=\"$str7 \\\"$maxi\\\"\"\n    else\n        str7=\"$str7\
    \ \\\"$maxi\\\"\"\n    fi\n    # Put pieces together.\n    local str8\n    str8=\"\
    $maxi $maxval1 $maxval2 $maxval3 $str7 $str6\"\n    if \n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp13p91vyc.sh: line 58: syntax error near unexpected token `}''

    /tmp/tmp13p91vyc.sh: line 58: `}''

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ string=\"${1:-}\"\n    string=\"$(echo \"${string}\" | sed -e 's/^ *//' -e 's/\
    \ *$//')\"\n    local max=\"\"\n    local min=\"\"\n    local output=\"\"\n  \
    \  local counter=0\n    local j=0\n    local j2=1\n\n    while [ \"${#string}\"\
    \ -gt 0 ]; do\n        counter=$((counter+1))\n        if [ \"${#string}\" -gt\
    \ \"$counter\" ]; then\n            j=$((j+1))\n        fi\n\n        max=\"${max}\\\
    \"${string:$j}\\\"${string:$((j+1))}\\\"\"\n        min=$(echo \"${string}\" |\
    \ sed -e \"s/${max}$/${min}\\\"${string:$((j+2))}\\\"${string:$((j+1))}\\\"/\"\
    \ -e \"s/${min}$/${min}\\\"${string:$((j))}\\\"${string:$((j+1))}\\\"/\" -e \"\
    s/${max}$/${max}\\\"${string:$((j+2))}\\\"/\" -e \"s/${min}$/${min}\\\"${string:$((j))}\\\
    \"/\" -e \"s/${max}$/${max}\\\"${string:$((j+1))}\\\"/\" -e \"s/${min}$/${min}\\\
    \"${string:$((j))}\\\"/\")\n        string=\"$(echo \"${string}\" | sed -e \"\
    s/${max}$/${max}\\\"${string:$((j+1))}\\\"/\" -e \"s/${min}$/${min}\\\"${string:$((j))}\\\
    \"/\" -e \"s/${max}$/${max}\\\"${string:$((j+2))}\\\"/\" -e \"s/${min}$/${min}\\\
    \"${string:$((j))}\\\"/\" -e \"s/${max}$/${max}\\\"${string:$((j+1))}\\\"/\" -e\
    \ \"s/${min}$/${min}\\\"${string:$((j))}\\\"/\")\n        j=$((j+2))\n       \
    \ j2=$((j2+1))\n    done\n\n    echo \"${min}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9hopxthn.sh: line 54: unexpected EOF while looking for matching
    `"''

    /tmp/tmp9hopxthn.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ ls=$1\n  local sort\n  sort --field-separator=\"$( IFS=$'\\n' read -d '' ''\
    \ )\" \\\n    --key=1 --key=$( printf '%q\\n' \"$( IFS=$'\\n' read -d '' '' )\"\
    \ )\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0o07n51w.sh: line 18: read: `'': not a valid identifier

    /tmp/tmp0o07n51w.sh: line 18: read: `'': not a valid identifier

    sort: empty tab

    '
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ input=$1\n  local output=\"\"\n\n  # $1 is empty or contains only whitespace\n\
    \  if [ -z \"$input\" ] ; then\n    return \"\"\n  fi\n  \n  local i\n  for i\
    \ in $input ; do\n    local temp=\"$output\"\n    temp=\"${temp} \\\"$i\\\"\"\n\
    \    output=\"${temp% }\"\n  done\n  output=\"${output% }\"\n  \n  # Remove leading\
    \ space\n  output=\"${output#* }\"\n  \n  # Remove trailing space\n  output=\"\
    ${output% *}\"\n  \n  echo \"$output\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660059346
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    sort\
    \ -n \"$1\" | sed 's/^/'\"$1\"'/;/^[^ ]/ s/ //'\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: ''1 2 3 4'': No such file or directory

    '
  stdout: ''
  timestamp: 1660059346
