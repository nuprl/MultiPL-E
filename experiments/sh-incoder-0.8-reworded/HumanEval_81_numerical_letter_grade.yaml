name: HumanEval_81_numerical_letter_grade
language: sh
prompt: "#!/bin/bash\n# It is the last week of the semester and the teacher has to\
  \ give the grades\n# to students. The teacher has been making her own algorithm\
  \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
  # She has given you a list of GPAs for some students and you have to write \n# a\
  \ function that can output a list of letter grades using the following table:\n\
  # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A\
  \ \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7             \
  \   B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
  \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7       \
  \         D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>>\
  \ $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"C\"\
  ', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n"
tests: "}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
  \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
  \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B\
  \ B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
completions: ["    local numerical_gpa\n    local grades\n    local grade\n    local\
    \ result\n    numerical_gpa=\"${1#*GPA}\"\n    grades=(\"${1//GPA/ }\")\n    for\
    \ grade in \"${grades[@]}\"; do\n        result=\"$result$(($grade+3))/$(($grade+2))\"\
    \n    done\n    echo \"$result\"", "    local letter=$1\n    local gpa=$2\n  \
    \  if [[ ${gpa:0:1} == \"+\" ]]; then\n        letter+=\"+\"\n    elif [[ ${gpa:0:1}\
    \ == \"-\" ]]; then\n        letter+=\"-\"\n    fi\n    letter+=\"'\"\n    letter+=$((${letter:1}*9))\n\
    \    letter+=\"'\"\n    letter+=$((${letter:1}*4))\n    letter+=\"'\"\n    letter+=$((${letter:1}*3))\n\
    \    letter+=\"'\"\n    letter+=$((${letter:1}*2))\n    letter+=\"'\"\n    letter+=$((${letter:1}))\n\
    \    letter+=\"'\"\n    letter+=$((${letter:1}*1))\n    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n\
    \    letter+=\"'\"\n    letter+=$((${letter:1}))\n    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n\
    \    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n\
    \    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n\
    \    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n\
    \    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n\
    \    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n\
    \    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n\
    \    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n\
    \    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n    letter+=\"'\"\n    letter+=$((${letter:1}*0))\n\
    \    letter+=\"'\"\n    letter+", "    local a b c d e\n    IFS=$' \\t\\n'\n \
    \   a=$(echo $1 | cut -d \" \" -f1)\n    b=$(echo $1 | cut -d \" \" -f2)\n   \
    \ c=$(echo $1 | cut -d \" \" -f3)\n    d=$(echo $1 | cut -d \" \" -f4)\n    e=$(echo\
    \ $1 | cut -d \" \" -f5)\n    local i\n    for ((i = 0; i < ${#a}; i++)); do\n\
    \        if [[ ${a[i]} -le $b ]]; then\n            if [[ ${a[i + 3]} -le $c ]];\
    \ then\n                if [[ ${a[i + 6]} -le $d ]]; then\n                  \
    \  if [[ ${a[i + 9]} -le $e ]]; then\n                        echo \"$(a[i + 1])\"\
    \n                    fi\n                fi\n            fi\n        fi\n   \
    \ done", "    local gpa=( $1 )\n    local grade=( A B C D )\n    local index=0\n\
    \    local grade_array=()\n    for grade in \"${grade[@]}\"; do\n        if [[\
    \ \"${grade}\" == \">\" ]]; then\n            grade_array[$index]=\"${grade}\"\
    \n            index=$((index+1))\n        elif [[ \"${grade}\" == \"<\" ]]; then\n\
    \            grade_array[$index]=\"${grade}\"\n            index=$((index+1))\n\
    \        else\n            grade_array[$index]=\"${grade}\"\n            index=$((index+1))\n\
    \        fi\n    done\n    for gpa in \"${gpa[@]}\"; do\n        if [[ $(gpa_to_letter\
    \ \"${gpa}\") == \"A+\" ]]; then\n            grade_array[1]=\"${grade}\"\n  \
    \      fi\n        if [[ $(gpa_to_letter \"${gpa}\") == \"B+\" ]]; then\n    \
    \        grade_array[2]=\"${grade}\"\n        fi\n        if [[ $(gpa_to_letter\
    \ \"${gpa}\") == \"C+\" ]]; then\n            grade_array[3]=\"${grade}\"\n  \
    \      fi\n        if [[ $(gpa_to_letter \"${gpa}\") == \"C\" ]]; then\n     \
    \       grade_array[4]=\"${grade}\"\n        fi\n        if [[ $(gpa_to_letter\
    \ \"${gpa}\") == \"A-\" ]]; then\n            grade_array[5]=\"${grade}\"\n  \
    \      fi\n        if [[ $(gpa_to_letter \"${gpa}\") == \"B-\" ]]; then\n    \
    \        grade_array[6]=\"${grade}\"\n        fi\n        if [[ $(gpa_to_letter\
    \ \"${gpa}\") == \"C-\" ]]; then\n            grade_array[7]=\"${grade}\"\n  \
    \      fi\n        if [[ $(gpa_to_letter \"${gpa}\") == \"D+\" ]]; then\n    \
    \        grade_array[8]=\"${grade}\"\n        fi\n        if [[ $(gpa_to_letter\
    \ \"${gpa}\") == \"D\" ]]; then\n            grade_array[9]=\"${grade}\"\n   \
    \     fi\n        if [[ $(gpa_to_letter \"${gpa}\") == \"D-\" ]]; then\n     \
    \       grade_array[10]=\"${grade}\"\n        fi\n        if [[ $(gpa_to_letter\
    \ \"${gpa}\") == \"E\" ]]; then\n            grade_array[11]=\"${grade}\"\n  \
    \      fi\n    done\n    for (( index=0; index<10; index++ )); do\n        if\
    \ [[ \"${grade_array[index]}\" != \"\" ]]; then\n            echo \"${grade_array[index]}\"\
    \ >> grade_list.txt\n        fi\n    done", "    # $1 is the list of GPAs, each\
    \ number seperated by a space\n    local num_grades=$1 \n    # $2 is the letter\
    \ grade of the student\n    local letter=$2\n    local final_grade\n    # Loop\
    \ to grade every student and collect their grade\n    for ((i=0; i<${#num_grades[@]};\
    \ i++))\n    do\n        ((j=0; j<${#letter[@]}; j++))\n        ((k=j+i))\n  \
    \      ((sum=$num_grades[k]+${letter[j]}))\n        final_grade[k]=${letter[j]}${letter[j]}${letter[j]}${letter[j]}\n\
    \    done\n    echo ${final_grade[@]}", "    local numerical_grade=\"$1\"\n\n\
    \    local numerical_grade_array=($numerical_grade)\n    local numerical_letter_grade_array=()\n\
    \n    for element in ${numerical_grade_array[@]}; do\n        if [[ $element -gt\
    \ $max_gpa_value ]]; then\n            echo \"ERROR: Invalid GPA value '${numerical_grade}'\"\
    \n            exit 1\n        fi\n        if [[ \"$element\" -gt 4.0 ]]; then\n\
    \            local letter_grade=\"A+\"\n        elif [[ \"$element\" -ge 3.7 ]];\
    \ then\n            local letter_grade=\"A\"\n        elif [[ \"$element\" -ge\
    \ 3.3 ]]; then\n            local letter_grade=\"A-\"\n        elif [[ \"$element\"\
    \ -ge 3.0 ]]; then\n            local letter_grade=\"B+\"\n        elif [[ \"\
    $element\" -ge 2.7 ]]; then\n            local letter_grade=\"B\"\n        elif\
    \ [[ \"$element\" -ge 2.3 ]]; then\n            local letter_grade=\"B-\"\n  \
    \      elif [[ \"$element\" -ge 2.0 ]]; then\n            local letter_grade=\"\
    C+\"\n        elif [[ \"$element\" -ge 1.7 ]]; then\n            local letter_grade=\"\
    C\"\n        elif [[ \"$element\" -ge 1.3 ]]; then\n            local letter_grade=\"\
    C-\"\n        elif [[ \"$element\" -ge 1.0 ]]; then\n            local letter_grade=\"\
    D+\"\n        elif [[ \"$element\" -ge 0.7 ]]; then\n            local letter_grade=\"\
    D\"\n        elif [[ \"$element\" -ge 0.0 ]]; then\n            local letter_grade=\"\
    D-\"\n        else\n            local letter_grade=\"E\"\n        fi\n\n     \
    \   numerical_letter_grade_array+=(${letter_grade})\n    done\n\n    echo \"${numerical_letter_grade_array[@]}\"",
  "  # split into separate variables\n  grades=(\"${1//./ }\")\n  gpa=${grades[0]}\n\
    \  grades[0]=${grades[0]:(-1)}\n  grades[1]=${grades[1]:(-1)}\n  grades[2]=${grades[2]:(-1)}\n\
    \n  # sort alphabetically\n  grades=( $(eval echo \"\\\\\\$(printf '%s\\n' \"\
    ${grades[@]}\" | sort)\") )\n\n  # find out if there are too many or too few grades\n\
    \  if [ \"${#grades[@]}\" -lt 2 ]; then \n    # all grades were zero, so print\
    \ A\n    grades=( A )\n  elif [ \"${#grades[@]}\" -gt 4 ]; then \n    # some grades\
    \ were zero and some were not, so \n    # print letter grade based on GPA\n  \
    \  grades=( $(grade_equation \"${gpa}\" ) )\n  else\n    # some grades are zero\
    \ and some are not, so print letter grade based on GPA\n    grades=( $(grade_equation\
    \ \"${gpa}\" ) )\n  fi\n\n  # join grades together\n  grades=( $(printf '%s\\\
    n' \"${grades[@]}\" ) )\n\n  # add quotes\n  grades=( $(eval \"printf '\\\"%s\\\
    \"' \"${grades[@]}\") )\n  \n  # remove quotes\n  grades=( $(eval \"printf '%(%s)'\
    \ \"${grades[@]}\") )\n\n  echo \"${grades[@]}\"", "  # Write your code here\n\
    \  grades=$( echo \"$1\" | tr -s ' ' | sed 's/,/\" \"/g' ) # replace commas with\
    \ spaces\n  grades=$( echo \"$grades\" | sed 's/\\(.*\\)\\(.*\\)\\(.*\\)/\\2/'\
    \ )\n  grades=$( echo \"$grades\" | sed 's/\\(.*\\)\\(.*\\)/\\1/' )\n  grades=$(\
    \ echo \"$grades\" | sed 's/\\([0-9]*\\.[0-9]*\\)\\(.*\\)/\\1/' )\n  grades=$(\
    \ echo \"$grades\" | sed 's/\\([0-9]*\\)\\(.*\\)/\\1/' )\n  grades=$( echo \"\
    $grades\" | sed 's/\\(.*\\)\\([0-9]*\\)\\(.*\\)/\\2/' )\n  grades=$( echo \"$grades\"\
    \ | sed 's/\\(.*\\)\\([0-9]*\\.[0-9]*\\)\\(.*\\)/\\2/' )\n  grades=$( echo \"\
    $grades\" | sed 's/\\(.*\\)\\([0-9]*\\.[0-9]*\\)\\([0-9]*\\.[0-9]*\\)\\(.*\\)/\\\
    2/' )\n  grades=$( echo \"$grades\" | sed 's/\\(.*\\)\\([0-9]*\\.[0-9]*\\)\\([0-9]*\\\
    .[0-9]*\\)\\([0-9]*\\.[0-9]*\\)\\(.*\\)/\\2/' )\n  grades=$( echo \"$grades\"\
    \ | sed 's/\\(.*\\)\\([0-9]*\\.[0-9]*\\)\\([0-9]*\\.[0-9]*\\)\\([0-9]*\\.[0-9]*\\\
    )\\([0-9]*\\.[0-9]*\\)\\(.*\\)/\\2/' )\n  grades=$( echo \"$grades\" | sed 's/\\\
    (.*\\)\\([0-9]*\\.[0-9]*\\)\\([0-9]*\\.[0-9]*\\)\\([0-9]*\\.[0-9]*\\)\\([0-9]*\\\
    .[0-9]*\\)\\([0-9]*\\.[0-9]*\\)\\(.*\\)/\\2/' )\n  grades=$( echo \"$grades\"\
    \ | sed 's/\\(.*\\)\\([0-9]*\\.[0-9]*\\)\\([0-9]*\\.[0-9]*\\)\\([0-9]*\\.[0-9]*\\\
    )\\([0-9]*\\.[0-9]*\\)\\([0-9]*\\.[0-9]*\\)\\([0-9]*\\.[0-9]*\\)\\(.*\\)/\\2/'\
    \ )\n  grades=$( echo \"$grades\" | sed 's/\\(.*\\)\\([0-9]*\\.[0-9]*\\)\\([0-9]*\\\
    .[0-9]*\\)\\([0-9]*\\.[0-9]*\\)\\([0-9]*\\.[0-9]*\\", "    gpa=$1\n    numerical_gpa=$(echo\
    \ $gpa | cut -d \".\" -f 1)\n    numerical_gpabits=$(echo $gpa | cut -d \".\"\
    \ -f 1)\n    numerical_gpabits=${numerical_gpabits:0:1}\n    numerical_gpabits=$(printf\
    \ \"%02d\" $numerical_gpabits)\n    if [[ ${numerical_gpabits} -le 18 ]]; then\n\
    \        numerical_lettergrade=\"A+\"\n    elif [[ ${numerical_gpabits} -le 26\
    \ ]]; then\n        numerical_lettergrade=\"A\"\n    elif [[ ${numerical_gpabits}\
    \ -le 30 ]]; then\n        numerical_lettergrade=\"A-\"\n    elif [[ ${numerical_gpabits}\
    \ -le 34 ]]; then\n        numerical_lettergrade=\"B+\"\n    elif [[ ${numerical_gpabits}\
    \ -le 38 ]]; then\n        numerical_lettergrade=\"B\"\n    elif [[ ${numerical_gpabits}\
    \ -le 42 ]]; then\n        numerical_lettergrade=\"B-\"\n    elif [[ ${numerical_gpabits}\
    \ -le 46 ]]; then\n        numerical_lettergrade=\"C+\"\n    elif [[ ${numerical_gpabits}\
    \ -le 50 ]]; then\n        numerical_lettergrade=\"C\"\n    elif [[ ${numerical_gpabits}\
    \ -le 54 ]]; then\n        numerical_lettergrade=\"C-\"\n    elif [[ ${numerical_gpabits}\
    \ -le 58 ]]; then\n        numerical_lettergrade=\"D+\"\n    elif [[ ${numerical_gpabits}\
    \ -le 62 ]]; then\n        numerical_lettergrade=\"D\"\n    elif [[ ${numerical_gpabits}\
    \ -le 66 ]]; then\n        numerical_lettergrade=\"D-\"\n    elif [[ ${numerical_gpabits}\
    \ -le 70 ]]; then\n        numerical_lettergrade=\"E\"\n    else\n        echo\
    \ \"The given grade is outside the grades limits\"\n        exit 1\n    fi\n \
    \   echo \"$numerical_lettergrade\"", "  local grades\n  grades=\"$1\"\n  echo\
    \ \"$grades\" | awk -F '[> ]' '{for(i=1; i<=NF; i++) if($i>3.0 && $i<3.7) print\
    \ \"A+\" else if($i>=3.7 && $i<3.3) print \"B+\" else if($i>=3.3 && $i<3.0) print\
    \ \"B-\" else if($i>=3.0 && $i<3.7) print \"B\" else if($i>=3.7 && $i<3.3) print\
    \ \"B\" else if($i>=3.3 && $i<3.0) print \"B+\" else if($i>=3.0 && $i<3.7) print\
    \ \"C+\" else if($i>=3.7 && $i<3.3) print \"C\" else if($i>=3.3 && $i<3.0) print\
    \ \"C-\" else if($i>=3.0 && $i<3.7) print \"C\" else if($i>=3.7 && $i<3.3) print\
    \ \"C+\" else if($i>=3.3 && $i<3.0) print \"C-\" else if($i>=3.0 && $i<3.7) print\
    \ \"C\" else if($i>=3.7 && $i<3.3) print \"C+\" else if($i>=3.3 && $i<3.0) print\
    \ \"C-\" else if($i>=3.0 && $i<3.7) print \"C\" else if($i>=3.7 && $i<3.3) print\
    \ \"C+\" else if($i>=3.3 && $i<3.0) print \"C-\" else if($i>=3.0 && $i<3.7) print\
    \ \"C\" else if($i>=3.7 && $i<3.3) print \"C+\" else if($i>=3.3 && $i<3.0) print\
    \ \"C-\" else if($i>=3.0 && $i<3.7) print \"C\" else if($i>=3.7 && $i<3.3) print\
    \ \"C+\" else if($i>=3.3 && $i<3.0) print \"C-\" else if($i>=3.0 && $i<3.7) print\
    \ \"C\" else if($i>=3.7 && $i<3.3) print \"C+\" else if($i>=3.3 && $i<3.0) print\
    \ \"C-\" else if($i>=3.0 && $i<3.7) print \"C\" else if($i>=3.7 && $i<3.3) print\
    \ \"C+\" else if($i>=3.3 && $i<3.0) print \"C-\" else if($i>=3.0 && $i<3.7) print\
    \ \"C\" else if($i>=3.7 && $i<3.3) print \"C+\" else if($i>=3.3 && $i<3.0) print\
    \ \"C-\" else if($i>=3.0 && $i<3.7) print \"C\" else if($i>=3.7 && $i<3.3) print\
    \ \"C+\" else if(", "    local grades=($(grade_equation $1))\n    local max_grade=$(echo\
    \ $grades | awk '{if($1<3.7) return \"A+\"; if($1<3.3) return \"A\"; if($1<3.0)\
    \ return \"B+\"; if($1<2.7) return \"B\"; if($1<2.3) return \"B-\"; if($1<2.0)\
    \ return \"C+\"; if($1<1.7) return \"C\"; if($1<1.3) return \"C-\"; if($1<1.0)\
    \ return \"D+\"; if($1<0.7) return \"D\"; if($1<0.0) return \"D-\"; return \"\
    E\"}')\n    local grades_sorted=$(printf \"%s\\n\" \"${grades[@]}\" | awk -v max_grade=\"\
    ${max_grade}\" '{ print $1\" \"$2-max_grade}')\n    echo ${grades_sorted[@]}",
  "    local numerical\n    local grade_list\n    # Read all the numbers from the\
    \ file\n    while IFS= read -r line; do\n        numerical=\"$line\"\n       \
    \ grade_list+=\"$(grade_equation \"$numerical\")\"\n    done < \"$1\"\n\n    #\
    \ Output the list\n    echo \"$grade_list\"", "  # This part is commented out\
    \ because I only test the function with the \n  # example input given in the comments.\n\
    \  # for i in $(seq 1 $#);do\n  #   printf \"$2\\n\" >> grade_grades\n  #   g=`echo\
    \ \"scale=2;$i/$2\"|bc -l`\n  #   let \"g*=100\"\n  #   printf \"%.2f\"  g|bc\
    \ >> grade_grades\n  # done\n  for i in $(seq 1 $#);do\n    g=`echo \"scale=2;$i/$2\"\
    |bc -l`\n    let \"g*=100\"\n    echo $g\n  done", "  local gpa=$1\n  local numbers=$2\n\
    \  local lettergrade\n  local count\n  \n  local n\n  for n in ${numbers}; do\n\
    \    count=0;\n    while [ $count -lt $(( $n / 10 )) ]; do\n      (( ++count));\n\
    \    done\n    (( n %= 10 ));\n    lettergrade=`expr $gpa + \\( 10 * $count \\\
    ) `\n    if [ $n -gt 0 ]; then\n      lettergrade+=\"-\";\n    fi\n    lettergrade+=\"\
    +\";\n    lettergrade+=\"'$n'\";\n    echo -n $lettergrade;\n  done", "   local\
    \ grades=$1;\n   local gpas=$2\n   local index=$3\n   local grade letter\n   for\
    \ (( index=0; index<${#grades}; index++ )); do\n      if [[ ${grades[$index]}\
    \ =~ ^[0-9]+\\.[0-9]+$ ]]; then\n         grade=${grades[$index]};\n      else\n\
    \         grade=\"0.0\";\n      fi\n      for (( index=0; index<${#gpas}; index++\
    \ )); do\n         if [[ \"${gpas[$index]}\" =~ ^[0-9]+\\.[0-9]+$ ]]; then\n \
    \           gpa=${gpas[$index]};\n         else\n            gpa=\"0.0\";\n  \
    \       fi\n         if [[ \"${grade}\" = \"0.0\" && \"${gpa}\" =~ ^[0-9]+\\.[0-9]+$\
    \ ]]; then\n            break;\n         elif [[ \"${gpa}\" = \"0.0\" && \"${grade}\"\
    \ =~ ^[0-9]+\\.[0-9]+$ ]]; then\n            break;\n         elif (( \"${grade}\"\
    \ >= \"${gpa}\" )); then\n            letter=\"A+\";\n         elif (( \"${grade}\"\
    \ > \"${gpa}\" )); then\n            letter=\"A\";\n         elif (( \"${grade}\"\
    \ < \"${gpa}\" )); then\n            letter=\"A-\";\n         elif (( \"${grade}\"\
    \ < \"${gpa}\" )); then\n            letter=\"B+\";\n         elif (( \"${grade}\"\
    \ > \"${gpa}\" )); then\n            letter=\"B\";\n         elif (( \"${grade}\"\
    \ < \"${gpa}\" )); then\n            letter=\"B-\";\n         elif (( \"${grade}\"\
    \ < \"${gpa}\" )); then\n            letter=\"C+\";\n         elif (( \"${grade}\"\
    \ > \"${gpa}\" )); then\n            letter=\"C\";\n         elif (( \"${grade}\"\
    \ < \"${gpa}\" )); then\n            letter=\"C-\";\n         elif (( \"${grade}\"\
    \ < \"${gpa}\" )); then\n            letter=\"D+\";\n         elif (( \"${grade}\"\
    \ > \"${gpa}\" )); then\n            letter=\"D\";\n         elif (( \"${grade}\"\
    \ < \"${gpa}\" )); then\n            letter=\"D-\";\n         elif (( \"${grade}\"\
    \ > \"${gpa}\" )); then\n            letter=\"E\";\n         else\n          \
    \  letter=\"E\";\n         fi\n         echo \"${gpa}:${letter}\";\n      done\n\
    \   done", "    local numerical_grade letter\n    numerical_grade=$1\n    local\
    \ gpa\n    local grade_array\n    grade_array=$(echo $numerical_grade | tr -s\
    \ ' ')\n    numerical_grade=$(echo $numerical_grade | tr -s ' ' | cut -d' ' -f1)\n\
    \    gpa=$(echo $numerical_grade | cut -d'.' -f1)\n    for (( i = 0; i < ${#grade_array[@]};\
    \ i++ )); do\n        gpa=$(echo $grade_array[$i] | cut -d'.' -f1)\n        if\
    \ [[ \"$gpa\" -ge 3.0 && \"$gpa\" -le 4.0 ]]; then\n            letter='A+'\n\
    \        elif [[ \"$gpa\" -ge 3.7 && \"$gpa\" -le 3.9 ]]; then\n            letter='A'\n\
    \        elif [[ \"$gpa\" -ge 3.3 && \"$gpa\" -le 3.7 ]]; then\n            letter='A-'\n\
    \        elif [[ \"$gpa\" -ge 3.0 && \"$gpa\" -le 3.3 ]]; then\n            letter='B+'\n\
    \        elif [[ \"$gpa\" -ge 2.7 && \"$gpa\" -le 2.9 ]]; then\n            letter='B'\n\
    \        elif [[ \"$gpa\" -ge 2.3 && \"$gpa\" -le 2.7 ]]; then\n            letter='B-'\n\
    \        elif [[ \"$gpa\" -ge 2.0 && \"$gpa\" -le 2.3 ]]; then\n            letter='C+'\n\
    \        elif [[ \"$gpa\" -ge 1.7 && \"$gpa\" -le 1.9 ]]; then\n            letter='C'\n\
    \        elif [[ \"$gpa\" -ge 1.3 && \"$gpa\" -le 1.7 ]]; then\n            letter='C-'\n\
    \        elif [[ \"$gpa\" -ge 1.0 && \"$gpa\" -le 1.3 ]]; then\n            letter='D+'\n\
    \        elif [[ \"$gpa\" -ge 0.7 && \"$gpa\" -le 1.0 ]]; then\n            letter='D'\n\
    \        elif [[ \"$gpa\" -ge 0.0 && \"$gpa\" -le 0.7 ]]; then\n            letter='D-'\n\
    \        else\n            letter='E'\n        fi\n        echo $letter\n    done",
  "  gpa=$(echo \"$1\" | tr ' ' ',')\n  gpa=${gpa%,}\n  gpa=${gpa#0}\n  gpa=$(echo\
    \ \"$gpa\" | awk '{print $1*$1}')\n  grades=()\n  letters=(\"A+\" \"A\" \"A-\"\
    \ \"B+\" \"B\" \"B-\" \"C+\" \"C\" \"C-\" \"D+\" \"D\" \"D-\")\n  for i in $gpa;\n\
    \  do\n    grades+=(\"$letters[$(( i % 5 ))]\")\n  done\n  echo \"${grades[*]}\"",
  "  local grade=$1\n  local grade2=$2\n\n  local GPA=$(( grade / 4.0 ))\n  local\
    \ letter_grade=\n  case \"$grade2\" in\n    [0-9]+) letter_grade=$(($GPA + $(($GPA\
    \ < 3.0 ) ? \"A+\" : ( $GPA < 3.7 ? \"A\" : ( $GPA < 3.3 ? \"A-\" : ( $GPA < 3.0\
    \ ? \"B+\" : ( $GPA < 2.7 ? \"B\" : ( $GPA < 2.3 ? \"B-\" : ( $GPA < 2.0 ? \"\
    C+\" : ( $GPA < 1.7 ? \"C\" : ( $GPA < 1.3 ? \"C-\" : ( $GPA < 1.0 ? \"D+\" :\
    \ ( $GPA < 0.7 ? \"D\" : ( $GPA < 0.0 ? \"D-\" : (\"E\") ) ) ) ) ) ) ) ) ) ) )\
    \ ) )) )\n    ;;\n    *) echo \"ERROR: the GPA must be a number.\" 1>&2\n    ;;\n\
    \  esac\n  echo \"$letter_grade\"", "  local numerical_list=$1\n  local length=$((${#numerical_list}\
    \ / 2))\n\n  # The first element of the list is always greater than the first\
    \ element\n  # of the list, except for the case where the first element of the\
    \ list is 0 \n  if [[ ${numerical_list[0]} -le ${numerical_list[1]} ]]; then\n\
    \    echo -n \"${numerical_list[0]}\" | awk -F\\. '{print $2+1}' | xargs | sed\
    \ 's/\\.//'\n  else\n    echo -n \"${numerical_list[1]}\" | awk -F\\. '{print\
    \ $2+1}' | xargs | sed 's/\\.//'\n  fi", "  local grades=$1\n  local numerical_grades=$2\n\
    \  local letter grade=\n  while [[ $grades != *\"$\" ]]; do\n    let grades+=${grades/[./]}/\n\
    \    let numerical_grades+=${numerical_grades/[./]}/\n  done\n  while [[ \"$numerical_grades\"\
    \ != *\".\" ]] && [[ $numerical_grades != *\",\" ]]; do\n    let numerical_grades+=${numerical_grades/,/}\n\
    \  done\n  while [[ \"$grades\" != *\"$\" ]] && [[ $grades != *\",\" ]]; do\n\
    \    letter+=${grades/$/,}\n    grades=${grades/,/}\n  done\n  echo \"${letter}\"",
  "    local student_grade grade grades\n    grades=$2\n    grades=$(echo \"$grades\"\
    \ | sed 's/ /\\n/g')\n    grades=$(echo \"$grades\" | sed 's/[0-9]//g')\n    grades=$(echo\
    \ \"$grades\" | sed 's/\\.//g')\n    grades=$(echo \"$grades\" | sed 's/[^A-Za-z]//g')\n\
    \    for i in $(seq 0 $(( ${#grades} - 1 ))); do\n        grade=$(echo \"$grades\"\
    \ | awk -v i=\"$i\" '{print $i}')\n        student_grade=$(echo \"$grades\" |\
    \ awk -v i=\"$i\" '{print $(i+1)}')\n        if [ \"$student_grade\" -gt $grade\
    \ ]; then\n            grade=\"${grade}+\"\n        elif [ \"$student_grade\"\
    \ -lt $grade ]; then\n            grade=\"${grade}-\"\n        else\n        \
    \    grade=\"${grade}\"\n        fi\n    done\n    echo $grade", "\techo \"$1\"\
    |awk '{for(i=1;i<=NF;i++) if($i>2.0 && $i<3.0 && $i<=3.7) {printf $i\"+\"; next}};\
    \ {for(i=1;i<=NF;i++) if($i<2.0 && $i>=3.0 && $i>=3.7) {printf $i\"-\"; next}}'",
  "    local gpa=$1\n    local grades=()\n\n    while [[ $gpa != \"\" ]]\n    do\n\
    \        if [[ $gpa =~ ^([-+]?)(\\d+)\\.(\\d+)$ ]]\n        then\n           \
    \ local grade=$1\n            local gpa=$2\n            local gpa=$3\n       \
    \     if [[ $gpa -gt 0 ]]\n            then\n                grade+=\"+\"\n  \
    \          fi\n            if [[ $gpa -gt 3.7 ]]\n            then\n         \
    \       grade+=\"A\"\n            elif [[ $gpa -gt 3.3 ]]\n            then\n\
    \                grade+=\"A-\"\n            elif [[ $gpa -gt 3 ]]\n          \
    \  then\n                grade+=\"B+\"\n            elif [[ $gpa -gt 2.7 ]]\n\
    \            then\n                grade+=\"B\"\n            elif [[ $gpa -gt\
    \ 2.3 ]]\n            then\n                grade+=\"B-\"\n            elif [[\
    \ $gpa -gt 2 ]]\n            then\n                grade+=\"C+\"\n           \
    \ elif [[ $gpa -gt 1.7 ]]\n            then\n                grade+=\"C\"\n  \
    \          elif [[ $gpa -gt 1.3 ]]\n            then\n                grade+=\"\
    C-\"\n            elif [[ $gpa -gt 1 ]]\n            then\n                grade+=\"\
    D+\"\n            elif [[ $gpa -gt 0.7 ]]\n            then\n                grade+=\"\
    D\"\n            elif [[ $gpa -gt 0 ]]\n            then\n                grade+=\"\
    D-\"\n            fi\n            grades+=\"'$grade'\"\n        fi\n        gpa=$(echo\
    \ $gpa | cut -d \" \" -f 1)\n    done\n    echo ${grades[*]}", "\tfor i in $(\
    \ echo $1 | tr ' ' ',' ); do\n\t\tcase \"$i\" in\n\t\t[+-]?)\n\t\t\techo \"$(($i*3))+\"\
    ;;\n\t\t[<=>]?)\n\t\t\techo \"$(($i*2.5))-\";;\n\t\t*)\n\t\t\techo \"$(($i*2))+\"\
    ;;\n\t\tesac\n\tdone", "    local num_grades=$(cat)\n    local nums=$(cat <<<\
    \ $num_grades | grep -E \"^[[:digit:]]+$\")\n    local nums_sum=$(cat <<< $num_grades\
    \ | grep -E \"^[[:digit:]]+$\")\n    local gpas=$(cat <<< $num_grades | grep -E\
    \ \"^[[:digit:]]+$\")\n    local letter_grades=()\n    local current_grade\n \
    \   local gpa\n    local i=0\n    while read -r line; do\n        echo \"$line\"\
    \n        current_grade=$(cat <<< $line | grep -E \"^[[:digit:]]+$\")\n      \
    \  gpa=$(cat <<< $line | grep -E \"^[[:digit:]]+$\")\n        if [[ ${current_grade}\
    \ -lt ${gpas[i]} ]]; then\n            letter_grades=( \"${letter_grades[@]}\"\
    \ \"${gpas[i]}*\" )\n        elif [[ ${current_grade} -ge ${gpas[i]} ]]; then\n\
    \            if [[ ${gpas[i]} -gt ${nums_sum} ]]; then\n                letter_grades=(\
    \ \"${letter_grades[@]}\" \"${gpas[i]}+\" )\n            elif [[ ${gpas[i]} -lt\
    \ ${nums_sum} ]]; then\n                letter_grades=( \"${letter_grades[@]}\"\
    \ \"${gpas[i]}-\" )\n            else\n                letter_grades=( \"${letter_grades[@]}\"\
    \ \"${gpas[i]}\" )\n            fi\n        fi\n        (( i++ ))\n    done <<<\
    \ \"$nums\"\n    echo \"${letter_grades[@]}\"", "    local letter_grade=\"$(echo\
    \ \"$1\" | sed 's/ /\\+/g')\"\n    while [ \"$letter_grade\" != \"\" ]; do\n \
    \       letter_grade=\"$(echo \"$letter_grade\" | sed 's/[^0-9.]//g')\"\n    \
    \    case \"$letter_grade\" in\n            \"0\" ) echo \"E\"; break;;\n    \
    \        \"1\" ) echo \"A\"; break;;\n            \"2\" ) echo \"B\"; break;;\n\
    \            \"3\" ) echo \"C\"; break;;\n            \"4\" ) echo \"D+\"; break;;\n\
    \            \"5\" ) echo \"D\"; break;;\n            \"6\" ) echo \"D-\"; break;;\n\
    \            \"7\" ) echo \"C+\"; break;;\n            \"8\" ) echo \"C\"; break;;\n\
    \            \"9\" ) echo \"C-\"; break;;\n            \"+\" ) echo \"A+\"; break;;\n\
    \            \"-\" ) echo \"A-\"; break;;\n            \".\" ) echo \"0\"; break;;\n\
    \            ? ) echo \"ERROR\";;\n        esac\n    done", "    local i grade\
    \ gpa sum\n    grade=$1\n    sum=0\n    # Parse the grades\n    for ((i=1; i<${#grade[@]};\
    \ i++))\n    do\n        gpa=${grade[$i]}\n        # Check if gpa is greater or\
    \ equal to 4.0\n        if [ ${gpa} -ge 4 ]\n        then\n            grade=`expr\
    \ $gpa - 4`\n            # Check if gpa is lesser than 3.7\n            if [ ${grade}\
    \ -lt 3.7 ]\n            then\n                grade=\"A+\";\n            elif\
    \ [ ${grade} -lt 3.3 ]\n            then\n                grade=\"A\";\n     \
    \       elif [ ${grade} -lt 3 ]\n            then\n                grade=\"A-\"\
    ;\n            elif [ ${grade} -lt 2.7 ]\n            then\n                grade=\"\
    B+\";\n            elif [ ${grade} -lt 2.3 ]\n            then\n             \
    \   grade=\"B\";\n            elif [ ${grade} -lt 2 ]\n            then\n    \
    \            grade=\"B-\";\n            elif [ ${grade} -lt 1.7 ]\n          \
    \  then\n                grade=\"C+\";\n            elif [ ${grade} -lt 1.3 ]\n\
    \            then\n                grade=\"C\";\n            elif [ ${grade} -lt\
    \ 1 ]\n            then\n                grade=\"C-\";\n            elif [ ${grade}\
    \ -lt 0.7 ]\n            then\n                grade=\"D+\";\n            elif\
    \ [ ${grade} -lt 0.3 ]\n            then\n                grade=\"D\";\n     \
    \       elif [ ${grade} -lt 0 ]\n            then\n                grade=\"D-\"\
    ;\n            else \n                grade=\"E\";\n            fi\n         \
    \   echo \"${grade}\"\n        fi\n        sum=$((${sum}+${grade}))\n    done\n\
    \    echo \"$sum\"", "    local letter_grade\n    local sum=0\n    while [ \"\
    $1\" != \"\" ]; do\n        local grade=$1\n        local gpa=$2\n        if [\
    \ \"$grade\" -gt $gpa ]; then\n            local grade='B'\n        elif [ \"\
    $grade\" -lt $gpa ]; then\n            local grade='A'\n        fi\n        sum=$((sum+grade))\n\
    \        shift\n    done\n    local grade_letter\n    if [ $sum -gt 0 ]; then\n\
    \        grade_letter=$(printf \"%'d\"$(printf \"%.0f $((sum*5)))\"d\" $((sum*5))%'D')\n\
    \    else\n        grade_letter='E'\n    fi\n    echo $grade_letter", "    local\
    \ grade=$1\n    local grades=()\n    for grade in \"$grade\"; do\n        if ((\
    \ grade <= 3.7 )); then\n            grades+=(\"A+\")\n        elif (( grade >\
    \ 3.7 )); then\n            grades+=(\"A\")\n        elif (( grade <= 3.3 ));\
    \ then\n            grades+=(\"A-\")\n        elif (( grade > 3.3 )); then\n \
    \           grades+=(\"B+\")\n        elif (( grade <= 2.7 )); then\n        \
    \    grades+=(\"B\")\n        elif (( grade > 2.7 )); then\n            grades+=(\"\
    B-\")\n        elif (( grade <= 2.3 )); then\n            grades+=(\"C+\")\n \
    \       elif (( grade > 2.3 )); then\n            grades+=(\"C\")\n        elif\
    \ (( grade <= 1.7 )); then\n            grades+=(\"C\")\n        elif (( grade\
    \ > 1.7 )); then\n            grades+=(\"C-\")\n        elif (( grade <= 1.3 ));\
    \ then\n            grades+=(\"D+\")\n        elif (( grade > 1.3 )); then\n \
    \           grades+=(\"D\")\n        elif (( grade <= 1.0 )); then\n         \
    \   grades+=(\"D\")\n        elif (( grade > 1.0 )); then\n            grades+=(\"\
    D-\")\n        elif (( grade <= 0.7 )); then\n            grades+=(\"D\")\n  \
    \      elif (( grade > 0.7 )); then\n            grades+=(\"D-\")\n        elif\
    \ (( grade == 0.0 )); then\n            grades+=(\"E\")\n        fi\n    done\n\
    \    echo ${grades[@]}", "    local grade gpa\n    local i output\n\n    gpa=\"\
    $1\"\n    grade=$(awk \"BEGIN { print ${gpa} }\")\n    output=$(sed -n \"/^${grade}/\
    \ s/^${grade}\\([0-9]*\\)\\.[0-9]*$/\\1/p\" <<< \"$1\")\n\n    if [ -z \"$output\"\
    \ ]; then\n        echo \"E\"\n    else\n        echo \"$output\"\n    fi", " \
    \ grades=$1\n  letters=()\n  IFS=$' \\t\\n' read -r -a grades <<<$grades\n  for\
    \ grade in \"${grades[@]}\"; do\n    if [[ \"$grade\" =~ [0-9]\\.[0-9]+ ]]; then\n\
    \      grade+=\".0\"\n    fi\n    if [[ \"$grade\" =~ [-+]\\. ]]; then\n     \
    \ grade+=\".0\"\n    fi\n    \n    letters+=($grade)\n  done\n  printf '%s\\n'\
    \ \"${letters[@]}\"", "    local x=($1)\n    local output=''\n    while [ ${#x[*]}\
    \ -gt 0 ]; do\n        local x=${x[*]}\n        output=$output\"${x[((${#x} -1))]}|\"\
    \n        shift\n    done\n    printf \"${output%|}\\n\"", "  local numerical_grades=$1\n\
    \  local numerical_grades_size=$(echo \"$numerical_grades\" | wc -w)\n  local\
    \ index=0\n  while [ $index -lt $numerical_grades_size ]; do\n    local current_grade=$(echo\
    \ \"$numerical_grades\" | sed -n $index\"p\")\n    local letter=$(echo \"$current_grade\"\
    \ | tr -d '[:digit:]')\n    if [[ $current_grade == *\".\"* ]]; then\n      local\
    \ numerical_grade=$(echo \"$current_grade\" | sed \"s/.*/0/g\")\n    else\n  \
    \    local numerical_grade=$(echo \"$current_grade\" | tr -d '[:digit:]')\n  \
    \  fi\n    local numerical_letter_grade=\"$numerical_grade+$letter\"\n    numerical_grades=$numerical_grades\
    \ $numerical_letter_grade\n    local index=$(expr $index + 1)\n  done\n  echo\
    \ \"$numerical_grades\"", "    if [[ $1 =~ ^(-?[0-9]+)\\.[0-9]+$ ]]; then\n  \
    \      echo \"'$((${BASH_REMATCH[1]}))'\"\n    else\n        echo \"'NA'\"\n \
    \   fi", "  local i letter grades\n  grades=($(cut -d' ' -f1 <<< \"$1\"))\n  for\
    \ ((i = 0; i < ${#grades[@]}; i++)); do\n    letter=\"${grades[$i]}\"\n    if\
    \ [[ \"$letter\" =~ ^[[:upper:]] ]]; then\n      letter=\"${letter:1}\"\n    fi\n\
    \    echo \"$letter \"\n  done", "\tlocal GPA_list grades_string GPA\n\n\tGPA=$1\n\
    \tgrades_string=$( grade_equation $GPA )\n\tGPA_list=($(echo $grades_string |\
    \ tr \" \" \"\\n\"))\n\n\tfor i in ${GPA_list[@]}\n\tdo\n\t\tgrades_string=$(\
    \ grade_equation $i )\n\t\tgrades_string=$( echo $grades_string | sed 's/\"//g'\
    \ )\n\n\t\tif [ \"$i\" -ge \"3\" -a \"$i\" -le \"7\" ]; then\n\t\t\techo \"$grades_string\"\
    \n\t\telse\n\t\t\techo \"$grades_string\"\n\t\tfi\n\tdone", "  local num=\"$1\"\
    \ \n  local grade \n  grade=`echo $num | cut -d'\"' -f1`\n  if [[ ! \"$grade\"\
    \ =~ ^-?[0-9]{1,3}$ ]]; then\n    echo \"Number is not numerical\"\n    return\
    \ 1\n  fi\n  echo \"$num\" | awk '\n    BEGIN { \n      # Set initial grade\n\
    \      gr = \"\"\n      # Check for negative number\n      if($1 < 0) {\n    \
    \    # Grade will be negative after subtraction\n        gr = $1 - $2\n      }\
    \ else { \n        # Grade will be positive\n        gr = $1\n      }\n      #\
    \ Check whether the grade is less than or equal to 100\n      if(gr <= 100) {\n\
    \        # Divide by 10\n        gr = gr / 10\n        \n        # Check if grade\
    \ is integer number\n        if(! (gr % 1)) {\n          # If grade is integer\
    \ then multiply by 10\n          gr = 10 * gr\n        }\n      } else {\n   \
    \     # If grade is greater than 100 \n        gr = 100\n      }\n      # Round\
    \ off grade\n      gr = round(gr, 0)\n      \n      # Check if gr is not integer\n\
    \      if((gr % 1) == 0) {\n        gr = 10 * gr\n      }\n      # Check if gr\
    \ is not a decimal\n      if(gr % 1 != 0) {\n        gr = (gr+1)\n      }\n  \
    \  }\n    # Check if grade is greater than 100\n    if($1 > 100) {\n      # Print\
    \ negative grade\n      print \"-\" \n    } else {\n      # Print grade\n    \
    \  print $1 \" \" gr\n    }\n  ' ", "    local grade=$1\n    local gpa=$2\n  \
    \  local lettergrades=()\n\n    local grade_index=0\n    local gpa_index=1\n\n\
    \    while [ \"$grade\" != \"\" ]; do\n        if [ \"$grade\" -gt \"3.7\" ];\
    \ then\n            grade=\" > 3.7\"\n            grade_index=$((grade_index +\
    \ 1))\n        elif [ \"$grade\" -gt \"3.3\" ]; then\n            grade=\" > 3.3\"\
    \n            grade_index=$((grade_index + 1))\n        elif [ \"$grade\" -gt\
    \ \"3.0\" ]; then\n            grade=\" > 3.0\"\n            grade_index=$((grade_index\
    \ + 1))\n        elif [ \"$grade\" -gt \"2.7\" ]; then\n            grade=\" >\
    \ 2.7\"\n            grade_index=$((grade_index + 1))\n        elif [ \"$grade\"\
    \ -gt \"2.3\" ]; then\n            grade=\" > 2.3\"\n            grade_index=$((grade_index\
    \ + 1))\n        elif [ \"$grade\" -gt \"2.0\" ]; then\n            grade=\" >\
    \ 2.0\"\n            grade_index=$((grade_index + 1))\n        elif [ \"$grade\"\
    \ -gt \"1.7\" ]; then\n            grade=\" > 1.7\"\n            grade_index=$((grade_index\
    \ + 1))\n        elif [ \"$grade\" -gt \"1.3\" ]; then\n            grade=\" >\
    \ 1.3\"\n            grade_index=$((grade_index + 1))\n        elif [ \"$grade\"\
    \ -gt \"1.0\" ]; then\n            grade=\" > 1.0\"\n            grade_index=$((grade_index\
    \ + 1))\n        elif [ \"$grade\" -gt \"0.7\" ]; then\n            grade=\" >\
    \ 0.7\"\n            grade_index=$((grade_index + 1))\n        elif [ \"$grade\"\
    \ -gt \"0.0\" ]; then\n            grade=\" > 0.0\"\n            grade_index=$((grade_index\
    \ + 1))\n        else\n            grade=\"\"\n        fi\n\n        lettergrades[$grade_index]=\"\
    ${lettergrades[$grade_index]}\"\n    done\n\n    local lettergrades_string=\"\"\
    \n    for (( i=0; i<${#lettergrades[@]}; i++ )); do\n        lettergrades_string=\"\
    ${lettergrades_string} \\\"${lettergrades[$i]}\\\",\"\n    done\n\n    local lettergrades_string=\"\
    ${lettergrades_string%,}\"\n    local lettergrades_string=\"${lettergrades_string%%,}\"\
    \n\n    local lettergrades_array=( $lettergrades_string )\n    local gpa_array=(\
    \ $gpa )\n\n    local letter_grade=( )\n    for (( i=0; i<${#lettergrades[@]};\
    \ i++ )); do\n        local letter_grade=${gpa_array", "    grades=$1 #the list\
    \ from the argument\n    \n    grades=$(echo $grades | sed -e 's/\\ /+/g' -e 's/\\\
    +/-/g' -e 's/\\@/@/g' | grep -v \"^$\") #clean the extra spaces and +\n\n    grades=$(echo\
    \ $grades | sed -e 's/\\ /+/g' -e 's/\\+/-/g' -e 's/\\@/@/g' | grep -v \"^$\"\
    ) #clean the extra spaces and +\n\n    grades=$(echo $grades | sed -e 's/\\ /+/g'\
    \ -e 's/\\+/-/g' -e 's/\\@/@/g' | grep -v \"^$\") #clean the extra spaces and\
    \ +\n\n    grades=$(echo $grades | sed -e 's/\\ /+/g' -e 's/\\+/-/g' -e 's/\\\
    @/@/g' | grep -v \"^$\") #clean the extra spaces and +\n\n    grades=$(echo $grades\
    \ | sed -e 's/\\ /+/g' -e 's/\\+/-/g' -e 's/\\@/@/g' | grep -v \"^$\") #clean\
    \ the extra spaces and +\n    \n    for i in $grades; do\n        case $i in\n\
    \            4.0*)\n                echo \"A+\";\n                ;;\n       \
    \     > 3.7*)\n                echo \"A\";\n                ;;\n            >\
    \ 3.3*)\n                echo \"A-\";\n                ;;\n            > 3.0*)\n\
    \                echo \"B+\";\n                ;;\n            > 2.7*)\n     \
    \           echo \"B\";\n                ;;\n            > 2.3*)\n           \
    \     echo \"B-\";\n                ;;\n            > 2.0*)\n                echo\
    \ \"C+\";\n                ;;\n            > 1.7*)\n                echo \"C\"\
    ;\n                ;;\n            > 1.3*)\n                echo \"C-\";\n   \
    \             ;;\n            > 1.0*)\n                echo \"D+\";\n        \
    \        ;;\n            > 0.7*)\n                echo \"D\";\n              \
    \  ;;\n            > 0.0*)\n                echo \"D-\";\n                ;;\n\
    \            *)\n                echo \"E\";\n                ;;\n        esac\n\
    \    done", "  local gpa=$1\n  local grade letter\n  local i=2\n  local j=1\n\
    \  grade=\n  while [ \"$j\" -le \"$#\" -a \"$i\" -le \"$#\" ]; do\n    grade+=\"\
    $(($(echo $gpa | sed 's/\\./\\\\\\\\./g' | sed 's/^\\./\\\\\\\\./g' | sed 's/$/\\\
    ./\\\\\\\\./g' | cut -c$((j-i-1)))))\"\n    grade+=\"+$(($(echo $gpa | sed 's/\\\
    ./\\\\\\\\./g' | sed 's/^\\./\\\\\\\\./g' | sed 's/$/\\./\\\\\\\\./g' | cut -c$((j-i-1)))))\"\
    \n    j=$((i+1))\n    i=$((j-1))\n  done\n  grade+=\"$(($(echo $gpa | sed 's/\\\
    ./\\\\\\\\./g' | sed 's/^\\./\\\\\\\\./g' | sed 's/$/\\./\\\\\\\\./g' | cut -c$((j-i))))\"\
    \n  grade+=\"+$(($(echo $gpa | sed 's/\\./\\\\\\\\./g' | sed 's/^\\./\\\\\\\\\
    ./g' | sed 's/$/\\./\\\\\\\\./g' | cut -c$((j-i))))\"\n  grade+=\"+$(($(echo $gpa\
    \ | sed 's/\\./\\\\\\\\./g' | sed 's/^\\./\\\\\\\\./g' | sed 's/$/\\./\\\\\\\\\
    ./g' | cut -c$((j-i))))\"\n  grade+=\"+$(($(echo $gpa | sed 's/\\./\\\\\\\\./g'\
    \ | sed 's/^\\./\\\\\\\\./g' | sed 's/$/\\./\\\\\\\\./g' | cut -c$((j-i))))\"\n\
    \  grade+=\"$(($(echo $gpa | sed 's/\\./\\\\\\\\./g' | sed 's/^\\./\\\\\\\\./g'\
    \ | sed 's/$/\\./\\\\\\\\./g' | cut -c$((j-i))))\"\n  grade+=\"$(($(echo $gpa\
    \ | sed 's/\\./\\\\\\\\./g' | sed 's/^\\./\\\\\\\\./g' | sed 's/$/\\./\\\\\\\\\
    ./g' | cut -c$((j-i))))\"\n  grade+=\"$(($(echo $gpa | sed 's/\\./\\\\\\\\./g'\
    \ | sed 's/^\\./\\\\\\\\./g' | sed 's/$/\\./\\\\\\\\./g' | cut -c$((j-i))))\"\n\
    \  grade+=\"$(($(echo $gpa | sed 's/\\", "\tlocal grade_a=$1\n\tlocal grade_b=$2\n\
    \tlocal grade_c=$3\n\tlocal grade_d=$4\n\tlocal grade_e=$5\n\n\tlocal grade_f=$((\
    \ grade_e + grade_d + grade_c + grade_c + grade_c + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a + grade_a\
    \ + grade_a + grade_a + grade_a + gra", "    local grades=$1\n    grades=${grades//\
    \ /$'\\n'}\n    grades=$(echo \"${grades}\" | sed 's/[ \\t]*\\([.]\\+\\)/\\1/'\
    \ |\n              sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n              sed 's/[\
    \ \\t]*\\([.]\\+\\)/\\1/' |\n              sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n\
    \              sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n              sed 's/[ \\t]*\\\
    ([.]\\+\\)/\\1/' |\n              sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n       \
    \       sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n              sed 's/[ \\t]*\\([.]\\\
    +\\)/\\1/' |\n              sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n             \
    \ sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n              sed 's/[ \\t]*\\([.]\\+\\\
    )/\\1/' |\n              sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n              sed\
    \ 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n              sed 's/[ \\t]*\\([.]\\+\\)/\\\
    1/' |\n              sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n              sed 's/[\
    \ \\t]*\\([.]\\+\\)/\\1/' |\n              sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n\
    \              sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n              sed 's/[ \\t]*\\\
    ([.]\\+\\)/\\1/' |\n              sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n       \
    \       sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n              sed 's/[ \\t]*\\([.]\\\
    +\\)/\\1/' |\n              sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n             \
    \ sed 's/[ \\t]*\\([.]\\+\\)/\\1/' |\n              sed 's/[ \\t]*\\([.]", " \
    \   local grade gpa grades_sum=0 letter_grades\n    local GPA=$1 \n    # GPA is\
    \ a list of numbers with each one separated by spaces\n    # Letter grades are\
    \ denoted by a letter from the table\n    # and they have to be made with the\
    \ GPA and the grades sum\n    # A+ is 4.0 GPA\n    # B is > 3.7 GPA\n    # C-\
    \ is < 3.3 GPA\n    # C is > 3.0 GPA\n    # D+ is > 2.7 GPA\n    # D is > 2.3\
    \ GPA\n    # D- is < 2.0 GPA\n    # E is 0.0 GPA\n    # GPA is a list of numbers\n\
    \    # Letter grades are denoted by a letter from the table\n    # and they have\
    \ to be made with the GPA and the grades sum\n    # A+ is 4.0 GPA\n    # B is\
    \ > 3.7 GPA\n    # C- is < 3.3 GPA\n    # C is > 3.0 GPA\n    # D+ is > 2.7 GPA\n\
    \    # D is > 2.3 GPA\n    # D- is < 2.0 GPA\n    # E is 0.0 GPA\n    for grade\
    \ in \"${GPA[@]}\"; do\n        grades_sum=$(( grades_sum + grade ))\n    done\n\
    \    for grade in \"${GPA[@]}\"; do\n        gpa=$(( grade / grades_sum * 5 ))\n\
    \        letter_grades=$(grade_equation \"$grade $gpa\")\n    done\n    echo \"\
    $letter_grades\"", "   local grades_array=$1\n   local score=( ${grades_array}\
    \ )\n   local letter_grades=()\n   local letter_grade_array=()\n   \n   for grade\
    \ in \"${grades_array[@]}\"; do\n      local letter_grade\n      if [[ $(echo\
    \ \"${grade:0:1}\" | grep -iq \"[0-9]\") ]]; then\n         letter_grade=$(echo\
    \ \"${grade}\" | awk '{printf \"%.0f\", $1}')\n      else\n         letter_grade=$(echo\
    \ \"${grade}\" | awk '{printf \"%.0f\", $1*10}') / 100\n      fi\n      if [[\
    \ ${letter_grade} -gt 6 ]]; then\n         letter_grade=\"E\"\n      fi\n    \
    \  \n      letter_grades+=(\"${letter_grade}\")\n      letter_grade_array+=(\"\
    ${letter_grade}\")\n   done\n   \n   return \"${letter_grades[@]}\"", "    local\
    \ gpa number=$1\n    local letter=\"\"\n    local results=()\n\n    for (( i =\
    \ 0; i < ${#gpa[@]}; i++ )); do\n        if [[ ${gpa[$i]} -gt ${number} ]]; then\n\
    \            results=(${results[@]} ${letter})\n            letter=`echo \"${letter}+\"\
    `\n        elif [[ ${gpa[$i]} -eq ${number} ]]; then\n            results=(${results[@]}\
    \ ${letter})\n            letter=`echo \"${letter}${letter}\"`\n        fi\n \
    \   done\n\n    echo ${results[@]}", "  local grade_array=($1) # split into array\n\
    \  local max_grade=${grade_array[0]} # assume first is the highest grade\n  local\
    \ grade_count=0\n  local grade_output=(${grade_array[@]})\n  local grade_length=$#grade_output\n\
    \  local index=0\n  for (( i=0; i<$grade_length; i++ )); do\n    if [[ ${grade_output[i]}\
    \ -gt ${max_grade} ]]; then\n      max_grade=${grade_output[i]}\n      grade_count=$i\n\
    \    fi\n  done\n  local grades=${grade_output[$grade_count]}\n  local grades_length=$#grades\n\
    \  if [[ $grades_length > 0 ]]; then\n    for (( j=0; j<$grades_length; j++ ));\
    \ do\n      echo \"$grades[$j]\"\n    done\n  else\n    echo \"$grades\"\n  fi",
  "    local grades result i j\n    grades=$1\n    result=\"\"\n    for ((i = 0; i\
    \ < ${#grades}; i++)); do\n        grade=${grades:$i:1}\n        grade=\"${grade%%.*}\"\
    \n        if [ $grade -eq $grade ]; then\n            if [ ${grade:0:1} == \"\
    +\" ]; then\n                grade=A\n            elif [ ${grade:0:1} == \"-\"\
    \ ]; then\n                grade=B\n            elif [ ${grade:0:1} == \"=\" ];\
    \ then\n                grade=C\n            elif [ ${grade:0:1} == \"/\" ]; then\n\
    \                grade=D\n            elif [ ${grade:0:1} == \"\\\\\" ]; then\n\
    \                grade=E\n            fi\n        fi\n        result+=$grade\n\
    \    done\n    echo \"${result}\"", "  IFS='.' read -a n <<< $1\n  grades=\"\"\
    \n  for n in \"${n[@]}\"; do\n    (( ${#n} > 0 )) && grades+=\"\\\"${n[0]}-\\\"\
    \"\n  done\n  echo \"${grades[@]}\"", "\tlocal letters grades\n\tlocal grade_points\
    \ x\n\n\tx=\"$1\"\n\n\tgrades=\"\"\n\tgrade_points=0\n\n\tfor grade in $x; do\n\
    \t\tif (( grade_points > 7 )); then\n\t\t\tgrades=\"$grades E\"\n\t\t\tbreak\n\
    \t\tfi\n\t\tlocal x=$(echo \"$grade*10\" | bc)\n\t\tif (( grade_points < x ));\
    \ then\n\t\t\tgrade_points=x\n\t\tfi\n\t\tif (( grade_points >= 0 )); then\n\t\
    \t\tif [[ \"$grade\" == \"0.0\" ]]; then\n\t\t\t\tgrades=\"$grades D-\"\n\t\t\t\
    elif [[ \"$grade\" == \"1.0\" ]]; then\n\t\t\t\tgrades=\"$grades D+\"\n\t\t\t\
    elif [[ \"$grade\" == \"2.0\" ]]; then\n\t\t\t\tgrades=\"$grades C+\"\n\t\t\t\
    elif [[ \"$grade\" == \"3.0\" ]]; then\n\t\t\t\tgrades=\"$grades C\"\n\t\t\telif\
    \ [[ \"$grade\" == \"3.3\" ]]; then\n\t\t\t\tgrades=\"$grades C- \"\n\t\t\telif\
    \ [[ \"$grade\" == \"3.5\" ]]; then\n\t\t\t\tgrades=\"$grades C\"\n\t\t\telif\
    \ [[ \"$grade\" == \"3.7\" ]]; then\n\t\t\t\tgrades=\"$grades B+\"\n\t\t\telif\
    \ [[ \"$grade\" == \"4.0\" ]]; then\n\t\t\t\tgrades=\"$grades B\"\n\t\t\telif\
    \ [[ \"$grade\" == \"4.3\" ]]; then\n\t\t\t\tgrades=\"$grades B-\"\n\t\t\telif\
    \ [[ \"$grade\" == \"4.5\" ]]; then\n\t\t\t\tgrades=\"$grades B\"\n\t\t\telif\
    \ [[ \"$grade\" == \"4.7\" ]]; then\n\t\t\t\tgrades=\"$grades A+\"\n\t\t\telif\
    \ [[ \"$grade\" == \"4.9\" ]]; then\n\t\t\t\tgrades=\"$grades A\"\n\t\t\telif\
    \ [[ \"$grade\" == \"5.0\" ]]; then\n\t\t\t\tgrades=\"$grades A- \"\n\t\t\telif\
    \ [[ \"$grade\" == \"5.3\" ]]; then\n\t\t\t\tgrades=\"$grades A-\"\n\t\t\telif\
    \ [[ \"$grade\" == \"5.5\" ]]; then\n\t\t\t\tgrades=\"$grades A\"\n\t\t\telif\
    \ [[ \"$grade\" == \"5.7\" ]]; then\n\t\t\t\tgrades=\"$grades A+\"\n\t\t\telif\
    \ [[ \"$grade\" == \"6.0\" ]]; then\n\t\t\t\tgrades=\"$grades B-\"\n\t\t\telif\
    \ [[ \"$grade\" == \"6.3\" ]]; then\n\t\t\t\tgrades=\"$grades B-\"\n\t\t\telif\
    \ [[ \"$grade\" == \"6.5\" ]]; then\n\t\t\t\tgrades=\"$grades B-\"\n\t\t\telif\
    \ [[ \"$grade\" == \"", "   local grade letters sum\n   grade=$1\n   sum=$(( $1\
    \ + 0 ))\n   letters=( A - B C - C D - D E)\n   echo \"$grade $letters[sum%${#letters[@]}]\"",
  "    local lg grade\n    local i val\n    local gpa\n    local grades\n    local\
    \ grade\n\n    # gpa: 4.0 3 1.7 2 3.5\n    gpa=$1\n    grades=$(echo \"$gpa\"\
    \ | sed 's/\\./,/g')\n\n    for (( i = 0; i < ${#grades}; i++ )); do\n       \
    \ val=${grades:$i:1}\n        if [[ $val == \"0\" ]]; then\n            grade=\"\
    ${grade}\"\n        elif [[ $val == \"1\" ]]; then\n            grade=\"\\\"A\\\
    \"\"\n        elif [[ $val == \"2\" ]]; then\n            grade=\"\\\"B\\\"\"\n\
    \        elif [[ $val == \"3\" ]]; then\n            grade=\"\\\"C\\\"\"\n   \
    \     elif [[ $val == \"4\" ]]; then\n            grade=\"\\\"D\\\"\"\n      \
    \  elif [[ $val == \"5\" ]]; then\n            grade=\"\\\"E\\\"\"\n        elif\
    \ [[ $val > 0 && $val < 4 ]]; then\n            grade=\"\\\"A+\\\"\"\n       \
    \ elif [[ $val > 4 && $val < 7 ]]; then\n            grade=\"\\\"A-\\\"\"\n  \
    \      elif [[ $val > 7 && $val < 10 ]]; then\n            grade=\"\\\"B+\\\"\"\
    \n        elif [[ $val > 10 && $val < 12 ]]; then\n            grade=\"\\\"B-\\\
    \"\"\n        elif [[ $val > 12 ]]; then\n            grade=\"\\\"C+\\\"\"\n \
    \       else\n            grade=\"\\\"C-\\\"\"\n        fi\n    done\n    echo\
    \ $grade", "    local grade=\"$1\"\n    local grades_array=(\"${grade//[!0-9.]/\
    \ }\")\n    local grades_array=(\"${grades_array[@]:0:(-1)}\")\n    local score=$(printf\
    \ \"$grade\" | awk '{ print $1 }')\n    local grades\n    local i\n    for i in\
    \ \"${grades_array[@]}\"; do\n        local j\n        for j in $(seq 0 $((${#grades_array[@]}-1)));\
    \ do\n            local grades_arr=${grades_array[$j]}\n            local j1\n\
    \            for j1 in \"${grades_arr[@]}\"; do\n                if [[ ${j1} -eq\
    \ \"${i}\" ]]; then\n                    local letter\n                    grades=\"\
    $grades$letter\"\n                fi\n            done\n        done\n    done\n\
    \    grades=\"$grades$score\"\n    echo \"$grades\"", "    # Convert gpas to number\n\
    \    declare -a gpas=(\"${1//[!0-9.]/ }\")\n    # Add zeros to negative number\n\
    \    gpa=${gpas[@]/%.0}\n    # Sum GPAs\n    gpa+=${gpas[@]/%/+}\n    # Check\
    \ if gpas are sorted\n    if [[ \"$gpas[1]\" -gt \"$gpas[0]\" ]]; then\n     \
    \   tmp_gpa=${gpas[0]}\n        gpas[0]=${gpas[1]}\n        gpas[1]=$tmp_gpa\n\
    \    fi\n    # Convert to a number\n    gpa=${gpas[@]/%.}\n    # Sum gpas\n  \
    \  gpa+=${gpas[@]/%/+}\n    # Subtract ones from gpas\n    gpa=${gpas[@]/%/-1}\n\
    \    # Convert gpas to letter\n    declare -a gpa_sum=(\"$gpa\")\n    gpa_sum=${gpa_sum[@]/0/A}\n\
    \    gpa_sum=${gpa_sum[@]/1/A}\n    gpa_sum=${gpa_sum[@]/2/A}\n    gpa_sum=${gpa_sum[@]/3/A}\n\
    \    gpa_sum=${gpa_sum[@]/4/A}\n    gpa_sum=${gpa_sum[@]/5/A}\n    gpa_sum=${gpa_sum[@]/6/A}\n\
    \    gpa_sum=${gpa_sum[@]/7/A}\n    gpa_sum=${gpa_sum[@]/8/A}\n    gpa_sum=${gpa_sum[@]/9/A}\n\
    \    gpa_sum=${gpa_sum[@]/10/A}\n    gpa_sum=${gpa_sum[@]/11/A}\n    gpa_sum=${gpa_sum[@]/12/A}\n\
    \    gpa_sum=${gpa_sum[@]/13/A}\n    gpa_sum=${gpa_sum[@]/14/A}\n    gpa_sum=${gpa_sum[@]/15/A}\n\
    \    gpa_sum=${gpa_sum[@]/16/A}\n    gpa_sum=${gpa_sum[@]/17/A}\n    gpa_sum=${gpa_sum[@]/18/A}\n\
    \    gpa_sum=${gpa_sum[@]/19/A}\n    gpa_sum=${gpa_sum[@]/20/A}\n    gpa_sum=${gpa_sum[@]/21/A}\n\
    \    gpa_sum=${gpa_sum[@]/22/A}\n    gpa_sum=${gpa_sum[@]/23/A}\n    g", "  local\
    \ gpa=$1\n  local gpa_gpa=`echo ${gpa} | cut -d'.' -f1`\n  local gpa_gpab=`echo\
    \ ${gpa} | cut -d'.' -f2`\n  local gpa_gpabgpa=`echo ${gpa} | cut -d'.' -f3`\n\
    \  local gpa_gpabgpa2=`echo ${gpa} | cut -d'.' -f4`\n  local gpa_gpabgpa3=`echo\
    \ ${gpa} | cut -d'.' -f5`\n  local gpa_gpabgpa4=`echo ${gpa} | cut -d'.' -f6`\n\
    \  local gpa_gpabgpa5=`echo ${gpa} | cut -d'.' -f7`\n  local gpa_gpabgpa6=`echo\
    \ ${gpa} | cut -d'.' -f8`\n  local gpa_gpabgpa7=`echo ${gpa} | cut -d'.' -f9`\n\
    \  local gpa_gpabgpa8=`echo ${gpa} | cut -d'.' -f10`\n  local gpa_gpabgpa9=`echo\
    \ ${gpa} | cut -d'.' -f11`\n  local gpa_gpabgpa10=`echo ${gpa} | cut -d'.' -f12`\n\
    \  local gpa_gpabgpa11=`echo ${gpa} | cut -d'.' -f13`\n  local gpa_gpabgpa12=`echo\
    \ ${gpa} | cut -d'.' -f14`\n  local gpa_gpabgpa13=`echo ${gpa} | cut -d'.' -f15`\n\
    \  local gpa_gpabgpa14=`echo ${gpa} | cut -d'.' -f16`\n  local gpa_gpabgpa15=`echo\
    \ ${gpa} | cut -d'.' -f17`\n  local gpa_gpabgpa16=`echo ${gpa} | cut -d'.' -f18`\n\
    \  local gpa_gpabgpa17=`echo ${gpa} | cut -d'.' -f19`\n  local gpa_gpabgpa18=`echo\
    \ ${gpa} | cut -d'.' -f20`\n  local gpa_gpabgpa19=`echo ${gpa} | cut -d'.' -f21`\n\
    \  local gpa_gpabgpa20=", "    local grade gpa\n    grade=\"${1}\"\n    gpa=$(echo\
    \ \"$grade\" |cut -d \" \" -f 1)\n    gpa=$(echo \"$gpa\" |cut -d \".\" -f 1)\n\
    \    if [ \"$gpa\" -lt \"4.0\"   ]; then\n        echo \"$gpa\" | tr \" \" \"\
    +\"\n    elif [ \"$gpa\" -ge \"4.0\" ] && [ \"$gpa\" -lt \"3.7\"  ]; then\n  \
    \      echo \"$gpa\" | tr \" \" \"+- \"\n    elif [ \"$gpa\" -ge \"3.7\" ] &&\
    \ [ \"$gpa\" -lt \"3.3\"   ]; then\n        echo \"$gpa\" | tr \" \" \"+-\"\n\
    \    elif [ \"$gpa\" -ge \"3.3\" ] && [ \"$gpa\" -lt \"3.0\"  ]; then\n      \
    \  echo \"$gpa\" | tr \" \" \"+^ \"\n    elif [ \"$gpa\" -ge \"3.0\" ] && [ \"\
    $gpa\" -lt \"2.7\"  ]; then\n        echo \"$gpa\" | tr \" \" \"+\"\n    elif\
    \ [ \"$gpa\" -ge \"2.7\" ] && [ \"$gpa\" -lt \"2.3\"  ]; then\n        echo \"\
    $gpa\" | tr \" \" \"+-\"\n    elif [ \"$gpa\" -ge \"2.3\" ] && [ \"$gpa\" -lt\
    \ \"2.0\"  ]; then\n        echo \"$gpa\" | tr \" \" \"+-^ \"\n    elif [ \"$gpa\"\
    \ -ge \"2.0\" ] && [ \"$gpa\" -lt \"1.7\"  ]; then\n        echo \"$gpa\" | tr\
    \ \" \" \"++ \"\n    elif [ \"$gpa\" -ge \"1.7\" ] && [ \"$gpa\" -lt \"1.3\" \
    \ ]; then\n        echo \"$gpa\" | tr \" \" \"+^-\"\n    elif [ \"$gpa\" -ge \"\
    1.3\" ] && [ \"$gpa\" -lt \"1.0\"  ]; then\n        echo \"$gpa\" | tr \" \" \"\
    +^\"\n    elif [ \"$gpa\" -ge \"1.0\" ] && [ \"$gpa\" -lt \"0.7\"  ]; then\n \
    \       echo \"$gpa\" | tr \" \" \"+~\"\n    elif [ \"$gpa\" -ge \"0.7\" ] &&\
    \ [ \"$gpa\" -lt \"0.0\"  ]; then\n        echo \"$gpa\" | tr \" \" \"+-\"\n \
    \   else\n        echo \"$gpa\" | tr \" \" \"+~\"\n    fi", "    local score=$1\n\
    \    local grade_letter\n    local i\n    grade_letter=\"E\"\n    for i in \"\
    ${!score}\"; do\n        if [[ \"${score[i]}\" -gt \"3.5\" ]]; then\n        \
    \    grade_letter=\"D-\"\n        elif [[ \"${score[i]}\" -gt \"3.0\" ]]; then\n\
    \            grade_letter=\"D+\"\n        elif [[ \"${score[i]}\" -gt \"2.0\"\
    \ ]]; then\n            grade_letter=\"B-\"\n        elif [[ \"${score[i]}\" -gt\
    \ \"1.7\" ]]; then\n            grade_letter=\"B+\"\n        elif [[ \"${score[i]}\"\
    \ -gt \"1.0\" ]]; then\n            grade_letter=\"B-\"\n        elif [[ \"${score[i]}\"\
    \ -gt \"0.7\" ]]; then\n            grade_letter=\"B+\"\n        elif [[ \"${score[i]}\"\
    \ -gt \"0.0\" ]]; then\n            grade_letter=\"B-\"\n        elif [[ \"${score[i]}\"\
    \ -gt \"0.0\" ]]; then\n            grade_letter=\"E\"\n        fi\n    done\n\
    \    echo \"${grade_letter}\"", "    local gpa=$1\n    local gpa_count=0\n   \
    \ local letter_grade=''\n    local letter_grades=()\n    while read gpa_string\
    \ ; do\n        local gpa numerical_gpa\n        numerical_gpa=$(echo \"$gpa\"\
    \ | sed -e 's/[,]/ /g' | sed -e 's/ *$//g' | awk '{print $3}')\n        if [ \"\
    $numerical_gpa\" -gt \"$gpa_count\" ]; then\n            letter_grade+='A+'\n\
    \            gpa_count=$numerical_gpa\n        elif [ \"$numerical_gpa\" -lt \"\
    $gpa_count\" ]; then\n            letter_grade+='B-'\n            gpa_count=$numerical_gpa\n\
    \        else\n            letter_grade+='B'\n            gpa_count=$numerical_gpa\n\
    \        fi\n        letter_grades+=($letter_grade)\n    done <<< \"$gpa\"\n \
    \   echo \"${letter_grades[@]}\"", "  grade_eq=$(grade_equation \"$1\")\n  \n\
    \  for i in {0..$(expr ${#grade_eq} - 3)}\n  do\n      letter=\"${grade_eq[i]}\"\
    \n      grade=\"${grade_eq[i+1]}\"\n\n      grade=\"${grade#*[}\"\n      grade=\"\
    ${grade%]}\"\n\n      grade_eq=\"${grade_eq[0:i]}\"\n      grade_eq=\"${grade_eq}${grade}\"\
    \n  done\n  \n  echo \"${grade_eq}\"", "    grades=$1\n\n    for grade in $grades;\
    \ do\n        # Grade is currently a string. Convert it to an integer.\n     \
    \   grade=${grade// *}\n        # Check if we have the grade in the table. If\
    \ not, return an empty list.\n        [[ -z $( echo $grade | awk '{print $'$grade'[$1]}'\
    \ ) ]] && return 0\n    done\n\n    grades", "  local gpa\n  local grade\n  gpa=$1\n\
    \  grade=$(echo \"${gpa}\" | awk -F, '{print $1}')\n  gpa=$(echo \"${gpa}\" |\
    \ awk -F, '{print $2}')\n  gpa=$(echo \"${gpa}\" | awk -F, '{print $3}')\n  gpa=$(echo\
    \ \"${gpa}\" | awk -F, '{print $4}')\n  gpa=$(echo \"${gpa}\" | awk -F, '{print\
    \ $5}')\n  gpa=$(echo \"${gpa}\" | awk -F, '{print $6}')\n  gpa=$(echo \"${gpa}\"\
    \ | awk -F, '{print $7}')\n  gpa=$(echo \"${gpa}\" | awk -F, '{print $8}')\n \
    \ gpa=$(echo \"${gpa}\" | awk -F, '{print $9}')\n  gpa=$(echo \"${gpa}\" | awk\
    \ -F, '{print $10}')\n  gpa=$(echo \"${gpa}\" | awk -F, '{print $11}')\n  gpa=$(echo\
    \ \"${gpa}\" | awk -F, '{print $12}')\n  grade=$(echo \"${gpa}\" | awk -F, '{print\
    \ ($1 - $2 <= -2 ? \"F\" : \n  ($1 - $2 >= -2 ? \"D\" : ($1 - $2 > -2 ? \"C\"\
    \ : ($1 - $2 < -2 ? \"B-\" : \n  ($1 - $2 >= -3 ? \"A-\" : (\"A+\"))))))}')\n\
    \  echo ${grade}", "\tlocal grade=\"$1\"\n\tlocal gpa \n\tlocal letter\n\n\tlocal\
    \ result\n\tlocal i\n\n\tgpa=$(echo \"$grade\" | cut -d \" \" -f1)\n\tletter=$(echo\
    \ \"$grade\" | cut -d \" \" -f2)\n\tresult=()\n\ti=1\n\twhile [ $i -le $gpa ];\
    \ do\n\t\tresult+=($letter)\n\t\t(( i++))\n\tdone\n\n\techo \"${result[@]}\"",
  "  local grade grades\n  grades=\"$1\" \n  grade=\"${grades#*[!0-9]}\";\n  grade=\"\
    ${grade#*[!0-9]}\";\n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grade#*[!0-9]}\"\
    \n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grade#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\
    \n  grade=\"${grade#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grade#*[!0-9]}\"\
    \n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\
    \n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\
    \n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\
    \n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\
    \n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\
    \n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\
    \n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\
    \n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\
    \n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9]}\"\
    \n  grade=\"${grades#*[!0-9]}\"\n  grade=\"${grades#*[!0-9", "    local i nums\
    \ result ret=$1 sum\n    local grade_letter grade_point\n    local gpa\n    \n\
    \    if [[ \"$ret\" =~ \" [0-9]+\\.?[0-9]+ \" ]] || [[ \"$ret\" =~ \" [0-9]+ [0-9]+\\\
    .?[0-9]+ \" ]]; then\n        nums=\"$ret\"\n        grade_letter=\"A-\"\n   \
    \     grade_point=\"+\"\n    else\n        echo \"ERROR: the input should be a\
    \ list of GPAs for some students\"\n        return 1\n    fi\n    \n    sum=$(echo\
    \ \"$nums\" | tr \" \" \"+\" | bc)\n    \n    for ((i = 0; i < ${#nums}; i++));\
    \ do\n        gpa=$((nums[i] + grade_point))\n        if [[ $gpa -gt 7 ]]; then\n\
    \            grade_letter=\"$grade_letter\"\n        else\n            grade_letter=\"\
    D-\"\n        fi\n        if [[ $gpa -lt 0 ]]; then\n            grade_letter=\"\
    $grade_letter\"\n        else\n            grade_letter=\"F-\"\n        fi\n \
    \   done\n    \n    echo \"$grade_letter\"", "    local grade grades result\n\
    \    grades=$1\n    result=$(bc -l <<< \"scale=0; ((${grades//,/ }) - 4)/3 + 1.5\"\
    )\n    while [[ $result -ge 0 ]]\n    do\n        grade=\"$(expr ${result} + 4)\"\
    \n        result=$(expr ${result} + 1)\n        grades=\"$(expr ${grades//,/ }\
    \ + $grade)\"\n    done\n    grades=$(bc -l <<< \"scale=0; (${grades//,/ } - 3)/3\
    \ + 1\")\n    grades=\"${grades//,/ }\"\n    grades=$(bc -l <<< \"scale=0; (${grades//,/\
    \ } - 4.5)/3 + 1.5\")\n    grades=\"${grades//,/ }\"\n    echo \"$grades\"", " \
    \ GPA=$1\n  grades=$(grade_equation \"$GPA\")\n  for i in $(seq 0 $(( ${#grades[@]}\
    \ - 1 )))\n  do\n    case \"${grades[$i]}\" in\n      \"A+\")\n        letter=A\n\
    \        ;;\n      \"A\")\n        letter=A\n        ;;\n      \"A-\")\n     \
    \   letter=A-\n        ;;\n      \"B+\")\n        letter=B\n        ;;\n     \
    \ \"B\")\n        letter=B\n        ;;\n      \"B-\")\n        letter=B-\n   \
    \     ;;\n      \"C+\")\n        letter=C\n        ;;\n      \"C\")\n        letter=C\n\
    \        ;;\n      \"C-\")\n        letter=C-\n        ;;\n      \"D+\")\n   \
    \     letter=D\n        ;;\n      \"D\")\n        letter=D\n        ;;\n     \
    \ \"D-\")\n        letter=D-\n        ;;\n      \"E\")\n        letter=E\n   \
    \     ;;\n      *)\n        letter=\"$(echo \"${grades[$i]}\"|sed 's/\\./ /g')\"\
    \n        ;;\n    esac\n    echo \"${letter}\"\n  done", "  local grades=$1\n\
    \  local num=${grades[0]}\n  local letter=\n  local max=0\n  local letters[10]\n\
    \  for i in ${grades[*]}; do\n    (( num > max )) && max=num\n    (( num < 0 ))\
    \ && num=0 \n    letter=$(( num >=10 ? num - 10 : 10 ))\n    letters[$i]=$(( letters[$i]+1\
    \ ))\n  done\n  printf \"%s\" ${letters[*]}", "    local grades=$1\n    local\
    \ grades_arr=($grades)\n    local letter\n    local sum=0\n    local grade\n \
    \   \n    grades_arr=(${grades_arr[@]/#/ })\n    grades_arr=(${grades_arr[@]/-/\
    \ })\n    grades_arr=(${grades_arr[@]/+/ })\n    grades_arr=(${grades_arr[@]/#/\
    \ })\n    \n    grades_arr=(${grades_arr[@]/ / })\n    \n    for grade in ${grades_arr[@]};\
    \ do\n        sum=$((${sum} + ${grade}))\n    done\n    \n    letter=${grades_arr[$((${sum}/2))]}\n\
    \    echo \"$letter\"", "  local grade_array=()\n  local grades=$( echo $1 | tr\
    \ \" \" \"\\n\")\n  for i in $grades; do\n    grade_array+=($( echo \"$i\" | awk\
    \ '{if ($1>4.0) printf \"A+\";else if ($1>3.7){printf \"A\";}else if ($1>3.3){printf\
    \ \"A-\";}else if ($1>3.0){printf \"B+\";}else if ($1>2.7){printf \"B\";}else\
    \ if ($1>2.3){printf \"B-\";}else if ($1>2.0){printf \"C+\";}else if ($1>1.7){printf\
    \ \"C\";}else if ($1>1.3){printf \"C-\";}else if ($1>1.0){printf \"D+\";}else\
    \ if ($1>0.7){printf \"D\";}else if ($1>0.0){printf \"D-\";}else if ($1>0.0) {printf\
    \ \"E\";}}' ))\n  done\n  echo \"${grade_array[@]}\"", "    local GPA_list \n\
    \    GPA_list=$@\n    local letter_grade \n    letter_grade=$(echo $GPA_list |\
    \ tr \" \" '\\n')\n    letter_grade=$(echo $letter_grade | sed 's/^[0-9.]//g')\n\
    \    letter_grade=$(echo $letter_grade | sed 's/[^A-Z]//g')\n    letter_grade=$(echo\
    \ $letter_grade | sed 's/[+-]\\?//g')\n    letter_grade=$(echo $letter_grade |\
    \ sed 's/ //g')\n    letter_grade=$(echo $letter_grade | sed 's/\\-\\-/-')\n \
    \   letter_grade=$(echo $letter_grade | sed 's/\\-//g')\n    letter_grade=$(echo\
    \ $letter_grade | sed 's/\\-+$/+')\n    letter_grade=$(echo $letter_grade | sed\
    \ 's/\\+$/')\n    letter_grade=$(echo $letter_grade | sed 's/\\+/+')\n    letter_grade=$(echo\
    \ $letter_grade | sed 's/\\-+/-')\n    letter_grade=$(echo $letter_grade | sed\
    \ 's/\\-\\-$/-')\n    letter_grade=$(echo $letter_grade | sed 's/\\-$/')\n   \
    \ letter_grade=$(echo $letter_grade | sed 's/\\-$//')\n    letter_grade=$(echo\
    \ $letter_grade | sed 's/\\+$//')\n    letter_grade=$(echo $letter_grade | sed\
    \ 's/\\+/+')\n    letter_grade=$(echo $letter_grade | sed 's/\\-+$//')\n    letter_grade=$(echo\
    \ $letter_grade | sed 's/\\-\\-$//')\n    letter_grade=$(echo $letter_grade |\
    \ sed 's/\\-$//')\n    letter_grade=$(echo $letter_grade | sed 's/$//')\n    letter_grade=$(echo\
    \ $letter_grade | sed 's/\\+$//')\n    letter_grade=$(echo $letter_grade | sed\
    \ 's/$//')\n    letter_grade=$(echo $letter_grade | sed 's/\\+$/+')\n    letter_grade=$(echo\
    \ $letter_grade | sed 's/\\+$//')\n    letter_grade=$(echo $letter_grade | sed\
    \ 's/\\-\\-$/-')\n    letter_grade=$(echo $letter_grade | sed 's/\\-$/')\n   \
    \ letter_grade=$(echo $letter_grade | sed 's/\\-$//')\n    letter_grade=$(echo\
    \ $letter_grade | sed 's/\\-\\-$/-')\n    letter_grade=$(echo $letter_grade |\
    \ sed 's/\\-", "  local grade_list grade i j grade\n  grade_list=$1\n  grade=0\n\
    \  for ((i=0;i<${#grade_list};++i)); do\n    grade=$((${grade:+$grade}+$(cat <<<\
    \ $grade_list[i])))\n  done\n  grade=$(printf \"%.2f\"  ${grade})\n  printf \"\
    %s\" ${grade:0:1}", "    # Your code goes here\n    # Make sure that the list\
    \ is space-separated and that each value is a number\n    grades=($1)\n    \n\
    \    # You need to create an empty list to store the letter grades\n    grade_letters=($(echo\
    \ \"${grades[@]}\"|awk '{if($0<3.0) print \"A+\" elif ($0>3.7){print $0} else{if($0>3.3){print\
    \ \"A-\" } else{if($0>3.0){print \"B+\" } else{if($0>2.7){print \"B\" } else{if($0>2.3){print\
    \ \"B-\" } else{if($0>2.0){print \"C+\" } else{if($0>1.7){print \"C\" } else{if($0>1.3){print\
    \ \"C-\" } else{if($0>1.0){print \"D+\" } else{if($0>0.7){print \"D\" } else{print\
    \ \"D-\" }}}}}}}}}}'))\n    \n    # Make sure that the letter grades are returned\
    \ as a string\n    grade_letters=$(echo \"${grade_letters[@]}\"|tr -d '[\" \"\
    ]')\n\n    # Make sure that the grades are returned as a list\n    grade_letters=$(echo\
    \ \"${grade_letters[@]}\"|tr '[:upper:]' '[:lower:]')\n\n    # Print the grades\
    \ \n    printf '['\n    for i in ${grade_letters[*]}\n    do\n        printf \"\
    %s\" \"$i\"\n    done\n    printf ']'", "  # Your code goes here\n  num=$(printf\
    \ \"$1\" | awk '{print $1}')\n  \n  if [[ \"$num\" -lt 0 ]]; then\n    echo 0\n\
    \  elif [[ \"$num\" -ge 100 ]]; then\n    echo 0\n  elif [[ \"$num\" -le 80 ]];\
    \ then\n    echo 1\n  elif [[ \"$num\" -ge 70 ]]; then\n    echo 2\n  elif [[\
    \ \"$num\" -ge 60 ]]; then\n    echo 3\n  elif [[ \"$num\" -ge 50 ]]; then\n \
    \   echo 4\n  elif [[ \"$num\" -ge 40 ]]; then\n    echo 5\n  else\n    echo 6\n\
    \  fi", "    local gpa=$1\n    local grades=${gpa//gpa.}\n    local number_of_grades=${#grades}\n\
    \    local i=0\n    while [ $i -lt $number_of_grades ]; do\n        local grade=${grades[$i]}\n\
    \        if [[ $grade -ge 3.0 ]] && [[ $grade -le 3.7 ]]; then\n            grade=${grade%%.*}\n\
    \            grades=\"${grades//+*/}\"\n            grades=\"${grades// /-}\"\n\
    \            grades=\"${grades//-/}\"\n        fi\n        if [[ $grade -ge 2.7\
    \ ]] && [[ $grade -le 2.3 ]]; then\n            grade=${grade%%.*}\n         \
    \   grades=\"${grades//+*/}\"\n            grades=\"${grades// /-}\"\n       \
    \     grades=\"${grades//-/}\"\n        fi\n        if [[ $grade -ge 2.0 ]] &&\
    \ [[ $grade -le 1.7 ]]; then\n            grade=${grade%%.*}\n            grades=\"\
    ${grades//+*/}\"\n            grades=\"${grades// /-}\"\n            grades=\"\
    ${grades//-/}\"\n        fi\n        if [[ $grade -ge 1.3 ]] && [[ $grade -le\
    \ 1.0 ]]; then\n            grade=${grade%%.*}\n            grades=\"${grades//+*/}\"\
    \n            grades=\"${grades// /-}\"\n            grades=\"${grades//-/}\"\n\
    \        fi\n        grades=\"$grades ${grade}\"\n        let i++\n    done\n\
    \    echo $grades", "    local gpa=\"$1\"\n    local gpa_split=\"($(gpa))\"\n\n\
    \    # $2 contains the number of terms in the function\n    # $3 contains the\
    \ number of decimal points\n    local gpa2=\"$(echo \"${gpa_split}\" | awk -F\"\
    .\" '{print $1}')\"\n    local gpa3=\"$(echo \"${gpa_split}\" | awk -F\".\" '{print\
    \ $2}')\"\n\n    # Calculate the average of the grades\n    local average=\"$(echo\
    \ \"${gpa_split}\" | awk '{print $3/$2}')\"\n\n    # Check if it is an average\n\
    \    local average_c=\"$(echo \"${gpa_split}\" | awk '{print $1+$2+$3}')\"\n \
    \   local average_cp=\"$(echo \"${gpa_split}\" | awk '{print $1+$2+$3+$4}')\"\n\
    \    if [[ \"${average_c}\" -eq \"${average_cp}\" ]]; then\n        echo \"${average}\"\
    \n    else\n        echo \"$average\"\n    fi", "  grades=$(echo \"$1\" | awk\
    \ '{print $1}')\n  gpa=$(echo \"$1\" | awk '{print $2}')\n  lettergrade=$(echo\
    \ \"$1\" | awk '{print $3}')\n  for i in $(seq 0 $(( ${#grades} -1 ))); do\n \
    \   lettergrade+=\"${lettergrade}-\"\n  done\n  lettergrade+=\"${lettergrade}\"\
    \n  lettergrade+=\"E\"\n  echo \"$lettergrade\"", "    local gpa=$1; shift\n \
    \   local grade_grade=\"\"\n    for grade in \"${@}\"; do\n        gpa=$(echo\
    \ \"${grade}\" | cut -d\" \" -f1)\n        case \"${gpa}\" in\n            *)\
    \ grade_grade+=\"+${gpa}\";; \n        esac\n    done\n    echo \"${grade_grade}\"",
  "  local num_grade=$1\n  local grade_char=\"E\"\n\n  num_grade=${num_grade//./ }\n\
    \  num_grade=${num_grade//-/ }\n\n  if [[ $num_grade -le 4 ]]; then\n    grade_char=\"\
    A+\";\n  elif [[ $num_grade -le 7 ]]; then\n    grade_char=\"A\";\n  elif [[ $num_grade\
    \ -le 9 ]]; then\n    grade_char=\"A-\";\n  elif [[ $num_grade -le 14 ]]; then\n\
    \    grade_char=\"B+\";\n  elif [[ $num_grade -le 19 ]]; then\n    grade_char=\"\
    B\";\n  elif [[ $num_grade -le 24 ]]; then\n    grade_char=\"B-\";\n  elif [[\
    \ $num_grade -le 29 ]]; then\n    grade_char=\"C+\";\n  elif [[ $num_grade -le\
    \ 34 ]]; then\n    grade_char=\"C\";\n  elif [[ $num_grade -le 39 ]]; then\n \
    \   grade_char=\"C-\";\n  elif [[ $num_grade -le 44 ]]; then\n    grade_char=\"\
    D+\";\n  elif [[ $num_grade -le 49 ]]; then\n    grade_char=\"D\";\n  elif [[\
    \ $num_grade -le 54 ]]; then\n    grade_char=\"D-\";\n  elif [[ $num_grade -le\
    \ 59 ]]; then\n    grade_char=\"E\";\n  fi\n  echo $grade_char", "    local input=$1\n\
    \    local grades\n    local grade\n    grades=$(echo \"$input\" |sed 's/ /\"\
    ,\"/g')\n    grade=$(echo \"$grades\" |awk -F \",\" '{print $2}')\n    grade=$(echo\
    \ \"$grade\" |awk '{print int($0*2)}')\n    grade=$(echo \"$grade\" |awk '{print\
    \ int($0/2)}')\n    grade=$(echo \"$grade\" |awk '{print int($0*10)}')\n    grade=$(echo\
    \ \"$grade\" |awk '{print int($0/10)}')\n    grade=$(echo \"$grade\" |awk '{print\
    \ int($0*100)}')\n    grade=$(echo \"$grade\" |awk '{print int($0/100)}')\n  \
    \  grade=$(echo \"$grade\" |awk '{print int($0/10)}')\n    grade=$(echo \"$grade\"\
    \ |awk '{print int($0*10)}')\n    grade=$(echo \"$grade\" |awk '{print int($0/10)}')\n\
    \    grade=$(echo \"$grade\" |awk '{print int($0/10)}')\n    grade=$(echo \"$grade\"\
    \ |awk '{print int($0*10)}')\n    grade=$(echo \"$grade\" |awk '{print int($0/10)}')\n\
    \    grade=$(echo \"$grade\" |awk '{print int($0/10)}')\n    grade=$(echo \"$grade\"\
    \ |awk '{print int($0/10)}')\n    grade=$(echo \"$grade\" |awk '{print int($0/10)}')\n\
    \    grade=$(echo \"$grade\" |awk '{print int($0/10)}')\n    grade=$(echo \"$grade\"\
    \ |awk '{print int($0/10)}')\n    grade=$(echo \"$grade\" |awk '{print int($0/10)}')\n\
    \    grade=$(echo \"$grade\" |awk '{print int($0/10)}')\n    grade=$(echo \"$grade\"\
    \ |awk '{print int($0/10)}')\n    grade=$(echo \"$grade\" |awk '{print int($0/10)}')\n\
    \    grade=$(echo \"$grade\" |awk '{print int($0/10)}')\n    grade=$(echo \"$grade\"\
    \ |awk '{print int($0/10)}')\n    grade=$(echo \"$grade\" |awk '{print int($0/10)}')\n\
    \    grade=$(echo \"$grade\" |awk '{print int($0/10)}')\n    grade=$(echo \"$grade",
  "\tlocal grade letter\n\tlocal gpa\n\tlocal ngrade nletter\n\tread -r gpa\n\tlocal\
    \ i=0\n\twhile [[ $i -lt ${#1// / } ]]; do\n\t\tread -r ngrade nletter\n\t\tgrade=\"\
    $nletter\"\n\t\tlet i++\n\tdone\n\tprintf '%s\\n' \"${letter}\"", "    local grade\
    \ a b c d\n    local numerical_letter_grades\n    local ave_grade total_grades\
    \ grades_to_average\n    local i j\n    \n    ave_grade=$1\n    total_grades=${#a[@]}\n\
    \    grades_to_average=$((${#a[@]} - 1))\n    \n    numerical_letter_grades=()\n\
    \    for ((i = 0; i <= grades_to_average; i++ ))\n    do\n\ta=( ${a[i]} )\n\t\
    c=( ${c[i]} )\n\td=( ${d[i]} )\n\t\n\tgrade=$((${a[i]} * 2 + ${c[i]} * 2 + ${d[i]}\
    \ * 2))\n\t\n\tnumerical_letter_grades+=(\n\t    $((${grade}/ grades_to_average)\
    \ * ${ave_grade}))\n    done\n\n    # now we need a function that will take a\
    \ list of numbers and \n    # return the letter grades\n    # we start with a\
    \ fresh variable called letter grades\n    # and go through the list of numbers\
    \ and append the letter grade\n    # to the list of letter grades\n    for i in\
    \ ${numerical_letter_grades[@]}\n    do\n\tlettergrade=\"${grade:0:1}\"\n\t# if\
    \ the letter grade is a D-\n\tif [ ${lettergrade} == \"D-\" ]\n\tthen\n\t    lettergrade=\"\
    ${grade:0:1}B\"\n\t# if the letter grade is a C+\n\telif [ ${lettergrade} == \"\
    C+\" ]\n\tthen\n\t    lettergrade=\"${grade:0:1}B+\"\n\t# if the letter grade\
    \ is a C\n\telif [ ${lettergrade} == \"C\" ]\n\tthen\n\t    lettergrade=\"${grade:0:1}B-\"\
    \n\t# if the letter grade is a B-\n\telif [ ${lettergrade} == \"B-\" ]\n\tthen\n\
    \t    lettergrade=\"${grade:0:1}B\"\n\t# if the letter grade is a B\n\telif [\
    \ ${lettergrade} == \"B\" ]\n\tthen\n\t    lettergrade=\"${grade:0:1}B+\"\n\t\
    # if the letter grade is an A-\n\telif [ ${lettergrade} == \"A-\" ]\n\tthen\n\t\
    \    lettergrade=\"${grade:0:1}A\"\n\t# if the letter grade is an A\n\telif [\
    \ ${lettergrade} == \"A\" ]\n\tthen\n\t    lettergrade=\"${grade:0:1}A+\"\n\t\
    # if the letter grade is a D\n\telif [ ${lettergrade} == \"D\" ]\n\tthen\n\t \
    \   lettergrade=\"${grade:0:1}D+\"\n\t# if the letter grade is a B+\n\telif [\
    \ ${lettergrade}", "    local a=$1; shift\n    # Handle zero case first.\n   \
    \ if [[ -z \"$a\" ]]; then\n        a=\"0\"\n    fi\n\n    # First remove all\
    \ spaces.\n    a=${a// /}\n    # Then replace all commas with periods.\n    a=${a//,/.}\n\
    \    # Then replace all periods with commas.\n    a=${a//./,}\n    # Then replace\
    \ all spaces with plus signs.\n    a=${a//+/ +}\n    # Then replace all spaces\
    \ with minus signs.\n    a=${a//-/ -}\n    # Then replace all spaces with zeroes.\n\
    \    a=${a//0/0}\n    # Then replace all spaces with empty strings.\n    a=${a///\
    \ }\n    # Then split it back into an array.\n    local b=$a\n\n    # Go through\
    \ each grade.\n    for (( i = 1; i < ${#b[@]}; ++i )); do\n        if [[ \"${b[$i]}\"\
    \ -gt \"4.0\" ]]; then\n            b[$i]=\"A+\"\n        fi\n        if [[ \"\
    ${b[$i]}\" -gt \"3.7\" ]]; then\n            b[$i]=\"A\"\n        fi\n       \
    \ if [[ \"${b[$i]}\" -gt \"3.3\" ]]; then\n            b[$i]=\"A-\"\n        fi\n\
    \        if [[ \"${b[$i]}\" -gt \"3.0\" ]]; then\n            b[$i]=\"B+\"\n \
    \       fi\n        if [[ \"${b[$i]}\" -gt \"2.7\" ]]; then\n            b[$i]=\"\
    B\"\n        fi\n        if [[ \"${b[$i]}\" -gt \"2.3\" ]]; then\n           \
    \ b[$i]=\"B-\"\n        fi\n        if [[ \"${b[$i]}\" -gt \"2.0\" ]]; then\n\
    \            b[$i]=\"C+\"\n        fi\n        if [[ \"${b[$i]}\" -gt \"1.7\"\
    \ ]]; then\n            b[$i]=\"C\"\n        fi\n        if [[ \"${b[$i]}\" -gt\
    \ \"1.3\" ]]; then\n            b[$i]=\"C-\"\n        fi\n        if [[ \"${b[$i]}\"\
    \ -gt \"1.0\" ]]; then\n            b[$i]=\"D+\"\n        fi\n        if [[ \"\
    ${b[$i]}\" -gt \"0.7\" ]]; then\n            b[$i]=\"D\"\n        fi\n       \
    \ if [[ \"${b[$i]}\" -gt \"0.0\" ]]; then\n            b[$i]=\"D-\"\n        fi\n\
    \        if [[ \"${b[$i]}\" -eq \"0.0\" ]]; then\n            b[$i]=\"E\"\n  \
    \      fi\n    done\n\n    echo -n \"${b[@]", "    local n grades letter_grade\
    \ sum\n    grades=($1)\n    sum=$(echo \"${grades[*]}\" | awk '{ sum+=$1; print\
    \ $1 }')\n    for n in {1..$sum}; do\n        letter_grade=$(echo $grades | awk\
    \ '{ if ($1 == $n) print $2 }')\n        grades+=(\"$letter_grade\")\n    done\n\
    \    echo \"${grades[*]}\"", "    local x y grades grade\n    grades=$1\n    grade_char=$(echo\
    \ $grades | tr -d '\\n')\n    for grade in $grades; do\n        if [ \"$grade_char\"\
    \ == \"$grade\" ]; then\n            x=$(echo \"$grade\" | cut -d \".\" -f1)\n\
    \            y=$(echo \"$grade\" | cut -d \".\" -f2)\n            echo \"$x $y\"\
    \ | tr ' ' '+'\n        else\n            echo \"$grade\" | tr ' ' '+'\n     \
    \   fi\n    done", "  local letter_grades grades_str\n  grades_str=\"$1\"\n  #\
    \ The grading algorithm for numerical grades works like this: \n  # it takes the\
    \ first number as input. From this number it compares it\n  # with the other numbers\
    \ one by one (starting from the second number)\n  # If the first number compares\
    \ greater than the second number\n  # it takes the first letter grade, if the\
    \ first number compares less than\n  # the second number, it takes the second\
    \ letter grade, otherwise, it takes \n  # the letter grade that has a smaller\
    \ value.\n  # For example:\n  # 4.0 3 1.7 2 3.5  => [ 'A+' 'B' 'C-' 'C' 'A-' ]\n\
    \  letter_grades=( $( echo \"${grades_str}\" | awk '{for(i=2;i<NF;i++){print $i}}'\
    \ | awk '{print $1\"+ \"$NF}'| sort -k 2) )\n  # The list letter_grades contains\
    \ all letter grades that need to be output\n  # Example:\n  # ['A+', 'B', 'C-',\
    \ 'C', 'CA-']\n  return \"${letter_grades[@]}\"", "    grades=$1\n    for grade\
    \ in $grades;\n    do\n        if [ $grade -gt 3 ];\n        then\n          \
    \  echo \"$grade\";\n            exit 0;\n        fi;\n    done\n    exit 1;",
  "  local grade grades grades_str letters grade_list grades_list result\n  grades=$(printf\
    \ \"$1\" | sed 's/^[ \\t]*//g')\n  grades_str=$(printf \"$1\" | sed 's/^[ \\t]*//g'\
    \ | sed 's/[ \\t]*$//g')\n  grade_list=$( echo \"$grades\" | sed 's/^[  ]* //g'\
    \ | sed 's/  *$//g')\n  grades_list=$( echo \"$grades_list\" | sed 's/[  ]* //g'\
    \ | sed 's/  *$//g')\n  result=$( echo \"$grades_list\" | sed 's/[  ]* / /g' |\
    \ sed 's/  *$//g')\n  letters=$( echo \"$result\" | sed 's/[  ]/ /g' | sed 's/\
    \  *$//g')\n  echo ${letters}", "    local grade_point student_gpa student_letter\
    \ grades\n    grade_point=$(echo \"$1\" | tr -s \" \")\n    student_gpa=$(echo\
    \ \"$1\" | cut -d \" \" -f 1)\n    student_letter=$(echo \"$1\" | cut -d \" \"\
    \ -f 2)\n    grades=\"$(echo \"$1\" | cut -d \" \" -f 3)\"\n\n    # Make sure\
    \ we are not less than zero\n    if [[ \"$grade_point\" < 0 ]]; then\n       \
    \ echo \"Invalid GPA or letter\"\n        exit 1\n    fi\n\n    # Make sure we\
    \ are not greater than 100\n    if [[ \"$grade_point\" > 100 ]]; then\n      \
    \  echo \"Invalid GPA or letter\"\n        exit 1\n    fi\n\n    # Make sure we\
    \ are not greater than 7\n    if [[ \"$grade_point\" > 7 ]]; then\n        echo\
    \ \"Invalid GPA or letter\"\n        exit 1\n    fi\n\n    # Make sure we are\
    \ not less than 1\n    if [[ \"$grade_point\" < 1 ]]; then\n        echo \"Invalid\
    \ GPA or letter\"\n        exit 1\n    fi\n\n    # Make sure we have at least\
    \ 3 decimal places\n    if [[ \"$grade_point\" < 1 ]]; then\n        echo \"Invalid\
    \ GPA or letter\"\n        exit 1\n    fi\n\n    local result\n    result=$(echo\
    \ \"$grades\" | sed -n \"s/^.\\{1,3\\}\\./\\1/p\")\n    echo \"$result\"\n\n \
    \   # Remove unwanted characters\n    local result_letters\n    result_letters=$(echo\
    \ \"$result\" | tr -d '[:space:]')\n    \n    # Check if result is numeric\n \
    \   if [[ \"$result_letters\" =~ ^[0-9]+$ ]]; then\n        echo \"$result_letters\"\
    \n    else\n        echo \"Invalid letter\"\n        exit 1\n    fi\n\n    # Check\
    \ if student has given enough credits\n    if [[ \"$result_letters\" =~ ^[A-D].*\\\
    [E]$ ]]; then\n        echo \"$result_letters\"\n    else\n        echo \"Invalid\
    \ letter\"\n        exit 1\n    fi", "  # $1 is space-separated list\n  local\
    \ grade_list grades_list letter_grade\n  grade_list=($1)\n\n  # This list keeps\
    \ the letter grades\n  grades_list=()\n\n  # Loop through each grade in the list\n\
    \  for grade in \"${grade_list[@]}\"; do\n    grade=${grade:0:1}\n\n    if [ $grade\
    \ -le 3 ]; then \n      # This grade is less than or equal to 3\n      grades_list+=('A+')\n\
    \    elif [ $grade -le 5 ]; then \n      # This grade is less than or equal to\
    \ 5\n      grades_list+=('A')\n    elif [ $grade -le 7 ]; then \n      # This\
    \ grade is less than or equal to 7\n      grades_list+=('A-')\n    elif [ $grade\
    \ -le 9 ]; then \n      # This grade is less than or equal to 9\n      grades_list+=('B+')\n\
    \    elif [ $grade -le 11 ]; then \n      # This grade is less than or equal to\
    \ 11\n      grades_list+=('B')\n    elif [ $grade -le 13 ]; then \n      # This\
    \ grade is less than or equal to 13\n      grades_list+=('B-')\n    elif [ $grade\
    \ -le 15 ]; then \n      # This grade is less than or equal to 15\n      grades_list+=('C+')\n\
    \    elif [ $grade -le 17 ]; then \n      # This grade is less than or equal to\
    \ 17\n      grades_list+=('C')\n    elif [ $grade -le 19 ]; then \n      # This\
    \ grade is less than or equal to 19\n      grades_list+=('C-')\n    elif [ $grade\
    \ -le 21 ]; then \n      # This grade is less than or equal to 21\n      grades_list+=('D+')\n\
    \    elif [ $grade -le 23 ]; then \n      # This grade is less than or equal to\
    \ 23\n      grades_list+=('D')\n    elif [ $grade -le 25 ]; then \n      # This\
    \ grade is less than or equal to 25\n      grades_list+=('D-')\n    else\n   \
    \   # This grade is greater than or equal to 25\n      grades_list+=('E')\n  \
    \  fi\n  done\n\n  # This function takes care of the last grade\n  letter_grade=\"\
    ${grades_list[@]}\"\n  letter_grade=\"${letter_grade%$'\\000'}\"\n  letter_grade+=\"\
    E\"\n\n  # Return the letter grades\n  echo \"$letter_grade\"", "    local grades=$1\n\
    \    local sum=0\n    local i=0\n    while read -r grade; do\n        (( sum+=grade\
    \ ))\n        (( ++i ))\n    done <<< \"$grades\"\n    if [[ $i -eq 0 ]]; then\n\
    \        echo \"0\"\n    else\n        if (( $sum / $i )); then\n            echo\
    \ -n $(( $sum / $i ))\n        fi\n        local min=$(echo $(( $grades[-1] -\
    \ $grades[1] )) | bc -l)\n        if (( $min < 0 ));  then\n            echo -n\
    \ \"-\"\n        else\n            echo -n \"+$min\"\n        fi\n    fi", " \
    \ local gpa=$1\n  local numerical_grade=$2\n  local letter_grade=\"\"\n  local\
    \ letters=\"\"\n\n  for i in {0..($gpa-1)}\n  do\n    local numerical_value=($((${numerical_grade}*(i+1))))\n\
    \    local letter_value=(${numerical_value%?})\n    \n    if [ \"${letter_value}\"\
    \ -gt 9 ]\n    then\n      letters=\"${letters} ${letter_value}\"\n    else\n\
    \      letters=\"${letters} ${letter_value}*\"\n    fi\n  done\n\n  printf \"\
    %s\\n\" \"${letters}\" | sed 's/  */\"&\"/g' | sed 's/  *\"/\"&\"/g' | sed 's/^/\"\
    &\"/g' | sed 's/$/\"/g' | sed 's/&/\"/g'", "  local gpa\n  local i\n  local grades\n\
    \  \n  gpa=\"${1%% *}\"\n  grades=\"$( echo \"${1#* }\" | sed -e \"s/ /\\n/g\"\
    \ | sed -e \"s/^\\s*//g\" | sed -e \"s/\\s*$//g\" | sed -e \"s/^-?[0-9]\\+/A-/;s/^-?[0-9]\\\
    .\\([0-9]*\\)\\/[0-9]\\.[0-9]\\+/A-/;s/^-?[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\\
    )\\/[0-9]\\.[0-9]\\+/A-/;s/^-?[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\\
    .\\([0-9]*\\)\\/[0-9]\\.[0-9]\\+/A-/;s/^-?[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\\
    )\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.[0-9]\\+/A-/;s/^-?[0-9]\\\
    .\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\\
    )\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.[0-9]\\+/A-/;s/^-?[0-9]\\.\\([0-9]*\\)\\/[0-9]\\\
    .\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\\
    )\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.[0-9]\\+/A-/;s/^-?[0-9]\\.\\([0-9]*\\)\\/[0-9]\\\
    .\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\\
    )\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.[0-9]\\+/A-/;s/^-?[0-9]\\\
    .\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\\
    )\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\.\\([0-9]*\\)\\/[0-9]\\\
    .\\([0-9]*\\)\\/[0-9]\\.[0-9]\\+/A-", "    local grade grades=${1//[!0-9]}\n \
    \   local gpa\n    grade=$(echo \"${grades}\" | awk '{print $1}')\n    gpa=$(echo\
    \ \"${grades}\" | awk '{print $2}')\n    local output\n    output=( )\n    if\
    \ [[ \"$grade\" < \"3.0\" ]]\n    then\n        output[0]=\"A-\"\n    elif [[\
    \ \"$grade\" >= \"3.3\" ]]\n    then\n        output[0]=\"B+\"\n    elif [[ \"\
    $grade\" >= \"3.7\" ]]\n    then\n        output[0]=\"B\"\n    elif [[ \"$grade\"\
    \ >= \"4.0\" ]]\n    then\n        output[0]=\"C+\"\n    elif [[ \"$grade\" >=\
    \ \"4.3\" ]]\n    then\n        output[0]=\"C\"\n    elif [[ \"$grade\" >= \"\
    4.7\" ]]\n    then\n        output[0]=\"C\"\n    elif [[ \"$grade\" >= \"5.0\"\
    \ ]]\n    then\n        output[0]=\"D+\"\n    elif [[ \"$grade\" >= \"5.3\" ]]\n\
    \    then\n        output[0]=\"D\"\n    elif [[ \"$grade\" >= \"5.7\" ]]\n   \
    \ then\n        output[0]=\"D\"\n    elif [[ \"$grade\" < \"6.0\" ]]\n    then\n\
    \        output[0]=\"D-\"\n    elif [[ \"$grade\" >= \"6.3\" ]]\n    then\n  \
    \      output[0]=\"E\"\n    elif [[ \"$grade\" < \"7.0\" ]]\n    then\n      \
    \  output[0]=\"F\"\n    else\n        output[0]=\"F\"\n    fi\n    echo ${output[@]}",
  "    local grades\n    grades=$@\n    local numerical_grade letter_grade\n    local\
    \ grade_sum\n    grade_sum=0\n    local grade\n    for grade in $@; do\n     \
    \   grade_sum=$(( grade_sum + grade ))\n    done\n    numerical_grade=$(( grade_sum\
    \ / ${#grades} - 3 ))\n    local letter_grade\n    letter_grade=\"\"\n    for\
    \ grade in $@; do\n        if [ \"$grade_sum\" -ge \"$grade\" ]; then\n      \
    \      letter_grade=$(( grade - $numerical_grade ))\n            break\n     \
    \   fi\n    done\n    echo \"$letter_grade\"", "  local grade letter\n  local\
    \ gpa\n  local grade_array\n  local grade_string\n  local gpa_array\n  local gpa_string\n\
    \  for gpa; do\n    grade=\"${gpa% *}\"\n    letter=\"${grade:0:1}\"\n    grade_string=\"\
    ${grade} ${letter}\"\n    grade=\"${grade#* }\"\n    grade_array=($grade_string)\n\
    \    gpa_array=($grade)\n    if [[ $gpa -ge 4.0 ]]; then\n      if [[ ${gpa_array[1]}\
    \ == +* ]]; then\n        letter=\"A+\"\n      fi\n      if [[ ${gpa_array[1]}\
    \ == -* ]]; then\n        letter=\"A-\"\n      fi\n      if [[ ${gpa_array[1]}\
    \ == * ]]; then\n        letter=\"A\"\n      fi\n      if [[ ${gpa_array[1]} ==\
    \ +* ]]; then\n        letter=\"B+\"\n      fi\n      if [[ ${gpa_array[1]} ==\
    \ -* ]]; then\n        letter=\"B-\"\n      fi\n      if [[ ${gpa_array[1]} ==\
    \ * ]]; then\n        letter=\"B\"\n      fi\n      if [[ ${gpa_array[1]} == +*\
    \ ]]; then\n        letter=\"C+\"\n      fi\n      if [[ ${gpa_array[1]} == -*\
    \ ]]; then\n        letter=\"C\"\n      fi\n      if [[ ${gpa_array[1]} == * ]];\
    \ then\n        letter=\"C-\"\n      fi\n      if [[ ${gpa_array[1]} == +* ]];\
    \ then\n        letter=\"D+\"\n      fi\n      if [[ ${gpa_array[1]} == -* ]];\
    \ then\n        letter=\"D-\"\n      fi\n      if [[ ${gpa_array[1]} == * ]];\
    \ then\n        letter=\"D\"\n      fi\n      if [[ ${gpa_array[1]} == +* ]];\
    \ then\n        letter=\"E\"\n      fi\n    fi\n  done\n  printf \"%s\\n\" \"\
    ${grade_array[@]}\"", "    local grade letter\n    local i j\n    grade=$1\n \
    \   letter=\"\"\n    \n    \n    for ((i=0; i<${#grade[@]}; i++)); do\n      \
    \  j=$((i+1))\n        letter=$( expr ${grade[i]} / ${grade[j]} ) \n        \n\
    \        if [ ${grade[i]} -eq ${grade[j]} ]; then \n            letter=\"A+\"\n\
    \        elif [ $(( $(echo \"${grade[i]} * ${grade[j]}\" | bc -l) / ${grade[j]}\
    \ )) -lt 1 ]; then \n            letter=\"A\"\n        elif [ $(( $(echo \"${grade[i]}\
    \ * ${grade[j]}\" | bc -l) / ${grade[j]} )) -gt 1 ]; then \n            letter=\"\
    A-\"\n        elif [ $(( $(echo \"${grade[i]} * ${grade[j]}\" | bc -l) / ${grade[j]}\
    \ )) -eq 0 ]; then \n            letter=\"B+\"\n        elif [ $(( $(echo \"${grade[i]}\
    \ * ${grade[j]}\" | bc -l) / ${grade[j]} )) -lt 2 ]; then \n            letter=\"\
    B\"\n        elif [ $(( $(echo \"${grade[i]} * ${grade[j]}\" | bc -l) / ${grade[j]}\
    \ )) -gt 2 ]; then \n            letter=\"B-\"\n        elif [ $(( $(echo \"${grade[i]}\
    \ * ${grade[j]}\" | bc -l) / ${grade[j]} )) -eq 3 ]; then \n            letter=\"\
    C+\"\n        elif [ $(( $(echo \"${grade[i]} * ${grade[j]}\" | bc -l) / ${grade[j]}\
    \ )) -lt 4 ]; then \n            letter=\"C\"\n        elif [ $(( $(echo \"${grade[i]}\
    \ * ${grade[j]}\" | bc -l) / ${grade[j]} )) -gt 4 ]; then \n            letter=\"\
    C-\"\n        elif [ $(( $(echo \"${grade[i]} * ${grade[j]}\" | bc -l) / ${grade[j]}\
    \ )) -eq 5 ]; then \n            letter=\"D+\"\n        elif [ $(( $(echo \"${grade[i]}\
    \ * ${grade[j]}\" | bc -l) / ${grade[j]} )) -lt 7 ]; then \n            letter=\"\
    D\"\n        elif [ $(( $(echo \"${grade[i]} * ${grade[j]}\" | bc -l) / ${grade[j]}\
    \ )) -gt 7 ]; then \n            letter=\"D-\"\n        elif [ $(( $(echo \"${grade",
  "\tnumber=$1\n\tgrades=\"A+ B C- C A \"\n\tgrades=$(($numerical_gpa=$(echo \"scale=6;\
    \ $number * 2\" | bc -l)))\n\tgrades=$(($numerical_letter_grade=$(echo $grades\
    \ | tr -d \"\\n\")))\n\tgrades=$(($grades=\"$numerical_letter_grade$numerical_gpa\"\
    ))\n\tgrades=$(($grades=\"$grades$numerical_letter_grade\"))\n\tgrades=$(($grades=\"\
    $grades D+ D D D- D D D D D D- D D D D- D+ D D D- D D D\"))\n\tgrades=$(($grades=$grades$numerical_letter_grade))\n\
    \tgrades=$(($grades=$grades$numerical_gpa))\n\tgrades=$(($grades=$grades$numerical_letter_grade))\n\
    \tgrades=$(($grades=$grades$numerical_gpa))\n\tgrades=$(($grades=$grades$numerical_letter_grade))\n\
    \tgrades=$(($grades=$grades$numerical_gpa))\n\tgrades=$(($grades=$grades$numerical_letter_grade))\n\
    \tgrades=$(($grades=$grades$numerical_gpa))\n\tgrades=$(($grades=$grades$numerical_letter_grade))\n\
    \tgrades=$(($grades=$grades$numerical_gpa))\n\tgrades=$(($grades=$grades$numerical_letter_grade))\n\
    \tgrades=$(($grades=$grades$numerical_gpa))\n\tgrades=$(($grades=$grades$numerical_letter_grade))\n\
    \tgrades=$(($grades=$grades$numerical_gpa))\n\tgrades=$(($grades=$grades$numerical_letter_grade))\n\
    \tgrades=$(($grades=$grades$numerical_gpa))\n\tgrades=$(($grades=$grades$numerical_letter_grade))\n\
    \tgrades=$(($grades=$grades$numerical_gpa))\n\tgrades=$(($grades=$grades$numerical_letter_grade))\n\
    \tgrades=$(($grades=$grades$numerical_gpa))\n\tgrades=$(($grades=$grades$numerical_letter_grade))\n\
    \tgrades=$(($grades=$grades$numerical_gpa))\n\tgrade", "\t# $1 is $grades\n\t\
    # $2 is the letter grade for the grade $grades\n\t# $3 is $grades\n\t\n\t[[ -z\
    \ $1 ]] && return 1\n\t[[ -z $2 ]] && return 1\n\t[[ -z $3 ]] && return 1\n\n\t\
    gpa=$1\n\tletter=$2\n\tgpa+=$3\n\tgrades=\"${gpa% .}\"\n\n\t# Check if gpa = 1.0\
    \ and if so return letter grade\n\t[[ \"$grades\" = \"1.0\" ]] && return 0\n\t\
    \n\t\n\t# This part will go through the list and find the right letter grade for\
    \ GPA\n\twhile [[ ! $grades =~ ^[0-9]+\\.[0-9]+$ ]] ; do\n\t\t# If the grade has\
    \ more than one decimal place, then remove the extra decimal\n\t\tgrades=\"${grades/\\\
    ./}\"\n\n\t\t# Increase gpa by 0.1\n\t\tgpa+=0.1\n\t\tgrades=\"${gpa% .}\"\n\n\
    \tdone\n\n\t[[ \"$grades\" =~ ^[0-9]+\\.[0-9]+$ ]] || return 1\n\t\n\t# If the\
    \ gpa is a whole number, then return letter grade\n\t[[ \"$grades\" -eq \"$grades\"\
    \ ]] && return 0\n\t\n\t\n\t# Check if the letter is in our list\n\t[[ -z $(grep\
    \ -w \"$letter\" <<< \"$grades\") ]] || return 1", "    local number=$1\n    local\
    \ grade=\"\"\n    while (( $number >= 4 )); do\n        grade=\"${grade}A+\"\n\
    \        number=$(( $number - 4 ))\n    done\n    while (( $number >= 3.7 ));\
    \ do\n        grade=\"${grade}A\"\n        number=$(( $number - 3.7 ))\n    done\n\
    \    while (( $number >= 3.3 )); do\n        grade=\"${grade}A-\"\n        number=$((\
    \ $number - 3.3 ))\n    done\n    while (( $number >= 3.0 )); do\n        grade=\"\
    ${grade}B+\"\n        number=$(( $number - 3.0 ))\n    done\n    while (( $number\
    \ >= 2.7 )); do\n        grade=\"${grade}B\"\n        number=$(( $number - 2.7\
    \ ))\n    done\n    while (( $number >= 2.3 )); do\n        grade=\"${grade}B-\"\
    \n        number=$(( $number - 2.3 ))\n    done\n    while (( $number >= 2.0 ));\
    \ do\n        grade=\"${grade}C+\"\n        number=$(( $number - 2.0 ))\n    done\n\
    \    while (( $number >= 1.7 )); do\n        grade=\"${grade}C\"\n        number=$((\
    \ $number - 1.7 ))\n    done\n    while (( $number >= 1.3 )); do\n        grade=\"\
    ${grade}C-\"\n        number=$(( $number - 1.3 ))\n    done\n    while (( $number\
    \ >= 1.0 )); do\n        grade=\"${grade}D+\"\n        number=$(( $number - 1.0\
    \ ))\n    done\n    while (( $number >= 0.7 )); do\n        grade=\"${grade}D\"\
    \n        number=$(( $number - 0.7 ))\n    done\n    while (( $number >= 0.0 ));\
    \ do\n        grade=\"${grade}D-\"\n        number=$(( $number - 0.0 ))\n    done\n\
    \    echo \"${grade}E\"", "    local gpa_arr=($1)\n    # this if statement is\
    \ only executed when $1 is actually an array\n    if [ \"${#gpa_arr[@]}\" -eq\
    \ 0 ]; then\n        echo \"No grades were given\"\n    else\n        local gpa\
    \ grade\n        for grade in \"${gpa_arr[@]}\"; do\n            case \"$grade\"\
    \ in\n                *[!0-9]*)\n                    echo \"Invalid GPA format:\
    \ $grade\"\n                    exit 1\n                ;;\n                *)\n\
    \                    # the grades have to be converted to float\n            \
    \        # for comparison purposes\n                    # the array must be sorted\
    \ in descending order\n                    # and only the first 3 items are used\
    \ for this comparison\n                    if (( $grade < ${gpa_arr[0]} )) ; then\n\
    \                        echo \"The grade $grade is too low\"\n              \
    \      elif (( $grade > ${gpa_arr[4]} )) ; then\n                        echo\
    \ \"The grade $grade is too high\"\n                    else\n               \
    \         local grade1 grade2 grade3 grade4\n                        grade1=$(echo\
    \ \"$grade - ${gpa_arr[0]}\" | bc)\n                        grade2=$(echo \"$grade\
    \ - ${gpa_arr[1]}\" | bc)\n                        grade3=$(echo \"$grade - ${gpa_arr[2]}\"\
    \ | bc)\n                        grade4=$(echo \"$grade - ${gpa_arr[3]}\" | bc)\n\
    \                        if [ \"$grade1\" = \"0\" ]; then\n                  \
    \          grade1=\"E\"\n                        elif [ \"$grade2\" = \"0\" ];\
    \ then\n                            grade2=\"E\"\n                        elif\
    \ [ \"$grade3\" = \"0\" ]; then\n                            grade3=\"E\"\n  \
    \                      elif [ \"$grade4\" = \"0\" ]; then\n                  \
    \          grade4=\"E\"\n                        elif [ \"$grade1\" -ge \"$grade2\"\
    \ ] && [ \"$grade1\" -ge \"$grade3\" ] && [ \"$grade1\" -ge \"$grade4\" ] && [\
    \ \"$grade2\" -ge \"$grade3\" ] && [ \"$grade2\" -ge \"$grade4\" ] && [ \"$grade3\"\
    \ -ge \"$grade4\" ]; then\n                            echo \"The grade $grade\
    \ is the correct grade\"\n                            gpa_arr+=($grade)\n    \
    \                    else\n                            echo \"The grade $grade\
    \ is outside the correct range\"\n                        fi\n               \
    \     fi\n                    # the grade has to be converted to upper case\n\
    \                    # for output purposes\n                    grade=$(echo \"\
    $grade\" | tr '[:upper:]' '[:lower:]')\n                    grade+=\"+\"\n   \
    \                 grade+=\"-\"\n                    grade+=\"+\"\n           \
    \         grade+=\"-\"\n                    grade", "  local numerical_grade=$1\n\
    \  local grade letter gpa\n  for i in $(seq 0 $((${#numerical_grade} - 1)))\n\
    \  do\n    gpa=${numerical_grade:$i:1}\n    if [ \"$gpa\" -gt \"3.7\" ]; then\n\
    \      grade=\"B+\";\n    elif [ \"$gpa\" -gt \"3.3\" ]; then\n      grade=\"\
    B-\";\n    elif [ \"$gpa\" -gt \"3.0\" ]; then\n      grade=\"C+\";\n    elif\
    \ [ \"$gpa\" -gt \"2.7\" ]; then\n      grade=\"B-\";\n    elif [ \"$gpa\" -gt\
    \ \"2.3\" ]; then\n      grade=\"B-\";\n    elif [ \"$gpa\" -gt \"2.0\" ]; then\n\
    \      grade=\"C+\";\n    elif [ \"$gpa\" -gt \"1.7\" ]; then\n      grade=\"\
    C\";\n    elif [ \"$gpa\" -gt \"1.3\" ]; then\n      grade=\"C-\";\n    elif [\
    \ \"$gpa\" -gt \"1.0\" ]; then\n      grade=\"D+\";\n    elif [ \"$gpa\" -gt \"\
    0.7\" ]; then\n      grade=\"D\";\n    elif [ \"$gpa\" -gt \"0.0\" ]; then\n \
    \     grade=\"D-\";\n    else\n      grade=\"E\";\n    fi\n    echo \"${grade}\"\
    ;\n  done", "  local gpa=$1\n  local grades=$(grade_equation \"$gpa\")\n  local\
    \ i=2\n  local letter_grades\n\n  echo \"${grades[*]}\"\n  echo \"${grades[*]}\"\
    \n  echo \"${grades[*]}\"\n\n  while [ \"$i\" -le \"${#grades[@]}\" ]; do\n  \
    \  local g=$(echo \"$gpa\" | cut -d, -f$i)\n    local grade=$(echo \"$grades[$i]\"\
    \ | cut -d'\"' -f1)\n\n    letter_grades=\"${letter_grades} ${grade}\"\n    ((\
    \ i++ ))\n\n  done\n\n  echo \"${letter_grades}\"\n", "  local grade_str=$1\n\
    \  local grades=( $( echo \"$grade_str\" | sed 's/[^\\.-0-9]/ /g' | tr '[:upper:]'\
    \ '[:lower:]' ) )\n  local letter_grades=()\n  local i=0\n  while [ \"$i\" -lt\
    \ \"$#\" ] && [ \"$grades\" != \"\" ]; do\n    local gpa=${grades[0]}\n    local\
    \ grade=${grades[1]}\n    local letter=\"${gpa}+${grade}\"\n    local remainder\n\
    \    while [ \"$i\" -lt \"$#\" ] && [ \"$(echo \"$grade\" | cut -c1-2 | tr '[:upper:]'\
    \ '[:lower:]')\" != \"\" ]; do\n      remainder=$(( ${grade:0:1} + ${grade:2:1}\
    \ ))\n      grade=${remainder:0:1}\n      letter=\"${remainder}+${grade}\"\n \
    \   done\n    letter_grades+=( \"${letter}\" )\n    grades=( \"${grades[@]:2}\"\
    )\n    i=$(( $i + 1 ))\n  done\n  echo \"${letter_grades[@]}\"", "  # This function\
    \ takes a string and returns a list\n  # of numerical grades and letters grades\n\
    \  # The list starts with all of the letter grades\n  local numerical_grades=\"\
    A B C D+  D E F-  F G+ G H+ H I-  I J- J K+ K L+ L M- M\"\n  local letter_grades=\"\
    A+ A A- B+ B B- C+ C C-\"\n  local i=0\n  while [ $i -lt ${#1} ]; do\n    local\
    \ grade=${1:$i:1}\n    local grades=${numerical_grades:$i:1}\n    local grade_letter=${letter_grades:$i:1}\n\
    \    local grade_letters=${grade_letter//+/-}\n    local grade_letters_number=${grade_letters_number//+/-}\n\
    \    local grade_letters_numbers=${grade_letters_numbers//+/-}\n    if [[ ${grades:0:1}\
    \ =~ ^[0-9]+$ ]]; then\n      local grades_number=${grades//+/-}\n      local\
    \ letters_number=${grade_letters_numbers:$i:1}\n      local grades_numbers=${grade_letters_numbers_new:$i:1}\n\
    \      local grade_number=$((${grades_number}*100))\n      local letter_number=$((${letter_number}*100))\n\
    \      local letter_grade=$((${letter_number}/100))\n      local letter_grades=${letter_grades//$letter_grade/${grade_letters}}\n\
    \      echo ${letter_grades}\n    else\n      echo ${letter_grades}\n    fi\n\
    \    ((i=i+1))\n  done", "\tlocal grades=$1\n\tlocal letter_grades=\"A-\"\n\t\
    for grade in $grades; do\n\t\tlocal gradeParts=( ${grade//[!0-9]/} )\n\t\tif [[\
    \ $grade =~ ^[1-9][0-9]*$ ]]; then\n\t\t\tlocal gpa=${gradeParts[0]}\n\t\t\tlocal\
    \ gpaString=$( echo \"${gpa}\" | sed 's/\\./,/g' | sed 's/$/+/g' )\n\t\t\tlocal\
    \ letterGrade=$( echo \"${gpaString}\" | bc )\n\t\t\tlocal gpaStringParts=( ${gpaString//[!0-9,.]/\
    \ } )\n\t\t\tlocal gpaString=${gpaStringParts[0]}\n\t\t\tlocal letterGrade=\"\
    ${letterGrade}\"\n\t\t\tif [[ $grade > 3.3 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}-\"\
    \n\t\t\telif [[ $grade > 2.7 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}-\"\
    \n\t\t\telif [[ $grade > 2.3 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}-\"\
    \n\t\t\telif [[ $grade > 2.0 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}-\"\
    \n\t\t\telif [[ $grade > 1.7 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}-\"\
    \n\t\t\telif [[ $grade > 1.3 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}-\"\
    \n\t\t\telif [[ $grade > 1.0 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}-\"\
    \n\t\t\telif [[ $grade > 0.7 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}-\"\
    \n\t\t\telif [[ $grade > 0.0 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}-\"\
    \n\t\t\telif [[ $grade > 0.0 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}\"\n\
    \t\t\telif [[ $grade > 0.7 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}\"\n\t\
    \t\telif [[ $grade > 1.0 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}\"\n\t\t\
    \telif [[ $grade > 1.3 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}\"\n\t\t\t\
    elif [[ $grade > 1.7 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}\"\n\t\t\t\
    elif [[ $grade > 2.0 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}\"\n\t\t\t\
    elif [[ $grade > 2.3 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade}\"\n\t\t\t\
    elif [[ $grade > 2.7 ]]; then\n\t\t\t\tletterGrade=\"${letterGrade", "    local\
    \ values=$1\n    local grades=()\n    \n    local grade_num\n    local grade_letter\n\
    \    \n    local grade\n    \n    local i=0\n    \n    for grade in \"${values[@]}\"\
    ; do\n        grade_num=$(( ${grade} - 4.0 ))\n        if [[ ${grade_num} -lt\
    \ 0 ]]; then\n            grade_letter=\"E\"\n        elif [[ ${grade_num} -le\
    \ 0 ]]; then\n            grade_letter=\"D-\"\n        elif [[ ${grade_num} -ge\
    \ 0 ]]; then\n            grade_letter=\"B-\"\n        fi\n        grades+=\"\
    '${grade_letter}'\"\n    done\n    echo \"${grades[@]}\"", "    local grade gpa\
    \ letter\n    grade=$1\n    gpa=$(echo ${grade} | cut -d' ' -f1)\n    if [ \"\
    ${gpa}\" -eq 0.0 ]\n    then\n        letter='D'\n    elif [ \"${gpa}\" -gt 3.0\
    \ ]\n    then\n        if [ \"${gpa}\" -eq 3.0 ]\n        then\n            letter='A-'\n\
    \        elif [ \"${gpa}\" -eq 3.7 ]\n        then\n            letter='A'\n \
    \       else\n            letter='A+'\n        fi\n    elif [ \"${gpa}\" -gt 3.3\
    \ ]\n    then\n        if [ \"${gpa}\" -eq 3.7 ]\n        then\n            letter='A'\n\
    \        elif [ \"${gpa}\" -eq 3.3 ]\n        then\n            letter='B+'\n\
    \        else\n            letter='B'\n        fi\n    elif [ \"${gpa}\" -gt 3.7\
    \ ]\n    then\n        if [ \"${gpa}\" -eq 3.3 ]\n        then\n            letter='B'\n\
    \        elif [ \"${gpa}\" -eq 3.7 ]\n        then\n            letter='C+'\n\
    \        else\n            letter='C'\n        fi\n    elif [ \"${gpa}\" -gt 3.9\
    \ ]\n    then\n        if [ \"${gpa}\" -eq 3.7 ]\n        then\n            letter='C'\n\
    \        elif [ \"${gpa}\" -eq 3.9 ]\n        then\n            letter='C-'\n\
    \        else\n            letter='C'\n        fi\n    elif [ \"${gpa}\" -gt 4.0\
    \ ]\n    then\n        if [ \"${gpa}\" -eq 3.9 ]\n        then\n            letter='C'\n\
    \        elif [ \"${gpa}\" -eq 4.0 ]\n        then\n            letter='D+'\n\
    \        else\n            letter='D'\n        fi\n    elif [ \"${gpa}\" -gt 4.0\
    \ ]\n    then\n        if [ \"${gpa}\" -eq 4.0 ]\n        then\n            letter='D'\n\
    \        else\n            letter='D-'\n        fi\n    else\n        letter='E'\n\
    \    fi\n    echo \"${letter}\"", "  # convert GPA to letter grade\n  gpa \"$1\"\
    \n  local i\n  local grade\n  local letter\n  grades=(\"A\" \"B\" \"C\" \"D\"\
    \ \"E\")\n  for i in $(seq 1 ${#gpa[@]})\n  do\n    # if the difference between\
    \ a student's GPA\n    # and the next student's is greater than\n    # the threshold\n\
    \    # print \"A\" or \"B\" or \"C\" or \"D\" or \"E\"\n    # if the difference\
    \ between a student's\n    # GPA and the previous one is less than\n    # the\
    \ threshold\n    # print \"B\" or \"C\" or \"D\" or \"E\"\n    # if the difference\
    \ between a student's GPA and the previous one is \n    # equal to the threshold\n\
    \    # print \"C\" or \"D\" or \"E\"\n    # print \"D\" or \"E\"\n    # if the\
    \ difference between a student's GPA and \n    # the previous one is less than\
    \ or equal to threshold\n    # print \"E\"\n    difference=$(echo \"${gpa[$i]}-${gpa[$(($i-1))]}\"\
    \ | bc)\n    letter=${grades[$(( 15 - $difference ))]}\n    grades+=(${letter})\n\
    \  done\n  echo \"${grades[*]}\"", "  local a b c d e f g h i j k l m n o p q\
    \ r s t u v w x y z\n  a=${1:0:1}\n  i=${1:1:1}\n  j=${1:2:1}\n  k=${1:3:1}\n\
    \  l=${1:4:1}\n  m=${1:5:1}\n  n=${1:6:1}\n  o=${1:7:1}\n  p=${1:8:1}\n  q=${1:9:1}\n\
    \  r=${1:10:1}\n  s=${1:11:1}\n  t=${1:12:1}\n  u=${1:13:1}\n  v=${1:14:1}\n \
    \ w=${1:15:1}\n  x=${1:16:1}\n  y=${1:17:1}\n  z=${1:18:1}\n  echo \"$a$i$j$k$l$m$n$o$p$q$r$s$t$u$v$w$x$y$z\"",
  "    local gpa=$1\n    local grades=\"\"\n    local grade\n    \n    \n    # Loop\
    \ from 4.0 to 1.0 and calculate grade for each loop\n    for ((grade=4.0; grade<=1.0;\
    \ grade+=.1))\n    do\n        grades=\"${grades}${grade} \"\n        if [[ \"\
    ${gpa%.*}\" -gt \"${grade}\" ]]\n        then\n            grades=\"${grades}A+,\"\
    \n        elif [[ \"${gpa%.*}\" -ge \"${grade}\" ]]\n        then\n          \
    \  grades=\"${grades}A,\" \n        elif [[ \"${gpa%.*}\" -lt \"${grade}\" ]]\n\
    \        then\n            grades=\"${grades}A-,\"\n        elif [[ \"${gpa%.*}\"\
    \ -lt \"${grade}\" ]]\n        then\n            grades=\"${grades}B+,\"\n   \
    \     elif [[ \"${gpa%.*}\" -ge \"${grade}\" ]]\n        then\n            grades=\"\
    ${grades}B,\" \n        elif [[ \"${gpa%.*}\" -gt \"${grade}\" ]]\n        then\n\
    \            grades=\"${grades}B-,\"\n        elif [[ \"${gpa%.*}\" -ge \"${grade}\"\
    \ ]]\n        then\n            grades=\"${grades}C+,\"\n        elif [[ \"${gpa%.*}\"\
    \ -lt \"${grade}\" ]]\n        then\n            grades=\"${grades}C,\" \n   \
    \     elif [[ \"${gpa%.*}\" -lt \"${grade}\" ]]\n        then\n            grades=\"\
    ${grades}C-,\"\n        elif [[ \"${gpa%.*}\" -ge \"${grade}\" ]]\n        then\n\
    \            grades=\"${grades}D+,\"\n        elif [[ \"${gpa%.*}\" -ge \"${grade}\"\
    \ ]]\n        then\n            grades=\"${grades}D,\"\n        elif [[ \"${gpa%.*}\"\
    \ -ge \"${grade}\" ]]\n        then\n            grades=\"${grades}D-\"\n    \
    \    fi\n    done\n\n    # Remove trailing comma\n    grades=${grades:0:((${#grades}-1))\
    \ }\n\n    # Remove first comma\n    grades=${grades:1:((${#grades}-1)) }\n\n\
    \    # Return grades\n    echo \"${grades}\"", "    # Write your code here\n \
    \   GPA_1=$1\n    GPA_2=$2\n    GPA_3=$3\n    GPA_4=$4\n    GPA_5=$5\n    GPA_6=$6\n\
    \    GPA_7=$7\n    GPA_8=$8\n    GPA_9=$9\n    GPA_10=$10\n    GPA_11=$11\n  \
    \  GPA_12=$12\n    GPA_13=$13\n    GPA_14=$14\n    GPA_15=$15\n    GPA_16=$16\n\
    \    GPA_17=$17\n    GPA_18=$18\n    GPA_19=$19\n    GPA_20=$20\n    GPA_21=$21\n\
    \    GPA_22=$22\n    GPA_23=$23\n    GPA_24=$24\n    GPA_25=$25\n    GPA_26=$26\n\
    \    GPA_27=$27\n    GPA_28=$28\n    GPA_29=$29\n    GPA_30=$30\n    GPA_31=$31\n\
    \    GPA_32=$32\n    GPA_33=$33\n    GPA_34=$34\n    GPA_35=$35\n    GPA_36=$36\n\
    \    GPA_37=$37\n    GPA_38=$38\n    GPA_39=$39\n    GPA_40=$40\n    GPA_41=$41\n\
    \    GPA_42=$42\n    GPA_43=$43\n    GPA_44=$44\n    GPA_45=$45\n    GPA_46=$46\n\
    \    GPA_47=$47\n    GPA_48=$48\n    GPA_49=$49\n    GPA_50=$50\n    GPA_51=$51\n\
    \    GPA_52=$52\n    GPA_53=$53\n    GPA_54=$54\n    GPA_55=$55\n    GPA_56=$56\n\
    \    GPA_57=$57\n    GPA_58=$58\n    GPA_59=$59\n    GPA_60=$60\n    GPA_61=$61\n\
    \    GPA_62=$62\n    GPA_63=$63\n    GPA_64=$64\n    GPA_65=$65\n    GPA_66=$66\n\
    \    GPA_67=$67\n    GPA_68=$68\n    GPA_69=$69\n    GPA_70=$70\n    GPA_71=$71\n\
    \    GPA_72=$72\n    GPA_", "  local grade gpa\n  read -r grade gpa <<< \"$1\"\
    \n  case \"$grade\" in\n    \"\"|*)\n      echo \"$grade\"\n      ;;\n    *)\n\
    \      echo \"$(gpa_to_letters \"$(gpa_from_gpa \"$(gpa_from_gpa \"$gpa\")\")\"\
    )\"\n      ;;\n  esac", "    local grades\n    grades=$@\n    grades=$(echo \"\
    $grades\" | cut -d \" \" -f1)\n    grades=$(echo \"$grades\" | sed 's/\\(^.*\\\
    )/\\1/')\n    grades=$(echo \"$grades\" | sed 's/[0-9]\\+/-/g')\n    grades=$(echo\
    \ \"$grades\" | sed 's/[0-9]\\-/\\+/g')\n    grades=$(echo \"$grades\" | sed 's/^/\\\
    +/g')\n    grades=$(echo \"$grades\" | sed 's/$/+/g')\n    grades=$(echo \"$grades\"\
    \ | sed 's/-\\+/-/g')\n    grades=$(echo \"$grades\" | sed 's/\\+$/+/g')\n   \
    \ grades=$(echo \"$grades\" | sed 's/\\-$/-/g')\n    grades=$(echo \"$grades\"\
    \ | sed 's/\\-\\-/-/g')\n    grades=$(echo \"$grades\" | sed 's/^\\+\\+/+/g')\n\
    \    grades=$(echo \"$grades\" | sed 's/\\+-\\+/-/g')\n    grades=$(echo \"$grades\"\
    \ | sed 's/\\-\\+$/+/g')\n    grades=$(echo \"$grades\" | sed 's/\\+-\\+/-/g')\n\
    \    grades=$(echo \"$grades\" | sed 's/\\-\\-\\+/-/g')\n    grades=$(echo \"\
    $grades\" | sed 's/^\\+\\-\\+/+/g')\n    grades=$(echo \"$grades\" | sed 's/\\\
    +\\-\\+/-/g')\n    grades=$(echo \"$grades\" | sed 's/\\-\\+$/+/g')\n    grades=$(echo\
    \ \"$grades\" | sed 's/\\-\\-\\+/-/g')\n    grades=$(echo \"$grades\" | sed 's/^\\\
    -\\-\\+/+/g')\n    grades=$(echo \"$grades\" | sed 's/\\-\\-\\+/-/g')\n    grades=$(echo\
    \ \"$grades\" | sed 's/^\\-\\+\\+/+/g')\n    grades=$(echo \"$grades\" | sed 's/\\\
    -\\+\\+/-/g')\n    grades=$(echo \"$grades\" | sed 's/\\-\\-\\+/-/g')\n    grades=$(echo\
    \ \"$grades\" | sed 's/^\\+\\-\\-\\+/+/g')\n    grades=$(echo \"$grades\" | sed\
    \ 's/", "    local GRADE letter grade\n    while [[ -n \"$1\" ]]; do\n       \
    \ # read next number from the list\n        grade=\"$(echo \"$1\" | cut -d \"\
    \ \" -f 1)\"\n        # check if it is a letter grade\n        if [[ \"${grade}\"\
    \ =~ ^([A-Z]|[B-D])$\n        ]]; then\n            letter=\"$1\"\n          \
    \  shift\n            # add the letter grade to the list\n            grades=\"\
    $grades $letter\"\n            # read the next number from the list \n       \
    \     grade=\"$(echo \"$1\" | cut -d \" \" -f 1)\"\n        fi\n    done\n   \
    \ echo \"$grades\" ", "    IFS=\" \"\n    for numerical in $1; do\n        grade=`echo\
    \ $numerical | awk '{print $2}'`\n        if [[ $grade -eq $numerical]]; then\n\
    \            echo \"$numerical is a numerical grade\"\n        else\n        \
    \    echo \"$numerical is an '$grade' grade\"\n        fi\n    done", "  local\
    \ grades\n  grades=$( echo \"$1\" | sed 's/,/\" \"/g' )\n  echo \"$grades\" |\
    \ \n    sed 's/.*/\"&\"/g' |\n    awk '{ printf(\"%s \",$1) }' | \n    sed 's/\"\
    //g' | \n    sed 's/ [0-9] *//g' |\n    awk 'BEGIN { FS = \" \" }\n    { print\
    \ NF - NF % 10, \"+-\"[NF % 10], \"B+\"[NF / 10 | 0] }' |\n    sort -n", "   \
    \ local grades=$1\n    local i\n    local grade\n    local numerical_grade\n \
    \   numerical_grade=0\n    for ((i=0;i<${#grades};i++)); do\n        grade=${grades:$i:1}\n\
    \        if ((grade > 0)); then\n            numerical_grade=$((numerical_grade\
    \ + 1))\n        fi\n    done\n    if [[ $((numerical_grade % 2)) -eq 0 ]]; then\n\
    \        numerical_grade=$((numerical_grade / 2))\n    fi\n    local letter_grade\n\
    \    local a=1\n    local b=1\n    local c=1\n    local d=1\n    local e=1\n \
    \   for ((i=0;i<${#grades};i++)); do\n        grade=${grades:$i:1}\n        if\
    \ ((grade > 0)); then\n            if [[ $((grade % 2)) -eq 0 ]]; then\n     \
    \           if ((grade > 2)); then\n                    letter_grade=$(($a * 2\
    \ - 1))\n                else\n                    letter_grade=$(($a * 2))\n\
    \                fi\n            else\n                if ((grade > 1)); then\n\
    \                    letter_grade=$(($b * 2 - 1))\n                else\n    \
    \                letter_grade=$(($b * 2))\n                fi\n            fi\n\
    \            letter_grade=$(($letter_grade - 1))\n        fi\n    done\n    letter_grade=$(($letter_grade\
    \ + 1))\n    echo $(($letter_grade))", "    # Declare variables\n    GPA=$1\n\
    \    grades=\" $GPA\"\n\n    # Handle grades < 0\n    if [[ \"$GPA\" -lt 0 ]];\
    \ then\n        echo \"GPA < 0\"\n        return -1\n    fi\n\n    # Handle grades\
    \ > 5\n    if [[ \"$GPA\" -gt 5 ]]; then\n        echo \"GPA > 5\"\n        return\
    \ -1\n    fi\n\n    # Handle grades 0\n    if [[ \"$GPA\" -eq 0 ]]; then\n   \
    \     echo \"GPA = 0\"\n        return -1\n    fi\n\n    grades=\" $( \n     \
    \   # Grades for every grade of 4.0\n        \"$( \n            if [[ \"$GPA\"\
    \ -gt 4.0 ]]; then\n                echo \"\\\"A+\\\"\"\n            fi\n    \
    \        if [[ \"$GPA\" -eq 4.0 ]]; then\n                echo \"\\\"A\\\"\"\n\
    \            fi\n            if [[ \"$GPA\" -lt 4.0 ]]; then\n               \
    \ echo \"\\\"A-\\\"\"\n            fi\n        )\"\n\n        # Grades for every\
    \ grade of < 3.7\n        \"$( \n            if [[ \"$GPA\" -gt 3.7 ]]; then\n\
    \                echo \"\\\"A+\\\"\"\n            fi\n            if [[ \"$GPA\"\
    \ -eq 3.7 ]]; then\n                echo \"\\\"A\\\"\"\n            fi\n     \
    \       if [[ \"$GPA\" -lt 3.7 ]]; then\n                echo \"\\\"A-\\\"\"\n\
    \            fi\n        )\"\n\n        # Grades for every grade of < 3.3\n  \
    \      \"$( \n            if [[ \"$GPA\" -gt 3.3 ]]; then\n                echo\
    \ \"\\\"A+\\\"\"\n            fi\n            if [[ \"$GPA\" -eq 3.3 ]]; then\n\
    \                echo \"\\\"A\\\"\"\n            fi\n            if [[ \"$GPA\"\
    \ -lt 3.3 ]]; then\n                echo \"\\\"A-\\\"\"\n            fi\n    \
    \    )\"\n\n        # Grades for every grade of < 3.0\n        \"$( \n       \
    \     if [[ \"$GPA\" -gt 3.0 ]]; then\n                echo \"\\\"A+\\\"\"\n \
    \           fi\n            if [[ \"$GPA\" -eq 3.0 ]]; then\n                echo\
    \ \"\\\"A\\\"\"\n            fi\n            if [[ \"$GPA\" -lt 3.0 ]]; then\n\
    \                echo \"\\\"A-\\\"\"\n            fi\n        )\"\n\n        #\
    \ Grades for every grade of < 2.7\n        \"$( \n            if [[ \"$GPA\" -gt\
    \ 2.7 ]]; then\n                echo \"\\\"A+\\\"\"\n            fi\n        \
    \    if [[ \"$GPA\" -eq 2.7 ]]; then\n                echo \"\\\"A\\\"\"\n   \
    \         fi\n            if [[ \"$GPA\" ", "    local i letter\n    \n    for\
    \ i in ${!1}; do\n        # Convert number to letter grade and add it to a list\n\
    \        letter=${1[i]}\n        letter=${letter:0:1}\n        echo \"${letter:1}\"\
    \n    done", "    grades=( ${1//:/ } )\n    grades+=( A B C D E )\n    grades+=(\
    \ A B C D E )\n    grades+=( A B C D E )\n    grades+=( A B C D E )\n    grades+=(\
    \ A B C D E )\n    grades+=( A B C D E )\n    grades+=( A B C D E )\n    grades+=(\
    \ A B C D E )\n    grades+=( A B C D E )\n    grades+=( A B C D E )\n    grades+=(\
    \ A B C D E )\n    grades+=( A B C D E )\n    grades+=( A B C D E )\n    grades+=(\
    \ A B C D E )\n    grades+=( A B C D E )\n    grades+=( A B C D E )\n    grades+=(\
    \ A B C D E )\n    grades+=( A B C D E )\n    grades+=( A B C D E )\n    grades+=(\
    \ A B C D E )\n    grades+=( A B C D E )\n    grades+=( A B C D E )\n    grades+=(\
    \ A B C D E )\n    grades+=( A B C D E )\n    grades+=( A B C D E )\n    grades+=(\
    \ A B C D E )\n    grades+=( A B C D E )\n    grades+=( A B C D E )\n    grades+=(\
    \ A B C D E )\n    grades+=( A B C D E )\n    grades+=( A B C D E )\n    grades+=(\
    \ A B C D E )\n    grades+=( A B C D E )\n    grades+=( A B C D E )\n    grades+=(\
    \ A B C D E )\n    grades+=( A B C D E )\n    grades+=( A B C D E )\n    grades+=(\
    \ A B C D E )\n    grades+=( A B C D E )\n    grades+=( A B C D E )\n    grades+=(\
    \ A B C D E )\n    grades+=( A B C D ", "    local gpa=${1:-\".0\"}\n    local\
    \ letter=0\n    while [[ \"$gpa\" != \"\" ]]; do\n        if [[ $gpa -gt 3.3 ]];\
    \ then\n            letter=3\n        fi\n        if [[ $gpa -gt 2.7 ]]; then\n\
    \            letter=2\n        fi\n        if [[ $gpa -gt 2.3 ]]; then\n     \
    \       letter=2\n        fi\n        if [[ $gpa -gt 2.0 ]]; then\n          \
    \  letter=2\n        fi\n        if [[ $gpa -gt 1.7 ]]; then\n            letter=1\n\
    \        fi\n        if [[ $gpa -gt 1.3 ]]; then\n            letter=1\n     \
    \   fi\n        if [[ $gpa -gt 1.0 ]]; then\n            letter=1\n        fi\n\
    \        if [[ $gpa -gt 0.7 ]]; then\n            letter=1\n        fi\n     \
    \   if [[ $gpa -gt 0.0 ]]; then\n            letter=0\n        fi\n        if\
    \ [[ $gpa -gt 0.0 ]]; then\n            letter=0\n        fi\n        gpa=${gpa%%.*}\
    \ # remove everything after decimal point (optional)\n    done\n    echo \"$letter\
    \ $letter\" # return the letter grade and letter value", "  local grades=$1\n\
    \  local total_grades=${#grades}\n  local num_grade_array=( $( echo \"${grades}\"\
    \ | tr -s \" \" \"  \" | sort -n -r -k 2 | head -n $total_grades ) )\n  local\
    \ num_grades=${#num_grade_array[@]}\n  local letter_grade_array=( $( echo \"${grades}\"\
    \ | tr -s \" \" \"  \" | sort -n -r -k 3 | head -n $total_grades ) )\n  local\
    \ letter_grades=${#letter_grade_array[@]}\n  echo \"$letter_grades\" # print the\
    \ result", "  local grade_string gpa_string grade\n  gpa_string=$1\n  grade_string=$(echo\
    \ $gpa_string | awk '{print $1}')\n  grade=$(echo $grade_string | awk '{print\
    \ $2}')\n  grade_array=($(echo $grade | tr ' ' '\\n'))\n  \n  while read -r line;\
    \ do\n    if [[ \"$line\" == \"GPA\" ]]; then\n      echo \"$line\"\n    fi\n\
    \  done <<< \"$gpa_string\"\n\n  local grade_array=($(echo $grade | tr ' ' '\\\
    n'))\n\n  local i j\n  i=$((${#grade_array[@]}-1))\n  while [[ ${#grade_array[@]}\
    \ -gt 0 ]]; do\n    ((${i}--))\n    (( ${i} < 0 )) && { i=0; }\n    grade=${grade_array[i]}\n\
    \    if [[ \"$grade\" == \"-\" ]]; then\n      grade=\"C\"\n    elif [[ \"$grade\"\
    \ == \"+\" ]]; then\n      grade=\"D\"\n    fi\n    echo \"${grade_array[i+1]}+$grade\"\
    \n  done", "    local n g\n    local i grades\n    grades=$(echo $1 | sed 's/\
    \ /\",\"/g')\n    grades=$(echo $grades | sed 's/^\"//g;s/\"$//g')\n    for ((i=0;\
    \ i<${#grades}; i++))\n    do\n        g=$(echo $grades | cut -d\",\" -f $i)\n\
    \        n=$(echo $n | cut -d\",\" -f $i)\n        if [[ $g -ne \"0.0\" ]] ; then\n\
    \            echo \"\\\"${g}\\\", \\\"${n}\\\"\" \n        else\n            echo\
    \ \"\\\"${g}\\\", \\\"E\\\"\"\n        fi\n    done", "    local grades=$1\n \
    \   local grade\n    grades=${grades//[!0-9.]/ }  # remove non-numerical characters\n\
    \    grades=${grades/ /+} # replace spaces with +\n    grades=${grades/,/ }  #\
    \ remove commas\n    grades=${grades/+/-} # replace +s with -\n    grades=${grades/\
    \ /} # remove spaces again\n    grades=${grades/}/ }  # remove trailing spaces\n\
    \    grades=${grades/}/ }  # remove trailing spaces\n    grades=${grades/+/ }\
    \  # remove leading spaces\n    grades=${grades/-/ }  # remove trailing spaces\n\
    \    grades=${grades/-/ }  # remove trailing spaces\n    grades=${grades/+/ }\
    \  # remove leading spaces\n    grades=${grades/-/ }  # remove trailing spaces\n\
    \    grades=${grades/}/ }  # remove trailing spaces\n    grades=${grades/+/ }\
    \  # remove leading spaces\n    grades=${grades/-/ }  # remove trailing spaces\n\
    \    grades=${grades/}/ }  # remove trailing spaces\n    grades=${grades/+/ }\
    \  # remove leading spaces\n    grades=${grades/-/ }  # remove trailing spaces\n\
    \    grades=${grades/}/ }  # remove trailing spaces\n    grades=${grades/+/ }\
    \  # remove leading spaces\n    grades=${grades/-/ }  # remove trailing spaces\n\
    \    grades=${grades/}/ }  # remove trailing spaces\n    grades=${grades/+/ }\
    \  # remove leading spaces\n    grades=${grades/-/ }  # remove trailing spaces\n\
    \    grades=${grades/}/ }  # remove trailing spaces\n    grades=${grades/+/ }\
    \  # remove leading spaces\n    grades=${grades/-/ }  # remove trailing spaces\n\
    \    grades=${grades/}/ }  # remove trailing spaces\n    grades=${grades/+/ }\
    \  # remove leading spaces\n    grades=${grades/-/ }  # remove trailing spaces\n\
    \    grades=${grades/}/ }  # remove trailing spaces\n    grades=${grades/+/ }\
    \  # remove leading spaces\n    grades=${grades/-/ }  # remove trailing spaces\n\
    \    grades=${grades/}/ }  # remove trailing spaces\n    grades=${grades/+/ }\
    \  # remove leading spaces\n    grade", "    local grade_equation=\"$(echo $1\
    \ | tr -d '[[:space:]]')\"\n    if [ \"${#grade_equation}\" -eq 0 ]; then\n  \
    \      return 0\n    fi\n    local gpa_sum=0\n    local letter_grade=\"\"\n  \
    \  while [[ ${grade_equation} =~ ^([0-9]*\\.[0-9]+) ]];\n    do\n        gpa_sum=$(($gpa_sum+${BASH_REMATCH[1]}))\n\
    \        local temp=${grade_equation}\n        grade_equation=${temp#*[[:space:]]}\n\
    \    done\n    for gpa_grade in ${grade_equation}; do\n        if [[ \"$gpa_grade\"\
    \ -le \"2.0\" ]]; then\n            if [[ \"$gpa_grade\" -gt \"2.0\" ]]; then\n\
    \                letter_grade=$gpa_grade\n            else\n                letter_grade=\"\
    D\"\n            fi\n        elif [[ \"$gpa_grade\" -le \"1.0\" ]]; then\n   \
    \         if [[ \"$gpa_grade\" -gt \"1.0\" ]]; then\n                letter_grade=$gpa_grade\n\
    \            else\n                letter_grade=\"E\"\n            fi\n      \
    \  elif [[ \"$gpa_grade\" -le \"1.0\" ]]; then\n            if [[ \"$gpa_grade\"\
    \ -gt \"1.0\" ]]; then\n                letter_grade=$gpa_grade\n            else\n\
    \                letter_grade=\"D\"\n            fi\n        else\n          \
    \  if [[ \"$gpa_grade\" -gt \"1.0\" ]]; then\n                letter_grade=$gpa_grade\n\
    \            else\n                letter_grade=\"E\"\n            fi\n      \
    \  fi\n    done\n    local gpa=$(($gpa_sum / ${#grade_equation}))\n    echo \"\
    $letter_grade $gpa\"", "    # $1 is a space-separated list\n    echo -n \"Input\
    \ the grades, one per line, separated by space: \"\n    read grades\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $1}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $2}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $3}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $4}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $5}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $6}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $7}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $8}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $9}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $10}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $11}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $12}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $13}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $14}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $15}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $16}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $17}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $18}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $19}'))\n    grade_letter=$(printf\
    \ \"%.2f\\n\" $(echo \"$grades\" | awk '{print $20}'))\n    grade_letter=$(printf ",
  "    # $1 is a space-separated list\n    local numerical_letter=$1\n    # A list\
    \ with the grade and the corresponding letter\n    local letter_grade=(\n    \
    \    \"A+\"    4.0\n        \"A\"    >3.7\n        \"A-\"    >3.3\n        \"\
    B+\"    3.0\n        \"B\"    >2.7\n        \"B-\"    >2.3\n        \"C+\"   \
    \ 2.0\n        \"C\"    >1.7\n        \"C-\"    >1.3\n        \"D+\"    1.0\n\
    \        \"D\"    >0.7\n        \"D-\"    0.0\n        \"\"      0.0\n    )\n\
    \    # Check if the numerical grade is bigger than 0.0\n    # If it is, then return\
    \ the corresponding letter grade\n    if (( numerical_letter > 0.0 )); then\n\
    \        # Go through the grade array and find the letter grade with the highest\
    \ grade\n        for grade in \"${letter_grade[@]}\"; do\n            if [ \"\
    ${grade}\" == \"${letter_grade[0]}\" ]; then \n                # If this is the\
    \ biggest grade, return the whole array\n                echo \"${letter_grade[@]}\"\
    \n                break\n            else\n                # If the grade is lower\
    \ than the biggest grade, keep searching\n                if [ \"${grade}\" -gt\
    \ \"${letter_grade[0]}\" ]; then \n                    # If the grade is lower\
    \ than the smallest grade, keep searching\n                    if [ \"${grade}\"\
    \ -lt \"${letter_grade[1]}\" ]; then \n                        # If the grade\
    \ is lower than the second smallest grade, keep searching\n                  \
    \      if [ \"${grade}\" -lt \"${letter_grade[2]}\" ]; then \n               \
    \             # If the grade is lower than the third smallest grade, keep searching\n\
    \                            if [ \"${grade}\" -lt \"${letter_grade[3]}\" ]; then\
    \ \n                                # If the grade is lower than the fourth smallest\
    \ grade, keep searching\n                                if [ \"${grade}\" -lt\
    \ \"${letter_grade[4]}\" ]; then \n                                    # If the\
    \ grade is lower than the fifth smallest grade, keep searching\n             \
    \                       if [ \"${grade}\" -lt \"${letter_grade[5]}\" ]; then \n\
    \                                        # If the grade is lower than the sixth\
    \ smallest grade, keep searching\n                                        if [\
    \ \"${grade}\" -lt \"${letter_grade[6]}\" ]; then \n                         \
    \                   # If the grade is lower than the seventh smallest grade, keep\
    \ searching\n                                            if [ \"${grade}\" -lt\
    \ \"${letter_grade[7]}\" ]; then \n                                          \
    \      # If the grade is lower than the eighth smallest grade, keep searching\n\
    \                                                if [ \"${grade}\" -l", "    local\
    \ grade gpas grades\n    grades=( $(gpa_to_grades \"$1\") )\n    grade=\"${grades[0]}\"\
    \n    gpas=\"${grades[1]}\"\n    if [ \"$grade\" = \"e\" ]; then\n        grades=\"\
    $gpas\"\n        grade=\"${grades[0]}\"\n    fi\n    IFS=$'\\n' read -ra grades\
    \ <<< \"$grades\"\n    grades=( \"${grades[@]}\" )\n    IFS=$' ' read -ra gpas_array\
    \ <<< \"$gpas\"\n    gpas_array=( \"${gpas_array[@]}\" )\n    local index\n  \
    \  for index in \"${!grades[@]}\"; do\n        grade=\"${grades[index+1]}\"\n\
    \        case \"$grade\" in\n            \">\" ) gpas_array[index]=0;;\n     \
    \       \"<\" ) gpas_array[index]=0;;\n            \"\"  ) gpas_array[index]=0;;\n\
    \            \"A\"  ) gpas_array[index]=0;;\n            \"A+\" ) gpas_array[index]=$gpas_array[index]+1;;\n\
    \            \"B\"  ) gpas_array[index]=$gpas_array[index]+1;;\n            \"\
    B+\" ) gpas_array[index]=$gpas_array[index]+1;;\n            \"C\"  ) gpas_array[index]=$gpas_array[index]+1;;\n\
    \            \"C+\" ) gpas_array[index]=$gpas_array[index]+1;;\n            \"\
    D\"  ) gpas_array[index]=$gpas_array[index]+1;;\n            \"D+\" ) gpas_array[index]=$gpas_array[index]+1;;\n\
    \            \"D-\" ) gpas_array[index]=$gpas_array[index]+1;;\n            \"\
    E\"  ) gpas_array[index]=$gpas_array[index]+1;;\n            \"F\"  ) gpas_array[index]=$gpas_array[index]+1;;\n\
    \            *)  gpas_array[index]=0;;\n        esac\n    done\n    IFS=' '\n\
    \    echo -n \"${grades[*]}\"", "    local sum=$1\n    if [[ \"$sum\" == *E* ]];\
    \ then \n        # e=10\n        sum=$(echo \"$sum * 10\" | bc -l)\n    fi\n \
    \   local grades=()\n    local last=\n    while [ \"$sum\" -gt 0 ]; do\n     \
    \   local num=$(echo \"$sum % 10\" | bc -l)\n        local letter=$(echo \"(10#$num\
    \ | sed 's/./&-/' )\"|sed -e 's/^\\.*//')\n        grades+=(\"${last}${letter}\"\
    )\n        sum=$(echo \"$sum - $num\" | bc -l)\n        \n        last=${last}\n\
    \    done\n    grades+=(\"${last}E\")\n    grades+=(\"${last}F\")\n    echo \"\
    ${grades[@]}\"", "\tlocal gpa=$1; shift\n\tlocal sum=$1; shift\n\tlocal grades=$(\
    \ echo $sum | sed 's/ /\\+/' )\n\n\tif [ \"$grades\" -lt \"$gpa\" ]; then\n\t\t\
    grades=\"${grades%?}\"\n\telse\n\t\tgrades=\"${grades%?}\"\n\t\tgrades=$(( grades/$gpa\
    \ ))\n\tfi\n\t\n\techo $grades", "\tlocal grades=$1\n\n\tlocal function get_grade\
    \ (grade) {\n\t\tlocal base=10.0\n\t\tlocal max_base=$((${grade} * max_base))\n\
    \t\tlocal max_remainder=$((${grade} - max_base))\n\t\tlocal remainder\n\t\tlocal\
    \ grade_value\n\t\t\n\t\tif [[ $grade =~ [0-9]+ ]]; then\n\t\t\tgrade_value=$((10\
    \ * ${grade}))\n\t\t\tremainder=$((10 - ${grade}))\n\t\telse\n\t\t\tgrade_value=10\n\
    \t\t\tremainder=${grade}\n\t\tfi\n\t\t\n\t\tlocal grade_value_string=$(printf\
    \ \"%.0f\" ${grade_value})\n\t\tlocal grade_remainder=$(printf \"%.0f\" ${remainder})\n\
    \t\t\n\t\tlocal remainder_string=\"-$grade_remainder\"\n\t\tlocal grade_string=\"\
    +${grade_value_string}${remainder_string}\"\n\t\t\n\t\tlocal letter_grade=\"${grade_string}+${grade_remainder}\"\
    \n\t\t\n\t\treturn ${letter_grade}\n\t}\n\n\tlocal max_base\n\tlocal max_remainder\n\
    \n\tmax_base=$((${grades} * max_base))\n\tmax_remainder=$((${grades} - max_base))\n\
    \t\n\tlocal letter_grades=()\n\n\twhile (( ${grades} > 0 )); do\n\t\tlocal grade=$(get_grade\
    \ ${grades})\n\t\tlocal letter_grade=\"${grade}+${remainder}\"\n\t\t\n\t\tlocal\
    \ base\n\t\tlocal remainder\n\n\t\tif [[ $grade =~ [0-9]+ ]]; then\n\t\t\tremainder=$((10\
    \ - ${grade}))\n\t\t\tbase=10\n\t\telse\n\t\t\tremainder=${grade}\n\t\t\tbase=10\n\
    \t\tfi\n\t\t\n\t\tlocal max_base=$((${grade} * max_base))\n\t\tlocal max_remainder=$((${grade}\
    \ - max_base))\n\t\t\n\t\tif [[ ${grades} == 0 ]]; then\n\t\t\tlocal letter_grade=\"\
    ${grade}+${remainder}\"\n\t\t\tlocal max_remainder=$((10 - ${grade}))\n\t\t\t\
    local max_base=$((10 * max_base))\n\t\t\t\n\t\t\tlocal grade_value=$((10 * ${grade}))\n\
    \t\t\tlocal grade_remainder=$((10 - ${grade}))\n\n\t\t\tlocal grade_value_string=$(printf\
    \ \"%.0f\" ${grade_value})\n\t\t\tlocal grade_remainder_string=$(printf \"%.0f\"\
    \ ${grade_remainder})\n\t\t\tlocal letter_grade=\"${grade_value_string}+${grade_remainder_string}\"\
    \n\t\t\t\n\t\t\tlocal remain", "  local numerical_list=\"$1\"\n  local grade_list=\"\
    \"\n  local grade\n  local score\n\n  local numerical_grade\n  local numerical_grade_count=0\n\
    \  local numerical_grade_letter\n\n  for numerical_grade in $numerical_list; do\n\
    \    numerical_grade_count=$((numerical_grade_count + 1))\n    numerical_grade_letter=${numerical_grade:0:1}\n\
    \    score=${numerical_grade:1}\n    numerical_grade_letter=${numerical_grade_letter}\n\
    \    if [ \"$numerical_grade_letter\" = \"-\" ]; then\n      numerical_grade_letter=\"\
    -\"\n      numerical_grade_count=$((numerical_grade_count - 1))\n    fi\n    grade_list=\"\
    $grade_list $numerical_grade_letter\"\n  done\n\n  if [ \"$numerical_grade_count\"\
    \ -gt 0 ]; then\n    grade_list=\"${grade_list}${grade_list:1}\"\n  fi\n  return\
    \ $grade_list", "    local numbers=$1 #each number is now a separate string\n\
    \    local maxgpa=`echo $numbers | awk '{print $1}'` #get the max gpa from numbers\
    \ list\n    local grades=`echo $numbers | awk '{print $2}'` #get the letter grade\
    \ of each number from numbers list\n    echo \"$maxgpa\"", "    local gpa=$1\n\
    \    local gpa_list=(\"4.0 > 3.7\" \"3.7 > 3.3\" \"3.3 > 3.0\" \"3.0 > 2.7\" \"\
    2.7 > 2.3\" \"2.3 > 2.0\" \"2.0 > 1.7\" \"1.7 > 1.3\" \"1.3 > 1.0\" \"1.0 > 0.7\"\
    \ \"0.7 > 0.0\" \"0.0 > 0.0\" \"0.0\")\n    local letter_grades=()\n    local\
    \ i=0\n    while [[ ${gpa:0:1} == \"-\" ]]; do\n        local grade=\"${gpa_list[$((\
    \ $i%8 ))]}+${gpa:1:1}\"\n        letter_grades+=(\"$grade\")\n        gpa=${gpa:2}\n\
    \        (( i++ ))\n    done\n    local grade=\"${gpa_list[$(( $i%8 ))]}+${gpa:1:1}\"\
    \n    letter_grades+=(\"$grade\")\n    local grade=\"${gpa_list[$(( $i%8 ))]}+${gpa:1:1}\"\
    \n    letter_grades+=(\"$grade\")\n    local grade=\"${gpa_list[$(( $i%8 ))]}+${gpa:1:1}\"\
    \n    letter_grades+=(\"$grade\")\n    local grade=\"${gpa_list[$(( $i%8 ))]}+${gpa:1:1}\"\
    \n    letter_grades+=(\"$grade\")\n    local grade=\"${gpa_list[$(( $i%8 ))]}+${gpa:1:1}\"\
    \n    letter_grades+=(\"$grade\")\n    local grade=\"${gpa_list[$(( $i%8 ))]}+${gpa:1:1}\"\
    \n    letter_grades+=(\"$grade\")\n    local grade=\"${gpa_list[$(( $i%8 ))]}+${gpa:1:1}\"\
    \n    letter_grades+=(\"$grade\")\n    local grade=\"${gpa_list[$(( $i%8 ))]}+${gpa:1:1}\"\
    \n    letter_grades+=(\"$grade\")\n    local grade=\"${gpa_list[$(( $i%8 ))]}+${gpa:1:1}\"\
    \n    letter_grades+=(\"$grade\")\n    local grade=\"${gpa_list[$(( $i%8 ))]}+${gpa:1:1}\"\
    \n    letter_grades+=(\"$grade\")\n    local grade=\"${gpa_list[$(( $i%8 ))]}+${g",
  "    local gpa=\"$1\"\n    local grades=''\n    local i\n    for ((i = 1; i <= ${#gpa};\
    \ i++)) {\n        local ix \n        ix=${gpa::$i}\n        local g=$ix%100\n\
    \        grades+=\"'$D'\"\n        ix=${ix%100}\n        local m=$ix%10\n    \
    \    grades+=\"'$c[$m]'\"\n        ix=${ix%10}\n        grades+=\"'$m'\"\n   \
    \     grades+=\"'$g'\"\n        grades+=\"'\"\n    }\n    grades=${grades:0:$#grades}\n\
    \    echo \"$grades\"", "    local gpa=$1\n    local letter\n    local result\n\
    \n    for ((i=0; i<${#gpa[@]}; i++)); do\n        if [[ $gpa == \"$((gpa[i]))\"\
    \ ]]; then\n            letter=$((i%2==0 ? \"A+\" : \"B+\"))\n            break\n\
    \        fi\n    done\n\n    result=()\n    local count=$((${#letter[@]} % 2 ==\
    \ 0 ? ${#letter[@]}/2 : ${#letter[@]}/2 + 1))\n    while [[ ${#letter[@]} -gt\
    \ 0 ]] && [[ ${count} -le ${#letter[@]} ]] && [[ ${#letter[@]} -le ${#result[@]}\
    \ ]]; then\n        result+=(\"$letter\")\n        count=$((${count}+1))\n   \
    \     letter=$((i%2==0 ? \"A+\" : \"B+\"))\n    done\n\n    if (( ${#result[@]}\
    \ > ${#gpa[@]} )) ; then\n        result=(\"${result[@]:0:${#gpa[@]}-(${#result[@]}\
    \ % ${#gpa[@]})}\")\n    fi\n\n    echo ${result[@]}", "  local n=$1\n  local\
    \ letters=(\"A+\"; \"A\"; \"A-\"; \"B+\"; \"B\"; \"B-\"; \"C+\"; \"C\"; \"C-\"\
    ; \"D+\"; \"D\"; \"D-\"; \"E\")\n  local j=1\n  while [ $n -lt 10 ]; do\n    \
    \  echo -n $letters[$j-1]\n      (( j++ ))\n      (( n-- ))\n  done", "    local\
    \ gpa=$(get_first_arg 1)\n    local grades=$(get_first_arg 2)\n    local lettergrades=\"\
    \"\n    local grade_threshold=$(get_first_arg 3)\n    \n    local i=0;\n    \n\
    \    # sort grades in descending order\n    grades=$(echo $grades | sed 's/ \\\
    +/-/g' | sort -n -r -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 | sed 's/^[-+]//g')\n\
    \    # loop through grades and compare gpa with the gpa of each grade\n    for((i=1;\
    \ i<${#grades[@]}; i++)); do\n        local gpa=$(echo $grades[$i] | sed 's/ \\\
    +/-/g' | sort -n -r -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 | sed 's/^[-+]//g')\n\
    \        \n        if [[ $gpa -gt $grade_threshold ]]; then\n            # if\
    \ the gpa is greater than or equal to the threshold add the letter grade to the\
    \ list\n            lettergrades=$lettergrades$i\n        fi\n    done\n    \n\
    \    return $lettergrades", "  local grades=$1\n  local sum=$2\n  local max=$3\n\
    \  local grade=''\n  local i=0\n  local gpa\n  local gpa_str\n\n  gpa=${grades}\n\
    \  gpa_str=$(echo \"$gpa\" | awk '{print $1; exit }')\n\n  if [[ $gpa -lt $0 ]];\
    \ then\n    grade='E'\n  else\n    if [[ $gpa -gt $max ]]; then\n      grade='D-'\n\
    \    else\n      grade='D'\n    fi\n  fi\n\n  echo $grade", "    local gpa_list=$1\n\
    \    # local number_of_students=$2\n    local gpa_string=$2\n    local letter_grade\n\
    \    local number_of_students=${#gpa_list[*]}\n    local index=0\n    while [\
    \ $index -lt $number_of_students ]\n    do\n        gpa=${gpa_list[$index]}\n\
    \        if [ ${gpa} -lt 3.0 ]; then\n            if [ ${gpa} -eq 3.0 ]; then\n\
    \                letter_grade=\"A+\"\n            elif [ ${gpa} -le 3.7 ]; then\n\
    \                letter_grade=\"A\"\n            elif [ ${gpa} -le 3.3 ]; then\n\
    \                letter_grade=\"A-\"\n            elif [ ${gpa} -le 3.0 ]; then\n\
    \                letter_grade=\"B+\"\n            elif [ ${gpa} -le 2.7 ]; then\n\
    \                letter_grade=\"B\"\n            elif [ ${gpa} -le 2.3 ]; then\n\
    \                letter_grade=\"B-\"\n            elif [ ${gpa} -le 2.0 ]; then\n\
    \                letter_grade=\"C+\"\n            elif [ ${gpa} -le 1.7 ]; then\n\
    \                letter_grade=\"C\"\n            elif [ ${gpa} -le 1.3 ]; then\n\
    \                letter_grade=\"C-\"\n            elif [ ${gpa} -le 1.0 ]; then\n\
    \                letter_grade=\"D+\"\n            elif [ ${gpa} -le 0.7 ]; then\n\
    \                letter_grade=\"D\"\n            elif [ ${gpa} -le 0.0 ]; then\n\
    \                letter_grade=\"D-\"\n            elif [ ${gpa} -le 0.0 ]; then\n\
    \                letter_grade=\"E\"\n            else\n                echo \"\
    Unrecognized GPA: $gpa for student: $index\"\n                exit 1\n       \
    \     fi\n        else\n            echo \"Unrecognized GPA: $gpa for student:\
    \ $index\"\n            exit 1\n        fi\n        index=$(expr $index + 1)\n\
    \    done\n    echo \"\\\"$gpa_string\\\" \\\"$letter_grade\\\"\"", "\tlocal grades=$1\n\
    \tlocal result=''\n\tlocal i=2\n\twhile read -r line; do\n\t\tif [[ \"${grades}\"\
    \ =~ ^[[:space:]]*\\$ ]]; then\n\t\t\techo \"$line\"\n\t\telse\n\t\t\tprintf '%s\
    \ ' \"${grades}\" | tr ' ' '+' | sed 's/^/\"${result}\"/'\n\t\tfi\n\t\tresult=''\n\
    \t\tgrades=$(echo $line | sed 's/^\\([[:digit:]]*\\)/\\1/' | sed 's/^\\./\\1/')\n\
    \tdone\n\techo \"$result\"", "  local GPA_list grade_list letter_grade\n  GPA_list=$1\n\
    \  grade_list=$2\n  letter_grade=\n  for i in $GPA_list; do\n    if [ $i -gt $4\
    \ ] ; then \n      letter_grade+=\"\\\"A+\\\",\"\n    elif [ $i -gt $3 ] ; then\n\
    \      letter_grade+=\"\\\"A\\\",\"\n    elif [ $i -gt $2 ] ; then\n      letter_grade+=\"\
    \\\"A-\\\",\"\n    elif [ $i -gt $1 ] ; then\n      letter_grade+=\"\\\"B+\\\"\
    ,\"\n    elif [ $i -gt $0.5 ] ; then\n      letter_grade+=\"\\\"B\\\",\"\n   \
    \ elif [ $i -gt $0.2 ] ; then\n      letter_grade+=\"\\\"B-\\\",\"\n    elif [\
    \ $i -gt $0 ] ; then\n      letter_grade+=\"\\\"C+\\\",\"\n    elif [ $i -gt $0\
    \ ] ; then\n      letter_grade+=\"\\\"C\\\",\"\n    elif [ $i -gt $0 ] ; then\n\
    \      letter_grade+=\"\\\"C-\\\",\"\n    elif [ $i -gt $0 ] ; then\n      letter_grade+=\"\
    \\\"D+\\\",\"\n    elif [ $i -gt $0 ] ; then\n      letter_grade+=\"\\\"D\\\"\
    ,\"\n    elif [ $i -gt $0 ] ; then\n      letter_grade+=\"\\\"D-\\\",\"\n    else\n\
    \      letter_grade+=\"\\\"E\\\",\"\n    fi\n  done\n  echo $letter_grade", " \
    \  IFS='  '\n   grades=($1); # Split $1 into space-separated list\n   sum=0\n\
    \   for i in ${grades[@]}; do\n     if (($i > 3.0)) then\n       sum=$(($sum +\
    \ $i))\n     elif (($i > 3.0)) then\n       sum=$(($sum - $i))\n     elif (($i\
    \ < 3.0)) then\n       sum=$(($sum + $i))\n     elif (($i < 3.0)) then\n     \
    \  sum=$(($sum - $i))\n     elif (($i == 3.0)) then\n       sum=$(($sum + $i))\n\
    \     elif (($i == 3.0)) then\n       sum=$(($sum - $i))\n     elif (($i == 3.0))\
    \ then\n       sum=$(($sum - $i))\n     elif (($i == 3.0)) then\n       sum=$(($sum\
    \ - $i))\n     elif (($i == 3.0)) then\n       sum=$(($sum - $i))\n     else\n\
    \       sum=$(($sum + $i))\n     fi\n   done\n   echo \"$sum\"", "  local GPA=$1\
    \ \n  local letter_grade=\"\"\n  local numerical_grade\n  numerical_grade=$(echo\
    \ $GPA | cut -d \"[\" -f 1) \n  if [[ $numerical_grade -ge 4 ]]; then\n    letter_grade=\"\
    A+\"\n  elif [[ $numerical_grade -ge 3.7 ]]; then\n    letter_grade=\"A \"\n \
    \ elif [[ $numerical_grade -ge 3.3 ]]; then\n    letter_grade=\"A- \"\n  elif\
    \ [[ $numerical_grade -ge 3 ]]; then\n    letter_grade=\"B+\"\n  elif [[ $numerical_grade\
    \ -ge 2.7 ]]; then\n    letter_grade=\"B \"\n  elif [[ $numerical_grade -ge 2.3\
    \ ]]; then\n    letter_grade=\"B-\"\n  elif [[ $numerical_grade -ge 2 ]]; then\n\
    \    letter_grade=\"C+\"\n  elif [[ $numerical_grade -ge 1.7 ]]; then\n    letter_grade=\"\
    C \"\n  elif [[ $numerical_grade -ge 1.3 ]]; then\n    letter_grade=\"C-\"\n \
    \ elif [[ $numerical_grade -ge 1 ]]; then\n    letter_grade=\"D+\"\n  elif [[\
    \ $numerical_grade -ge 0.7 ]]; then\n    letter_grade=\"D \"\n  else\n    letter_grade=\"\
    D-\"\n  fi\n  echo \"\\\"$letter_grade\\\"\"", "    local numerical_grade letter\n\
    \    while IFS=, read -r numerical_grade letter; do\n        local value=${numerical_grade}\n\
    \        if [ $value -gt 4.0 -o $value -lt 1.0 ]\n        then\n            if\
    \ [ \"$letter\" = \"A+\" ]\n            then\n                echo \"A+\"\n  \
    \          elif [ \"$letter\" = \"B\" ]\n            then\n                echo\
    \ \"B\"\n            elif [ \"$letter\" = \"C\" ]\n            then\n        \
    \        echo \"C\"\n            elif [ \"$letter\" = \"D\" ]\n            then\n\
    \                echo \"D\"\n            elif [ \"$letter\" = \"E\" ]\n      \
    \      then\n                echo \"E\"\n            fi\n        else\n      \
    \      if [ \"$letter\" = \"A\" ]\n            then\n                echo \"A-\"\
    \n            elif [ \"$letter\" = \"B+\" ]\n            then\n              \
    \  echo \"B+\"\n            elif [ \"$letter\" = \"B\" ]\n            then\n \
    \               echo \"B-\"\n            elif [ \"$letter\" = \"C+\" ]\n     \
    \       then\n                echo \"C+\"\n            elif [ \"$letter\" = \"\
    C\" ]\n            then\n                echo \"C-\"\n            elif [ \"$letter\"\
    \ = \"D+\" ]\n            then\n                echo \"D+\"\n            elif\
    \ [ \"$letter\" = \"D\" ]\n            then\n                echo \"D-\"\n   \
    \         elif [ \"$letter\" = \"E\" ]\n            then\n                echo\
    \ \"E\"\n            fi\n        fi\n    done", "    local gpa=$1\n    local gpa_letter\n\
    \    gpa_letter=${gpa}\n    local numerical_letter\n    numerical_letter=${gpa_letter}\n\
    \    local letter_grade\n    letter_grade=\"\"\n    if [ $gpa -eq \"0.0\" ]; then\n\
    \        letter_grade=\"E\"\n    elif [ $gpa -gt \"0.0\" ]; then\n        if [\
    \ $gpa -le \"4.0\" ]; then\n            numerical_letter=\"A\"\n        elif [\
    \ $gpa -le \"3.7\" ]; then\n            numerical_letter=\"A+\"\n        elif\
    \ [ $gpa -le \"3.3\" ]; then\n            numerical_letter=\"A-\"\n        elif\
    \ [ $gpa -le \"3.0\" ]; then\n            numerical_letter=\"B+\"\n        elif\
    \ [ $gpa -le \"2.7\" ]; then\n            numerical_letter=\"B\"\n        elif\
    \ [ $gpa -le \"2.3\" ]; then\n            numerical_letter=\"B-\"\n        elif\
    \ [ $gpa -le \"2.0\" ]; then\n            numerical_letter=\"C+\"\n        elif\
    \ [ $gpa -le \"1.7\" ]; then\n            numerical_letter=\"C\"\n        elif\
    \ [ $gpa -le \"1.3\" ]; then\n            numerical_letter=\"C-\"\n        elif\
    \ [ $gpa -le \"1.0\" ]; then\n            numerical_letter=\"D+\"\n        elif\
    \ [ $gpa -le \"0.7\" ]; then\n            numerical_letter=\"D\"\n        else\n\
    \            numerical_letter=\"D-\"\n        fi\n        letter_grade=\"$numerical_letter\"\
    \n    elif [ $gpa -lt \"0.0\" ]; then\n        if [ $gpa -le \"4.0\" ]; then\n\
    \            numerical_letter=\"A\"\n        elif [ $gpa -le \"3.7\" ]; then\n\
    \            numerical_letter=\"A+\"\n        elif [ $gpa -le \"3.3\" ]; then\n\
    \            numerical_letter=\"A-\"\n        elif [ $gpa -le \"3.0\" ]; then\n\
    \            numerical_letter=\"B+\"\n        elif [ $gpa -le \"2.7\" ]; then\n\
    \            numerical_letter=\"B\"\n        elif [ $gpa -le \"2.3\" ]; then\n\
    \            numerical_letter=\"B-\"\n        elif [ $gpa -le \"2.0\" ]; then\n\
    \            numerical_letter=\"C+\"\n        elif [ $gpa -le \"1.7\" ]; then\n\
    \            numerical_letter=\"C\"\n        elif [ $gpa -le \"1.3\" ]; then\n\
    \            numerical_letter=\"C-\"\n        elif [ $gpa -le \"1.0\" ]; then\n\
    \            numerical_letter=\"D+\"\n        elif [ $gpa -le \"0.7\" ]; then\n\
    \            numerical_letter=\"D\"\n        else\n", "    local numerical_grade\
    \ letter\n    numerical_grade=${1%% *}\n    if [[ ${#numerical_grade} -gt 4 ]];\
    \ then\n        echo \"too many GPA grades\"\n        return 1\n    fi\n    for\
    \ ((i=0;i<${#numerical_grade};++i)); do\n        if [[ ${numerical_grade:$i:1}\
    \ == 0 ]]; then\n            echo \"GPA grade is a decimal value\"\n         \
    \   return 1\n        fi\n    done\n    letter=${numerical_grade:0:1}\n    letter=\"\
    ${letter}${letter:1}\"\n    letter=${letter:0:1}\n    if [[ ${numerical_grade:2:1}\
    \ == 0 ]]; then\n        letter=\"${letter}- \"\n    else\n        letter=\"${letter}+\
    \ \"\n    fi\n    printf '%s\\n' \"${letter}\"\n    return 0", "    local grades=$@\n\
    \    local grade_sum\n    local grade\n    local letter\n    local grade_count\n\
    \    local sum=0\n    local grade_char\n    local grade_char_index\n    grade_char=\"\
    A+B+C+D+E\"\n    grade_char_index=0\n    grade_sum=0\n    grade_count=0\n    sum=0\n\
    \    for grade in $grades; do\n\tsum=$((sum + $grade))\n\tgrade_sum=$((sum+grade_sum))\n\
    \tgrade_count=$((grade_count+1))\n    done\n    grade_sum=$((grade_sum+sum))\n\
    \    if [ $grade_count -gt 7 ]; then\n\techo \"Error: the number of grades is\
    \ over 7.\"\n    else\n\tfor grade in $grades; do\n\t    if [ $grade -gt 4.0 ];\
    \ then\n\t\tif [ $grade -ge 3.7 ]; then\n\t\t    letter=$grade_char[$((grade_char_index+1))]\n\
    \t\t    grade_char_index=$((grade_char_index+1))\n\t\telse\n\t\t    letter=$grade_char[$grade_char_index+1]\n\
    \t\t    grade_char_index=$((grade_char_index+1))\n\t\tfi\n\t\telse\n\t\tif [ $grade\
    \ -ge 3.3 ]; then\n\t\t    letter=$grade_char[$((grade_char_index+1))]\n\t\t \
    \   grade_char_index=$((grade_char_index+1))\n\t\telse\n\t\t    letter=$grade_char[$grade_char_index+1]\n\
    \t\t    grade_char_index=$((grade_char_index+1))\n\t\tfi\n\t\tfi\n\t\tdone\n\t\
    echo \"\\\"$grade\\\" \\\"$letter\\\"\"\n    fi", "    local grade=$1\n    local\
    \ gpa=$2\n    local gpa_numerical=$(echo $gpa | cut -d '.' -f1)\n    local gpa_negative=$(echo\
    \ $gpa | cut -d '.' -f2)\n    local gpa_positive=$(echo $gpa | cut -d '.' -f3)\n\
    \n    # Only valid numbers are entered. Negative grades are converted to 0.\n\
    \    # Positive grades have a letter grade and a +.\n    if [[ $gpa =~ ^-?[0-9]\\\
    .?[0-9]+$ ]]\n    then\n        local letter=$(echo $gpa | cut -d '+' -f1 | cut\
    \ -d '-' -f2)\n        if [[ $gpa -eq $gpa_negative ]]\n        then\n       \
    \     grade=0\n        fi\n        if [[ $gpa -ge $gpa_positive ]]\n        then\n\
    \            grade=$letter\n        fi\n    fi\n    \n    # Only positive grades\
    \ are used.\n    if [[ $gpa -ge $gpa_positive ]]\n    then\n        # Letters\
    \ get added in reverse order (from highest to lowest).\n        grade=$((gpa_numerical+gpa_negative+gpa_positive))\n\
    \        grade=$(echo $grade | cut -d '+' -f1 | cut -d '-' -f2 | cut -d '.' -f1)\n\
    \        grade=$(echo $grade | cut -d '+' -f3 | cut -d '-' -f2 | cut -d '.' -f1)\n\
    \    fi\n    \n    echo $grade", "  local grade letter grade_array grade_length\n\
    \  grade=$1\n  grade_array=$(echo \"${grade}\" | tr ' ' ',')\n  grade_length=${#grade_array[@]}\n\
    \  if (( grade_length > 4 )); then\n    letter=$(echo \"${grade_array[0]}\" |\
    \ cut -d'.' -f1)\n    grade=$(echo \"${grade_array[0]}\" | cut -d'.' -f2)\n  \
    \  if (( grade < 3.0 )); then\n      letter=$(echo \"${grade_array[1]}\" | cut\
    \ -d'.' -f1)\n      grade=$(echo \"${grade_array[1]}\" | cut -d'.' -f2)\n    \
    \  (( grade > 3.0 )) || return\n    fi\n    case \"${letter}\" in\n      \"A\"\
    )\n        echo \"$grade $letter\"\n        ;;\n      \"B\")\n        echo \"\
    $grade $letter\"\n        ;;\n      \"C\")\n        echo \"$grade $letter\"\n\
    \        ;;\n      \"D\")\n        echo \"$grade $letter\"\n        ;;\n     \
    \ \"E\")\n        echo \"$grade $letter\"\n        ;;\n      *)\n        echo\
    \ \"$grade $letter\"\n        ;;\n    esac\n  else\n    echo \"$grade $letter\"\
    \n  fi", "  local val=0\n  local i=0\n  local num_sum=0\n  \n  for i in $1; do\n\
    \    [[ \"${i}\" =~ ^[+-]?\\d+.?[+-]\\d+.?$]]\n    num=${i%?}\n    ((val+=num))\n\
    \    ((num_sum+=num))\n  done\n  \n  # check whether all values are positive\n\
    \  [[ \"$num_sum\" -gt 0 ]] || return 1\n  \n  local avg=$((val/num_sum))\n  \n\
    \  if [ \"$1\" = \"$num_sum\" ]; then\n    # print \"A\"\n    echo \"A+\"\n  else\n\
    \    local grade=\"\"\n    local grades=\"\"\n    local total=0\n    local diff=0\n\
    \    \n    # check the first and last value\n    for i in $1; do\n      [[ \"\
    $i\" =~ ^[+-]?\\d+.?[+-]\\d+.?$]] && break\n      ((total+=i))\n    done\n   \
    \ \n    if [ \"$1\" -eq \"$num_sum\" ]; then\n      # print \"A\"\n      echo\
    \ \"A+\"\n    elif [ \"$1\" -le \"$num_sum\" ]; then\n      # print \"A-\"\n \
    \     grade=\"A-\"\n      diff=$(($total - $1))\n      grades=\"$grade$diff\"\n\
    \    else\n      # print \"B+\"\n      grade=\"B+\"\n      diff=$(($num_sum -\
    \ $1))\n      grades=\"$grade$diff\"\n    fi\n    \n    for i in $(seq 0 \"$(($num_sum\
    \ + 1))\"); do\n      [[ \"${val+i}\" -gt \"$avg\" ]] && break\n      ((diff -=\
    \ avg))\n      ((total -= avg))\n      ((diff += i))\n      grades=\"$grade${diff}\"\
    \n    done\n    \n    # check whether the last value is 0\n    [[ \"$total\" -eq\
    \ 0 ]] || return 1\n    \n    if [ \"$1\" -le \"$num_sum\" ]; then\n      # print\
    \ \"B\"\n      echo \"$grades\"\n    elif [ \"$1\" -ge \"$num_sum\" ]; then\n\
    \      # print \"B-\"\n      echo \"$grades\"\n    else\n      # print \"C+\"\n\
    \      echo \"$grades\"\n    fi\n  fi", "    local gpa=$1\n    local grades=\"\
    \"\n    \n    # Check to see if there are non-numeric entries\n    if [[ \"$gpa\"\
    \ =~ ^[0-9]+\\.[0-9]+$ && \"$gpa\" > 0 ]]; then\n        # Calculate the list\
    \ of grades\n        for ((i=gpa; i >= 0; i--)); do\n            if ((gpa-i)*10\
    \ <= $gpa) grades+=\"$((gpa-i)*10+5)\"\n            else                     \
    \ grades+=\"$((gpa-i)*10+4)\"\n            fi\n        done\n        # Convert\
    \ grades to letter grades\n        local num_grades=\"${grades// /-}\"\n     \
    \   local grade_1=\"A+\" # if grade is less than 3.5\n        local grade_2=\"\
    A-\" # if grade is between 3.3 and 3.7\n        local grade_3=\"B+\" # if grade\
    \ is between 3.2 and 3.6\n        local grade_4=\"B-\" # if grade is between 3.1\
    \ and 3.4\n        local grade_5=\"C+\" # if grade is between 3.0 and 3.7\n  \
    \      local grade_6=\"C-\" # if grade is between 3.0 and 3.9\n        local grade_7=\"\
    D+\" # if grade is between 2.9 and 3.1\n        local grade_8=\"D\" # if grade\
    \ is between 2.7 and 3.0\n        local grade_9=\"D-\" # if grade is less than\
    \ 3.0\n        local grade_10=\"E\" # if grade is less than 2.7\n        case\
    \ \"$num_grades\" in\n            $grade_1)\n                grades=\"$grade_2\"\
    \n                ;;\n            $grade_2)\n                grades=\"$grade_3\"\
    \n                ;;\n            $grade_3)\n                grades=\"$grade_4\"\
    \n                ;;\n            $grade_4)\n                grades=\"$grade_5\"\
    \n                ;;\n            $grade_5)\n                grades=\"$grade_6\"\
    \n                ;;\n            $grade_6)\n                grades=\"$grade_7\"\
    \n                ;;\n            $grade_7)\n                grades=\"$grade_8\"\
    \n                ;;\n            $grade_8)\n                grades=\"$grade_9\"\
    \n                ;;\n            $grade_9)\n                grades=\"$grade_10\"\
    \n                ;;\n            $grade_10)\n                grades=\"$grade_1\"\
    \n                ;;\n            *)\n                grades=\"$grades\"\n   \
    \             ;;\n        esac\n    else\n", "    local numerical_gpa grade_list\
    \ grade\n    numerical_gpa=\"${1}\"\n    grade_list=\"\"\n    grade=\"${numerical_gpa//.*,/}\"\
    \n    grade_list+=\"${grade//.,/+}\"\n    grade=\"${grade//.,/-}\"\n    grade_list+=\"\
    ${grade//.,/+}\"\n    grade=\"${grade//.,/}\"\n    grade_list+=\"${grade//.,/-}\"\
    \n    grade=\"${grade//.,/}\"\n    grade_list+=\"${grade//.,/-}\"\n    grade_list+=\"\
    ${grade//.,/}\"\n    grade_list+=\"${grade//.,/+}\"\n    grade=\"${grade//.,/-}\"\
    \n    grade_list+=\"${grade//.,/-}\"\n    grade_list+=\"${grade//.,/}\"\n    grade_list+=\"\
    ${grade//.,/-}\"\n    grade_list+=\"${grade//.,/+}\"\n    grade_list+=\"${grade//.,/+}\"\
    \n    grade_list+=\"${grade//.,/}\"\n    grade_list+=\"${grade//.,/-}\"\n    grade_list+=\"\
    ${grade//.,/-}\"\n    grade_list+=\"${grade//.,/-}\"\n    grade_list+=\"${grade//.,/+}\"\
    \n    grade_list+=\"${grade//.,/+}\"\n    grade_list+=\"${grade//.,/+\"\n    echo\
    \ \"$grade_list\"", "    grade_str=$1\n    if [[ $grade_str == \"None\" ]]; then\n\
    \        echo \"None\"\n    elif [[ \"$grade_str\" =~ ^[0-9]+\\.[0-9]+$ ]]; then\n\
    \        grade_str=$1\n        grade_str=$grade_str\".0\"\n    fi\n    grade_str=$(echo\
    \ $grade_str | tr ' ' '-')\n    grade_str=$(echo $grade_str | tr ',' '-')\n  \
    \  grade_str=$(echo $grade_str | tr ' ' '+')\n    grade_str=$(echo $grade_str\
    \ | tr ',' '+')\n    grade_str=$(echo $grade_str | tr ' ' '-')\n    grade_str=$(echo\
    \ $grade_str | tr ',' '-')\n    grade_str=$(echo $grade_str | tr ' ' '+')\n  \
    \  grade_str=$(echo $grade_str | tr ',' '+')\n    grade_str=$(echo $grade_str\
    \ | tr ' ' '-')\n    grade_str=$(echo $grade_str | tr ',' '-')\n    grade_str=$(echo\
    \ $grade_str | tr ' ' '-')\n    grade_str=$(echo $grade_str | tr ',' '-')\n  \
    \  grade_str=$(echo $grade_str | tr ' ' '+')\n    grade_str=$(echo $grade_str\
    \ | tr ',' '+')\n    grade_str=$(echo $grade_str | tr ' ' '-')\n    grade_str=$(echo\
    \ $grade_str | tr ',' '-')\n    grade_str=$(echo $grade_str | tr ' ' '-')\n  \
    \  grade_str=$(echo $grade_str | tr ',' '-')\n    grade_str=$(echo $grade_str\
    \ | tr ' ' '+')\n    grade_str=$(echo $grade_str | tr ',' '+')\n    grade_str=$(echo\
    \ $grade_str | tr ' ' '-')\n    grade_str=$(echo $grade_str | tr ',' '-')\n  \
    \  grade_str=$(echo $grade_str | tr ' ' '-')\n    grade_str=$(echo $grade_str\
    \ | tr ',' '-')\n    grade_str=$(echo $grade_str | tr ' ' '-')\n    grade_str=$(echo\
    \ $grade_str | tr ',' '-')\n    grade_str=$(echo $grade_str | tr ' ' '-')\n  \
    \  grade_str=$(echo $grade_str | tr ',' '-')\n    grade_str=$(echo $grade_str\
    \ | tr ' ' '-')\n    grade_str=$(echo $grade_str | ", "    local gpa=$1\n    local\
    \ grades=\"\"\n    if [ -z \"$gpa\" ] ; then\n        echo \"Usage: $(basename\
    \ ${0}) <grade_equation> [<grade_equation>...]\"\n        return 1\n    fi\n \
    \   if [ ! \"$gpa\" =~ ^-?[0-9]+(.[0-9]+)?$ ] ; then\n        echo \"Usage: $(basename\
    \ ${0}) <grade_equation> [<grade_equation>...]\"\n        return 1\n    fi\n \
    \   # split gpa into a list of grade points\n    grades=$(echo $gpa | tr -s '\
    \ ' ' ')\n    # loop through each grade point and determine letter grade\n   \
    \ local i=0\n    for grade in ${grades}; do\n        if [ $i -ge 1 ] ; then \n\
    \            grades+=\"+\"\n        fi\n        if [ $i -ge 2 ] ; then \n    \
    \        grades+=\"-\"\n        fi\n        if [ $i -ge 3 ] ; then \n        \
    \    grades+=\" \"\n        fi\n        if [ $i -ge 4 ] ; then \n            grades+=\"\
    +\"\n        fi\n        if [ $i -ge 5 ] ; then \n            grades+=\" \"\n\
    \        fi\n        if [ $i -ge 6 ] ; then \n            grades+=\"-\"\n    \
    \    fi\n        if [ $i -ge 7 ] ; then \n            grades+=\" \"\n        fi\n\
    \        if [ $i -ge 8 ] ; then \n            grades+=\"+\"\n        fi\n    \
    \    if [ $i -ge 9 ] ; then \n            grades+=\" \"\n        fi\n        if\
    \ [ $i -ge 10 ] ; then \n            grades+=\"-\"\n        fi\n        grades+=$((10#$grade))\n\
    \        ((i++))\n    done\n    # remove extra white space on end and beginning\n\
    \    grades=$(echo $grades | sed -e 's/^ *//' -e 's/ *$//')\n    grades=\"\\\"\
    ${grades}\\\"\"\n    return 0", "    local grades=$1\n    local i=0\n    while\
    \ [ $i -lt ${#grades[@]} ]; do\n        if [[ \"${grades[$i]}\" =~ ^[0-9]\\.[0-9]\
    \ ]]; then\n            if [[ \"${grades[$i]}\" -le 5 ]]; then\n             \
    \   grades[i]=\"A+\"\n            elif [[ \"${grades[$i]}\" -le 7 ]]; then\n \
    \               grades[i]=\"A \"\n            elif [[ \"${grades[$i]}\" -le 9\
    \ ]]; then\n                grades[i]=\"B+\"\n            elif [[ \"${grades[$i]}\"\
    \ -le 11 ]]; then\n                grades[i]=\"B \"\n            elif [[ \"${grades[$i]}\"\
    \ -le 13 ]]; then\n                grades[i]=\"B-\"\n            elif [[ \"${grades[$i]}\"\
    \ -le 15 ]]; then\n                grades[i]=\"C+\"\n            elif [[ \"${grades[$i]}\"\
    \ -le 17 ]]; then\n                grades[i]=\"C\"\n            elif [[ \"${grades[$i]}\"\
    \ -le 19 ]]; then\n                grades[i]=\"C-\"\n            elif [[ \"${grades[$i]}\"\
    \ -le 21 ]]; then\n                grades[i]=\"D+\"\n            elif [[ \"${grades[$i]}\"\
    \ -le 23 ]]; then\n                grades[i]=\"D \"\n            elif [[ \"${grades[$i]}\"\
    \ -le 25 ]]; then\n                grades[i]=\"D-\"\n            elif [[ \"${grades[$i]}\"\
    \ -le 27 ]]; then\n                grades[i]=\"E\"\n            else\n       \
    \         grades[i]=\"D-\"\n            fi\n        fi\n        i=$((i+1))\n \
    \   done", "  if [ \"$1\" == \"0.0\" ]; then \n    echo \"E\"\n  else\n    IFS='\
    \ ' read -a array <<< \"$1\"\n    grade=0\n    for value in \"${array[@]}\"; do\n\
    \      grade=$((grade + $value/10.0))\n    done\n    if [ $grade -lt 3.0 ]; then\n\
    \      letter=\"A+\"\n    elif [ $grade -lt 3.5 ]; then\n      letter=\"A-\"\n\
    \    elif [ $grade -lt 3.0 ]; then\n      letter=\"B+\"\n    elif [ $grade -lt\
    \ 3.5 ]; then\n      letter=\"B\"\n    elif [ $grade -lt 4.0 ]; then\n      letter=\"\
    B-\"\n    elif [ $grade -lt 4.5 ]; then\n      letter=\"C+\"\n    elif [ $grade\
    \ -lt 4.0 ]; then\n      letter=\"C\"\n    elif [ $grade -lt 4.5 ]; then\n   \
    \   letter=\"C-\"\n    elif [ $grade -lt 4.0 ]; then\n      letter=\"D+\"\n  \
    \  elif [ $grade -lt 4.5 ]; then\n      letter=\"D\"\n    elif [ $grade -lt 4.0\
    \ ]; then\n      letter=\"D-\"\n    else\n      letter=\"E\"\n    fi\n    echo\
    \ \"$letter\"\n  fi", "\tlocal gpa=$1 grade=$2 gpa_index\n\tif [[ $gpa_index -eq\
    \ 0 ]]; then\n\t\tif [[ ${grade} -ge 4 ]]; then\n\t\t\tgpa_index=$((gpa_index\
    \ + 1))\n\t\t\tgrade=$((gpa_index - 1))\n\t\telse\n\t\t\tgpa_index=$((gpa_index\
    \ + 1))\n\t\t\tgrade=$((grade - 4))\n\t\tfi\n\telse\n\t\tif [[ $grade -ge ${gpa}\
    \ ]]; then\n\t\t\tgpa_index=$((gpa_index + 1))\n\t\t\tgrade=$((grade - ${gpa}))\n\
    \t\telse\n\t\t\tgpa_index=$((gpa_index + 1))\n\t\t\tgrade=$((grade - (${gpa} -\
    \ ${gpa_index})))\n\t\tfi\n\tfi\n\techo \"${grade}\"", "    # Your code here\n\
    \    gpa=$1\n    grades=()\n    while read line\n    do\n        if [[ $line =~\
    \ ^(-?[0-9]+\\.[0-9]+) ]]\n        then\n            grade =\"$((${BASH_REMATCH[1]}\
    \ / 100))\"\n            grade+=\"+${grade}\"\" \"\n        fi\n    done <<< \"\
    $1\"\n    grades+=(${grade})\n    grades+=(${grade})\n    grades+=(${grade})\n\
    \    grades+=(${grade})\n    grades+=(${grade})\n    grades+=(${grade})\n    grades+=(${grade})\n\
    \    grades+=(${grade})\n    grades+=(${grade})\n    echo \"${grades[@]}\"", "\t\
    let n=$1 \n\tlet i=0\n\twhile [ $i -lt $n ]; do\n\t\tlet i++\n\tdone\n\techo $((\
    \ n*10+i ))", "    local l=$1\n    local letter\n    local grade\n    local gpa\n\
    \    for gpa; do\n        grade=`echo \"scale=4; (${l} * ${gpa})/4.0\" | bc -l`\n\
    \        case \"${grade}\" in\n            0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25)\n\
    \                letter=\"${letter}${gpa_letter_grade}\"\n                ;;\n\
    \            *)\n                letter=\"${letter}${gpa_letter_grade}\"\n   \
    \             ;;\n        esac\n    done\n    echo ${letter}", "    local grade_list\
    \ grade_list\n    grade_list=$(echo \"$1\" | sed 's/ /\" \"/g')\n    local grades_str\
    \ grades_arr\n    grades_str=$(echo \"$grade_list\" | cut -d\\\" -f1)\n    grades_arr=$(echo\
    \ \"$grade_list\" | cut -d\\\" -f2)\n    \n    local grade\n    for grade in ${grades_arr[@]};do\n\
    \        if [[ \"$grade\" -ge 3.0 ]];then\n            echo \"$grade | $grades_str\"\
    \n            break\n        fi\n    done", "    local gpa=$1 i\n    local gpa_length=$(echo\
    \ $gpa | wc -w)\n    local gpa_array=($(echo $gpa | tr \" \" \"\\n\"))\n    local\
    \ sum=0\n    local letter_grades\n    for (( i=0; i<${#gpa_array[@]}; i++ ));\
    \ do\n        local grade=${gpa_array[$i]}\n        local grade_value=$(echo \"\
    $grade\" | tr -cd '0-9')\n        sum=$(($sum+$grade_value))\n    done\n    #\
    \ $sum is now the total of the student's grades\n    # Calculate the letter grade\
    \ for each grade and remove grades that \n    # don't make sense\n    # Calculate\
    \ the letter grade for each grade and remove grades that \n    # don't make sense\n\
    \    # Calculate the letter grade for each grade and remove grades that \n   \
    \ # don't make sense\n    local letter_grades\n    for (( i=0; i<${#gpa_array[@]};\
    \ i++ )); do\n        local grade=${gpa_array[$i]}\n        if (( $sum -ge 4 ));\
    \ then\n            if (( ${grade} >= 3 )); then\n                letter_grades=\"\
    $letter_grades A+\"\n            else\n                if (( ${grade} >= 0 ));\
    \ then\n                    letter_grades=\"$letter_grades A-\"\n            \
    \    else\n                    if (( ${grade} >= -2 )); then\n               \
    \         letter_grades=\"$letter_grades B+\"\n                    else\n    \
    \                    if (( ${grade} >= -3 )); then\n                         \
    \   letter_grades=\"$letter_grades B\"\n                        else\n       \
    \                     if (( ${grade} >= -4 )); then\n                        \
    \        letter_grades=\"$letter_grades B-\"\n                            else\n\
    \                                if (( ${grade} >= -5 )); then\n             \
    \                       letter_grades=\"$letter_grades C+\"\n                \
    \                else\n                                    if (( ${grade} >= -6\
    \ )); then\n                                        letter_grades=\"$letter_grades\
    \ C\"\n                                    else\n                            \
    \            if (( ${grade} >= -7 )); then\n                                 \
    \           letter_grades=\"$letter_grades C-\"\n                            \
    \            else\n                                            if (( ${grade}\
    \ >= -8 )); then\n                                                letter_grades=\"\
    $letter_grades D+\"\n                                            else\n      \
    \                                          if (( ${grade} >= -9 )); then\n   \
    \                                                 letter_grades=\"$letter_grades\
    \ D\"\n                                                else\n                \
    \                                    if (( ${grade} >= -10 )); then\n        \
    \                                                letter_grades=\"$letter_grades\
    \ D", "    local i gpas grade grades letter\n    grades=\"${1// / }\"\n    for\
    \ gpas in $grades; do\n        grade=`echo $gpas | cut -d'.' -f1`\n        letter=`echo\
    \ $gpas | cut -d'.' -f2`\n        grade=\"gpa:$grade\"\n        grade=\"letter:$letter\"\
    \n        grade=\"$grades\"\n    done", "\tgrade=$1\n\tgrade=${grade%%.*}\n\t\
    grade=${grade##*,}\n\tgrade=${grade%%-*}\n\tgrades=()\n\tfor i in {4..8}; do\n\
    \t\tif [ \"$grade\" -gt \"$i\" ]; then\n\t\t\tgrade+=${i:-1}\n\t\t\tgrades+=(\"\
    ${grade}+${i}\")\n\t\t\tbreak\n\t\tfi\n\t\tif [ \"$grade\" -le \"$i\" ]; then\n\
    \t\t\tgrades+=(\"${grade}-${i}\")\n\t\t\tbreak\n\t\tfi\n\tdone\n\tgrades+=(\"\
    ${grade}-\")\n\tgrades+=(\"$grade\")\n\tgrades+=(\"$grade\")\n\techo \"${grades[*]}\"",
  "\tlocal grades=$1\n\tlocal total_grades=0\n\tlocal letter=''\n\tlocal letter_grade=''\n\
    \tlocal prev_letter=''\n\tlocal prev_letter_grade=''\n\tlocal i\n\tfor i in $grades;\
    \ do\n\t\tif [ $i -eq 0 ]; then\n\t\t\ttotal_grades+=1\n\t\t\tletter=$i\n\t\t\t\
    letter_grade=$i\n\t\telse\n\t\t\tif [ $total_grades -eq 0 ]; then\n\t\t\t\ttotal_grades=$i\n\
    \t\t\t\tletter=$i\n\t\t\t\tletter_grade=$i\n\t\t\telif [ $total_grades -gt 0 ]\
    \ && [ $i -gt 0 ]; then\n\t\t\t\tif [ $total_grades -gt $i ]; then\n\t\t\t\t\t\
    total_grades=$i\n\t\t\t\t\tletter=$i\n\t\t\t\t\tletter_grade=$i\n\t\t\t\telse\n\
    \t\t\t\t\ttotal_grades=$i\n\t\t\t\t\tletter=$i\n\t\t\t\t\tletter_grade=$i\n\t\t\
    \t\tfi\n\t\t\telif [ $total_grades -gt 0 ] && [ $i -lt 0 ]; then\n\t\t\t\ttotal_grades=$i\n\
    \t\t\t\tletter=$i\n\t\t\t\tletter_grade=$i\n\t\t\telif [ $total_grades -gt 0 ]\
    \ && [ $i -le 0 ]; then\n\t\t\t\ttotal_grades=$i\n\t\t\t\tletter=$i\n\t\t\t\t\
    letter_grade=$i\n\t\t\telif [ $total_grades -eq $i ]; then\n\t\t\t\ttotal_grades+=1\n\
    \t\t\t\tletter=$i\n\t\t\t\tletter_grade=$i\n\t\t\telif [ $total_grades -le $i\
    \ ]; then\n\t\t\t\ttotal_grades=$i\n\t\t\t\tletter=$i\n\t\t\t\tletter_grade=$i\n\
    \t\t\tfi\n\t\tfi\n\tdone\n\techo \"$letter $letter_grade\"", "    local gpa gpa1\
    \ gpa2 letter_grade\n    for gpa1 in \"${1// /$'\\n'/ }\"; do\n        for gpa2\
    \ in \"${2// /$'\\n'/ }\"; do\n            if [ \"$gpa2\" -gt \"$gpa1\" ]; then\n\
    \                gpa1=$gpa2\n            fi\n        done\n        letter_grade=\n\
    \        case $gpa in\n            4.0) letter_grade=A+; ;;\n            > 3.7)\
    \ letter_grade=A ;;\n            > 3.3) letter_grade=A- ;;\n            > 3.0)\
    \ letter_grade=B+; ;;\n            > 2.7) letter_grade=B ;;\n            > 2.3)\
    \ letter_grade=B- ;;\n            > 2.0) letter_grade=C+; ;;\n            > 1.7)\
    \ letter_grade=C ;;\n            > 1.3) letter_grade=C- ;;\n            > 1.0)\
    \ letter_grade=D+ ;;\n            > 0.7) letter_grade=D ;;\n            > 0.0)\
    \ letter_grade=D- ;;\n            *) letter_grade=E ;;\n        esac\n       \
    \ echo -n \"$gpa | $letter_grade\"\n    done", "    local sum=$1 \n    local total=0\n\
    \    local num_grades=0\n    local total=0\n    local num_grades=0\n    local\
    \ gpa \n\n    while [[ $sum != 0 ]]; do\n        gpa=$((sum/10)) \n        ((sum-=10*gpa))\n\
    \        ((num_grades+=($((gpa*10))))) \n        ((total+=gpa)) \n    done\n\n\
    \    local letter_grade\n    if [[ $num_grades == 0 ]]; then\n        letter_grade='\"\
    E\"'\n    elif [[ $total -eq 0 ]]; then\n        letter_grade='\"D-\"'\n    elif\
    \ [[ $total -eq 2 ]]; then\n        letter_grade='\"D\"'\n    elif [[ $total -eq\
    \ 4 ]]; then\n        letter_grade='\"D+\"'\n    elif [[ $total -eq 6 ]]; then\n\
    \        letter_grade='\"D\"'\n    elif [[ $total -eq 8 ]]; then\n        letter_grade='\"\
    D+\"'\n    elif [[ $total -eq 10 ]]; then\n        letter_grade='\"D\"'\n    elif\
    \ [[ $total -eq 12 ]]; then\n        letter_grade='\"D+\"'\n    elif [[ $total\
    \ -eq 14 ]]; then\n        letter_grade='\"D\"'\n    elif [[ $total -eq 16 ]];\
    \ then\n        letter_grade='\"D+\"'\n    elif [[ $total -eq 18 ]]; then\n  \
    \      letter_grade='\"D\"'\n    elif [[ $total -eq 20 ]]; then\n        letter_grade='\"\
    D+\"'\n    elif [[ $total -eq 22 ]]; then\n        letter_grade='\"D\"'\n    elif\
    \ [[ $total -eq 24 ]]; then\n        letter_grade='\"D+\"'\n    elif [[ $total\
    \ -eq 26 ]]; then\n        letter_grade='\"D\"'\n    elif [[ $total -eq 28 ]];\
    \ then\n        letter_grade='\"D+\"'\n    elif [[ $total -eq 30 ]]; then\n  \
    \      letter_grade='\"D\"'\n    elif [[ $total -eq 32 ]]; then\n        letter_grade='\"\
    D+\"'\n    elif [[ $total -eq 34 ]]; then\n        letter_grade='\"D\"'\n    elif\
    \ [[ $total -eq 36 ]]; then\n        letter_grade='\"D+\"'\n    elif [[ $total\
    \ -eq 38 ]]; then\n        letter_grade='\"D\"'\n    elif [[ $total -eq 40 ]];\
    \ then\n        letter_grade='\"D+\"'\n    elif [[ $total -eq 50 ]]; then", " \
    \   local a=( $1 )\n    local result=\"\"\n\n    for (( i=0; i<${#a[@]}; i++ ));\
    \ do\n        if (( ${a[i]} >= 4.0 )); then\n            result=\"$result${#result}\
    \ A+\"\n        elif (( ${a[i]} > 3.7 )); then\n            result=\"$result${#result}\
    \ A\"\n        elif (( ${a[i]} > 3.0 )); then\n            result=\"$result${#result}\
    \ A-\"\n        elif (( ${a[i]} > 2.7 )); then\n            result=\"$result${#result}\
    \ B+\"\n        elif (( ${a[i]} > 2.3 )); then\n            result=\"$result${#result}\
    \ B\"\n        elif (( ${a[i]} > 2.0 )); then\n            result=\"$result${#result}\
    \ B-\"\n        elif (( ${a[i]} > 1.7 )); then\n            result=\"$result${#result}\
    \ C+\"\n        elif (( ${a[i]} > 1.3 )); then\n            result=\"$result${#result}\
    \ C\"\n        elif (( ${a[i]} > 1.0 )); then\n            result=\"$result${#result}\
    \ C-\"\n        elif (( ${a[i]} > 0.7 )); then\n            result=\"$result${#result}\
    \ D+\"\n        elif (( ${a[i]} > 0.0 )); then\n            result=\"$result${#result}\
    \ D\"\n        else\n            result=\"$result${#result} D-\"\n        fi\n\
    \    done\n\n    IFS=$' \\t\\n'\n    echo \"$result\"", "    if [[ ${#1} -lt 3\
    \ ]]\n    then\n        echo \"Invalid grade list. Make sure you only have 3 grades\"\
    \n    else\n        echo \"Invalid grade. Make sure you only have decimal numbers\"\
    \n    fi", "  local letter_grade gpa\n  \n  for i in $@\n  do\n    gpa=`echo \"\
    $i\" | cut -d' ' -f1`\n    letter_grade=`echo \"$i\" | cut -d' ' -f2`\n    \n\
    \    case \"$letter_grade\" in\n      \"\"|\"0.0\") ;;\n      \"1.0\") echo \"\
    $letter_grade\";;\n      \"2.0\") echo \"$letter_grade\";;\n      \"3.0\") echo\
    \ \"$letter_grade\";;\n      \"4.0\") echo \"$letter_grade\";;\n      \"5.0\"\
    ) echo \"$letter_grade\";;\n      \"6.0\") echo \"$letter_grade\";;\n      \"\
    7.0\") echo \"$letter_grade\";;\n      \"8.0\") echo \"$letter_grade\";;\n   \
    \   \"9.0\") echo \"$letter_grade\";;\n      *)        echo \"$letter_grade\"\
    \ ;;\n    esac\n  done", "    local GPA_array=$1\n    local grades_array=()\n\
    \    for GPA in ${GPA_array[@]}; do\n        if [ ${GPA} -ge 4 ] && [ ${GPA} -le\
    \ 4.0 ]; then\n            grades_array+=(\"A+\")\n        elif [ ${GPA} -gt 3.7\
    \ ] && [ ${GPA} -le 3.3 ]; then\n            grades_array+=(\"A\")\n        elif\
    \ [ ${GPA} -gt 3.3 ] && [ ${GPA} -le 3.0 ]; then\n            grades_array+=(\"\
    A-\")\n        elif [ ${GPA} -gt 2.7 ] && [ ${GPA} -le 2.3 ]; then\n         \
    \   grades_array+=(\"B+\")\n        elif [ ${GPA} -gt 2.3 ] && [ ${GPA} -le 2.0\
    \ ]; then\n            grades_array+=(\"B\")\n        elif [ ${GPA} -gt 2.0 ]\
    \ && [ ${GPA} -le 1.7 ]; then\n            grades_array+=(\"B-\")\n        elif\
    \ [ ${GPA} -gt 1.7 ] && [ ${GPA} -le 1.3 ]; then\n            grades_array+=(\"\
    C+\")\n        elif [ ${GPA} -gt 1.3 ] && [ ${GPA} -le 1.0 ]; then\n         \
    \   grades_array+=(\"C\")\n        elif [ ${GPA} -gt 1.0 ] && [ ${GPA} -le 0.7\
    \ ]; then\n            grades_array+=(\"C-\")\n        elif [ ${GPA} -gt 0.7 ]\
    \ && [ ${GPA} -le 0.0 ]; then\n            grades_array+=(\"D+\")\n        elif\
    \ [ ${GPA} -gt 0.0 ] && [ ${GPA} -le 0.0 ]; then\n            grades_array+=(\"\
    D\")\n        else\n            grades_array+=(\"D-\")\n        fi\n    done\n\
    \    echo \"${grades_array[@]}\"", "    local grades grade\n    grades=$@\n  \
    \  while IFS=\" \"; read grade || [[ -n $grade ]]; do\n        if [ \"$grade\"\
    \ -gt 3.0 ]\n        then grade=\"A+\"\n        elif [ \"$grade\" -gt 2.0 ]\n\
    \        then grade=\"A\"\n        elif [ \"$grade\" -gt 1.7 ]\n        then grade=\"\
    A-\"\n        elif [ \"$grade\" -gt 1.0 ]\n        then grade=\"B+\"\n       \
    \ elif [ \"$grade\" -gt 0.7 ]\n        then grade=\"B\"\n        elif [ \"$grade\"\
    \ -gt 0.3 ]\n        then grade=\"B-\"\n        elif [ \"$grade\" -gt 0.0 ]\n\
    \        then grade=\"C+\"\n        elif [ \"$grade\" -gt -0.3 ]\n        then\
    \ grade=\"C\"\n        elif [ \"$grade\" -gt -0.7 ]\n        then grade=\"C-\"\
    \n        elif [ \"$grade\" -gt -1.0 ]\n        then grade=\"D+\"\n        elif\
    \ [ \"$grade\" -gt -1.7 ]\n        then grade=\"D\"\n        elif [ \"$grade\"\
    \ -gt -2.0 ]\n        then grade=\"D-\"\n        elif [ \"$grade\" -gt -3.0 ]\n\
    \        then grade=\"E\"\n        fi\n        echo \"$grade\"\n    done <<< \"\
    $grades\"", "    local i grade\n    for ((i=1; i<=$1; i+=1)); do\n        grade=$(cat\
    \ grades | head -$i | tail -1)\n        echo \"\\\"$grade\\\"\" \n    done", " \
    \   # $1 is a space-separated list with a GPA for each student. \n    # Example:\n\
    \    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n    # ['\"A+\"', '\"B\"', '\"\
    C-\"', '\"C\"', '\"A-\"']\n    list=$1\n    list=${#list[@]}\n    grades=\"\"\n\
    \    for i in $(seq 0 $(( $list - 1 )))\n    do\n        if [ $(( $i + 1 )) -lt\
    \ $list ]; then\n            if [ \"$(( $list * ( $i + 1 ) ))\" -gt \"$list\"\
    \ ]; then\n                grades+=\"D-\"\n            else\n                grades+=\"\
    D\"\n            fi\n        else\n            if [ \"$(( $list * ( $i + 1 ) ))\"\
    \ -gt \"$list\" ]; then\n                grades+=\"D-\"\n            else\n  \
    \              grades+=\"D\"\n            fi\n        fi\n    done\n    grades+=\"\
    E\"\n    return $grades", "  local grades=( $1 )\n  local grade\n  local grades\n\
    \  local letter_grades\n  \n  for grade in \"${grades[@]}\"; do\n    if [[ -z\
    \ $grade ]]; then\n      echo \"$grade is a blank entry\"\n      continue\n  \
    \  fi\n\n    if [[ -z $grade ]]; then\n      echo \"$grade is a blank entry\"\n\
    \      continue\n    fi\n  \n    if [[ \"$grade\" == \\* ]]; then\n      echo\
    \ \"$grade is a wildcard\"\n      continue\n    fi\n  \n    local base=$((${grade}-1))\n\
    \    if [[ \"$grade\" -ge 0 ]]; then\n      if [[ \"$grade\" -ge 4 ]]; then\n\
    \        if [[ \"$grade\" -ge 8 ]]; then\n          grades=( $( printf '%02d'\
    \ $((${grade} - 4)) ))\n        else\n          grades=( $( printf '%02d' $((${grade}-8))\
    \ ))\n        fi\n      fi\n    fi\n\n    if [[ \"$grade\" -ge 4 ]]; then\n  \
    \    if [[ \"$grade\" -ge 8 ]]; then\n        grades=( $( printf '%02d' $((${grade}\
    \ - 4)) ))\n      else\n        grades=( $( printf '%02d' $((${grade}-8)) ))\n\
    \      fi\n    fi\n\n    if [[ \"$grade\" == 0 ]]; then\n      grades=( $( printf\
    \ '%02d' $((${grade} - 4)) ))\n    fi\n\n    if [[ \"$grade\" -ge 4 ]]; then\n\
    \      grades=( $( printf '%02d' $((${grade} - 4)) ))\n    fi\n\n    letter_grades=(\
    \ $( printf '%02d' ${grades[0]} ))\n    for index in \"${!grades[@]}\"; do\n \
    \     if [[ \"$index\" -ge 1 ]]; then\n        letter_grades=( ${letter_grades[@]}\
    \ $( printf '%02d' ${grades[index] } ))\n      else\n        letter_grades=( ${letter_grades[@]}\
    \ $( printf '%02d' $((${grades[index]}+1)) ))\n      fi\n    done\n  \n    echo\
    \ \"${letter_grades[@]}\"\n  done", "  # Get the grades and convert them to integers\n\
    \  local grades\n  grades=\"$1\"\n  grades=$(echo \"${grades}\" | sed \"s/,/ 3.0\
    \ 2.7 2.3 2.0 1.7 1.3 1.0 0.7 0.0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\
    \ 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00",
  "\tlocal grade_line=$1\n\tlocal grade_split=($grade_line)\n\tlocal grade=\"${grade_split[1]}\"\
    \n\tlocal year=\"${grade_split[2]}\"\n\tlocal week=\"${grade_split[3]}\"\n\n\t\
    local gpa_number=\"$(printf '%.2s' \"$grade_split[@]:4:2\")\"\n\tlocal gpa=\"\
    ${gpa_number%?}\"\n\n\tlocal letter_grade=\n\tlocal letter_grade=\"\"\n\tlocal\
    \ letter_grades=()\n\n\tif [[ \"$week\" == '1'  ]]\n\tthen\n\t\tletter_grades+=($letter_grade)\n\
    \telse\n\t\tif [[ \"$week\" == '10' ]]\n\t\tthen\n\t\t\tif [[ \"$grade\" -gt '4.0'\
    \ ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"A+\"\n\t\t\telif [[ \"$grade\" -gt '3.7'\
    \ ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"A\"\n\t\t\telif [[ \"$grade\" -gt '3.3'\
    \ ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"A-\"\n\t\t\telif [[ \"$grade\" -gt '3'\
    \ ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"B+\"\n\t\t\telif [[ \"$grade\" -gt '2.7'\
    \ ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"B\"\n\t\t\telif [[ \"$grade\" -gt '2.3'\
    \ ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"B-\"\n\t\t\telif [[ \"$grade\" -gt '2'\
    \ ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"C+\"\n\t\t\telif [[ \"$grade\" -gt '1.7'\
    \ ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"C\"\n\t\t\telif [[ \"$grade\" -gt '1.3'\
    \ ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"C-\"\n\t\t\telif [[ \"$grade\" -gt '1'\
    \ ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"D+\"\n\t\t\telif [[ \"$grade\" -gt '0.7'\
    \ ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"D\"\n\t\t\telif [[ \"$grade\" -gt '0'\
    \ ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"D-\"\n\t\t\telif [[ \"$grade\" -gt '0.0'\
    \ ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"E\"\n\t\t\tfi\n\t\telse\n\t\t\tif [[\
    \ \"$grade\" -gt '4.0' ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"A+\"\n\t\t\telif\
    \ [[ \"$grade\" -gt '3.7' ]]\n\t\t\tthen\n\t\t\t\tletter_grade+=\"A\"\n\t\t\t\
    elif [[ \"$", "\tlocal grades=$1\n\tlocal result='[\"'\n\tlocal current_gpa=$2\n\
    \tlocal current_letter=$3\n\tlocal current_letter_value=$4\n\tlocal counter=0\n\
    \tfor grade in $grades; do\n\t\tif [[ \"$current_gpa\" -gt $grade ]]; then\n\t\
    \t\tif [ \"$counter\" = 0 ]; then\n\t\t\t\tcurrent_gpa=$grade\n\t\t\t\tcurrent_letter=$3\n\
    \t\t\t\tcurrent_letter_value=$4\n\t\t\t\tresult+='\"'+$current_letter_value+'\"\
    '+' '\n\t\t\t\tcounter=$((counter+1))\n\t\t\telse\n\t\t\t\tresult+='\"'+$current_letter_value+'\"\
    '+' '\n\t\t\t\tcounter=$((counter+1))\n\t\t\tfi\n\t\telse\n\t\t\tif [ \"$counter\"\
    \ = 0 ]; then\n\t\t\t\tcurrent_gpa=$grade\n\t\t\t\tcurrent_letter=$4\n\t\t\t\t\
    current_letter_value=$5\n\t\t\t\tresult+='\"'+$current_letter_value+'\"'+' '\n\
    \t\t\t\tcounter=$((counter+1))\n\t\t\telse\n\t\t\t\tresult+='\"'+$current_letter_value+'\"\
    '+' '\n\t\t\t\tcounter=$((counter+1))\n\t\t\tfi\n\t\tfi\n\tdone\n\tresult+='\"\
    E\"'+']'\n\techo $result", "   local gpa=$(echo \"$1\" | awk '{print $1}')\n \
    \  local score=$(echo \"$1\" | awk '{print $2}')\n   local letter=$(echo \"$1\"\
    \ | awk '{print $3}')\n   if [ \"$gpa\" -eq \"0\" ]\n   then \n      echo \"$letter\"\
    \n   elif [ \"$score\" -gt \"4.5\" ] || [ \"$score\" -lt \"0.0\" ]\n   then\n\
    \      echo \"$letter\"\n   elif [ \"$score\" -gt \"3.5\" ] && [ \"$score\" -lt\
    \ \"4.0\" ]\n   then\n      echo \"$letter\"\n   elif [ \"$score\" -gt \"3.0\"\
    \ ] && [ \"$score\" -lt \"3.7\" ]\n   then\n      echo \"$letter\"\n   elif [\
    \ \"$score\" -gt \"2.7\" ] && [ \"$score\" -lt \"3.3\" ]\n   then\n      echo\
    \ \"$letter\"\n   elif [ \"$score\" -gt \"2.3\" ] && [ \"$score\" -lt \"3.0\"\
    \ ]\n   then\n      echo \"$letter\"\n   elif [ \"$score\" -gt \"2.0\" ] && [\
    \ \"$score\" -lt \"2.7\" ]\n   then\n      echo \"$letter\"\n   elif [ \"$score\"\
    \ -gt \"1.7\" ] && [ \"$score\" -lt \"2.3\" ]\n   then\n      echo \"$letter\"\
    \n   elif [ \"$score\" -gt \"1.3\" ] && [ \"$score\" -lt \"2.0\" ]\n   then\n\
    \      echo \"$letter\"\n   elif [ \"$score\" -gt \"1.0\" ] && [ \"$score\" -lt\
    \ \"1.7\" ]\n   then\n      echo \"$letter\"\n   elif [ \"$score\" -gt \"0.7\"\
    \ ] && [ \"$score\" -lt \"1.3\" ]\n   then\n      echo \"$letter\"\n   elif [\
    \ \"$score\" -gt \"0.0\" ] && [ \"$score\" -lt \"1.0\" ]\n   then\n      echo\
    \ \"$letter\"\n   elif [ \"$score\" -gt \"0.0\" ] && [ \"$score\" -lt \"0.7\"\
    \ ]\n   then\n      echo \"$letter\"\n   else\n      echo \"$letter\"\n   fi",
  "    local gpa=$1\n    local grades=$2\n    local output=\"\"\n\n    for ((i=1;\
    \ i<=$#; i++ ))\n    do\n        if [[ \"$i\" -eq 1 ]]\n        then\n       \
    \     grade=`echo \"$grades\" | cut -d ' ' -f $i`\n        fi\n        if [[ \"\
    $i\" -eq \"$#\" ]]\n        then\n            grade=`echo \"$grades\" | cut -d\
    \ ' ' -f 1`\n        fi\n\n        if [[ \"$grade\" =~ ^-?[0-9]+\\.[0-9]+$ ]]\n\
    \        then\n            gpa=`echo \"$gpa\" | cut -d '.' -f $i`\n          \
    \  gpa=`echo \"$gpa\" | cut -d 'E' -f $i`\n            gpa=`echo \"$gpa\" | cut\
    \ -d 'P' -f $i`\n            gpa=`echo \"$gpa\" | cut -d 'X' -f $i`\n        \
    \    gpa=`echo \"$gpa\" | cut -d 'B' -f $i`\n            gpa=`echo \"$gpa\" |\
    \ cut -d 'B' -f $i`\n            gpa=`echo \"$gpa\" | cut -d 'X' -f $i`\n    \
    \        gpa=`echo \"$gpa\" | cut -d 'X' -f $i`\n            gpa=`echo \"$gpa\"\
    \ | cut -d 'P' -f $i`\n            gpa=`echo \"$gpa\" | cut -d 'E' -f $i`\n  \
    \          gpa=`echo \"$gpa\" | cut -d 'E' -f $i`\n            gpa=`echo \"$gpa\"\
    \ | cut -d 'X' -f $i`\n            gpa=`echo \"$gpa\" | cut -d 'X' -f $i`\n  \
    \          gpa=`echo \"$gpa\" | cut -d 'P' -f $i`\n            gpa=`echo \"$gpa\"\
    \ | cut -d 'E' -f $i`\n            gpa=`echo \"$gpa\" | cut -d 'E' -f $i`\n  \
    \          gpa=`echo \"$gpa\" | cut -d 'B' -f $i`\n            gpa=`echo \"$gpa\"\
    \ | cut -d 'B' -f $i`\n            gpa=`echo \"$gpa\" | cut -d 'B' -f $i`\n  \
    \          gpa=`echo \"$gpa\" | cut -d 'X' -f $i`\n            gpa=`echo \"$gpa\"\
    \ | cut -d '", "    local score=\"$1\"\n    local gpa=\"$2\"\n    local max_gpa=\"\
    $3\"\n    local i\n\n    local grades=()\n    local index=0\n    local gpa_index=0\n\
    \    local letter_index=0\n    \n    while [ $score -le $max_gpa ]; do\n     \
    \   if [ $index -eq 0 ]; then\n            grades[$gpa_index]=A\n            letter_index=0\n\
    \        elif [ $((score / max_gpa)) -eq 1 ]; then\n            grades[$gpa_index]=A\n\
    \        elif [ $((score / max_gpa)) -eq 2 ]; then\n            grades[$gpa_index]=A-\n\
    \        elif [ $((score / max_gpa)) -eq 3 ]; then\n            grades[$gpa_index]=B+\n\
    \        elif [ $((score / max_gpa)) -eq 4 ]; then\n            grades[$gpa_index]=B\n\
    \        elif [ $((score / max_gpa)) -eq 5 ]; then\n            grades[$gpa_index]=B-\n\
    \        elif [ $((score / max_gpa)) -eq 6 ]; then\n            grades[$gpa_index]=C+\n\
    \        elif [ $((score / max_gpa)) -eq 7 ]; then\n            grades[$gpa_index]=C\n\
    \        elif [ $((score / max_gpa)) -eq 8 ]; then\n            grades[$gpa_index]=C-\n\
    \        elif [ $((score / max_gpa)) -eq 9 ]; then\n            grades[$gpa_index]=D+\n\
    \        elif [ $((score / max_gpa)) -eq 10 ]; then\n            grades[$gpa_index]=D\n\
    \        elif [ $((score / max_gpa)) -eq 11 ]; then\n            grades[$gpa_index]=D-\n\
    \        elif [ $((score / max_gpa)) -eq 12 ]; then\n            grades[$gpa_index]=E\n\
    \        fi\n        \n        score=$(($score*$max_gpa))\n        index=$(($index+1))\n\
    \        gpa=$(($gpa+1))\n        gpa_index=$(($gpa_index+1))\n        \n    \
    \    (( $score ))\n    done\n\n    echo \"${grades[*]}\"", "  local gpa=$1\n \
    \ local grade=\n  local num_grades=0\n  local gpa_char=0\n  local i=0\n  local\
    \ num_gpas=$(echo $gpa | tr \" \" \"\\n\" | wc -l)\n  local num_grade_chars=$(echo\
    \ $gpa | tr \" \" \"\\n\" | sed \"s/ /\\n/g\" | wc -l)\n  \n  while [ $i -lt $num_gpas\
    \ ]; do\n    gpa=$(echo $gpa | cut -d \" \" -f $i)\n    grade=$(echo $gpa | tr\
    \ \" \" \"\\n\" | sed \"s/ /\\n/g\" | cut -d \".\" -f $i)\n    \n    local letter_grade=\"\
    \"\n    local gpa_grand=$gpa\n    \n    if [[ $grade -ge 3.0 ]]; then\n      letter_grade=\"\
    A+\"\n    elif [[ $grade -ge 3.7 ]]; then\n      letter_grade=\"A\"\n    elif\
    \ [[ $grade -ge 3.3 ]]; then\n      letter_grade=\"A-\"\n    elif [[ $grade -ge\
    \ 3.0 ]]; then\n      letter_grade=\"B+\"\n    elif [[ $grade -ge 2.7 ]]; then\n\
    \      letter_grade=\"B\"\n    elif [[ $grade -ge 2.3 ]]; then\n      letter_grade=\"\
    B-\"\n    elif [[ $grade -ge 2.0 ]]; then\n      letter_grade=\"C+\"\n    elif\
    \ [[ $grade -ge 1.7 ]]; then\n      letter_grade=\"C\"\n    elif [[ $grade -ge\
    \ 1.3 ]]; then\n      letter_grade=\"C-\"\n    elif [[ $grade -ge 1.0 ]]; then\n\
    \      letter_grade=\"D+\"\n    elif [[ $grade -ge 0.7 ]]; then\n      letter_grade=\"\
    D\"\n    elif [[ $grade -ge 0.0 ]]; then\n      letter_grade=\"D-\"\n    elif\
    \ [[ $grade -ge 0.0 ]]; then\n      letter_grade=\"E\"\n    fi\n    \n    num_grade_chars=$(echo\
    \ $gpa | tr \" \" \"\\n\" | sed \"s/ /\\n/g\" | cut -d \".\" -f $i)\n    \n  \
    \  num_grade_chars=$(echo $num_grade_chars | wc -l)\n    \n    if [ $num_grade_chars\
    \ -gt 0 ]; then\n      num_grade_chars=$(echo $num_grade_chars | cut -d \".\"\
    \ -f 1)\n      gpa_grand=$gpa_grand$(echo $gpa | sed \"s/$i/\\\\n/g\")\n     \
    \ \n      gpa_grand=$(echo $", "  local GPAs=\"$1\"\n  local letterGrades=$2\n\
    \  \n  # Convert GPAs to numerical values\n  GPAs=\"$(echo \"$GPAs\" | sed -r\
    \ \"s/^\\s*(\\d+)(\\.\\d+)\\s*$/\\1 \\2/\")\"\n\n  # Sum GPAs and divide by number\
    \ of GPAs\n  GPA=\"$(echo \"$GPAs\" | sed -r \"s/^\\s*([\\d\\.]+)(\\s*\\(+\\)\\\
    s*)*$/\\1\\2/\")\"\n  GPA=\"$((${GPA:-0}+0.00))\"\n\n  # Loop through the GPAs\
    \ and find the letter grade\n  for i in $(seq 0 \"$((${#GPAs[@]}-1))\"); do\n\
    \    if [[ \"$GPA\" -gt \"$(echo \"${GPAs[$i]}\" | cut -d \".\" -f 1)\" ]]; then\n\
    \      letterGrades+=\"$((${letterGrades[$i]}+1))\"\n    fi\n  done\n\n  # Return\
    \ the letter grades array\n  echo \"${letterGrades[@]}\"", "    local grades=$1\n\
    \    local grades_array=()\n\n    for grade in $grades\n    do\n        local\
    \ grade_array=()\n        grades_array+=(\"$grade\")\n\n        if [[ $grade -gt\
    \ 0 && $grade -le 4 ]]\n        then\n            grade_array+=(\"A+\")\n    \
    \    elif  [[ $grade -gt 4 && $grade -le 7 ]]\n        then\n            grade_array+=(\"\
    A\")\n        elif [[ $grade -gt 7 && $grade -le 9 ]]\n        then\n        \
    \    grade_array+=(\"A-\")\n        elif [[ $grade -gt 9 && $grade -le 11 ]]\n\
    \        then\n            grade_array+=(\"B+\")\n        elif  [[ $grade -gt\
    \ 11 && $grade -le 13 ]]\n        then\n            grade_array+=(\"B\")\n   \
    \     elif [[ $grade -gt 13 && $grade -le 15 ]]\n        then\n            grade_array+=(\"\
    B-\")\n        elif [[ $grade -gt 15 && $grade -le 17 ]]\n        then\n     \
    \       grade_array+=(\"C+\")\n        elif  [[ $grade -gt 17 && $grade -le 19\
    \ ]]\n        then\n            grade_array+=(\"C\")\n        elif [[ $grade -gt\
    \ 19 && $grade -le 21 ]]\n        then\n            grade_array+=(\"C-\")\n  \
    \      elif [[ $grade -gt 21 && $grade -le 23 ]]\n        then\n            grade_array+=(\"\
    D+\")\n        elif  [[ $grade -gt 23 && $grade -le 25 ]]\n        then\n    \
    \        grade_array+=(\"D\")\n        elif [[ $grade -gt 25 && $grade -le 27\
    \ ]]\n        then\n            grade_array+=(\"D-\")\n        elif [[ $grade\
    \ -gt 27 && $grade -le 29 ]]\n        then\n            grade_array+=(\"E\")\n\
    \        fi\n        grades_array+=(\"${grade_array[@]}\")\n    done\n\n    echo\
    \ \"${grades_array[@]}\"", "    local grades=$1\n    local i=0\n    local grade\n\
    \    local result\n    while IFS=\"[ \\t]\" read -ra grade; do\n        result=\"\
    D-\"\n        ((i>0)) && result+=\"-\"\n        result+=\"$(echo \"${grades[@]/#/}\"\
    ) \"\n        ((i<${#grades[@]})) && result+=\"+\"\n        echo \"$result\"\n\
    \        ((++i)>15) && break\n    done", "  if [[ $1 == \"\" || $1 == \" \" ]];\
    \ then\n    return 0\n  fi\n  \n  local result=()\n  \n  local grade_line=$1\n\
    \  \n  local x=0\n  local y=0\n  local gpa=${grade_line}\n  \n  local x=0\n  local\
    \ y=0\n  local grade=\"\"\n  \n  local grade_x=0\n  local grade_y=0\n  \n  local\
    \ gpa=${grade_line}\n  \n  while [[ \"$gpa\" != \"\" ]]; do\n    \n    local grade_x=$(($grade_x\
    \ + 1))\n    local grade_y=$(($grade_y + 1))\n    \n    if [[ $grade_y -gt $((${#result[@]}\
    \ - 1)) ]]; then\n      grade_y=1\n    fi\n    \n    gpa=${gpa:0:$grade_x}\n \
    \   \n    if [[ \"$gpa\" == \".\" ]]; then\n      grade=\"$grade \"\n    elif\
    \ [[ \"$gpa\" == \"-\" ]]; then\n      grade=\"$grade \"\n    elif [[ \"$gpa\"\
    \ == \"+\" ]]; then\n      grade=\"$grade \"\n    elif [[ \"$gpa\" == \"*\" ]];\
    \ then\n      grade=\"$grade \"\n    elif [[ \"$gpa\" == \"/\" ]]; then\n    \
    \  grade=\"$grade \"\n    elif [[ \"$gpa\" == \"%\" ]]; then\n      grade=\"$grade\
    \ \"\n    elif [[ \"$gpa\" == \"(\" ]] || [[ \"$gpa\" == \")\" ]]; then\n    \
    \  grade=\"$grade \"\n    elif [[ \"$gpa\" == \"&\" ]]; then\n      grade=\"$grade\
    \ \"\n    elif [[ \"$gpa\" == \"!\" ]]; then\n      grade=\"$grade \"\n    elif\
    \ [[ \"$gpa\" == \"=\" ]]; then\n      grade=\"$grade \"\n    elif [[ \"$gpa\"\
    \ == \"#\" ]]; then\n      grade=\"$grade \"\n    elif [[ \"$gpa\" == \"$\" ]];\
    \ then\n      grade=\"$grade \"\n    elif [[ \"$gpa\" == \"%\" ]]; then\n    \
    \  grade=\"$grade \"\n    elif [[ \"$gpa\" == \"+\" ]]; then\n      grade=\"$grade\
    \ \"\n    elif [[ \"$gpa\" == \"-\" ]]; then\n      grade=\"$grade \"\n    elif\
    \ [[ \"$gpa\" == \".\" ]]; then\n      grade=\"$grade \"\n    elif [[ \"$gpa\"\
    \ == \"*\" ]]; then\n      grade=\"$grade \"\n    elif [[ \"$gpa\" == \"/\" ]];\
    \ then", "    local grades=$1\n    local grade\n    local grades\n\n    grades=$(echo\
    \ $grades | tr \" \" \" \")\n\n    for grade in $grades; do\n        if [ ! -z\
    \ \"$grade\" ] && [ \"$grade\" != \"0.0\" ]; then\n            grade=$(echo $grade\
    \ | cut -d '.' -f1)\n            echo $grade\n        elif [ \"$grade\" != \"\
    0.0\" ]; then\n            echo \"0\"\n        fi\n    done", "\tlocal a b c d\n\
    \ta=$1\n\t# the letters A and B are special and don't need a grade\n\tif [[ \"\
    $a\" = \"4.0\"* ]]; then\n\t\ta=0\n\telif [[ \"$a\" =~ ^[0-9.]+ ]]; then\n\t\t\
    a=${a%.*}\n\tfi\n\tb=$2\n\tif [[ \"$b\" = \"4.0\"* ]]; then\n\t\tb=0\n\telif [[\
    \ \"$b\" =~ ^[0-9.]+ ]]; then\n\t\tb=${b%.*}\n\tfi\n\tc=$3\n\tif [[ \"$c\" = \"\
    4.0\"* ]]; then\n\t\tc=0\n\telif [[ \"$c\" =~ ^[0-9.]+ ]]; then\n\t\tc=${c%.*}\n\
    \tfi\n\td=$4\n\tif [[ \"$d\" = \"4.0\"* ]]; then\n\t\td=0\n\telif [[ \"$d\" =~\
    \ ^[0-9.]+ ]]; then\n\t\td=${d%.*}\n\tfi\n\t# now we know a, b, c and d are all\
    \ numbers\n\tlocal letter grade\n\tletter=\n\tif [ $a -gt 3 ]\n\tthen\n\t\tletter=A+\n\
    \telif [ $a -gt 0 ]\n\tthen\n\t\tif [ $a -gt 1 ]\n\t\tthen\n\t\t\tletter=A-\n\t\
    \telse\n\t\t\tletter=B+\n\t\tfi\n\telif [ $b -gt 3 ]\n\tthen\n\t\tletter=B+\n\t\
    elif [ $b -gt 0 ]\n\tthen\n\t\tif [ $b -gt 1 ]\n\t\tthen\n\t\t\tletter=B-\n\t\t\
    else\n\t\t\tletter=C+\n\t\tfi\n\telif [ $c -gt 3 ]\n\tthen\n\t\tletter=C+\n\t\
    elif [ $c -gt 0 ]\n\tthen\n\t\tif [ $c -gt 1 ]\n\t\tthen\n\t\t\tletter=C-\n\t\t\
    else\n\t\t\tletter=D+\n\t\tfi\n\telif [ $d -gt 3 ]\n\tthen\n\t\tletter=D+\n\t\
    elif [ $d -gt 0 ]\n\tthen\n\t\tif [ $d -gt 1 ]\n\t\tthen\n\t\t\tletter=D-\n\t\t\
    else\n\t\t\tletter=E\n\t\tfi\n\telse\n\t\tletter=E\n\tfi\n\techo \"\\\"${letter}\\\
    \"\" ", "\tlocal grade_equation # local prevents variable from being overwritten\n\
    \tgrade_equation=$1 # $1 is a space-separated list\n\tlocal gpa_list # local prevents\
    \ variable from being overwritten\n\tgpa_list=$( echo $grade_equation | sed 's/.*\
    \ //' | sed 's/ /\" \"/g' | sed 's/\\.[0-9][0-9]\\$/\\.0/' )\n\techo \"$(gpa_to_letter\
    \ $gpa_list)\" # prints letters instead of GPAs, $( ) prevents backticks from\
    \ being evaluated", "    grade_list=$1\n    grades=$(grade_equation \"${grade_list}\"\
    )\n    grades=${grades[*]} # remove brackets\n    grades=$(echo \"${grades}\"\
    \ | sed -e 's/ \"//g' -e 's/,//g' -e 's/\"//g')\n    echo \"${grades}\"", "  #\
    \ $1 is the student GPAs and $2 is the letter grade.\n  local a=($1)\n  local\
    \ b=($2)\n  local c=($3)\n  local d=($4)\n  local e=($5)\n\n  # The GPA test and\
    \ letter grade checks\n  if (( ${#a[@]} < 6 )) ; then\n     return \"0\"\n  fi\n\
    \n  # The lettergrade check\n  local i\n  for (( i=0; i<${#a[@]}; i++ )); do\n\
    \     if (( a[i]>${b[i]} )) ; then\n       return ${c[i]}\n     elif (( a[i]<${b[i]}\
    \ )) ; then\n       return ${d[i]}\n     elif (( a[i]>${c[i]} )) ; then\n    \
    \   return ${e[i]}\n     elif (( a[i]<${c[i]} )) ; then\n       return ${e[i]}\n\
    \     elif (( a[i]>${d[i]} )) ; then\n       return ${e[i]}\n     elif (( a[i]<${d[i]}\
    \ )) ; then\n       return ${e[i]}\n     elif (( a[i]>${e[i]} )) ; then\n    \
    \   return ${e[i]}\n     elif (( a[i]<${e[i]} )) ; then\n       return ${e[i]}\n\
    \     fi\n  done\n\n  # All tests passed!\n  return ${e[0]}", "    local grad=$1\n\
    \    local grades=\"A B C D E\"\n    local i=$(( ${#grad} -1 ))\n    local grade_sum=0\n\
    \    \n    until [ $i -eq 0 ]\n    do\n        local grade_part=${grad:$i:1}\n\
    \        local grade_num=${grade_part::1}\n        grade_sum=$(($grade_sum + $grade_num))\n\
    \        i=$(($i-1))\n    done\n    \n    grades=${grades:0:$i}\n    \n    local\
    \ average=$(($grade_sum / ${#grades}))\n    \n    local letter_grade=\"\"\n  \
    \  if [ \"$average\" -gt \"4.0\" ]\n    then\n        letter_grade=\"$grades[$(($average-1))]\"\
    \n    else\n        letter_grade=\"A+\"\n    fi\n    \n    echo $letter_grade",
  "    local grade GPA\n    local grade_string output\n    grade=$1\n    GPA=$2\n\
    \    grade_string=$(echo $grade | tr ' ' ',')\n    grade_string=\"${grade_string//\
    \ /,}\"\n    grade_string=\"${grade_string// \\*,}\"\n    grade_string=\"${grade_string//\
    \ \\/\\/,}\"\n    grade_string=\"${grade_string// \\//,}\"\n    grade_string=\"\
    ${grade_string// #,}\"\n    grade_string=\"${grade_string// \\:,}\"\n    grade_string=\"\
    ${grade_string// \\*,}\"\n    grade_string=\"${grade_string// \\- ,}\"\n    grade_string=\"\
    ${grade_string// \\+ ,}\"\n    grade_string=\"${grade_string// \\/ ,}\"\n    grade_string=\"\
    ${grade_string// \\. ,}\"\n    grade_string=\"${grade_string// \\) ,}\"\n    output=$(echo\
    \ \"$grade_string\" | cut -d ',' -f 2)\n    output=$(echo \"$output\" | tr '\"\
    ' ' ')\n    output=$(echo \"$output\" | sed 's/ /\\+/' | sed 's/ /-/')\n    echo\
    \ \"$output\"", "  local grade=\"$1\"\n  local gpa=\"$2\"\n  local letter_grades\n\
    \  \n  local gpa_array=($gpa)\n  \n  local min_gpa=100\n  local max_gpa=0\n\n\
    \  local min_gpa_letter=\"D+\"\n  local max_gpa_letter=\"D-\"\n  \n  local count_min_gpa=0\n\
    \  local count_max_gpa=0\n\n  # Remove spaces from grade\n  grade=\"$(echo ${grade//[[:space:]]/})\"\
    \ \n\n  # Create array for letter grades\n  letter_grades=()\n\n  while read grade;\
    \ do\n    local gpa_temp=\"$(echo ${grade} | tr -d ' ')\"\n    # Grade is greater\
    \ than or equal to min\n    if [ \"${gpa_temp}\" -gt \"${min_gpa}\" ]; then\n\
    \      (( count_min_gpa+=1 ))\n      # Remember grade and grade letter for min\
    \ gpa\n      min_gpa=\"${gpa_temp}\"\n      min_gpa_letter=\"${grade}\"\n    fi\n\
    \n    # Grade is less than or equal to max\n    if [ \"${gpa_temp}\" -lt \"${max_gpa}\"\
    \ ]; then\n      (( count_max_gpa+=1 ))\n      max_gpa=\"${gpa_temp}\"\n     \
    \ max_gpa_letter=\"${grade}\"\n    fi\n  done < <(echo \"${grade}\" | tr '[:upper:]'\
    \ '[:lower:]')\n\n  # Find grade with the most grade points\n  local count_most_grade_points=0\n\
    \  local max_grade_points=0\n  local max_gpa_letter=\"\"\n  for gpa_point in \"\
    ${gpa_array[@]}\"; do\n    if [ \"${gpa_point}\" -gt \"${max_grade_points}\" ];\
    \ then\n      count_most_grade_points=1\n      max_grade_points=\"${gpa_point}\"\
    \n      max_gpa_letter=\"${grade}\"\n    elif [ \"${gpa_point}\" -eq \"${max_grade_points}\"\
    \ ]; then\n      count_most_grade_points=0\n      max_grade_points=0\n      max_gpa_letter=\"\
    ${grade}\"\n    fi\n  done\n\n  # Check if grade is equal to min gpa\n  if [ \"\
    $count_min_gpa\" -eq \"1\" ]; then\n    letter_grades+=\"\\\"${min_gpa_letter}\\\
    \" \"\n  else\n    if [ \"$count_most_grade_points\" -eq \"0\" ]; then\n     \
    \ # Grade is less than min gpa\n      letter_grades+=\"\\\"", '    # TODO - Implement
    me', "    local GPA=$1\n    local numerical_GPA=${GPA//,/ }\n    local numerical_GPA=`echo\
    \ \"$numerical_GPA\" | cut -d '.' -f 1`\n    local letter_grade\n    case \"$numerical_GPA\"\
    \ in\n        0) letter_grade=\"E\" ;;\n        1) letter_grade=\"D-\" ;;\n  \
    \      2) letter_grade=\"D\" ;;\n        3) letter_grade=\"C+\" ;;\n        4)\
    \ letter_grade=\"C-\" ;;\n        5) letter_grade=\"C\" ;;\n        6) letter_grade=\"\
    B+\" ;;\n        7) letter_grade=\"B\" ;;\n        8) letter_grade=\"B-\" ;;\n\
    \        9) letter_grade=\"B\" ;;\n        10) letter_grade=\"A+\" ;;\n      \
    \  11) letter_grade=\"A\" ;;\n        12) letter_grade=\"A-\" ;;\n        13)\
    \ letter_grade=\"A\" ;;\n        14) letter_grade=\"A+\" ;;\n        15) letter_grade=\"\
    A\" ;;\n        16) letter_grade=\"A-\" ;;\n        17) letter_grade=\"A\" ;;\n\
    \        18) letter_grade=\"A+\" ;;\n        19) letter_grade=\"A\" ;;\n     \
    \   20) letter_grade=\"A-\" ;;\n        21) letter_grade=\"A\" ;;\n        22)\
    \ letter_grade=\"A+\" ;;\n        23) letter_grade=\"A\" ;;\n        24) letter_grade=\"\
    A-\" ;;\n        25) letter_grade=\"A\" ;;\n        26) letter_grade=\"A+\" ;;\n\
    \        27) letter_grade=\"A\" ;;\n        28) letter_grade=\"A-\" ;;\n     \
    \   29) letter_grade=\"A\" ;;\n        30) letter_grade=\"A+\" ;;\n        31)\
    \ letter_grade=\"A\" ;;\n        32) letter_grade=\"A+\" ;;\n        33) letter_grade=\"\
    A\" ;;\n        34) letter_grade=\"A-\" ;;\n        35) letter_grade=\"A\" ;;\n\
    \        36) letter_grade=\"A+\" ;;\n        37) letter_grade=\"A\" ;;\n     \
    \   38) letter_grade=\"A-\" ;;\n        39) letter_grade=\"A\" ;;\n        40)\
    \ letter_grade=\"A+\" ;;\n        41) letter_grade=\"A\" ;;\n        42) letter_grade=\"\
    A+\" ;;\n        43) letter_grade=\"A\" ;;\n        44) letter_grade=\"A-\" ;;\n\
    \        45) letter_grade=\"A\" ;;\n        46) ", "    local n\n    local grade\n\
    \n    for n in \"$1\"; do\n        grade=$( echo \"$n\" | cut -d \".\" -f1 | sed\
    \ 's/^[0-9]//g' )\n        grade=$( echo \"$grade\" | awk -F '-' '{print $(NF-1)+$(NF)}')\n\
    \        grade=$( echo \"$grade\" | awk -F '+' '{print $(NF-1)+$(NF)}')\n\n  \
    \      grade=$( echo \"$grade\" | awk '{if($1>$0){printf(\"%c+\",substr($0,length($0)-2));\
    \ else printf(\"%c-\",substr($0,length($0)-2));}else{if($1>$NF){printf(\"%c+\"\
    ,substr($0,length($0)-2)); else printf(\"%c-\",substr($0,length($0)-2));}}}')\n\
    \        grade=$( echo \"$grade\" | awk '{if($1>$NF){printf(\"%c+\",substr($0,length($0)-1));\
    \ else printf(\"%c-\",substr($0,length($0)-1));}')\n    done", "    # Check if\
    \ there is a space in $1, ignore it\n    local var\n    for var in \"$1\"; do\n\
    \        [[ \"$var\" == \" \" ]] && return\n    done\n    \n    # Convert from\
    \ string to float\n    local var\n    local num\n    for var in \"$1\"; do\n \
    \       num=${var//[0-9.]/}\n    done\n\n    local grade\n    if [[ $num -ge 0\
    \ ]]; then\n        local letter_grade\n        if [[ $num -ge 4 ]]; then\n  \
    \          letter_grade='A+'\n        elif [[ $num -ge 3.7 ]]; then\n        \
    \    letter_grade='A'\n        elif [[ $num -ge 3.3 ]]; then\n            letter_grade='A-'\n\
    \        elif [[ $num -ge 3 ]]; then\n            letter_grade='B+'\n        elif\
    \ [[ $num -ge 2.7 ]]; then\n            letter_grade='B'\n        elif [[ $num\
    \ -ge 2.3 ]]; then\n            letter_grade='B-'\n        elif [[ $num -ge 2\
    \ ]]; then\n            letter_grade='C+'\n        elif [[ $num -ge 1.7 ]]; then\n\
    \            letter_grade='C'\n        elif [[ $num -ge 1.3 ]]; then\n       \
    \     letter_grade='C-'\n        elif [[ $num -ge 1 ]]; then\n            letter_grade='D+'\n\
    \        elif [[ $num -ge 0.7 ]]; then\n            letter_grade='D'\n       \
    \ else\n            letter_grade='D-'\n        fi\n        echo \"$letter_grade\"\
    \n    else\n        echo \"E\"\n    fi", "  # Your code here\n  local grades\n\
    \  grades=(\"$1\")\n  for grade in \"${grades[@]}\"; do\n    if [[ $grade -gt\
    \ 3 ]]; then\n      grade+=\"+\"\n    elif [[ $grade -eq 3 ]]; then\n      grade+=\"\
    -\"\n    elif [[ $grade -gt 2 ]]; then\n      grade+=\"+\"\n    elif [[ $grade\
    \ -eq 2 ]]; then\n      grade+=\"-\"\n    elif [[ $grade -gt 1 ]]; then\n    \
    \  grade+=\"+\"\n    elif [[ $grade -eq 1 ]]; then\n      grade+=\"-\"\n    elif\
    \ [[ $grade -ge 7 ]]; then\n      grade+=\"+\"\n    elif [[ $grade -le 4 ]]; then\n\
    \      grade+=\"-\"\n    elif [[ $grade -ge 3 ]]; then\n      grade+=\"-\"\n \
    \   else\n      grade+=\"+\"\n    fi\n  done\n  echo ${grades[*]}"]
stop_tokens:
- "\n}"
