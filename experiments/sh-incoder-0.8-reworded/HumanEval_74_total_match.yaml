name: HumanEval_74_total_match
language: sh
prompt: "#!/bin/bash\n# Write a function that accepts two lists of strings and returns\
  \ the list that has \n# total number of chars in the all strings of the list less\
  \ than the other list.\n# if the two lists have the same number of chars, return\
  \ the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n# >>> $(total_match\
  \ \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match \"hi admin\"\
  \ \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match \"hi\
  \ admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match \"\
  4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
  \ list\ntotal_match() {\n"
tests: "}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
  ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
  hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
  \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
  \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi\
  \ admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"\
  this\" \"\") = \"\" ]]\n}\n\nrun_test"
completions: ["    local l1=\"$1\"\n    local l2=\"$2\"\n    if [ \"${#l1}\" -gt \"\
    ${#l2}\" ]\n    then\n        echo \"${l1}\"\n        return\n    fi\n    local\
    \ i=${#l1}\n    local j=${#l2}\n    local tmp=\"\"\n    local str=\"\"\n    local\
    \ m=\"\"\n    local l\n    local ret\n    while [ $i -gt 0 ]\n    do\n       \
    \ if [ \"$i\" -eq 1 ]\n        then\n            if [ \"$l1\" = \"$l\" ]\n   \
    \         then\n                ret=\"${ret} $str\"\n            else\n      \
    \          str=\"${l1}\"\n                ret=\"${ret} $str\"\n            fi\n\
    \        else\n            if [ \"$l1\" -eq \"$l\" ]\n            then\n     \
    \           str=\"${l1}\"\n            else\n                str=\"${l1}\"\n \
    \           fi\n            if [ \"$l2\" = \"$m\" ]\n            then\n      \
    \          ret=\"${ret} $str\"\n            else\n                str=\"${l2}\"\
    \n                ret=\"${ret} $str\"\n            fi\n        fi\n        i=$((\
    \ i-1 ))\n        m=$(( j-1 ))\n        l=${l#?}\n        (( j-- ))\n    done\n\
    \    echo \"$ret\"", "    mapfile -t arr1 < <(printf \"%s\\n\" \"${1}\")\n   \
    \ mapfile -t arr2 < <(printf \"%s\\n\" \"${2}\")\n    arr3=()\n    for i in \"\
    ${arr1[@]}\"; do\n        if [[ \"${arr2[@]}\" =~ ^$i ]]; then\n            arr3+=(\"\
    ${arr2[@]}\")\n        fi\n    done\n    arr3=($(printf \"%s\\n\" \"${arr3[@]}\"\
    \ | sort -u | sort))\n    printf \"%s\\n\" \"${arr3[@]}\"", "    local l_strings=(\
    \ $1 )\n    local l_words_1=( $2 )\n    local l_words_2=( $2 )\n    local l_num_chars=0\n\
    \    local l_count=1\n    local l_flag=0\n    local l_temp_flag=0\n    local l_index=0\n\
    \    local l_num_count=$(( ${#l_strings[@]} / ${#l_words_1[@]} ))\n    local l_num_words_1=$((\
    \ ${#l_words_1[@]} / ${#l_words_2[@]} ))\n    local l_num_words_2=$(( ${#l_words_2[@]}\
    \ / ${#l_words_1[@]} ))\n    \n    while (( ${l_index} <= ${l_num_count} )); do\n\
    \        (( l_num_chars += ${#l_strings[$l_index]} ))\n        if [[ ${l_flag}\
    \ -eq 1 ]]; then\n            if [[ \"${l_strings[$l_index]}\" == \"${l_words_1[$l_index]}\"\
    \ ]]; then\n                (( l_num_chars -= ${#l_words_1[$l_index]} ))\n   \
    \         else\n                (( l_num_chars -= ${#l_words_2[$l_index]} ))\n\
    \            fi\n        else\n            if [[ \"${l_strings[$l_index]}\" ==\
    \ \"${l_words_1[$l_index]}\" ]]; then\n                (( l_num_chars -= ${#l_words_1[$l_index]}\
    \ ))\n            else\n                (( l_num_chars -= ${#l_words_2[$l_index]}\
    \ ))\n            fi\n        fi\n        (( l_flag = 1 ))\n        l_index=$((\
    \ ${l_index} + 1 ))\n    done\n    \n    # echo \"${l_words_1[@]}\"\n    # echo\
    \ \"${l_words_2[@]}\"\n    # echo \"${l_strings[@]}\"\n    # echo \"${l_num_chars}\"\
    \n    # echo \"${l_num_count}\"\n    # echo \"${l_num_words_1}\"\n    # echo \"\
    ${l_num_words_2}\"\n\n    l_num_words_1=( $( IFS=$'\\n'; echo \"${l_num_words_1[@]}\"\
    ) )\n    l_num_words_2=( $( IFS=$'\\n'; echo \"${l_num_words_2[@]}\") )\n    l_strings=(\
    \ $( IFS=$'\\n'; echo \"${l_strings[@]}\") )\n\n    l_temp_string=\"\"\n    l_temp_chars=0\n\
    \    l_temp_word=\"\"", "\tlocal list_a=$1\n\tlocal list_b=$2\n\tlet num_chars_a=${#list_a}\n\
    \tlet num_chars_b=${#list_b}\n\t\n\tif [[ $num_chars_a -eq $num_chars_b ]]; then\n\
    \t\tprintf '%s\\n' \"${list_a[@]}\"\n\telse\n\t\tprintf '%s\\n' \"${list_b[@]}\"\
    \n\tfi", "    local list1=\"$1\"\n    local list2=\"$2\"\n    if [[ ${#list1}\
    \ -eq ${#list2} ]]; then\n        echo \"$list1\"\n    else\n        echo \"$list1\"\
    \n    fi", "    local list_1 list_2\n    list_1=$1\n    list_2=$2\n\n    local\
    \ i\n    local total=0\n    local match\n\n    for ((i = 0; i < ${#list_1[*]};\
    \ i++)); do\n        match=( ${list_1[${i}]} )\n        if [[ ${list_1[${i}]}\
    \ < ${list_2[${i}]} ]]; then\n            match+=( ${list_2[${i}]} )\n       \
    \     total=$(( ${total} + ${#match[@]}))\n        fi\n    done\n    echo \"${match[@]}\"",
  "    local list_1 list_2\n    list_1=$1\n    list_2=$2\n    local total=$(echo \"\
    ${list_1}\" |wc -c)\n    local total_2=$(echo \"${list_2}\" |wc -c)\n\n    if\
    \ [ \"${total}\" -eq \"${total_2}\" ]; then\n        echo \"${list_1}\"\n    else\n\
    \        echo \"${list_2}\" | while read -r line; do\n            grep --only-matching\
    \ \"^${line}$\" <<< \"${list_1}\" | cut -d\\  -f1 | sort -u | xargs -n1 echo \"\
    ${line}\"\n        done\n    fi", "  local len1=${#1}\n  local len2=${#2}\n  if\
    \ [[ \"$len1\" -gt \"$len2\" ]] ; then\n    local shorter=${#1}\n    for ((i=1;i<=$(($len1-$len2));i++));\
    \ do\n      if [[ \"$1\" == \"$2\" ]]; then\n        shorter=$i\n        break\n\
    \      fi\n    done\n    if [[ \"$shorter\" -gt \"$len2\" ]]; then\n      shorter=\"\
    $len2\"\n    fi\n    local res=${1:0:$shorter}\n    shift 1\n    shift 2\n   \
    \ echo $res\n  else\n    echo $2\n  fi", "    if [ ! -z \"$1\" ] && [ ! -z \"\
    $2\" ]; then\n        echo \"$1\" | sort | uniq -c | sort -n | awk '$1 < $2'\n\
    \    else\n        echo \"empty argument\"\n    fi", "\t\n\tfirst=$1\n\trest=$2\n\
    \t\n\tfor i in $rest; do\n\t\tlet chars=$(( ${#first} + ${#i} ))\n\t\t\n\t\tif\
    \ [[ $chars -gt ${#first} ]]; then\n\t\t\tfirst=\"$first $i\"\n\t\tfi\n\tdone\n\
    \t\n\techo $first", "    local i j x y z\n    x=$1\n    y=$2\n    i=${#x}\n  \
    \  j=${#y}\n    z=$i\n    while ((i>0)); do\n        j=0\n        while ((j<i));\
    \ do\n            if [[ \"$z\" -ge \"$j\" ]]; then\n                break\n  \
    \          fi\n            z=$((${z}+${#x[z]}))\n            j=$((${j}+${#y[j]}))\n\
    \        done\n        i=$((${i}-${j}))\n    done\n    echo -n \"[$(echo $z |\
    \ bc)]\"", "    local list1\n    local list2\n    local result\n    local len1\n\
    \    local len2\n    local i\n\n    list1=\"$1\"\n    list2=\"$2\"\n    len1=$(echo\
    \ ${list1} | wc -w)\n    len2=$(echo ${list2} | wc -w)\n\n    if [ ${len1} -eq\
    \ ${len2} ]; then\n        for i in $(seq 0 ${#list1})\n        do\n         \
    \   if [[ $(echo ${list1} | tr -d \" \" | grep $i) == \"\" ]]; then\n        \
    \        result=\"${list1}\"\n                break\n            fi\n        done\n\
    \    else\n        result=\n    fi\n\n    return $result", "    local i j\n  \
    \  local lst_1 lst_2\n    # get the length\n    lst_1=(\"$@\" | awk '{print length($0)}')\n\
    \    lst_2=(\"$2\" | awk '{print length($0)}')\n    \n    # compare the length\n\
    \    if [ \"$lst_1\" = \"$lst_2\" ]; then\n        echo \"$1\"\n    else\n   \
    \     for i in $(seq 0 $lst_1)\n        do\n            # if the current char\
    \ is in the second list but is not in the first\n            if [[ $lst_2[$i]\
    \ == \"$lst_1\" && \"$lst_1\" != \"$lst_2\" ]]; then\n                # return\
    \ the first list\n                echo \"$1\"\n                break\n       \
    \     fi\n        done\n    fi", "  local str1_arr=(${1//[[:space:]]/});\n  local\
    \ str2_arr=(${2//[[:space:]]/});\n  local result=()\n  local len1=\"${#str1_arr[@]}\"\
    \n  local len2=\"${#str2_arr[@]}\"\n  local i\n\n  for i in $(seq 0 $((len1 -\
    \ 1))); do\n    local j\n    for j in $(seq 0 $((len2 - 1))); do\n      if [[\
    \ $str1_arr[$i] <= $str2_arr[$j] ]]; then\n        result+=(\"$str1_arr[$i]\"\
    )\n      else\n        result+=(\"$str2_arr[$j]\")\n      fi\n    done\n  done\n\
    \n  echo \"${result[@]}\"", "\tlocal a=(${1// / })\n\tlocal b=(${2// / })\n\t\
    local c\n\tlocal d\n\tlocal i\n\tlocal n=0\n\tlocal match\n\tlocal tmp\n\tlocal\
    \ tmp2\n\ta=${a[@]}\n\tb=${b[@]}\n\tfor ((i=0; i<${#a[@]}; i++));\n\tdo\n\t\t\
    c=${a[$i]}\n\t\tmatch=0\n\t\td=0\n\t\tn=0\n\t\tfor ((j=0; j<${#b[@]}; j++)); do\n\
    \t\t\ttmp=${b[$j]}\n\t\t\tif [[ ${#c} -gt ${#tmp} ]]; then\n\t\t\t\tmatch=1\n\t\
    \t\t\tbreak\n\t\t\telif [[ ${#c} == ${#tmp} ]]; then\n\t\t\t\tn=$(( n+1 ))\n\t\
    \t\tfi\n\t\tdone\n\t\tif [[ ${match} -eq 0 ]]; then\n\t\t\td=$(( d+1 ))\n\t\t\
    else\n\t\t\ttmp2=$(echo \"${b[$((j-1))]}\" | sed 's/^ *//g')\n\t\t\ta=(${a//$c/$tmp2})\n\
    \t\t\tb=(${b//$c/$tmp2})\n\t\tfi\n\tdone\n\techo \"${a[@]}\"", "   local list_1=\"\
    ${1}\"\n   local list_2=\"${2}\"\n\n   if [[ \"$list_1\" == *\" \"* ]]; then\n\
    \      list_1=\"${list_1//[[:space:]]/}\"\n      list_1=\"${list_1//\\\"/}\"\n\
    \   fi\n\n   if [[ \"$list_2\" == *\" \"* ]]; then\n      list_2=\"${list_2//[[:space:]]/}\"\
    \n      list_2=\"${list_2//\\\"/}\"\n   fi\n\n   if [[ ! \"$list_1\" || ! \"$list_2\"\
    \ ]]; then\n      return 0\n   fi\n\n   if [[ ! \"$list_1\" || ! \"$list_2\" ]];\
    \ then\n      return 0\n   fi\n\n   list_1=\"${list_1//[[:space:]]/}\"\n   list_1=\"\
    ${list_1//\\\"/}\"\n   list_2=\"${list_2//[[:space:]]/}\"\n   list_2=\"${list_2//\\\
    \"/}\"\n\n   for (( i = 0; i < ${#list_1}; i++ )); do\n      (( char_num += ${list_1[i]}\
    \ ))\n   done\n\n   for (( i = 0; i < ${#list_2}; i++ )); do\n      (( char_num\
    \ += ${list_2[i]} ))\n   done\n\n   if [[ \"$char_num\" -le \"$list_1\" ]]; then\n\
    \      return \"${list_1}\"\n   elif [[ \"$char_num\" -le \"$list_2\" ]]; then\n\
    \      return \"${list_2}\"\n   else\n      return 0\n   fi", "    local list1\
    \ list2 result\n    list1=\"${1}\"\n    list2=\"${2}\"\n    if [[ ${#list1} -lt\
    \ ${#list2} ]]; then\n        result=$(echo \"${list1}\" | cut -d ' ' -f 1-${#list1})\n\
    \    else\n        result=$(echo \"${list2}\"  | cut -d ' ' -f 1-${#list2})\n\
    \    fi\n    \n    IFS=' '\n    echo \"${result[@]}\"", "  local list_1 list_2\
    \ count\n  list_1=($1)\n  list_2=($2)\n\n  if [ -z \"${list_1[@]}\" ]; then\n\
    \    echo \"${list_2[@]}\"\n  else\n    count=$(echo \"${list_1[*]}\" | tr \"\
    \ \" \"\\n\" | sort -u | wc -l)\n    if [ \"${count}\" -eq 0 ]; then\n      echo\
    \ \"${list_2[*]}\"\n    else\n      echo \"${list_2[*]} | grep -v '\\\"'\"\n \
    \   fi\n  fi", "    local list_1 list_2\n    list_1=\"${1}\"\n    list_2=\"${2}\"\
    \n    if [ \"${#list_1}\" -eq 0 -o \"${#list_2}\" -eq 0 ]\n    then\n        return\
    \ $(echo $list_1 | tr \" \" \"\\n\")\n    elif [ \"${#list_1}\" -eq 0 ]\n    then\n\
    \        local str\n        list_1=$list_2\n        str=$list_2\n    elif [ \"\
    ${#list_2}\" -eq 0 ]\n    then\n        local str\n        list_2=$list_1\n  \
    \      str=$list_1\n    elif [ \"${list_1}\" == \"${list_2}\" ]\n    then\n  \
    \      local str\n        list_1=$list_1\n        str=$list_1\n    elif [ \"${list_1}\"\
    \ > \"${list_2}\" ]\n    then\n        local str\n        list_1=$list_2\n   \
    \     str=$list_2\n    elif [ \"${list_1}\" < \"${list_2}\" ]\n    then\n    \
    \    local str\n        list_2=$list_1\n        str=$list_1\n    elif [ \"${list_1}\"\
    \ == \"${list_2}\" ] && [ \"${list_1}\" > \"${list_2}\" ]\n    then\n        local\
    \ str\n        list_1=$list_1\n        str=$list_1\n    elif [ \"${list_1}\" >\
    \ \"${list_2}\" ] && [ \"${list_1}\" < \"${list_2}\" ]\n    then\n        local\
    \ str\n        list_2=$list_1\n        str=$list_1\n    else\n        local str\n\
    \        list_1=$list_2\n        str=$list_2\n    fi\n    local len1\n    len1=$(echo\
    \ ${list_1} | wc -c)\n    local len2\n    len2=$(echo ${list_2} | wc -c)\n   \
    \ if [ \"${#str}\" -eq 0 ]\n    then\n        echo \"$list_1\"\n    elif [ \"\
    ${len1}\" -gt \"${len2}\" ]\n    then\n        echo \"$list_1\"\n    elif [ \"\
    ${len1}\" -lt \"${len2}\" ]\n    then\n        echo \"$list_2\"\n    elif [ \"\
    ${len1}\" == \"${len2}\" ] && [ \"${list_1}\" > \"${list_2}\" ]\n    then\n  \
    \      echo \"$list_1\"\n    elif [ \"${len1}\" > \"${len2}\" ] && [ \"${list_1}\"\
    \ < \"${list_2}\" ]\n    then\n        echo \"$list_2\"\n    else\n        echo\
    \ \"$list_2\"\n    fi", "    local i j\n    # $1 is input list\n    # $2 is search\
    \ list\n    # $3 number of chars to match between list 1 and list 2\n    local\
    \ n=0\n    local match_list\n\n    for (( i=1; i<\"$#\"; i++ )); do\n        for\
    \ (( j=1; j<\"$#\" && j<\"$i\"; j++ )); do\n            if [[ \"$1\" =~ ^\"$j\"\
    $ ]]; then\n                (( n = $j - i + 1 ))\n            fi\n        done\n\
    \        if [[ n -ge $3 ]]; then\n            match_list=\"$match_list $1\"\n\
    \        fi\n    done\n    echo \"${match_list}\"", "    local list_1 list_2 char1\
    \ char2\n    list_1=$1\n    list_2=$2\n    while read -r char1 char2; do\n   \
    \     local total=0\n        while [[ $char1 ]]; do\n            total=$((total+1))\n\
    \            char1=${char1#?}\n        done\n        total=$((total+1))\n    \
    \    while [[ $char2 ]]; do\n            total=$((total+1))\n            char2=${char2#?}\n\
    \        done\n        if [[ $total -lt $((${#list_1}-1)) ]]; then\n         \
    \   list_1=\"${list_1} \\\"$char1\\\"\"\n        fi\n        if [[ $total -lt\
    \ $((${#list_2}-1)) ]]; then\n            list_2=\"${list_2} \\\"$char2\\\"\"\n\
    \        fi\n    done < <(echo -e \"$list_1\\n$list_2\" \"$list_1\" \"$list_2\"\
    )", "  a=$1\n  b=$2\n  a=$(echo $a | tr '[:upper:]' '[:lower:]' | sed -e 's/ /;/g')\n\
    \  b=$(echo $b | tr '[:upper:]' '[:lower:]' | sed -e 's/ /;/g')\n  (( ${#a} >\
    \ ${#b} )) || return $a\n  (( ${#b} > ${#a} )) || return $b\n  x=$(echo $a | sort\
    \ -u)\n  y=$(echo $b | sort -u)\n  (( ${#x} > ${#y} )) || return $a\n  (( ${#y}\
    \ > ${#x} )) || return $b\n  (( ${#x} == ${#y} )) || return $a\n  (( ${#x} < ${#y}\
    \ )) || return $b\n  (( ${#x} < ${#b} )) || return $a\n  (( ${#b} < ${#x} )) ||\
    \ return $a\n  (( ${#a} < ${#x} )) || return $b\n  (( ${#a} < ${#y} )) || return\
    \ $b\n  (( ${#y} < ${#x} )) || return $a\n  (( ${#y} < ${#b} )) || return $b\n\
    \  (( ${#x} > ${#y} )) || return $a\n  (( ${#b} > ${#x} )) || return $b\n  ((\
    \ ${#b} > ${#y} )) || return $b\n  (( ${#y} > ${#x} )) || return $a\n  (( ${#y}\
    \ > ${#b} )) || return $b\n  (( ${#x} < ${#y} )) || return $a\n  (( ${#b} < ${#x}\
    \ )) || return $b\n  (( ${#b} < ${#y} )) || return $b\n  (( ${#y} < ${#x} )) ||\
    \ return $a\n  (( ${#y} < ${#b} )) || return $b\n  (( ${#x} > ${#y} )) || return\
    \ $a\n  (( ${#b} > ${#x} )) || return $b\n  (( ${#b} > ${#y} ", "    local s1=$1\n\
    \    local s2=$2\n    local res\n    local n\n    res=()\n    for n in $( seq\
    \ 1 $(( ${#s1} + ${#s2} )) )\n    do\n        [[ $s1 $s2 =~ (^[${s1[*]} ]*)\\\
    ([${s2[*]}]*\\)(.*$) ]] &&\n        res[$n]=\"${BASH_REMATCH[1]}${BASH_REMATCH[2]}\"\
    \n    done\n    echo ${res[@]}", "    local string1 string2=${1// *}; string1=${1%\
    \ *}\n    local string3 string4=${2// *}; string2=${2% *}\n    local result=()\n\
    \    for ((i=0;i<${#string1};i++)); do\n        for ((j=0;j<${#string2};j++));\
    \ do\n            [[ ${string1:$i:1} == ${string2:$j:1} ]] && result+=(\"${string1:$i}\"\
    )\n        done\n    done\n    result=( \"${result[@]}\" )\n    for ((i=0;i<${#string3};i++));\
    \ do\n        for ((j=0;j<${#string4};j++)); do\n            [[ ${string3:$i:1}\
    \ == ${string4:$j:1} ]] && result+=(\"${string3:$i}\")\n        done\n    done\n\
    \    result=( \"${result[@]}\" )\n    if [ ${#result[@]} -eq ${#string1} ]; then\n\
    \        result=( \"${result[@]}\" )\n    fi\n    echo \"${result[@]}\"", "  \
    \  local a\n    local b\n    local c\n\n    # $a is all strings in the $1 list\n\
    \    # $b is all strings in the $2 list\n    # $c is the return list\n    a=${1//\
    \ /}\n    b=${2// /}\n    c=()\n\n    for str in $a; do\n        if [[ \"$str\"\
    \ < \"$b\" ]]; then\n            c+=(\"$str\")\n        fi\n    done\n    echo\
    \ \"${c[@]}\"", "    local list1 list2\n    local list1_len $list1_len\n    local\
    \ list2_len $list2_len\n    local list1_tmp\n    local list2_tmp\n    local result\n\
    \    local i\n    local j\n\n    list1=(${$1//$2/ })\n    list2=(${$2//$1/})\n\
    \n    if [[ ${#list1} -eq 0 ]] || [[ ${#list2} -eq 0 ]]; then\n        return\
    \ \"\"\n    fi\n\n    list1_len=\"${#list1[*]}\"\n    list2_len=\"${#list2[*]}\"\
    \n    result=()\n    list1_tmp=\"\"\n    list2_tmp=\"\"\n\n    for ((i = 0; i\
    \ < ${list1_len}; i++)); do\n        list1_tmp=\"${list1_tmp}${list1[i]} \"\n\
    \        list2_tmp=\"${list2_tmp}${list2[i]} \"\n    done\n\n    if [[ ${list1_len}\
    \ -eq ${list2_len} ]]; then\n        result=$(echo \"${list1_tmp% *} | ${list2_tmp%\
    \ *} | ${list1_tmp#* } ${list2_tmp#* }\")\n    else\n        for ((j = 0; (j <\
    \ ${list1_len}); j++)); do\n            if [[ ${list1[j]} -lt ${list2[j]} ]];\
    \ then\n                result+=(${list1[j]}\" \"${list2[j]})\"\n            else\n\
    \                result+=(${list1[j]})\"\n            fi\n        done\n     \
    \   for ((j = 0; (j < ${list2_len}); j++)); do\n            if [[ ${list2[j]}\
    \ -lt ${list1[j]} ]]; then\n                result+=(${list2[j]}\" \"${list1[j]})\"\
    \n            else\n                result+=(${list2[j]})\"\n            fi\n\
    \        done\n    fi\n\n    echo $result", "  local list1 list2\n  list1=$1\n\
    \  list2=$2\n  local total1 total2 total3 total4 total5\n  total1=$(echo $list1\
    \ | awk -F\" \" '{print $1}')\n  total2=$(echo $list2 | awk -F\" \" '{print $1}')\n\
    \  total3=$(echo $list1 | awk -F\" \" '{print $2}')\n  total4=$(echo $list2 |\
    \ awk -F\" \" '{print $2}')\n  total5=$(echo $list1 | awk -F\" \" '{print $3}')\n\
    \  if [[ $total1 -gt $total2 ]] && [[ $total2 -gt $total3 ]]; then\n    echo ${list1}\n\
    \  elif [[ $total1 -gt $total2 ]]; then\n    echo ${list1}\n  elif [[ $total2\
    \ -gt $total3 ]]; then\n    echo ${list2}\n  elif [[ $total1 -gt $total3 ]]; then\n\
    \    echo ${list2}\n  elif [[ $total2 -gt $total3 ]]; then\n    echo ${list1}\n\
    \  elif [[ $total1 -gt $total4 ]]; then\n    echo ${list1}\n  elif [[ $total2\
    \ -gt $total4 ]]; then\n    echo ${list2}\n  elif [[ $total3 -gt $total4 ]]; then\n\
    \    echo ${list1}\n  elif [[ $total4 -gt $total5 ]]; then\n    echo ${list2}\n\
    \  elif [[ $total5 -gt $total1 ]]; then\n    echo ${list2}\n  elif [[ $total5\
    \ -gt $total2 ]]; then\n    echo ${list1}\n  else\n    echo ${list1}\n  fi", " \
    \   local list_1 list_2\n    list_1=(\"${!1}\")\n    list_2=(\"${!2}\")\n\n  \
    \  local len1=\"${#list_1[@]}\"\n    local len2=\"${#list_2[@]}\"\n\n    if [\
    \ \"${len1}\" -ne \"${len2}\" ] ; then\n        return\n    fi\n    local len3=0\n\
    \    for (( i = 0; i < ${#list_1[@]}; i++ )); do\n        for (( j=0; j < ${#list_2[@]};\
    \ j++ )); do\n            [[ ${list_2[j]} < ${list_1[i]} ]] && len3=$(( len3 +\
    \ 1 ))\n        done\n    done\n    local len_sorted\n    len_sorted=($(sort -n\
    \ -k1,1 <<<\"${len3}\"))\n    local len_sorted_1=\"${len_sorted[@]}\"\n    local\
    \ len_sorted_2=\"${len_sorted[@]}\"\n\n    if [ \"${len1}\" -eq \"${len3}\" ];\
    \ then\n        return\n    fi\n    if [ \"${len1}\" -eq \"${len2}\" ]; then\n\
    \        local len_sorted_3\n        len_sorted_3=($(sort -n -k1,1 <<<\"${len2}\"\
    ))\n        local len_sorted_3_1=\"${len_sorted_3[@]}\"\n        local len_sorted_3_2=\"\
    ${len_sorted_3[@]}\"\n    fi\n    if [ \"${len_sorted_3[@]}\" -eq \"${len_sorted_3[@]}\"\
    \ ]; then\n        return\n    fi\n    \n    list_1=($(echo -e \"${list_1}\" |\
    \ sed 's/ /\\n/g'))\n    list_2=($(echo -e \"${list_2}\" | sed 's/ /\\n/g'))\n\
    \    list_3=($(echo -e \"${list_1}\" \"${list_2}\"))\n\n    echo \"${list_3[@]}\"",
  "    local string1 string2\n    string1=$1\n    string2=$2\n    local len1=${#string1}\n\
    \    local len2=${#string2}\n    local n=0\n    local found\n    if [ -z $string1\
    \ ]; then\n       string1=' '\n    fi\n    if [ -z $string2 ]; then\n        string2='\
    \ '\n    fi\n    for string in $string1; do\n        found=0\n        for string\
    \ in $string2; do\n            echo \"$string $string\"\n            if [ \"$string\"\
    \ -gt \"$string\" ]; then\n                found=1\n                break\n  \
    \          fi\n        done\n        if [ $found == 0 ]; then\n            n=$n+1\n\
    \        fi\n    done\n    echo \"$n\"", "    local list1 list2 \n    list1=$1;\
    \ list2=$2\n    if [[ ${#list1} -eq 0 ]] ; then\n        echo \"$list1 has no\
    \ non-matching chars\"\n    else\n        for ((i=${#list1} - 1 ; i >= 0 ; i--))\n\
    \        do\n            if [[ ${list1[i]} -eq \"${list2[i]}\" ]] ; then\n   \
    \             list1=$list1[:i]\n                break\n            fi\n      \
    \  done\n        echo \"$list1\"\n    fi", "    local string1 string2 total\n\
    \    for string1 in \"$@\"; do\n        for string2 in \"$@\"; do\n          \
    \  total=$(( $(echo \"$string1\" | wc -c) < $(echo \"$string2\" | wc -c) ))\n\
    \        done\n    done\n    echo $string1", "  if (( ${#1} < ${#2} ))\n  then\n\
    \    echo ${1}\n  else\n    echo ${2}\n  fi", "  local x1 x2\n  x1=$(echo $1 |\
    \ tr \" \" \"\\n\" | sort -u)\n  x2=$(echo $2 | tr \" \" \"\\n\" | sort -u)\n\
    \  while read -r line; do\n    [[ -z $line ]] && continue\n    local x2x1 x1x2\
    \ x2x2\n    x2x1=$(echo $x1 | grep -w $line | wc -l)\n    [[ -z $x2x1 ]] && continue\n\
    \    x2x2=$(echo $x2 | grep -w $line | wc -l)\n    [[ -z $x2x2 ]] && continue\n\
    \    echo $line\n    echo\n    if [[ \"$x2x2\" -lt \"$x2x1\" ]]; then\n      printf\
    \ '\"%s\"\\n' \"$line\"\n      x1x1=$x1x1\n      x1x2=$x1x2\n    else\n      printf\
    \ '\"%s\"\\n' \"$line\"\n      x2x1=$x2x1\n      x2x2=$x2x2\n    fi\n  done <<<\
    \ \"$x1x2\"\n  printf '\"%s\"\\n' \"$x1x1\"", "    local i total_chars list1 list2\n\
    \    total_chars=$(grep -c \"^$1$\" \"$2\" | wc -c)\n    list1=($(grep -n \"^$1$\"\
    \ \"$2\"))\n    list2=($(grep -n \"^$2$\" \"$1\"))\n    for (( i=0; i<${#list1[@]};\
    \ i++ ));\n    do\n        if [[ \"${list1[$i]}\" -le \"$total_chars\" ]]; then\n\
    \            if [[ \"${list2[$i]}\" -ge \"$total_chars\" ]]; then\n          \
    \      echo $list1[$i]\n            else\n                echo $list2[$i]\n  \
    \          fi\n        else\n            echo $list1[$i]\n        fi\n    done",
  "  local list1=\"$1\"\n  local list2=\"$2\"\n  # set +x to return error when count\
    \ is zero\n  set +x\n  local count1=$(echo \"${list1}\" | wc -w)\n  local count2=$(echo\
    \ \"${list2}\" | wc -w)\n  # set -x to return error when count is zero\n  set\
    \ -x\n  local count=$((count1 + count2))\n  local result=\n  if [ ${count} -eq\
    \ 0 ]; then\n    # all chars are in the first list\n    result=()\n  elif [ ${count}\
    \ -eq 1 ]; then\n    # one char is in the first and second list\n    echo -n \"\
    ${list1} \"\n    result=()\n  elif [ ${count} -gt 1 ]; then\n    # two or more\
    \ chars are in both lists\n    echo -n \"${list1} \"\n    echo -n \"-\"\n    echo\
    \ -n \"${list2} \"\n    result=$(echo \"${list1}\" | sort -u | xargs)\n    echo\
    \ -n \" \"\n  fi\n  echo ${result[@]}", "    local -a arr1 arr2\n    IFS=$'\\\
    n' arr1=($1) arr2=($2)\n    local i str1 str2\n    arr1=(\"${arr1[@]}\" \"\")\
    \ #remove empty strings\n    arr2=(\"${arr2[@]}\" \"\")\n    local len1 len2\n\
    \    len1=${#arr1[@]}\n    len2=${#arr2[@]}\n    local maxlen=$((len1 > len2 ?\
    \ len1 : len2))\n    str1=\"${arr1[@]}\"\n    str2=\"${arr2[@]}\"\n    local c\n\
    \    local total=0\n    for ((i=0; i<maxlen; i++)); do\n        c=\"${str1:$i:1}\"\
    \n        total=$((total+1))\n        str1=\"${str1:1:$((i+1))}\"\n        str2=\"\
    ${str2:1:$((i+1))}\"\n    done\n    arr1+=(\"$str1\") #append the result\n   \
    \ arr2+=(\"$str2\")\n    if ((len1>len2)); then\n        arr1=(\"${arr1[@]}\"\
    )\n    fi\n    arr1=(\"${arr1[@]}\" \"\")\n    arr2=(\"${arr2[@]}\" \"\")\n  \
    \  local maxlen\n    maxlen=$((len1 > len2 ? len1 : len2))\n    arr1=(\"${arr1[@]}\"\
    \ \"\") #remove empty strings\n    arr2=(\"${arr2[@]}\" \"\")\n    local i str1\
    \ str2\n    arr1=(\"${arr1[@]}\" \"\") #remove empty strings\n    arr2=(\"${arr2[@]}\"\
    \ \"\")\n    local len1 len2\n    len1=${#arr1[@]}\n    len2=${#arr2[@]}\n   \
    \ local maxlen=$((len1 > len2 ? len1 : len2))\n    str1=\"${arr1[@]}\"\n    str2=\"\
    ${arr2[@]}\"\n    local c\n    local total=0\n    for ((i=0; i<maxlen; i++));\
    \ do\n        c=\"${str1:$i:1}\"\n        total=$((total+1))\n        str1=\"\
    ${str1:1:$((i+1))}\"\n        str2=\"${str2:1:$((i+1))}\"\n    done\n    arr1+=(\"\
    $str1\") #append the result\n    arr2+=(\"$str2\")\n    if ((len1>len2)); then\n\
    \        arr1=(\"${arr1[@]}\")\n    fi\n    arr1=(\"${arr1[@]}\" ", "  local num_match\
    \ found\n  num_match=`echo $1 | tr \" \" \"\\n\" | sort | uniq -c`\n  found=`echo\
    \ $2 | tr \" \" \"\\n\" | sort | uniq -c`\n  found=$((num_match-found))\n  echo\
    \ $found", "    first=$1; shift\n    second=$1; shift\n    [[ \"${#first}\" -ne\
    \ \"${#second}\" ]] && return 0\n    local result\n    IFS=\" \"; read -r -a first\
    \ <<< \"$first\"\n    IFS=\" \"; read -r -a second <<< \"$second\"\n    result=()\n\
    \    local counter=0\n    for i in \"${first[@]}\"; do\n        ((counter++))\n\
    \        if [[ \"${second[@]}\" != \"\" ]]; then\n            [[ \"${i}\" == \"\
    $second\" ]]\n        fi\n    done < <(sort -u <<<\"${first[@]}\" \"${second[@]}\"\
    )\n    [[ \"${#result[@]}\" -gt 0 ]] && result=\"${result[@]}\"\n    [[ -n \"\
    ${result}\" ]] && echo \"$result\"", "  declare -a matchlist=(\"$1\"; \"$2\")\
    \ \n  len1=\"${#matchlist[@]}\"\n  len2=\"${#matchlist[@]}\"\n  ((len1>len2))\
    \ && return \"${matchlist[@]}\"\n  len2=\"${#matchlist[@]}\"\n  ((len2==len1))\
    \ && return \"${matchlist[@]}\"\n  len1=\"${#matchlist[@]}\"\n  ((len1>len2))\
    \ && return \"${matchlist[@]}\"\n  len2=\"${#matchlist[@]}\"\n  ((len2==len1))\
    \ && return \"${matchlist[@]}\"\n  len1=\"${#matchlist[@]}\"\n  ((len1>len2))\
    \ && return \"${matchlist[@]}\"\n  len2=\"${#matchlist[@]}\"\n  ((len2==len1))\
    \ && return \"${matchlist[@]}\"\n  len1=\"${#matchlist[@]}\"\n  ((len1>len2))\
    \ && return \"${matchlist[@]}\"\n  len2=\"${#matchlist[@]}\"\n  ((len2==len1))\
    \ && return \"${matchlist[@]}\"\n  len1=\"${#matchlist[@]}\"\n  ((len1>len2))\
    \ && return \"${matchlist[@]}\"\n  len2=\"${#matchlist[@]}\"\n  ((len2==len1))\
    \ && return \"${matchlist[@]}\"\n  len1=\"${#matchlist[@]}\"\n  ((len1>len2))\
    \ && return \"${matchlist[@]}\"\n  len2=\"${#matchlist[@]}\"\n  ((len2==len1))\
    \ && return \"${matchlist[@]}\"\n  len1=\"${#matchlist[@]}\"\n  ((len1>len2))\
    \ && return \"${matchlist[@]}\"\n  len2=\"${#matchlist[@]}\"\n  ((len2==len1))\
    \ && return \"${matchlist[@]}\"\n  len1=\"${#matchlist[@]}\"\n  ((len1>len2))\
    \ && return \"${matchlist[@]}\"\n  len2=\"${#matchlist[@]}\"\n  ((len2==len1))\
    \ && return \"${matchlist[@]}\"\n  len1=\"${#matchlist[@]}\"\n  ((len1>len2))\
    \ && return \"${matchlist[@]}\"\n  len2=\"${#matchlist[@]}\"\n  ((len2==len1))\
    \ && return \"${matchlist[@]}\"\n  len1=\"${#matchlist[@]", "    local firstlist=\"\
    $1\"\n    local secondlist=\"$2\"\n    local chars=0\n    for element in $firstlist;\
    \ do\n        ((chars+=${#element}))\n    done\n    \n    for element in $secondlist;\
    \ do\n        ((chars+=${#element}))\n    done\n\n    local count=0\n    for element\
    \ in $firstlist; do\n        if [ \"$element\" == \"$secondlist\" ]; then\n  \
    \          ((count+=1))\n        fi\n    done\n\n    # sort will ensure that only\
    \ strings are returned\n    IFS=' '\n    echo \"${firstlist[*]}\"", "    local\
    \ a b len1 len2\n    len1=$((${#1} + 1))\n    len2=$((${#2} + 1))\n    a=($(echo\
    \ $1 | awk -F\" \" '{print $1}'))\n    b=($(echo $2 | awk -F\" \" '{print $1}'))\n\
    \    if [[ \"$len1\" -eq \"$len2\" ]]; then\n        for ((i=0; i<${#a[@]}; i++));\
    \ do\n            a[$i]=${a[$i]%?}\n            b[$i]=${b[$i]%?}\n        done\n\
    \        printf '%s\\n' \"${a[@]}\"\n    else\n        for ((i=0; i<${#a[@]};\
    \ i++)); do\n            a[$i]=${a[$i]%?}\n            b[$i]=${b[$i]%?}\n    \
    \    done\n        a=($(echo $a | sort -u | awk -F\" \" 'BEGIN{OFS=\" \"}{if ($1!=$2)\
    \ {print $1,$2} else {print $1,$1}}'))\n        b=($(echo $b | sort -u | awk -F\"\
    \ \" 'BEGIN{OFS=\" \"}{if ($1!=$2) {print $1,$2} else {print $1,$1}}'))\n    \
    \    printf '%s\\n' \"${a[@]}\"\n    fi", "\tlocal x=($1 $2)\n\tlocal total=0\n\
    \tlocal max=0\n\tfor (( i = 0; i < ${#x[*]} && i < ${#y[*]} ); i++ )\n\tdo\n\t\
    \t(( total += ${#x[i]} ))\n\tdone\n\t(( max = total ))\n\tfor (( i = 0; i < ${#x[*]}\
    \ && i < ${#y[*]}; i++ ))\n\tdo\n\t\tif [[ ${#x[i]} -gt ${#y[i]} ]]\n\t\tthen\n\
    \t\t\t(( max = total ))\n\t\tfi\n\tdone\n\techo ${x[*]}", "    local list_1 list_2\
    \ i\n    list_1=$(echo $1 |sed -e 's/ /\\n/g')\n    list_2=$(echo $2 |sed -e 's/\
    \ /\\n/g')\n    echo $(echo $list_1 |sed -e 's/^/\"/' -e 's/$/\"/' -e 's/\\n/\"\
    /')\n    echo $(echo $list_2 |sed -e 's/^/\"/' -e 's/$/\"/' -e 's/\\n/\"/')\n\
    \    if [[ $list_1 =~ $list_2 ]]; then\n        echo \"$list_1\"\n    else\n \
    \       echo $list_1\n    fi", "\tlocal l1 l2\n\tl1=\"$(printf \"%s\" \"$1\")\"\
    \n\tl2=\"$(printf \"%s\" \"$2\")\"\n\tl1_size=$(echo \"${#l1}\" | awk '{print\
    \ NF}')\n\tl2_size=$(echo \"${#l2}\" | awk '{print NF}')\n\tlist1=$(echo \"${#l1}\"\
    \ | awk '{print $0}')\n\tlist2=$(echo \"${#l2}\" | awk '{print $0}')\n\tif [ \"\
    $l1_size\" -eq \"$l2_size\" ];then\n\t\treturn \"$l1\"\n\telse\n\t\tfor i in $(seq\
    \ 1 $l1_size);\n\t\tdo\n\t\t\tif [ \"$list1\" < \"$l2_size\" ];then\n\t\t\t\t\
    list1=$(echo \"${l1}\" | cut -d\" \" -f$i)\n\t\t\tfi\n\t\tdone\n\t\treturn \"\
    $list1\"\n\tfi", "    local -i count_left_match=\"$1\"\n    local -i count_right_match=\"\
    $2\"\n    local -i count_match=\"$((${count_left_match} + ${count_right_match}))\"\
    \n    local -i count_left_count=\"$1\"\n    local -i count_right_count=\"$2\"\n\
    \    local -i count_count=\"$((${count_left_count} + ${count_right_count}))\"\n\
    \    local -i count_left_count2=\"$1\"\n    local -i count_right_count2=\"$2\"\
    \n    local -i count_count2=\"$((${count_left_count2} + ${count_right_count2}))\"\
    \n    local -i count_left_count3=\"$1\"\n    local -i count_right_count3=\"$2\"\
    \n    local -i count_count3=\"$((${count_left_count3} + ${count_right_count3}))\"\
    \n    local -i count_left_count4=\"$1\"\n    local -i count_right_count4=\"$2\"\
    \n    local -i count_count4=\"$((${count_left_count4} + ${count_right_count4}))\"\
    \n    local -i count_left_count5=\"$1\"\n    local -i count_right_count5=\"$2\"\
    \n    local -i count_count5=\"$((${count_left_count5} + ${count_right_count5}))\"\
    \n    local -i count_left_count6=\"$1\"\n    local -i count_right_count6=\"$2\"\
    \n    local -i count_count6=\"$((${count_left_count6} + ${count_right_count6}))\"\
    \n    local -i count_left_count7=\"$1\"\n    local -i count_right_count7=\"$2\"\
    \n    local -i count_count7=\"$((${count_left_count7} + ${count_right_count7}))\"\
    \n    local -i count_left_count8=\"$1\"\n    local -i count_right_count8=\"$2\"\
    \n    local -i count_count8=\"$((${count_left_count8} + ${count_right_count8}))\"\
    \n    local -i count_left_count9=\"$1\"\n    local -i count_right_count9=\"$2\"\
    \n    local -i count_count9=\"$((${count_left_count9} + ${count_right_count9}))\"\
    \n    local -i count_left_count10=\"$1\"\n    local -i count_right_count10=\"\
    $2\"\n    local -i count_count10=\"$((${count_left_count10} + ${count_right_count10}))\"\
    \n    local -i count_left_count11=\"$1\"\n    local -i count_right_count11=\"\
    $2\"\n    local -i count_count11=\"$((${count_left_count11} + ${count_right_count11}))\"\
    \n    local -i count_left_count12", "\tlocal l1 l2\n\tl1=$1\n\tl2=$2\n\tl1size=$((${#l1}-1))\n\
    \tl2size=$((${#l2}-1))\n\tif [ \"${l1size}\" -eq \"${l2size}\" ]; then\n\t\techo\
    \ \"${l1}\"\n\telse\n\t\techo \"${l1}\"\n\t\techo \"${l2}\"\n\tfi", "    awk '{\n\
    \        chars += length($1)\n        chars += length($2)\n    }\n    END {\n\
    \        printf \"%s\", chars < length($2) ? $1 : $2\n    }' \"$@\" |\n    sort\
    \ |\n    uniq", "  local list_1 list_2 result\n  list_1=( \"$1\" )\n  list_2=(\
    \ \"$2\" )\n  result=( $(echo \"${list_1[*]}\" | tr \" \" \"\\n\" | sort | uniq\
    \ | grep -o \"[^ ]*$\" | tr -d \"\\n\" ) )\n  (( \"${#result[@]}\" > \"${#list_1[@]}\"\
    \ )) && result=( \"${list_1[@]}\" )\n  return \"${result[@]}\"", "    local var1\
    \ var2 \n    var1=$1 var2=$2\n    local num1=$(echo \"$var1\" | wc -c)\n    local\
    \ num2=$(echo \"$var2\" | wc -c)\n    if [ $num1 -lt $num2 ]; then\n        echo\
    \ \"$var1\"\n    else\n        echo \"$var2\"\n    fi", "    if [[ \"$#\" -lt\
    \ 2 ]]; then\n        echo \"Usage: $(basename $0) <list1> <list2>\"\n       \
    \ return 1\n    fi\n    \n    count1=0\n    count2=0\n    for i in $1 $2; do\n\
    \        if [ \"$i\" == \"\" ]; then\n            echo \"Usage: $(basename $0)\
    \ <list1> <list2>\"\n            return 1\n        fi\n        count1=$(echo $i\
    \ | wc -w)\n        count2=$(echo $i | wc -w)\n    done\n    \n    if [ \"$count1\"\
    \ -eq \"$count2\" ]; then\n        echo \"$1\"\n    else\n        echo \"$1\"\
    \ | sed -e 's/ //g' | awk '{printf \"\\\"%s\\\"\\n\", $0}'\n    fi", "  if [[\
    \ \"$1\" =~ \"[[:space:]]\" ]]\n  then\n      echo \"$1\"\n  else\n      echo\
    \ \"$1\" | tr -d \" \" >> /tmp/list.$$\n  fi\n\n  echo \"$2\" | tr -d \" \" >>\
    \ /tmp/list.$$\n\n  # get the lengths of each string\n  length1=$(echo \"$1\"\
    \ | wc -c)\n  length2=$(echo \"$2\" | wc -c)\n\n  # get the list of all strings\
    \ with length < the other list\n  output=$(cat /tmp/list.$$ | awk '{print $2}'\
    \ | tr -d \"\\\"\")\n  rm -f /tmp/list.$$\n\n  # loop through the strings in the\
    \ first list and get the results from the second list\n  for i in $(seq 0 \"$length1-1\"\
    )\n  do\n      result=$(echo \"$output\" | grep -o \"$i\" 2>/dev/null || echo\
    \ \"$output\")\n      echo \"$result\" | wc -c\n  done", "  local list1=$1\n \
    \ local list2=$2\n  local len1=${#list1}\n  local len2=${#list2}\n  local len=0\n\
    \  local num=0\n  for (( i=0; i<len1; i++ )); do\n    len=${#list1[$i]}\n    if\
    \ [ $len -gt $len ] ; then\n      len=$len\n    fi\n  done\n  for (( i=0; i<len2;\
    \ i++ )); do\n    len=${#list2[$i]}\n    if [ $len -gt $len ] ; then\n      len=$len\n\
    \    fi\n  done\n  num=`echo $((len-len1)+len2-len2))`\n  echo $list1", "  local\
    \ l_one l_two total num_chars str\n\n  l_one=( $1 )\n  l_two=( $2 )\n  num_chars=${#l_one[@]}\n\
    \  total=0\n  for str in \"${l_one[@]}\"; do\n    num_chars=$((num_chars-${#str}))\n\
    \  done\n  for str in \"${l_two[@]}\"; do\n    num_chars=$((num_chars-${#str}))\n\
    \  done\n  if ((num_chars == 0)); then\n    return ${l_one[@]}\n  else\n    for\
    \ str in \"${l_one[@]}\"; do\n      if ((num_chars > 0)); then\n        total=$((total+num_chars))\n\
    \      fi\n    done\n    for str in \"${l_two[@]}\"; do\n      if ((num_chars\
    \ > 0)); then\n        total=$((total-num_chars))\n      fi\n    done\n    if\
    \ ((total == 0)); then\n      return ${l_one[@]}\n    else\n      for str in \"\
    ${l_one[@]}\"; do\n        l_one=(${l_one[@]:0:$((num_chars))})\n      done\n\
    \      for str in \"${l_two[@]}\"; do\n        l_two=(${l_two[@]:0:$((num_chars))})\n\
    \      done\n      printf '%s\\n' \"${l_one[@]}\"\n      printf '%s\\n' \"${l_two[@]}\"\
    \n      return $l_one\n    fi\n  fi", "    len1=$(echo $1 | grep -o '^[[:alpha:]]+$'\
    \ | wc -l)\n    len2=$(echo $2 | grep -o '^[[:alpha:]]+$' | wc -l)\n    if [[\
    \ $len1 == $len2 ]]; then\n        echo $1\n    else\n        echo $((len1 < len2\
    \ ? $1 : $2))\n    fi", "    local l1 l2 i\n    local len1\n    local len2\n \
    \   \n    len1=$1\n    len2=$2\n\n    local result\n    local temp1\n    local\
    \ temp2\n\n    temp1=()\n    temp2=()\n\n    for i in $(seq 0 $(($len1 - 1)));\
    \ do\n        temp1=$(echo $i $temp1 | awk '{print $1}')\n    done\n\n    for\
    \ i in $(seq 0 $(($len2 - 1))); do\n        temp2=$(echo $i $temp2 | awk '{print\
    \ $1}')\n    done\n\n    for i in $(seq 0 $(($len1 + $len2 - 1))); do\n      \
    \  if [[ $(echo \"$temp1 | grep $temp2 | wc -l\" | bc -l) -eq 1 ]]; then\n   \
    \         result=$(echo \"$temp1 | grep $temp2 | awk '{print $1}'\" | sed 's/[[:space:]]*$//')\n\
    \        else\n            result=$(echo \"$temp1 | grep $temp2 | awk '{print\
    \ $1}'\" | sed 's/[[:space:]]*$//')\n        fi\n        temp1=$(echo $i $temp1\
    \ | awk '{print $1}')\n        temp2=$(echo $i $temp2 | awk '{print $1}')\n  \
    \  done\n\n    echo \"$result\"", "    local charlist1 charlist2\n    charlist1=($(echo\
    \ $1 | sed -e 's/ /\\n/g'))\n    charlist2=($(echo $2 | sed -e 's/ /\\n/g'))\n\
    \    local len1=${#charlist1[@]}\n    local len2=${#charlist2[@]}\n    local len3=$((len1+len2))\n\
    \    local num=0\n    local result\n    local i\n    for ((i=0; i<$len3; i++));\
    \ do\n        if (( ${#charlist1[i]} > ${#charlist2[i]} )); then\n           \
    \ result=( \"${charlist1[@]}\" )\n            charlist1=(${charlist1[@]/#charlist2[i]/})\n\
    \            charlist2=(${charlist2[@]/#charlist1[i]/})\n            ((num+=1))\n\
    \        fi\n    done\n    local final\n    if (( num==len1 )); then\n       \
    \ final=\"${charlist1[@]}\"\n    elif (( num==len2 )); then\n        final=\"\
    ${charlist2[@]}\"\n    else\n        final=( \"${charlist1[@]}\" )\n    fi\n \
    \   echo \"${final[@]}\"", "    local arr1=($(echo $1 |tr -s ' '))\n    local\
    \ arr2=($(echo $2 |tr -s ' '))\n    if [[ ${#arr1[@]} -eq ${#arr2[@]} ]]; then\n\
    \        echo $1 \n    else\n        local j=1\n        while [ $j -le $((${#arr1[@]}\
    \ - 1)) ]\n        do \n            local i=1\n            while [ $i -le $((${#arr2[@]}\
    \ - 1)) ]\n            do \n                if [[ ${arr1[$i]} -le ${arr2[$j]}\
    \ ]]; then\n                    arr1[$i]=\"\\\"${arr1[$i]}\\\"\"\n           \
    \     fi \n                i=$(( i + 1 ))\n            done\n            j=$((\
    \ j + 1 ))\n        done\n        arr1=($(echo ${arr1[@]} ))\n        echo $arr1\n\
    \    fi", "    local l_1 l_2\n    l_1=$(echo $1 | tr \" \" \"\\n\")\n    l_2=$(echo\
    \ $2 | tr \" \" \"\\n\")\n    if [ ${#l_1} -eq ${#l_2} ]; then\n        echo ${l_1}\n\
    \    else\n        echo $(total_match_help)\n    fi", "    list1=$1\n    list2=$2\n\
    \    \n    len_list1=`echo \"$list1\" | wc -w`\n    len_list2=`echo \"$list2\"\
    \ | wc -w`\n    \n    if [ $len_list1 -eq $len_list2 ]\n    then\n        echo\
    \ -n \"[$list1]\"\n        \n    else\n        echo $list1\n    fi\n    ", "\t\
    local a=\"$(echo \"$1\" | tr \"_\" \" \")\"\n\tlocal b=\"$(echo \"$2\" | tr \"\
    _\" \" \")\"\n\tlocal len_a=\"${#a}\"\n\tlocal len_b=\"${#b}\"\n\tlocal total_len\n\
    \tlocal total_chars\n\n\tif [[ $len_a == $len_b ]]; then\n\t\ttotal_chars=$len_a\n\
    \telif [[ $len_b == 0 ]]; then\n\t\ttotal_chars=$len_a\n\telse\n\t\techo \"${#a}\
    \ != ${#b}\"\n\t\texit 1\n\tfi\n\n\ttotal_len=$(echo \"$total_chars\" | bc)\n\n\
    \techo \"$(awk -F\" \" 'BEGIN {printf \"%.0f\", $total_len/length($1)} END {print\
    \ \"\\n\"}' <<< \"$1\")\"\n\techo \"$(awk -F\" \" 'BEGIN {printf \"%.0f\", $total_len/length($2)}\
    \ END {print \"\\n\"}' <<< \"$2\")\"", "  local list_1 list_2 total_list total_str\n\
    \  list_1=$1\n  list_2=$2\n  total_list=()\n  while [ \"${list_1}\" != \"\" ];\
    \ do\n    total_str=\"${list_1}\"\n    total_str=\"${total_str#* }\"\n    total_str=\"\
    ${total_str% *}\"\n    total_list+=($total_str)\n    list_1=${list_1#* }\n  done\n\
    \  while [ \"${list_2}\" != \"\" ]; do\n    total_str=\"${list_2}\"\n    total_str=\"\
    ${total_str#* }\"\n    total_str=\"${total_str% *}\"\n    total_list+=($total_str)\n\
    \    list_2=${list_2#* }\n  done\n  total_list=(${(s:-*:)(total_list)})\n  total_list=($(IFS=+;\
    \ echo \"${total_list[*]}\"))\n  echo \"${total_list[@]}\"", "\tsort <<< \"$1\"\
    \ | uniq -c | sort -rn | cut -f2", "\tlocal chars1=\"$1\"\n\tlocal chars2=\"$2\"\
    \n\t\n\t# if one of the strings is empty return empty list\n\tif [[ -z $chars1\
    \ || -z $chars2 ]]; then\n\t\techo \"[]\"\n\t\treturn\n\tfi\n\n\t# if both lists\
    \ have same number of chars, return first list\n\tlocal total=$(echo $chars1 $chars2\
    \ | wc -w)\n\tif [ $total == $((${#chars1}+${#chars2})) ]; then\n\t\techo \"$chars1\"\
    \n\t\treturn\n\tfi\n\n\t# return list with total number of chars\n\techo \"$chars1\
    \ $chars2\" | tr ' ' '\\n' | sort -n | uniq -c | sort -rn | head -n 1 | sed 's/^\
    \ *//'", "    local list1=$1\n    local list2=$2\n    local total_list=\"\"\n\
    \    local len_1=0\n    local len_2=0\n    local char_count=0\n    local i=1\n\
    \    local j=1\n    while [ $i -le ${#list1} ]; do\n        len_1=$(expr length\
    \ ${list1[i]})\n        len_2=$(expr length ${list2[j]})\n        if [ \"$len_1\"\
    \ -le \"$len_2\" ]; then\n            char_count=$((char_count + len_2))\n   \
    \     else\n            char_count=$((char_count + len_1))\n        fi\n     \
    \   i=$((i + 1))\n        j=$((j + 1))\n    done\n    if [ \"$len_1\" -gt \"$len_2\"\
    \ ]; then\n        total_list=\"$list1\"\n    else\n        total_list=\"$list2\"\
    \n    fi\n    echo \"$total_list\"", "    local str1=$(echo \"$1\" | tr -d ' '\
    \ | wc -l)\n    local str2=$(echo \"$2\" | tr -d ' ' | wc -l)\n    echo \"$str1\
    \ $str2\"\n    if [ $str1 -eq $str2 ]; then\n        echo \"$1\"\n    else\n \
    \       local i=$((str1-str2))\n        local j=0\n        while [ $i -ge 0 ];\
    \ do\n            local str3=$(echo \"$2\" | cut -c$i)\n            if [ \"$str3\"\
    \ = \"$2\" ]; then\n                echo \"$2\"\n                break\n     \
    \       fi\n            i=$(($i-1))\n            echo \"$1 $str3\"\n        done\n\
    \    fi", "    local list_1 list_2\n    list_1=$1\n    list_2=$2\n    echo \"\
    $list_1\" | sed 's/ /\\n/g' > /tmp/list1\n    echo \"$list_2\" | sed 's/ /\\n/g'\
    \ > /tmp/list2\n    comm -3 -13 /tmp/list1 /tmp/list2", "  local list1=\"$1\"\n\
    \  local list2=\"$2\"\n  local len1=$((${#list1} + 1))\n  local len2=$((${#list2}\
    \ + 1))\n  local i total\n  total=\"${list1}\"\n  for i in \"${list2}\" ; do\n\
    \    if [[ ${#total} -le ${#i} ]]; then\n      total=\"${total} $i\"\n    else\n\
    \      total=\"${total} ${i%?}\"\n      break\n    fi\n  done\n  echo $total",
  "    local chars_list=( $1 )\n    local chars_list_2=( $2 )\n    local total\n \
    \   local j=0\n    local i\n    total=0\n    for i in ${chars_list[@]}; do\n \
    \       [[ -z $chars_list_2[$j] ]] && break\n        [[ \"$i\" == \"$chars_list_2[$j]\"\
    \ ]] && let \"total+=1 || ((j++))\"\n    done\n    printf '%s\\n' \"${chars_list[@]:j+1}\"",
  "  # Convert strings to list using split\n  l1=${1}\n  l2=${2}\n  l1size=$(echo\
    \ $l1 | wc -w)\n  l2size=$(echo $l2 | wc -w)\n\n  # Make sure sizes are equal\n\
    \  [ $l1size -eq $l2size ] && return $l1\n\n  # Get unique values from both lists\n\
    \  l1=$(echo $l1 | tr \" \" \"\\n\" | sort -u)\n  l2=$(echo $l2 | tr \" \" \"\\\
    n\" | sort -u)\n\n  # Get total characters and subtract from lengths\n  l1count=$(echo\
    \ $l1 | wc -c)\n  l2count=$(echo $l2 | wc -c)\n  \n  # If both have same character\
    \ count, choose the first list\n  [ $l1count -eq $l2count ] && return $l1\n\n\
    \  # If both list have same total char count, choose the smaller list length\n\
    \  [ $l1count -eq $l2size ] && return $(echo $l1 | sort -u | head -n $l2count)\n\
    \n  # If one list has more chars than the other, choose the bigger list length\n\
    \  [ $l2count -eq $l1size ] && return $(echo $l2 | sort -u | head -n $l1count)\n\
    \n  # If one list has more chars than the other, choose the bigger list length\n\
    \  [ $l1count -eq $l2size ] && return $(echo $l1 | sort -u | head -n $l2count)",
  "    local i j\n    for i in ${1//+/ }; do\n        j=0\n        for j in ${2//+/\
    \ }; do\n            [ $j -lt $i ] && break\n        done\n        [[ $j -eq $i\
    \ ]] && return ${1//$i } \n    done", "   len1=$((${#1} - 1))\n   len2=$((${#2}\
    \ - 1))\n   echo $((${#1} - ${#2} ))\n   if [[ $len1 = $len2 ]];\n   then\n  \
    \    echo \"$1\"\n   else\n      echo \"$1\" > list1\n      while read x; do \n\
    \      echo \"$x\" | cut -c -\"$((${#1} - 1))\" > list2\n      paste list1 list2\
    \ | awk '{print $2}' >> list1\n      done\n      cut -d '-' -f 1 list1\n   fi",
  "    local list1=\"${1}\"\n    local list2=\"${2}\"\n    local len1\n    local len2\n\
    \    len1=$(echo \"${list1}\" | tr \" \" \"\" | wc -c)\n    len2=$(echo \"${list2}\"\
    \ | tr \" \" \"\" | wc -c)\n    if [[ \"${len1}\" == \"${len2}\" ]]; then\n  \
    \      echo \"${list1}\"\n    else\n        echo \"${list1}\" | xargs -n1 -t echo\
    \ | awk '{ print length($0); } END {print length}' >> /tmp/tmp\n        echo \"\
    ${list2}\" | xargs -n1 -t echo | awk '{ print length($0); } END {print length}'\
    \ >> /tmp/tmp\n        sort -n /tmp/tmp | uniq -c | sort -nr | head -n ${len1}\
    \ >> /tmp/tmp\n        echo \"${list2}\" | sed -E \"s/^.{${len1}}/\\1/\" >> /tmp/tmp\n\
    \        echo \"${list1}\" | sed -E \"s/^.{${len2}}/\\1/\" >> /tmp/tmp\n     \
    \   mv /tmp/tmp \"${list1}\"\n    fi", "  local first=\"$1\";\n  local second=\"\
    $2\";\n\n  local max=\"$(( ${#first} + ${#second}))\";\n  local count1=0;\n  local\
    \ count2=0;\n  local count3=0;\n  local count4=0;\n  local count5=0;\n  local\
    \ count6=0;\n\n  while [ $count1 < $max ]; do\n    count1+=1;\n    [[ ${first:$count1}\
    \ = *\" \"$* ]] && {\n      count2+=1;\n    }\n    [[ ${first:$count1} =~ (^\"\
    |\"$)(.*)$ ]] && {\n      count3+=1;\n    }\n    [[ ${second:$count2} = *\" \"\
    $* ]] && {\n      count4+=1;\n    }\n    [[ ${second:$count2} =~ (^\"|\"$)(.*)$\
    \ ]] && {\n      count5+=1;\n    }\n    [[ ${second:$count2} =~ (.*)(^\"|\"$)(.*)$\
    \ ]] && {\n      count6+=1;\n    }\n  done\n  printf \"%s\\n\" \"${first[@]:0:$max}\"\
    ;\n  printf \"\\n%s\\n\" \"${second[@]:0:$max}\";\n\n  if [ $count1 = $count2\
    \ ]; then\n    printf \"\\n%s\\n\" \"${first[@]:0:$max}\";\n  else\n    printf\
    \ \"\\n%s\\n\" \"${second[@]:0:$max}\";\n  fi;\n\n  printf \"\\n%s\\n\" \"${first[@]:0:$max}\"\
    ;\n  printf \"\\n%s\\n\" \"${second[@]:0:$max}\";", "\tIFS=$'\\n' read -r -a array1\
    \ <<< \"$1\"\n\tIFS=$'\\n' read -r -a array2 <<< \"$2\"\n\n\ttotal_length=$(echo\
    \ $((${#array1[@]}+${#array2[@]})))\n\t\n\tfor i in \"${!array1[@]}\"; do\n\t\t\
    if [ \"$total_length\" -gt \"$i\" ]; then\n\t\t\ttotal_length=$i\n\t\tfi\n\tdone\n\
    \t\n\tfor i in \"${!array2[@]}\"; do\n\t\tif [ \"$total_length\" -gt \"$i\" ];\
    \ then\n\t\t\ttotal_length=$i\n\t\tfi\n\tdone\n\n\techo -n \"[\"\n\tfor i in \"\
    ${!array1[@]}\"; do\n\t\tif [ \"$total_length\" -gt \"$i\" ]; then\n\t\t\techo\
    \ \"\\\"${array1[$i]}\\\"\"\n\t\telse\n\t\t\techo \"\\\"${array1[$i]}\\\"\"\n\t\
    \tfi\n\tdone\n\techo -n \",\"\n\tfor i in \"${!array2[@]}\"; do\n\t\tif [ \"$total_length\"\
    \ -gt \"$i\" ]; then\n\t\t\techo \"\\\"${array2[$i]}\\\"\"\n\t\telse\n\t\t\techo\
    \ \"\\\"${array2[$i]}\\\"\"\n\t\tfi\n\tdone\n\techo -n \"]\"", "  local total_size=0\
    \ total_match=0 a\n  IFS=\" \"\n  while read -r a; do\n    total_size=$((total_size\
    \ + ${#a}))\n  done < <(echo \"$2\" | sort)\n\n  echo \"$1\" \\\n    | grep -o\
    \ -E \"[[:space:]]+$\" \\\n    | sort \\\n    | uniq \\\n    | sort -u \\\n  \
    \  | while read -r a; do\n        ((total_match+=${#a}))\n    done \\\n    | cut\
    \ -d: -f2\n  echo $((${#total_match}/${#total_size}))", "    list1=($1)\n    list2=($2)\n\
    \    if [ \"${#list1[@]}\" == \"${#list2[@]}\" ]; then\n        for i in ${list1[@]};\
    \ do\n            if [ \"${list1[@]}\" == \"${list2[@]}\" ]; then\n          \
    \      return 0\n            fi\n            list1=(\"${list1[@]}\" \"$i\")\n\
    \        done\n    else\n        return 0\n    fi", "  mapfile -t array < <(printf\
    \ '%s\\n' \"${@}\" | sort -u)\n  mapfile -t otherarray < <(printf '%s\\n' \"${@}\"\
    \ | sort -u)\n  local total\n  local temp\n  local len\n  \n  total=0\n  \n  for\
    \ ((i=0; i<${#array[@]}; i++)); do\n    temp=${array[i]}\n    len=${#temp}\n \
    \   for ((j=0; j<${#otherarray[@]}; j++)); do\n      if [[ ${otherarray[j]} =~\
    \ $temp ]]; then\n        total=$((total + len))\n        break\n      fi\n  \
    \  done\n  done\n  \n  if [[ ${#total} -eq ${#array[@]} ]]; then\n    echo \"\
    ${array[0]}\"\n  else\n    local output\n    for ((i=0; i<${#array[@]}; i++))\n\
    \    do\n      temp=${array[i]}\n      len=${#temp}\n      if [[ ${total} -le\
    \ ${len} ]]; then\n        output=${temp}\n        break\n      fi\n    done\n\
    \    echo \"${output}\"\n  fi", "  local a=( $1 )\n  local b=( $2 )\n\n  local\
    \ len1=${#a[@]}\n  local len2=${#b[@]}\n\n  local len3=0\n\n  local i\n\n  for\
    \ ((i=0; i<$len1; i++)); do\n    ((len3+=${#a[i]}))\n  done\n\n  for ((i=0; i<$len2;\
    \ i++)); do\n    ((len3+=${#b[i]}))\n  done\n\n  if ((len1 == len2)); then\n \
    \   echo ${a[@]}\n  else\n    if ((len3 < len2)); then\n      echo ${a[@]}\n \
    \   elif ((len3 < len1)); then\n      echo ${b[@]}\n    else\n      echo ${a[@]}\n\
    \    fi\n  fi", "  strings=$1\n  patterns=$2\n  ((len=${#strings[*]}))\n  ((plen=${#patterns[*]}))\n\
    \  ((len=len>plen?len:plen))\n  strings=$(echo \"${strings[*]}\" | tr \" \" \"\
    \\n\")\n  patterns=$(echo \"${patterns[*]}\" | tr \" \" \"\\n\")\n  for (( i=0;\
    \ i<len; i++ )); do\n    for (( j=0; j<plen; j++ )); do\n      if [[ ${strings[i]}\
    \ == ${patterns[j]} ]]; then\n        if [[ -n ${strings[$(expr $i+1)]} ]]; then\n\
    \          strings[$(expr $i+1)]=${strings[i]}\n        fi\n        break\n  \
    \    fi\n    done\n  done\n  echo $strings", "    local list1\n    local list2\n\
    \    local result\n\n    list1=( $1 )\n    list2=( $2 )\n\n    length=${#list1[@]}\n\
    \    \n    for i in $(seq 1 $length); do\n        if [ \"${list1[$i]}\" < \"${list2[$i]}\"\
    \ ]; then\n            result=( \"${result[@]}\" \"$list1[$i]\" )\n        else\n\
    \            result=( \"${result[@]}\" \"$list2[$i]\" )\n        fi\n    done\n\
    \n    echo $result", "    local list_1 list_2\n    list_1=$1\n    list_2=$2\n\
    \    if [[ \"$list_1\" == \"\" ]]; then\n        echo \"[]\"\n        return 0\n\
    \    fi\n    if [[ \"$list_2\" == \"\" ]]; then\n        echo \"[\\\"$list_1\\\
    \"]\"\n        return 0\n    fi\n    local list_1_elements=$(echo $list_1 | tr\
    \ ' ' ',')\n    local list_2_elements=$(echo $list_2 | tr ' ' ',')\n    if [[\
    \ $(echo \"$list_1_elements,$list_2_elements\" | tr ' ' ',') != \"$list_1_elements,$list_2_elements\"\
    \ ]]; then\n        echo \"[$list_1]\"\n        return 0\n    fi\n    if [[ $(echo\
    \ \"$list_1_elements,$list_2_elements\" | tr ' ' ',') == \"$list_1_elements,$list_2_elements\"\
    \ ]]; then\n        echo \"[$list_2]\"\n        return 0\n    fi\n    list_2_elements=$(echo\
    \ $list_2 | tr ' ' ',')\n    local len_1=$((${#list_1_elements} + 1))\n    local\
    \ len_2=$((${#list_2_elements} + 1))\n    for ((i=0;i<=$len_1;i++)); do\n    \
    \    if [[ \"$list_1_elements\" == \"${list_2_elements:$i:1}\" ]]; then\n    \
    \        list_1=\"${list_1:0:$i} ${list_1:$i:$len_1}\"\n            list_2=\"\
    ${list_2:0:$i} ${list_2:$i:$len_2}\"\n            break\n        fi\n    done\n\
    \    echo $list_1", "    local list1 list2\n    list1=$1\n    list2=$2\n    echo\
    \ \"$list1 $list2\"\n    length=$(echo \"$list1 | wc -w | tr -d ' '\")\n    echo\
    \ \"$list2\"\n    length2=$(echo \"$list2 | wc -w | tr -d ' '\")\n    echo \"\
    $length2 $length\"\n    if [ \"$length\" -eq \"$length2\" ]; then\n        echo\
    \ \"$list1\"\n    else\n        echo \"$list2\"\n    fi", "\tlocal chars=$1\n\t\
    local words=$2\n\tlocal total=${#chars}\n\tlocal max=0\n\n\tfor w in $words\n\t\
    do\n\t\tlocal len=$(echo $w | wc -l)\n\t\tif [ \"$len\" -gt \"$max\" ]; then\n\
    \t\t\tmax=$len\n\t\tfi\n\tdone\n\t\n\tif [ \"$max\" -gt \"$total\" ]; then\n\t\
    \techo \"$chars\"\n\telse\n\t\techo \"$words\"\n\tfi", "    local list_1 list_2\n\
    \    list_1=$1\n    list_2=$2\n    list_1=$(echo \"${list_1}\" | sed -e 's/ /\\\
    n/g')\n    list_2=$(echo \"${list_2}\" | sed -e 's/ /\\n/g')\n    total_len=0\n\
    \    i=0\n    while read -r line; do\n        total_len=$((total_len+$(echo \"\
    ${line}\" | wc -c)))\n        i=$((i+1))\n    done < <(echo \"${list_1}\")\n \
    \   while read -r line; do\n        ((${total_len} > ${i}))\n    done < <(echo\
    \ \"${list_2}\")\n    echo \"${list_1}\"", "    local a1=$(echo $1 | tr ' ' '\\\
    n' | sort -u)\n    local a2=$(echo $2 | tr ' ' '\\n' | sort -u)\n    local a\n\
    \    a=()\n    for x in $a1; do\n        [[ \"$x\" == \"$a2\" ]] && break\n  \
    \      a+=( \"$x\" )\n    done\n    echo $a", "  local l1 l2 total\n  for (( i\
    \ = 0; i < ${#1}; i++ ))\n  do\n    for (( j=0; j < ${#2}; j++ ))\n    do\n  \
    \    # ignore empty strings\n      [[ -z \"${1:i:1}\" ]] && break\n      # ignore\
    \ strings shorter than the first string\n      [[ -z \"${2:j:1}\" ]] && break\n\
    \      # ignore strings longer than the second string\n      [[ -z \"${2:j:1}\"\
    \ ]] && break\n      # count the chars, ignore newlines, ignore whitespace\n \
    \     l1=\"${1:i:1}\"\n      l2=\"${2:j:1}\"\n      # ignore empty strings\n \
    \     [[ -z \"${l1}\" ]] && break\n      [[ -z \"${l2}\" ]] && break\n      \n\
    \      total=$(( $total + ${#l1} | ${#l2} ))\n    done\n  done\n\n  # if the list\
    \ contains no strings that are too short, then return empty list\n  [[ -z \"${total}\"\
    \ ]] && echo \"[]\" || echo \"[${l1}]\"", "    local l1=$1 l2=$2 l1count=$(($(echo\
    \ \"$l1\" | tr ' ' '\\n'| wc -w)))\n    l2count=$(($(echo \"$l2\" | tr ' ' '\\\
    n'| wc -w)))\n    if [ $l1count == $l2count ]; then\n        return $l1\n    else\n\
    \        grep -F -f <(echo \"$l1\") <(echo \"$l2\" | tr ' ' '\\n') | sed \"s/$//g\"\
    \ | sed 's/^.//'\n    fi", "  local list1 list2\n  list1=( $1 )\n  list2=( $2\
    \ )\n  local len1 len2\n  len1=${#list1[@]}\n  len2=${#list2[@]}\n  if [ $len1\
    \ -ne $len2 ]; then\n    return 0\n  fi\n  local i str\n  local total_str\n  total_str=\"\
    \"\n  i=0\n  while [ \"$i\" -lt \"$len1\" ]; do\n    str=\"${list1[$i]}\"\n  \
    \  if [ \"$str\" -lt \"$list2[$i]\" ]; then\n      total_str=\"${total_str} $list1[$i]\"\
    \n      i=\"$((i+1))\"\n    else\n      total_str=\"${total_str} $list2[$i]\"\n\
    \      i=\"$((i+1))\"\n    fi\n  done\n  echo $total_str", "  \n  local list1=($(echo\
    \ \"$1\" | tr ' ' '\\n' | sort -u ))\n  local list2=($(echo \"$2\" | tr ' ' '\\\
    n' | sort -u ))\n  local len1=$((${#list1[@]}))\n  local len2=$((${#list2[@]}))\n\
    \  \n  if (( len1 > len2 )); then\n    list1=($(echo \"$2\" | tr ' ' '\\n' | sort\
    \ -u ))\n  fi\n  \n  local ret=''\n  \n  for (( i=0; i<${#list1[@]}; i++ )); do\n\
    \    [[ \"$list1\" = \"$list2\" ]] && break\n    [[ \"$list1\"[$i] -lt \"$list2[$i\"\
    \ ]]] && ret=\"${ret} ${list1[$i]} \"\n  done\n  \n  echo \"${ret}\"", "  local\
    \ list1=$1\n  local list2=$2\n  local max\n  max=$(($(wc -l <<< $list1) + $(wc\
    \ -l <<< $list2)))\n  list1=$(echo $list1 | sed -e 's/^[^ ]*\\ *//g')\n  list2=$(echo\
    \ $list2 | sed -e 's/^[^ ]*\\ *//g')\n  list1=$(echo $list1 | sed -e 's/^ *//g')\n\
    \  list2=$(echo $list2 | sed -e 's/^ *//g')\n  for i in $(seq 0 $((max - 1));\
    \ do\n    if [[ \"$list1\" < \"$list2\" ]]; then\n      list1=\"${list1}${list2:$((i\
    \ + 1))}\"\n      list2=\"${list2:$((i + 1))}\"\n    else\n      list2=\"${list2}${list1:$((i\
    \ + 1))}\"\n      list1=\"${list1:$((i + 1))}\"\n    fi\n  done\n  echo $list1",
  "    local i\n    local imax\n    local j\n    local jmax\n    local sum\n    local\
    \ temp\n    local tmp\n    local x\n\n    imax=$(echo $1 | wc -l)\n    jmax=$(echo\
    \ $2 | wc -l)\n\n    sum=0\n    i=0\n    j=0\n    while [ $i -lt $imax ]; do\n\
    \        sum=$((sum+${#${1[i]}})); i=$((i+1))\n    done\n    while [ $j -lt $jmax\
    \ ]; do\n        sum=$((sum+${#${2[j]}})); j=$((j+1))\n    done\n\n    temp=$(echo\
    \ $1 | sed \"s/$/ $sum/\")\n    tmp=$(echo $2 | sed \"s/$/ $sum/\")\n\n    if\
    \ [ \"$sum\" -eq \"$imax\" ]; then\n        echo $temp\n    else\n        echo\
    \ $tmp\n    fi", "  # declare variables to store totals of chars in two lists\n\
    \  total1=0;\n  total2=0;\n  # loop through the elements of $1 and $2, counting\
    \ chars\n  for i in $1 $2; do\n    total1+=`echo $i | wc -m`;\n    total2+=`echo\
    \ $i | wc -c`;\n  done\n  # if $1 and $2 have same number of chars, return $1\n\
    \  if [ \"$total1\" = \"$total2\" ]; then\n    echo \"$1\"\n  else\n    # if the\
    \ two lists have same number of chars, return the first list\n    echo \"$1\"\n\
    \  fi", "  local list_1 list_2 num_char\n  list_1=$1\n  list_2=$2\n  num_char=0\n\
    \  for word in $list_1; do\n    if [[ \"$word\" < \"$list_2\" ]]; then\n     \
    \ num_char=$(expr $num_char + 1)\n    fi\n  done\n  echo $list_1\n  if [ $num_char\
    \ -eq 0 ]; then\n    echo []\n  else\n    echo $list_1\n  fi", "        IFS=$'\
    \ '\n        list_1=( \"$1\" )\n        list_2=( \"$2\" )\n        len1=${#list_1[@]}\n\
    \        len2=${#list_2[@]}\n        if [ $len1 -eq $len2 ]\n        then\n  \
    \              list_1\n        else\n                list_2\n        fi", "  #\
    \ if there is no space in the string\n  if [[ \"${#1}\" -eq 0 ]]; then\n    echo\
    \ '[]'\n    return\n  fi\n\n  # if there is no space in the string\n  if [[ \"\
    ${#2}\" -eq 0 ]]; then\n    echo '[]'\n    return\n  fi\n\n  declare -a arr1 arr2\n\
    \  arr1=( ${1} )\n  arr2=( ${2} )\n  total_arr=( $(compgen -G \"${arr1[@]}\" \"\
    ${arr2[@]}\" | wc -l) )\n\n  if [[ ${#total_arr[@]} -eq 0 ]]; then\n    echo '[]'\n\
    \  else\n    echo '['\n    for i in \"${total_arr[@]}\"; do\n      echo \"\\\"\
    ${arr1[${i}]}\\\"\"\n    done\n    echo ']'\n  fi", "\tlocal list1\n\tlocal list2\n\
    \tlocal i\n\n\tlist1=( $1 )\n\tlist2=( $2 )\n\t\n\tfor i in \"${list1[@]}\"; do\n\
    \t\tif [[ \"$i\" == \"$list2[i]\" ]]; then\n\t\t\tlist2[i]=$i\n\t\tfi\n\tdone\n\
    \t\n\techo \"${list2[@]}\"", "   l1=$(echo \"$1\" | awk '{print $1}')\n   l2=$(echo\
    \ \"$2\" | awk '{print $1}')\n   length=$(( $(echo \"$l1\" | wc -w) + $(echo \"\
    $l2\" | wc -w) ))\n   echo $l1\n   echo $l2\n   echo $length\n   l1=$( echo \"\
    $l1\" | sed 's/ //g' )\n   l2=$( echo \"$l2\" | sed 's/ //g' )\n   if [ \"$length\"\
    \ -gt \"$#\" ]; then \n      echo \"$l1\"\n   else\n      echo \"$l2\"\n   fi",
  "    local num_left num_right char_index num_chars str1 str2\n    local -i i j k\
    \ count\n    str1=$1\n    str2=$2\n    num_left=${#str1}\n    num_right=${#str2}\n\
    \    num_chars=$(echo $num_left $num_right | awk '{print $1+$2}')\n    for ((i=0;\
    \ i<num_left; i++))\n    do\n        char_index=$(echo $str1 | awk '{print $i}')\n\
    \        char_index=$((char_index+i))\n        if [[ $num_chars -ge $char_index\
    \ ]]\n        then\n            str1=\"${str1:0:i}${str1:i+1}\"\n        else\n\
    \            str1=\"${str1:0:i}${str1:i+1}\"\n            break\n        fi\n\
    \    done\n    for ((j=0; j<num_right; j++))\n    do\n        char_index=$(echo\
    \ $str2 | awk '{print $j}')\n        char_index=$((char_index+j))\n        if\
    \ [[ $num_chars -ge $char_index ]]\n        then\n            str2=\"${str2:0:j}${str2:j+1}\"\
    \n        else\n            str2=\"${str2:0:j}${str2:j+1}\"\n            break\n\
    \        fi\n    done\n    count=$(echo $str1 $str2 | wc -c)\n    echo $count",
  "    local list_1 list_2\n    list_1=($1)\n    list_2=($2)\n    len1=${#list_1[@]}\n\
    \    len2=${#list_2[@]}\n    if [ ${len1} -gt ${len2} ]; then\n        echo \"\
    ${list_1[@]}\"\n    else\n        echo \"${list_2[@]}\"\n    fi", "    local l\
    \ i\n    l=$1\n    shift\n    i=$1\n    shift\n    for el in $l; do\n        [[\
    \ \"$el\" -lt $i ]] && l+=(\"$el\") && i=$el\n    done\n    echo \"${l[@]}\"",
  "    local list1 list2\n    list1=($1)\n    list2=($2)\n    local len1=$(( ${#list1[@]}\
    \ - 1 ))\n    local len2=$(( ${#list2[@]} - 1 ))\n    local i\n    local output\n\
    \    for (( i = 0; i < len1; i++ )); do\n        if [[ ${list1[i]} < ${list2[i]}\
    \ ]]; then\n            list=( \"${list1[@]:0:i}\" )\n        fi\n    done\n \
    \   list=( \"${list[@]}\" )\n    for (( i = 0; i < len2; i++ )); do\n        if\
    \ [[ ${list2[i]} < ${list1[i]} ]]; then\n            list=( \"${list[@]:0:i}\"\
    \ )\n        fi\n    done\n    output=\"${list[@]}\"", "\tlocal list_1 list_2\n\
    \tlist_1=( \"$@\" )\n\tlist_2=( \"$@\" )\n\t\n\tlet len=${#list_1[@]}\n\tlet len2=${#list_2[@]}\n\
    \t\n\tfor i in $(seq 0 \"$((len-1))\"); do\n\t\tlocal elem1=${list_1[i]}\n\t\t\
    local elem2=${list_2[i]}\n\t\tif [ \"$elem1\" -gt \"$elem2\" ]; then\n\t\t\tlist_1[i]=\"\
    $elem1\"\n\t\tfi\n\tdone\n\tfor i in $(seq 0 \"$((len2-1))\"); do\n\t\tlocal elem1=${list_2[i]}\n\
    \t\tlocal elem2=${list_1[i]}\n\t\tif [ \"$elem1\" -gt \"$elem2\" ]; then\n\t\t\
    \tlist_2[i]=\"$elem1\"\n\t\tfi\n\tdone\n\t\n\tlist_1=( ${list_1[*]} )\n\tlist_2=(\
    \ ${list_2[*]} )\n\t\n\tfor i in $(seq 0 \"$((len-1))\"); do\n\t\tlist_1[i]=\"\
    ${list_1[i]}\" # remove quotes\n\tdone\n\tfor i in $(seq 0 \"$((len2-1))\"); do\n\
    \t\tlist_2[i]=\"${list_2[i]}\" # remove quotes\n\tdone\n\t\n\techo \"${list_1[*]}\"",
  "\tlocal chars\n\tlocal len\n\tlocal i\n\tlocal m\n\tlocal max\n\tlocal output\n\
    \tlocal num\n\tlocal st1\n\tlocal st2\n\tlocal st3\n\tlocal st4\n\tlocal st5\n\
    \tlocal st6\n\n\tnum=$1\n\tst1=$2\n\tst2=$3\n\tst3=$4\n\tst4=$5\n\tst5=$6\n\n\t\
    max=$((${#st1} * ${#st2} + ${#st3} * ${#st4} + ${#st5} ))\n\n\tchars=\"\"\n\t\
    output=$(( ${#st1} + ${#st2} + ${#st3} + ${#st4} + ${#st5} ))\n\n\t(( max <= num\
    \ )) && return $st1\n\n\toutput=$output\n\n\tfor i in $(seq 1 $((max-num)) )\n\
    \tdo\n\t\tst6=$st5\n\t\tst5=$st4\n\t\tst4=$st3\n\t\tst3=$st2\n\t\tst2=$st1\n\t\
    \tst1=$st6\n\t\n\t\t(( num <= 1 )) && return $st1\n\n\t\tchars=$chars$st$i\n\t\
    done\n\n\t(( output < max )) && return $st1\n\n\tchars=$chars$st$i\n\n\treturn\
    \ $chars", "\ta=$1\n\tb=$2\n\tlen=${#a}\n\tl=${#b}\n\tlist=[]\n\tfor i in $(seq\
    \ 0 $((l-1))); do\n\t\tif [ \"$b\" == \"$a\" ]; then \n\t\t\tlist+=( \"$a\" )\n\
    \t\t\tbreak\n\t\tfi\n\t\tif [ \"$b\" > \"$a\" ]; then \n\t\t\tlist+=( \"$a\" )\n\
    \t\t\tbreak\n\t\tfi\n\t\tif [ \"$a\" > \"$b\" ]; then \n\t\t\tlist+=( \"$b\" )\n\
    \t\t\tbreak\n\t\tfi\n\tdone\n\tlen=$((len + l - 1))\n\tlist+=( \"$b\")\n\tlist+=(\
    \ ( $len < $l )) \n\tlist+=( ( $len == $l )) \n\tlist+=( ( $len > $l ))\n\techo\
    \ $list", "  local first_list second_list\n  first_list=($1)\n  second_list=($2)\n\
    \  # print both lists\n  echo \"$((${#first_list[@]} + ${#second_list[@]}))\"\n\
    \  echo \"$((${#first_list[@]}))\"\n  # return only the items less the the other\
    \ list\n  echo \"${first_list[@]:((${#first_list[@]} - ${#second_list[@]}))}\"",
  '  echo "$(( $(echo "$1" | tr " " "\n" | sort | uniq | grep -c "$2") ))" ', "  \
    \  local list1\n    local list2\n    local total1\n    local total2\n    local\
    \ matched\n    total1=0\n    total2=0\n    for list1 in \"$1\"; do\n        if\
    \ [[ ! -z \"$list2\" ]]; then\n            for list2 in \"$2\"; do\n         \
    \       if [[ ! -z \"$list1\" ]]; then\n                    if [[ $list1 =~ $list2\
    \ ]]; then\n                        total1=$(expr $total1 + 1)\n             \
    \       else\n                        total2=$(expr $total2 + 1)\n           \
    \         fi\n                fi\n            done\n        fi\n    done\n   \
    \ if [[ $total1 -eq 0 ]]; then\n        matched=( $list1 )\n    elif [[ $total1\
    \ -eq $total2 ]]; then\n        matched=( $list1 )\n    else\n        matched=()\n\
    \    fi\n    echo ${matched[@]}", "    local list_1=$1\n    local list_2=$2\n\
    \    local match_list=\"[]\"\n    while [ \"x$list_1\" != \"x\" ]\n    do\n  \
    \      for elem in $list_1; do\n            for elem2 in $list_2; do\n       \
    \         if [[ $elem != \"$elem2\" ]]; then\n                    let match_list+=\"\
    \\\"$elem\\\"\"\n                fi\n            done\n        done\n        list_1=$(echo\
    \ $list_1 | sed -e 's/ /\\n/g')\n        list_2=$(echo $list_2 | sed -e 's/ /\\\
    n/g')\n    done\n    if [ \"x$list_1\" != \"x\" ]; then\n        for elem in $list_1;\
    \ do\n            if [ -z \"$match_list\" ]; then \n                match_list+=\"\
    \\\"$elem\\\"\"\n            else\n                match_list+=\", $elem\"\n \
    \           fi\n        done\n    fi\n    if [ \"x$list_2\" != \"x\" ]; then\n\
    \        for elem in $list_2; do\n            if [ -z \"$match_list\" ]; then\
    \ \n                match_list+=\"\\\"$elem\\\"\"\n            else\n        \
    \        match_list+=\", $elem\"\n            fi\n        done\n    fi\n    echo\
    \ \"$match_list\"", "  local list_1 list_2\n  list_1=${1}\n  list_2=${2}\n  local\
    \ num1=$( echo $list_1 | awk '{print length}' ) \n  local num2=$( echo $list_2\
    \ | awk '{print length}' ) \n  if [[ \"$num1\" == \"$num2\" ]]\n  then\n    echo\
    \ $list_1\n  else\n    echo $list_1\n  fi", "    local list_1=($(echo $1 | tr\
    \ ' ' '\\n' | sort -u | tr '\\n' ' '))\n    local list_2=($(echo $2 | tr ' ' '\\\
    n' | sort -u | tr '\\n' ' '))\n\n    local len1=0\n    local len2=0\n    local\
    \ output\n    len1=$(echo \"${list_1[*]}\" | wc -c)\n    len2=$(echo \"${list_2[*]}\"\
    \ | wc -c)\n\n    if [[ $len1 < $len2 ]]; then\n        list=( \"${list_1[@]}\"\
    \ )\n    elif [[ $len1 > $len2 ]]; then\n        list=( \"${list_2[@]}\" )\n \
    \   else\n        output=$(echo \"${list_1[*]}\" | sed \"s/$/ /g\" | sort -u)\n\
    \        list=( \"${output[@]}\" )\n    fi\n\n    echo \"${list[*]}\"", "  local\
    \ list_1 list_2\n  list_1=($1)\n  list_2=($2)\n  local total_match\n  total_match=()\n\
    \  local length=0\n  local len_1=0\n  local len_2=0\n  local i\n  for ((i=0; i<${#list_1[*]};\
    \ i++))\n    do\n      length=$((length + ${list_1[$i]}))\n    done\n  for ((i=0;\
    \ i<${#list_2[*]}; i++))\n    do\n      len_1=$((len_1 + ${list_2[$i]}))\n   \
    \ done\n  for ((i=0; i<${#list_1[*]}; i++)); do\n      len_2=$((len_2 + ${list_1[$i]}))\n\
    \    done\n  \n  if [[ ${length} -gt ${len_1} ]]; then\n    local j\n    for ((j=0;\
    \ j<${#list_1[*]}; j++)); do\n      if [[ ${list_1[j]} < ${list_2[j]} ]]; then\n\
    \        total_match+=(${list_2[j]})\n      fi\n    done\n    \n  elif [[ ${length}\
    \ -gt ${len_2} ]]; then\n    local j\n    for ((j=0; j<${#list_2[*]}; j++)); do\n\
    \      if [[ ${list_2[j]} < ${list_1[j]} ]]; then\n        total_match+=(${list_1[j]})\n\
    \      fi\n    done\n    \n  elif [[ ${length} -lt ${len_1} ]]; then\n    local\
    \ j\n    for ((j=0; j<${#list_1[*]}; j++)); do\n      if [[ ${list_1[j]} > ${list_2[j]}\
    \ ]]; then\n        total_match+=(${list_1[j]})\n      fi\n    done\n    \n  elif\
    \ [[ ${length} -lt ${len_2} ]]; then\n    local j\n    for ((j=0; j<${#list_2[*]};\
    \ j++)); do\n      if [[ ${list_2[j]} > ${list_1[j]} ]]; then\n        total_match+=(${list_2[j]})\n\
    \      fi\n    done\n    \n  else\n    for i in ${list_1[@]}; do\n      if [[\
    \ ${list_1[i]} ${list_2[i]} ]]; then\n        total_match+=(${list_2[i]})\n  \
    \    fi\n    done\n  fi\n  \n  echo \"${total_match[@]}\"", "    local a\n   \
    \ local b\n    local c\n    a=($1)\n    b=($2)\n    IFS=\"[,.]\" c=($((${#a[*]}+${#b[*]}-${#a[*]}-b[$((${#b[*]}-1))])))\
    \ \n    \n    for i in \"${c[@]}\"; do \n        if [ \"${b[i]}\" -gt \"${a[i]}\"\
    \ ]; then\n            c=($a)\n        else\n            c=($b)\n        fi \n\
    \    done\n    \n    echo ${c[*]}", "    local x y total1\n    # convert both\
    \ parameters to arrays and sort them\n    x=($(echo $1 | tr ' ' \"\\n\"));\n \
    \   y=($(echo $2 | tr ' ' \"\\n\"));\n    \n    # remove common elements from\
    \ x and y and sort them\n    x=($(echo ${x[@]} ${y[@]} | tr ' ' \"\\n\"));\n \
    \   x=($(sort <<<${x[@]}))\n    \n    # find the total number of characters in\
    \ x\n    total1=$(printf \"%s\\n\" \"${x[@]}\" | wc -c)\n    \n    # find the\
    \ total lengths of x and y, if they differ, return null\n    if [[ \"$total1\"\
    \ != \"${#x[@]}\" ]]; then\n        echo \"null\";\n    else\n        echo \"\
    ${x[@]}\"\n    fi", "    local str1=\"$1\"\n    local str2=\"$2\"\n    if [ !\
    \ \"$str1\" ] || [ ! \"$str1\" ]; then\n        echo \"Usage: $(basename $0) str1\
    \ str2\"\n        return\n    fi\n    if [ \"$str1\" == \"$str2\" ]; then\n  \
    \      echo \"$str1\"\n        return\n    fi\n    local matches=(`echo \"$str1\
    \ | $str2\"`)\n    if [ -z \"$matches\" ]; then\n        echo \"$str1\"\n    \
    \    return\n    fi\n    local matches_count=`echo \"${#matches[@]}\" | bc`\n\
    \    local total_matches=\"\"\n    for ((i=0; i<$matches_count; i++)); do\n  \
    \      local curr_str=`echo \"${matches[$i]}\" | tr -s ' '`\n        total_matches=\"\
    $total_matches $curr_str\"\n    done\n    echo \"$total_matches\"", "    \n  \
    \  #return \"$1 $2\"\n    \n    # set \"a\" to the first list\n    # set \"b\"\
    \ to the second list\n    # declare -i a b\n    declare -i a=\"$1\" b=\"$2\"\n\
    \    \n    for (( i=0; i<${#a}; i++ ))\n    do\n        \n        # if the char\
    \ \"$i\" is less than \"$j\" then add \"b\" to \"a\"\n        if (( \"${#b}\"\
    -1 < \"${#a}\"-1 ))\n        then\n            \n            # add \"b\" to \"\
    a\"\n            a+=(\"${b}\")\n            b=()\n        fi\n        \n    done\n\
    \    \n    # return \"a\"\n    echo \"${a[@]}\"", "    list1=$1\n    list2=$2\n\
    \    list1=${1//[!\\ ]/}\n    list2=${2//[!\\ ]/}\n    list1=$(echo $list1 | sed\
    \ 's/[ ]*//g')\n    list2=$(echo $list2 | sed 's/[ ]*//g')\n    if [ ${#list1}\
    \ -eq ${#list2} ]; then\n        list1=${list1}\n        list2=${list2}\n    fi\n\
    \    echo $list1 $list2", "    local list_1 list_2 len1 len2 i\n    list_1=($1)\n\
    \    list_2=($2)\n    len1=${#list_1[@]}\n    len2=${#list_2[@]}\n    if [ \"\
    $len1\" -eq \"$len2\" ]; then\n        echo \"$list_1\"\n    else\n        echo\
    \ \"$list_1\" | while read -r -a elements; do\n            for i in \"${elements[@]}\"\
    ; do\n                if [ \"$i\" -le \"$len2\" ]; then\n                    echo\
    \ \"$i\"\n                    break\n                else\n                  \
    \  continue\n                fi\n            done\n        done\n    fi", "  \
    \  local a b n\n    a=\"${1// /}\"\n    b=\"${2// /}\"\n    IFS=' ' read -r -a\
    \ a <<<\"$a\"\n    IFS=' ' read -r -a b <<<\"$b\"\n    n=0\n    for i in \"${a[@]}\"\
    ; do\n        ((n+=${#i}))\n    done\n    for j in \"${b[@]}\"; do\n        ((n+=${#j}))\n\
    \    done\n    echo \"${a[@]}\"", "    local list_1 list_2\n    list_1=( $1 )\n\
    \    list_2=( $2 )\n    echo \"${list_1[@]}\"\n    echo \"${list_2[@]}\"", " \
    \ if [[ -z \"$1\" || -z \"$2\" ]]; then\n    return 0\n  fi\n\n  # if both lists\
    \ have the same number of strings, return the first list\n  # (because we can\
    \ assume that the two lists are sorted)\n  len1=$(echo $1 | wc -c)\n  len2=$(echo\
    \ $2 | wc -c)\n  if [ \"$len1\" -eq \"$len2\" ]; then\n    return $1\n  fi\n\n\
    \  # count the chars in the first list\n  len1=0\n  for i in $1;\n  do\n    len1+=$(echo\
    \ $i | wc -c)\n  done\n\n  # count the chars in the second list\n  len2=0\n  for\
    \ i in $2;\n  do\n    len2+=$(echo $i | wc -c)\n  done\n\n  # if the counts are\
    \ equal, return the smaller list\n  if [ \"$len1\" -eq \"$len2\" ]; then\n   \
    \ for i in $1;\n    do\n      if [[ $i -gt $2 ]]; then\n        return $1\n  \
    \    fi\n    done\n  fi\n  return 0", "    local a b\n    IFS=$'\\n' read a b\
    \ <<< \"$1\"\n    IFS=$'\\n' read a b <<< \"$2\"\n    printf '%s\\n' \"${a//\\\
    >$b/}\" | wc -c", "    local a b i x y z\n    a=$1\n    b=$2\n    if [[ ${#a}\
    \ != ${#b} ]]; then\n        echo \"$1 has more elements than $2\"\n        return\n\
    \    fi\n    z=$(echo \"${#a}\" | paste -sd' ' -)\n    for ((i=0; i<${#z}; i++));\
    \ do\n        x=\"${z[i]}\"\n        y=$(echo \"${#b}\" | paste -sd' ' -)\n  \
    \      for ((j=0; j<${#y}; j++)); do\n            if [[ ${x} < ${y[j]} ]]; then\n\
    \                a=\"${a}\" ${x}\n            else\n                b=\"${b}\"\
    \ ${y[j]}\n            fi\n        done\n    done\n    echo \"$a\"", "\tlocal\
    \ list_1 list_2\n\tlist_1=$1; list_2=$2\n\tlocal count_1 count_2\n\tcount_1=$(echo\
    \ ${list_1} | sed 's/ /\\n/g' | tr '\\n' ' ')\n\tcount_2=$(echo ${list_2} | sed\
    \ 's/ /\\n/g' | tr '\\n' ' ')\n\tlocal total_count\n\ttotal_count=${#count_1[@]}\n\
    \tfor (( i=${#count_1[@]} - 1 ; i >= 0 ; i-- )); do\n\t\tif [[ $count_1[ $i ]\
    \ -gt $count_2[ $i ]]]; then\n\t\t\ttotal_count=$((total_count + 1))\n\t\tfi\n\
    \tdone\n\techo \"${list_1[@]:0:${#total_count}}\" ", "    local list1=\"$1\"\n\
    \    local list2=\"$2\"\n    local n=1\n    local matched=$(\n        for x in\
    \ $list1; do \n            echo $(( n++ )); done\n    )\n    local mismatched=$(\n\
    \        for x in $list2; do \n            echo $(( n++ )); done\n    )\n    echo\
    \ $list1\n    echo $list2\n    echo $matched\n    echo $mismatched\n    local\
    \ total=$(\n        echo $(( $mismatched+$matched ))\n    )\n    echo $total\n\
    \    echo $(( $total/$mismatched ))\n    local output=$(\n        echo $(( $list1\
    \ + $list2 ))\n    )\n    echo \"$output\"", "  IFS=\" \"\n  a=( $1 )\n  b=( $2\
    \ )\n  l1=${#a[@]}\n  l2=${#b[@]}\n  if [ $l1 -ne $l2 ]; then \n    return 0\n\
    \  fi\n  for i in $(seq 0 $((l1-1)*2)); do\n    if [ ${a[$i]} -le ${b[$((i+1))]}\
    \ ]; then\n      a=$(a[$i])\n      b=$(b[$((i+1))])\n    fi\n  done\n  a=${a[0]}\n\
    \  b=$(echo $b)\n  echo $a", "  local x=(${#1})\n  local y=(${#2})\n  local len\n\
    \  echo \"$x $y\"\n  if [ $x -eq $y ]; then\n    echo \"$1\"\n  else\n    for\
    \ i in $(seq 0 $(($x - $y))); do\n      local p=${1:$i:1}\n      len=$(pwd -P\
    \ \"$PWD\" | wc -c < \"$p\")\n      while [ $len -gt 0 ]; do\n        local p=${1:0:$((\
    \ $i ))}\n        local q=${2:0:$(( $i ))}\n        echo \"$p $q\"\n        len=$(pwd\
    \ -P \"$PWD\" | wc -c < \"$p\")\n      done\n    done\n  fi", "    local list_1=$1\n\
    \    local list_2=$2\n    local ret=\n    IFS=' ' read -r -a arr1 <<< \"$list_1\"\
    \n    IFS=' ' read -r -a arr2 <<< \"$list_2\"\n    for ((i=0; i<${#arr1[@]}; i++));\
    \ do\n        if [[ ${arr1[i]} == ${arr2[i]} ]]; then\n            ret+=(\"$arr1[i]\"\
    )\n        fi\n    done\n    echo \"${ret[@]}\"", "   set -- \"$1\"\n   set --\
    \ \"$2\"\n   local tmp1\n   local tmp2\n   \n   local len1\n   local len2\n  \
    \ \n   tmp1=\"$(echo \"$*\" | sed 's/ /, /g')\"\n   len1=\"${#tmp1}\"\n   \n \
    \  tmp2=\"$(echo \"$*\" | sed 's/ /, /g')\"\n   len2=\"${#tmp2}\"\n\n   if [[\
    \ ${len1} -gt ${len2} ]]; then\n      printf '%s\\n' \"$1\"\n   else\n      printf\
    \ '%s\\n' \"$2\"\n   fi", "    local char1=\"${1}\"\n    local char2=\"${2}\"\n\
    \    local match_list=\"\"\n    local result=\"\"\n    local char1count\n    local\
    \ char2count\n    local index\n    local len\n    local string\n    \n    char1count=$(expr\
    \ len \"${char1}\")\n    char2count=$(expr len \"${char2}\")\n    \n    for index\
    \ in $(seq 0 \"${#char1}\")\n    do\n        char1=\"${char1:0:$index}\"\n   \
    \     char2=\"${char2:0:$index}\"\n    done\n    \n    for string in \"${char1}\"\
    \ \"${char2}\"\n    do\n        len=\"${#string}\"\n        if (( \"${char1count}\"\
    \ < \"${char2count}\" )) \n        then\n            match_list=\"${match_list}\
    \ ${string}\"\n        fi\n    done\n\n    IFS=$'\\n' read -d '' -r -a array <<<\"\
    ${match_list}\"\n    for element in \"${array[@]}\"\n    do\n        IFS=$'\\\
    n' read -d '' -r -a array <<<\"${match_list}\"\n        if (( \"${#element}\"\
    \ < \"${#array[@]}\" )) \n        then\n            result=\"${result} ${element}\"\
    \n        fi\n    done\n    \n    echo \"${result}\"", "  # get the first arg\n\
    \  l1=(\"$@\")\n  # get the second arg\n  l2=(\"$1\")\n  l3=(\"$2\")\n\n  # get\
    \ the first arg without spaces\n  l1=(\"${l1[*]}\")\n  # get the second arg without\
    \ spaces\n  l2=(\"${l2[*]}\")\n  \n  # compare the length of l1 to l2 and l3\n\
    \  if [[ ${#l1} -lt ${#l2} ]]; then\n    l3+=( ${#l1} )\n  fi\n\n  # compare the\
    \ length of l1 to l2 and l3\n  if [[ ${#l1} -lt ${#l2} ]]; then\n    l3+=( ${#l2}\
    \ )\n  fi\n\n  echo \"${l3[@]}\"", "    local str1 str2\n    local -a matches=()\n\
    \    str1=\"${1}\"\n    str2=\"${2}\"\n    for ((i=0; i < ${#str1}; i++))\n  \
    \  do\n        case \"${str1:$i:1}\" in\n        [a-z])\n            str1=\"${str1:0:i}\"\
    \n            matches[${#matches[@]}]=\"\\\"${str1}\\\"\"\n            ;;\n  \
    \      [0-9])\n            str1=\"${str1:0:i}\"\n            matches[${#matches[@]}]=\"\
    \\\"${str1}\\\"\"\n            ;;\n        *)\n            matches[${#matches[@]}]=\"\
    \\\"${str1:$i:1}\\\"\"\n            ;;\n        esac\n    done\n    for ((i=0;\
    \ i < ${#str2}; i++))\n    do\n        case \"${str2:$i:1}\" in\n        [a-z])\n\
    \            str2=\"${str2:0:i}\"\n            matches[${#matches[@]}]=\"\\\"\
    ${str2}\\\"\"\n            ;;\n        [0-9])\n            str2=\"${str2:0:i}\"\
    \n            matches[${#matches[@]}]=\"\\\"${str2}\\\"\"\n            ;;\n  \
    \      *)\n            matches[${#matches[@]}]=\"\\\"${str2:$i:1}\\\"\"\n    \
    \        ;;\n        esac\n    done\n    for ((i=0; i < ${#matches[@]}; i++))\n\
    \    do\n        echo \"${matches[i]}\"\n    done", "    local string=\"$1\"\n\
    \    local string2=\"$2\"\n    local len=${#string}\n    local len2=${#string2}\n\
    \    local count=0\n    local count2=0\n    for ((i=0; i<${len}; i++)); do\n \
    \       count=$((count+${string:$i:1}))\n        count2=$((count2+${string2:$i:1}))\n\
    \    done\n    if [ $len2 -eq $len ]; then\n        echo \"$string\"\n    else\n\
    \        echo \"$string2\"\n    fi", "  if [ -z \"$1\" ]\n  then\n    return 0\n\
    \  fi\n  if [ -z \"$2\" ]\n  then\n    return 0\n  fi\n  \n  local list_1=$1\n\
    \  local list_2=$2\n  \n  # check if list 1 has all the words and spaces in it\
    \ and the list has all the \n  # words and spaces in it \n  local list_1_split=$(IFS='|'\
    \ read -ra list_1_split <<< \"$list_1\")\n  local list_2_split=$(IFS='|' read\
    \ -ra list_2_split <<< \"$list_2\")\n  \n  if [[ ${#list_1_split[@]} != ${#list_2_split[@]}\
    \ ]]\n  then\n    return 0\n  fi\n  \n  local counter=0\n  local match_list=[]\n\
    \  \n  # use for loop to go through all the words in list_1 and check if it has\
    \ \n  # any common words with list_2\n  for ((i=0; i < ${#list_1_split[@]}; i++));\
    \ do\n    local j=0\n    while [[ ${#list_2_split[@]} != ${#list_1_split[@]} ]];\
    \ do\n      if [[ \"$list_1_split[i]\" == \"${list_2_split[j]}\" ]]\n      then\n\
    \        match_list+=(\"${list_2_split[j]}\")\n        j=$(($j + 1))\n      else\n\
    \        break\n      fi\n    done\n  done\n  \n  # now use sort command to get\
    \ the match list in order\n  local match_list=$(sort <<<\"$match_list\")\n  \n\
    \  # return the match_list\n  printf '%s\\n' \"$match_list\"", "  local string1\
    \ string2 count\n  string1=$1\n  string2=$2\n  # echo \"string1=${string1}, string2=${string2}\"\
    \n  # echo $(( ${#string1} > ${#string2} ))\n  count=$(( ${#string1} > ${#string2}\
    \ ))\n  if [ $count -eq 0 ]; then\n    echo $string1\n  else\n    echo $string2\n\
    \  fi", "  local list=\"$1\"\n  local list2=\"$2\"\n  if [[ $list == *\" \" ]]\n\
    \  then\n    list=\"${list##* }\"\n  fi\n  if [[ $list2 == *\" \" ]]\n  then\n\
    \    list2=\"${list2##* }\"\n  fi\n  local len1=$(echo $list | wc -w)\n  local\
    \ len2=$(echo $list2 | wc -w)\n  if (( $len1 == $len2 ))\n  then\n    local c=0\n\
    \    for (( i=0; i<$len1; i++ ))\n    do\n      (( c+=${#list[$i]}))\n    done\n\
    \    for (( i=0; i<$len2; i++ ))\n    do\n      (( c+=${#list2[$i]}))\n    done\n\
    \    echo $list\n  else\n    echo $list\n  fi", "  list1=$1\n  list2=$2\n  list3=$(($list2\
    \ | wc -w))\n  if [ -z \"$list1\" ]; then\n    return 0\n  fi\n  list4=$(($list1\
    \ | wc -w))\n  total_list=$(($list3 + $list4))\n  if [ -z \"$list3\" ] || [ -z\
    \ \"$list4\" ] || [ \"$total_list\" -gt \"$list3\" ] || [ \"$total_list\" -gt\
    \ \"$list4\" ]; then\n    return 0\n  else\n    match_char=$(($list1 ))\n    for\
    \ ((i=$list3; i<=$list4; i++)); do\n      match_char=$(($match_char + $i ))\n\
    \    done\n    return $list1\n  fi", "    local l1 l2\n    l1=$1\n    l2=$2\n\
    \    local len1 len2 i res len3\n    len1=${#l1}\n    len2=${#l2}\n    if (( ${#l1}\
    \ > ${#l2} ))\n        then len3=len1\n        else len3=len2\n    fi\n    res=(\
    \ $(perl -MList::Util=max -e '\n    my $max = $max;\n    $max = $max;\n    for\
    \ (0 .. $#l) {\n        $max = max $l[$_], $max;\n    }\n    foreach $i (0 ..\
    \ $#l) {\n        if ( $l[$i] <= $max ) {\n            push @{$res}, $l[$i];\n\
    \        }\n    }\n    $max;\n    ' <<< \"$l1 $l2\") )\n    echo \"${res[@]}\"",
  "    local temp1=$1\n    local temp2=$2\n\n    echo \"$temp1\"\n    echo \"$temp2\"\
    \n    local length1=$( echo $temp1 | tr ' ' '\\n' | wc -c)\n    local length2=$(\
    \ echo $temp2 | tr ' ' '\\n' | wc -c)\n    \n    local i=0\n    local j=0\n\n\
    \    while [ $i -lt $length1 ]\n    do\n        if [ $i -eq $j -a $j -ne 0 ]\n\
    \        then\n            echo \"$temp1 $temp2\"\n            exit\n        fi\n\
    \        i=$((i+1))\n        j=$((j+1))\n        if [ $i -eq $length1 ]\n    \
    \    then\n            break\n        fi\n    done\n    \n    while [ $i -lt $length2\
    \ ]\n    do\n        if [ $i -eq $j -a $j -ne 0 ]\n        then\n            echo\
    \ \"$temp1 $temp2\"\n            exit\n        fi\n        j=$((j+1))\n      \
    \  if [ $j -gt $length2 ]\n        then\n            break\n        fi\n    done\n\
    \    \n    echo $temp1\n    echo $temp2", "    local x1 x2\n    local num_x1\n\
    \    local num_x2\n    local total_matches\n    local total_num\n\n    x1=($1)\n\
    \    x2=($2)\n    local x\n    local y\n    local matches\n    local num\n\n \
    \   num_x1=$(IFS=$' '; echo \"${#x1[*]}\")\n    num_x2=$(IFS=$' '; echo \"${#x2[*]}\"\
    )\n    total_num=$((num_x1 + num_x2))\n    total_matches=$((num_x1 + num_x2))\n\
    \n    for (( i = 0; i < total_num; i++ ))\n    do\n\tx=${x1[$i]}\n\ty=${x2[$i]}\n\
    \tmatches=$((num_x1 + num_x2))\n\tnum=$((matches - num_x1))\n\t\n\tif [ \"$num\"\
    \ -eq 0 ]\n\tthen\n\t    total_matches=$((total_matches + 1))\n\telse\n\t    total_matches=$((total_matches\
    \ + num))\n\tfi\n    done\n    \n    echo $total_matches\n    ", "\tlocal l1 l2\
    \ l3 l4 l5 l6 l7 l8 l9 l10\n\tl1=$(echo $1 | tr ' ' ' ')\n\tl2=$(echo $2 | tr\
    \ ' ' ' ')\n\tl3=$(echo \"${l1//$2//}\" | tr ' ' ' ')\n\tl4=$(echo \"${l1//$3//}\"\
    \ | tr ' ' ' ')\n\tl5=$(echo \"${l2//$2//}\" | tr ' ' ' ')\n\tl6=$(echo \"${l2//$3//}\"\
    \ | tr ' ' ' ')\n\tl7=$(echo \"${l3//$2//}\" | tr ' ' ' ')\n\tl8=$(echo \"${l3//$3//}\"\
    \ | tr ' ' ' ')\n\tl9=$(echo \"${l4//$2//}\" | tr ' ' ' ')\n\tl10=$(echo \"${l4//$3//}\"\
    \ | tr ' ' ' ')\n\tlocal res=($(echo $l6 $l7 $l8 $l9 $l10 ))\n\techo $((${#res[@]}))\n\
    \techo \"${res[@]}\"", "    local list1=\"$1\"\n    local list2=\"$2\"\n\n   \
    \ if [ \"${#list1}\" -eq \"${#list2}\" ] ; then\n        echo \"${list1}\"\n \
    \   else\n        echo \"${list1}\" | while read -r item; do\n            case\
    \ \"${item}\" in\n                *\" \"* ) ;;\n                *) echo ${item}\
    \ ;;\n            esac\n        done\n    fi", "    local list_1 list_2\n    IFS='\
    \ ' read -ra list_1 <<< \"$1\"\n    IFS=' ' read -ra list_2 <<< \"$2\"\n    echo\
    \ \"${list_1[@]}\" | tr ' ' '\\n' | grep -Fvf <(echo \"${list_2[@]}\") | sed -e\
    \ 's/^/\"/' -e 's/$/\"/' -e 's/ //g' -e 's/\\n/\" \"'", "  echo $1 $2 | sort |\
    \ uniq -c | awk '{ print $1 }'", "    local count\n    local line1\n    local\
    \ line2\n    local list\n    list=$1\n    line1=$2\n    line2=$3\n\n    for ((i\
    \ = 0; i < ${#list}; i++))\n    do\n        count=$(echo \"${line1}\" | grep -c\
    \ -E \"${list[i]}\")\n        list[i]=$(echo \"${list[i]}\" | sed -e \"s/'//g\"\
    \ | sed -e \"s/''//g\")\n        line1=$(echo \"${line1}\" | sed -e \"s/'//g\"\
    \ | sed -e \"s/''//g\")\n        if [ $count -lt 0 ]\n        then\n         \
    \   echo \"$list[i]\"\n        fi\n    done", "    local a=( $1 )\n    local b=(\
    \ $2 )\n    local l\n    for (( i=0; i<${#a[@]}; i++ )); do\n        l=\"${a[$i]}\"\
    \n        b=\"$b\"$(echo \"$b\" | sed -e \"s/${l}/$l/\")\n    done\n    echo \"\
    $b\"", "    local a b\n    declare -a a=($1)\n    declare -a b=($2)\n\n    for\
    \ (( i=0; i<${#a[@]}; i++ ))\n    do\n        local j=0\n        while [[ ${#b[@]}\
    \ -lt ${#a[$i]} ]]\n        do\n            b[${j}]=${b[${j}]:0:${#a[$i]}}\n \
    \           j=$(( j + 1 ))\n        done\n    done\n\n    for (( i=0; i<${#a[@]};\
    \ i++ ))\n    do\n        if [[ ${#b[@]} -eq ${#a[$i]} ]]; then\n            echo\
    \ \"${a[$i]}\"\n        fi\n    done", "    list1=($(echo $1 | tr ' ' \"\\n\"\
    ))\n    list2=($(echo $2 | tr ' ' \"\\n\"))\n    len1=$(echo $1 | wc -c)\n   \
    \ len2=$(echo $2 | wc -c)\n    if [ \"$len1\" -eq \"$len2\" ]\n    then\n    \
    \    echo \"$list1\"\n    else\n        echo \"$list1\" >&2\n    fi", "    local\
    \ l1=\"$1\"\n    local l2=\"$2\"\n    local len1=\"${#l1}\"\n    local len2=\"\
    ${#l2}\"\n    if [[ $len1 == $len2 ]]; then\n      echo \"$l1\"\n      return\n\
    \    fi\n    local sum=0\n    local j=0\n    while [ \"$j\" -lt \"$len1\" ]; do\n\
    \      local val=\"${l1:$j:1}\"\n      local l3=\"${l2:$j:1}\"\n      if [ \"\
    $val\" -le \"$l3\" ]; then\n        sum=\"$((sum + 1))\"\n        echo \"${l1:0:$j}\
    \ ${l2:0:$j}\"\n      else\n        sum=\"$((sum + 1))\"\n        echo \"${l1:$j:$len1}\"\
    \n      fi\n      j=$((j + 1))\n    done\n    echo \"${l1:0:$j}\"\n    echo \"\
    ${l2:0:$j}\"", "\tlocal string1=$1\n\tlocal string2=$2\n\t# convert strings to\
    \ arrays and remove empty elements\n\tstring1=( ${string1[*]/ / } )\n\tstring2=(\
    \ ${string2[*]/ / } )\n\t# check length\n\tif [ ${#string1[@]} = 0 ]; then\n\t\
    \tstring1=( ${string2[@]/ / } )\n\telif [ ${#string1[@]} = 0 ]; then\n\t\tstring1=(\
    \ ${string2[@]/ / } )\n\tfi\n\t# return first list if same length\n\tif [ ${#string1[@]}\
    \ -eq ${#string2[@]} ]; then\n\t\techo \"${string1[@]}\"\n\tfi", "  # declare\
    \ -a a\n  a=( $1 )\n  b=( $2 )\n  # loop through each string in the first list\n\
    \  for ((i=0; i < ${#a[*]}; i++)); do\n    if [ ${#b[i]} -gt ${#a[i]} ]; then\n\
    \      # if the number of char in b is greater than the length of a\n      # then\
    \ add all chars in a to b\n      b+=(${a[*]})\n      break\n    fi\n  done\n \
    \ # return the modified list\n  echo $b", "  # $1 is a space-separated list\n\
    \  # $2 is a space-separated list\n  \n  local x1 x2\n  local len1 len2\n  local\
    \ maxlen1 maxlen2\n  local i match\n\n  x1=${1//[[ \\]^$]/ }\n  x2=${2//[[ \\\
    ]^$]/ }\n  len1=${#x1}\n  len2=${#x2}\n  maxlen1=${#x1}\n  maxlen2=${#x2}\n\n\
    \  if [ $len1 == $len2 ] ; then\n    for ((i = 0; i <= maxlen1; i++))\n    do\n\
    \      if [ \"${x1:i:1}\" == \"${x2:i:1}\" ] ; then\n        match += ${x1:i:1}\n\
    \      fi\n    done\n    return ${match[@]}\n  fi\n\n  for ((i = 0; i <= maxlen1;\
    \ i++))\n  do\n    if [ \"${x1:i:1}\" == \"${x2:i:1}\" ] ; then\n      match +=\
    \ ${x1:i:1}\n      maxlen1=$((maxlen1-1))\n      break\n    fi\n  done\n\n  for\
    \ i in $(seq 0 $((len2-1)))\n  do\n    if [ \"${x1:i:1}\" == \"${x2:i:1}\" ] ;\
    \ then\n      match += ${x2:i:1}\n      maxlen2=$((maxlen2-1))\n      break\n\
    \    fi\n  done\n\n  for i in $(seq 0 $((len1-1)))\n  do\n    if [ \"${x1:i:1}\"\
    \ == \"${x2:i:1}\" ] ; then\n      match += ${x1:i:1}\n      maxlen1=$((maxlen1-1))\n\
    \      break\n    fi\n  done\n\n  for i in $(seq 0 $((len2-1)))\n  do\n    if\
    \ [ \"${x1:i:1}\" == \"${x2:i:1}\" ] ; then\n      match += ${x2:i:1}\n      maxlen2=$((maxlen2-1))\n\
    \      break\n    fi\n  done\n\n  if [ $maxlen1 != $maxlen2 ] ; then\n    match=$(total_match\
    \ $match $x2)\n    return $match\n  fi\n\n  match=$(total_match $x1 $match)\n\
    \  return $match", "    local list1=(${1//[[:space:]]/ })\n    local list2=(${2//[[:space:]]/\
    \ })\n\n    local length=0\n    local count=0\n\n    for a in \"${list1[@]}\"\
    ; do\n        [[ ${list1[${count}]} != ${list2[${count}]} ]] && (( length += ${#a}))\n\
    \        ((count++))\n    done\n\n    # list1 has less elements than list2\n \
    \   [[ ${count} -gt ${#list2} ]] && echo ${list1[@]} || echo ${list2[@]}", " \
    \   local a b count new_list\n    for a in \"$@\"; do\n        for b in \"$@\"\
    ; do\n            (( count = $(bc <<< \"$b - $a\" ) )); \n            if (( count\
    \ < 0 )); then\n                count=0\n            fi\n            echo \"\\\
    \"$a\\\"\"\n        done\n    done", "    local len1=$((${#1}))\n    local len2=$((${#2}))\n\
    \    local i\n    local j\n    local match\n    local total\n\n    for i in {1..$len1};\
    \ do\n        match=0\n        for j in {1..$len2}; do\n            if [ \"$i\"\
    \ -eq \"$j\" ]; then\n                continue\n            fi\n            if\
    \ [ \"$i\" -lt \"$j\" ]; then\n                if [ \"$i\" -lt \"$match\" ]; then\n\
    \                    match=$i\n                fi\n            else\n        \
    \        if [ \"$j\" -lt \"$match\" ]; then\n                    match=$j\n  \
    \              fi\n            fi\n        done\n        total+=$(expr $match\
    \ + 1)\n    done\n    echo $total", "    local list_1=$1\n    local list_2=$2\n\
    \    local total=0\n    local list_out\n    for ((i=0;i<${#list_1};i++)); do\n\
    \        total=$(($total + ${list_1[i]}))\n    done\n    list_out=$list_1\n  \
    \  for ((i=0;i<${#list_2};i++)); do\n        if ((total <= ${list_2[i]})); then\n\
    \            list_out+=(\"${list_2[i]}\")\n        fi\n    done\n    return ${list_out[@]}",
  "    local list_1 list_2\n    list_1=$1\n    list_2=$2\n    local len1\n    len1=${#list_1}\n\
    \    local len2\n    len2=${#list_2}\n    if [[ $len1 -gt $len2 ]]; then\n   \
    \     echo ${list_1}\n        exit 0\n    elif [[ $len1 -lt $len2 ]]; then\n \
    \       local list_temp1\n        list_temp1=($(echo $list_1 | tr \" \" '\\n'))\n\
    \        local list_temp2\n        list_temp2=($(echo $list_2 | tr \" \" '\\n'))\n\
    \        local count1\n        count1=0\n        local count2\n        count2=0\n\
    \        local list_temp3\n        list_temp3=($(echo $list_temp1 | sed 's/\\\"\
    //g' | sort -u))\n        local list_temp4\n        list_temp4=($(echo $list_temp2\
    \ | sed 's/\\\"//g' | sort -u))\n        list_temp3=($(echo $list_temp3 | sed\
    \ 's/\\\"//g' | sort -u))\n        list_temp4=($(echo $list_temp4 | sed 's/\\\"\
    //g' | sort -u))\n        echo \"${list_temp3}${list_temp4}\"\n        exit 0\n\
    \    elif [[ $len1 == $len2 ]]; then\n        echo \"${list_1}\"\n        exit\
    \ 0\n    elif [[ $len1 < $len2 ]]; then\n        list_temp1=($(echo $list_1 |\
    \ tr \" \" '\\n'))\n        echo \"${list_temp1}\"\n        exit 0\n    elif [[\
    \ $len1 > $len2 ]]; then\n        list_temp2=($(echo $list_2 | tr \" \" '\\n'))\n\
    \        echo \"${list_temp2}\"\n        exit 0\n    fi", "    local string1=\"\
    $1\"\n    local string2=\"$2\"\n    local string_arr1=( \"${string1}\" )\n   \
    \ local string_arr2=( \"${string2}\" )\n    local result=''\n    for index in\
    \ \"${!string_arr1[@]}\"; do\n        local i=\"${index}\"\n        local j=\"\
    ${index}\"\n        while [[ \"$i\" < \"$j\" && \"$i\" < \"${#string_arr2[@]}\"\
    \ ]]; do\n            (( i=i+1 ))\n        done\n        local tmp=\"$string_arr1[$i]\"\
    \n        local count=\"${#tmp}\"\n        (( count=count + 1 ))\n        local\
    \ string_arr2_index=\"${#string_arr2[$j-1]}\"\n        local string_arr2_count=\"\
    ${#string_arr2[$j]}\"\n        (( string_arr2_count=$string_arr2_count + 1 ))\n\
    \        local char_count=\"${#tmp}\"\n        if [ \"$count\" -eq \"$string_arr2_count\"\
    \ ]; then\n            result=\"$string_arr1[$i]\"\n        elif [ \"$count\"\
    \ -lt \"$string_arr2_count\" ]; then\n            result=\"$string_arr1[$i]\"\n\
    \        else\n            result=\"$string_arr1[$i]\"\n        fi\n        ((\
    \ j=j-1 ))\n    done\n    echo \"$result\"", "  local str1 str2\n  read str1 <<<\
    \ $1\n  read str2 <<< $2\n  local len1 len2\n  len1=0\n  len2=0\n  while ((${#str1}))\n\
    \  do\n    len1=$((len1+1))\n    str1=\"${str1// /}\"\n  done\n  while ((${#str2}))\n\
    \  do\n    len2=$((len2+1))\n    str2=\"${str2// /}\"\n  done\n  local len\n \
    \ len=$((len2-llen1))\n  if ((${#str1} >= ${#str2}))\n  then\n    echo $str1\n\
    \  else\n    echo $str2\n  fi\n  while ((${#str1} > ${#str2}))\n  do\n    echo\
    \ $str1\n    len1=$((len1-1))\n    len=$((len+1))\n    str1=\"${str1// /}\"\n\
    \  done\n  while ((${#str2} > ${#str1}))\n  do\n    len2=$((len2-1))\n    len=$((len+1))\n\
    \    str2=\"${str2// /}\"\n  done\n  if ((${#str1} > ${#str2}))\n  then\n    echo\
    \ $str2\n  else\n    echo $str1\n  fi", "    local list1=$1\n    local list2=$2\n\
    \    local num_chars=0\n    local i\n    for ((i=0; i<${#list1[@]}; i++)); do\n\
    \        local c=${list1[i]}\n        if [[ \"${c}\" < \"${list2[i]}\" ]]; then\n\
    \            num_chars++\n        else\n            num_chars=$(( num_chars +\
    \ 1 ))\n            list2=${list2[@]:0:i}\n        fi\n    done\n    echo $list2",
  "    local _ret=0\n    local _total=0\n    local _max=$(($#${!1}))\n    local _tmp\n\
    \n    for _item in ${!1};\n    do\n        local _max=$(( _max > ${!2}[_item]\
    \ ? _max : ${!2}[_item] ))\n    done\n\n    for _item in ${!1};\n    do\n    \
    \    if [ ${!2}[_item] -lt ${!2}[_item-1] ]\n        then\n            _tmp=${!1}[_item]\n\
    \            ${!1}[_item]=\"${!1}[_item-1]\"\n            ${!1}[_item-1]=$_tmp\n\
    \            _ret=$(( _ret > ${!1}[_item] ? _ret : ${!1}[_item] ))\n        fi\n\
    \    done\n\n    if [ $_ret -eq $_max ]\n    then\n        echo ${!1}\n    else\n\
    \        echo \"\"\n    fi", "    local list1=($(echo $1 | tr -s \" \"))\n   \
    \ local list2=($(echo $2 | tr -s \" \"))\n    local length\n    local max\n\n\
    \    # find out max length\n    for length in ${#list1[@]}; do\n        if [[\
    \ ${#list1[length]} -gt ${#list2[length]} ]]; then\n            max=${#list1[length]}\n\
    \        else\n            max=${#list2[length]}\n        fi\n    done\n\n   \
    \ # return list with max length\n    local output\n    for length in {1..$max};\
    \ do\n        output+=($(echo ${list1[$length]}))\n        output+=($(echo ${list2[$length]}))\n\
    \    done\n    echo \"${output[@]}\"", "    local a=\"$1\"\n    local b=\"$2\"\
    \n    # strip white space from both strings\n    a=\"${a// /}\"\n    b=\"${b//\
    \ /}\"\n    \n    local a_remain=\"$(echo \"${a}\" | tr ' ' '-')\"\n    local\
    \ b_remain=\"$(echo \"${b}\" | tr ' ' '-')\"\n\n    # count the chars in a\n \
    \   local a_count=\"$(echo \"${a}\" | wc -c)\"\n    local b_count=\"$(echo \"\
    ${b}\" | wc -c)\"\n\n    # if the lengths of both strings are equal\n    if [[\
    \ \"${a_count}\" -eq \"${b_count}\" ]]\n    then\n        # return the smaller\
    \ list\n        if [[ \"${a_remain}\" < \"${b_remain}\" ]]\n        then\n   \
    \         echo \"${a_remain}\"\n        else\n            echo \"${b_remain}\"\
    \n        fi\n    else\n        echo \"${a_remain}\"\n    fi", "    list1=($1)\n\
    \    list2=($2)\n    list1_len=${#list1[@]}\n    list2_len=${#list2[@]}\n    if\
    \ (( list1_len > list2_len )) ; then\n        return\n    fi\n    list1_array=()\n\
    \    list2_array=()\n    for i in `seq 0 $(($list1_len - 1))` ; do \n        list1_array+=($list1[$i])\
    \ \n    done\n    for i in `seq 0 $(($list2_len - 1))` ; do \n        list2_array+=($list2[$i])\
    \ \n    done\n    # list2_array[list2_len-1] is out of list2_len\n    for (( i=list2_len\
    \ ; i >0 ; i-- )) ; do \n        list2_array+=($list2_array[${#list2_array[@]}\
    \ -1]) \n    done\n    array_list1=()\n    array_list2=()\n    for i in `seq 0\
    \ $(($list1_len - 1))` ; do \n        array_list1+=($list1_array[$i]) \n    done\n\
    \    for i in `seq 0 $(($list2_len - 1))` ; do \n        array_list2+=($list2_array[$i])\
    \ \n    done\n    # array_list1[array_list1_len-1] is out of array_list1_len\n\
    \    for (( i=array_list1_len ; i >0 ; i-- )) ; do \n        array_list1+=(${array_list1[@]}\
    \ ${array_list1[$i]})\n    done\n    # array_list2[array_list2_len-1] is out of\
    \ array_list2_len\n    for (( i=array_list2_len ; i >0 ; i-- )) ; do \n      \
    \  array_list2+=(${array_list2[@]} ${array_list2[$i]})\n    done\n    array_merge=()\n\
    \    array_list1_len=${#array_list1[@]}\n    array_list2_len=${#array_list2[@]}\n\
    \    # array_list2_array[array_list2_len-1] is out of array_list2_len\n    for\
    \ (( i=array_list2_len ; i >0 ; i-- )) ; do \n        array_merge+=(${array_merge[@]}\
    \ ${array_list2[$i]})\n    done\n    # array_list1_array[array_list1_len-1] is\
    \ out of array_list1_len\n    for (( i=array_list1_len ; i >0 ; i-- )) ; do \n\
    \        array_merge+=(${array_merge[@]} ${array_list1[$i]})\n", "  local a b\
    \ c\n  IFS=$'\\n' read a b c <<< \"$1\"\n  [[ ${#b} -gt ${#c} ]] || echo \"$a\"\
    \ || echo \"$b\" || echo \"$c\"", "    local list_1 list_2\n    list_1=($1)\n\
    \    list_2=($2)\n    len_1=${#list_1[@]}\n    len_2=${#list_2[@]}\n    if ((\
    \ $len_1 != $len_2 )); then\n        return $list_1\n    fi\n    i=0;\n    while\
    \ (( $i < $len_1 )); do\n        if (( ${list_1[$i]} <= ${list_2[$i]} )); then\n\
    \            list_1+=(${list_1[$i]})\n        else\n            list_2+=(${list_2[$i]})\n\
    \        fi\n        i=$(( $i + 1 ))\n    done\n    return $list_1", "    set\
    \ -- $1 $2\n    local len1=$((${#1}/2))\n    local len2=$((${#2}/2))\n    \n \
    \   local c=0\n    while (( $# >= 0 )); do\n        (( c += ${#($1)[$(( $1 - 1\
    \ ))]} ))\n        (( c += ${#($2)[$(( $2 - 1 ))]} ))\n        (( c++ ))\n   \
    \     shift\n        shift\n    done\n    \n    local m1=$(expr $len1 - $c)\n\
    \    local m2=$(expr $len2 - $c)\n    \n    if [ ${m1} = ${m2} ]; then\n     \
    \   echo \"$1\"\n    else\n        echo \"$1\"\n    fi", "    local i j num1 num2\n\
    \    local array1\n    local array2\n    local match\n\n    local -a arr1\n  \
    \  local -a arr2\n    local -a arr3\n    local -a arr4\n\n    arr1=( $1 )\n  \
    \  arr2=( $2 )\n    arr3=( $1 )\n    arr4=( $2 )\n\n    while [ \"${#arr1[@]}\"\
    \ -gt 0 ]; do\n        num1=$( echo $arr1[0] | tr -dc '[:digit:]' )\n        for\
    \ (( i=1; i<=$(( ${#arr1[@]} - 1 )); i++ )); do\n            match=$( echo \"\
    ${arr1[i]}\"\n                       | sed 's/^./[&]/g'\n                    \
    \   | sed 's/$/[&]/g' )\n\n            if [[ \"${arr2[$i]}\" == \"$match\" ]];\
    \ then\n                arr3[$i]=$( echo $arr3[$i] | sed 's/^./[&]/g' )\n    \
    \        fi\n        done\n        arr1=$( echo \"${arr1[@]:1}\" )\n        arr3=$(\
    \ echo \"${arr3[@]}\" )\n\n        if [ \"${#arr3[@]}\" -eq \"${#arr1[@]}\" ];\
    \ then\n            arr3=$( echo \"${arr3[@]:1}\" )\n        fi\n        arr1=(\
    \ $arr3 )\n    done\n\n    while [ \"${#arr2[@]}\" -gt 0 ]; do\n        num2=$(\
    \ echo $arr2[0] | tr -dc '[:digit:]' )\n        for (( i=1; i<=$(( ${#arr2[@]}\
    \ - 1 )); i++ )); do\n            match=$( echo \"${arr2[i]}\"\n             \
    \          | sed 's/^./[&]/g'\n                       | sed 's/$/[&]/g' )\n\n\
    \            if [[ \"${arr1[$i]}\" == \"$match\" ]]; then\n                arr4[$i]=$(\
    \ echo $arr4[$i] | sed 's/^./[&]/g' )\n            fi\n        done\n        arr2=$(\
    \ echo \"${arr2[@]:1}\" )\n        arr4=$( echo \"${arr4[@]}\" )\n\n        if\
    \ [ \"${#arr4[@]}\" -eq \"${#arr2[@]}\" ]; then\n            arr4=$( echo \"${arr4[@]:1}\"\
    \ )\n        fi\n        arr2=( $arr", "  local l1 l2\n  l1=(\"${@:1:$#}\")\n\
    \  l2=(\"${@:2:$#}\")\n  local n=0\n  local k\n  for i in \"${l1[@]}\"\n  do\n\
    \    for j in \"${l2[@]}\"\n    do\n      [[ \"${i}\" == \"$j\" ]] || [[ $i -lt\
    \ $j ]] \\\n        && [[ \"${#i}\" -lt \"$n\" ]] && \\\n        n=\"${#i}\"\n\
    \    done\n  done\n  echo \"${l1[@]:0:$n}\"", "    local first_list second_list\n\
    \    IFS=$'\\n'\n    read -d '' first_list <<<\"$1\"\n    read -d '' second_list\
    \ <<<\"$2\"\n    IFS=$' \\n'\n    local first_len=\"${#first_list[@]}\"\n    local\
    \ second_len=\"${#second_list[@]}\"\n    if [[ \"${first_len}\" -gt \"${second_len}\"\
    \ ]]; then\n        echo \"${first_list[@]}\"\n    else\n        echo \"${second_list[@]}\"\
    \n    fi", "    local list_1 list_2\n    list_1=$1\n    list_2=$2\n    list_1=$(echo\
    \ \"$list_1\" | sed 's/ /\" \"/g')\n    list_2=$(echo \"$list_2\" | sed 's/ /\"\
    \ \"/g')\n    list_1=$(echo \"$list_1\" | sed 's/ /\" \"/g' | sort -u | tr -d\
    \ '\"')\n    list_2=$(echo \"$list_2\" | sed 's/ /\" \"/g' | sort -u | tr -d '\"\
    ')\n    list_1=$(echo \"$list_1\" | sed 's/ /\" \"/g' | sort -u | tr -d '\"' |\
    \ wc -l)\n    list_2=$(echo \"$list_2\" | sed 's/ /\" \"/g' | sort -u | tr -d\
    \ '\"' | wc -l)\n\n    if [ \"$list_1\" == \"$list_2\" ]; then\n        echo $list_1\n\
    \    else\n        list_1=$($list_1 | sort -u)\n        list_2=$($list_2 | sort\
    \ -u)\n        list_1=$($list_1 | sort -u | wc -l)\n        list_2=$($list_2 |\
    \ sort -u | wc -l)\n        list_1=$($list_1 | sort -u | awk '{print $1}' | wc\
    \ -l)\n        list_2=$($list_2 | sort -u | awk '{print $1}' | wc -l)\n      \
    \  if [ \"$list_1\" -gt \"$list_2\" ]; then\n            list_1\n        else\n\
    \            list_2\n        fi\n    fi", "    local string_1=$1\n    local string_2=$2\n\
    \    local len1=$(expr length \"$string_1\" )\n    local len2=$(expr length \"\
    $string_2\" )\n    if [ \"$len1\" -eq \"$len2\" ]; then\n        echo \"$string_1\"\
    \n    elif [ \"$len1\" -gt \"$len2\" ]; then\n        echo \"$string_1\"\n   \
    \ elif [ \"$len1\" -le \"$len2\" ]; then\n        echo \"$string_2\"\n    else\n\
    \        echo \"$string_2\"\n    fi", "    local i j\n    local num=$((${#1} +\
    \ ${#2}))\n    for (( i = 1; i <= ${#1}; i++ )); do\n        for (( j = 1; j <=\
    \ ${#2}; j++ )); do\n            if [[ ${#1} = ${#2} ]]; then\n              \
    \  return \"${1}\"\n            else\n                if [[ \"${#1}\" -gt \"${#2}\"\
    \ ]]; then\n                    return ${1}\n                else\n          \
    \          if [[ ${#1} = \"${#2}\" ]]; then\n                        echo ${1}\n\
    \                        return\n                    fi\n                fi\n\
    \            fi\n        done\n    done", "    local list_1 list_2 max_len list_3\
    \ chars=\"\"\n    list_1=( \"$1\" )\n    list_2=( \"$2\" )\n    # sort list_2\
    \ to remove duplicate values\n    list_2=( $(sort <<<\"${list_2[@]}\") )\n   \
    \ # max_len stores the max length of the lists\n    max_len=0\n    list_3=()\n\
    \    for element in \"${list_1[@]}\"; do\n        chars=$(( ${#element} + ${#chars}\
    \ ))\n        if [[ ${#list_2[@]} -lt ${#element} ]]; then\n            max_len=$((\
    \ ${#list_2[@]} < ${#element} ? ${#list_2[@]} : ${#element} ))\n        fi\n \
    \   done\n    list_3=(${list_2[@]:0:max_len})\n    list_3=(${list_3[@]:${max_len}:${#list_1[@]}})\
    \ # remove duplicate elements from list_3\n    echo $(IFS=$'\\n'; echo \"${list_3[@]}\"\
    )", "    local list_1 list_2\n    list_1=$1\n    list_2=$2\n    local len1=\"\
    ${#list_1}\"\n    local len2=\"${#list_2}\"\n    if [ $len1 -eq $len2 ]; then\n\
    \        echo \"$list_1\"\n    else\n        echo \"$list_1\"\n    fi", "    IFS='\
    \ ' read -ra arr1 <<< \"$1\"\n    IFS=' ' read -ra arr2 <<< \"$2\"\n    local\
    \ cnt=0\n    for ((i=0; i < ${#arr1[*]}; i++)); do\n        for ((j=0; j < ${#arr2[*]};\
    \ j++)); do\n            [[ \"${arr1[i]}\" -gt \"${arr2[j]}\" ]] && cnt=0\n  \
    \      done\n        if [ \"$cnt\" -lt 1 ]; then\n            arr1+=($arr1[i])\n\
    \        fi\n        ((cnt++))\n    done\n    echo \"${arr1[@]}\"", "  local -i\
    \ len_1=\"$((${#1}))\"\n  local -i len_2=\"$((${#2}))\"\n  echo \"${1}\" | awk\
    \ '{print length}' > /tmp/length\n  echo \"${2}\" | awk '{print length}' >> /tmp/length\n\
    \  if (( \"${len_1}\" > \"${len_2}\" )) ; then\n    echo \"${1}\"\n  else\n  \
    \  echo \"${2}\"\n  fi\n  rm /tmp/length", "    local a=\"$1\" b=\"$2\"\n    local\
    \ len1=$((${#a} - 1))\n    local len2=$((${#b} - 1))\n    local arr1=(${a})\n\
    \    local arr2=(${b})\n    for (( i=0; i < ${#arr1[@]}; i++ )); do\n        local\
    \ chars=${arr1[$i]}\n        if (( ${#chars} < ${#arr2[$i]} )); then\n       \
    \     arr1=(${arr1[@]} ${arr2[$i]})\n        fi\n    done\n    arr1=(${arr1[@]}\
    \ ${arr2[@]})\n    arr1=(\"${arr1[@]}\" ${len1})\n    arr1=(\"${arr1[@]}\" ${len2})\n\
    \    echo \"${arr1[@]}\"", "\tlocal i j result\n\tresult=$1\n\tfor (( i=1; i<=$#;\
    \ i++ )); do\n\t\tj=0\n\t\twhile [[ \"$j\" -lt $2 ]]; do\n\t\t\t(( j++ ))\n\t\t\
    done\n\t\tresult=$(expr \"$i\" \"$j\")\n\tdone\n\techo $result", "    local total_strs\
    \ total_chars\n    local min_strs min_chars\n    local match_list\n    total_strs=$(echo\
    \ $1 | sed 's/ /\\n/g')\n    total_chars=$(echo $2 | sed 's/ /\\n/g' | awk '{\
    \ print $1 }')\n    \n    min_chars=$(echo $total_chars | awk '{ print $1 }')\n\
    \    min_strs=$(echo $total_strs | awk '{ print $1 }')\n    \n    match_list=$(echo\
    \ $total_strs | sed -n 's/^/'\"$min_chars\"'/p' | sort -n | uniq -u) \n    \n\
    \    echo $match_list", "  local i\n  local j\n  local match\n  local temp\n \
    \ local len1\n  local len2\n  local len\n  local first\n  local second\n  local\
    \ res\n\n  read -d '' first <<< \"$1\"\n  read -d '' second <<< \"$2\"\n\n  len=$(echo\
    \ \"$first\" | wc -c)\n  len1=$(echo \"$second\" | wc -c)\n\n  if ((len1 == len))\
    \ ; then\n    return \"$first\"\n  fi\n  for ((i=1; i<len1; i++)) ; do\n    match=$(\
    \ echo \"$first\" | sed -n \"s/$i .*//p\" )\n    temp=$( echo \"$second\" | sed\
    \ -n \"s/$i .*//p\" )\n\n    # print \"match\" and \"temp\" to see what they contain\n\
    \    echo \"$match\"\n    echo \"$temp\"\n\n    # compare the two strings and\
    \ return the first one which is greater\n    (( len < len2 )) && return \"$match\"\
    \ || return \"$temp\"\n  done", "  local list_1 list_2\n  list_1=$1\n  list_2=$2\n\
    \  \n  if [[ ${#list_1} -gt ${#list_2} ]]; then\n    echo $list_1\n  else\n  \
    \  echo $list_2\n  fi", "  local list_1\n  local list_2\n\n  list_1=$1\n  list_2=$2\n\
    \n  if [[ \"$list_1\" == \"$list_2\" ]]; then\n    list_1=\"$list_1\"\n  fi\n\n\
    \  local count=0\n  local word\n\n  while read -r word; do\n    count=$(($count+1))\n\
    \  done <<< \"$list_1\"\n\n  while read -r word; do\n    count=$(($count-1))\n\
    \  done <<< \"$list_2\"\n\n  local list_3\n\n  if [ $count -eq 0 ]; then\n   \
    \ list_3=\"[]\"\n  else\n    list_3=\"\\\"${list_1[@]}\\\"\"\n  fi\n\n  if [ $count\
    \ -eq 0 ]; then\n    list_3=\"$list_3\"\n  else\n    list_3=\"$list_3 \\\"${list_2[@]}\\\
    \"\"\n  fi\n\n  echo \"$list_3\"", "  local num_chars=${#$1} len1=${#$1} | awk\
    \ '{print $1}'\n  local len2=${#} | awk '{print $1}'\n  (( len1 == len2 )) &&\
    \ echo \"$1\" || echo \"$2\"", "    local i1=$1 i2=$(echo $1 | sed 's/ //g' |\
    \ sort | uniq)\n    local i2i2=$(echo $i2 | sed 's/ //g' | sort | uniq)\n    local\
    \ i len1 len2\n    len1=$(echo \"$i1\" | wc -c)\n    len2=$(echo \"$i2i2\" | wc\
    \ -c)\n    for((i=0; i<$len1; i++)); do\n        ((i<$len2)) && echo \"$i1\"\n\
    \    done", "  # TODO: Make it work for multiple inputs or list with spaces\n\
    \  local first_string second_string\n  first_string=$1; second_string=$2\n  local\
    \ len1\n  len1=$(echo ${first_string} | wc -c)\n  local len2\n  len2=$(echo ${second_string}\
    \ | wc -c)\n  if [[ \"$len1\" -gt \"$len2\" ]]\n  then\n    echo ${first_string}\n\
    \  elif [[ \"$len2\" -gt \"$len1\" ]]\n  then\n    echo ${second_string}\n  else\n\
    \    echo ${first_string} $(total_match ${first_string#*\"$len1\"}\n      ${second_string#*\"\
    $len2\"})\n  fi", "    local x\n    x=$(echo $1 | tr ' ' '\\n' | sort -u)\n  \
    \  y=$(echo $2 | tr ' ' '\\n' | sort -u)\n    echo $x | tr ' ' '\\n' | sort -u\
    \ | sed -e 's/\"//g' | while read line\n    do\n        echo $line | grep -c \"\
    $line\" >/dev/null\n    done", "    local count=0\n    local a=0\n    local b=0\n\
    \    for x in \"$@\"; do\n        if [[ \"$x\" =~ \"$1\" ]]; then\n          \
    \  a=`echo \"$x\" | wc -c`\n        fi\n        if [[ \"$x\" =~ \"$2\" ]]; then\n\
    \            b=`echo \"$x\" | wc -c`\n        fi\n        count=`expr $count +\
    \ $a`\n        if [[ \"$a\" -gt \"$b\" ]]; then\n            echo \"$x\"\n   \
    \         break\n        fi\n    done", "    local list_1 list_2 total\n    IFS='\
    \ ' read -ra list_1 <<< \"$1\"\n    IFS=' ' read -ra list_2 <<< \"$2\"\n    list_1=(\"\
    ${list_1[@]}\")\n    list_2=(\"${list_2[@]}\")\n    total=${#list_1[@]}\n    for\
    \ ((i=0; i<total; i++)); do\n        if [[ ${list_1[i]} -lt ${list_2[i]} ]]; then\n\
    \            list_1[i]=${list_1[i]#*\"$\"}\n            list_2[i]=${list_2[i]#*\"\
    $\"}\n        fi\n    done\n    IFS=' ' read -ra total <<< \"$list_1\"\n    echo\
    \ \"${total[@]}\"", "    local list1=\"$1\" list2=\"$2\"\n    IFS=' ' read -ra\
    \ list1 <<< \"$list1\"\n    IFS=' ' read -ra list2 <<< \"$list2\"\n    local len1=${#list1[@]}\n\
    \    local len2=${#list2[@]}\n    local cnt1=0\n    local cnt2=0\n    local maxlen=0\n\
    \    local match1\n    local match2\n    \n    for ((i=0; i<${#list1[@]}; i++));\
    \ do\n        if (( list1[i] > list2[i] )); then\n            cnt1=$(( cnt1 +\
    \ 1 ))\n        else\n            cnt2=$(( cnt2 + 1 ))\n        fi\n        maxlen=$((\
    \ maxlen+1 ))\n    done\n    \n    match1=()\n    if (( cnt1 > maxlen )); then\n\
    \        for ((i=0; i<len2; i++)); do\n            if (( list2[i] > list1[i] ));\
    \ then\n                match1+=(\"${list2[i]}\")\n            fi\n        done\n\
    \    else\n        for ((i=0; i<len1; i++)); do\n            if (( list1[i] >\
    \ list2[i] )); then\n                match2+=(\"${list1[i]}\")\n            fi\n\
    \        done\n    fi\n    \n    echo \"${match1[@]}\"", "    first=\"$1\";\n\
    \    second=\"$2\";\n    echo $(echo \"$first\" | awk '{printf \"%s \", $0}')\n\
    \    echo $(echo \"$second\" | awk '{printf \"%s \", $0}')\n    echo \"$first\"\
    \ | awk '{printf \"%s \", $0}' | sort -u | xargs | wc -l > tmp\n    echo \"$second\"\
    \ | awk '{printf \"%s \", $0}' | sort -u | xargs | wc -l > tmp\n    if [ -s tmp\
    \ ]; then\n        diff tmp /dev/null | grep -q \"^+\" || echo '[]'\n    else\n\
    \        echo '[]'\n    fi", "    \n    list1=$(echo $1 | tr ' ' , | tr ' ' '\
    \ ') \n    list2=$(echo $2 | tr ' ' , | tr ' ' ' ') \n    \n    count=$(echo \"\
    $list1 | cut -d' ' -f 1\" | wc -w)\n    count2=$(echo \"$list2 | cut -d' ' -f\
    \ 1\" | wc -w)\n    \n    if [ $count -gt $count2 ]; then\n        echo \"$list1\"\
    \n    else\n        echo \"$list2\"\n    fi", "    local x y z\n    local list1\
    \ list2\n    x=${1% *}\n    y=${2% *}\n    local count\n    list1=()\n    list2=()\n\
    \    \n    for z in ${1}; do\n        local i=0;\n        count=0\n        for\
    \ j in ${2}; do\n            if [[ $z == $j ]]; then\n                let count=count+1\n\
    \            fi\n        done\n        if [[ count -gt $i ]]; then\n         \
    \   list1+=(\"$z\")\n        else\n            list2+=(\"$z\")\n        fi\n \
    \   done\n    echo \"${list1[@]}\"\n    echo \"${list2[@]}\"", "    local str_1=\"\
    $(echo \"${@:1}\" | tr -d '[:space:]')\"\n    local str_2=\"$(echo \"${@:2}\"\
    \ | tr -d '[:space:]')\"\n    local str_1_arr=( $(echo \"${str_1}\" | tr '[:upper:]'\
    \ '[:lower:]') )\n    local str_2_arr=( $(echo \"${str_2}\" | tr '[:upper:]' '[:lower:]')\
    \ )\n    local len1=\"${#str_1_arr[@]}\"\n    local len2=\"${#str_2_arr[@]}\"\n\
    \n    if [[ len1 -gt len2 ]]; then\n        local diff=\"${len1}\"\n    else\n\
    \        local diff=\"${len2}\"\n    fi\n\n    local arr=()\n    for (( i=0; i<$diff;\
    \ i++ )); do\n        local ele1=${str_1_arr[$((i+1))]}\n        local ele2=${str_2_arr[$((i+1))]}\n\
    \        arr+=($ele1 $ele2)\n    done\n    echo \"${arr[@]}\"", "    local a b\
    \ i\n    a=$1\n    b=$2\n    shift 2\n\n    for (( i=0; i<${#a}; i++ )); do\n\
    \        for (( j=0; j<${#b}; j++ )); do\n            [[ ${a}[i]=${b}[j] ]] ||\
    \ continue\n            (( i++ )) && break\n        done\n    done\n    echo \"\
    $a\"", "  local list_1 list_2 count str list temp_str\n  list_1=\"${1:-}\"\n \
    \ list_2=\"${2:-}\"\n  if [ $(echo \"${list_1}\" | wc -w) -gt $(echo \"${list_2}\"\
    \ | wc -w) ]; then\n    count=\"$(echo \"${list_1}\" | wc -w)\"\n    list=\"$(echo\
    \ \"${list_1}\" | sed -e 's/^ *//' | sed -e 's/ *$//')\"\n  else\n    count=\"\
    $(echo \"${list_2}\" | wc -w)\"\n    list=\"$(echo \"${list_2}\" | sed -e 's/^\
    \ *//' | sed -e 's/ *$//')\"\n  fi\n  if [ \"${count}\" = \"$(echo \"${list}\"\
    \ | wc -w) \" ]; then\n    echo \"${list}\"\n  else\n    temp_str=\"$(echo \"\
    ${list}\" | sed -e 's/^ *//' | sed -e 's/ *$//')\"\n    count=\"$(echo \"${temp_str}\"\
    \ | wc -w)\"\n    list=\"$(echo \"${temp_str}\" | sed -e 's/^ *//' | sed -e 's/\
    \ *$//')\"\n    list=\"$(echo \"${list}\" | sed -e 's/^ *//' | sed -e 's/ *$//')\"\
    \n    while [ $(echo \"${list}\" | wc -w) -lt \"${count}\" ]; do\n      list=\"\
    ${list} \"\n    done\n    echo \"${list}\"\n  fi", "  local i j\n  local list1\
    \ list2\n  # get list1 and list2 from first two arguments\n  list1=(${1// / })\n\
    \  list2=(${2// / })\n  # loop for all elements of list1\n  for (( i = 0; i <\
    \ ${#list1[*]}; i++ )); do\n    # loop for all elements of list2\n    for (( j=0;\
    \ j < ${#list2[*]}; j++ )); do\n      # if list1[i] less than list2[j]\n     \
    \ if [[ \"${list1[i]}\" < \"${list2[j]}\" ]]; then\n        echo \"${list2[j]}\"\
    \n        break\n      fi\n    done\n  done\n  # return list1 if length of list1\
    \ is less than length of list2\n  if [[ ${#list1[*]} -le ${#list2[*]} ]]; then\n\
    \    echo \"${list1[*]}\"\n  fi", "    local string1 string2 \n    local list1\
    \ list2\n    local count result\n\n    list1=($1)\n    list2=($2)\n\n    if ((\
    \ $# != 2 )); then\n        echo \"Usage: $(basename ${0}) list1 list2\"\n   \
    \     return 1\n    fi\n\n    for (( i = 0; i < ${#list1[*]}; i++ )); do\n   \
    \     count=0\n        for (( j=0; j < ${#list2[*]}; j++ )); do\n            string1=${list1[i]}\n\
    \            string2=${list2[j]}\n            [[ \"$string1\" == \"$string2\"\
    \ ]] && count=$(( count+1 ))\n        done\n        [[ ${count} -le ${#list2[*]}\
    \ ]] && result=$result\"'\"$list1[i]\"'\"\n    done\n\n    echo ${result} ", " \
    \ # if number of chars are the same, return the first list\n  if [[ ${#1} -eq\
    \ ${#2} ]] ; then\n    echo $1 | sed 's/ /\\n/g' | sort | uniq -c | sort -n\n\
    \  else\n    echo $1 | sed 's/ /\\n/g' | sort | uniq -c | sort -n | tr -c '[:digit:]'\
    \ ' ' | sed 's/ /\\n/g' | sort | uniq -c | sort -n\n  fi", "    local var1=$1\n\
    \    local var2=$2\n    if [[ -z ${var1} ]]; then\n        echo \"\"\n    elif\
    \ [[ -z ${var2} ]]; then\n        echo ${var1}\n    elif [[ ${#var1} -lt ${#var2}\
    \ ]]; then\n        echo ${var1}\n    elif [[ ${#var1} -gt ${#var2} ]]; then\n\
    \        echo ${var2}\n    else\n        echo $(echo \"${var1}\" | tr ' ' \"\\\
    n\" | grep \"^${var2}\" | wc -l)\n    fi", "\tdeclare -a first\n\tdeclare -a second\n\
    \tdeclare -a third\n\tdeclare -a fourth\n\tdeclare -a fifth\n\tdeclare -a total\n\
    \n\tfirst=$1\n\tsecond=$2\n\tthird=$(echo \"$first $second\" | tr \" \" \"\\n\"\
    )\n\tfourth=$(echo \"$third $fourth\" | tr \" \" \"\\n\")\n\tfifth=$(echo \"$fourth\
    \ $fifth\" | tr \" \" \"\\n\")\n\n\tfor i in \"${fifth[@]}\"; do\n\t\tfound=0\n\
    \t\tj=0\n\t\tk=0 \n\t\tl=0 \n\t\tl1=0 \n\t\tl2=0 \n\t\tl3=0 \n\t\tl4=0 \n\t\t\
    l5=0 \n\t\tl6=0 \n\t\tl7=0 \n\t\tl8=0 \n\t\tl9=0 \n\n\t\tfor j in \"${first[@]}\"\
    ; do\n\t\t\t[ \"$i\" == \"$j\" ] && continue\n\t\t\t[ \"$i\" == \"$j\" ] && break\n\
    \t\t\t\n\t\t\t((found++))\n\t\tdone\n\t\tfor k in \"${second[@]}\"; do\n\t\t\t\
    [ \"$i\" == \"$k\" ] && continue\n\t\t\t[ \"$i\" == \"$k\" ] && break\n\t\t\t\n\
    \t\t\t((found++))\n\t\tdone\n\n\t\t((found==0)) && total+=($i)\n\tdone\n\n\tprintf\
    \ '%s\\n' \"${total[@]}\""]
stop_tokens:
- "\n}"
