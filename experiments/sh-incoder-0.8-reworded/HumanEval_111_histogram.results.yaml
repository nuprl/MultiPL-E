language: sh
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ Initialize a variable to an empty string.\n  local maxcount=0\n  local maxletter=\"\
    \"\n  local counts=\"\"\n  local i\n  # Loop over all the characters and count\
    \ the letter appearances\n  for ((i = 0; i < ${#1}; i++)); do\n    local letter=${1:$i:1}\n\
    \    if [[ $letter != $maxletter ]]; then\n      counts=\"${counts}$letter:$((${counts:$letter:-0}+1))\"\
    \n      maxcount=$((${maxcount:-0}+1))\n      maxletter=$letter\n    fi\n  done\n\
    \  # Print out the count and all the letters in sorted order\n  echo \"$maxcount:$counts\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters counts\n  IFS=\" \" read -r -a letters <<< \"$1\"\n  counts=()\n  for\
    \ letter in \"${letters[@]}\"; do\n    (( counts[letter]++ ))\n  done\n  sort\
    \ -r -n -k 2 <<< \"${!counts[@]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -n histogram=\"$1\"\n    local -n maxval=\"$(echo $histogram | tr '[a-z]'\
    \ '[A-Z]')\"\n    local -n maxkey\n    local -n maxcount\n    local -n key\n \
    \   local -n count\n\n    for key; do\n        count=$(echo $histogram | grep\
    \ -o \"$key\" | wc -l | tr '[a-z]' '[A-Z]')\n        if [[ \"$count\" -gt \"$maxcount\"\
    \ ]]; then\n            maxkey=\"$key\"\n            maxcount=\"$count\"\n   \
    \     fi\n    done\n\n    echo -n \"{\\\"$maxkey\\\":\\\"$maxcount\\\"}\" | sed\
    \ -e \"s/\\\"/\\\"\\\"\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2ey33ues.sh: line 19: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmp2ey33ues.sh: line 20: local: `'': not a valid identifier

    /tmp/tmp2ey33ues.sh: line 26: `a b b a'': not a valid identifier

    sed: -e expression #1, char 6: unterminated `s'' command

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  IFS=\"\
    \ \"\n  local counts=()\n  local letters=\"\"\n  local line=\"$1\"\n  local letter\n\
    \  IFS=$'\\n' read -r -a linearray <<< \"$line\"\n  for (( i=0; i<${#linearray[@]};\
    \ i++ )); do\n    letter=\"${linearray[i]}\"\n    (( counts[$letter]++ ))\n  \
    \  letters+=\"'$letter',\"\n  done\n  local sortedletters=$(echo \"${letters[*]}\"\
    \ | sort -k 2r | sed 's/\",\"//g')\n  printf \"{%s}\" ${sortedletters}\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8gd4zwwe.sh: line 27: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ sorted_string=$(sort -u $1)\n  local histogram=$(printf '%s\\n' \"$sorted_string\"\
    \ | awk '\n    BEGIN {\n      maxfreq = 0\n      maxkey = \"\"\n    }\n    {\n\
    \      count[$1]++\n      if (count[$1] > maxfreq) {\n        maxfreq = count[$1]\n\
    \        maxkey = $1\n      }\n    }\n    END {\n      if (maxfreq == 0 || maxfreq\
    \ == \"\") {\n        exit 0\n      }\n      print \"\\\"\"maxkey\"\\\":\"\n \
    \     print maxfreq\n      print count(maxfreq, maxkey)\n      print count(maxfreq-1)\n\
    \    }\n  ')\n  echo \"$histogram\"\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: a: No such file or directory

    awk: cmd. line:19: error: attempt to use non-function `count'' in function call

    awk: cmd. line:20: error: attempt to use non-function `count'' in function call

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=$(echo \"$1\" | sed \"s/ /, /g\" | sort -u)\n  local max=0\n  local\
    \ maxletters=\"\"\n  local counts=()\n  for letter in $letters; do\n    local\
    \ count=$(echo \"$1\" | awk \"/${letter}/ {++count}\")\n    if [ $max -lt $count\
    \ ]; then\n      max=$count\n      maxletters=\"${letter}\"\n    fi\n    counts[$letter]=$count\n\
    \  done\n  local countstring=$(printf \"%s,\" ${counts[@]})\n  echo -n \"${maxletters},${countstring}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppkizll6j.sh: line 25: [: 0: unary operator expected

    /tmp/tmppkizll6j.sh: line 29: a,: syntax error: operand expected (error token
    is ",")

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ histo\n  histo=($(echo \"$1\" | tr \" \" \"\\n\" | sort | uniq -c | sed 's/^\
    \ *//' | sort -nr | sed 's/^ *//'))\n  echo '{' \\\n    $(for item in \"${histo[@]}\"\
    ; do \\\n           echo \"\\\"$item\\\": \\\"$((item))\\\",\"; done) \\\n  '}'\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ str\n  local count\n  IFS=\" \" read -ra arr <<< \"$1\"\n  count=0\n  mapfile\
    \ -t str < <(\n    local max=0\n    for s in \"${arr[@]}\"; do\n      [[ -z \"\
    $s\" ]] && continue\n      local count=$(( ${#str[@]} + 1 ))\n      if (( count\
    \ > max )); then\n        max=count\n        (( str = s))\n      fi\n    done\n\
    \    echo -n \"$str\"\n  )\n  echo -n \":\"\n  echo -n \"${arr[$(( ${#str[@]}\
    \ - 1 ))]}\"\n  echo -n \":\"\n  echo -n \"${arr[0]}\"\n  echo \"${arr[@]:1:${#str[@]}}\"\
    \ | sed 's/:/ /g'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=\"${1}\" counts=\"\"\n\n    # Remove empty and duplicates\n  \
    \  letters=\"$(echo \"$letters\" | sed -e 's/ /\" \" -e d' | sort -u)\" || return\n\
    \n    # Count occurrences\n    for letter in \"$letters\"; do\n        count=$(echo\
    \ \"$letters\" | grep -o \"^$letter\\$\" | wc -l)\n        if (( $count > 0 ));\
    \ then\n            counts=\"$counts,\\\"$letter\\\":\\\"$count\\\"\"\n      \
    \  fi\n    done\n\n    # Return result\n    echo \"$counts\" | sed -e 's/\"$//g'\
    \ | sed -e 's/,$//g'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 12: unterminated `s'' command

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=$1\n  local histogram={}\n  local word=\"\"\n  local count=-1\n  local\
    \ letter\n  while IFS= read -r letter\n  do\n    if [ -z \"$word\" ]; then\n \
    \     word=\"\\\"$letter\\\"\"\n    else\n      word=\"${word},\\\"$letter\\\"\
    \"\n    fi\n    count=$(( (count+1) ))\n  done <<< \"$letters\"\n  echo \"${word}\"\
    :\"${count}\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpharwev14.sh: line 49: unexpected EOF while looking for matching
    `"''

    /tmp/tmpharwev14.sh: line 53: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=\"$1\"\n    local count=\"$2\"\n    IFS=' ' read -ra data <<<\
    \ \"$count\"\n\n    local letter\n    local countString\n    local maxCount\n\n\
    \    if [[ \"$letters\" == \"\" ]]; then\n        echo \"{}\"\n        return\n\
    \    fi\n\n    for letter in \"${data[@]}\"; do\n        countString=\"$(echo\
    \ \"$count\" | cut -d' ' -f1)\"\n        if [[ \"$countString\" == \"1\" ]]; then\n\
    \            echo \"$letter\":\"$letter\n        elif [[ \"$countString\" == \"\
    $maxCount\" ]]; then\n            echo \"$letter\":\"$letter\n        else\n \
    \           maxCount=\"$countString\"\n            echo \"$letter\":\"$letter\n\
    \        fi\n    done\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2xziibjf.sh: line 58: unexpected EOF while looking for matching
    `"''

    /tmp/tmp2xziibjf.sh: line 62: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: -1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local histology_string=$1\n\n    local histology_array=()\n    local histology_hash=()\n\
    \n    while [ -n \"$histology_string\" ]; do\n        local letter=$( echo $histology_string\
    \ | awk '{print $1}' )\n        local count=$( echo $histology_string | awk '{print\
    \ $2}' )\n        histology_hash[$letter]=\"$count\"\n        histology_array+=(\
    \ \"$letter\" )\n        histology_string=${histology_string#* }\n    done\n\n\
    \    for i in \"${histology_array[@]}\"; do\n        histology_hash[$i]=\"${histology_hash[$i]#*\
    \ }\"\n    done\n\n    for i in \"${!histology_hash[@]}\"; do\n        echo \"\
    \\\"$i\\\"=\\\"${histology_hash[$i]}\\\"\"\n    done\n\n}\n\ncandidate() {\n \
    \   histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=7 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=18 encoding='utf-8'>
  timestamp: 1660057878
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -a arr\n    local -A count\n\n    arr=( ${1//[^[:alpha:]]/ } )\n    count=(\
    \ $( IFS=' ' echo \"$arr\" | sort -u | awk '{print $2, $1}' ) )\n\n    for k in\
    \ \"${!arr[@]}\"; do\n        arr[$k]=\"${arr[$k]} ${count[$k]}$(( ${arr[$k]}\
    \ || 1 ))\"\n    done\n\n    echo \"${arr[*]}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp68wl_dpd.sh: line 23: count: $( IFS='' '' echo "$arr" | sort -u
    | awk ''{print $2, $1}'' ): must use subscript when assigning associative array

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ STRING=\"${1}\"\n  local COUNTERS=\"{}\"\n  local TOTAL_OCCURENCES\n  local\
    \ TOTAL_LETTERS\n  local LETTER\n  local REPETITION\n  local MAXREPETITION\n \
    \ local LETTERS\n  local TOTAL_LETTERS\n  local OUTPUT\n  read -r -a LETTERS <<<\
    \ \"$STRING\"\n  if [ \"${#LETTERS[@]}\" -eq 0 ]\n  then\n    return 0\n  fi\n\
    \  TOTAL_LETTERS=$(printf '%s\\n' \"${LETTERS[@]}\" | wc -w)\n  TOTAL_OCCURENCES=0\n\
    \  for LETTER in \"${LETTERS[@]}\"; do\n    COUNTERS[$LETTER]=$(echo \"${STRING}\"\
    \ | awk \"\\$1 == \\\"${LETTER}\\\" {print \\$2}\")\n    TOTAL_OCCURENCES=$((${TOTAL_OCCURENCES}\
    \ + 1))\n  done\n  TOTAL_LETTERS=$((${TOTAL_LETTERS} - 1))\n  MAXREPETITION=$(printf\
    \ '%s\\n' \"${COUNTERS[@]}\" | sort | uniq -c | sort -nr | head -n1 | awk '{print\
    \ \\$2}')\n  REPETITION=$(printf '%s\\n' \"${COUNTERS[@]}\" | sort | uniq -c |\
    \ sort -nr | head -n1 | awk '{print \\$2}')\n  if [ \"${#COUNTERS[@]}\" -eq 0\
    \ ]\n  then\n    return 0\n  fi\n  if [ \"${#MAXREPETITION}\" -eq 0 ]\n  then\n\
    \    return 0\n  fi\n  OUTPUT=\"{\"\n  while [ \"${#REPETITION}\" -gt 0 ]\n  do\n\
    \    OUTPUT=$(echo \"${OUTPUT}\\\"${REPETITION}\\\":\\\"${MAXREPETITION}\\\"\"\
    \ )\n    COUNT=$(echo \"${REPETITION}\" | awk '{print \\$1}')\n    COUNT=$((${COUNT}\
    \ + 1))\n    TOTAL_OCCURENCES=$((${TOTAL_OCCURENCES} - 1))\n    TOTAL_LETTERS=$((${TOTAL_LETTERS}\
    \ - 1))\n    MAXREPETITION=$(printf '%s\\n' \"${COUNTERS[@]}\" | sort | uniq -c\
    \ | sort -nr | head \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1jfva0ed.sh: line 59: unexpected EOF while looking for matching
    `)''

    /tmp/tmp1jfva0ed.sh: line 79: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters counts\n  letters=$(cat <<EOF\n$*\nEOF\n)\n  counts=$(sort -g <<EOF\n\
    $letters\nEOF\n)\n  echo ${counts:0:${#counts}-1}\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  declare\
    \ -A count\n  local -n letter=\"${1:-}\"\n  local -n maxcount=\"${2:-0}\"\n  local\
    \ -n maxkey=\"${3:-\"a\"}\"\n  local -n maxvalue=\"${4:-\"0\"}\"\n  local -n maxletter=\"\
    ${5:-\"a\"}\"\n  local -n maxkeycount=\"${6:-0}\"\n  local -n maxkeyvalue=\"${7:-0}\"\
    \n  local -n maxkeyletter=\"${8:-\"a\"}\"\n  local -n maxvaluecount=\"${9:-0}\"\
    \n  local -n maxvaluevalue=\"${10:-0}\"\n  local -n maxvalueletter=\"${11:-\"\
    a\"}\"\n  local -n maxkeycount=\"${12:-0}\"\n  local -n maxkeyvalue=\"${13:-0}\"\
    \n  local -n maxkeyletter=\"${14:-\"a\"}\"\n  local -n maxvaluecount=\"${15:-0}\"\
    \n  local -n maxvaluevalue=\"${16:-0}\"\n  local -n maxvalueletter=\"${17:-\"\
    a\"}\"\n  local -n maxkeycount=\"${18:-0}\"\n  local -n maxkeyvalue=\"${19:-0}\"\
    \n  local -n maxkeyletter=\"${20:-\"a\"}\"\n  local -n maxvaluecount=\"${21:-0}\"\
    \n  local -n maxvaluevalue=\"${22:-0}\"\n  local -n maxvalueletter=\"${23:-\"\
    a\"}\"\n\n  local -n value\n  local -n letter\n\n  for letter in \"${letter//[[:space:]]/}\"\
    ; do\n    (( count[letter]++))\n  done\n\n  if (( count[maxkey] != maxkeycount\
    \ )); then\n    maxkeycount=\"${count[maxkey]}\"\n    maxkey=\"${maxkey%?}\"\n\
    \    maxkeyvalue=\"${count[maxkey]}${count[maxkey]}\"\n  else\n    maxkey=\"${maxkey%?}\"\
    \n    maxkeycount=\"${count[maxkey]}\"\n    maxkeyvalue=\"${count[maxkey]}\"\n\
    \  fi\n\n  if (( count[maxvalue] != maxvaluecount )); then\n    maxvaluecount=\"\
    ${count[maxvalue]}\"\n    maxvalue=\"${maxvalue%?}\"\n    maxvaluevalue=\"${count[maxvalue]}${count[maxvalue]}\"\
    \n  else\n    maxvalue=\"${maxvalue%?}\"\n    maxvaluecount=\"${count[maxvalue]}\"\
    \n    maxvaluevalue=\"${count[maxvalue]}\"\n  fi\n\n  if (( count[maxkey] != maxkeycount\
    \ \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp15l9qawt.sh: line 71: unexpected EOF while looking for matching
    `)''

    /tmp/tmp15l9qawt.sh: line 91: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  mapfile\
    \ -t arr < <(echo \"$1\")\n  declare -A count\n  for i in \"${arr[@]}\"; do\n\
    \    (( count[$i]++ ))\n  done\n  keys=\"${!count[@]}\"\n  echo \"{\\\"${keys[0]}\\\
    \":\\\"${count[keys[0]]}\\\"\"}\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ maxlen=0\n  local lines=$( echo $1 | sed \"s/ /, /g\" )\n  local counts=()\n\
    \  local maxcount=-1\n  local maxkey=\"\"\n\n  for key in $lines; do\n    local\
    \ count=\"1\"\n    lines=( $lines | grep -w $key )\n\n    for (( i=${#lines[@]}-1\
    \ ; i>=0 ; i-- )); do\n      count=$(echo $count | cut -f1 -d \"+\")\n    done\n\
    \n    if [[ $count -gt $maxcount ]]; then\n      maxcount=$count\n      maxkey=$key\n\
    \    fi\n  done\n\n  if [[ $maxcount -gt 0 ]]; then\n    counts=( ${counts[@]%?}\
    \ )\n    for (( i=${#counts[@]}-1 ; i>=0 ; i-- )); do\n      counts[i]=$(echo\
    \ ${counts[i]} | cut -f1 -d \"+\")\n    done\n    counts=( \"${counts[@]}\" )\n\
    \    counts=( \"${counts[@]//,/$maxkey}\" )\n  fi\n  echo ${counts[@]}\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa8unhew7.sh: line 27: syntax error near unexpected token `|''

    /tmp/tmpa8unhew7.sh: line 27: `    lines=( $lines | grep -w $key )''

    /tmp/tmpa8unhew7.sh: line 37: syntax error near unexpected token `done''

    /tmp/tmpa8unhew7.sh: line 37: `  done''

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -n list=${1:-}\n  local -n letters=\"\"\n  local -n counts=\"\"\n\n  if [[ ${#list}\
    \ -eq 0 ]]; then\n    echo \"Input is empty or blank\"\n    return 1\n  fi\n\n\
    \  for letter in ${list}; do\n    counts=$(($counts + 1))\n  done\n\n  for letter\
    \ in ${list}; do\n    letters=\"${letters},$letter\"\n  done\n\n  echo ${letters}\n\
    \  echo ${counts}\n\n  local max=\"\"\n  local max_count=\"\"\n  for letter in\
    \ ${letters}; do\n    local count=${counts}\n    if [[ \"${letter}\" == \"${max}\"\
    \ ]]; then\n      count=${count}\n    else\n      count=\"${count}\"\n    fi\n\
    \    if [[ \"${count}\" -gt \"${max_count}\" ]]; then\n      max_count=\"${count}\"\
    \n      max=\"${letter}\"\n    fi\n  done\n\n  echo ${max}\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmwxxs5ok.sh: line 19: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmpmwxxs5ok.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpmwxxs5ok.sh: line 21: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local lc maxcount=0\n    local key\n    local count=0\n    local list\n    local\
    \ letter\n\n    list=$1\n\n    # count the occurrence of each letter\n    for\
    \ lc in ${list//[[:space:]]/ }; do\n        key=$(echo \"${list}\" | awk '{print\
    \ tolower($0)}')\n        count=$(echo \"${list}\" | awk \"index($0, \\\"${lc}\\\
    \") != -1\")\n\n        if [ \"${key}\" != \"${lc}\" ]; then\n            # skip\
    \ non-letter characters\n            continue\n        fi\n\n        if [ ! -z\
    \ \"${count}\" ]; then\n            if [ ${count} -gt ${maxcount} ]; then\n  \
    \              maxcount=${count}\n                key=${lc}\n            fi\n\
    \        fi\n    done\n\n    # return the result\n    echo \"${key}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: index(/tmp/tmp_h20sskd.sh, "a") != -1

    awk: cmd. line:1:                       ^ syntax error

    awk: cmd. line:1: index(/tmp/tmp_h20sskd.sh, "a") != -1

    awk: cmd. line:1:                               ^ 3 is invalid as number of arguments
    for index

    awk: cmd. line:1: index(/tmp/tmp_h20sskd.sh, "b") != -1

    awk: cmd. line:1:                       ^ syntax error

    awk: cmd. line:1: index(/tmp/tmp_h20sskd.sh, "b") != -1

    awk: cmd. line:1:                               ^ 3 is invalid as number of arguments
    for index

    awk: cmd. line:1: index(/tmp/tmp_h20sskd.sh, "b") != -1

    awk: cmd. line:1:                       ^ syntax error

    awk: cmd. line:1: index(/tmp/tmp_h20sskd.sh, "b") != -1

    awk: cmd. line:1:                               ^ 3 is invalid as number of arguments
    for index

    awk: cmd. line:1: index(/tmp/tmp_h20sskd.sh, "a") != -1

    awk: cmd. line:1:                       ^ syntax error

    awk: cmd. line:1: index(/tmp/tmp_h20sskd.sh, "a") != -1

    awk: cmd. line:1:                               ^ 3 is invalid as number of arguments
    for index

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ \"${#1}\" = 0 ]; then return 1; fi\n  local letters=$(tr '[:lower:]' '[:upper:]'\
    \ <<< \"${1:0:1}\")\n  local counts=\"\"\n  local count\n  for letter in ${letters};\
    \ do\n    count=\"$(grep -sq \"^${letter}:\" \"${wordlist}\")\"\n    count=\"\
    $(echo \"${count}\" | sed 's/[^\"]//g' | cut -d ':' -f 2)\"\n    counts=\"${counts}\\\
    \"${letter}:${count}\\\"\"\n  done\n  echo \"${counts}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n\tlocal\
    \ string=$1\n\t# We split on spaces to avoid false matches for multiple spaces\n\
    \t# e.g. \"a b c\" would result in \"a b b c\"\n\tlocal split=($string)\n\tlocal\
    \ max=0\n\tlocal maxkey=\"$(split[0])\"\n\tlocal count=1\n\tlocal items=\"\"\n\
    \n\tfor key in \"${split[@]}\"; do\n\t\titems=\"${items} \\\"$key\\\":\\\"$((count+1))\\\
    \"\"\n\t\tif [[ $key == \"$maxkey\" ]]; then\n\t\t\tcount=$((count+1))\n\t\t\t\
    continue\n\t\tfi\n\t\tif [[ $count -gt $max ]]; then\n\t\t\tmax=$count\n\t\t\t\
    maxkey=$key\n\t\tfi\n\t\tcount=1\n\tdone\n\n\techo \"$maxkey \\\"$max\\\"\"\n\t\
    echo \"$items\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa_x_9yo1.sh: line 24: split[0]: command not found

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=\"$1\"\n    local count=\"1\"\n    local max=\"1\"\n    local\
    \ maxletter=\"a\"\n    for letter in \"${letters// }\"; do\n        [[ \"${count}\"\
    \ == \"${max}\" ]] && maxletter=\"${letter}\"\n        (( count++ ))\n    done\n\
    \    local counts\n    if [ \"${maxletter}\" == \"a\" ]; then\n        counts=$(echo\
    \ \"${letters}\" | sed \"s/ a/ /g\" | sort | uniq -c | sort -n -r | head -n 1)\n\
    \    else\n        counts=$(echo \"${letters}\" | sed \"s/ ${maxletter}/ /g\"\
    \ | sort | uniq -c | sort -n -r | head -n 1)\n    fi\n    printf \"{'%q': '%q',\
    \ '\"maxletter\"': '%q'}\\n\" \"${letters}\" \"${counts}\" \"${max}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -n wordCounts=$1 # word counts dictionary\n    # Split $1 into words,\
    \ count the occurrences of each word and construct a\n    # histogram.\n    local\
    \ words=( $1 )\n    # Sort the words by descending number of occurrences.\n  \
    \  local sortedWords=( $(sort -k 2r <<<\"${words[*]}\") )\n    # Keep track of\
    \ the maximum number of words. Also keep track of the number\n    # of occurrences\
    \ of every word.\n    local maxWords=$(\n        local maxWords=0\n        for\
    \ word in \"${sortedWords[@]}\"; do\n            (( maxWords = $(( maxWords >\
    \ wordCounts[\"$word\"] )) )) && {\n                wordCounts[\"$word\"]=1\n\
    \            }\n        done\n        echo $maxWords\n    )\n    # Construct the\
    \ histogram.\n    local histogram=''\n    for word in \"${sortedWords[@]}\"; do\n\
    \        if (( wordCounts[\"$word\"] > maxWords )) ; then\n            # Keep\
    \ all occurrences of $word and decrease the count of $word\n            # for\
    \ each other word with the same occurrence.\n            local count=$wordCounts[\"\
    $word\"]\n            for otherWord in \"${sortedWords[@]}\"; do\n           \
    \     if (( wordCounts[\"$otherWord\"] > wordCounts[\"$word\"] )) ; then\n   \
    \                 wordCounts[\"$otherWord\"]=$(( wordCounts[\"$otherWord\"] -\
    \ count ))\n                fi\n            done\n        fi\n        histogram+=\"\
    $wordCounts['$word']\"\n        histogram+=\",'$word'\"\n    done\n    # Remove\
    \ the last comma and space character.\n    echo -n ${histogram%?}\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvcttc4nn.sh: line 19: local: `a b b a'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  mapfile\
    \ -t lowercase < <(echo $1 | tr ' ' '\\n' | sort -u)\n  mapfile -t counts < <(echo\
    \ $(echo $1 | tr ' ' '\\n' | sort -u | tr ' ' '\\n' | wc -w) $1 | tr ' ' '\\n'\
    \ | sort -u)\n  declare -A count\n  for i in ${lowercase[@]}; do\n    (( count[$i]++\
    \ ))\n  done\n\n  local max=0\n  local maxitem=''\n  for i in ${lowercase[@]};\
    \ do\n    (( count[$i] > max )) && max=${count[$i]}\n    (( count[$i] > max ))\
    \ && maxitem=\"$i\"\n  done\n\n  echo \"${maxitem},\\\"${max}\\\"\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"$1\"\n  # Make sure there are at least 2 letters to work with\n  if\
    \ [[ ${#letters} = 0 ]] || [[ ${#letters} -eq 1 ]]; then\n    echo \"Nothing to\
    \ do: ${letters}\" >&2\n    return 1\n  fi\n  local counts=\"$(echo \"${letters}\"\
    \ | cut -d ' ' -f 1 | sort | uniq -c | sort -nr -k 1,1 | cut -d ' ' -f 2- | sed\
    \ -e 's/^ *//' -e 's/ *$//')\"\n  # No occurrences\n  if [[ ${#counts} = 0 ]];\
    \ then\n    echo \"No occurrences of ${letters}\" >&2\n    return 0\n  fi\n  local\
    \ csv=\"\"\n  local count\n  local letter\n  # For each letter with its count,\
    \ get the letter with the most occurrences\n  for letter in \"${counts[@]}\";\
    \ do\n    count=$(echo \"${letter}\" | cut -d ' ' -f 1)\n    if [[ ${#count} -gt\
    \ 1 ]]; then\n      csv=\"${csv},${letter}\"\n      echo \"${count},${letter}\"\
    \ | sed -e 's/^ *//' -e 's/ *$//' | sed 's/,/\" \"/g'\n    fi\n  done\n  if [[\
    \ ${#csv} -gt 0 ]]; then\n    csv=\"${csv}\"\n    echo \"${csv}\"\n  fi\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]\n  then\n    echo \"No parameters given\" >&2\n    exit 1\n  fi\n\
    \n  local max=0\n  local letter\n  local count=1\n  local data\n  local key\n\n\
    \  data=$( echo \"$1\" | tr ' ' '\\n' )\n\n  for key in $( echo \"$data\" | sort\
    \ | uniq -d ); do\n    letter=\"${data::$key}\"\n    if [ \"${max}\" -gt \"${count}\"\
    \ ]\n    then\n      max=${count}\n      echo \"${key}=${letter}\"\n    fi\n \
    \   count=${count}+1\n  done\n\n  if [ \"${max}\" -gt 1 ]\n  then\n    echo \"\
    ${key}=${max}\"\n  fi\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5vxqnwqb.sh: line 35: [: 1+1: integer expression expected

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ LAST_LETTER=\"\"\n  local COUNTS=()\n  local LINE\n  local COUNT\n  local LETTER\n\
    \  local COUNT\n\n  for LINE in \"${1}\"; do\n    # Split into words using the\
    \ shell-builtin \"read\" command.\n    # The default IFS value is \"space tab\"\
    , which splits on space and tab.\n    # It also splits on quotes and backslashes.\n\
    \    read -r -a WORDS <<< \"$LINE\"\n\n    # Loop over the words.\n    for LETTER\
    \ in \"${WORDS[@]}\"; do\n      # If the current letter doesn't exist in our histogram,\
    \ add it.\n      if ! [[ \"$LAST_LETTER\" == \"$LETTER\" ]];then\n        COUNTS=(\"\
    ${COUNTS[@]}\" \"$LETTER\")\n        COUNTS=(\"${COUNTS[@]}\" 1)\n      else\n\
    \        # If we have the latest letter, check if it's already a duplicate\n \
    \       # and increment the count.\n        COUNT=`${HITHIT} $LETTER`\n      \
    \  if [[ \"$COUNT\" != \"\" ]]; then\n          COUNT=`expr $COUNT + 1`\n    \
    \    else\n          # If the count is empty, we add the letter to the histogram,\n\
    \          # but give it a value of 1.\n          COUNT=`expr 1 + $COUNTS[$((${#COUNTS[@]}-1))]`\n\
    \        fi\n\n        # Add the new letter with the new count to the histogram.\n\
    \        COUNTS=(\"${COUNTS[@]}\" \"$COUNT\")\n      fi\n\n      # Remember the\
    \ letter for the next loop\n      LAST_LETTER=\"$LETTER\"\n    done\n\n    # Remove\
    \ the last element from the array\n    COUNTS=(\"${COUNTS[@]:0:${#COUNTS[@]}}\"\
    )\n  done\n\n  # Return the histogram as CSV\n  IFS=$'\\n'\n  echo \"${COUNTS[@]}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk7hf11cj.sh: line 41: b: command not found

    expr: non-integer argument

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local line\n    local lowers\n    local counts\n    local max\n\n    lowers=$(echo\
    \ $1 | tr '[:upper:]' '[:lower:]')\n\n    counts=$(echo \"$lowers\" | tr ' ' '\\\
    n' | sort | uniq -c | sort -n -k 2n)\n\n    if [ ${#counts[@]} -eq 0 ]; then\n\
    \        echo \"{}\";\n    else\n        max=$(echo \"$counts\" | awk '$1 > max\
    \ {max=$1} END {print max}' | tr '\\n' ' ')\n        echo \"{ \\\"${counts[@]}\\\
    \": \\\"${max}\\\" }\";\n    fi\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ max=\"$(echo \"$1\" | tr '[:upper:]' '[:lower:]' | sort | uniq | wc -l)\"\n\
    \  local count=\"$(echo \"$1\" | tr '[:upper:]' '[:lower:]' | sort | uniq | awk\
    \ '{print $2}')\"\n  local hash=\"$(echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ sort | uniq | awk '{for(i=1; i<=NF; i++) hash[$i]++} END {for(key in hash) print\
    \ key, hash[key]}')\"\n  IFS=$'\\n' read -ra array <<< \"$hash\"\n  IFS=$'\\n'\
    \ read -ra keys <<< \"$hash\"\n  result=\"\"\n  for k in \"${keys[@]}\"; do\n\
    \    if [ ${array[$k]} -gt ${max} ]; then\n      result=\"${result}$k\"\n    \
    \  result=\"${result},${array[$k]}\"\n    fi\n  done\n  echo ${result%,}\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpslbr_wtc.sh: line 26: a 2: syntax error in expression (error token
    is "2")

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -n l=${1:-\"A\"};\n  local -a c=();\n  local -a result=();\n  local -a tmp=();\n\
    \n  for ((i = 0; i < ${#l}; i++)); do\n    local letter=\"${l:i:1}\";\n    let\
    \ c[\"${letter}\"]++\n  done\n\n  while ((${#c[@]})); do\n    local -n key=${#c[@]};\n\
    \    local count=\"${c[${key}]}\";\n    result+=(\"${key}=\\\"${count}\\\"\");\n\
    \    ((c[\"${key}\"] -= count));\n  done\n\n  echo \"${result[*]}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp56fg_ju4.sh: line 19: local: `a b b a'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"${1}\"\n  local letters_count\n  local letter\n  local letter count\n\
    \  local result\n\n  letters_count=()\n  for letter in \"${letters}\"; do\n  \
    \  count=\"1\"\n    for result in \"${letters_count[@]}\"; do\n      if [[ \"\
    $result\" == \"$letter\" ]] && [ \"$count\" -gt \"$result\" ]; then\n        count=\"\
    $result\"\n      fi\n    done\n    letters_count+=( \"$count\" )\n  done\n  echo\
    \ -n \"$letters\"\n  for result in \"${letters_count[@]}\"; do\n    if [ \"$result\"\
    \ -gt \"2\" ]; then\n      echo \"$result\"\n      break\n    fi\n  done\n  echo\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local lowercase str\n    lowercase=\"${1}\"\n    IFS=\"[a-z]\" read -ra str\
    \ \"${lowercase}\"\n    declare -A count\n    for ((i = 0; i < ${#str[@]}; i++));\
    \ do\n        case \"${str[i]}\" in\n        *\" \" ) count[\"${str[i]}\"]=1;;\n\
    \        esac\n    done\n    printf '%s\\n' \"${!count[@]}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe9dq43qr.sh: line 21: read: `a b b a'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -n arr=\n    local -n list=\n    local -n map=\n    local count maxcount\
    \ arrlist\n    local str=\"${1//[,\\n]/ }\"\n    map=()\n    list=()\n    arr=$(echo\
    \ \"$str\" | tr ' ' '\\n' | sort -u)\n    arrlist=( $(echo \"${arr}\" | tr ' '\
    \ '\\n' | sort -n) )\n    count=0\n    maxcount=0\n    for letter in \"${arrlist[@]}\"\
    ; do\n        [[ -n \"${map[$letter]}\" ]] && continue\n        count=$(echo \"\
    ${arr}\" | grep -n \"$letter\" | head -1)\n        [[ -z \"$count\" ]] && continue\n\
    \        count=$(($count + 1))\n        [[ \"$count\" -gt \"$maxcount\" ]] &&\
    \ maxcount=$count\n        map[\"$letter\"]=\"\\\"$count\\\"\"\n    done\n   \
    \ echo \"${map[*]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoorqtoh_.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpoorqtoh_.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpoorqtoh_.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpoorqtoh_.sh: line 34: 1:a + 1: syntax error in expression (error token
    is ":a + 1")

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -n histo=$1\n  local -a histo\n  local -a histocount\n  histo=()\n  histocount=()\n\
    \  local -a histokeys\n  local -i histocountmax\n  for k in $histo\n  do\n   \
    \ histokeys+=( $k )\n    histocount+=( 1 )\n  done\n  histocountmax=${#histokeys[*]}\n\
    \  for k in $histo\n  do\n    histocount[$k]=$(( histocount[$k]|+ ))\n  done\n\
    \  for k in $histokeys\n  do\n    local -n histocountkey=${histocount[$k]}\n \
    \   if [[ ${histocount[$k]} > ${histocountmax} ]]\n    then\n      histocountmax=${histocount[$k]}\n\
    \    fi\n  done\n  local -n histomax=${histocountmax}\n  local -n histomin=${#histokeys[*]}\n\
    \  local -n histominkey=${histokeys[$histomin]}\n  for k in $histokeys\n  do\n\
    \    local -n histomaxkey=${histokeys[$(($histomin-$k))]}\n    local -n histominkey=${histokeys[$(($histomin-$k+1))]}\n\
    \    local -n histominkey=${histokeys[$(($histomin-$k+2))]}\n    local -n histomaxkey=${histokeys[$(($histomin-$k+3))]}\n\
    \    local -n histomaxkey=${histokeys[$(($histomin-$k+4))]}\n    local -n histomaxkey=${histokeys[$(($histomin-$k+5))]}\n\
    \    local -n histomaxkey=${histokeys[$(($histomin-$k+6))]}\n    local -n histomaxkey=${histokeys[$(($histomin-$k+7))]}\n\
    \    local -n histomaxkey=${histokeys[$(($histomin-$k+8))]}\n    local -n histomaxkey=${histokeys[$(($histomin-$k+9))]}\n\
    \    local -n histomaxkey=${histokeys[$(($histomin-$k+10))]}\n    local -n histomaxkey=${histokeys[$(($histomin-$k+11))]}\n\
    \    local -n histomaxkey=${histokeys[$(($histomin-$k+12))]}\n    local -n histomaxkey=${histokeys[$(($\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzs0oe89f.sh: line 62: unexpected EOF while looking for matching
    `)''

    /tmp/tmpzs0oe89f.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ string=\"$1\"\n  local counts\n  counts=$( sort -n -k 1,1 -k 2,2n -k 3,3 <<<\
    \ \"$string\" |\n    awk '{if(NR>1&&$1==$3&&$2==$5&&$3==$7){c[$1]++}}END{for(k\
    \ in c){print k\"-\"c[k]}}' )\n  echo \"${counts}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ First count and save the occurrences of each letter\n  local letters counts\n\
    \  letters=\"$1\"\n  counts=()\n\n  for letter in \"${letters//[[:space:]]/}\"\
    ; do\n    local letterCount=\"${counts[$letter]}\" || letterCount=\"1\"\n    counts[$letter]=\"\
    $(( letterCount + 1 ))\"\n  done\n\n  # Sort letters by occurrences and return\
    \ their corresponding counts\n  local sortedLetters\n  sortedLetters=()\n  for\
    \ letter in \"${!counts[@]}\"; do\n    sortedLetters+=(\"${letters[$letter]}\"\
    \ \"${counts[$letter]}\")\n  done\n  sortedLetters=(\"${sortedLetters[@]:0:${#sortedLetters[@]}\
    \ -1}\")\n\n  # Return the letter with the highest occurrence\n  local highestCountLetter\n\
    \  highestCountLetter=${sortedLetters[0]}\n  local highestCountCount\n  highestCountCount=\"\
    ${counts[$highestCountLetter]}\"\n\n  # Return the letters whose occurrences are\
    \ the highest for each letter\n  for letter in \"${sortedLetters[@]:1}\"; do\n\
    \    local letterCount=\"${counts[$letter]}\"\n    if (( letterCount > highestCountCount\
    \ )); then\n      highestCountLetter=$letter\n      highestCountCount=$letterCount\n\
    \    fi\n  done\n\n  # Return the CSV\n  local csv\n  csv=\"\\\"\" ${highestCountLetter}\
    \ \"\\\",\\\"\" $highestCountCount \"\\\",\"\n\n  for letter in \"${sortedLetters[@]:1}\"\
    ; do\n    csv=\"${csv}\\\"\" $letter \"\\\",\\\"\" \"${counts[$letter]}\" \"\\\
    \",\"\n  done\n\n  csv=\"${csv%,}\"\n  csv=\"${csv#\\\"}\"\n  csv=\"${csv%,}\"\
    \n\n  echo \"$csv\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_xi92gu2.sh: line 41: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local input=${1:-}\n    local output=\"{}\"\n    local count=0\n    local item\n\
    \    for item in $input; do\n        ((count++))\n    done\n    local max=0\n\
    \    local maxitem\n    for item in $input; do\n        if (( $(echo $output |\
    \ jq '.['$item'\"] |length') > max )); then\n            max=$(echo $output |\
    \ jq '.['$item'\"] |length')\n            maxitem=$item\n        fi\n    done\n\
    \    echo ${maxitem}:${max}\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpolhvvb53.sh: line 29: jq: command not found

    /tmp/tmpolhvvb53.sh: line 29: ((: > max : syntax error: operand expected (error
    token is "> max ")

    /tmp/tmpolhvvb53.sh: line 29: jq: command not found

    /tmp/tmpolhvvb53.sh: line 29: ((: > max : syntax error: operand expected (error
    token is "> max ")

    /tmp/tmpolhvvb53.sh: line 29: jq: command not found

    /tmp/tmpolhvvb53.sh: line 29: ((: > max : syntax error: operand expected (error
    token is "> max ")

    /tmp/tmpolhvvb53.sh: line 29: jq: command not found

    /tmp/tmpolhvvb53.sh: line 29: ((: > max : syntax error: operand expected (error
    token is "> max ")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -r letters=\"${1}\"\n  local -r histogram=\"{}\"\n\n  local -a count\n  count=()\n\
    \  for letter in \"${letters}\"; do\n    local count=\"${count[@]}\"\n    [[ -z\
    \ \"${count}\" ]] && count=\"1\"\n    local letter=\"${letter}\"\n    [[ -z \"\
    ${letter}\" ]] && continue\n    [[ \"${letter}\" == \"-\" ]] && continue\n   \
    \ (( count[$letter]++ ))\n  done\n\n  echo \"${letters}\" > /tmp/histogram.csv\n\
    \  for letter in \"${!count[@]}\"; do\n    echo -n \"${letter},${count[$letter]},\"\
    \n  done\n  echo \"${letters}\" >> /tmp/histogram.csv\n\n  local -a key\n  for\
    \ key in \"${!count[@]}\"; do\n    local letter=\"${key}\"\n    [[ \"${key}\"\
    \ == \"-\" ]] && continue\n    histogram[$letter]=\"${histogram[$letter]} ${count[$letter]}\"\
    \n  done\n\n  rm /tmp/histogram.csv\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9j8z7kq_.sh: line 30: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ words=\"${1}\"\n  local -n histo=\"$(\n    echo {${words//[^a-zA-Z]}}; echo\
    \ \"$#\" | sort -rn\n  )\" #shellcheck disable=SC2086\n  local -n count=\"$(\n\
    \    echo {${histo[@]}}; echo \"$#\" | sort -rn\n  )\" #shellcheck disable=SC2086\n\
    \  local -n max=\"$(\n    echo {${count[@]}}; echo \"$#\" | sort -rn\n  )\" #shellcheck\
    \ disable=SC2086\n  local -n min=\"$(\n    echo {${count[@]}}; echo \"$#\" | sort\
    \ -rn\n  )\" #shellcheck disable=SC2086\n\n  local -n result=\"$(\n    echo {${max[@]}};\
    \ echo \"$#\" | sort -rn\n  )\" #shellcheck disable=SC2086\n  if [[ -n \"${max[@]:-}\"\
    \ ]]; then\n    result=\"${result[@]}\"\n  else\n    result=''\n  fi\n  if [[\
    \ -n \"${min[@]:-}\" ]]; then\n    local -n result=\"$(\n      echo {${min[@]}};\
    \ echo \"$#\" | sort -rn\n    )\" #shellcheck disable=SC2086\n    if [[ -n \"\
    ${min[@]:-}\" ]]; then\n      result=\"${result[@]}\"\n    else\n      result=''\n\
    \    fi\n  fi\n  if [[ -n \"${histo[@]:-}\" ]]; then\n    result=\"${result[@]}\"\
    \n  else\n    result=''\n  fi\n\n  echo \"${result}\"\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjd24p0dv.sh: line 20: local: `{abba}

    1'': invalid variable name for name reference

    /tmp/tmpjd24p0dv.sh: line 23: local: `{}

    1'': invalid variable name for name reference

    /tmp/tmpjd24p0dv.sh: line 26: local: `{}

    1'': invalid variable name for name reference

    /tmp/tmpjd24p0dv.sh: line 29: local: `{}

    1'': invalid variable name for name reference

    /tmp/tmpjd24p0dv.sh: line 33: local: `{}

    1'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ spaceSeparated lowercase letters occurrences letter\n\n  lowercase=$1\n  letters=\"\
    $(echo $lowercase | tr \" \" \"\\n\")\"\n  occurrences=\"$(echo $letters | uniq\
    \ -c | sort -k 2 -r | awk '$2 > 1' | tr -d '[:digit:]')\"\n  echo \"$occurrences\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ spaces\n  spaces=\"$(echo $1 | sed 's/[[:space:]]//g')\"\n  echo \"${spaces}\"\
    \n  local output\n  output=\"$(echo $1 | tr ' ' '\\n' | sort -n | uniq -c | sort\
    \ -nr | head -n 1)\"\n  echo \"${output}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ items=$1 item\n  local count maxcount maxitem\n\n  maxcount=0\n  for item in\
    \ $items; do\n    (( count[$item]++ ))\n    (( maxcount=${maxcount} > count[$item]\
    \ )) && maxcount=$count[$item]\n  done\n\n  maxitem=`printf \"%s\" \"${items[@]}\"\
    \ | sort -r -k1 | head -n1`\n  printf \"{'%s': '%s'}\" \"${maxitem}\" \"${maxcount}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057873
- exit_code: -1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letter count\n    letter=$1\n    count=0\n    while [[ $letter =~ ([^\
    \ ]*) ]]; do\n        count=$(echo \"$count\" | $(cat <<<\"$letter $count\" |\
    \ sort | uniq -c))\n        letter=${BASH_REMATCH[1]}\n    done\n    echo \"${letter},\\\
    \"${count}\\\"\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=31 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=27 encoding='utf-8'>
  timestamp: 1660057878
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local alphabet=\"$1\"\n    local count\n    count=0\n    for char in $alphabet;\
    \ do\n        [ -z \"$count\" ] || echo \"$char,$count\"\n        count=$(( $count\
    \ + 1 ))\n    done\n    [ \"$count\" -gt 0 ] || echo \"$alphabet,0\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=$1\n    local histogram={}\n    local letter\n    local count\n\
    \    for letter in $letters\n    do\n        count=0\n        for (( i = 0; i\
    \ < ${#letters}; i++ )) ; do\n            [ \"${letters:$i:1}\" = \"$letter\"\
    \ ] && (( count++ ))\n        done\n        histogram[$letter]=\"$count\"\n  \
    \  done\n    echo \"${!histogram[@]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=$(echo \"$1\" | tr ' ' '\\n')\n    local letters_with_repetition=$(\n\
    \        echo \"$letters\" | sort -u | sort -n | uniq -c | sort -r\n    )\n  \
    \  local letter_with_most_repetition=$(echo \"$letters_with_repetition\" | tail\
    \ -n 1)\n    local letter_with_most_repetition_count=$(echo \"$letter_with_most_repetition\"\
    \ | cut -d \" \" -f 1)\n    local letter_with_most_repetition_repetition=$(echo\
    \ \"$letters_with_repetition\" | head -n 1)\n    local letter_with_most_repetition_repetition_count=$(echo\
    \ \"$letter_with_most_repetition_repetition\" | cut -d \" \" -f 1)\n\n    if [[\
    \ -z \"$letter_with_most_repetition_count\" ]]; then\n        echo \"{}\" > \"\
    $2\"\n        return\n    fi\n\n    if [[ -n \"$letter_with_most_repetition_repetition_count\"\
    \ ]]; then\n        if [ \"$letter_with_most_repetition_count\" -eq \"$letter_with_most_repetition_repetition_count\"\
    \ ]; then\n            echo \"$letter_with_most_repetition_repetition,$letter_with_most_repetition_repetition_count\"\
    \ >> \"$2\"\n        else\n            echo \"$letter_with_most_repetition,$letter_with_most_repetition_count\"\
    \ >> \"$2\"\n        fi\n    fi\n\n    local count=0\n    while read -r letter\
    \ repetition; do\n        if [[ -n \"$repetition\" ]]; then\n            if [\
    \ \"$repetition\" -eq \"$repetition_count\" ]; then\n                echo \"$letter,$repetition\"\
    \ >> \"$2\"\n                ((count++))\n            else\n                echo\
    \ \"$letter,$repetition_count\" >> \"$2\"\n            fi\n        fi\n    done\
    \ < <(echo \"$letters_with_repetition\")\n\n    if [[ -z \"$count\" ]]; then\n\
    \        echo \"{}\" > \"$2\"\n        return\n    fi\n\n    if [ \"$count\" -eq\
    \ \"$count\" ]; then\n        echo \"$letter_with_most_repetition,$count\" >>\
    \ \"$2\"\n    else\n        echo \"$letter_with_most_repetition,$count\" >> \"\
    $2\"\n    fi\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3kwqrlsw.sh: line 29: : No such file or directory

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local str=\"$1\"\n    local histo\n    local item count\n    histo=()\n    #\
    \ loop through input string and count each letter\n    count=$(echo \"$str\" |\
    \ awk '{print $1}' | sort | uniq -c)\n    for item in $count; do\n        if [\
    \ \"${histo[$item]}\" ] ; then\n            histo[$item]=$(( ${histo[$item]}+1\
    \ ))\n        else\n            histo[$item]=1\n        fi\n    done\n    # loop\
    \ through histogram, print in CSV\n    local count=0\n    local max=0\n    local\
    \ countMax\n    local str\n    for (( i=0; i<${#histo[@]}; i++ )); do\n      \
    \  count=${histo[$i]}\n        if [ $count -gt $max ]; then\n            max=$count\n\
    \            countMax=$i\n        fi\n    done\n    str=$( echo \"${str}\" | sed\
    \ \"s/$countMax/$countMax,$max/g\" )\n    echo \"{\\\"$str\\\": \\\"$max\\\"}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ input=\"$1\"\n  local count=$(echo $input | sed 's/ //g' | sort | uniq -c)\n\
    \  if [ \"$count\" = \"0\" ] ; then\n    return 0\n  fi\n\n  local output=''\n\
    \  local item=''\n  for item in $(echo $input | sed 's/ //g' | sort | uniq) ;\
    \ do\n    output+=\"\\\"$item\\\",\\\"$count\\\"\\n\"\n  done\n  echo \"$output\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ str=$1\n  local counts=()\n\n  for c in $str; do\n    local count=0\n    for\
    \ i in $str; do\n      if [ \"$i\" == \"$c\" ]; then count=$((count+1)); fi\n\
    \    done\n    counts[$c]=$((${counts[$c]}+count))\n  done\n\n  # Sort the array\
    \ to get the most frequent first\n  local items=()\n  local max=0\n  for c in\
    \ \"${!counts[@]}\"; do\n    if [ \"$max\" == \"${counts[$c]}\" ]; then items[$max]=\"\
    $c\"; max=$((max+1)); fi\n  done\n\n  # Convert into a CSV\n  local csv='\"'\n\
    \  for i in $max; do\n    if [ \"$i\" -gt 0 ]; then csv+=\"'$i'\" ; fi\n  done\n\
    \  csv+=\"'\"\n  echo $csv\n  echo \"${counts[@]}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local chars=$1\n    local counts=()\n    local max=0\n    local maxCount=0\n\
    \    local maxChar=\"\"\n\n    # Build a dictionary with counts for each character\n\
    \    for char in ${chars[*]}; do\n        counts[$char]=\"${counts[$char]}\" ||\
    \ 0\n        ((counts[$char]+=1))\n    done\n\n    # Return the highest count\n\
    \    for char in ${counts[*]}; do\n        if [ ${counts[$char]} -gt ${maxCount}\
    \ ]; then\n            maxCount=${counts[$char]}\n            maxChar=${char}\n\
    \        fi\n    done\n\n    # Return the letter with the most count and how many\
    \ occurrences it is \n    echo $maxChar\n    echo \"${counts[$maxChar]}\"\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg4ul9ayn.sh: line 33: [: -gt: unary operator expected

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ Make sure the first arg is a string\n  local string=\"$1\"\n  if [ -z \"$string\"\
    \ ]\n  then\n    echo -n '{}'\n  else\n    # Split the string on spaces and convert\
    \ to lowercase\n    local letters=($(echo \"$string\" | tr \" \" \"\\n\" | sort\
    \ -u | tr '[:upper:]' '[:lower:]'))\n    local counts\n    for letter in \"${letters[@]}\"\
    \n    do\n      counts[$letter]=\"${counts[$letter]}\"\n    done\n\n    # Sort\
    \ the letters by count in descending order\n    local sorted_counts=$(echo \"\
    ${counts[@]}\" | sort -rn | tr -d '[:space:]')\n\n    # Output as CSV\n    local\
    \ max_count=$(echo \"${sorted_counts[@]}\" | head -1)\n    local max_letter\n\
    \    for letter in \"${sorted_counts[@]}\"\n    do\n      if [ \"$letter\" ==\
    \ \"$max_count\" ]\n      then\n        max_letter=$letter\n        break\n  \
    \    fi\n    done\n    echo \"$max_letter\":\"$max_count\"\n  fi\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # Convert $1 to a space-separated list.\n    local -n letters=( $1 )\n\n   \
    \ # Sort the list lexicographically using sort -nr.\n    local -n result=( $(\
    \ IFS=\" \"; echo \"${letters[@]}\" | sort -rn) )\n    echo \"${result[@]}\"\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplb4bxpjz.sh: line 20: local: letters: reference variable cannot
    be an array

    /tmp/tmplb4bxpjz.sh: line 23: local: result: reference variable cannot be an array

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ str\n  local -A count\n  str=$1\n  shift\n  str=$(echo \"$str\" | tr '[:upper:]'\
    \ '[:lower:]')\n  for i in $str; do\n    count[$i]=$(echo \"$count[$i]$1\"|grep\
    \ -c \"$i\")\n  done\n  # If any element in the count array is 0, set it to 1\n\
    \  for k in ${!count[@]}; do\n    if [[ ${count[$k]} -eq 0 ]]; then\n      count[$k]=$(echo\
    \ \"$count[$k]1\"|grep -c \"$k\")\n    fi\n  done\n  echo \"$count\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n\tlocal\
    \ letters=$1\n\tlocal count\n\tlocal i\n\tlocal max\n\n\tmax=0\n\n\tIFS=' ' read\
    \ -a letter-count <<< \"$letters\"\n\n\tfor (( i=0; i<${#letter-count[@]}; i++\
    \ )); do\n\t\tcount=\"${letter-count[$i]}\"\n\t\tif [ \"$count\" -gt \"$max\"\
    \ ]; then\n\t\t\tmax=\"$count\"\n\t\tfi\n\tdone\n\n\tprintf '{%s}\\n'\n\n\tfor\
    \ (( i=0; i<${#letter-count[@]}; i++ )); do\n\t\tletter=\"${letter-count[$i]}\"\
    \n\t\tprintf '\"%s\": \"%s\"\\n' \"$letter\" \"$max\"\n\tdone\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmetrknp5.sh: line 26: read: `letter-count'': not a valid identifier

    /tmp/tmpmetrknp5.sh: line 28: i<${#letter-count[@]}: bad substitution

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local str=$1\n    local count=0\n    local maxCount=0\n    local maxLetter=''\n\
    \    local out='{}' # output container\n    IFS=' ' read -r -a array <<< \"$str\"\
    \ # read each item of the array\n    for s in \"${array[@]}\"; do\n        ((count++))\n\
    \        if [[ $count -gt $maxCount ]]; then\n            maxCount=$count\n  \
    \          maxLetter=$s\n        fi\n    done\n    # output count\n    echo \"\
    ${maxLetter}\":\"$maxCount\n    # output array elements\n    for s in \"${array[@]}\"\
    ; do\n        echo \"$s\":\"$count\n    done\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5c2z5fh3.sh: line 37: syntax error near unexpected token `done''

    /tmp/tmp5c2z5fh3.sh: line 37: `    done''

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local IFS=$'\\n'\n    local letters=\"\"\n    local max=0\n    local count=0\n\
    \    for e in $*; do\n        letters+=\" $e\"\n        ((count++))\n        if\
    \ ((count>max)) ; then\n            max=count\n            letters=\"$letters\"\
    \n        fi\n    done\n    printf '%s\\n' \"${letters}\" | sort -z -n | uniq\
    \ -c | sort -z -n | awk '{ printf \"%s\\\"%s\\\":\\\"%s\\\"\\n\",\n          \
    \  ($1!=\"\"?$1:\"\\\"\\\"),$3,$1*$2+0}'\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:2:             ($1!=""?$1:"\"\"),$3,$1*$2+0}

    awk: cmd. line:2:                        ^ unterminated string

    awk: cmd. line:2:             ($1!=""?$1:"\"\"),$3,$1*$2+0}

    awk: cmd. line:2:                        ^ syntax error

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local count=0\n    local letters=${1:-}\n    local temp=${letters:1}\n    while\
    \ [[ ${letters} == $temp ]] ; do\n        count=$((count+1))\n        temp=${letters:1}\n\
    \    done\n    echo $count $temp\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -n histo=\"$1\"\n  local -a histo=( )\n  local c k m\n  local max\n  max=0\n\
    \  for k in \"${!histo[@]}\"; do\n    m=\"${histo[$k]}\"\n    if [ \"$m\" == \"\
    $max\" ]; then\n      continue\n    elif [ \"$m\" == \"$max\" ] && [ \"$k\" !=\
    \ \"$max\" ]; then\n      continue\n    else\n      histo[$k]=${m#\"$max\"}\n\
    \    fi\n    max=$(( ${histo[$k]} ))\n  done\n  echo \"${histo[@]}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbw8y_j6m.sh: line 19: local: `a b b a'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"${1}\"\n\n  # Turn input into array of unique letters. Sorted letters\
    \ first.\n  local letters=$(echo \"${letters}\" | tr \" \" \"\\n\" | sort -u)\n\
    \  # Set up a dict to store the count of each letter\n  local count\n  for letter\
    \ in ${letters}; do\n    count=0\n    while read -r; do\n      if [ \"$REPLY\"\
    \ = \"${letter}\" ]; then let count++; fi\n    done < <(grep -c \"${letter}\"\
    \ \"${letters}\")\n    count=\"\\\"${count}\\\"\"\n    count=\"$(echo \\\"${count}\\\
    \" | tr ' \" \"\\n\")\"\n    count=\"${count%$'\\n'}\"\n    count=\"${count//\\\
    \"/''}\"\n    count=\"${count//$'\\n'/','}\"\n    count=\"${count//,$'/\\n'}\"\
    \n    echo -n \"${letter}${count}\"\n    echo -n \",\"\n  done\n  echo \"\"\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa2as4en0.sh: line 35: unexpected EOF while looking for matching
    `''''

    /tmp/tmpa2as4en0.sh: line 59: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ \"$1\" | sort | uniq -c | sort -nr | awk '{ print \"\\\"\"$1\"\\\": \\\"\"$1\"\
    /\"$2\"\\\"\" }' | sed -e 's/\\/1$//'\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local str=\"$(echo \"$1\" | sed \"s/ /\" \"/g\")\"\n    local count=\"$(echo\
    \ \"$1\" | sed \"s/ /\" \"/g\" | sort | uniq -c | sort -nr | head -n 1)\"\n  \
    \  local keys=\"$(echo \"$1\" | sed \"s/ /\" \"/g\" | sort | uniq | tr '\\n' '\
    \ ')\"\n    local result=$(echo \"$count\" | while read count; do\n        echo\
    \ \"$key,$count\"\n    done)\n    echo ${result%,}\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 4: unterminated `s'' command

    sed: -e expression #1, char 4: unterminated `s'' command

    sed: -e expression #1, char 4: unterminated `s'' command

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ histo\n  histo=$(printf '%q;' \"${1:-}\" | sort -u | sed 's/^/\"${!u;}\"/' |\
    \ sed 's/\"$/\\;/\"')\n  histo=$(echo \"${histo//;/;'\";'\"'})\n  echo \"${histo//;/;'\"\
    ;'\"'}\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjbr_6320.sh: line 38: unexpected EOF while looking for matching
    `"''

    /tmp/tmpjbr_6320.sh: line 42: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"$1\"\n  local hash\n\n  hash=$(\n    echo \"$letters\" |\n    sed\
    \ -e 's/ /\",\"/g' |\n    sort |\n    uniq -c |\n    sort -n |\n    sed -e 's/^\
    \ *//' -e 's/ *$//'\n  )\n\n  printf \"{%s}\\n\"  \"${hash#*,}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local count\n    local max\n\n    count=0\n    max=0\n    IFS=' ' read -ra ALPHA\
    \ <<< \"$1\"\n\n    for char in \"${ALPHA[@]}\"; do\n        ((count+=1))\n  \
    \      if ((count > max)); then\n            max=${count}\n            RESULT[$char]=\"\
    ${1}\"\n        fi\n    done\n\n    for char in \"${!RESULT[@]}\"; do\n      \
    \  echo \"$char:${RESULT[$char]}\"\n    done\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ IFS=' ' histo=\"$(echo \"$1\" | tr '[:upper:]' '[:lower:]' | sort | uniq -c\
    \  | sort -n | tail -n 1)\"\n  echo \"${histo#* }\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ counts key\n  counts=()\n  local i\n  for i in \"${1//[[:space:]]/}\"; do\n\
    \    (( counts[$i]++ ))\n  done\n  key=\"\"\n  for key in \"${!counts[@]}\"; do\n\
    \    [ -z \"$key\" ] && key=\"${counts[$key]}\" && break\n  done\n  echo \"${key%,}\"\
    :\"${counts[$key]}\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf0n26g2x.sh: line 45: unexpected EOF while looking for matching
    `"''

    /tmp/tmpf0n26g2x.sh: line 49: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ s\n  s=$1\n  local counts\n  counts=$2\n  local alphabet\n  alphabet=`echo $s\
    \ | sed 's/ /\\\\ /g'`\n  local -A histo\n  histo=()\n  for (( i = 0; i < ${#alphabet};\
    \ i++ )); do\n    histo[$alphabet[i]]=$counts\n  done\n  echo \"${!histo[@]}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n\tlocal\
    \ spaces=\"$1\"\n\tlocal counts=\"\"\n\tlocal spacesCount\n\tlocal letters\n\t\
    local letter\n\tlocal i\n\tlocal max\n\tlocal maxCount\n\tlocal maxLetter\n\n\t\
    spacesCount=$(echo \"$spaces\" | awk '{\n\t\tif (NF == 1) {\n\t\t\tprint $1\n\t\
    \t}\n\t\telse {\n\t\t\tfor (i = 2; i <= NF; i++) {\n\t\t\t\tcounts += \" \"$i\n\
    \t\t\t}\n\t\t}\n\t}')\n\n\tfor ((i = 0; i < ${#spacesCount}; i++)); do\n\t\tspacesCount[i]=$(echo\
    \ \"${spacesCount[i]}\" | tr -s ' ')\n\t\tletters=$(echo \"${spacesCount[i]}\"\
    \ | cut -c 1)\n\t\tletter=$(echo \"${spacesCount[i]}\" | cut -c 2)\n\t\tlet count=$(echo\
    \ \"${spacesCount[i]}\" | wc -l)\n\t\tcounts=\"${counts}${count}${counts},\"\n\
    \tdone\n\n\tmaxCount=0\n\tmaxLetter=\"\"\n\tmax=\"\"\n\n\tfor ((i = 0; i < ${#counts};\
    \ i++)); do\n\t\tif [ \"${counts:i:1}\" -gt \"${maxCount}\" ] ; then\n\t\t\tmaxCount=${counts:i:1}\n\
    \t\t\tmaxLetter=${letters:i:1}\n\t\t\tmax=${counts:i:1}\n\t\tfi\n\tdone\n\n\t\
    echo \"{\\\"$maxLetter\\\":\\\"$max\\\"}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # Pad $1 with spaces if necessary\n    local str=${1:-}\n    local maxlen=${2:-5}\n\
    \n    local histo\n    local strlen\n    local count\n    local result\n\n   \
    \ histo=()\n    strlen=${#str}\n    while [[ $strlen > $maxlen ]]\n    do\n  \
    \      histo+=(${str:0:$maxlen})\n        histo[${histo[$((${#histo[@]} - 1))]}]+=$((${#str}\
    \ - 1))\n        str=${str:$maxlen}\n        strlen=$((strlen - maxlen))\n   \
    \ done\n    count=$((${#histo[@]} - 1))\n\n    while [ $count -gt 0 ]\n    do\n\
    \        result=${histo[$((${#histo[@]}))]}\n        histo[$((${#histo[@]}) -\
    \ 1))]=$result\n        count=$((${#histo[@]}-1))\n    done\n\n    for k in \"\
    ${!histo[@]}\"\n    do\n        echo -n '\"' ${str#$k} '\":\"' ${histo[$k]} '\"\
    '\n    done\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6_svrkxz.sh: command substitution: line 42: syntax error near unexpected
    token `-''

    /tmp/tmp6_svrkxz.sh: command substitution: line 42: `(${#histo[@]}) - 1''

    /tmp/tmp6_svrkxz.sh: line 42: ): syntax error: operand expected (error token is
    ")")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters occurrences key\n\n    letters=\"${1}\"\n    occurrences=\"$(echo\
    \ \"$letters\" | tr '[:upper:]' '[:lower:]' | sort | uniq -c | sort -n | head\
    \ -n 1)\"\n    key=\"${occurrences#*}\"\n    key=${key#*[[:space:]]}\n    key=${key%\
    \ *}\n\n    echo \"${key}\" \\\n        \"${occurrences}\" \\\n        \"$(echo\
    \ \"$occurrences\" | cut -d'\"' -f2 | sed -e 's/ //g')\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ histo=\"$1\"\n  local count\n  local max=\"\"\n  local maxcount=0\n  local key\n\
    \  local keycount=0\n  local k\n  local key2\n  local value\n\n  if [[ \"$histo\"\
    \ == \"\" ]]; then\n    return 0\n  fi\n\n  for k in $histo; do\n    ((keycount++))\n\
    \    ((key2=\"${k//[![:space:]]/}\"))\n    value=$(grep $key2 <<< \"$histo\" |\
    \ sort -u | wc -c)\n    ((key2=\"$key2${key}\"))\n\n    if [[ \"$max\" == \"\"\
    \ || \"$value\" -gt \"$maxcount\" ]]; then\n      max=\"$key2\"\n      maxcount=\"\
    $value\"\n    fi\n  done\n\n  printf '{'\n  for k in $histo; do\n    ((keycount++))\n\
    \    ((key2=\"${k//[![:space:]]/}\"))\n    if [[ \"$max\" != \"$key2\" ]]; then\n\
    \      printf '\"%s\":\"%s\"' \"$key2\" \"$keycount\"\n    else\n      printf\
    \ '\"%s\":\"%s\"' \"$key2\" \"$keycount\"\n    fi\n  done\n  printf '}\\n'\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyqc859yz.sh: line 35: ((: key2=: syntax error: operand expected
    (error token is "=")

    Usage: grep [OPTION]... PATTERNS [FILE]...

    Try ''grep --help'' for more information.

    /tmp/tmpyqc859yz.sh: line 37: ((: key2=: syntax error: operand expected (error
    token is "=")

    /tmp/tmpyqc859yz.sh: line 35: ((: key2=: syntax error: operand expected (error
    token is "=")

    Usage: grep [OPTION]... PATTERNS [FILE]...

    Try ''grep --help'' for more information.

    /tmp/tmpyqc859yz.sh: line 37: ((: key2=: syntax error: operand expected (error
    token is "=")

    /tmp/tmpyqc859yz.sh: line 35: ((: key2=: syntax error: operand expected (error
    token is "=")

    Usage: grep [OPTION]... PATTERNS [FILE]...

    Try ''grep --help'' for more information.

    /tmp/tmpyqc859yz.sh: line 37: ((: key2=: syntax error: operand expected (error
    token is "=")

    /tmp/tmpyqc859yz.sh: line 35: ((: key2=: syntax error: operand expected (error
    token is "=")

    Usage: grep [OPTION]... PATTERNS [FILE]...

    Try ''grep --help'' for more information.

    /tmp/tmpyqc859yz.sh: line 37: ((: key2=: syntax error: operand expected (error
    token is "=")

    /tmp/tmpyqc859yz.sh: line 48: ((: key2=: syntax error: operand expected (error
    token is "=")

    /tmp/tmpyqc859yz.sh: line 48: ((: key2=: syntax error: operand expected (error
    token is "=")

    /tmp/tmpyqc859yz.sh: line 48: ((: key2=: syntax error: operand expected (error
    token is "=")

    /tmp/tmpyqc859yz.sh: line 48: ((: key2=: syntax error: operand expected (error
    token is "=")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ i j tmp key val count\n  local -n keys=$1\n  local -n vals=$1\n  local -n counts=$1\n\
    \n  for i in \"${!keys[@]}\"; do\n    val=keys[$i]\n    key=${val// /\\\\}\n \
    \   count=0\n    key=${key//\\\"/}\n    for j in \"${!vals[$i]}\"; do\n      tmp=${vals[$i][$j]//\
    \ /\\\\}\n      if [[ ${counts[$j]} == 0 ]]; then\n        count=$((${count} +\
    \ 1))\n        if [[ \"${key}\" = \"${tmp}\" ]]; then\n          counts[$j]=$((${counts[$j]}\
    \ + 1))\n        fi\n      elif [[ \"${key}\" = \"${tmp}\" ]]; then\n        counts[$j]=$((${counts[$j]}\
    \ + 1))\n      fi\n    done\n    counts[$i]=$((${counts[$i]} + 1))\n  done\n \
    \ \n  # sort by value and pick first\n  for i in \"${!counts[@]}\"; do\n    key=${keys[$i]//\
    \ /\\\\}\n    val=${vals[$i]// /\\\\}\n    \n    if [[ ${counts[$i]} -gt 1 ]];\
    \ then\n      echo $key $((${counts[$i]}-1)).$val\n    else\n      echo $key $val\n\
    \    fi\n  done\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8f9fapkk.sh: line 20: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmp8f9fapkk.sh: line 21: local: `a b b a'': invalid variable name for name
    reference

    /tmp/tmp8f9fapkk.sh: line 22: local: `a b b a'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local str=\"$1\"\n    local map=()\n    local val=0\n    local key=''\n    for\
    \ (( c=${#str}-1; c>=0; c-- )); do\n        (( val+=${map[${str:$c}]} ))\n   \
    \     map[${str:$c}]=$(( val % 10 ))\n        key+='\"'$(printf '%q' \"${str:$c}\"\
    )'\"' # Escape spaces in key\n    done\n    echo \"{${key}}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqhabkpj3.sh: line 24: ((: val+= : syntax error: operand expected
    (error token is "+= ")

    /tmp/tmpqhabkpj3.sh: line 24: b a: syntax error in expression (error token is
    "a")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"${1}\"\n  local count max=0\n\n  for letter in \"${letters// }\" ;\
    \ do\n    if [ \"${count}\" -gt \"${max}\" ] ; then\n      max=\"${count}\"\n\
    \      maxLetter=\"${letter}\"\n      maxCount=\"${max}\"\n    elif [ \"${count}\"\
    \ = \"${max}\" ] ; then\n      max=\"${count}\"\n      maxLetter=\"${letter}\"\
    \n      maxCount=\"${max}\"\n    fi\n    count=\"${count}\"\n  done\n\n  if [\
    \ \"${max}\" = \"0\" ] ; then\n    echo \"\"\n    return 0\n  fi\n\n  echo \"\
    ${maxLetter},${maxCount}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqrfjdn6r.sh: line 23: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ data\n  data=$(echo \"$1\" | sed -e 's/ /\",\"/g' -e 's/ /\",\"/g')\n  echo\
    \ $data | sort -z -n | uniq -c | sed -e 's/^ *//' -e 's/$/\\n/'\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5ysnv8_g.sh: line 30: warning: command substitution: ignored null
    byte in input

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  declare\
    \ -A histo\n  declare -i max\n\n  if [ -z \"$1\" ]; then\n    echo \"error: empty\
    \ input\" >&2\n    return 1\n  fi\n  \n  max=0\n  for char in $(cat <<<\"$1\"\
    |tr \" \" \"\\n\")\n  do\n    histo[\"\\\"$char\\\"\"]=\"$max\"\n    ((max++))\n\
    \  done\n\n  echo \"{\\\"${!histo[@]}\\\"}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ str=\"${1:-}\"\n\n  local counts=()\n  local max=0\n\n  for letter in \"${str//\"\
    \ \"}\";\n  do\n    count=${#counts[@]}\n    ((count+=1))\n\n    ((counts[count]++))\n\
    \n    ((max=$max>counts[count]||max==counts[count]&&letter>max)?counts[count]:max)\n\
    \  done\n\n  printf \"{\"\n  for ((i=0;i<${#counts[*]};i++));\n  do\n    printf\
    \ '%s':${counts[$i]}\" \"${!counts[$i]}\"\n  done\n  printf \"}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbbuh1me4.sh: line 31: syntax error near unexpected token `?counts[count]:max''

    /tmp/tmpbbuh1me4.sh: line 31: `    ((max=$max>counts[count]||max==counts[count]&&letter>max)?counts[count]:max)''

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local count=0\n    local counts=()\n\n    while read -r letter; do\n       \
    \ count=0\n        for c in $letter; do\n            (( count++ ))\n         \
    \   (( counts[c]++ ))\n        done\n    done <<< $( echo \"$1\" | tr ' ' '\\\
    n' | sort -u | tr '\\n' ' ' )\n\n    for i in \"${!counts[@]}\"; do\n        echo\
    \ \"\\\"$i\\\": \\\"${counts[$i]}\\\"\"\n    done\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=\"$1\"\n    local count=\"$(echo \"$letters\" | tr \" \" \"\\\
    n\" | sort | uniq | tr \"\\n\" \" \")\"\n    local quotedLetters=\"$(echo \"$letters\"\
    \ | tr \" \" \"\\n\" | sort | uniq | tr \"\\n\" \" \" | sed -e \"s/ $/'/g\")\"\
    \n    echo \"{\\\"${quotedLetters}\\\": \\\"$count\\\"}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -n histo=\"$1\" # localise for safety\n  declare -A histo\n  local i\n  local\
    \ count=0\n  local max=0\n  local letter\n  local letters=()\n\n  for (( i=0;\
    \ i < ${#histo[@]}; ++i )); do\n    letter=${histo[$i]}\n    histo[$letter]=\"\
    ${histo[$letter]}\"\n    letters=( \"${letters[@]}\" \"$letter\" )\n    (( count++\
    \ ))\n    if (( count > max )); then\n      max=$count\n      letter=\"${histo[$i]}\"\
    \n    fi\n  done\n\n  # if there are multiple letters with the same count, return\
    \ all of them\n  if (( ${#letters[*]} > 1 )); then\n    for (( i=0; i < ${#letters[@]};\
    \ ++i )); do\n      printf '%q' \"${letters[$i]}\"\n    done\n  else\n    # return\
    \ just the first letter if all letters have the same count\n    printf '%q' \"\
    ${letters[0]}\"\n  fi\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3yxgkyf0.sh: line 19: local: `a b b a'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ \"$1\" = \"\" ]; then\n    return 0\n  fi\n  local string=\"$1\"\n  local\
    \ output\n  local count\n  local letter\n  local counts\n  output=${}\n  count=0\n\
    \  counts=()\n  string=$(echo \"$string\" | sed 's/ /\",\"/g')\n  for letter in\
    \ $string; do\n    count=`echo \"$string\" | awk -v letter=\"$letter\" '{print\
    \ $letter; print $1}' | sort | uniq -c | sort -n -r | tail -1 | tr -d '[:blank:]'`\n\
    \    if [ -n \"$count\" ]; then\n      counts[$letter]=\"$count\"\n      count=\"\
    ${counts[$letter]}\"\n    fi\n  done\n  echo \"${counts[*]}\"\n  return 0\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp184dcn8z.sh: line 27: ${}: bad substitution

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ counts=$(cut -d\\' -f1 <<< \"$1\")\n  local letters=$(cut -d\\' -f2 <<< \"$1\"\
    )\n  local words=$(echo \"$1\" | sed -e 's/ /\\n/g')\n  local max=0\n  local maxCount=''\n\
    \  local maxLetters=''\n  local maxWord=''\n  for word in $words\n  do\n    local\
    \ wordCount=$(echo \"$words\" | sed -n \"s/$word//p\")\n    if [ \"$wordCount\"\
    \ -gt \"$maxCount\" ]\n    then\n      max=$wordCount\n      maxCount=$wordCount\n\
    \      maxLetters=\"$letters\"\n      maxWord=\"$word\"\n    fi\n  done\n  printf\
    \ \"{'$maxLetters'\": \"'$maxCount'\"}\\n\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnh7sbhpv.sh: line 53: unexpected EOF while looking for matching
    `"''

    /tmp/tmpnh7sbhpv.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=\"$1\"\n    local count=\"$(echo \"$letters\" | tr ' ' '\\n' |\
    \ sort | uniq -c | sort -r -n | tail -1)\"\n    local keys=\"$(echo \"$count\"\
    \ | cut -d'\"' -f 1)\"\n    local values=\"$(echo \"$count\" | cut -d'\"' -f 2)\"\
    \n    \n    # In case there is only one occurrence per letter, add an extra line\
    \ for the letter\n    if [ \"$keys\" == \"1\" ]\n    then\n        echo \"$keys\"\
    \ \"$values\" \n    else\n        echo \"$keys\" \"$values\" \n    fi\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n\tlocal\
    \ IFS=\" \"\n\tlocal dict={}\n\tlocal i\n\tlocal n\n\tlocal tmp\n\tlocal len\n\
    \tlocal letter\n\tlocal value\n\tlocal key\n\tlocal values\n\n\tdict=$1\n\tfor\
    \ (( i = 1; i <= ${#dict[*]}; i++ )); do\n\t\tkey=${dict[$((i-1))]}\n\t\tvalue=${dict[$i]}\n\
    \n\t\tvalues=\"${values:+$values},$value\"\n\tdone\n\n\tkey=${keys:-$key}\n\n\t\
    values=${values:,}\n\tvalues=$( echo $values | tr \"[[:space:]]\" \"\\n\" )\n\t\
    values=$(echo $values | sed 's/,/\",\"/g')\n\tvalues=${values:-\"\"}\n\n\tIFS=\"\
    :\"\n\tvalues=$( echo $values | tr \"[[:space:]]\" \",\" )\n\tvalues=${values:-\"\
    \"}\n\tIFS=\"\"\n\t[[ -z $values ]]\n\n\tkey=\"${key%,}\"\n\tkey=\"${key#*,}\"\
    \n\tkey=\"${key%%:*}\"\n\tkey=\"${key##*:}\"\n\n\ttmp=${values%,}\n\ttmp=${tmp##*,}\n\
    \tlen=${#tmp}\n\tif [[ $len -ge 2 ]]; then\n\t\ttmp=$(echo $tmp | awk -F, '{print\
    \ $1}')\n\telse\n\t\ttmp=$(echo $tmp | awk -F, '{print $1}')\n\t\tlen=1\n\tfi\n\
    \ttmp=${tmp:0:$((len-1))}\n\tvalues=${values#*,}\n\ttmp=\"${tmp},$value\"\n\t\
    tmp=${tmp:1:$((len-1))}\n\tvalues=$tmp\n\tIFS=\",\"\n\tvalues=$( echo $values\
    \ | sed 's/$/,/g' )\n\tvalues=${values:,}\n\tIFS=\"\"\n\n\tkey=${key%,}\n\tkey=\"\
    ${key#*,}\"\n\tkey=\"${key%%:*}\"\n\tkey=\"${key##*:}\"\n\n\tlen=${#key}\n\ttmp=${values%,}\n\
    \ttmp=${tmp##*,}\n\tlen=${#tmp}\n\tif [[ $len -ge 2 ]]; then\n\t\ttmp=$(echo $tmp\
    \ | awk -F, '{print $1}')\n\telse\n\t\ttmp=$(echo $tmp | awk -F, '{print $1}')\n\
    \t\tlen=1\n\tfi\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpein7u5kf.sh: line 40: values: ,: syntax error: operand expected
    (error token is ",")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ items=$1\n  local histostr='\"{}\"=\"{}\"';\n  local histo item=\n  while IFS=\
    \ read -r item; do\n    histo=$(printf \"$histostr\" \"$item\" \"${histo[$item]}\"\
    )\n  done < <(echo \"$items\" | tr '[:upper:]' '[:lower:]' | sort | uniq -c)\n\
    \  printf \"%s\\n\" \"${!histo[@]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl_r27pmo.sh: line 23: 1 a b b a: syntax error in expression (error
    token is "a b b a")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ histo\n  histo=( $(echo \"${1}\" | sort -g | uniq -c | sort -r) )\n\n  if [[\
    \ \"${histo[1]}\" ]]; then\n    echo ${histo[1]}\n  else\n    echo {}\n  fi\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ input=\"$1\"\n  # Sanitize input\n  input=$(echo \"$input\" | tr ' ' '+' | tr\
    \ ' ' '-' | tr ' ' '+' | tr '-' ' ')\n  # Count letters\n  local counts=$(echo\
    \ \"$input\" | tr ' ' '-' | sed 's/\\./\\:/g' | sed 's/:/:/g' | sed 's/-/:/g'\
    \ | sed 's/:+/:/g' | sort | uniq -c)\n  # Keep most frequent letter and its occurrence\n\
    \  local max=\"$(cat <<<\"$counts\" | awk '{ print $1\":\"$2 }')\"\n  # Return\
    \ as JSON\n  echo \"$max\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ string=$1\n  local counts=$(\n    awk '{\n      for(i = 1; i <= NF; i++) {\n\
    \        for(k in tolower($i)) {\n          counts[k, tolower($i)] += 1;\n   \
    \     }\n      }\n    }\n    END {\n      for(i in counts) {\n        printf \"\
    %s%s\", i, counts[i] == 0 ? \"\" : FS counts[i]\n      }\n    }' <<< \"${string}\"\
    \ | sort -g | head -1)\n  if [ -z \"${string}\" ]; then\n    return 0\n  fi\n\
    \  echo \"${string},$(printf \"\\\"%s\\\"\" \"${counts}\")\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:3:         for(k in tolower($i)) {

    awk: cmd. line:3:                  ^ syntax error

    awk: cmd. line:3:         for(k in tolower($i)) {

    awk: cmd. line:3:                             ^ syntax error

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local string=\"$1\"\n    local counts=$(set -- $string)\n    local key\n   \
    \ local -a keys\n    local -a values\n    local -a histo\n\n    for key in \"\
    ${!counts[@]}\" ; do\n        if ! [[ \"$key\" =~ ([^ ]+)$ ]]; then\n        \
    \    echo \"Invalid string: No value before '$key' in '$string'\"\n          \
    \  exit 1\n        fi\n        values[$key]=$(( ${values[$key]} + 1 ))\n    done\n\
    \n    keys=()\n    histo=()\n    for key in \"${!values[@]}\" ; do\n        histo+=(\
    \ \"${key%,}\" ${values[$key]} )\n        keys+=($key)\n    done\n\n    echo -n\
    \ '{' >&2\n    for (( c=1 ; c <= ${#keys[@]} + 1 ; c++ )) ; do\n        echo -n\
    \ \"\\\"${keys[c]}\\\": \\\"${histo[c]}\\\"\" >&2\n    done\n    echo '}' >&2\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '{"": "1""": ""}

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local word=$1\n    local counts\n    local histogram={}\n\n    # split into\
    \ a list of single letters, trim whitespace from each char\n    local letters=$word\n\
    \    local letters_trimmed=${letters//[[:space:]]/}\n\n    for letter in ${letters_trimmed};\
    \ do\n        if [[ ${counts[${letter}]} -eq 0 ]]; then\n            counts[${letter}]=1\n\
    \        else\n            counts[${letter}]=$(( ${counts[${letter}]} + 1 ))\n\
    \        fi\n    done\n\n    for letter in ${!counts[@]}; do\n        histogram[${letter}]=${counts[${letter}]}\n\
    \    done\n\n    echo ${histogram[@]}\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters counts\n    letters=$( echo \"${1:-}\" | sed \"s/ /\",\"g\" )\n\
    \    counts=$( echo \"${letters:-}\" | tr -cd '\"' | tr ',' '\\n' | sort -n |\
    \ uniq -c | sort -n | tail -n 1 )\n    echo -n '{' >> $1\n    for i in $counts;\
    \ do\n        if [ $i -eq 1 ]; then\n            echo -n \"\\\"$i\\\": \\\"$i\\\
    \"\" >> $1\n        else\n            echo -n \"\\\"$i\\\": \\\"$i\\\",\" >> $1\n\
    \        fi\n    done\n    echo '}' >> $1\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 6: unterminated `s'' command

    /tmp/tmpmy0odbnc.sh: line 22: $1: ambiguous redirect

    /tmp/tmpmy0odbnc.sh: line 30: $1: ambiguous redirect

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ declare -A hash\n    declare -a args\n    local -n args=${0}\n    local -i i\n\
    \n    # Normalize whitespace (strip all leading and trailing whitespace and \n\
    \    # replace multiple consecutive whitespace with a single whitespace).\n  \
    \  while [[ $1 ]]; do\n        args+=( ${1//[[:space:]]/ } )\n        shift\n\
    \    done\n\n    # Count occurrences of each letter, construct the dictionary\
    \ and output\n    # it to stdout.\n    for (( i = 0; i < ${#args[*]}; i++ ));\
    \ do\n        local letter=${args[$i]}\n        hash[\"$letter\"]=$(( hash[\"\
    $letter\"] || 0 ) + 1)\n    done\n\n    # Now iterate over the keys of the hash\
    \ and output the most common and\n    # corresponding count.\n    for key in \"\
    ${!hash[@]}\"; do\n        local count=\"${hash[$key]}\"\n        echo -n \"\\\
    \"$key\\\": \\\"$count\\\"\"\n    done\n    echo\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj_shbswt.sh: line 21: local: `/tmp/tmpj_shbswt.sh'': invalid variable
    name for name reference

    /tmp/tmpj_shbswt.sh: command substitution: line 35: syntax error near unexpected
    token `+''

    /tmp/tmpj_shbswt.sh: command substitution: line 35: `( hash["$letter"] || 0 )
    + 1''

    /tmp/tmpj_shbswt.sh: command substitution: line 35: syntax error near unexpected
    token `+''

    /tmp/tmpj_shbswt.sh: command substitution: line 35: `( hash["$letter"] || 0 )
    + 1''

    /tmp/tmpj_shbswt.sh: command substitution: line 35: syntax error near unexpected
    token `+''

    /tmp/tmpj_shbswt.sh: command substitution: line 35: `( hash["$letter"] || 0 )
    + 1''

    /tmp/tmpj_shbswt.sh: command substitution: line 35: syntax error near unexpected
    token `+''

    /tmp/tmpj_shbswt.sh: command substitution: line 35: `( hash["$letter"] || 0 )
    + 1''

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"${1}\"\n  local histo=\"{}\"\n  local letter\n  local count\n\n  for\
    \ letter in ${letters//,/ }; do\n    count=$(( ${histo}[\"${letter}\"]++ ))\n\
    \    histo=\"$(IFS=,; echo \"${histo},${letter},${count}\" | sed 's/^/\"/; s/,$/,/')\"\
    \n  done\n\n  echo \"${histo}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpib63ll7g.sh: line 25: {}[a]++ : syntax error: operand expected
    (error token is "{}[a]++ ")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=$1;\n\n    local sortedLetters=$(echo $letters | tr \" \" \"\\\
    n\" | sort | uniq)\n\n    local result=()\n    local letter=''\n    local count=''\n\
    \    local letterCount=''\n    for l in $sortedLetters\n    do\n        letterCount=$(echo\
    \ $letterCount$l | wc -l)\n        if [ $letterCount -gt 1 ]; then\n         \
    \   count=$count$letterCount$l\n            letter=$l\n        else\n        \
    \    count=$count1\n            letter=$l\n        fi\n    done\n    local sortedResult=$(echo\
    \ $result | tr \" \" \"\\n\" | sort | uniq)\n    echo {\"$letter\": \"$count\"\
    }\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n\tlocal\
    \ spaceSeparated lowerCaseLetters\n\tspaceSeparated=$(echo $1 | tr \" \" \"\\\
    n\")\n\tlowerCaseLetters=$(echo $spaceSeparated | tr \" \" \"\\n\" | sort | uniq)\n\
    \tlet counter=0\n\tlet charCount=0\n\tlet charMax=0\n\tlet charArray=()\n\tfor\
    \ char in $lowerCaseLetters; do\n\t\tlet counter++\n\t\tif [[ $counter -gt $charMax\
    \ ]]; then\n\t\t\tcharMax=$counter\n\t\tfi\n\t\tlet charCount++\n\t\tcharArray[$char]=$charCount\n\
    \tdone\n\tlet maxCharCount=$((${#charArray[@]} > 0 ? ${#charArray[@]} : 1))\n\t\
    let maxChar=$((${#spaceSeparated} > 0 ? ${#spaceSeparated} : 1))\n\techo $maxChar,$maxCharCount,$charMax,${#charArray[@]}\n\
    \techo \"${charArray[@]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphfsqhd_s.sh: line 25: let: charArray=(): syntax error: operand
    expected (error token is ")")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ csv='\"'\n  local counter=()\n  local letters=$1\n  local max=0\n  local maxletter=\n\
    \n  # remove spaces\n  letters=$( echo $letters | sed \"s/[ ]/''/g\" )\n\n  for\
    \ letter in $letters; do\n    (( counter[$letter]++ ))\n  done\n\n  for letter\
    \ in \"${!counter[@]}\"; do\n    if (( counter[$letter] > max )); then\n     \
    \ max=${counter[$letter]}\n      maxletter=${letter}\n    fi\n  done\n\n  # remove\
    \ quotes\n  csv+=$maxletter\n\n  for letter in \"${!counter[@]}\"; do\n    if\
    \ [[ -z ${counter[$letter]} ]]; then\n      csv+=$letter\n    fi\n  done\n\n \
    \ # remove comma and space\n  csv=${csv%,}\n  csv=${csv% }\n\n  csv+=\"'\"\n \
    \ echo \"$csv\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8g0_rvw2.sh: line 29: a''''b''''b''''a: syntax error: invalid arithmetic
    operator (error token is "''''b''''b''''a")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ str\n  local count\n  local char\n  local tmp\n  local dict\n  local output\n\
    \n  str=$1\n  dict={}\n  output=\"\"\n  for char in $str; do\n    count=$((${#str}\
    \ - ${#char} + 1))\n    case \"${char}\" in\n      *\" \")\n        tmp=${char//[\
    \ ]*}\n        echo \"${tmp}\"\n        count=$(grep -n \"${char}\" \"${HISTFILE}\"\
    \ | wc -l)\n        (( count >= 1 )) && { echo \"$char \\\"${char}\\\"\" >> output;\
    \ dict[$char]=\"${count}\"; }\n        ;;\n      *)\n        (( count > 0 )) &&\
    \ { echo \"$char \\\"${char}\\\"\" >> output; dict[$char]=\"${count}\"; }\n  \
    \      ;;\n    esac\n  done\n  echo \"${dict}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local i o\n    # Trim whitespace and convert to lower case.\n    local string=\"\
    ${1}\"\n    string=\"${string// /}\"\n    string=\"${string// /}\"\n    string=\"\
    ${string// /}\"\n    string=\"${string//[^a-zA-Z]/}\"\n    # Count occurrences\
    \ of each character.\n    local histo=\n    for (( i=1; i<${#string}; i++ ));\
    \ do\n        local x=\"${string:$i:1}\"\n        if [[ -z \"${histo[@]}\" ]];\
    \ then\n            histo[\"${x}\"]=\"0\"\n        else\n            histo[\"\
    ${x}\"]=$((histo[\"${x}\"]+1))\n        fi\n    done\n    # Return list of pairs.\n\
    \    local ret=()\n    for x in \"${!histo[@]}\"; do\n        local y=\"${x}\"\
    \n        local z=\"\\\"${y}\\\"\"\n        local count=\"${histo[${y}]}\"\n \
    \       local percent=\"${count}*100/${#string}\"\n        ret+=($(echo \"${percent}\"\
    \ | bc | awk '{printf \"%s,%s%%,%s\\n\", z, count, z}'))\n    done\n    echo ${ret[@]}\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ \"$1\" |\n  grep -oP '(?<=\")(.+?)(?=\")(?:\"[0-9]+)\"' |\n  sort -k 1,1 |\n\
    \  uniq -c |\n  sort -k 2,2 |\n  sed 's/^/\\\"\";/g' |\n  sed 's/$/\"\\\"\";/g'\
    \ |\n  sed 's/^\"//g' |\n  sed 's/\"$//g' |\n  sed 's/\"//g'\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ item\n  local histo\n\n  # Create a histogram (map of string to integer).\n\
    \  histo=()\n  for item in $1; do\n    ((histo[$item]+=1))\n  done\n\n  # Return\
    \ the histogram\n  echo ${!histo[@]}\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ \"$1\" | sort | uniq -c | sort -nrk 1 | sed -E \"s/^ *([0-9]+) *\\([^ ]*\\)\
    \ *$/\\1'\\2'/\" | cut -d ' ' -f 1,2 | sed -E \"s/(^'|'$)//g\" | sed -E \"s/'$//g\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 35: invalid reference \2 on `s'' command''s
    RHS

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"${1}\"\n  local counts\n  local max\n  local maxcount\n  counts=()\n\
    \  max=0\n  maxcount=0\n  for letter in $letters\n  do\n    counts=( \"${counts[@]}\"\
    \ \"$letter\" 1)\n  done\n  for letter in $letters\n  do\n    count=${counts[$letter]}\n\
    \    if [ \"$count\" -gt \"$maxcount\" ]\n    then\n      maxcount=$count\n  \
    \    max=$letter\n    fi\n  done\n  printf \"{'%s': '%s', '%s': '%s'}\\n\" $max\
    \ \"${maxcount}\" \"${counts[0]}\" \"$counts[1]\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2qufwaza.sh: line 33: [: a: integer expression expected

    /tmp/tmp2qufwaza.sh: line 33: [: a: integer expression expected

    /tmp/tmp2qufwaza.sh: line 33: [: a: integer expression expected

    /tmp/tmp2qufwaza.sh: line 33: [: a: integer expression expected

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: -1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local result={}\n    local item\n    for item in $(cat); do\n        result[$item]=$(cat\
    \ $1 | grep -n \"$item\" | sort -n -k 1 | head -1 | cut -d'\"' -f 2)\n    done\n\
    \    echo \"${!result[@]}\" | tr ' ' '|'\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=45 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=29 encoding='utf-8'>
  timestamp: 1660057879
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ shellcheck disable=SC2164\n  local letters\n  IFS=' ' read -r -a letters <<<\
    \ \"$1\"\n\n  local -i num_letters=0\n  local letters\n  local result\n\n  for\
    \ letter in \"${letters[@]}\"; do\n    local count\n    count=$(grep -n \"${letter}\"\
    \ <<< \"$1\" | cut -d ':' -f 1)\n    if [ -n \"${count}\" ]; then\n      num_letters=$((num_letters\
    \ + 1))\n    fi\n  done\n\n  if [ -n \"${num_letters}\" ]; then\n    local sorted_letters\n\
    \    sorted_letters=$(sort -u <<< \"${letters[*]}\")\n\n    IFS=' ' read -r -a\
    \ result <<< \"${sorted_letters[@]}\"\n  fi\n\n  printf '%s\\n' \"${result[@]}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ items=$1 count\n  local max=0\n  local maxitem=\"\"\n  local sorted=()\n  local\
    \ keys=()\n  local values=()\n  local i=0 item\n  for item in $items; do\n   \
    \ keys+=($item)\n    values+=($count)\n    ((i++))\n  done\n  IFS=$'\\n'\n  for\
    \ ((i = 0; i < ${#keys[*]}; i++)); do\n    if (( ${keys[$i]} > max )); then\n\
    \      max=${keys[$i]}\n      maxitem=${values[$i]}\n      sorted=(\"${sorted[@]:0:i}\"\
    \ \"${maxitem}\")\n    elif (( ${keys[$i]} == max )); then\n      sorted+=(\"\
    ${keys[$i]}\" \"${values[$i]}\")\n    fi\n  done\n  IFS=$OLDIFS\n  echo \"${sorted[@]}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n\tlocal\
    \ input=\"$1\"\n\tlocal map=()\n\n\tfor k in \"${input:1}\"; do\n\t\tlocal key=${k:0:1}\n\
    \t\tlocal value=${k:1}\n\t\t((map[\"$key\"]+=$value)) || map[\"$key\"]=$value\n\
    \tdone\n\n\tlocal output\n\tfor k in \"${!map[@]}\"; do\n\t\toutput+=\"${k},${map[$k]}\"\
    \n\tdone\n\techo \"${output%,}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxtd8ctst.sh: line 25: ((: map[ ]+=b b a: syntax error in expression
    (error token is "b a")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ str=$1\n  local histo=$(echo \"$str\" | tr ' ' '\\n' | sort -u)\n  local count=$(echo\
    \ \"$str\" | tr ' ' '\\n' | sort | uniq -c | sort -nr | head -n 1)\n  local out=''\n\
    \  local i=0\n  local max=0\n  while read -r x ; do\n    local count=$(( ${count[$i]}+1\
    \ ))\n    if [ \"$count\" -gt \"$max\" ] ; then\n      max=$count\n      out=\"\
    ${out}${x}${count}\"\n    fi\n    (( i++ ))\n  done <<< \"$histo\"\n  echo $out\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpeygnpird.sh: line 26: 2 b+1 : syntax error in expression (error
    token is "b+1 ")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ maxlen=0\n  local maxitem\n  local item\n  local -a arr\n  IFS=$' \\t\\n'\n\
    \  for item in $*; do\n    arr=( ${item// / } )\n    len=${#arr[@]}\n    if [\
    \ \"$maxlen\" -lt \"$len\" ]; then\n      maxlen=$len\n      maxitem=${item}\n\
    \    fi\n  done\n  IFS=$' \\n'\n  printf \"%s\\n\" ${arr[@]} | sort -k 2 -n |\
    \ head -n $maxlen | sed 's/ /\",\"/g'\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ count the occurrence of each character\n  declare -A map\n  while read -r; do\n\
    \    map[\"$REPLY\"]=\"$(( ${map[$REPLY]} + 1 ))\"\n  done < <(echo \"$1\" | tr\
    \ \" \" \"\\n\") | sort -n | uniq -c | sort -n | head -n 1\n  # format the result\
    \ in the form \"{<character>: <count>}\"\n  echo \"$(\n    echo \"${!map[@]}\"\
    \n    # sort and remove duplicates while keeping the order of the characters\n\
    \    | sort -n | uniq -c | sort -n | head -n 1 | while read -r cnt _; do\n   \
    \   # remove the quotes around the key\n      echo \"${REPLY#\\\"}\"\n    done\n\
    \  )\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfifi5gvf.sh: command substitution: line 36: syntax error near unexpected
    token `|''

    /tmp/tmpfifi5gvf.sh: command substitution: line 36: `    | sort -n | uniq -c |
    sort -n | head -n 1 | while read -r cnt _; do''

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=$1\n  local sortedLetters=\"$(printf '%s\\n' \"${letters//[[:space:]]/}\"\
    \ \"${letters//[[:space:]].*//}\")\"\n\n  # Initialize a hash of letter counts\n\
    \  local histogram\n  histogram=()\n\n  # Count the number of occurrences of each\
    \ letter in the input\n  for letter in $sortedLetters; do\n    histogram[${letter}]=$(grep\
    \ -o \"$letter\" <<<\"$letters\" | wc -l)\n  done\n\n  # Sort the hash in reverse\
    \ order by frequency\n  echo \"${!histogram[@]}\" | sort -nr -k 2\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=\"$1\"\n    local counts\n    if [ -z \"$letters\" ] || [ -z \"\
    $counts\" ]; then\n        echo \"ERROR: expected a non-empty string argument\"\
    \n        exit 1\n    fi\n    local count_for_letter=$(echo \"$letters\" | sed\
    \ 's/ //g' | sort | uniq | wc -w)\n    echo \"$(echo \"$letters\" | sed 's/ //g'\
    \ | sort | uniq | sed 's/\\\"/\\\",\\\"\\\"/g' | sed -e 's/^/\\\"/' -e 's/$/\\\
    \"/' -e 's/,\\\"/\\\"\\\"/g' | sed -e 's/\\\"\\\"//g' | sed 's/\\\"/\\\"\\\"\\\
    \"/g' | sed -e 's/\\\"//g')\" : \"$count_for_letter\"\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local lower\n    lower=\"$(echo $1 | tr '[:upper:]' '[:lower:]')\"\n    local\
    \ count\n    count=\"$(echo \"$1\" | sed \"s/${lower//\\// }/${lower//\\// }/g\"\
    \ | sort | uniq -c | sort -r -n | tail -1)\"\n    if [[ $count -gt 1 ]]; then\n\
    \        echo \"$lower,\\\"$count\\\"\" >> $histogramFile\n    fi\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5xofqwl6.sh: line 23: [[: 1 a b b a: syntax error in expression
    (error token is "a b b a")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ counts={}\n  for (( i=0; i<${#1}; i++ )); do\n    local letter=${1:$i:1}\n \
    \   if [[ ${counts[$letter]} ]]; then\n      counts[$letter]+=1\n    else\n  \
    \    counts[$letter]=1\n    fi\n  done\n  local out\n  for letter in \"${!counts[@]}\"\
    ; do\n    out=\"$letter;${counts[$letter]}\"\n  done\n  echo \"$out\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local IFS=$1; shift;\n    local letters=\"\"; local count=\"\";\n    for letter\
    \ in $@; do\n        letters=\"${letters},${letter//\\//\\\\\\\\}\"\n        count=\"\
    ${count},$(echo $letter | tr A-Z a-z | sort | uniq -c)\"\n    done\n    echo \"\
    {\\\"${letters}\\\"=\\\"${count}\\\"}\" | sed 's/,$//'\n}\n\ncandidate() {\n \
    \   histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -n histo=${1:-$*}\n  local chars=\"$(tr ' ' '\\n' <<< \"${histo}\")\"\n  # The\
    \ keys are quoted, so each character will be a column.\n  local counts=\"${histo//[[:space:]]/}\"\
    \n  local -n histo=\"${chars}.${counts}\"\n  local -n max=\"${!histo}\"\n  while\
    \ IFS=\".\" read key value; do\n    [[ ${value} -gt ${max} ]] || { [[ ${key} ==\
    \ $1 ]] && break; }\n  done <<< \"${histo}\"\n  printf '{%s}' \"${histo[@]}\"\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbus9tuyq.sh: line 19: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmpbus9tuyq.sh: line 23: local: `.'': invalid variable name for name reference

    /tmp/tmpbus9tuyq.sh: line 24: histo: invalid indirect expansion

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local LETTERS=\"${1:-}\"\n    if [ \"$LETTERS\" == \"\" ]; then\n        echo\
    \ \"{}\"\n        return\n    fi\n    local LETTERS_CSV=$(printf '%s' \"${LETTERS}\"\
    \ | sed -e 's/ /\",\"/g' | sed -e 's/\"/\"\"/g')\n    local LETTERS_CSV=$(printf\
    \ '%s' \"${LETTERS_CSV}\" | sort -n | uniq -c | sort -rn | head -n 1)\n    local\
    \ LETTERS_CSV=$(printf '%s' \"${LETTERS_CSV}\" | sed -e 's/^[^\"]*//g' | sed -e\
    \ 's/[^\"]*\"//g')\n    local LETTERS_CSV=$(printf '%s' \"${LETTERS_CSV}\" | sed\
    \ -e 's/\"//g')\n    local LETTERS_CSV=$(printf '%s' \"${LETTERS_CSV}\" | sed\
    \ -e 's/$/\"/g')\n    local LETTERS_CSV=$(printf '%s' \"${LETTERS_CSV}\" | sed\
    \ -e 's/$/\"/g')\n    eval \"$(printf '%s\\n' \"${LETTERS_CSV}\" )\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgc3qy4ir.sh: line 30: a: command not found

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"${1//\\\"}\"\n  local count=\"$(echo \"${letters//\\\" /, }\" | sort\
    \ -k 1,1 -k 2,2 -k 3,3 -k 4,4 | uniq -c | sort -k 1,1 -k 2,2 -k 3,3 -k 4,4 | awk\
    \ '{print $1 \" \" $2}')\"\n  echo \"${count//,/ }\"\n}\n\ncandidate() {\n   \
    \ histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: -1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=''\n  local letter\n  local letterCount\n  local count\n  while [[ $#\
    \ -gt 0 ]]\n  do\n    local i\n    local line\n    local lineCount\n    for ((i=1;i<=$#;i++))\n\
    \    do\n      line=\"${1:$i}\"\n      lineCount=$(grep -w \"$line\" <<< \"$letters\"\
    \ | wc -l)\n      letterCount=$(grep -w \"$line\" <<< \"$letters\" | tr '[:lower:]'\
    \ '[:upper:]' | sort | uniq -c | sort -n | tail -1 | tr '[:upper:]' '[:lower:]')\n\
    \      letterCount=\"${letterCount//[$line]/$lineCount}\"\n      if [[ -z \"$letterCount\"\
    \ ]]\n      then\n        letterCount=\"0\"\n      fi\n      letterCount=\"\\\"\
    $letterCount\\\"\"\n      local line2=\"$(echo $line | tr '[:lower:]' '[:upper:]')\"\
    \n      local line2Count=$(grep -w \"$line2\" <<< \"$letters\" | wc -l)\n    \
    \  letterCount=\"${letterCount//[$line2]/$line2Count}\"\n      if [[ -z \"$letterCount\"\
    \ ]]\n      then\n        letterCount=\"0\"\n      fi\n      letters=\"$letters$letter,$letterCount\"\
    \n    done\n    shift $(( ${#1} - 1 ))\n  done\n  echo \"{\\\"$letters\\\"\"\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=48 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=11 encoding='utf-8'>
  timestamp: 1660057879
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ maxcount=0\n  local maxletter=\n  local tmpletters=\n  local tmpcount=\n  for\
    \ letter in \"$1\"; do\n    [[ \"${#letters}\" -gt 0 ]] || tmpletters=\n    [[\
    \ -z \"${#tmpletters}\" ]] || tmpcount=$(( ${#letters}+1 ))\n    [[ \"${tmpcount}\"\
    \ -gt \"${maxcount}\" ]] || maxcount=\"${tmpcount}\"\n    [[ \"${letter}\" = \"\
    ${maxletter}\" ]] || maxletter=\"${letter}\"\n    tmpletters=\"${letters} ${letter}\"\
    \n  done\n  echo \"${tmpletters}:${maxcount}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=\"$1\"\n    local letter=\"$(tr '[:upper:]' '[:lower:]' <<< \"\
    $letters\" | sort | uniq | sort -nr)\"\n    local count=\"$(tr '[:upper:]' '[:lower:]'\
    \ <<< \"$letters\" | sort | uniq | wc -c)\"\n\n    # Sort letters in descending\
    \ order\n    IFS=$'\\n' read -r -d '' -a letters_sorted <<< \"$letter\"\n\n  \
    \  # Remove all occurences of letters other than the first letter\n    for ((\
    \ i = 0; i < ${#letters_sorted[@]}; ++i )); do\n        case \"${letters_sorted[i]}\"\
    \ in\n            *\"$letter\")\n                let count--\n               \
    \ ;;\n        esac\n    done\n\n    # Remove the first letter if it has no repetitions\n\
    \    case \"$letter\" in\n        \"$letters_sorted[0]\")\n            shift\n\
    \            ;;\n    esac\n\n    local letters_sorted=\"${letters_sorted[@]}\"\
    \n    declare -A histograms\n\n    local letter=\"${letters_sorted[0]}\"\n   \
    \ local count=\"$count\"\n\n    # Count the repetition of each letter and store\
    \ them in an associative array\n    for (( i = 0; i < ${#letters_sorted[@]}; ++i\
    \ )); do\n        case \"${letters_sorted[i]}\" in\n            \"$letter\")\n\
    \                histograms[\"$letter\"]=\"$count\"\n                let count--\n\
    \                ;;\n        esac\n    done\n\n    local histograms=\"${histograms[@]}\"\
    \n\n    echo \"$histograms\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -n HIST=\"$1\"\n  local -n RESULTS=\"$(HIST_COUNT=\"$(HIST_COUNT=\"${HIST}\"\
    \ histogram.bash)\"; HIST_COUNT=$HIST_COUNT)\" HIST_MATCH='\"[^\"]+\":(\\?*)'\n\
    \  local -n COUNT=0\n\n  while read -r; do\n    local -n LETTER=\"$REPLY\"\n \
    \   (( COUNT++))\n    (( RESULT=\"${COUNT}${RESULTS:-$LETTER}\" ))\n    local\
    \ -n REMOTE=\"$LETTER\"\n    REMOTE=\"${REMOTE//$HIST_MATCH/$RESULT}\"\n    RESULTS=\"\
    ${RESULTS:-$REMOTE}\"\n  done < <(echo \"$RESULTS\" | sed -E 's/^([a-z]+)(.*)/\\\
    1,\"\\2\"/')\n  echo \"$RESULTS\"\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpefzkrby5.sh: line 19: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmpefzkrby5.sh: line 20: histogram.bash: command not found

    /tmp/tmpefzkrby5.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpefzkrby5.sh: line 20: local: `"[^"]+":(\?*)'': invalid variable name for
    name reference

    /tmp/tmpefzkrby5.sh: line 21: local: `0'': invalid variable name for name reference

    /tmp/tmpefzkrby5.sh: line 24: local: `'': not a valid identifier

    /tmp/tmpefzkrby5.sh: line 27: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letter count letters letter\n  letters=$1 count=0 letter=''\n  for letter in\
    \ $letters\n  do\n    if [ \"$letter\" == \"$letters\" ]\n    then\n      ((count++))\n\
    \    fi\n  done\n  echo \"\\\"$letter\\\"=\\\"$count\\\"\" |\n    sed \"s/'//g;s/\\\
    \"//g\" |\n    awk -F= '\n    {\n      a[$1]++\n      if (a[$1] > max) {\n   \
    \     max = $1\n      }\n    }\n    END {\n      for (i in a) {\n        print\
    \ \"\\\"$i\\\"=\\\"a\\\"\"\n      }\n    }'\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ counts={}\n  local input=$1\n  local count=${input//[[:space:]]/}\n  if [[ ${count}\
    \ == \"\" ]]; then\n    return {}\n  fi\n  local chars=${input//[[:space:]]/}\n\
    \  while read -r char; do\n    count=$((${counts[$char]}))\n  done < <(tr ' '\
    \ \"\\n\" <<< ${chars})\n  for char in ${!counts[@]}; do\n    counts[$char]=$((${counts[$char]}+1))\n\
    \  done\n  local key=\"${input:0:${#chars}}\" # truncate input string\n  local\
    \ result=${counts[$key]}\n  if [[ $result -gt 1 ]]; then\n    while read -r char;\
    \ do\n      result=${result}\" \"${counts[$char]}\n    done < <(tr ' ' \"\\n\"\
    \ <<< ${chars})\n  fi\n  printf '%s\\n' \"${!result}\"\n}\n\ncandidate() {\n \
    \   histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgef6dig6.sh: line 27: {}: syntax error: operand expected (error
    token is "{}")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=$1\n    local counter=()\n    for letter in ${letters//[[:space:]]/\
    \ }; do\n        counter[$letter]=$((${counter[$letter]} ? ${counter[$letter]}\
    \ : 0) + 1)\n    done\n    for letter in \"${!counter[@]}\"; do\n        echo\
    \ \"\\\"${letter}\\\"\"\": \"\\\"${counter[$letter]}\\\"\"\n    done\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5es7rg_k.sh: line 42: unexpected EOF while looking for matching
    `"''

    /tmp/tmp5es7rg_k.sh: line 46: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n\tlocal\
    \ letters counts\n\tletters=$1\n\tcounts=$( echo \"$letters\" | tr \" \" \"\\\
    n\" | sort -k 1 -n | tr \"\\n\" \" \" | uniq -c | sort -r -k 2 | tr \"\\n\" \"\
    \ \")\n\techo \"$letters\" | tr \" \" \"\\n\"\n\techo \"$counts\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n\tlocal\
    \ letters count\n\tread -r -a letters < <(echo \"$1\")\n\tcount=0\n\twhile read\
    \ letter; do\n\t\tlet \"count+=(${letters[*]})\"\n\tdone < <(echo \"${letters[@]}\"\
    )\n\techo \"${letters[@]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7b6iv2t3.sh: line 23: let: count+=(a b b a): missing `)'' (error
    token is "b b a)")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=\"$1\"\n    local counts={}\n    # sort -k 2 will sort by count,\
    \ with repeated letters first\n    for letter in ${letters//[[:space:]]+}; do\n\
    \        counts[${letter}]=$(echo \"${counts[${letter}]}\" | sed -e \"s/^/${letter}/g\"\
    \ -e \"s/$/1/\" -e \"s/$/${counts[${letter}]}/\")\n    done\n    local output\n\
    \    for letter in ${!counts[@]}; do\n        local count=${counts[${letter}]}\n\
    \        output=\"${output},\\\"${letter}\\\":\\\"${count}\\\"\"\n    done\n \
    \   echo \"${output}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ count\n  local letter\n\n  # Make sure a non-empty string is passed\n  if [\
    \ ! $1 ] ; then\n    return 0\n  fi\n\n  # Split the string into an array\n  IFS='\
    \ ' read -r -a array <<< \"$1\"\n\n  # Go through the letters of the array and\
    \ count the repetitions and add all\n  # letters that have a same occurrence\n\
    \  while read -r -e -d '' letter ; do\n    count=0\n    for i in \"${array[@]}\"\
    ; do\n      if [ \"$letter\" == \"$i\" ] ; then\n        (( count++ ))\n     \
    \ fi\n    done\n    case \"$count\" in\n      0) continue;;\n      1) echo \"\\\
    \"$letter\\\": \\\"$count\\\"\";;\n      *) echo \"\\\"$letter\\\": \\\"$count\\\
    \"\"\n    esac\n  done < <(sort -u <<<\"${array[@]}\")\n}\n\ncandidate() {\n \
    \   histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppuigx8gi.sh: line 23: [: too many arguments

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ STRING=\"$1\"\n  local MAP=\"{}\"\n\n  [[ -n \"${STRING}\" ]] || return $MAP\n\
    \n  # Split string by spaces\n  local WORDS_LIST=(${STRING//\" \"/ })\n  local\
    \ COUNT=0\n\n  for WORD in \"${WORDS_LIST[@]}\"; do\n    # Count how many times\
    \ each letter is in the word.\n    local COUNTER=$(echo $WORD | awk '{print $1}'\
    \ | sort | uniq -c)\n    (( COUNT+=${COUNTER[-1]} ))\n\n    # Store count in MAP\n\
    \    MAP=\"${MAP}'\"${WORD}\":\"'${COUNTER}'\"\n  done\n\n  echo $MAP\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgwk4inty.sh: line 53: unexpected EOF while looking for matching
    `"''

    /tmp/tmpgwk4inty.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -r str=$1 count\n  local ret={}\n  IFS=' ' read -r -a array <<<\"$str\"\n  for\
    \ str in \"${array[@]}\"; do\n    count=\"$(echo \"$str\" | tr \" \" \"\\n\" |\
    \ sort | uniq -c | sort -nr | head -1)\"\n    if [[ -z \"$count\" ]];then\n  \
    \    continue;\n    else\n      ret[$str]=\"$count\"\n    fi\n  done\n  echo \"\
    ${ret[@]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp36ybs3e4.sh: line 22: str: readonly variable

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=\"$1\" ; shift\n    local counter=0\n    local letter\n    local\
    \ count\n    local csv\n\n    # Convert letters to lower case.\n    letters=\"\
    $(echo \"$letters\" | tr [:upper:] [:lower:])\"\n\n    # Look for letters with\
    \ multiple occurrences.\n    while IFS= read -r letter || [[ -n \"$letter\" ]]\
    \ ; do\n        [[ \" ${!letters}\" =~ \"^ $letter \" ]] || continue\n       \
    \ (( count[$letter]++ ))\n    done < <(echo \"$letters\" | tr [:upper:] ' ' |\n\
    \              sort -u |\n              sed 's/ \\+/ /g' |\n              xargs)\n\
    \n    # Return an empty dictionary if no letters were found.\n    [[ ${#count[*]}\
    \ -eq 0 ]] && return 0\n\n    # Return the letter with the highest number of occurrences.\n\
    \    [[ -z ${count[*]} ]] && return 0\n    csv=\"$(IFS='\"'; echo \"${!count[*]}\"\
    )\"\n    [[ ${#csv} -gt 0 ]] && csv=\"$(echo \"$csv\" | sed 's/ /\",\"/g')\"\n\
    \    csv=\"$(echo \"$csv\" | tr '\"' ' ')\"\n    echo \"{\\\"${letters}\\\": \\\
    \"${csv}\\\"\"}\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp41r8xp95.sh: line 30: a b b a: invalid variable name

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters count letter\n    letters=\"\"\n    count=0\n    while read -r\
    \ letter; do\n        count=$(( $count + 1 ))\n        letters=\"$letters \\\"\
    $letter\\\"\" \n    done <<< \"$1\"\n    \n    local result\n    # Count how many\
    \ times each letter is repeated\n    mapfile -t result <<< \"$(echo \"$letters\"\
    \ | sed -e 's/ /\",\"/g' -e 's/^/\"/' -e 's/$/\"/' | sort -k 2 | uniq -c | sort\
    \ -k 1)\"\n    \n    # Return the letter with the highest count and the corresponding\
    \ count\n    printf '%s\\n' \"${result[@]:0:1}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local chars=\"$1\"\n    local charcount\n    local sorted\n    local temp\n\
    \    local output\n    local letter\n    local count\n    local tmp\n    # sort\
    \ by count\n    for char in $chars; do\n        charcount=$((${#chars[@]}-1))\n\
    \        if [[ \"$charcount\" -gt \"0\" ]]; then\n            ((charcount--))\n\
    \            sorted=( \"${sorted[@]}\" \"$char\")\n        fi\n    done\n    #\
    \ build output\n    output=\"{}\"\n    for letter in \"${sorted[@]}\"; do\n  \
    \      count=$(echo $chars | grep -o \"$letter\" | wc -c)\n        if [[ $count\
    \ -gt 1 ]]; then\n            output=\"$(echo $output | sed -e \"s/$letter/\\\"\
    $letter\\\",\\\"$count\\\"/\")\"\n        else\n            output=\"$(echo $output\
    \ | sed -e \"s/$letter/\\\"$letter\\\"/\")\"\n        fi\n    done\n    echo \"\
    $output\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ string=$1\n  local count letter\n  local -A counts\n  local -A letter\n  while\
    \ read letter; do\n    counts[$letter]+=$1\n  done <<< \"$string\"\n  for letter\
    \ in \"${!counts[@]}\"; do\n    count=\"${counts[$letter]}\"\n    if [[ -z $letter\
    \ ]]; then\n      echo \"$count\"\n    else\n      echo \"$letter:$count\"\n \
    \   fi\n  done\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letter count\n    count=0\n    IFS=$'\\n'\n    declare -A histogram\n\
    \    local -n letters=$1\n    for letter in ${!letters[@]}; do\n        (( histogram[$letter]++\
    \ ))\n    done\n    IFS=\n    for letter in ${!histogram[@]}; do\n        printf\
    \ '%q;%s' \"$letter\" \"${histogram[$letter]}\"\n    done\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpllo3b5vc.sh: line 23: local: `a b b a'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local counts=()\n    local letters=()\n    local max=0\n    local min=${#letters[@]}\n\
    \    for (( i=0; i<${#1}; i++ )); do\n        local count=0\n        for (( j=0;\
    \ j<${#letters[@]}; j++ )); do\n            (( ${letters[j]} == ${1:$i:1} )) &&\
    \ let count++\n        done\n        (( count > max )) && max=count\n        ((\
    \ count < min )) && min=count\n        counts[${1:$i:1}]=\"${count:+${count}}\"\
    \n    done\n    for (( j=0; j<${#letters[@]}; j++ )); do\n        letters[$j]=\"\
    ${letters[$j]:0:${min}-${max}}\"\n    done\n    echo ${letters[@]}\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local count\n    local max_val\n    local max_key\n    local letter\n    local\
    \ line\n    local new_line\n    local result\n\n    count=$(df -h | awk '{print\
    \ $3}' | cut -c-6)\n\n    lets=\"\"\n    max_val=0\n    max_key=\"\"\n\n    while\
    \ read -r line; do\n        lets=$lets \"$(echo \"${line}\" | tr '[:lower:]' '[:upper:]')\"\
    \n    done < <(echo \"${1}\" | tr \" \" \"\\n\")\n\n    for key in \"${!lets:-}\"\
    ; do\n        line=\"${lets:-,$key}\"\n        new_line=\"$line,$count\"\n   \
    \     if [[ $count -gt $max_val ]]; then\n            max_val=$count\n       \
    \     max_key=\"$key\"\n        fi\n        lets=\"\"\n    done <<< \"$new_line\"\
    \n\n    result=\"{\"\n    for key in \"${!lets:-}\"; do\n        result=\"$result\
    \ \\\"$key\\\": \\\"$((${!max_key}-$count+1))\\\", \"\n    done <<< \"$result\"\
    \n    echo -n \"$result}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxk4r0zbj.sh: line 34: A: command not found

    /tmp/tmpxk4r0zbj.sh: line 34: B: command not found

    /tmp/tmpxk4r0zbj.sh: line 34: B: command not found

    /tmp/tmpxk4r0zbj.sh: line 34: A: command not found

    /tmp/tmpxk4r0zbj.sh: line 37: : invalid variable name

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n\tlocal\
    \ IFS=' '\n\tlocal histo=\"${1// /|}\"\n\tlocal max\n\tlocal temp\n\tlocal i\n\
    \tlocal count\n\tlocal temp1\n\tlocal letter\n\tlocal count1\n\tlocal max1\n\t\
    local maxLetter\n\tlocal minCount\n\tlocal maxCount\n\tlocal countLetter\n\tlocal\
    \ maxCountLetter\n\tlocal maxCountLetterCount\n\tlocal maxLetterCount\n\tlocal\
    \ maxLetterCountLetter\n\tlocal maxLetterCountLetterCount\n\tlocal maxLetterCountLetterCountLetter\n\
    \tlocal maxLetterCountLetterCountLetter\n\tlocal maxLetterCountLetterCountLetterLetter\n\
    \n\thisto=\"${histo// /|}\"\n\thisto=\"${histo//|/ }\"\n\tfor ((i=0; i < ${#histo};\
    \ i++)); do\n\t\ttemp=\"${histo:$i:1}\"\n\t\tcount=\"1\"\n\t\tfor ((j=0; j < ${#temp};\
    \ j++)); do\n\t\t\tletter=\"${temp:$j:1}\"\n\t\t\ttemp1=\"${histo:$i:$j}\"\n\t\
    \t\tcount1=\"1\"\n\t\t\tfor ((k=0; k < ${#temp1}; k++)); do\n\t\t\t\ttemp2=\"\
    ${temp1:$k:1}\"\n\t\t\t\tif [ \"${histo:$i:$j:$k}\" == \"${histo:$i:$j:$k}\" ];\
    \ then\n\t\t\t\t\tcount1=\"${count1}\"\n\t\t\t\telse\n\t\t\t\t\tcount1=\"${count1}${#temp2}\"\
    \n\t\t\t\tfi\n\t\t\tdone\n\t\t\tif [[ \"${count}\" -gt \"${count1}\" ]]; then\n\
    \t\t\t\tcount=\"${count1}\"\n\t\t\telif [[ \"${count}\" -lt \"${count1}\" ]];\
    \ then\n\t\t\t\tcount=\"${count1}\"\n\t\t\tfi\n\t\tdone\n\t\tif [[ \"${count}\"\
    \ -lt \"${minCount}\" ]]; then\n\t\t\tminCount=\"${count}\"\n\t\tfi\n\t\tif [[\
    \ \"${count}\" -gt \"${maxCount}\" ]]; then\n\t\t\tmaxCount=\"${count}\"\n\t\t\
    fi\n\tdone\n\techo \"${histo//|/ }\"\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # Count letters occurring in the string.\n    # Example histogram:\n    #\n\
    \    # $ histogram\n    # {}\n    # $ histogram \"a b c a b\"\n    # {'\"a\"':\
    \ '\"2\"', '\"b\"': '\"2\"', '\"c\"': '\"1\"'}\n    # $ histogram \"a b b a a\"\
    \n    # {'\"a\"': '\"1\"', '\"b\"': '\"2\"'}\n    # $ histogram \"a b c a b a\"\
    \n    # {'\"a\"': '\"2\"', '\"b\"': '\"4\"'}\n    # $ histogram \"a b c a b b\
    \ a a\"\n    # {'\"a\"': '\"2\"', '\"b\"': '\"4\"'}\n    # $ histogram \"a b a\
    \ b c a b a a\"\n    # {'\"a\"': '\"1\"', '\"b\"': '\"4\"'}\n    # $ histogram\
    \ \"a b a b c a b a a b c a b\"\n    # {'\"a\"': '\"1\"', '\"b\"': '\"5\"'}\n\
    \    # $ histogram \"a b a b c a b a a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b\"\n    # {'\"a\"': '\"1\"', '\"b\"': '\"5\"'}\n    # $ histogram \"\
    a b a b c a b a a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\"\n\
    \    # {'\"a\"': '\"1\"', '\"b\"': '\"5\"'}\n    # $ histogram \"a b a b c a b\
    \ a a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\"\n    # {'\"\
    a\"': '\"1\"', '\"b\"': '\"5\"'}\n    # $ histogram \"a b a b c a b a a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b\"\n    # {'\"a\"': '\"1\"\
    ', '\"b\"': '\"5\"'}\n    # $ histogram \"a b a b c a b a a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b\"\n    # {'\"a\"': '\"1\"\
    ', '\"b\"': '\"5\"'}\n    # $ histogram \"a b a b c a b a a b c a b c a b c \n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmponljp2jj.sh: line 47: syntax error near unexpected token `}''

    /tmp/tmponljp2jj.sh: line 47: `}''

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=$1\n\n    local histo={}\n    local letter=\"\"\n    local count=0\n\
    \n    for letter in ${letters//[^ ]} \n    do\n        count=0\n        local\
    \ letterCount=0\n        for letter in ${letters//[^ ]}\n        do\n        \
    \    ((letterCount++))\n            if [ ${histo[$letter]} == \"0\" ] \n     \
    \       then\n                histo[$letter]=$count\n            else\n      \
    \          histo[$letter]=$(expr ${histo[$letter]} + $count)\n            fi\n\
    \            ((count++))\n        done\n    done\n    for letter in ${histo[@]}\n\
    \    do\n        histo[$letter]=$count\n    done\n    echo $histo\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmer5sbrh.sh: line 43: {}: syntax error: operand expected (error
    token is "{}")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ Split $1 into an array of its letters.\n  local arr=(${1//[[:space:]]})\n\n\
    \  # Sort arr.\n  local sorted=()\n  for i in ${arr[@]}; do\n    sorted+=(${sorted[${#sorted[@]}]}${i})\n\
    \  done\n\n  # Turn it into a hash where the keys are the sorted array elements\
    \ and\n  # values are the respective counts.\n  local hash=()\n  for i in ${sorted[@]};\
    \ do\n    hash+=(${hash[${#hash[@]}]}=\"${i}\")\n  done\n\n  # Return the hash's\
    \ keys and values.\n  IFS=','\n  local sorted=(\"${!hash[@]}\")\n  IFS='\"'\n\
    \  echo -n \"${sorted[*]}\"\n  echo -n \",\"\n  echo -n \"${hash[*]}\"\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=$1\n    local counts\n    local max\n    local output\n    counts=$(echo\
    \ $letters | tr \" \" \"\\n\" | sort | uniq -c | sort -n -r)\n    max=$(( ${counts:#0}\
    \ > $2 ? ${counts:#0} : $2 ))\n    output=$(echo $letters | tr \" \" \"\\n\" |\
    \ sort | uniq -c | sort -n -r | sed 's/^/'\"$1\"'/' | awk -F: '{print $1\"=\"\
    $2}' | grep -n --before-context=1 \"$1\" | awk -F: '{print $1}' | head -n $max)\n\
    \    while IFS= read -r line; do\n\toutput+=\"\\n\\\"$line\\\"=\\\"${counts:#$line}\\\
    \"\"\n    done <<< \"$output\"\n    echo \"$output\"\n}\n\ncandidate() {\n   \
    \ histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe2e89pyf.sh: line 24: counts: #0: syntax error: operand expected
    (error token is "#0")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n  local -n histogram=histogram\n  local -n histogram=histogram\n\
    \  local -n histogram=histogram\n\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplv4fr668.sh: line 19: local: warning: histogram: circular name
    reference

    /tmp/tmplv4fr668.sh: line 19: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 20: local: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 20: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 20: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 20: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 21: local: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 21: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 21: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 21: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 22: local: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 22: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 22: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 22: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 23: local: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 23: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 23: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 23: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 24: local: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 24: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 24: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 24: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 25: local: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 25: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 25: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 25: warning: histogram: circular name reference

    /tmp/tmplv4fr668.sh: line 26: local: warning: histogram: circular name refe'
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ lowercases\n  lowercases=$(echo $1 | tr ' ' _)\n  echo \"${lowercases}\" | sort\
    \ | uniq -c | sort -nr | head -n $2 | tr -s '_'\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'head: option requires an argument -- ''n''

    Try ''head --help'' for more information.

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ \"$1\" | sort -u | tr ' ' ',' | sed 's/,$//' | tr ',' '\\n' | sort | uniq -c\
    \ | sort -r -k2 | tail -n 1\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -i maxcount=$1 count='1' countline='\"1\"' histo='{\"'$1'\": \"'$countline'\"\
    '}' histoline=''\n  local -i keys=\"$( IFS=' ' ; set -- $2; echo $1 $2 $3 )\"\n\
    \  histoline=\"$histoline\"\n  histoline=\"$histoline$countline\"\n  for key in\
    \ $keys; do\n    histoline=\"$histoline\"\n    histoline=\"$histoline$count\"\n\
    \    histoline=\"$histoline\"\n    histo=\"$histo$key$histoline\"\n  done\n  histo=\"\
    $histo}\"\n  histo=\"${histo//\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\
    \"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"\
    /\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\
    \\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\
    \"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\
    \"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\
    \"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\
    \"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\
    \"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\
    \"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\
    \"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\
    \"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\
    \"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\
    \"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\
    \"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\
    \"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\"\\\"/\\\"\\\"}\"\n  histo=\"${histo//\\\
    \"\\\"/\\\"\\\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn084r9yh.sh: line 20: unexpected EOF while looking for matching
    `''''

    /tmp/tmpn084r9yh.sh: line 81: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local string=$1\n    local count=1\n    local sortedKeys\n    local sortedValues\n\
    \    local output=''\n    sortedKeys=$(sort -k 1 <<< \"$string\" | uniq -c | sort\
    \ -n -r -k 2 | cut -d \" \" -f 1)\n    if [ -z \"$sortedKeys\" ]; then\n     \
    \   sortedKeys=$(echo \"$string\" | sed \"s/[[:space:]]//g\")\n    fi\n    sortedValues=$(echo\
    \ \"$string\" | sed \"s/[[:space:]]//g\" | sort -k 2 | uniq -c)\n    for ((i=0;\
    \ i<${#sortedKeys}; i++)); do\n        local key=${sortedKeys[i]}\n        local\
    \ value=${sortedValues[i]}\n        if [[ \"$output\" = '' ]]; then\n        \
    \    local firstChar=$(echo \"$key\" | cut -c1)\n            local lastChar=$(echo\
    \ \"$key\" | cut -c2)\n            local middle=$(echo \"$key\" | cut -c3,2)\n\
    \            local firstMiddle=$(echo \"$middle\" | cut -c1)\n            local\
    \ lastMiddle=$(echo \"$middle\" | cut -c2)\n            local firstLast=$(echo\
    \ \"$last\" | cut -c1)\n            local lastLast=$(echo \"$last\" | cut -c2)\n\
    \            local firstMidLast=$(echo \"$lastMiddle\" | cut -c1)\n          \
    \  local lastMidLast=$(echo \"$lastMiddle\" | cut -c2)\n            local firstLastLast=$(echo\
    \ \"$lastLast\" | cut -c1)\n            local lastLastLast=$(echo \"$lastLast\"\
    \ | cut -c2)\n            local firstMidLastLast=$(echo \"$lastMidLast\" | cut\
    \ -c1)\n            local lastMidLastLast=$(echo \"$lastMidLast\" | cut -c2)\n\
    \            local firstLastMidLast=$(echo \"$lastMidLastLast\" | cut -c1)\n \
    \           local lastMidLastMidLast=$(echo \"$lastMidLastLast\" | cut -c2)\n\
    \            local firstMidLastMidLast=$(echo \"$lastMidLastMidLast\" | cut -c1)\n\
    \            local lastMidLastMidLast=$(echo \"$lastMidLastMidLast\" | cut -c2)\n\
    \            local firstLastMidMidMidLast=$(echo \"$lastMidLastMidLast\" | cut\
    \ -c1)\n            local lastMidLastMidLast=$(echo \"$lastMidLastMidLast\" |\
    \ cut -c2)\n            local firstMidLastMidMidLast=$(echo \"$lastMidLastMidLast\"\
    \ | cut -c1)\n            local lastMidLastMidLast=$(echo \"$lastMidLastMidLast\"\
    \ | cut -c2)\n            local firstMidLastMidMid\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpokoxpwum.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmpokoxpwum.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"${1:-}\"\n\n  if [[ $letters = \"\" ]]; then\n    echo {}\n    return\n\
    \  fi\n\n  local -a letters_sorted=($(echo $letters | tr ' ' '\\n' | sort | uniq))\n\
    \n  local -a counts=()\n  for letter in \"${letters_sorted[@]}\"; do\n    counts[$letter]=\"\
    ${counts[$letter]}\" || 1\n  done\n\n  local -a sorted_counts=()\n  local -a sorted_letters=()\n\
    \  for letter in \"${!counts[@]}\"; do\n    sorted_counts[$letter]=\"${sorted_counts[$letter]}\"\
    \ $counts[$letter]\n    sorted_letters[$letter]=\"${sorted_letters[$letter]} \\\
    \"$letter\\\"\"\n  done\n\n  echo {$(echo \"${sorted_counts[*]}\" | tr ' ' '\\\
    n' | sort -nr | tr -s ' ' | tr '\\n' ',')}\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnx1kioo_.sh: line 36: `sorted_counts[$letter]'': not a valid identifier

    /tmp/tmpnx1kioo_.sh: line 36: 0: command not found

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local count\n    local str\n    IFS=$'\\n' read -d '' -ra str <<< \"${1}\"\n\
    \    count=\"-$(echo \"${str[*]}\" | tr ' ' '\\n' | sort -u | wc -l)\"\n    echo\
    \ -n '{' >&2\n    for s in \"${str[@]}\"; do\n        echo -n \"${s},${count}\"\
    \ >&2\n    done\n    echo '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '{a b b a,-2'
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"$1\"\n  local count\n  local max=\"-1\"\n  local maxletter=\"\"\n\
    \  local maxcount=\"-1\"\n  local output=$(IFS=', ' read -r -a counts <<< \"${letters//,/\
    \ }\")\n  for ((i=0; i<${#counts[*]}; i++)); do\n    letter=\"${counts[$i]}\"\n\
    \    if [ \"$max\" == \"-1\" ]; then\n      max=$count\n      maxletter=$letter\n\
    \      maxcount=$count\n    else\n      if [ \"$count\" -gt \"$max\" ]; then\n\
    \        max=$count\n        maxletter=$letter\n        maxcount=$count\n    \
    \  fi\n    fi\n  done\n  echo \"${maxletter},${maxcount}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ ! -z \"$1\" ]; then\n    local hash=\n    local letters=\n\n    hash=$(echo\
    \ \"$1\" | sed 's/ /;/g' | sort | uniq -c)\n    letters=\"$(echo \"$1\" | sed\
    \ 's/ /;/g' | sort | uniq)\" \n\n    for element in $hash; do\n      hash[$element]=$(echo\
    \ $hash[$element] | awk '{print $1\":\"$2}')\n    done\n\n    local result=\n\
    \    local tmp=\n    for element in $letters; do\n      if [[ ${#hash[$element]}\
    \ -gt 0 ]]; then\n        result =\"${result}\\\"${element}\\\"\"\n        local\
    \ counter=0\n        for element in $hash[$element]; do\n          counter=$((counter\
    \ + 1))\n        done\n        local result=$(echo \"${result}\\\"${counter}\\\
    \"\")\n      else\n        local result=$element\n      fi\n    done\n    echo\
    \ $result\n  else\n    echo \"Empty input\"\n  fi\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp04mxmmi.sh: line 27: a;b;b;a: syntax error: invalid arithmetic
    operator (error token is ";b;b;a")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ str=$1\n  local histo\n  histo=($(echo \"$str\" | tr \" \" \"\\n\" | sort |\
    \ uniq -c | sort -rn | cut -d' ' -f1- | tr '\\n' ' '))\n  local max=\"\"\n  local\
    \ maxcount=0\n  local maxkey=\"\"\n  for k in \"${histo[@]}\"\n  do\n    ((maxcount+=(${#k})))\
    \ \n    if [[ \"$max\" == \"\" || ($maxcount -gt $max) ]]\n    then\n      maxcount=$maxcount\n\
    \      maxkey=$k\n      max=$maxcount\n    fi\n  done\n  printf '%s,%s\\n' \"\
    ${maxkey}\" \"${max}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: -1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local i ret={}\n    local letters=\"\"\n    for i in $*; do\n        case \"\
    $i\" in\n            \"\") ;;\n            *) letters=\"$letters $i\" ;;\n   \
    \     esac\n    done\n    if [ -z \"$letters\" ]; then\n        echo \"{}\" >\
    \ /dev/null\n    else\n        sort -u | uniq -c | sort -k 2 | sed 's/^ *//' |\
    \ sed 's/ *$//' > $TEMP/histogram.$$\n        while read -r line; do\n       \
    \     set -- $line\n            if [ \"$#\" -eq 1 ]; then\n                let\
    \ ret[$1]=\"$2\"\n            else\n                let ret[\"$letters\"]=\"$ret[\"\
    $letters\"]$2\"\n            fi\n        done < $TEMP/histogram.$$\n        rm\
    \ -f $TEMP/histogram.$$\n    fi\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=5 encoding='utf-8'>
  timestamp: 1660057879
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local item\n    local count\n    local histogram\n\n    histogram=()\n    for\
    \ item; do\n        [[ $item =~ ^([[:alpha:]]*) ]] || continue\n        count=${#item}\n\
    \        [[ ${histogram[${item}]} ]] || histogram[${item}]=${count}\n    done\n\
    \    echo ${histogram[@]}\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu8ix73lj.sh: line 27: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -r str=\"$1\"\n  local -a histo=()\n  local cnt=\"${#str}\"\n  for ((i = 0;\
    \ i < $cnt; i++)); do\n    local c=\"${str:$i:1}\"\n    histo+=(\"\\\"$c\\\":\
    \ \\\"$(( ${!c} + 1 ))\\\")\"\n  done\n  echo \"${histo[@]}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdt3qdl7v.sh: line 29: syntax error near unexpected token `(''

    /tmp/tmpdt3qdl7v.sh: line 29: `candidate() {''

    /tmp/tmpdt3qdl7v.sh: line 30: histogram: command not found

    /tmp/tmpdt3qdl7v.sh: line 31: syntax error near unexpected token `}''

    /tmp/tmpdt3qdl7v.sh: line 31: `}''

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ counts={}\n  local letters=$1 \n\n  for letter in $letters\n  do\n    if ! [[\
    \ ${counts[$letter]} ]]; then\n      counts[$letter]=\"1\"\n    else\n      counts[$letter]+=1\n\
    \    fi\n  done\n  local sorted_letters=$(echo $(( $(sort ${!counts[@]}) - 1 ))\
    \ | xargs printf \"%q\")\n\n  local csv='\"'\n  for letter in $sorted_letters\n\
    \  do\n    csv+=$letter\n    csv+=\",\"\n  done\n  csv+=\"'\"\n\n  echo -n \"\
    {\"\n  for letter in $sorted_letters\n  do\n    echo -n \"$letter \"\n    echo\
    \ -n ${counts[$letter]}\n    echo -n \":\"\n  done\n  echo -n \"}\"\n  echo -n\
    \ \" $(echo $(( $(sort ${!counts[@]}) - 1 )) | xargs printf \"%q)\"\n\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz3mfkvlb.sh: line 48: unexpected EOF while looking for matching
    `)''

    /tmp/tmpz3mfkvlb.sh: line 69: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local string=\"$1\"\n    local histo\n    if ! echo \"$string\" | grep -qE '^[a-z]+$';\
    \ then\n        echo \"$string\" | sed -e 's/ /\" \"/g' -e 's/$/ \"0\"/' -e 's/^/\
    \ \"/' -e 's/$/\"0\"/' >&2\n        return 1\n    fi\n    histo=$(echo \"$string\"\
    \ | awk '{ for(i=1; i<=NF; i++) arr[$i]++; print arr[$NF] }')\n    echo -n \"\
    ${histo%\" \"}$histo\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ' "a" "b" "b" "a "0""0"

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local csv\n    local counts\n    local letter\n    local maxcount\n    local\
    \ maxletter\n    local count\n\n    if [[ \"$1\" == \"\" ]]; then\n        return\
    \ {}\n    fi\n\n    csv=$(echo $1 | tr \" \" \"\\n\")\n    counts=$(echo $1 |\
    \ tr \"\\n\" \" \")\n    counts=$(echo $counts | tr \"\\r\" \"\")\n    counts=$(echo\
    \ $counts | tr \"\\n\" \" \")\n    counts=$(echo $counts | tr \"\\r\" \"\")\n\
    \    counts=$(echo $counts | tr \" \" \",\")\n    counts=$(echo $counts | tr \"\
    \\n\" \" \")\n    counts=$(echo $counts | tr \"\\r\" \"\")\n    counts=$(echo\
    \ $counts | tr \" \" \",\")\n    counts=$(echo $counts | tr \"\\n\" \" \")\n \
    \   counts=$(echo $counts | tr \"\\r\" \"\")\n\n    for ((i = 0; i < $((${#csv}-1));\
    \ i++)); do\n        letter=$(echo $csv | cut -d\" \" -f$i)\n        if [[ $counts\
    \ == \"${counts[$i]}\" ]]; then\n            counts=\"${counts},\"\n        else\n\
    \            counts=$counts\",\"\n        fi\n    done\n\n    maxletter=$(echo\
    \ $counts | awk -F \",\" '{print $NF}')\n    maxcount=$(awk -F, '{print $NF}'\
    \ <<< $maxletter)\n\n    for ((i = 0; i < ${#csv}; i++)); do\n        letter=$(echo\
    \ $csv | cut -d\" \" -f$i)\n        if [[ $counts == $maxcount ]]; then\n    \
    \        echo \"$letter,$maxcount\"\n        fi\n    done\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'tr: when not truncating set1, string2 must be non-empty

    tr: when not truncating set1, string2 must be non-empty

    tr: when not truncating set1, string2 must be non-empty

    tr: when not truncating set1, string2 must be non-empty

    cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local i l m n\n    declare -A count\n    local str=$1 strlen=${#str}\n    for\
    \ ((i=0; i<$strlen; i++)); do\n        l=${str:$i:1}\n        count[$l]+=1\n \
    \   done\n    IFS=$'\\n' read -ra sorted_count < <(\n        IFS=$'\\n' set -f\n\
    \        for m in ${!count[*]}; do\n            n=\"${count[$m]}\"\n         \
    \   echo -n $m$'\\t'\"'\"${n}\"$'\\t'\"'\"\n        done\n    )\n    if [ -n \"\
    $1\" ]; then\n        echo \"$sorted_count[$1]\"\n    fi\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppl4lwwfs.sh: line 30: unexpected EOF while looking for matching
    `''''

    /tmp/tmppl4lwwfs.sh: line 55: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local max=\"\"\n    local maxcount=0\n    local counts=$(echo \"$1\" | tr '\
    \ ' '\\n')\n    for word in $counts; do\n        count=$(echo \"$1\" | tr \" \"\
    \ '\\n' | grep -c \"$word\")\n        if [ \"$max\" == \"\" ] ; then\n       \
    \     max=\"$word\"\n            maxcount=$count\n        elif [ \"$count\" -gt\
    \ \"$maxcount\" ] ; then\n            max=\"$word\"\n            maxcount=$count\n\
    \        fi\n    done\n    echo \"$max\":\"$maxcount\n}\n\ncandidate() {\n   \
    \ histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3gdyc51x.sh: line 48: unexpected EOF while looking for matching
    `"''

    /tmp/tmp3gdyc51x.sh: line 52: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ lower=\"$(echo \"$1\" | tr \"[:lower:]\" \"[:upper:]\")\"\n  local count\n \
    \ local counts\n  # Count the letters in lower\n  count=\"$(echo \"$lower\" |\
    \ uniq -c)\"\n  # Keep only the letter that occurred the most times and store\
    \ its count in a dictionary\n  counts=$(echo \"$count\" | sed -E 's/^([0-9]+).*$/\\\
    1/' | sort -n | tail -1)\n  # Now create the dictionary\n  while read -r letter;\
    \ do\n    if [ \"$count\" -gt \"$counts\" ]; then\n      count=\"$counts\"\n \
    \     lower=\"$letter\"\n    fi\n  done <<< \"$lower\"\n  echo \"\\\"$lower\\\"\
    :\"\\\"$count\\\"\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpogb2zlzm.sh: line 49: unexpected EOF while looking for matching
    `"''

    /tmp/tmpogb2zlzm.sh: line 53: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local counts=()\n    for (( i = 0; i < $#; i++ )); do\n        local letter=${!i}\n\
    \        counts[$letter]+=1\n    done\n\n    local sorted=()\n    for (( i = 0;\
    \ i < ${#counts[*]}; i++ )); do\n        sorted+=(\"${!i}\")\n    done\n    local\
    \ result=()\n    for (( i = 0; i < ${#sorted[*]}; i++ )); do\n        result+=(\"\
    ${sorted[$i]}\" \"${counts[$sorted[$i]]}\")\n    done\n\n    echo \"${result[*]}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0d_9l0ho.sh: line 22: /tmp/tmp0d_9l0ho.sh: syntax error: operand
    expected (error token is "/tmp/tmp0d_9l0ho.sh")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n\tlocal\
    \ str=\"$1\" counts=\"\"\n\tlocal letters=\"\"\n\tlocal count=0\n\tlocal max=0\n\
    \n\tif [ -z \"$str\" ]; then\n\t\treturn 1\n\tfi\n\n\tstr=${str//' '}\n\tstr=${str//$'\\\
    n'}\n\n\t# Split the string into an array of space-separated lowercase letters\n\
    \t# and count each occurrence of the letter, storing the count in $count\n\t#\
    \ and the letter in $letter\n\twhile read -r letter; do\n\t\tletters+=${letter//\
    \ }\n\t\tlet count++\n\tdone <<< \"$str\"\n\n\t# Store the letter with the largest\
    \ count in $max and all others in $letters\n\tfor letter in $letters; do\n\t\t\
    let max=$(( ${counts[${letter}]} > ${max} ? ${counts[${letter}]} : ${max} ))\n\
    \t\tcounts[${letter}]=${max}\n\tdone\n\n\t# Return the counts array\n\tprintf\
    \ '%s\\n' \"${!counts[@]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvv4a5f_y.sh: line 41: > 0 ?  : 0 : syntax error: operand expected
    (error token is "> 0 ?  : 0 ")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n\tlocal\
    \ STRING=$1\n\tlocal CHARS=`echo $STRING | tr '[A-Za-z]' '[A-Za-z0-9]'`\n\tlocal\
    \ COUNT=`echo $STRING | tr ' ' '\\n' | sort | uniq -c`\n\n\tif [[ ${COUNT} ==\
    \ \"\" ]]\n\tthen\n\t\techo \"$STRING\"\n\t\treturn\n\tfi\n\n\tlocal MAX=0\n\t\
    local KEY=\"\"\n\tfor key in $COUNT\n\tdo\n\t\tif [[ ${COUNT[$key]} -gt ${MAX}\
    \ ]]\n\t\tthen\n\t\t\tMAX=${COUNT[$key]}\n\t\t\tKEY=$key\n\t\tfi\n\tdone\n\n\t\
    echo \"$STRING\" | sed \"s/$CHARS/$COUNT[$KEY]/\" |\n\tawk -v RS=, '{for (i=1;\
    \ i<=NF; i++) print $i}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmplh3fivs2.sh: line 33: [[: 2 a\n      2 b: syntax error in expression\
    \ (error token is \"a\n      2 b\")\n/tmp/tmplh3fivs2.sh: line 33: [[: 2 a\n \
    \     2 b: syntax error in expression (error token is \"a\n      2 b\")\nsed:\
    \ -e expression #1, char 19: unterminated `s' command\n"
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ Split a string of lowercase letters into a space-separated list.\n  local IFS=\"\
    \ \" line\n  local count\n  local letter\n  read -a line < <(echo \"$1\" | tr\
    \ ' ' '\\n')\n  # Count occurrences of each letter in the string.\n  while read\
    \ letter; do\n    ((count[$letter])++)\n  done <<< \"${line[@]}\"\n  # Return\
    \ the most frequent letter (if several letters have the same occurrence).\n  #\
    \ Otherwise, return the list of all letters sorted by count.\n  echo \"${!count[@]}\"\
    \ | sort -n | sed -E \"s/^'([^']+)'$/'\"$(echo \"${count[@]}\" | sort -n)\"'/\"\
    \ \\\n    | paste -sd \",\" -\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwy41eb3j.sh: line 26: syntax error near unexpected token `++''

    /tmp/tmpwy41eb3j.sh: line 26: `    ((count[$letter])++)''

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=\"$1\"\n    local count_hash\n    local count_key\n    local count\n\
    \    count_hash=()\n    count_key=$1\n    count=${count_hash[\"$count_key\"]}\n\
    \    count_hash[\"$count_key\"]=$((count+1))\n    while IFS=$'\\n' read -r letter;\
    \ do\n        count_key=$letter\n        count=${count_hash[\"$count_key\"]}\n\
    \        count_hash[\"$count_key\"]=$((count+1))\n    done <<< \"$letters\"\n\
    \    for k in \"${!count_hash[@]}\"; do\n        echo \"\\\"$k\\\"\"\n    done\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2hhy732o.sh: line 25: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: -1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local str\n    local -n histogram=mapfile | sed -n 's/^.* //p'\n    local -n\
    \ result=mapfile | sed 's/^[^=]*=//'\n\n    # count occurrences of each letter\n\
    \    IFS=\" \" read -a str <<< \"$1\"\n    for i in \"${!str[@]}\"; do\n     \
    \   histogram[${str[i]}]=\"$(grep -c \"${str[i]}\" \"${histogram[@]}\")\"\n  \
    \  done\n\n    # sort and remove duplicates\n    IFS=\", \" read -a str <<< \"\
    ${result[@]}\"\n    for i in \"${!str[@]}\"; do\n        sorted=\"${sorted},${str[i]}\"\
    \n    done\n    sorted=( ${sorted:1} )\n    IFS=\", \" read -a str <<< \"${sorted[@]}\"\
    \n\n    # print CSV results\n    echo -n \"{\"\n    for i in \"${!str[@]}\"; do\n\
    \        printf \"%q\" \"${str[i]}\"\n        printf \"\\\"%q\\\"=\\\"\", ${histogram[${str[i]}]}\n\
    \    done\n    echo -n \"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=55 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=49 encoding='utf-8'>
  timestamp: 1660057879
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n\tlocal\
    \ input=\"$1\"\n\n\tlocal letters=\"${input// / }\"\n\tIFS=\" \" read -r -a array\
    \ <<< \"${letters}\"\n\tlocal counts=()\n\tfor i in \"${array[@]}\"; do\n\t\t\
    (( counts[i]++ ))\n\tdone\n\tprintf \"%q\\n\" \"${array[@]}\"\n\tprintf \"%q\\\
    n\" \"${counts[@]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=\"${1:-}\"\n    local letter\n    local frequency\n\n    letters=$(echo\
    \ \"${letters}\" | tr '[:upper:]' '[:lower:]')\n    local histogram\n    local\
    \ count\n\n    counts=()\n    for letter in ${letters//[[:space:]]/}; do\n   \
    \     letter=\"${letter//[[:space:]]/}\"\n        count=$(echo \"${counts[@]}\"\
    \ | grep \"^${letter}$\" | wc -c)\n        if [ ! -z \"$count\" ]; then\n    \
    \        frequency=$(echo \"${counts[@]}\" | awk -F: '{print $2}')\n         \
    \   frequency=\"${frequency%?}\"\n            count=\"${count%?}\"\n        fi\n\
    \        histograms+=(\"$letter\":\"$count\")\n        counts[${#counts[@]}]=$count\n\
    \    done\n\n    histogram=$(echo \"${histograms[*]}\" | tr ' ' '\\n' | sort -u\
    \ | sed 's/^/\"/' | sed 's/$/\"/')\n    histogram=${histogram//,/\\\",\\\"}\n\
    \    histogram=${histogram//\\\"/\\\"}\n\n    echo \"$histogram\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n\techo\
    \ \"$1\" | awk '{n=split($1,a,\" \"); \n           for(i=1; i<=n; i++) {\n   \
    \          if (a[i] in acount) \n               acount[a[i]]++\n             else\n\
    \               acount[a[i]]=1\n           }\n           for(key in acount) \n\
    \             print key, acount[key]\n         }'\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ count\n  local histogram\n\n  local letter=\"$1\" # lowercase letters\n  local\
    \ letters_count\n  local letters_count_line\n  local letters_count_line_count\n\
    \  local letters_count_line_max\n  local letters_count_line_max_count\n  local\
    \ letters_count_line_max_letter\n  local max_letter\n  local max_letter_count\n\
    \  local max_letter_count_line\n  local max_letter_count_line_count\n  local max_letter_count_line_max\n\
    \  local max_letter_count_line_max_count\n  local max_letter_count_line_max_letter\n\
    \  local max_letter_count_line_max_letter_count\n\n  local max_letter_count=0\n\
    \  local max_letter_count_line=0\n  local max_letter_count_line_count=0\n  local\
    \ max_letter_count_line_max=0\n  local max_letter_count_line_max_count=0\n  local\
    \ max_letter_count_line_max_letter=\"\"\n  local max_letter_count_line_max_letter_count=0\n\
    \n  local line_count\n  local line_max=0\n\n  # Remove spaces and quotation marks\
    \ from the letter\n  letter=$(echo \"$letter\" | sed 's/\\\"//g;s/^[[:space:]]*//;s/[[:space:]]*$//')\n\
    \n  histogram={}\n  for letter in \"$letter\"; do\n    letters_count=0\n    letters_count_line=\"\
    \"\n    letters_count_line_count=0\n    letters_count_line_max=0\n    letters_count_line_max_count=0\n\
    \    letters_count_line_max_letter=\"\"\n    letters_count_line_max_letter_count=0\n\
    \n    # Iterate over each line in the file (this step can be done in parallel)\n\
    \    while IFS='' read -r line || [[ -n \"$line\" ]]; do\n      line_count=0\n\
    \      line_max=0\n\n      # Remove spaces and quotation marks from the line\n\
    \      line=$(echo \"$line\" | sed 's/\\\"//g;s/^[[:space:]]*//;s/[[:space:]]*$//')\n\
    \n      # Remove leading and trailing spaces\n      line=$(echo \"$line\" | sed\
    \ -e \"s/^[ \\t]*//\" -e \"s/[ \\t]*$//\")\n\n      if [[ \"$line\" != \"$letter\"\
    \ ]]; then\n        echo \"$line\" # print only the non-matching lines\n     \
    \ fi\n\n      line=$(echo \"$line\" | awk \"{ print \\$1 }\")\n\n      # Iterate\
    \ over each letter in the line\n      for letter in \"$line\"; do\n        letters_count=$((\
    \ $letters_count + 1 ))\n        if (( $letter\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprsct2czv.sh: line 82: unexpected EOF while looking for matching
    `)''

    /tmp/tmprsct2czv.sh: line 102: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"${1:-}\"\n  echo \"${letters// / }\n${letters| tr ' ' \"\\n\" | sort\
    \ | uniq -c}\n\" | sort\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk6gytne0.sh: line 22: ${letters// / }

    ${letters| tr '' '' "\n" | sort | uniq -c}

    : bad substitution

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters\n  IFS=$'\\n' read -r -a letters <<< \"$1\"\n  local counts\n  counts=()\n\
    \  for letter in \"${letters[@]}\"; do\n    local count=\"${counts[${letter}]}\"\
    \n    counts[$letter]=\"${counts[$letter]} $(( ${count} + 1 ))\"\n  done\n  printf\
    \ '%s\\n' \"${letters[@]}\" | sort -k 1,1 -k 2,2n | awk -v FS=\\\" -v OFS=\\\"\
    \ '{print $2,$3}' | grep -Ev '^$' | cut -d \\\" -f 2-\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplvnla4hx.sh: line 24: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ histo=\"{}\"\n  for var in $(cat \"$1\"); do\n    local count=$(grep -n \"$var\"\
    \ \"$1\" | cut -d: -f1)\n    local letter=$(grep \"$var\" \"$1\" | cut -d: -f2)\n\
    \    if [ \"$count\" -eq \"1\" ]; then\n      histo=\"$histo \\\"$letter\\\":\
    \ \\\"$count\\\"\"\n    else\n      histo=\"$histo \\\"$letter\\\": \\\"$count\\\
    \"\"\n    fi\n  done\n  echo \"$histo\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cat: ''a b b a'': No such file or directory

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ count\n  local letter\n  local item\n  local output\n  local space\n\n  # Trim\
    \ any leading or trailing spaces.\n  space=\"${1:-}\"\n  space=\"${space#\"${space%%[![:space:]]*}\"\
    }\"\n  space=\"${space%\"${space##*[![:space:]]}\"}\"\n\n  # Split each letter\
    \ into a separate item and count the repetitions.\n  output=\"${space}\"\n  for\
    \ letter in \"${space}\"; do\n    item=\"${letter}\"\n    ((count+=1))\n  done\n\
    \n  # Return the item with the highest count in the alphabetical order.\n  printf\
    \ '%q \"%s\"\\n' \"${item}\" \"${count}\"\n  output=\"${output},${item},${count}\"\
    \n  printf '%q\\n' \"${output}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"${1}\"\n  local histo=\"{}\";\n  local letter\n  local occurrence\n\
    \  local count\n  for letter in ${letters//,/ }; do\n    occurrence=$(echo \"\
    ${histo}\" | grep -w \"$letter\" | cut -d'\"' -f1 | cut -d',' -f1)\n    count=$((\
    \ $(echo \"${histo}\" | grep -w \"$letter\" | cut -d'\"' -f1 | cut -d',' -f2)\
    \ - 1))\n    if [[ -z $occurrence ]]; then\n      histo+=\"\\\"$letter\\\":\\\"\
    $count\\\"\\n\"\n    elif [[ -z $count ]]; then\n      histo+=\"\\\"$letter\\\"\
    :\\\"$occurrence\\\"\\n\"\n    else\n      histo+=\"\\\"$letter\\\":\\\"$occurrence\\\
    \"\\n\"\n    fi\n  done\n  histo=\"${histo%?}\"\n  printf \"%s\\n\" \"${histo}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwkv10xet.sh: line 26: {} - 1: syntax error: operand expected (error
    token is "{} - 1")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ hash=$1\n  local count\n  local tmp\n  local keys\n  local max\n  local m\n\
    \  local tmp2\n  local k\n  local counts\n  local maxCount\n  maxCount=0\n  counts=\"\
    \"\n  if [[ $hash == \"\" ]]; then\n    return 0\n  fi\n\n  tmp=$(echo $hash |\
    \ tr \" \" \"\\n\")\n  keys=${tmp//\\\"/}\n  max=0\n  m=-1\n  tmp2=\"${hash//\
    \ /$'\\n'}\"\n  for k in $keys; do\n    count=\"$(echo $tmp2 | grep -c \"$k\"\
    )\"\n    if [[ $count -gt $max ]]; then\n      maxCount=$count\n      max=$count\n\
    \      m=$k\n    fi\n  done\n\n  counts=\"${counts// /$count}\"\n  if [[ $maxCount\
    \ -gt 1 ]]; then\n    for i in $keys; do\n      if [[ $i != $m ]]; then\n    \
    \    counts=\"$counts $count\"\n      fi\n    done\n  fi\n\n  return \"$counts\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2cpzmg8e.sh: line 58: return: : numeric argument required

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ Count each letter in the string\n  local -A letterCount\n  local letters=$1\n\
    \  # Count each letter's occurence\n  local -A count\n  for letter in $letters;\
    \ do\n    (( count[\"$letter\"]++ ))\n  done\n  # Sort the letters in descending\
    \ order and store the top occurrence letter\n  local topLetter\n  for letter in\
    \ \"${!count[@]}\"; do\n    (( letterCount[\"$letter\"]++ ))\n    if [[ ${count[\"\
    $letter\"]} -eq $topLetter ]]; then\n      topLetter=$letter\n    fi\n  done\n\
    \  # Return the result as a dictionary\n  declare -A result\n  for letter in ${!letterCount[@]};\
    \ do\n    result[\"\\\"$letter\\\"\"]=\"\\\"${letterCount[\"$letter\"]}\\\"\"\
    \ # This string will be quoted for the CSV\n  done\n  # Output the CSV as CSV\
    \ dictionary\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters\n  local counts\n  local delimiter\n  local result\n  local letter\n\
    \  local lettercount\n  local most\n  local space\n  local string\n  local count\n\
    \  local key\n  local sorted\n  local keys\n  local key\n\n  result=()\n  delimiter=$1\n\
    \  letters=$2\n  if [ -z \"$letters\" ]; then\n    return\n  fi\n\n  sorted=()\n\
    \  counts=()\n  for letter in $letters\n  do\n    counts[$letter]=0\n    sorted+=($letter)\n\
    \  done\n\n  count=\"${#sorted[@]}\"\n  if [ -z \"$count\" ]; then\n    return\n\
    \  fi\n\n  local counter\n  for letter in $letters\n  do\n    counter=0\n    for\
    \ s in $sorted\n    do\n      if [ \"$s\" == \"$letter\" ]; then\n        counter=$((counter\
    \ + 1))\n      fi\n    done\n    counts[$letter]=$((counter + 1))\n  done\n\n\
    \  result=\"$(sort -k2n | uniq -c | sort -nrk 1,1 | awk '{print $2, $1}')\"\n\
    \  result=$(echo -e \"$result\" | tr \",\" \" \")\n  if [ \"$result\" != \"\"\
    \ ]; then\n    IFS=\" $delimiter\"\n    result=( $(echo -e \"$result\" | tr \"\
    \\n\" \" \") )\n  fi\n  result=( \"${result[@]}\" )\n  return\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ sorted_list\n  sorted_list=\"\"\n  while IFS= read -r letter; do\n    grep -E\
    \ \"^${letter}\\($\"count=0\n    grep -E \"^${letter}\\($count\n    sorted_list=\"\
    $sorted_list,${letter},${count}\"\n  done\n  sort -k 2 -r | uniq -c | sort -k\
    \ 2,2n | cut -d, -f1\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5h1i3fv5.sh: line 42: unexpected EOF while looking for matching
    `"''

    /tmp/tmp5h1i3fv5.sh: line 46: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: -1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local i j s c count word\n    local histo=()\n    for ((i=0; i < ${#1}; i++));\
    \ do\n        s=${1:$i:1}\n        if ((i == 0)); then\n            histo+=($s)\n\
    \            continue\n        fi\n        for ((j=0; j < ${#histo[*]}; j++));\
    \ do\n            word=${histo[$j]}\n            s=${word//$s//}\n           \
    \ if ((i == ${#s})); then\n                count=1\n            else\n       \
    \         count=$((${#s}+1))\n            fi\n            histo+=($s=\"$count\"\
    )\n        done\n    done\n    echo ${histo[@]}\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=56 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=30 encoding='utf-8'>
  timestamp: 1660057879
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ string=\"$1\" count\n  local letter\n  local hash\n  local result\n  IFS=\"\
    \ \" read -r -a array <<< \"$string\"\n  # Loop through all letters once\n  for\
    \ letter in \"${array[@]}\"; do\n    hash=\n    # Count all occurrences of this\
    \ letter\n    for ((i=0; i<${#array[@]}; i++)); do\n      if [ \"${array[i]}\"\
    \ = \"$letter\" ]; then\n        if [ -z \"$hash\" ]; then\n          hash=\n\
    \        fi\n        hash=\"${hash}${array[i]},\"\n      fi\n    done\n    # Count\
    \ all occurrences of an absence of this letter\n    for ((i=0; i<${#array[@]};\
    \ i++)); do\n      if [ \"${array[i]}\" = \"$letter\" ]; then\n        if [ -z\
    \ \"$hash\" ]; then\n          hash=\n        fi\n        hash=\"$hash,$letter\"\
    \n      fi\n    done\n    if [ -n \"$hash\" ]; then\n      result[$letter]=\"\
    ${hash#*,}\"\n    fi\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ items=$1\n  local counts=()\n  local letters=()\n  local key\n\n  echo \"${items[@]}\"\
    \ | while read key ; do\n    counts[${key}]=${#counts[@]} || 1\n    letters+=(${key})\n\
    \  done\n\n  echo \"${letters[@]}\" | while read key ; do\n    if [ \"${#counts[@]}\"\
    \ -gt \"1\" ]; then\n      key=${key%?}\n      if [ \"${counts[${key}]}\" -gt\
    \ \"${counts[@]}\" ]; then\n        counts[${key}]=${counts[@]} # copy counts\
    \ for shorter key\n      fi\n      counts=(\"${counts[@]:0:${#counts[@]}-1}\"\
    \ \"${counts[${key}]}\")\n      letters=(\"${letters[@]:0:${#letters[@]}-1}\"\
    \ \"${key}\")\n    fi\n  done\n\n  echo \"${letters[@]}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdtouw1d4.sh: line 25: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local histogram\n\n    if [ \"$1\" = \"\" ]; then\n        histogram=$(printf\
    \ \"\\n\")\n        return\n    fi\n\n    IFS=' ' read -r -a letters <<< \"$1\"\
    \n    histogram=()\n\n    for letter in \"${letters[@]}\"; do\n        histogram+=($(printf\
    \ \"\\\"%s\\\": \\\"%s\\\"\" ${letter} \"${#letters[@]}\" ))\n    done\n\n   \
    \ # Sort by highest count\n    local -n sorted_histogram\n    sorted_histogram=($(sort\
    \ -n -r -k 2g <<< \"${histogram[@]}\"))\n\n    echo '{'\n    for letter in \"\
    ${sorted_histogram[@]}\"; do\n        echo -n \"${letter}\"\n        echo -n ':'\n\
    \        echo -n \"${sorted_histogram[$((${#sorted_histogram[@]}-1))]}\"\n   \
    \     echo -n ','\n    done\n    echo '}'\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpq716jc42.sh: line 35: warning: sorted_histogram: removing nameref
    attribute

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ string count\n  string=$1\n  count=0\n  local output\n\n  # Remove white space\n\
    \  string=$(echo $string | tr -d \" \")\n\n  # Separate string into letters\n\
    \  output=\"{}\"\n  for letter in $string; do\n    ((count++))\n    output=$(echo\
    \ \"$output${letter},\"| sed -e 's/,$//')\n  done\n\n  # Trim trailing comma\n\
    \  output=$(echo $output | sed -e 's/,$//')\n\n  # Remove extra spaces and quotes\n\
    \  output=$(echo $output | sed -e 's/^\"//' -e 's/\"$//')\n\n  echo '{' $output\
    \ '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -n histo=histo\n    local letters\n\n    letters=$( echo $1 | tr ' ' '\\\
    n' | sort -u )\n    histo[ \"${letters}\" ]=\"${#letters}\"\n    echo $histo\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppwkdokyx.sh: line 19: local: warning: histo: circular name reference

    /tmp/tmppwkdokyx.sh: line 19: warning: histo: circular name reference

    /tmp/tmppwkdokyx.sh: line 23: warning: histo: circular name reference

    /tmp/tmppwkdokyx.sh: line 23: a

    b : syntax error in expression (error token is "b ")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [[ -z \"$1\" ]]; then\n    echo 'Usage: $(histogram \"a b c\")'\n    exit 1\n\
    \  fi\n  # sort | uniq | awk\n  local letters=\"${1//[[:space:]]/}\"\n  local\
    \ counts=$(\n    sort | uniq -c | awk -F'\"' '\n      $1==\"\" {next} \n     \
    \ $1>=\"'$letters'\" {counts[$1]+=$2} \n      END {for (i in counts) {\n     \
    \       printf \"%s: '%s'\\n\", i, counts[i]\n          }}')\n  echo \"${counts//\
    \ /$'\\n\"}\" >/dev/null\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb3dhqmu9.sh: line 32: unexpected EOF while looking for matching
    `''''

    /tmp/tmpb3dhqmu9.sh: line 52: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=$1 count\n\n  sort -u | uniq -c | while read count letter; do\n    case\
    \ \"$count\" in\n      *\"$count\"*) ;;\n      *)\n        case \"$letter\" in\n\
    \          *\") ;;\n          *) echo \"'$letter': '$count'\" ;;\n        esac\n\
    \        break\n    esac\n  done\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmposkdaw45.sh: line 47: unexpected EOF while looking for matching
    `"''

    /tmp/tmposkdaw45.sh: line 51: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -n histo=histogram.$$\n  eval $( echo \"$1\"; echo -n \"histogram.$$='$1'\"\
    \ | tr ' ' '\\\\n' | sort -n | uniq -c | sort -rn | head -1 )\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcrbzbwok.sh: line 19: local: `histogram.599083'': invalid variable
    name for name reference

    /tmp/tmpcrbzbwok.sh: line 20: a: command not found

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=$1\n  local counts=${2:-$(printf '%s' \"$letters\" | tr ' ' '0' | sort\
    \ | uniq -c | sort -r -n)}\n  local ret=()\n  local letter\n  for letter in ${letters//,/\
    \ }; do\n    count=${counts[$letter]}\n    if [[ \"$count\" > 1 ]]; then\n   \
    \   ret+=(\"\\\"$letter\\\"\")\n    fi\n  done\n  printf '%s\\n' \"${ret[@]}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -r string=\"$1\"\n    local -r histograms\n    histograms=\"$(\n     \
    \   # Avoid interpreting empty lines as \"end of file\".\n        awk '\n    \
    \        BEGIN { print \"\\\"\" }\n            END {\n                # Use negative\
    \ zero to represent \"end of string\".\n                print -0 \"\\\"\",\n \
    \               for (letter in count) {\n                    print letter,\n \
    \                   print count[letter],\n                    print -0 \"\\\"\"\
    ,\n                }\n                print -0 \"\\\"\"\n            }\n     \
    \       { count[$1]++ }\n        ' <<<\"$string\")\"\n    case \"${histograms:-}\"\
    \ in\n        -[0-4] | \"\")\n            echo {}\n        ;;\n        *)\n  \
    \          echo \"${histograms}\"\n        ;;\n    esac\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:6:                 for (letter in count) {

    awk: cmd. line:6:                 ^ syntax error

    awk: cmd. line:6:                 for (letter in count) {

    awk: cmd. line:6:                                       ^ syntax error

    awk: cmd. line:8:                     print count[letter],

    awk: cmd. line:8:                     ^ syntax error

    awk: cmd. line:9:                     print -0 "\"",

    awk: cmd. line:9:                     ^ syntax error

    awk: cmd. line:10:                 }

    awk: cmd. line:10:                 ^ syntax error

    /tmp/tmpx2et2e3v.sh: line 36: histograms: readonly variable

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local i j max\n    local item\n    local maxCount=0\n    local key\n    local\
    \ letters\n\n    # Initialize histogram to an empty hash\n    IFS=$'\\n' items=()\n\
    \    local counts=()\n\n    # Count each of the letters in the string\n    letters=$(cat\
    \ <<< \"$1\")\n\n    for j in $(seq 1 $((${#letters[*]} - 1))); do\n        item=\"\
    ${letters[$j]}\"\n        ((counts[$item]++))\n    done\n\n    # Populate the\
    \ hash\n    for k in $(seq 1 $((${#counts[*]} - 1))); do\n        if [ \"${counts[$k]}\"\
    \ -gt \"$maxCount\" ]; then\n            maxCount=${counts[$k]}\n            item=${k}\n\
    \        fi\n    done\n\n    # Return the hash\n    echo \"{\\\"${item}\\\":\\\
    \"$maxCount\\\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local str=$1\n    local result\n    IFS=' ' read -ra words <<<\"$str\"\n   \
    \ local count\n    for word in \"${words[@]}\"; do\n        count=0\n        for\
    \ char in \"${words[@]}\"; do\n            [[ $char != $word ]] && continue\n\
    \            (( ++count ))\n        done\n        result=$( [[ ${result} == \"\
    \" || $result == \"{}\" ]] && echo -n \"${word},${count}\") || \\\n          \
    \  echo -n \"${result},${word},${count}\"\n    done\n    IFS=,\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: -1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # Pipe the input stream through sort |uniq -c to get the most repeated letter\
    \ count.\n    # | head -n 1 to skip the header.\n    # | head -n -1 to get the\
    \ longest letter count.\n    # | sed -e 's/^\"//' -e 's/\"$//' to remove the double\
    \ quotes.\n    # | cut -c 2-4 removes the first and last double quotes.\n    #\
    \ | tr -d ' ' to remove spaces from each character.\n    local counts=\"$(sort\
    \ -uk1,1 |uniq -c | head -n 1 | head -n -1 | sed -e 's/^\"//' -e 's/\"$//' | cut\
    \ -c 2-4 | tr -d ' ')\"\n    # Split counts on spaces into a dict keyed by letter\
    \ and a value equal to the number of times that letter appears in the string.\n\
    \    # If the letters contain a space, use another call to shell to count the\
    \ number of times that letter appears in the string.\n    # Avoid using tr in\
    \ case your characters have spaces.\n    local sorted_counts=\"$counts\" | tr\
    \ ' ' $'\\n'\n    local letters=\"$sorted_counts\" | tr '\\n' ' '\n    local result\n\
    \    local count\n    for letter in $letters; do\n        count=\"$(grep -o $letter\
    \ <<<\"$counts\")\"\n        if [ \"$count\" ] ; then\n            result=\"$(echo\
    \ \"$result\" | sed -e \"s/$letter/$count/\")\"\n        fi\n    done\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=32 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=24 encoding='utf-8'>
  timestamp: 1660057879
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -n histo=\"$(declare -p histogram | sed -n 's/histogram.*=\"\\([^\"]*\\).*/\\\
    1/p')\"\n  local -n histocount=\"$(declare -p histocount | sed -n 's/histocount.*=\"\
    \\([^\"]*\\).*/\\1/p')\"\n  local -n histoletters=\"$(declare -p histoletters\
    \ | sed -n 's/histoletters.*=\"\\([^\"]*\\).*/\\1/p')\"\n  local histohisto=\"\
    $(declare -p histohisop | sed -n 's/histohisop.*=\"\\([^\"]*\\).*/\\1/p')\"\n\
    \  if [ -z \"$histo\" ] ; then\n    histo={}\n  fi\n  if [ -z \"$histocount\"\
    \ ] ; then\n    histocount=0\n  fi\n  if [ -z \"$histoletters\" ] ; then\n   \
    \ histoletters=\"\"\n  fi\n  if [ -z \"$histohisto\" ] ; then\n    histohisto={}\n\
    \  fi\n  local -a histo\n  local -a histocount\n  local -a histoletters\n  local\
    \ -a histohisto\n  local histomax\n  local histomaxletter\n  local histomaxhisto\n\
    \  local histopos\n  local histoposcount\n  local histoposletters\n  local histoposhisto\n\
    \  local histomaxcount\n  local histomaxlettercount\n  local histomaxhistocount\n\
    \  local histomaxhistoletters\n  local histomaxhistohisto\n  local histomaxhistohistocount\n\
    \  local histomaxhistohistoletters\n  local histomaxhistohistohisto\n  local histomaxhistohistohistocount\n\
    \  local histomaxhistohistohistoletters\n  local histomaxhistohistohistohisto\n\
    \  local histomaxhistohistohistohistocount\n  local histomaxhistohistohistoletters\n\
    \  local histomaxhistohistohistohisto\n  local histomaxhistohistohistohistocount\n\
    \  local histomaxhistohistohistoletters\n  local histomaxhistohistohistohisto\n\
    \  local histomaxhistohistohistohistocount\n  local histomaxhistohistohistoletters\n\
    \  local histomaxhistohistohistohisto\n  local histomaxhistohistohistohistocount\n\
    \  local histomaxhistohistohistoletters\n  local histomaxhistohistohistohisto\n\
    \  local histomaxhistohistohistohistocount\n  local histomaxhistohistohistoletters\n\
    \  local histomaxhistohistohistohisto\n  \n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpug0wz0fy.sh: line 19: declare: histogram: not found

    /tmp/tmpug0wz0fy.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpug0wz0fy.sh: line 20: declare: histocount: not found

    /tmp/tmpug0wz0fy.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpug0wz0fy.sh: line 21: declare: histoletters: not found

    /tmp/tmpug0wz0fy.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpug0wz0fy.sh: line 22: declare: histohisop: not found

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=$1\n    local histo\n    histo=$(awk -F '\"' '$2 in h || $2==\"\
    \" {h[$2]+=$1; c[$2]+=1} END {for (k in h) print h[k], k}' <<< \"$letters\")\n\
    \    # convert to a dictionary\n    declare -A count\n    for letter in \"${!histo[@]}\"\
    ; do\n        count[\"${letter}\"]=\"${histo[letter]}\"\n    done\n    # and convert\
    \ the dictionary to CSV\n    local output\n    output=$(IFS=\",\"; echo \"${!count[@]}\"\
    )\n    # and trim leading and trailing quotes\n    output=\"${output#\"\\001\"\
    }${output%\"\\001\"}\n    output=\"${output//\",\"}\n    echo \"$output\"\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -n histo=\"$1\"\n  local -n letters=${#histo[*]}\n\n  local -A counts\n  local\
    \ -i max=0\n  local -i maxindex\n  local -i maxcount\n  local letter\n  local\
    \ count\n  local lettercount\n  while (( $# > 0 )); do\n    letter=$1; shift\n\
    \    counts[$letter]=$1\n  done\n\n  for (( i=0; i<$letters; ++i )); do\n    letter=$histo[${#histo[@]}\
    \ - i - 1]\n    count=$counts[$letter]\n    if (( count > max )); then\n     \
    \ max=$count\n      maxindex=$i\n      maxcount=$count\n    elif (( count == max\
    \ )); then\n      maxcount=$count\n    fi\n  done\n\n  echo \"${histo[@]:0:maxindex}\
    \ ${maxcount}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpulrviw7p.sh: line 19: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmpulrviw7p.sh: line 20: local: `0'': invalid variable name for name reference

    /tmp/tmpulrviw7p.sh: line 34: ((: i<: syntax error: operand expected (error token
    is "<")

    '
  stdout: ''
  timestamp: 1660057874
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"$1\"\n  local count=0\n  local result={}\n  local max=0\n  local current=''\n\
    \  local resultstring=''\n\n  echo \"$letters\" | tr ' ' '\\n' | while read -r\
    \ letter; do\n    if [ \"$letter\" != \"$current\" ]; then\n      if [ -n \"$max\"\
    \ ]; then\n        # Count all letters with the same count and append the letter\
    \ with most\n        # repetition\n        resultstring=\"${resultstring},\\\"\
    ${letter}\\\"\"\n      else\n        # No letter with max count found, output\
    \ the letter and count of letters\n        # with max count\n        resultstring=\"\
    ${resultstring}\\\"${letter}\\\"\"\n      fi\n      current=\"$letter\"\n    \
    \  count=1\n    elif [ \"$letter\" == \"$current\" ]; then\n      # Increment\
    \ the count of the current letter\n      ((count++))\n    else\n      # Increment\
    \ the count of the current letter, except if the letter is the same\n      # as\
    \ the current one\n      if [ \"$letter\" != \"$current\" ]; then\n        if\
    \ ((count > max)) ; then\n          resultstring=\"${resultstring},\\\"${letter}\\\
    \"\"\n          max=$count\n        fi\n        count=1\n        current=\"$letter\"\
    \n      else\n        # Increment the count of the current letter\n        count++\n\
    \      fi\n    fi\n  done\n  # Return an empty result if no letters had maximum\
    \ count\n  if [ \"$max\" -eq 0 ]; then\n    return 0\n  fi\n  # Return CSV of\
    \ all letters with the most repetition\n  echo \"${resultstring:1}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660057874
- exit_code: -1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ $1: a space separated string of lowercase letters\n  mapfile -t arr < <(echo\
    \ \"$1\" | tr ' ' '\\n')\n  local max\n  local maxcount\n  local maxchar\n  local\
    \ maxcountchar\n\n  # Iterate through all the characters in the string\n  for\
    \ char in \"${arr[@]}\"; do\n    local count\n    local charcount\n    local charcountchar\n\
    \n    # Find out how many times this character occurs\n    for count in \"${!arr[@]}\"\
    ; do\n      if [[ ${arr[$count]} =~ \"${char}\" ]]; then\n        (( charcount[$char]++\
    \ ))\n        break\n      fi\n    done\n\n    # If this character occurred less\
    \ than two times, skip it.\n    if [[ ${#charcount[@]} -eq 0 ]]; then\n      continue\n\
    \    fi\n\n    # Sort by count\n    local sorted\n    sorted=( ${!charcount[@]}\
    \ )\n    sort -n -k 2\n\n    # Take the character with the highest count\n   \
    \ local highest\n    highest=\"${sorted[0]}\"\n    local highestcount=\"${arr[$highest]}\"\
    \n    local highestchar=\"${char}\"\n\n    # Set the maximum character and count\
    \ to the highest count character\n    if [[ \"$highestcount\" -gt \"$maxcount\"\
    \ ]]; then\n      maxcount=$highestcount\n      maxchar=$highestchar\n    fi\n\
    \  done\n\n  # Return the map of the character with the most repetition and the\n\
    \  # number of repetitions\n  echo -n \"{\"\n  echo \"$maxchar\":\"$maxcount\"\
    \n  echo -n \"}\"\n  echo -n \"\"\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=54 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=52 encoding='utf-8'>
  timestamp: 1660057879
