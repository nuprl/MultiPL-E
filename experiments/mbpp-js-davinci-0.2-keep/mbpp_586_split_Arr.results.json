{
  "name": "mbpp_586_split_Arr",
  "language": "js",
  "prompt": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    l2 = l2.concat(l1);\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0,n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n, l.length);\n    var l3 = l2.concat(l1);\n    return l3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n        else{\n            arr.unshift(l[i]);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  36,\n  52,\n  6,\n  5,\n  12,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpyi_s6y1t.js:19:10)\n    at Object.<anonymous> (/tmp/tmpyi_s6y1t.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 36, 52, 6, 5, 12, 10 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr1 = l.slice(0, n);\n    arr.push(arr1);\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpcxuctz4e.js:13:10)\n    at Object.<anonymous> (/tmp/tmpcxuctz4e.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    return l.slice(n).concat(l.slice(0, n));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n    }\n    for(var i = 0; i < l.length; i++){\n        if(i >= n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpl4gsekz5.js:21:10)\n    at Object.<anonymous> (/tmp/tmpl4gsekz5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n    }\n    for(var i = 0; i < l.length; i++){\n        if(i >= n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpl4gsekz5.js:21:10)\n    at Object.<anonymous> (/tmp/tmpl4gsekz5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr2 = l.slice(0, n);\n    return arr.concat(arr2);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n    }\n    for(var i = 0; i < l.length; i++){\n        if(i >= n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nvar l = [1,2,3,4,5,6,7,8,9,10];\nvar n = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122403,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpblxtisod.js:23:10)\n    at Object.<anonymous> (/tmp/tmpblxtisod.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    l2.push(l1);\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp_8glcorg.js:14:10)\n    at Object.<anonymous> (/tmp/tmp_8glcorg.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n    }\n    for(var i = 0; i < l.length; i++){\n        if(i >= n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpu7brwrkq.js:22:10)\n    at Object.<anonymous> (/tmp/tmpu7brwrkq.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr1 = l.slice(0, n);\n    var arr2 = arr.concat(arr1);\n    return arr2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr1 = l.slice(0, n);\n    var arr2 = l.slice(n, l.length);\n    var arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n, l.length);\n    return l2.concat(l1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n, l.length);\n    return l2.concat(l1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first_part = l.slice(0, n);\n    var second_part = l.slice(n);\n    var result = second_part.concat(first_part);\n    return result;\n}\n\nvar l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar n = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n, l.length);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr1 = l.slice(0,n);\n    var arr2 = arr.concat(arr1);\n    return arr2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n, l.length);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr1 = l.slice(0, n);\n    var arr2 = l.slice(n);\n    var arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var newArr = l.splice(0, n);\n    return l.concat(newArr);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\nvar l = [1, 2, 3, 4, 5, 6];\nvar n = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr1 = l.slice(0, n);\n    var arr2 = l.slice(n, l.length);\n    arr2.push(arr1);\n    return arr2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpphirzw75.js:14:10)\n    at Object.<anonymous> (/tmp/tmpphirzw75.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    return l.slice(n).concat(l.slice(0, n));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr2 = l.slice(0, n);\n    var arr3 = arr.concat(arr2);\n    return arr3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(0, n);\n    var arr2 = l.slice(n);\n    return arr2.concat(arr);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr2 = l.slice(0, n);\n    var arr3 = arr.concat(arr2);\n    return arr3;\n}\n\nvar l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar n = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\n\nvar l = [1,2,3,4,5,6,7,8,9,10];\nvar n = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var newArr = l.slice(n);\n    var firstArr = l.slice(0, n);\n    return newArr.concat(firstArr);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr1 = l.slice(0, n);\n    var arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr1 = l.slice(0, n);\n    var arr2 = l.slice(n, l.length);\n    return arr2.concat(arr1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var a = l.slice(0, n);\n    var b = l.slice(n);\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    second.push(first);\n    return second;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmps4mf3enl.js:13:10)\n    at Object.<anonymous> (/tmp/tmps4mf3enl.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = n; i < l.length; i++){\n        arr.push(l[i]);\n    }\n    for(var j = 0; j < n; j++){\n        arr.push(l[j]);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    var final = second.concat(first);\n    return final;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n, l.length);\n    l2.push(l1);\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpl_g0ba45.js:13:10)\n    at Object.<anonymous> (/tmp/tmpl_g0ba45.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var new_Arr = l.splice(0, n);\n    l.push(new_Arr);\n    return l;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmphwcmorsq.js:12:10)\n    at Object.<anonymous> (/tmp/tmphwcmorsq.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    l2.push(l1);\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp_8glcorg.js:14:10)\n    at Object.<anonymous> (/tmp/tmp_8glcorg.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    var arr1 = [];\n    var arr2 = [];\n    for(var i=0; i<l.length; i++){\n        arr.push(l[i]);\n    }\n    for(var i=0; i<n; i++){\n        arr1.push(arr[i]);\n    }\n    for(var i=n; i<arr.length; i++){\n        arr2.push(arr[i]);\n    }\n    arr2.push(arr1);\n    return arr2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp1ja8i771.js:23:10)\n    at Object.<anonymous> (/tmp/tmp1ja8i771.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr1 = l.slice(0, n);\n    var arr2 = l.slice(n);\n    var arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr1 = l.slice(0,n);\n    arr = arr.concat(arr1);\n    return arr;\n}\nvar l = [1,2,3,4,5,6,7,8,9];\nvar n = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\n\nvar l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar n = 5;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first_part = l.slice(0, n);\n    var second_part = l.slice(n);\n    var new_arr = second_part.concat(first_part);\n    return new_arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    var arr1 = [];\n    var arr2 = [];\n    for(var i = 0; i < l.length; i++){\n        arr.push(l[i]);\n    }\n    for(var i = 0; i < n; i++){\n        arr1.push(arr[i]);\n    }\n    for(var i = n; i < arr.length; i++){\n        arr2.push(arr[i]);\n    }\n    arr2.push(arr1);\n    return arr2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpqy33it30.js:23:10)\n    at Object.<anonymous> (/tmp/tmpqy33it30.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr1 = l.slice(0, n);\n    arr.push(arr1);\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpcxuctz4e.js:13:10)\n    at Object.<anonymous> (/tmp/tmpcxuctz4e.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    return l.slice(n).concat(l.slice(0, n));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for (var i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr.push(l[i]);\n        }\n    }\n    for (var i = n; i < l.length; i++) {\n        l.push(l[i]);\n    }\n    for (var i = 0; i < n; i++) {\n        l.shift();\n    }\n    for (var i = 0; i < arr.length; i++) {\n        l.push(arr[i]);\n    }\n    return l;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7ffd4d2a78a0\n 1: 0x2b7b22848727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b7b233dd28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b7b22d17f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b7b22ea9760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b7b22eb10cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b7b2309b7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b7b229fa7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n, l.length);\n    return l2.concat(l1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var newArr = [];\n    for(var i=n; i<l.length; i++){\n        newArr.push(l[i]);\n    }\n    for(var j=0; j<n; j++){\n        newArr.push(l[j]);\n    }\n    return newArr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var x = l.splice(0, n);\n    l.push(x);\n    return l;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpzlrjvvwa.js:12:10)\n    at Object.<anonymous> (/tmp/tmpzlrjvvwa.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr2 = l.slice(0, n);\n    return arr.concat(arr2);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr1 = l.slice(0, n);\n    var arr2 = l.slice(n);\n    var arr3 = arr2.concat(arr1);\n    return arr3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    var result = second.concat(first);\n    console.log(result);\n}\nsplit_Arr([1,2,3,4,5], 2);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n[ 5, 6, 52, 36, 12, 10 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpbnod4vxn.js:15:10)\n    at Object.<anonymous> (/tmp/tmpbnod4vxn.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first_part = l.slice(0, n);\n    var second_part = l.slice(n);\n    var new_arr = second_part.concat(first_part);\n    return new_arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n    }\n    for(var i = 0; i < l.length; i++){\n        if(i >= n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpl4gsekz5.js:21:10)\n    at Object.<anonymous> (/tmp/tmpl4gsekz5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    l2 = l2.concat(l1);\n    return l2;\n}\n\nvar l = [1,2,3,4,5];\nvar n = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr1 = l.slice(0, n);\n    var arr2 = l.slice(n);\n    var arr3 = arr2.concat(arr1);\n    console.log(arr3);\n}\nsplit_Arr([1, 2, 3, 4, 5, 6], 3);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n[ 5, 6, 52, 36, 12, 10 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp1oo6v8_g.js:15:10)\n    at Object.<anonymous> (/tmp/tmp1oo6v8_g.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var new_l = l.slice(n);\n    var new_l2 = l.slice(0, n);\n    return new_l.concat(new_l2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0,n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    if(n > l.length){\n        return \"n is greater than the length of the list\";\n    }\n    else{\n        var first = l.slice(0, n);\n        var second = l.slice(n, l.length);\n        var new_Arr = second.concat(first);\n        return new_Arr;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr1 = l.slice(0,n);\n    arr.push(arr1);\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpqte8oqkw.js:13:10)\n    at Object.<anonymous> (/tmp/tmpqte8oqkw.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    l2 = l2.concat(l1);\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first_part = l.slice(0, n);\n    var second_part = l.slice(n);\n    return second_part.concat(first_part);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    return l.slice(n).concat(l.slice(0, n));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i=0; i<l.length; i++){\n        if(i<n){\n            arr.push(l[i]);\n        }\n    }\n    for(var i=0; i<l.length; i++){\n        if(i>=n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp8ouq75vs.js:21:10)\n    at Object.<anonymous> (/tmp/tmp8ouq75vs.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n    }\n    for(var i = 0; i < l.length; i++){\n        if(i >= n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpl4gsekz5.js:21:10)\n    at Object.<anonymous> (/tmp/tmpl4gsekz5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    var result = second.concat(first);\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first_part = l.slice(0, n);\n    var second_part = l.slice(n);\n    return second_part.concat(first_part);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr1 = l.slice(0, n);\n    return arr.concat(arr1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var firstPart = l.slice(0, n);\n    var secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.splice(0, n);\n    var l2 = l.concat(l1);\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr2 = l.slice(0, n);\n    arr = arr.concat(arr2);\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    l2 = l2.concat(l1);\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0,n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    second = second.concat(first);\n    return second;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n    }\n    for(var j = 0; j < l.length; j++){\n        if(j >= n){\n            arr.push(l[j]);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpau78f_4m.js:21:10)\n    at Object.<anonymous> (/tmp/tmpau78f_4m.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr1 = l.slice(0, n);\n    return arr.concat(arr1);\n}\n\nvar l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar n = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    return l.slice(n).concat(l.slice(0, n));\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n, l.length);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0,n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n, l.length);\n    var arr1 = l.slice(0, n);\n    var arr2 = arr.concat(arr1);\n    return arr2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n    }\n    for(var i = 0; i < l.length; i++){\n        if(i >= n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpl4gsekz5.js:21:10)\n    at Object.<anonymous> (/tmp/tmpl4gsekz5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = 0; i < l; i++){\n        arr.push(i);\n    }\n    var arr1 = arr.slice(0, n);\n    var arr2 = arr.slice(n);\n    var arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpic7roifj.js:17:10)\n    at Object.<anonymous> (/tmp/tmpic7roifj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr1 = l.slice(0, n);\n    var arr2 = arr.concat(arr1);\n    return arr2;\n}\nvar l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar n = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first_part = l.slice(0, n);\n    var second_part = l.slice(n);\n    var new_arr = second_part.concat(first_part);\n    return new_arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = n; i < l.length; i++){\n        arr.push(l[i]);\n    }\n    for(var i = 0; i < n; i++){\n        arr.push(l[i]);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n, l.length);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr1 = l.slice(0, n);\n    var arr2 = l.slice(n, l.length);\n    return arr2.concat(arr1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n    }\n    for(var i = 0; i < l.length; i++){\n        if(i >= n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpl4gsekz5.js:21:10)\n    at Object.<anonymous> (/tmp/tmpl4gsekz5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    l2.push(l1);\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp_8glcorg.js:14:10)\n    at Object.<anonymous> (/tmp/tmp_8glcorg.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var a = l.slice(0, n);\n    var b = l.slice(n);\n    return b.concat(a);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    let arr = [];\n    for(let i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n    }\n    for(let i = 0; i < l.length; i++){\n        if(i >= n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpg8_f8tel.js:22:10)\n    at Object.<anonymous> (/tmp/tmpg8_f8tel.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n, l.length);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n    }\n    for(var i = 0; i < l.length; i++){\n        if(i >= n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpl4gsekz5.js:21:10)\n    at Object.<anonymous> (/tmp/tmpl4gsekz5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    var arr1 = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n        else{\n            arr1.push(l[i]);\n        }\n    }\n    arr1.push(arr);\n    return arr1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmppqcyyx4v.js:22:10)\n    at Object.<anonymous> (/tmp/tmppqcyyx4v.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr1 = l.slice(0, n);\n    var arr2 = arr.concat(arr1);\n    return arr2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n, l.length);\n    var l3 = l2.concat(l1);\n    return l3;\n}\n\nvar l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar n = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        if(i < n){\n            arr.push(l[i]);\n        }\n    }\n    for(var i = 0; i < l.length; i++){\n        if(i >= n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpu7brwrkq.js:22:10)\n    at Object.<anonymous> (/tmp/tmpu7brwrkq.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n, l.length);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    second.push(first);\n    return second;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp7h9c15ox.js:14:10)\n    at Object.<anonymous> (/tmp/tmp7h9c15ox.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var x = l.splice(0, n);\n    l = l.concat(x);\n    return l;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr1 = l.slice(0, n);\n    var arr2 = l.slice(n);\n    var arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    for(var i = 0; i < n; i++){\n        arr.push(l[i]);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var new_l = l.slice(n);\n    var new_l2 = l.slice(0, n);\n    return new_l.concat(new_l2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    var result = second.concat(first);\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    l2.push(l1);\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n  52,\n  36,\n  [\n    12,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp_8glcorg.js:14:10)\n    at Object.<anonymous> (/tmp/tmp_8glcorg.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 6, 52, 36, [ 12, 10 ] ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = [];\n    for(var i=0; i<l.length; i++){\n        if(i<n){\n            arr.push(l[i]);\n        }\n    }\n    for(var i=0; i<l.length; i++){\n        if(i>=n){\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  10,\n  5,\n  6,\n  52,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp8ouq75vs.js:21:10)\n    at Object.<anonymous> (/tmp/tmp8ouq75vs.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 10, 5, 6, 52, 36 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n, l.length);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    return second.concat(first);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    var l3 = l2.concat(l1);\n    return l3;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var arr = l.slice(n);\n    var arr1 = l.slice(0, n);\n    var arr2 = arr.concat(arr1);\n    return arr2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var l1 = l.slice(0, n);\n    var l2 = l.slice(n);\n    return l2.concat(l1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr(l, n){\n    var first = l.slice(0, n);\n    var second = l.slice(n);\n    second = second.concat(first);\n    return second;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}