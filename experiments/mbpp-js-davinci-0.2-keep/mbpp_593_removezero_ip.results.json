{
  "name": "mbpp_593_removezero_ip",
  "language": "js",
  "prompt": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i] == 0){\n\t\t\tnew_ip += '.';\n\t\t}else{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp8ueis_1c.js:20:10)\n    at Object.<anonymous> (/tmp/tmp8ueis_1c.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i] != 0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpp4wf7yoo.js:18:10)\n    at Object.<anonymous> (/tmp/tmpp4wf7yoo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip+=ip_arr[i];\n\t\t}\n\t\tif(i!=ip_arr.length-1){\n\t\t\tnew_ip+=\".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp8b6d__nu.js:21:10)\n    at Object.<anonymous> (/tmp/tmp8b6d__nu.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_array = ip.split(\".\");\n    var ip_new = \"\";\n    for (var i = 0; i < ip_array.length; i++) {\n        if (ip_array[i] == \"0\") {\n            ip_new += \"0\";\n        }\n        else {\n            ip_new += ip_array[i];\n        }\n    }\n    return ip_new;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpkqswmvu2.js:21:10)\n    at Object.<anonymous> (/tmp/tmpkqswmvu2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip += ip_arr[i];\n        }\n        else{\n            new_ip += \"\";\n        }\n        if(i!=ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\nvar ip = \"255.024.01.01\";\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpv8zgqqzz.js:24:10)\n    at Object.<anonymous> (/tmp/tmpv8zgqqzz.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split(\".\");\n    var new_arr = [];\n    for(var i=0;i<arr.length;i++){\n        if(arr[i].length>1 && arr[i].charAt(0)==0){\n            new_arr.push(arr[i].substr(1));\n        }else{\n            new_arr.push(arr[i]);\n        }\n    }\n    return new_arr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_array.length;i++){\n\t\tif(ip_array[i].length > 1 && ip_array[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_array[i].substring(1,ip_array[i].length);\n\t\t}else{\n\t\t\tnew_ip += ip_array[i];\n\t\t}\n\t\tif(i != ip_array.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1);\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            new_ip += ip_arr[i].substring(1);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i!=ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split('.');\n    var new_arr = [];\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]!=0){\n            new_arr.push(arr[i]);\n        }\n    }\n    return new_arr.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpvzpd2e51.js:17:10)\n    at Object.<anonymous> (/tmp/tmpvzpd2e51.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == '0'){\n            new_ip.push(ip_arr[i].slice(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split(\".\");\n    var newarr = [];\n    for(var i=0;i<arr.length;i++){\n        if(arr[i].charAt(0) == 0){\n            newarr.push(arr[i].substring(1));\n        }\n        else{\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1);\n\t\t}else{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        new_ip.push(parseInt(ip_arr[i]));\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpeqlk21er.js:18:10)\n    at Object.<anonymous> (/tmp/tmpeqlk21er.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i].length > 1 && ip_arr[i][0] == 0){\n\t\t\tnew_ip.push(ip_arr[i].substring(1));\n\t\t}else{\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i] == 0){\n            new_ip += \"0.\";\n        }\n        else{\n            new_ip += ip_arr[i]+\".\";\n        }\n    }\n    return new_ip.slice(0,-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp13l3auqf.js:20:10)\n    at Object.<anonymous> (/tmp/tmp13l3auqf.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip = new_ip + ip_arr[i];\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpudx2akay.js:18:10)\n    at Object.<anonymous> (/tmp/tmpudx2akay.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        new_ip.push(parseInt(ip_arr[i]));\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == '0'){\n            new_ip.push(ip_arr[i].substring(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i] != 0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpp4wf7yoo.js:18:10)\n    at Object.<anonymous> (/tmp/tmpp4wf7yoo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0'){\n            new_ip += ip_arr[i].substr(1);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tnew_ip.push(parseInt(ip_arr[i]));\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split(\".\");\n\tfor(var i=0;i<ip_array.length;i++){\n\t\tif(ip_array[i].charAt(0)==\"0\"){\n\t\t\tip_array[i] = ip_array[i].substring(1);\n\t\t}\n\t}\n\treturn ip_array.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tvar temp = ip_arr[i];\n\t\twhile(temp.charAt(0)==\"0\"){\n\t\t\ttemp = temp.substring(1);\n\t\t}\n\t\tnew_ip += temp;\n\t\tif(i!=ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]==0){\n\t\t\tip_arr[i] = '';\n\t\t}\n\t}\n\treturn ip_arr.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp0t0hxr5c.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0t0hxr5c.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] != '0'){\n\t\t\tnew_ip = new_ip + ip_arr[i] + '.';\n\t\t}\n\t}\n\tnew_ip = new_ip.substring(0,new_ip.length-1);\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpzt9_tcq8.js:19:10)\n    at Object.<anonymous> (/tmp/tmpzt9_tcq8.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip = new_ip + ip_arr[i];\n        }\n    }\n    return new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmptd53k3sd.js:17:10)\n    at Object.<anonymous> (/tmp/tmptd53k3sd.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tvar ip_str = ip_arr[i];\n\t\tvar ip_str_arr = ip_str.split('');\n\t\tvar new_ip_str = '';\n\t\tfor(var j=0;j<ip_str_arr.length;j++){\n\t\t\tif(ip_str_arr[j] != '0'){\n\t\t\t\tnew_ip_str += ip_str_arr[j];\n\t\t\t}\n\t\t}\n\t\tnew_ip.push(new_ip_str);\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_array.length;i++){\n\t\tif(ip_array[i].charAt(0)==\"0\"){\n\t\t\tnew_ip += ip_array[i].substring(1,ip_array[i].length);\n\t\t}else{\n\t\t\tnew_ip += ip_array[i];\n\t\t}\n\t\tif(i!=ip_array.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        var num = parseInt(ip_arr[i]);\n        new_ip += num + \".\";\n    }\n    return new_ip.slice(0, -1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == '0'){\n            new_ip.push(ip_arr[i].substr(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar ip_arr_new = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tvar ip_arr_new_str = ip_arr[i].replace(/^0+/, '');\n\t\tip_arr_new.push(ip_arr_new_str);\n\t}\n\treturn ip_arr_new.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i] != 0){\n            new_ip += ip_arr[i];\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpfbhley55.js:18:10)\n    at Object.<anonymous> (/tmp/tmpfbhley55.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp31rksbxc.js:18:10)\n    at Object.<anonymous> (/tmp/tmp31rksbxc.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0)==\"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1);\n\t\t}else{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i!=ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i] != 0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmph0t2pjy7.js:17:10)\n    at Object.<anonymous> (/tmp/tmph0t2pjy7.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i = 0; i < ip_arr.length; i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tip_arr[i] = ip_arr[i].substring(1);\n\t\t}\n\t\tnew_ip += ip_arr[i] + \".\";\n\t}\n\treturn new_ip.substring(0, new_ip.length - 1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_arr_new = [];\n    for(var i=0; i<ip_arr.length; i++){\n        var temp = ip_arr[i];\n        while(temp.charAt(0)==\"0\"){\n            temp = temp.substr(1);\n        }\n        ip_arr_new.push(temp);\n    }\n    return ip_arr_new.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_array.length;i++){\n\t\tif(ip_array[i] != \"0\"){\n\t\t\tnew_ip = new_ip + ip_array[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpryd0zzx8.js:18:10)\n    at Object.<anonymous> (/tmp/tmpryd0zzx8.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tip_arr[i] = ip_arr[i].substring(1);\n\t\t}\n\t\tnew_ip += ip_arr[i];\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n    }\n    return ip_arr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        var num = parseInt(ip_arr[i]);\n        if(num!=0){\n            new_ip += num;\n        }\n        if(i!=ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip += ip_arr[i];\n        if(i != ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split(\".\");\n  var new_ip = \"\";\n  for(var i = 0; i < ip_arr.length; i++){\n    if(ip_arr[i] != 0){\n      new_ip += ip_arr[i];\n    }\n    if(i != ip_arr.length - 1){\n      new_ip += \".\";\n    }\n  }\n  return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpbk38vt32.js:21:10)\n    at Object.<anonymous> (/tmp/tmpbk38vt32.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n    }\n    return ip_arr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_arr_new = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i] == 0){\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t\telse{\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpph4iu9m3.js:22:10)\n    at Object.<anonymous> (/tmp/tmpph4iu9m3.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] == '0'){\n\t\t\tnew_ip += '0.';\n\t\t}else{\n\t\t\tnew_ip += ip_arr[i]+'.';\n\t\t}\n\t}\n\treturn new_ip.substring(0,new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpu_csgooj.js:20:10)\n    at Object.<anonymous> (/tmp/tmpu_csgooj.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split(\".\");\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]<10){\n            arr[i] = \"0\"+arr[i];\n        }\n    }\n    return arr.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.008.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpor2zahbi.js:16:10)\n    at Object.<anonymous> (/tmp/tmpor2zahbi.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.008.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        var num = parseInt(ip_arr[i]);\n        if(num != 0){\n            new_ip.push(num);\n        }\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == 0){\n            new_ip.push(ip_arr[i].substring(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_arr_new = [];\n    for(var i=0; i<ip_arr.length; i++){\n        var ip_arr_new_str = ip_arr[i].replace(/^0+/, '');\n        ip_arr_new.push(ip_arr_new_str);\n    }\n    return ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_arr_new = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0) == 0){\n\t\t\tip_arr_new.push(ip_arr[i].substring(1));\n\t\t}\n\t\telse{\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmprt8grknj.js:17:10)\n    at Object.<anonymous> (/tmp/tmprt8grknj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_arr_new = [];\n    for(var i=0;i<ip_arr.length;i++){\n        ip_arr_new.push(parseInt(ip_arr[i]));\n    }\n    return ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_arr_new = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpuv897o12.js:18:10)\n    at Object.<anonymous> (/tmp/tmpuv897o12.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_str = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        ip_str += parseInt(ip_arr[i]) + \".\";\n    }\n    return ip_str.substring(0,ip_str.length-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split('.');\n  var new_ip = [];\n  for(var i=0;i<ip_arr.length;i++){\n    new_ip.push(parseInt(ip_arr[i]));\n  }\n  return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip = new_ip + ip_arr[i];\n\t\t}\n\t\tif(i<ip_arr.length-1){\n\t\t\tnew_ip = new_ip + \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpolyed4qm.js:21:10)\n    at Object.<anonymous> (/tmp/tmpolyed4qm.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i].charAt(0) == '0'){\n\t\t\tnew_ip.push(ip_arr[i].substring(1));\n\t\t}\n\t\telse{\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0)=='0'){\n            new_ip.push(ip_arr[i].substring(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substr(1);\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_array = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_array.length;i++){\n        var num = parseInt(ip_array[i]);\n        new_ip += num + \".\";\n    }\n    return new_ip.substring(0,new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i][0] == 0){\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n    }\n    return ip_arr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] != 0){\n\t\t\tnew_ip = new_ip + ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpshxjukwv.js:18:10)\n    at Object.<anonymous> (/tmp/tmpshxjukwv.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_array.length;i++){\n\t\tvar temp = ip_array[i];\n\t\twhile(temp.charAt(0) == '0'){\n\t\t\ttemp = temp.substring(1);\n\t\t}\n\t\tnew_ip += temp;\n\t\tif(i != ip_array.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_arr_new = [];\n    for(var i=0;i<ip_arr.length;i++){\n        var temp = ip_arr[i];\n        while(temp.charAt(0)==\"0\"){\n            temp = temp.substring(1);\n        }\n        ip_arr_new.push(temp);\n    }\n    return ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tvar j = 0;\n\t\t\twhile(ip_arr[i].charAt(j) == \"0\"){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tnew_ip += ip_arr[i].substring(j, ip_arr[i].length);\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpu8v1_d8p.js:18:10)\n    at Object.<anonymous> (/tmp/tmpu8v1_d8p.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == '0'){\n            new_ip.push(ip_arr[i].substring(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tfor(var i = 0; i < ip_arr.length; i++){\n\t\tif(ip_arr[i].charAt(0) == 0){\n\t\t\tip_arr[i] = ip_arr[i].substring(1);\n\t\t}\n\t}\n\treturn ip_arr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i][0] == 0){\n            ip_arr[i] = ip_arr[i].substr(1);\n        }\n        new_ip.push(ip_arr[i]);\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        new_ip.push(parseInt(ip_arr[i]));\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0)=='0'){\n            new_ip.push(ip_arr[i].substr(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split(\".\");\n    var new_arr = [];\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]!=0){\n            new_arr.push(arr[i]);\n        }\n    }\n    return new_arr.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp8fynf6zk.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8fynf6zk.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] != \"0\"){\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpe845rsl6.js:18:10)\n    at Object.<anonymous> (/tmp/tmpe845rsl6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            new_ip += ip_arr[i].substring(1,ip_arr[i].length);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i!=ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]==0){\n            new_ip += \"0.\";\n        }\n        else{\n            new_ip += ip_arr[i]+\".\";\n        }\n    }\n    return new_ip.slice(0,-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpf0oszysu.js:21:10)\n    at Object.<anonymous> (/tmp/tmpf0oszysu.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_str = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]==\"00\"){\n\t\t\tip_arr[i] = \"0\";\n\t\t}\n\t\telse if(ip_arr[i].charAt(0)==\"0\"){\n\t\t\tip_arr[i] = ip_arr[i].substring(1);\n\t\t}\n\t\tip_str = ip_str + ip_arr[i] + \".\";\n\t}\n\tip_str = ip_str.substring(0,ip_str.length-1);\n\treturn ip_str;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!='0'){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp6aybe30v.js:17:10)\n    at Object.<anonymous> (/tmp/tmp6aybe30v.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split('.');\n  var new_ip = [];\n  for(var i=0;i<ip_arr.length;i++){\n    if(ip_arr[i].charAt(0)=='0'){\n      new_ip.push(ip_arr[i].substring(1));\n    }else{\n      new_ip.push(ip_arr[i]);\n    }\n  }\n  return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpyxt8oif7.js:18:10)\n    at Object.<anonymous> (/tmp/tmpyxt8oif7.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_new = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        ip_new += ip_arr[i];\n        if(i!=ip_arr.length-1){\n            ip_new += \".\";\n        }\n    }\n    return ip_new;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_array = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_array.length;i++){\n        if(ip_array[i].charAt(0)==\"0\"){\n            ip_array[i] = ip_array[i].substring(1);\n        }\n        new_ip = new_ip + ip_array[i] + \".\";\n    }\n    new_ip = new_ip.substring(0,new_ip.length-1);\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var ip_str = '';\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] == '0'){\n            ip_str += '0.';\n        }else{\n            ip_str += ip_arr[i] + '.';\n        }\n    }\n    return ip_str.slice(0, -1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpvpua94aw.js:20:10)\n    at Object.<anonymous> (/tmp/tmpvpua94aw.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == 0){\n            new_ip.push(ip_arr[i].substring(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_arr_new = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != \"0\"){\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpq5r6hz8p.js:18:10)\n    at Object.<anonymous> (/tmp/tmpq5r6hz8p.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0'){\n\t\t\tip_arr[i] = ip_arr[i].substr(1);\n\t\t}\n\t\tnew_ip += ip_arr[i];\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += '.';\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip_arr = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip_arr.push(ip_arr[i]);\n        }\n    }\n    return new_ip_arr.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmplm3xk7bt.js:17:10)\n    at Object.<anonymous> (/tmp/tmplm3xk7bt.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i].charAt(0) == '0'){\n\t\t\tnew_ip.push(ip_arr[i].substring(1));\n\t\t}\n\t\telse{\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0)==\"0\"){\n\t\t\tip_arr[i] = ip_arr[i].substring(1);\n\t\t}\n\t}\n\treturn ip_arr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split(\".\");\n    var newarr = [];\n    for(var i=0;i<arr.length;i++){\n        if(arr[i].charAt(0)==0){\n            arr[i] = arr[i].substring(1);\n        }\n        newarr.push(arr[i]);\n    }\n    return newarr.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]==0){\n\t\t\tnew_ip = new_ip + \".\";\n\t\t}\n\t\telse{\n\t\t\tnew_ip = new_ip + ip_arr[i] + \".\";\n\t\t}\n\t}\n\treturn new_ip.substring(0,new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmptgkkhd0t.js:21:10)\n    at Object.<anonymous> (/tmp/tmptgkkhd0t.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_new = \"\";\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n\t\t\tip_new += ip_arr[i].substring(1);\n\t\t}\n\t\telse{\n\t\t\tip_new += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length-1){\n\t\t\tip_new += \".\";\n\t\t}\n\t}\n\treturn ip_new;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n            new_ip += ip_arr[i].substring(1);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length - 1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] == 0){\n\t\t\tnew_ip += '0.';\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i]+'.';\n\t\t}\n\t}\n\treturn new_ip.substring(0,new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp95y_04wo.js:21:10)\n    at Object.<anonymous> (/tmp/tmp95y_04wo.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split(\".\");\n\tfor(var i=0;i<ip_array.length;i++){\n\t\tif(ip_array[i].charAt(0)==\"0\"){\n\t\t\tip_array[i] = ip_array[i].substring(1);\n\t\t}\n\t}\n\treturn ip_array.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i][0] == 0){\n            new_ip.push(ip_arr[i].slice(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar arr = ip.split(\".\");\n\tvar newarr = [];\n\tfor(var i=0;i<arr.length;i++){\n\t\tvar temp = arr[i].replace(/^0+/, '');\n\t\tnewarr.push(temp);\n\t}\n\treturn newarr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_array = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_array.length; i++){\n        if(ip_array[i].length > 1 && ip_array[i][0] == \"0\"){\n            new_ip += ip_array[i].substring(1);\n        }\n        else{\n            new_ip += ip_array[i];\n        }\n        if(i != ip_array.length - 1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        var num = parseInt(ip_arr[i]);\n        new_ip += num + \".\";\n    }\n    return new_ip.slice(0, -1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_array.length;i++){\n\t\tif(ip_array[i]!=0){\n\t\t\tnew_ip = new_ip + ip_array[i];\n\t\t}\n\t\tif(i!=ip_array.length-1){\n\t\t\tnew_ip = new_ip + \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpincccnq3.js:21:10)\n    at Object.<anonymous> (/tmp/tmpincccnq3.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i = 0; i < ip_arr.length; i++){\n        var num = parseInt(ip_arr[i]);\n        new_ip.push(num);\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split(\".\");\n  var new_ip = [];\n  for(var i = 0; i < ip_arr.length; i++){\n    if(ip_arr[i].charAt(0) == '0'){\n      new_ip.push(ip_arr[i].substring(1));\n    }else{\n      new_ip.push(ip_arr[i]);\n    }\n  }\n  return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i] != 0){\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpsvxjvqq4.js:18:10)\n    at Object.<anonymous> (/tmp/tmpsvxjvqq4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_arr_new = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            ip_arr_new.push(ip_arr[i].substring(1));\n        }\n        else{\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] == 0){\n\t\t\tnew_ip += \"0.\";\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i]+\".\";\n\t\t}\n\t}\n\treturn new_ip.substring(0,new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpw3vvcnc7.js:21:10)\n    at Object.<anonymous> (/tmp/tmpw3vvcnc7.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] != \"0\"){\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpe845rsl6.js:18:10)\n    at Object.<anonymous> (/tmp/tmpe845rsl6.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmppbbeo6f2.js:17:10)\n    at Object.<anonymous> (/tmp/tmppbbeo6f2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var ip_arr_new = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            ip_arr_new.push(ip_arr[i].substr(1));\n        }\n        else{\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i] != \"0\"){\n            new_ip += ip_arr[i];\n        }\n    }\n    return new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpl7qwis6v.js:17:10)\n    at Object.<anonymous> (/tmp/tmpl7qwis6v.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split('.');\n  var new_ip = [];\n  for(var i=0; i<ip_arr.length; i++){\n    if(ip_arr[i].charAt(0) == '0'){\n      new_ip.push(ip_arr[i].replace(/^0+/, ''));\n    }else{\n      new_ip.push(ip_arr[i]);\n    }\n  }\n  return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i][0]=='0'){\n            new_ip.push(parseInt(ip_arr[i]));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar ip_arr_new = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] == 0){\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t\telse{\n\t\t\tip_arr_new.push(parseInt(ip_arr[i]));\n\t\t}\n\t}\n\treturn ip_arr_new.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_array = ip.split(\".\");\n    for(var i=0;i<ip_array.length;i++){\n        if(ip_array[i].length>1 && ip_array[i].charAt(0)==\"0\"){\n            ip_array[i] = ip_array[i].substring(1);\n        }\n    }\n    return ip_array.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var ip_arr_new = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]==0){\n            ip_arr_new.push(ip_arr[i]);\n        }\n        else{\n            ip_arr_new.push(ip_arr[i]);\n            break;\n        }\n    }\n    return ip_arr_new.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp01w96974.js:21:10)\n    at Object.<anonymous> (/tmp/tmp01w96974.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_array = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_array.length;i++){\n        if(ip_array[i]!=0){\n            new_ip.push(ip_array[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpxp3asyhw.js:18:10)\n    at Object.<anonymous> (/tmp/tmpxp3asyhw.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpzjiu4p1l.js:17:10)\n    at Object.<anonymous> (/tmp/tmpzjiu4p1l.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip = new_ip + ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpijrx20_4.js:18:10)\n    at Object.<anonymous> (/tmp/tmpijrx20_4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]==0){\n\t\t\tnew_ip += \"0.\";\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i]+\".\";\n\t\t}\n\t}\n\treturn new_ip.substring(0,new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpdcij3e9d.js:21:10)\n    at Object.<anonymous> (/tmp/tmpdcij3e9d.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != \"0\"){\n            new_ip += ip_arr[i];\n        }\n    }\n    return new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpbha1xt7b.js:17:10)\n    at Object.<anonymous> (/tmp/tmpbha1xt7b.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpbjp2avwx.js:17:10)\n    at Object.<anonymous> (/tmp/tmpbjp2avwx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            new_ip.push(ip_arr[i].substr(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp1kjvmt9a.js:17:10)\n    at Object.<anonymous> (/tmp/tmp1kjvmt9a.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i][0] == '0'){\n            new_ip.push(ip_arr[i].substring(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i] == 0){\n\t\t\tnew_ip += '0.';\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i] + '.';\n\t\t}\n\t}\n\treturn new_ip.substring(0, new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp3ebnymne.js:21:10)\n    at Object.<anonymous> (/tmp/tmp3ebnymne.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_arr_new = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n\t\t\tip_arr_new.push(ip_arr[i].substring(1));\n\t\t}else{\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n\t\t\tip_arr[i] = ip_arr[i].substring(1);\n\t\t}\n\t\tnew_ip += ip_arr[i];\n\t\tif(i!=ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip += ip_arr[i];\n        }\n        else{\n            new_ip += \"\";\n        }\n        if(i!=ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpe631250j.js:23:10)\n    at Object.<anonymous> (/tmp/tmpe631250j.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\"){\n            new_ip += ip_arr[i].substr(1);\n        }else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split(\".\");\n    var newarr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i].charAt(0) == 0){\n            newarr.push(arr[i].substring(1));\n        }else{\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            new_ip += ip_arr[i].substring(1,ip_arr[i].length);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i != ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr=ip.split(\".\");\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0)==0){\n            ip_arr[i]=ip_arr[i].substring(1);\n        }\n    }\n    return ip_arr.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp1kjvmt9a.js:17:10)\n    at Object.<anonymous> (/tmp/tmp1kjvmt9a.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == '0'){\n            new_ip.push(ip_arr[i].substr(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split(\".\");\n    var newarr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i].charAt(0) == \"0\"){\n            newarr.push(arr[i].substr(1));\n        }\n        else{\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar ip_arr_new = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tip_arr_new.push(parseInt(ip_arr[i]));\n\t}\n\treturn ip_arr_new.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) === \"0\"){\n            new_ip.push(parseInt(ip_arr[i]));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i = 0; i < ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            new_ip.push(ip_arr[i].substring(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i = 0; i < ip_arr.length; i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1);\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length - 1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i] == '0'){\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t\telse{\n\t\t\tnew_ip.push(parseInt(ip_arr[i]));\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        var num = parseInt(ip_arr[i]);\n        new_ip += num + \".\";\n    }\n    return new_ip.slice(0,-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        new_ip.push(parseInt(ip_arr[i]));\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] == 0){\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}else{\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpt1sjb8g7.js:21:10)\n    at Object.<anonymous> (/tmp/tmpt1sjb8g7.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0'){\n\t\t\tnew_ip.push(ip_arr[i].substr(1));\n\t\t}else{\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]==0){\n\t\t\tnew_ip += \"0\";\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i!=ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp4q3ra8mv.js:24:10)\n    at Object.<anonymous> (/tmp/tmp4q3ra8mv.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0)=='0'){\n\t\t\tip_arr[i] = ip_arr[i].substring(1);\n\t\t}\n\t\tnew_ip += ip_arr[i];\n\t\tif(i!=ip_arr.length-1){\n\t\t\tnew_ip += '.';\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            new_ip += ip_arr[i].substr(1,ip_arr[i].length-1);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i!=ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0)==\"0\"){\n\t\t\tnew_ip.push(ip_arr[i].substr(1));\n\t\t}else{\n\t\t\tnew_ip.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr=ip.split('.');\n\tvar new_ip='';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip=new_ip+ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmps00p157v.js:17:10)\n    at Object.<anonymous> (/tmp/tmps00p157v.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_array = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_array.length;i++){\n        if(ip_array[i]!=0){\n            new_ip.push(ip_array[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpckyrat7p.js:17:10)\n    at Object.<anonymous> (/tmp/tmpckyrat7p.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip += ip_arr[i];\n        }\n    }\n    return new_ip;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmprk_jbhru.js:17:10)\n    at Object.<anonymous> (/tmp/tmprk_jbhru.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split(\".\");\n  var new_ip = \"\";\n  for(var i=0;i<ip_arr.length;i++){\n    if(ip_arr[i]!=0){\n      new_ip += ip_arr[i];\n    }\n  }\n  return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpxcj_bmnk.js:18:10)\n    at Object.<anonymous> (/tmp/tmpxcj_bmnk.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != 0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp26l56y5t.js:17:10)\n    at Object.<anonymous> (/tmp/tmp26l56y5t.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip = new_ip + ip_arr[i];\n        }\n        if(i!=ip_arr.length-1){\n            new_ip = new_ip + \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpappd4shr.js:21:10)\n    at Object.<anonymous> (/tmp/tmpappd4shr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == '0'){\n            new_ip.push(ip_arr[i].substr(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == '0'){\n            new_ip.push(ip_arr[i].slice(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        new_ip.push(parseInt(ip_arr[i]));\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1,ip_arr[i].length);\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i][0] == \"0\"){\n            new_ip.push(ip_arr[i].substring(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == '0'){\n            new_ip.push(ip_arr[i].substr(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmppbbeo6f2.js:17:10)\n    at Object.<anonymous> (/tmp/tmppbbeo6f2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmppbbeo6f2.js:17:10)\n    at Object.<anonymous> (/tmp/tmppbbeo6f2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split('.');\n  var new_ip = [];\n  for(var i=0; i<ip_arr.length; i++){\n    if(ip_arr[i].charAt(0) == '0'){\n      new_ip.push(ip_arr[i].substring(1));\n    }else{\n      new_ip.push(ip_arr[i]);\n    }\n  }\n  return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i] != '0'){\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmprsbh26fr.js:18:10)\n    at Object.<anonymous> (/tmp/tmprsbh26fr.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar ip_arr_new = [];\n\tfor(var i=0; i<ip_arr.length; i++){\n\t\tif(ip_arr[i] == 0){\n\t\t\tip_arr_new.push('0');\n\t\t}else{\n\t\t\tip_arr_new.push(ip_arr[i]);\n\t\t}\n\t}\n\treturn ip_arr_new.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpfbpyzjt6.js:20:10)\n    at Object.<anonymous> (/tmp/tmpfbpyzjt6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split(\".\");\n    var newarr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i].charAt(0) == \"0\"){\n            newarr.push(arr[i].substring(1));\n        }\n        else{\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == \"0\"){\n            new_ip.push(ip_arr[i].substring(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] != 0){\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpll85tqmn.js:18:10)\n    at Object.<anonymous> (/tmp/tmpll85tqmn.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp1kjvmt9a.js:17:10)\n    at Object.<anonymous> (/tmp/tmp1kjvmt9a.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp6ku877yp.js:18:10)\n    at Object.<anonymous> (/tmp/tmp6ku877yp.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tvar temp = ip_arr[i];\n\t\twhile(temp.charAt(0)==\"0\"){\n\t\t\ttemp = temp.substring(1);\n\t\t}\n\t\tnew_ip += temp;\n\t\tif(i!=ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar ip_str = '';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i] != '0'){\n\t\t\tip_str += ip_arr[i];\n\t\t}\n\t}\n\treturn ip_str;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp738mvj3k.js:18:10)\n    at Object.<anonymous> (/tmp/tmp738mvj3k.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var ip_arr_new = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpoz8uisry.js:17:10)\n    at Object.<anonymous> (/tmp/tmpoz8uisry.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tnew_ip.push(parseInt(ip_arr[i]));\n\t}\n\treturn new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var ip_arr_new = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp0r3tqmdh.js:18:10)\n    at Object.<anonymous> (/tmp/tmp0r3tqmdh.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpxpkdp6me.js:18:10)\n    at Object.<anonymous> (/tmp/tmpxpkdp6me.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_arr[i].substring(1);\n\t\t}else{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i != ip_arr.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == 0){\n            new_ip.push(ip_arr[i].substring(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        var num = parseInt(ip_arr[i]);\n        new_ip += num + \".\";\n    }\n    return new_ip.substring(0,new_ip.length-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        var num = parseInt(ip_arr[i]);\n        new_ip += num + \".\";\n    }\n    return new_ip.slice(0,-1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].length>1 && ip_arr[i].charAt(0)==\"0\"){\n            new_ip += ip_arr[i].substring(1,ip_arr[i].length);\n        }\n        else{\n            new_ip += ip_arr[i];\n        }\n        if(i!=ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]!=0){\n\t\t\tnew_ip = new_ip + ip_arr[i];\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpijrx20_4.js:18:10)\n    at Object.<anonymous> (/tmp/tmpijrx20_4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tvar ip_arr_new = [];\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tip_arr_new.push(parseInt(ip_arr[i]));\n\t}\n\treturn ip_arr_new.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split('.');\n  var new_ip = [];\n  for(var i=0;i<ip_arr.length;i++){\n    if(ip_arr[i].charAt(0) == '0'){\n      new_ip.push(ip_arr[i].substr(1));\n    }else{\n      new_ip.push(ip_arr[i]);\n    }\n  }\n  return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].charAt(0) == '0'){\n            new_ip.push(ip_arr[i].substring(1));\n        }else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_array = ip.split(\".\");\n\tvar new_ip = \"\";\n\tfor(var i=0; i<ip_array.length; i++){\n\t\tif(ip_array[i].length > 1 && ip_array[i].charAt(0) == \"0\"){\n\t\t\tnew_ip += ip_array[i].substring(1);\n\t\t}\n\t\telse{\n\t\t\tnew_ip += ip_array[i];\n\t\t}\n\t\tif(i != ip_array.length-1){\n\t\t\tnew_ip += \".\";\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split('.');\n    var newarr = [];\n    for(var i=0; i<arr.length; i++){\n        if(arr[i]!=0){\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp32n7ntmg.js:17:10)\n    at Object.<anonymous> (/tmp/tmp32n7ntmg.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar arr = ip.split(\".\");\n\tvar newarr = [];\n\tfor(var i=0;i<arr.length;i++){\n\t\tif(arr[i].length>1 && arr[i].charAt(0)==\"0\"){\n\t\t\tnewarr.push(arr[i].substring(1));\n\t\t}\n\t\telse{\n\t\t\tnewarr.push(arr[i]);\n\t\t}\n\t}\n\treturn newarr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split('.');\n\tvar new_ip = '';\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i]=='0'){\n\t\t\tnew_ip += '0';\n\t\t}else{\n\t\t\tnew_ip += ip_arr[i];\n\t\t}\n\t\tif(i!=ip_arr.length-1){\n\t\t\tnew_ip += '.';\n\t\t}\n\t}\n\treturn new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmplz58992b.js:23:10)\n    at Object.<anonymous> (/tmp/tmplz58992b.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmppbbeo6f2.js:17:10)\n    at Object.<anonymous> (/tmp/tmppbbeo6f2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = \"\";\n    for(var i=0;i<ip_arr.length;i++){\n        var num = parseInt(ip_arr[i]);\n        if(num != 0){\n            new_ip += num;\n        }\n        if(i != ip_arr.length-1){\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split(\".\");\n    var newarr = [];\n    for(var i=0;i<arr.length;i++){\n        if(arr[i].charAt(0) == \"0\"){\n            newarr.push(arr[i].substr(1));\n        }\n        else{\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join(\".\");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i]!=='0'){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpknj6a00y.js:17:10)\n    at Object.<anonymous> (/tmp/tmpknj6a00y.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n  var ip_arr = ip.split('.');\n  var new_ip = '';\n  for(var i=0; i<ip_arr.length; i++){\n    if(ip_arr[i] == 0){\n      new_ip += '0.';\n    }\n    else{\n      new_ip += ip_arr[i] + '.';\n    }\n  }\n  return new_ip.substring(0, new_ip.length-1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpqja94q9a.js:21:10)\n    at Object.<anonymous> (/tmp/tmpqja94q9a.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split(\".\");\n    var new_ip = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i] != 0){\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp5djuy5pz.js:18:10)\n    at Object.<anonymous> (/tmp/tmp5djuy5pz.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var new_ip = [];\n    for(var i=0;i<ip_arr.length;i++){\n        if(ip_arr[i].charAt(0) == '0'){\n            new_ip.push(ip_arr[i].substr(1));\n        }\n        else{\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123731,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var ip_arr = ip.split('.');\n    var ip_arr_new = [];\n    for(var i=0; i<ip_arr.length; i++){\n        if(ip_arr[i].length > 1 && ip_arr[i][0] == '0'){\n            ip_arr_new.push(ip_arr[i].substring(1));\n        }\n        else{\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n    var arr = ip.split('.');\n    var newarr = [];\n    for(var i=0;i<arr.length;i++){\n        var temp = arr[i];\n        while(temp[0] === '0'){\n            temp = temp.substring(1);\n        }\n        newarr.push(temp);\n    }\n    return newarr.join('.');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123733,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip){\n\tvar ip_arr = ip.split(\".\");\n\tfor(var i=0;i<ip_arr.length;i++){\n\t\tif(ip_arr[i].charAt(0)==0){\n\t\t\tip_arr[i] = ip_arr[i].substring(1);\n\t\t}\n\t}\n\treturn ip_arr.join(\".\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}