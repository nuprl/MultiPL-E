{
  "name": "mbpp_641_is_nonagonal",
  "language": "js",
  "prompt": "//Write a function to find the nth nonagonal number.\nfunction is_nonagonal(n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nonagonal;\n  assert.deepEqual(candidate(10),325);\n  assert.deepEqual(candidate(15),750);\n  assert.deepEqual(candidate(18),1089);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    return (Math.sqrt(1 + 8 * n) - 1) / 2 % 1 === 0;\n}\n",
    "    return (Math.sqrt(1 + 8 * n) - 1) / 2 % 1 === 0;\n}\n",
    "    var i = 1;\n    var sum = 0;\n    while(sum < n){\n        sum += i;\n        i++;\n    }\n    if(sum == n){\n        return true;\n    }\n    return false;\n}\n",
    "    return (Math.sqrt(1+8*n) - 1) % 2 === 0;\n}\n",
    "\tvar a = (Math.sqrt(1 + 8 * n) - 1) / 2;\n\treturn a === Math.floor(a);\n}\n",
    "    var i=0;\n    var sum=0;\n    while(sum<n){\n        sum+=i;\n        i++;\n    }\n    if(sum==n){\n        return true;\n    }\n    return false;\n}",
    "    return (Math.sqrt(1+8*n)%1==0);\n}",
    "  var i = 1;\n  while(n > 0){\n    n -= i;\n    i++;\n  }\n  return n == 0;\n}\n",
    "    return (Math.sqrt(1 + 8 * n) - 1) % 2 == 0;\n}\n",
    "    return (Math.sqrt(1+8*n) % 1) == 0;\n}\n",
    "    return (Math.sqrt(1 + 8 * n) - 1) % 2 == 0;\n}\n",
    "    return (Math.sqrt(8*n+1) % 1 == 0);\n}\n",
    "    return (Math.sqrt(1+8*n) - 1)/2 % 1 == 0;\n}\n",
    "\tvar x = (Math.sqrt(1+8*n)-1)/2;\n\tif (x%1 === 0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n",
    "    var nth_nonagonal = (n*(n-1))/2;\n    return nth_nonagonal;\n}",
    "    var sum = 0;\n    for(var i = 1; i < n; i++){\n        sum += i;\n    }\n    return sum;\n}\n",
    "    var x = (Math.sqrt(1 + 8*n) - 1)/2;\n    if(x % 1 === 0){\n        return true;\n    }\n    return false;\n}\n",
    "    return (Math.sqrt(8*n+1)-1)/2 % 1 == 0;\n}\n",
    "    return (Math.sqrt(1+8*n) - 1)/2 % 1 === 0;\n}\n",
    "\tvar i = 1;\n\tvar sum = 0;\n\twhile(sum < n){\n\t\tsum += i;\n\t\ti++;\n\t}\n\tif(sum == n){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n"
  ]
}