{
  "name": "mbpp_465_drop_empty",
  "language": "js",
  "prompt": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n  var dict2 = {};\n  for (var key in dict1){\n    if (dict1[key] != \"\"){\n      dict2[key] = dict1[key];\n    }\n  }\n  return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmprwvewwcv.js:17:10)\n    at Object.<anonymous> (/tmp/tmprwvewwcv.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpw8wn56t4.js:16:10)\n    at Object.<anonymous> (/tmp/tmpw8wn56t4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {a:1, b:\"\", c:3, d:\"\", e:5};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpyb504j2y.js:17:10)\n    at Object.<anonymous> (/tmp/tmpyb504j2y.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpw8wn56t4.js:16:10)\n    at Object.<anonymous> (/tmp/tmpw8wn56t4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplvql67t5.js:18:10)\n    at Object.<anonymous> (/tmp/tmplvql67t5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    \"name\" : \"\",\n    \"age\" : \"\",\n    \"sex\" : \"male\",\n    \"address\" : \"\",\n    \"phone\" : \"123456789\"\n}\n\nvar dict2 = drop_empty(dict1);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpr0l8p66b.js:26:10)\n    at Object.<anonymous> (/tmp/tmpr0l8p66b.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a': 1, 'b': 2, 'c': '', 'd': 4, 'e': ''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmph4y9ygeo.js:18:10)\n    at Object.<anonymous> (/tmp/tmph4y9ygeo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1) {\n        if (dict1[key] != \"\") {\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmphvucem3d.js:17:10)\n    at Object.<anonymous> (/tmp/tmphvucem3d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpmj1j50kz.js:17:10)\n    at Object.<anonymous> (/tmp/tmpmj1j50kz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {'a':1, 'b':'', 'c':3};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_9oi0clq.js:17:10)\n    at Object.<anonymous> (/tmp/tmp_9oi0clq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {name: \"\", age: \"\", city: \"\", country: \"\", phone: \"\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpbavt0xoe.js:18:10)\n    at Object.<anonymous> (/tmp/tmpbavt0xoe.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == ''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nvar dict1 = {a:1, b:2, c:null, d:undefined, e:''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpian292ns.js:18:10)\n    at Object.<anonymous> (/tmp/tmpian292ns.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptr4c3zjk.js:16:10)\n    at Object.<anonymous> (/tmp/tmptr4c3zjk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {'a':'','b':'','c':'','d':'','e':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpgrpkl8em.js:17:10)\n    at Object.<anonymous> (/tmp/tmpgrpkl8em.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a': 1, 'b': 2, 'c': '', 'd': 4};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp0bk06gbt.js:18:10)\n    at Object.<anonymous> (/tmp/tmp0bk06gbt.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if(dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp1l8u9xxj.js:16:10)\n    at Object.<anonymous> (/tmp/tmp1l8u9xxj.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    \"name\": \"\",\n    \"age\": \"\",\n    \"hobby\": \"\",\n    \"isMarried\": \"\",\n    \"children\": \"\",\n    \"car\": \"\",\n    \"pets\": \"\",\n    \"other\": \"\"\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpugw66xng.js:28:10)\n    at Object.<anonymous> (/tmp/tmpugw66xng.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpmj1j50kz.js:17:10)\n    at Object.<anonymous> (/tmp/tmpmj1j50kz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpapj4pbqu.js:16:10)\n    at Object.<anonymous> (/tmp/tmpapj4pbqu.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {a: \"\", b: \"\", c: \"\", d: \"\", e: \"\", f: \"\", g: \"\", h: \"\", i: \"\", j: \"\", k: \"\", l: \"\", m: \"\", n: \"\", o: \"\", p: \"\", q: \"\", r: \"\", s: \"\", t: \"\", u: \"\", v: \"\", w: \"\", x: \"\", y: \"\", z: \"\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpm__kpc3g.js:18:10)\n    at Object.<anonymous> (/tmp/tmpm__kpc3g.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {a: \"\", b: \"\", c: \"d\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpm4b49qds.js:18:10)\n    at Object.<anonymous> (/tmp/tmpm4b49qds.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    \"name\": \"RajiniKanth\",\n    \"age\": 25,\n    \"salary\": 50000,\n    \"city\": \"Hyderabad\"\n};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5f1pd3sx.js:23:10)\n    at Object.<anonymous> (/tmp/tmp5f1pd3sx.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpw8wn56t4.js:16:10)\n    at Object.<anonymous> (/tmp/tmpw8wn56t4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':'','f':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5tlfxnh8.js:18:10)\n    at Object.<anonymous> (/tmp/tmp5tlfxnh8.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp0alys2vi.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0alys2vi.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp0alys2vi.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0alys2vi.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    \"name\": \"\",\n    \"age\": \"\",\n    \"sex\": \"\",\n    \"address\": \"\",\n    \"phone\": \"\",\n    \"email\": \"\",\n    \"website\": \"\",\n    \"company\": \"\",\n    \"job\": \"\",\n    \"salary\": \"\",\n    \"education\": \"\",\n    \"hobby\": \"\",\n    \"interest\": \"\",\n    \"favorite\": \"\",\n    \"favorite_color\": \"\",\n    \"favorite_food\": \"\",\n    \"favorite_drink\": \"\",\n    \"favorite_movie\": \"\",\n    \"favorite_sport\": \"\",\n    \"favorite_game\": \"\",\n    \"favorite_music\": \"\",\n    \"favorite_book\": \"\",\n    \"favorite_writer\": \"\",\n    \"favorite_singer\": \"\",\n    \"favorite_actor\": \"\",\n    \"favorite_actress\": \"\",\n    \"favorite_teacher\": \"\",\n    \"favorite_subject\": \"\",\n    \"favorite_place\": \"\",\n    \"favorite_animal\": \"\",\n    \"favorite_pet\": \"\",\n    \"favorite_flower\": \"\",\n    \"favorite_brand\": \"\",\n    \"favorite_clothes\": \"\",\n    \"favorite_jewelry\": \"\",\n    \"favorite_perfume\": \"\",\n    \"favorite_season\": \"\",\n    \"favorite_month\": \"\",\n    \"favorite_holiday\": \"\",\n    \"favorite_number\": \"\",\n    \"favorite_shape\": \"\",\n    \"favorite_website\": \"\",\n    \"favorite_app\": \"\",\n    \"favorite_social_media\": \"\",\n    \"favorite_hero\": \"\",\n    \"favorite_superhero\": \"\",\n    \"favorite_cartoon_character\": \"\",\n    \"favorite_cartoon_show\": \"\",\n    \"favorite_cartoon_movie\": \"\",\n    \"favorite_tv_show\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "/tmp/tmp1hignt9l.js:62\n    \"favorite_tv_show\n    ^^^^^^^^^^^^^^^^^\n\nSyntaxError: Invalid or unexpected token\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpaymcmy_y.js:17:10)\n    at Object.<anonymous> (/tmp/tmpaymcmy_y.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nvar dict1 = {\n    \"name\": \"\",\n    \"age\": \"\",\n    \"sex\": \"\",\n    \"height\": \"\",\n    \"weight\": \"\"\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp8034dwxf.js:24:10)\n    at Object.<anonymous> (/tmp/tmp8034dwxf.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpian292ns.js:18:10)\n    at Object.<anonymous> (/tmp/tmpian292ns.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {'a':'','b':'','c':'','d':'','e':'','f':'','g':'','h':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpbpvvlvsq.js:17:10)\n    at Object.<anonymous> (/tmp/tmpbpvvlvsq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpw8wn56t4.js:16:10)\n    at Object.<anonymous> (/tmp/tmpw8wn56t4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpw8wn56t4.js:16:10)\n    at Object.<anonymous> (/tmp/tmpw8wn56t4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {a:1, b:2, c:\"\", d:\"\", e:5};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpry2ztmgf.js:17:10)\n    at Object.<anonymous> (/tmp/tmpry2ztmgf.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict = {'a':'','b':'','c':'','d':'','e':'','f':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpl3z6a7mq.js:18:10)\n    at Object.<anonymous> (/tmp/tmpl3z6a7mq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpmj1j50kz.js:17:10)\n    at Object.<anonymous> (/tmp/tmpmj1j50kz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {'a':1, 'b':'', 'c':3};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_9oi0clq.js:17:10)\n    at Object.<anonymous> (/tmp/tmp_9oi0clq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {a: \"\", b: \"\", c: \"\", d: \"\", e: \"\", f: \"\", g: \"\", h: \"\", i: \"\", j: \"\", k: \"\", l: \"\", m: \"\", n: \"\", o: \"\", p: \"\", q: \"\", r: \"\", s: \"\", t: \"\", u: \"\", v: \"\", w: \"\", x: \"\", y: \"\", z: \"\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpr_dmw8b6.js:17:10)\n    at Object.<anonymous> (/tmp/tmpr_dmw8b6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == ''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpuzsy6g56.js:15:10)\n    at Object.<anonymous> (/tmp/tmpuzsy6g56.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':1, 'b':'', 'c':3};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp6oh18o4s.js:18:10)\n    at Object.<anonymous> (/tmp/tmp6oh18o4s.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptr4c3zjk.js:16:10)\n    at Object.<anonymous> (/tmp/tmptr4c3zjk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] !== ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpayzczrwo.js:16:10)\n    at Object.<anonymous> (/tmp/tmpayzczrwo.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'d'};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp2objgiem.js:18:10)\n    at Object.<anonymous> (/tmp/tmp2objgiem.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {'a':'','b':'','c':'','d':'','e':'','f':'','g':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpjb_isnrf.js:17:10)\n    at Object.<anonymous> (/tmp/tmpjb_isnrf.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {'a':1, 'b':2, 'c':3, 'd':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp7xbg_ahm.js:17:10)\n    at Object.<anonymous> (/tmp/tmp7xbg_ahm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpw8wn56t4.js:16:10)\n    at Object.<anonymous> (/tmp/tmpw8wn56t4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpytxs7der.js:17:10)\n    at Object.<anonymous> (/tmp/tmpytxs7der.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpapj4pbqu.js:16:10)\n    at Object.<anonymous> (/tmp/tmpapj4pbqu.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1) {\n        if (dict1[key] != \"\") {\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmphvucem3d.js:17:10)\n    at Object.<anonymous> (/tmp/tmphvucem3d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpy2g1llw0.js:16:10)\n    at Object.<anonymous> (/tmp/tmpy2g1llw0.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a': 1, 'b': 2, 'c': 3, 'd': '', 'e': ''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpqmyxwue4.js:18:10)\n    at Object.<anonymous> (/tmp/tmpqmyxwue4.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpian292ns.js:18:10)\n    at Object.<anonymous> (/tmp/tmpian292ns.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpw8wn56t4.js:16:10)\n    at Object.<anonymous> (/tmp/tmpw8wn56t4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\"a\":1, \"b\":\"\", \"c\":3};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpl0wue6jg.js:18:10)\n    at Object.<anonymous> (/tmp/tmpl0wue6jg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'d'};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp2objgiem.js:18:10)\n    at Object.<anonymous> (/tmp/tmp2objgiem.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptr4c3zjk.js:16:10)\n    at Object.<anonymous> (/tmp/tmptr4c3zjk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    \"name\": \"\",\n    \"age\": \"\",\n    \"sex\": \"\",\n    \"address\": \"\",\n    \"phone\": \"\",\n    \"email\": \"\"\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp1l17hxky.js:26:10)\n    at Object.<anonymous> (/tmp/tmp1l17hxky.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpmj1j50kz.js:17:10)\n    at Object.<anonymous> (/tmp/tmpmj1j50kz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp0alys2vi.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0alys2vi.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {'a':'','b':'','c':'','d':'','e':'','f':'','g':'','h':'','i':'','j':'','k':'','l':'','m':'','n':'','o':'','p':'','q':'','r':'','s':'','t':'','u':'','v':'','w':'','x':'','y':'','z':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpq0irlelo.js:17:10)\n    at Object.<anonymous> (/tmp/tmpq0irlelo.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'name': '', 'age': '', 'sex': 'male'};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp8gwk969o.js:18:10)\n    at Object.<anonymous> (/tmp/tmp8gwk969o.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp7gkwz1jx.js:15:10)\n    at Object.<anonymous> (/tmp/tmp7gkwz1jx.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpw8wn56t4.js:16:10)\n    at Object.<anonymous> (/tmp/tmpw8wn56t4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != null && dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'d'};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpxqi3me8e.js:18:10)\n    at Object.<anonymous> (/tmp/tmpxqi3me8e.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpw8wn56t4.js:16:10)\n    at Object.<anonymous> (/tmp/tmpw8wn56t4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    \"name\": \"\",\n    \"age\": \"\",\n    \"sex\": \"\",\n    \"address\": \"\",\n    \"phone\": \"\",\n    \"email\": \"\",\n    \"website\": \"\",\n    \"occupation\": \"\",\n    \"company\": \"\",\n    \"salary\": \"\"\n};\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpyl81v9vw.js:30:10)\n    at Object.<anonymous> (/tmp/tmpyl81v9vw.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp0alys2vi.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0alys2vi.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp0alys2vi.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0alys2vi.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nvar dict1 = {a:1, b:\"\", c:3, d:4};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpdbkcppgl.js:16:10)\n    at Object.<anonymous> (/tmp/tmpdbkcppgl.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n  var dict2 = {};\n  for(var key in dict1){\n    if(dict1[key] != \"\"){\n      dict2[key] = dict1[key];\n    }\n  }\n  return dict2;\n}\n\nvar dict1 = {\n  \"name\" : \"\",\n  \"age\" : \"\",\n  \"class\" : \"\",\n  \"roll_no\" : \"\",\n  \"subject\" : \"\",\n  \"marks\" : \"\"\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpnfe65p8n.js:26:10)\n    at Object.<anonymous> (/tmp/tmpnfe65p8n.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nvar dict1 = {\n    \"name\": \"\",\n    \"age\": \"\",\n    \"sex\": \"\",\n    \"address\": \"\",\n    \"phone\": \"\",\n    \"email\": \"\"\n};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmplmkyjrcc.js:24:10)\n    at Object.<anonymous> (/tmp/tmplmkyjrcc.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var i in dict1){\n        if(dict1[i] == null || dict1[i] == \"\"){\n            delete dict1[i];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'d'};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp2objgiem.js:18:10)\n    at Object.<anonymous> (/tmp/tmp2objgiem.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {a:1, b:\"\", c:3};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp7obrph2y.js:17:10)\n    at Object.<anonymous> (/tmp/tmp7obrph2y.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp26urlojw.js:18:10)\n    at Object.<anonymous> (/tmp/tmp26urlojw.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {\n    \"name\" : \"\",\n    \"age\" : \"\",\n    \"sex\" : \"male\",\n    \"address\" : \"\",\n    \"phone\" : \"1234567890\"\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmparfjtbgf.js:23:10)\n    at Object.<anonymous> (/tmp/tmparfjtbgf.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {'a':'','b':'','c':'','d':'','e':'','f':'','g':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpjb_isnrf.js:17:10)\n    at Object.<anonymous> (/tmp/tmpjb_isnrf.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {a:1, b:\"\", c:3, d:\"\", e:5};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp427oiy02.js:17:10)\n    at Object.<anonymous> (/tmp/tmp427oiy02.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':'','f':'','g':'','h':'','i':'','j':'','k':'','l':'','m':'','n':'','o':'','p':'','q':'','r':'','s':'','t':'','u':'','v':'','w':'','x':'','y':'','z':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptmtk2oh0.js:18:10)\n    at Object.<anonymous> (/tmp/tmptmtk2oh0.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp20h3pcyi.js:16:10)\n    at Object.<anonymous> (/tmp/tmp20h3pcyi.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptr4c3zjk.js:16:10)\n    at Object.<anonymous> (/tmp/tmptr4c3zjk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\" || dict1[key] == undefined){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var i in dict1){\n        if(dict1[i] != \"\"){\n            dict2[i] = dict1[i];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {\n    \"name\" : \"\",\n    \"age\" : \"\",\n    \"sex\" : \"male\",\n    \"address\" : \"\",\n    \"phone\" : \"\",\n    \"email\" : \"\",\n    \"password\" : \"123456\"\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp372gojvq.js:25:10)\n    at Object.<anonymous> (/tmp/tmp372gojvq.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    \"name\" : \"\",\n    \"age\" : \"\",\n    \"sex\" : \"\",\n    \"address\" : \"\",\n    \"phone\" : \"\"\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpt4h8ejwd.js:25:10)\n    at Object.<anonymous> (/tmp/tmpt4h8ejwd.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {'a':'','b':'','c':'','d':'','e':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpgrpkl8em.js:17:10)\n    at Object.<anonymous> (/tmp/tmpgrpkl8em.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpw8wn56t4.js:16:10)\n    at Object.<anonymous> (/tmp/tmpw8wn56t4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != null && dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {a:1, b:\"\", c:3};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpeh92spkb.js:18:10)\n    at Object.<anonymous> (/tmp/tmpeh92spkb.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {'a':'','b':'','c':'','d':'','e':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpruz1xjtm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpruz1xjtm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var new_dict = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            new_dict[key] = dict1[key];\n        }\n    }\n    return new_dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpy9dx80a_.js:17:10)\n    at Object.<anonymous> (/tmp/tmpy9dx80a_.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {\n    \"name\": \"\",\n    \"age\": \"\",\n    \"gender\": \"\",\n    \"address\": \"\",\n    \"phone\": \"\"\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpdtbo4dnb.js:23:10)\n    at Object.<anonymous> (/tmp/tmpdtbo4dnb.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpl614wx3w.js:16:10)\n    at Object.<anonymous> (/tmp/tmpl614wx3w.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':1, 'b':'', 'c':3};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpt7tbmbhn.js:18:10)\n    at Object.<anonymous> (/tmp/tmpt7tbmbhn.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpy2g1llw0.js:16:10)\n    at Object.<anonymous> (/tmp/tmpy2g1llw0.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(let key in dict1){\n        if(dict1[key] == null || dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {name: \"\", age: \"\", city: \"\", state: \"\", zip: \"\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpxo1bpvjb.js:17:10)\n    at Object.<anonymous> (/tmp/tmpxo1bpvjb.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptr4c3zjk.js:16:10)\n    at Object.<anonymous> (/tmp/tmptr4c3zjk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {\n    \"name\": \"\",\n    \"age\": \"\",\n    \"sex\": \"\",\n    \"address\": \"\",\n    \"phone\": \"\",\n    \"email\": \"\",\n    \"website\": \"\"\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmporfd4ppq.js:25:10)\n    at Object.<anonymous> (/tmp/tmporfd4ppq.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmprk3cgjff.js:16:10)\n    at Object.<anonymous> (/tmp/tmprk3cgjff.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {'a':'','b':'','c':'d'};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp1d5e30cw.js:17:10)\n    at Object.<anonymous> (/tmp/tmp1d5e30cw.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {name: \"\", age: \"\", city: \"\", country: \"\", state: \"\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpmeqt45mh.js:17:10)\n    at Object.<anonymous> (/tmp/tmpmeqt45mh.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] !== ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpayzczrwo.js:16:10)\n    at Object.<anonymous> (/tmp/tmpayzczrwo.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptr4c3zjk.js:16:10)\n    at Object.<anonymous> (/tmp/tmptr4c3zjk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptr4c3zjk.js:16:10)\n    at Object.<anonymous> (/tmp/tmptr4c3zjk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'d'};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp2objgiem.js:18:10)\n    at Object.<anonymous> (/tmp/tmp2objgiem.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {name: \"John\", age: \"\", address: \"\", phone: \"123456789\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp922emlhl.js:18:10)\n    at Object.<anonymous> (/tmp/tmp922emlhl.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nvar dict1 = {name : \"\", age : \"\", sex : \"\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp_xu0usls.js:16:10)\n    at Object.<anonymous> (/tmp/tmp_xu0usls.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpytxs7der.js:17:10)\n    at Object.<anonymous> (/tmp/tmpytxs7der.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptr4c3zjk.js:16:10)\n    at Object.<anonymous> (/tmp/tmptr4c3zjk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nvar dict1 = {a:1, b:2, c:\"\", d:4};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpx41l4gkk.js:16:10)\n    at Object.<anonymous> (/tmp/tmpx41l4gkk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] !== \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpaymcmy_y.js:17:10)\n    at Object.<anonymous> (/tmp/tmpaymcmy_y.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmprk3cgjff.js:16:10)\n    at Object.<anonymous> (/tmp/tmprk3cgjff.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp26urlojw.js:18:10)\n    at Object.<anonymous> (/tmp/tmp26urlojw.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':'','f':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp5udshl9e.js:18:10)\n    at Object.<anonymous> (/tmp/tmp5udshl9e.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptr4c3zjk.js:16:10)\n    at Object.<anonymous> (/tmp/tmptr4c3zjk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {\n    name: \"\",\n    age: \"\",\n    sex: \"\",\n    address: \"\",\n    phone: \"\"\n};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpc4fdrzuo.js:23:10)\n    at Object.<anonymous> (/tmp/tmpc4fdrzuo.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':'','f':'','g':'','h':'','i':'','j':'','k':'','l':'','m':'','n':'','o':'','p':'','q':'','r':'','s':'','t':'','u':'','v':'','w':'','x':'','y':'','z':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpc23esrjx.js:18:10)\n    at Object.<anonymous> (/tmp/tmpc23esrjx.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nvar dict1 = {a:1, b:\"\", c:3, d:\"\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpx4xsfsrm.js:16:10)\n    at Object.<anonymous> (/tmp/tmpx4xsfsrm.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {'a':'','b':'','c':'','d':'','e':'','f':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpn7va5orw.js:17:10)\n    at Object.<anonymous> (/tmp/tmpn7va5orw.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptr4c3zjk.js:16:10)\n    at Object.<anonymous> (/tmp/tmptr4c3zjk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nvar dict1 = {'a':1,'b':'','c':3};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpa78sstey.js:17:10)\n    at Object.<anonymous> (/tmp/tmpa78sstey.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpl614wx3w.js:16:10)\n    at Object.<anonymous> (/tmp/tmpl614wx3w.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nvar dict1 = {'a':'','b':'','c':'d'};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp11oq055m.js:17:10)\n    at Object.<anonymous> (/tmp/tmp11oq055m.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    \"name\": \"\",\n    \"age\": \"\",\n    \"sex\": \"\",\n    \"address\": \"\",\n    \"phone\": \"\"\n};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpzc0uuo4g.js:24:10)\n    at Object.<anonymous> (/tmp/tmpzc0uuo4g.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != null && dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmprk3cgjff.js:16:10)\n    at Object.<anonymous> (/tmp/tmprk3cgjff.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nvar dict1 = {'a':'','b':'ball','c':'cat','d':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpi4mg0imz.js:17:10)\n    at Object.<anonymous> (/tmp/tmpi4mg0imz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptr4c3zjk.js:16:10)\n    at Object.<anonymous> (/tmp/tmptr4c3zjk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmprk3cgjff.js:16:10)\n    at Object.<anonymous> (/tmp/tmprk3cgjff.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    \"name\": \"\",\n    \"age\": \"\",\n    \"sex\": \"\",\n    \"city\": \"\",\n    \"state\": \"\",\n    \"country\": \"\"\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp7qk3agzo.js:26:10)\n    at Object.<anonymous> (/tmp/tmp7qk3agzo.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpl614wx3w.js:16:10)\n    at Object.<anonymous> (/tmp/tmpl614wx3w.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':'','f':'','g':'','h':'','i':'','j':'','k':'','l':'','m':'','n':'','o':'','p':'','q':'','r':'','s':'','t':'','u':'','v':'','w':'','x':'','y':'','z':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptmtk2oh0.js:18:10)\n    at Object.<anonymous> (/tmp/tmptmtk2oh0.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\n\nvar dict1 = {a:1, b:2, c:\"\", d:4};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp1qzlc18z.js:17:10)\n    at Object.<anonymous> (/tmp/tmp1qzlc18z.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var i in dict1){\n        if (dict1[i] != \"\"){\n            dict2[i] = dict1[i];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {\n    \"a\": \"\",\n    \"b\": \"\",\n    \"c\": \"\",\n    \"d\": \"\",\n    \"e\": \"\",\n    \"f\": \"\",\n    \"g\": \"\",\n    \"h\": \"\",\n    \"i\": \"\",\n    \"j\": \"\",\n    \"k\": \"\",\n    \"l\": \"\",\n    \"m\": \"\",\n    \"n\": \"\",\n    \"o\": \"\",\n    \"p\": \"\",\n    \"q\": \"\",\n    \"r\": \"\",\n    \"s\": \"\",\n    \"t\": \"\",\n    \"u\": \"\",\n    \"v\": \"\",\n    \"w\": \"\",\n    \"x\": \"\",\n    \"y\": \"\",\n    \"z\": \"\"\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp313p1uxm.js:46:10)\n    at Object.<anonymous> (/tmp/tmp313p1uxm.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptr4c3zjk.js:16:10)\n    at Object.<anonymous> (/tmp/tmptr4c3zjk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp7gkwz1jx.js:15:10)\n    at Object.<anonymous> (/tmp/tmp7gkwz1jx.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp0alys2vi.js:17:10)\n    at Object.<anonymous> (/tmp/tmp0alys2vi.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != null){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptr4c3zjk.js:16:10)\n    at Object.<anonymous> (/tmp/tmptr4c3zjk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpww55e0lm.js:17:10)\n    at Object.<anonymous> (/tmp/tmpww55e0lm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpw8wn56t4.js:16:10)\n    at Object.<anonymous> (/tmp/tmpw8wn56t4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for(var key in dict1){\n        if(dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1665510374,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmptr4c3zjk.js:16:10)\n    at Object.<anonymous> (/tmp/tmptr4c3zjk.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for (var key in dict1){\n        if (dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nvar dict1 = {name: \"\", age: \"\", sex: \"\", address: \"\", phone: \"\"};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp388wo8zl.js:16:10)\n    at Object.<anonymous> (/tmp/tmp388wo8zl.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == \"\"){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpvb0665eu.js:15:10)\n    at Object.<anonymous> (/tmp/tmpvb0665eu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    for(var key in dict1){\n        if(dict1[key] == null || dict1[key] == ''){\n            delete dict1[key];\n        }\n    }\n    return dict1;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != \"\"){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmp26urlojw.js:18:10)\n    at Object.<anonymous> (/tmp/tmp26urlojw.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to drop empty items from a given dictionary.\nfunction drop_empty(dict1){\n    var dict2 = {};\n    for (var key in dict1){\n        if (dict1[key] != ''){\n            dict2[key] = dict1[key];\n        }\n    }\n    return dict2;\n}\n\nvar dict1 = {'a':'','b':'','c':'','d':'','e':'','f':'','g':'','h':'','i':'','j':'','k':'','l':'','m':'','n':'','o':'','p':'','q':'','r':'','s':'','t':'','u':'','v':'','w':'','x':'','y':'','z':''};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = drop_empty;\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});\n  assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});\n  assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});\n}\n\ntest();",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  c1: 'Red',\n  c2: 'Green',\n  c3: undefined\n}\n\nshould loosely deep-equal\n\n{\n  c1: 'Red',\n  c2: 'Green'\n}\n    at test (/tmp/tmpfyaa07qp.js:18:10)\n    at Object.<anonymous> (/tmp/tmpfyaa07qp.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { c1: 'Red', c2: 'Green', c3: undefined },\n  expected: { c1: 'Red', c2: 'Green' },\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}