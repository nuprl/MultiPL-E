{
  "name": "mbpp_99_decimal_to_binary",
  "language": "js",
  "prompt": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "  var result = \"\";\n  while(n > 0){\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n",
    "    let binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n",
    "  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n",
    "  var bin = \"\";\n  while(n>0){\n    bin = (n%2) + bin;\n    n = Math.floor(n/2);\n  }\n  return bin;\n}\n",
    "    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n",
    "    let binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n",
    "    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n",
    "  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n",
    "  var bin = '';\n  while(n > 0){\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n",
    "  var binary = '';\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n",
    "  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n",
    "  return n.toString(2);\n}\n",
    "  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n",
    "    var binary = \"\";\n    while(n>0){\n        binary = n%2 + binary;\n        n = Math.floor(n/2);\n    }\n    return binary;\n}\n",
    "    var binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n",
    "  var binary = \"\";\n  while(n > 0){\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n",
    "  var result = \"\";\n  while(n > 0){\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n",
    "  var bin = '';\n  while(n > 0){\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n",
    "    var binary = \"\";\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n",
    "    let binary = '';\n    while(n > 0){\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n"
  ]
}