{
  "name": "mbpp_619_move_num",
  "language": "js",
  "prompt": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var str = test_str.split(\"\");\n    var num = [];\n    var alpha = [];\n    for(var i=0;i<str.length;i++){\n        if(!isNaN(str[i])){\n            num.push(str[i]);\n        }else{\n            alpha.push(str[i]);\n        }\n    }\n    return alpha.join(\"\")+num.join(\"\");\n}",
    "    var num = test_str.match(/\\d+/g);\n    var str = test_str.match(/[a-zA-Z]+/g);\n    return str.join(\"\") + num.join(\"\");\n}",
    "    var str = test_str.split(\"\");\n    var num = [];\n    var char = [];\n    for(var i = 0; i < str.length; i++){\n        if(str[i] >= 0){\n            num.push(str[i]);\n        }else{\n            char.push(str[i]);\n        }\n    }\n    return char.concat(num).join(\"\");\n}",
    "    var result = \"\";\n    var num = \"\";\n    for(var i = 0; i < test_str.length; i++){\n        if(isNaN(test_str[i])){\n            result += test_str[i];\n        }\n        else{\n            num += test_str[i];\n        }\n    }\n    return result + num;\n}",
    "    var str = test_str.split(\"\");\n    var num = [];\n    var letter = [];\n    for(var i = 0; i < str.length; i++){\n        if(isNaN(str[i])){\n            letter.push(str[i]);\n        }\n        else{\n            num.push(str[i]);\n        }\n    }\n    return letter.join(\"\") + num.join(\"\");\n}",
    "    var num_arr = [];\n    var str_arr = [];\n    var result = \"\";\n    for(var i = 0; i < test_str.length; i++){\n        if(!isNaN(test_str[i])){\n            num_arr.push(test_str[i]);\n        }else{\n            str_arr.push(test_str[i]);\n        }\n    }\n    result = str_arr.join(\"\") + num_arr.join(\"\");\n    return result;\n}",
    "    var str = test_str.split(\"\");\n    var num = [];\n    var char = [];\n    for(var i = 0; i < str.length; i++){\n        if(isNaN(str[i])){\n            char.push(str[i]);\n        }else{\n            num.push(str[i]);\n        }\n    }\n    return char.join(\"\") + num.join(\"\");\n}",
    "    var str = test_str.split(\"\");\n    var num = [];\n    var letter = [];\n    for(var i = 0; i < str.length; i++){\n        if(str[i] == parseInt(str[i])){\n            num.push(str[i]);\n        }else{\n            letter.push(str[i]);\n        }\n    }\n    return letter.join(\"\") + num.join(\"\");\n}",
    "    var str = test_str.split('');\n    var num = [];\n    var letter = [];\n    for(var i = 0; i < str.length; i++){\n        if(isNaN(str[i])){\n            letter.push(str[i]);\n        }else{\n            num.push(str[i]);\n        }\n    }\n    return letter.concat(num).join('');\n}",
    "    var num_str = \"\";\n    var alpha_str = \"\";\n    for(var i = 0; i < test_str.length; i++){\n        if(!isNaN(test_str[i])){\n            num_str += test_str[i];\n        }\n        else{\n            alpha_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}",
    "    var num_arr = [];\n    var str_arr = [];\n    var result = \"\";\n    for(var i=0; i<test_str.length; i++){\n        if(isNaN(test_str[i])){\n            str_arr.push(test_str[i]);\n        }\n        else{\n            num_arr.push(test_str[i]);\n        }\n    }\n    result = str_arr.join(\"\") + num_arr.join(\"\");\n    return result;\n}",
    "    var str = test_str.split(\"\");\n    var num = [];\n    var char = [];\n    for(var i = 0; i < str.length; i++){\n        if(str[i] >= 0){\n            num.push(str[i]);\n        }else{\n            char.push(str[i]);\n        }\n    }\n    return char.join(\"\") + num.join(\"\");\n}",
    "    var str = test_str.split(\"\");\n    var num = [];\n    var letter = [];\n    for (var i = 0; i < str.length; i++){\n        if (isNaN(str[i]) == false){\n            num.push(str[i]);\n        } else {\n            letter.push(str[i]);\n        }\n    }\n    return letter.join(\"\") + num.join(\"\");\n}",
    "    var res = test_str.match(/\\d+/g);\n    var res1 = test_str.match(/[a-zA-Z]+/g);\n    return res1.join(\"\") + res.join(\"\");\n}",
    "    var num = \"\";\n    var str = \"\";\n    for(var i = 0; i < test_str.length; i++){\n        if(!isNaN(test_str[i])){\n            num += test_str[i];\n        }\n        else{\n            str += test_str[i];\n        }\n    }\n    return str + num;\n}",
    "    var str = test_str.split(\"\");\n    var num = [];\n    var letter = [];\n    for(var i = 0; i < str.length; i++){\n        if(isNaN(str[i])){\n            letter.push(str[i]);\n        }else{\n            num.push(str[i]);\n        }\n    }\n    return letter.join(\"\") + num.join(\"\");\n}",
    "    var str = test_str.split(\"\");\n    var num = [];\n    var char = [];\n    for(var i = 0; i < str.length; i++){\n        if(!isNaN(str[i])){\n            num.push(str[i]);\n        }\n        else{\n            char.push(str[i]);\n        }\n    }\n    return char.join(\"\") + num.join(\"\");\n}",
    "    var num_str = \"\";\n    var non_num_str = \"\";\n    for(var i=0; i<test_str.length; i++){\n        if(!isNaN(test_str[i])){\n            num_str += test_str[i];\n        }\n        else{\n            non_num_str += test_str[i];\n        }\n    }\n    return non_num_str + num_str;\n}",
    "    var num_arr = [];\n    var str_arr = [];\n    var result = [];\n    var str = test_str.split(\"\");\n    for(var i=0; i<str.length; i++){\n        if(!isNaN(str[i])){\n            num_arr.push(str[i]);\n        }\n        else{\n            str_arr.push(str[i]);\n        }\n    }\n    result = str_arr.concat(num_arr);\n    return result.join(\"\");\n}",
    "    var result = test_str.replace(/[^a-zA-Z]/g, '');\n    var result1 = test_str.replace(/[^0-9]/g, '');\n    return result + result1;\n}"
  ]
}