{
  "name": "mbpp_766_pair_wise",
  "language": "js",
  "prompt": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n",
    "    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}",
    "    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n",
    "    var res = [];\n    for(var i=0; i<l1.length-1; i++){\n        res.push([l1[i], l1[i+1]]);\n    }\n    return res;\n}\n",
    "  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n",
    "    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i+1 < l1.length){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n",
    "  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(i < l1.length - 1){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n",
    "  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    l2.push(l1[i] + l1[i+1]);\n  }\n  return l2;\n}\n",
    "    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i == l1.length-1){\n            break;\n        }\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}",
    "  var result = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      result.push([l1[i], l1[j]]);\n    }\n  }\n  return result;\n}\n",
    "    let l2 = [];\n    for(let i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push(l1[i], l1[i+1]);\n        }\n    }\n    return l2;\n}\n",
    "\tvar l2 = [];\n\tfor(var i=0;i<l1.length-1;i++){\n\t\tl2.push([l1[i],l1[i+1]]);\n\t}\n\treturn l2;\n}\n",
    "  var result = [];\n  for(var i = 0; i < l1.length - 1; i++){\n    result.push([l1[i], l1[i+1]]);\n  }\n  return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}",
    "    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        result.push([l1[i], l1[i+1]]);\n    }\n    return result;\n}",
    "    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n",
    "    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            sum += l1[i] + l1[j];\n            l1[i] = l1[j] = NaN;\n        }\n    }\n    return sum;\n}\n",
    "    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}"
  ]
}