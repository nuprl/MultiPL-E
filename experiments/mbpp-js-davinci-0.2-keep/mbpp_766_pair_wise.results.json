{
  "name": "mbpp_766_pair_wise",
  "language": "js",
  "prompt": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpw82r7wf0.js:19:10)\n    at Object.<anonymous> (/tmp/tmpw82r7wf0.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var res = [];\n    for(var i=0; i<l1.length-1; i++){\n        res.push([l1[i], l1[i+1]]);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpum_gymoi.js:20:10)\n    at Object.<anonymous> (/tmp/tmpum_gymoi.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i+1 < l1.length){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(i < l1.length - 1){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    l2.push(l1[i] + l1[i+1]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpci07wja5.js:15:10)\n    at Object.<anonymous> (/tmp/tmpci07wja5.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5,   6,\n    7, 8, 9, NaN\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i == l1.length-1){\n            break;\n        }\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      result.push([l1[i], l1[j]]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp08oo7obl.js:17:10)\n    at Object.<anonymous> (/tmp/tmp08oo7obl.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    let l2 = [];\n    for(let i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push(l1[i], l1[i+1]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  2,\n  2,\n  3,\n  3,\n  3,\n  3,\n  4,\n  4,\n  4,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpi2mtxdsd.js:17:10)\n    at Object.<anonymous> (/tmp/tmpi2mtxdsd.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 1, 2, 2, 3,\n    3, 3, 3, 4, 4, 4,\n    4, 5\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i=0;i<l1.length-1;i++){\n\t\tl2.push([l1[i],l1[i+1]]);\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i = 0; i < l1.length - 1; i++){\n    result.push([l1[i], l1[i+1]]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmprpr0aht6.js:16:10)\n    at Object.<anonymous> (/tmp/tmprpr0aht6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpsv7aksdq.js:16:10)\n    at Object.<anonymous> (/tmp/tmpsv7aksdq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        result.push([l1[i], l1[i+1]]);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            sum += l1[i] + l1[j];\n            l1[i] = l1[j] = NaN;\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpb42_u2za.js:18:10)\n    at Object.<anonymous> (/tmp/tmpb42_u2za.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpsv7aksdq.js:16:10)\n    at Object.<anonymous> (/tmp/tmpsv7aksdq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            sum += l1[i] + l1[j];\n            l1[i] = l1[j] = NaN;\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpb42_u2za.js:18:10)\n    at Object.<anonymous> (/tmp/tmpb42_u2za.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            sum += l1[i] + l1[j];\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n161\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp9xa3ojl4.js:16:10)\n    at Object.<anonymous> (/tmp/tmp9xa3ojl4.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 161,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum = sum + i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpy6ehm8xh.js:19:10)\n    at Object.<anonymous> (/tmp/tmpy6ehm8xh.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(l1[i+1] != undefined){\n      l2.push(l1[i], l1[i+1]);\n    }\n  }\n  return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  2,\n  2,\n  3,\n  3,\n  3,\n  3,\n  4,\n  4,\n  4,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp20g8o2wa.js:16:10)\n    at Object.<anonymous> (/tmp/tmp20g8o2wa.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 1, 2, 2, 3,\n    3, 3, 3, 4, 4, 4,\n    4, 5\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push(l1[i] + l1[i+1]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp2uelkpbe.js:17:10)\n    at Object.<anonymous> (/tmp/tmp2uelkpbe.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpz1u8dpj2.js:20:10)\n    at Object.<anonymous> (/tmp/tmpz1u8dpj2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            l2.push([l1[i], l1[j]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpy3exygus.js:17:10)\n    at Object.<anonymous> (/tmp/tmpy3exygus.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2=[];\n  for(var i=0;i<l1.length-1;i++){\n    l2.push([l1[i],l1[i+1]]);\n  }\n  return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(l1[i+1] != undefined){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] === 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpmapscc92.js:20:10)\n    at Object.<anonymous> (/tmp/tmpmapscc92.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp6fofnnk2.js:20:10)\n    at Object.<anonymous> (/tmp/tmp6fofnnk2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    let result = [];\n    for(let i = 0; i < l1.length; i++){\n        for(let j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpn_zbjop9.js:16:10)\n    at Object.<anonymous> (/tmp/tmpn_zbjop9.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(l1[i+1] != undefined){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp3weenlbi.js:17:10)\n    at Object.<anonymous> (/tmp/tmp3weenlbi.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length; i++){\n        if(i+1<l1.length){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(l1[i+1] != undefined){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp3weenlbi.js:17:10)\n    at Object.<anonymous> (/tmp/tmp3weenlbi.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(i < l1.length - 1){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp3weenlbi.js:17:10)\n    at Object.<anonymous> (/tmp/tmp3weenlbi.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2=[];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpjiuui4ra.js:19:10)\n    at Object.<anonymous> (/tmp/tmpjiuui4ra.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length - 1; i++){\n    l2.push([l1[i], l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var arr = [];\n    for(var i = 0; i < l1.length-1; i++){\n        arr.push(l1[i], l1[i+1]);\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  2,\n  2,\n  3,\n  3,\n  3,\n  3,\n  4,\n  4,\n  4,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpign6b_mj.js:14:10)\n    at Object.<anonymous> (/tmp/tmpign6b_mj.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 1, 2, 2, 3,\n    3, 3, 3, 4, 4, 4,\n    4, 5\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp6fofnnk2.js:20:10)\n    at Object.<anonymous> (/tmp/tmp6fofnnk2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar result = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tfor(var j = i+1; j < l1.length; j++){\n\t\t\tresult.push([l1[i], l1[j]]);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpmhr91mll.js:17:10)\n    at Object.<anonymous> (/tmp/tmpmhr91mll.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(i < l1.length - 1){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp3weenlbi.js:17:10)\n    at Object.<anonymous> (/tmp/tmp3weenlbi.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp6fofnnk2.js:20:10)\n    at Object.<anonymous> (/tmp/tmp6fofnnk2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i = 0; i < l1.length; i++){\n    if(l1[i+1] !== undefined){\n      result.push([l1[i], l1[i+1]]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpf6dbwoqn.js:17:10)\n    at Object.<anonymous> (/tmp/tmpf6dbwoqn.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i=0; i<l1.length; i++){\n    l2.push(l1[i]);\n    l2.push(l1[i+1]);\n    i++;\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  3,\n  3,\n  4,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpwrxf3cor.js:17:10)\n    at Object.<anonymous> (/tmp/tmpwrxf3cor.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 2, 3,\n    3, 4, 4, 5\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            sum += l1[i] + l1[j];\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n161\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpg7tsx9ct.js:16:10)\n    at Object.<anonymous> (/tmp/tmpg7tsx9ct.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 161,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp7tmnz7nc.js:20:10)\n    at Object.<anonymous> (/tmp/tmp7tmnz7nc.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(l1[i+1] != undefined){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for (var i = 0; i < l1.length; i++) {\n    if (i < l1.length - 1) {\n      l2.push(l1[i] + l1[i + 1]);\n    }\n  }\n  return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp3s3olfxn.js:16:10)\n    at Object.<anonymous> (/tmp/tmp3s3olfxn.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push(l1[i] + l1[i + 1]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqodg0vx6.js:15:10)\n    at Object.<anonymous> (/tmp/tmpqodg0vx6.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length-1; i++){\n    l2.push(l1[i]);\n    l2.push(l1[i+1]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  2,\n  2,\n  3,\n  3,\n  3,\n  3,\n  4,\n  4,\n  4,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpr9qlroh5.js:16:10)\n    at Object.<anonymous> (/tmp/tmpr9qlroh5.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 1, 2, 2, 3,\n    3, 3, 3, 4, 4, 4,\n    4, 5\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i=0; i<l1.length; i++){\n    for(var j=i+1; j<l1.length; j++){\n      if(l1[i] == l1[j]){\n        sum += i+j;\n      }\n    }\n  }\n  return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n19\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp6gisa6up.js:18:10)\n    at Object.<anonymous> (/tmp/tmp6gisa6up.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 19,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length-1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i == l1.length - 1){\n            break;\n        }\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      result.push([l1[i], l1[j]]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpnjgaq2do.js:17:10)\n    at Object.<anonymous> (/tmp/tmpnjgaq2do.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpmuttwzs1.js:19:10)\n    at Object.<anonymous> (/tmp/tmpmuttwzs1.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpw82r7wf0.js:19:10)\n    at Object.<anonymous> (/tmp/tmpw82r7wf0.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      result.push(l1[i], l1[j]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  2,\n  1,\n  3,\n  1,\n  3,\n  1,\n  4,\n  1,\n  4,\n  1,\n  5,\n  1,\n  2,\n  1,\n  3,\n  1,\n  3,\n  1,\n  4,\n  1,\n  4,\n  1,\n  5,\n  2,\n  3,\n  2,\n  3,\n  2,\n  4,\n  2,\n  4,\n  2,\n  5,\n  3,\n  3,\n  3,\n  4,\n  3,\n  4,\n  3,\n  5,\n  3,\n  4,\n  3,\n  4,\n  3,\n  5,\n  4,\n  4,\n  4,\n  5,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmprhr4vieg.js:17:10)\n    at Object.<anonymous> (/tmp/tmprhr4vieg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4,\n    1, 5, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4,\n    1, 5, 2, 3, 2, 3, 2, 4, 2, 4, 2, 5,\n    3, 3, 3, 4, 3, 4, 3, 5, 3, 4, 3, 4,\n    3, 5, 4, 4, 4, 5, 4, 5\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            sum += l1[i] + l1[j];\n            l1[i] = l1[j] = NaN;\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpb42_u2za.js:18:10)\n    at Object.<anonymous> (/tmp/tmpb42_u2za.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for (var i = 0; i < l1.length; i++) {\n    if (l1[i+1] != undefined) {\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpjiuui4ra.js:19:10)\n    at Object.<anonymous> (/tmp/tmpjiuui4ra.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i = 0; i < l1.length - 1; i++){\n    result.push(l1[i] + l1[i+1]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpp5ml8o16.js:15:10)\n    at Object.<anonymous> (/tmp/tmpp5ml8o16.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length - 1; i++){\n    l2.push(l1[i] + l1[i + 1]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpf50vgfr8.js:15:10)\n    at Object.<anonymous> (/tmp/tmpf50vgfr8.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpum_gymoi.js:20:10)\n    at Object.<anonymous> (/tmp/tmpum_gymoi.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar result = [];\n\tfor(var i=0; i<l1.length-1; i++){\n\t\tresult.push(l1[i]+l1[i+1]);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpv6zvy_ie.js:15:10)\n    at Object.<anonymous> (/tmp/tmpv6zvy_ie.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            sum += l1[i] + l1[j];\n            l1[i] = l1[j] = NaN;\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpt1jflm6n.js:17:10)\n    at Object.<anonymous> (/tmp/tmpt1jflm6n.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor (var i = 0; i < l1.length; i++) {\n\t\tif (i < l1.length - 1) {\n\t\t\tl2.push([l1[i], l1[i+1]]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmprpr0aht6.js:16:10)\n    at Object.<anonymous> (/tmp/tmprpr0aht6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            sum += l1[i] + l1[j];\n            l1[i] = l1[j] = NaN;\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpt4_wiulo.js:17:10)\n    at Object.<anonymous> (/tmp/tmpt4_wiulo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp3weenlbi.js:17:10)\n    at Object.<anonymous> (/tmp/tmp3weenlbi.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      if(l1[i] + l1[j] == 10){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpwzfnpbv5.js:20:10)\n    at Object.<anonymous> (/tmp/tmpwzfnpbv5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    let l2 = [];\n    for(let i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            sum += l1[i] + l1[j];\n            l1[i] = l1[j] = NaN;\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpmkp775tj.js:17:10)\n    at Object.<anonymous> (/tmp/tmpmkp775tj.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 0){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmphe5dhmml.js:19:10)\n    at Object.<anonymous> (/tmp/tmphe5dhmml.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length - 1; i++){\n    l2.push([l1[i], l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push(l1[i] + l1[i+1]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp2uelkpbe.js:17:10)\n    at Object.<anonymous> (/tmp/tmp2uelkpbe.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push(l1[i] + \" \" + l1[i + 1]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1 1',\n  '1 2',\n  '2 3',\n  '3 3',\n  '3 4',\n  '4 4',\n  '4 5'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpj9e4g71m.js:15:10)\n    at Object.<anonymous> (/tmp/tmpj9e4g71m.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '1 1', '1 2',\n    '2 3', '3 3',\n    '3 4', '4 4',\n    '4 5'\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length - 1; i++){\n    l2.push([l1[i], l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push(l1[i] + l1[i+1]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpojbon07r.js:15:10)\n    at Object.<anonymous> (/tmp/tmpojbon07r.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp6fofnnk2.js:20:10)\n    at Object.<anonymous> (/tmp/tmp6fofnnk2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length - 1; i++){\n    l2.push([l1[i], l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i=0; i<l1.length-1; i++){\n\t\tl2.push([l1[i],l1[i+1]]);\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i=0; i<l1.length-1; i++){\n    l2.push([l1[i],l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      result.push(l1[i] + l1[j]);\n    }\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  4,\n  5,\n  5,\n  6,\n  3,\n  4,\n  4,\n  5,\n  5,\n  6,\n  5,\n  5,\n  6,\n  6,\n  7,\n  6,\n  7,\n  7,\n  8,\n  7,\n  7,\n  8,\n  8,\n  9,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp94lgn_tr.js:16:10)\n    at Object.<anonymous> (/tmp/tmp94lgn_tr.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 4, 5, 5, 6, 3,\n    4, 4, 5, 5, 6, 5, 5, 6,\n    6, 7, 6, 7, 7, 8, 7, 7,\n    8, 8, 9, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i+j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpl_7opu6q.js:19:10)\n    at Object.<anonymous> (/tmp/tmpl_7opu6q.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length - 1; i++){\n    l2.push([l1[i], l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(i < l1.length - 1){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            sum += l1[i] + l1[j];\n            l1[i] = l1[j] = NaN;\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpt1jflm6n.js:17:10)\n    at Object.<anonymous> (/tmp/tmpt1jflm6n.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for (var i = 0; i < l1.length; i++){\n    for (var j = i + 1; j < l1.length; j++){\n      result.push([l1[i], l1[j]]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpmxd3fpcr.js:17:10)\n    at Object.<anonymous> (/tmp/tmpmxd3fpcr.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(l1[i+1] != undefined){\n      l2.push(l1[i] + l1[i+1]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpkeo10gjb.js:17:10)\n    at Object.<anonymous> (/tmp/tmpkeo10gjb.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for (var i = 0; i < l1.length-1; i++){\n    l2.push([l1[i],l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i=0;i<l1.length-1;i++){\n\t\tl2.push([l1[i],l1[i+1]]);\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] == 10){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpda2tj78l.js:20:10)\n    at Object.<anonymous> (/tmp/tmpda2tj78l.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpw82r7wf0.js:19:10)\n    at Object.<anonymous> (/tmp/tmpw82r7wf0.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    l2.push(l1[i]);\n    l2.push(l1[i+1]);\n    i++;\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  3,\n  3,\n  4,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpgzga7x2o.js:17:10)\n    at Object.<anonymous> (/tmp/tmpgzga7x2o.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 2, 3,\n    3, 4, 4, 5\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i=0; i<l1.length-1; i++){\n    l2.push([l1[i], l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpf6dbwoqn.js:17:10)\n    at Object.<anonymous> (/tmp/tmpf6dbwoqn.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(l1[i+1] != undefined){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            sum += l1[i] + l1[j];\n            l1[i] = l1[j] = NaN;\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpb4gtf3bn.js:18:10)\n    at Object.<anonymous> (/tmp/tmpb4gtf3bn.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i=0; i<l1.length; i++){\n    for(var j=i+1; j<l1.length; j++){\n      result.push([l1[i], l1[j]]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpv1ecqapb.js:17:10)\n    at Object.<anonymous> (/tmp/tmpv1ecqapb.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i = 0; i < l1.length - 1; i++){\n    result.push([l1[i], l1[i+1]]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      sum += l1[i] + l1[j];\n      l1[i] = l1[j] = NaN;\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpjww1yceb.js:18:10)\n    at Object.<anonymous> (/tmp/tmpjww1yceb.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i + 1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            sum += l1[i] + l1[j];\n            l1[i] = l1[j] = NaN;\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpb42_u2za.js:18:10)\n    at Object.<anonymous> (/tmp/tmpb42_u2za.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(l1[i+1] != undefined){\n      l2.push(l1[i], l1[i+1]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  2,\n  2,\n  3,\n  3,\n  3,\n  3,\n  4,\n  4,\n  4,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpps6xqbwz.js:17:10)\n    at Object.<anonymous> (/tmp/tmpps6xqbwz.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 1, 2, 2, 3,\n    3, 3, 3, 4, 4, 4,\n    4, 5\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(l1[i+1] != undefined){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i=0; i<l1.length; i++){\n    if(i+1<l1.length){\n      result.push([l1[i], l1[i+1]]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i=0; i<l1.length-1; i++){\n    l2.push([l1[i], l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar l2=[];\n\tfor(var i=0;i<l1.length-1;i++){\n\t\tl2.push([l1[i],l1[i+1]]);\n\t}\n\treturn l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ],\n  [\n    5,\n    undefined\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp9oxx7rtd.js:14:10)\n    at Object.<anonymous> (/tmp/tmp9oxx7rtd.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ],\n    [ 1, 2 ],\n    [ 2, 3 ],\n    [ 3, 3 ],\n    [ 3, 4 ],\n    [ 4, 4 ],\n    [ 4, 5 ],\n    [ 5, undefined ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2=[];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(i < l1.length - 1){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    l2.push(l1[i]);\n    l2.push(l1[i+1]);\n    i++;\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  3,\n  3,\n  4,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpgzga7x2o.js:17:10)\n    at Object.<anonymous> (/tmp/tmpgzga7x2o.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 2, 3,\n    3, 4, 4, 5\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i == l1.length - 1){\n            break;\n        }\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp3weenlbi.js:17:10)\n    at Object.<anonymous> (/tmp/tmp3weenlbi.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length - 1; i++){\n    l2.push([l1[i], l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpjiuui4ra.js:19:10)\n    at Object.<anonymous> (/tmp/tmpjiuui4ra.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2=[];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2=[];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i != l1.length-1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for (var i = 0; i < l1.length; i++){\n        if (i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tif(l1[i+1] != undefined){\n\t\t\tl2.push([l1[i], l1[i+1]]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i != l1.length-1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i + 1 < l1.length){\n            result.push([l1[i], l1[i + 1]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i != l1.length - 1){\n            l2.push([l1[i], l1[i + 1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i=0; i<l1.length; i++){\n        for(var j=i+1; j<l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpw82r7wf0.js:19:10)\n    at Object.<anonymous> (/tmp/tmpw82r7wf0.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            l2.push(l1[i] + l1[j]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  4,\n  5,\n  5,\n  6,\n  3,\n  4,\n  4,\n  5,\n  5,\n  6,\n  5,\n  5,\n  6,\n  6,\n  7,\n  6,\n  7,\n  7,\n  8,\n  7,\n  7,\n  8,\n  8,\n  9,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmphiu02wfd.js:17:10)\n    at Object.<anonymous> (/tmp/tmphiu02wfd.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 4, 5, 5, 6, 3,\n    4, 4, 5, 5, 6, 5, 5, 6,\n    6, 7, 6, 7, 7, 8, 7, 7,\n    8, 8, 9, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tif(i < l1.length - 1){\n\t\t\tl2.push([l1[i], l1[i+1]]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length-1; i++){\n    l2.push([l1[i], l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2=[];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push(l1[i]+\" \"+l1[i+1]);\n    }\n    return l2;\n}\nvar l1=[\"a\",\"b\",\"c\",\"d\"];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1 1',\n  '1 2',\n  '2 3',\n  '3 3',\n  '3 4',\n  '4 4',\n  '4 5'\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpqil2zqu4.js:15:10)\n    at Object.<anonymous> (/tmp/tmpqil2zqu4.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '1 1', '1 2',\n    '2 3', '3 3',\n    '3 4', '4 4',\n    '4 5'\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(l1[i+1] != undefined){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(i < l1.length-1){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            result.push([l1[i], l1[j]]);\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpsv7aksdq.js:16:10)\n    at Object.<anonymous> (/tmp/tmpsv7aksdq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            sum += l1[i] + l1[j];\n            l1[i] = l1[j] = NaN;\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpt1jflm6n.js:17:10)\n    at Object.<anonymous> (/tmp/tmpt1jflm6n.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2=[];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var result = [];\n    for(var i = 0; i < l1.length - 1; i++){\n        result.push([l1[i], l1[i+1]]);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      if(l1[i] + l1[j] === 0){\n        result.push(i,j);\n        break;\n      }\n    }\n  }\n  return result.reduce(function(a,b){return a+b;},0);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpe9p4tt5_.js:20:10)\n    at Object.<anonymous> (/tmp/tmpe9p4tt5_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(i < l1.length - 1){\n      l2.push(l1[i] + l1[i + 1]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpgf0_2sbo.js:17:10)\n    at Object.<anonymous> (/tmp/tmpgf0_2sbo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      result.push([l1[i], l1[j]]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp08oo7obl.js:17:10)\n    at Object.<anonymous> (/tmp/tmp08oo7obl.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      l2.push([l1[i], l1[j]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpsu_bqtx3.js:17:10)\n    at Object.<anonymous> (/tmp/tmpsu_bqtx3.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length-1; i++){\n    l2.push([l1[i],l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i=0; i<l1.length-1; i++){\n\t\tl2.push([l1[i], l1[i+1]]);\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i=0; i<l1.length-1; i++){\n\t\tl2.push([l1[i], l1[i+1]]);\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0;i<l1.length-1;i++){\n        l2.push([l1[i],l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(i != l1.length-1){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] == 0){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmphz7kqbqh.js:20:10)\n    at Object.<anonymous> (/tmp/tmphz7kqbqh.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(i < l1.length-1){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length - 1; i++){\n    l2.push([l1[i], l1[i + 1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(l1[i+1] != undefined){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tl2.push(l1[i]);\n\t\tl2.push(l1[i+1]);\n\t\ti++;\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2,\n  3,\n  3,\n  4,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmplkguc2hx.js:17:10)\n    at Object.<anonymous> (/tmp/tmplkguc2hx.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 2, 3,\n    3, 4, 4, 5\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length-1; i++){\n        l2.push(l1[i]+l1[i+1]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  5,\n  6,\n  7,\n  8,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpwr3g9h_m.js:15:10)\n    at Object.<anonymous> (/tmp/tmpwr3g9h_m.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 5, 6,\n    7, 8, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length; i++){\n        if(l1[i+1] != undefined){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tif(i < l1.length - 1){\n\t\t\tl2.push([l1[i], l1[i+1]]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpjiuui4ra.js:19:10)\n    at Object.<anonymous> (/tmp/tmpjiuui4ra.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i+1; j < l1.length; j++){\n      result.push(l1[i] + l1[j]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  4,\n  5,\n  5,\n  6,\n  3,\n  4,\n  4,\n  5,\n  5,\n  6,\n  5,\n  5,\n  6,\n  6,\n  7,\n  6,\n  7,\n  7,\n  8,\n  7,\n  7,\n  8,\n  8,\n  9,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmps_xq2r8e.js:17:10)\n    at Object.<anonymous> (/tmp/tmps_xq2r8e.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 4, 5, 5, 6, 3,\n    4, 4, 5, 5, 6, 5, 5, 6,\n    6, 7, 6, 7, 7, 8, 7, 7,\n    8, 8, 9, 9\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      result.push(l1[i], l1[j]);\n    }\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  1,\n  2,\n  1,\n  3,\n  1,\n  3,\n  1,\n  4,\n  1,\n  4,\n  1,\n  5,\n  1,\n  2,\n  1,\n  3,\n  1,\n  3,\n  1,\n  4,\n  1,\n  4,\n  1,\n  5,\n  2,\n  3,\n  2,\n  3,\n  2,\n  4,\n  2,\n  4,\n  2,\n  5,\n  3,\n  3,\n  3,\n  4,\n  3,\n  4,\n  3,\n  5,\n  3,\n  4,\n  3,\n  4,\n  3,\n  5,\n  4,\n  4,\n  4,\n  5,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpy04ivxg2.js:16:10)\n    at Object.<anonymous> (/tmp/tmpy04ivxg2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 1, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4,\n    1, 5, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4,\n    1, 5, 2, 3, 2, 3, 2, 4, 2, 4, 2, 5,\n    3, 3, 3, 4, 3, 4, 3, 5, 3, 4, 3, 4,\n    3, 5, 4, 4, 4, 5, 4, 5\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var sum = 0;\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i + 1; j < l1.length; j++){\n            if(l1[i] + l1[j] == 10){\n                sum += i + j;\n                l1[i] = l1[j] = NaN;\n            }\n        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpjiuui4ra.js:19:10)\n    at Object.<anonymous> (/tmp/tmpjiuui4ra.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var arr = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = i+1; j < l1.length; j++){\n            arr.push([l1[i], l1[j]]);\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpojmn0aqa.js:16:10)\n    at Object.<anonymous> (/tmp/tmpojmn0aqa.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i=0; i<l1.length-1; i++){\n    result.push([l1[i], l1[i+1]]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length; i++){\n    if(l1[i+1] != undefined){\n      l2.push([l1[i], l1[i+1]]);\n    }\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i=0; i<l1.length-1; i++){\n\t\tl2.push([l1[i], l1[i+1]]);\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var sum = 0;\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      if(l1[i] + l1[j] == 10){\n        sum += i + j;\n        l1[i] = l1[j] = NaN;\n      }\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmpda2tj78l.js:20:10)\n    at Object.<anonymous> (/tmp/tmpda2tj78l.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor (var i = 0; i < l1.length; i++) {\n\t\tif (i != l1.length - 1) {\n\t\t\tl2.push([l1[i], l1[i+1]]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n\tvar l2 = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tif(i < l1.length - 1){\n\t\t\tl2.push([l1[i], l1[i+1]]);\n\t\t}\n\t}\n\treturn l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var result = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j = i + 1; j < l1.length; j++){\n      result.push([l1[i], l1[j]]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    3\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    5\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    4\n  ],\n  [\n    2,\n    5\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    5\n  ],\n  [\n    3,\n    4\n  ],\n ...\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    2\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    4,\n    5\n  ]\n]\n    at test (/tmp/tmp08oo7obl.js:17:10)\n    at Object.<anonymous> (/tmp/tmp08oo7obl.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 1 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 1, 2 ], [ 1, 3 ],\n    [ 1, 3 ], [ 1, 4 ], [ 1, 4 ],\n    [ 1, 5 ], [ 2, 3 ], [ 2, 3 ],\n    [ 2, 4 ], [ 2, 4 ], [ 2, 5 ],\n    [ 3, 3 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 3, 4 ], [ 3, 4 ],\n    [ 3, 5 ], [ 4, 4 ], [ 4, 5 ],\n    [ 4, 5 ]\n  ],\n  expected: [\n    [ 1, 1 ], [ 1, 2 ],\n    [ 2, 3 ], [ 3, 3 ],\n    [ 3, 4 ], [ 4, 4 ],\n    [ 4, 5 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length-1; i++){\n        l2.push([l1[i], l1[i+1]]);\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(i < l1.length - 1){\n            l2.push([l1[i], l1[i+1]]);\n        }\n    }\n    return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1665510682,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length - 1; i++){\n    l2.push([l1[i], l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n  var l2 = [];\n  for(var i = 0; i < l1.length-1; i++){\n    l2.push([l1[i], l1[i+1]]);\n  }\n  return l2;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise(l1){\n    var l2 = [];\n    for(var i=0; i<l1.length; i++){\n        if(i+1<l1.length){\n            l2.push([l1[i],l1[i+1]]);\n        }\n    }\n    return l2;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pair_wise;\n  assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);\n  assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);\n  assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);\n}\n\ntest();",
      "timestamp": 1666123984,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}