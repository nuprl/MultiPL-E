{
  "name": "mbpp_239_get_total_number_of_sequences",
  "language": "js",
  "prompt": "//Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfunction get_total_number_of_sequences(m, n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_total_number_of_sequences;\n  assert.deepEqual(candidate(10, 4),4);\n  assert.deepEqual(candidate(5, 2),6);\n  assert.deepEqual(candidate(16, 3),84);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(m, n, i);\n    }\n    return total;\n}\n",
    "  var count = 0;\n  var seq = [];\n  var recurse = function(prev){\n    if(seq.length === n){\n      count++;\n      return;\n    }\n    for(var i = prev; i <= m; i++){\n      if(i >= prev * 2){\n        seq.push(i);\n        recurse(i);\n        seq.pop();\n      }\n    }\n  }\n  recurse(1);\n  return count;\n}\n",
    "    let count = 0;\n    for(let i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n-1, i);\n    }\n    return count;\n}\n",
    "    if(n === 1){\n        return m;\n    }\n    let sum = 0;\n    for(let i = 2; i <= m; i++){\n        sum += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return sum;\n}\n",
    "    var count = 0;\n    for(var i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n-1, i);\n    }\n    return count;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(m, n, i);\n    }\n    return total;\n}\n",
    "    var result = 0;\n    for(var i = 2; i <= m; i++){\n        result += get_total_number_of_sequences_helper(i, n);\n    }\n    return result;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    let sequences = 0;\n    for(let i = 1; i <= m; i++){\n        sequences += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return sequences;\n}\n",
    "  let count = 0;\n  for (let i = 2; i <= m; i++) {\n    count += get_total_number_of_sequences_helper(m, n - 1, i);\n  }\n  return count;\n}\n",
    "    let result = 0;\n    for(let i = 2; i <= m; i++){\n        result += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return result;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "  var count = 0;\n  for(var i = 2; i <= m; i++){\n    count += get_total_number_of_sequences_helper(m, n-1, i);\n  }\n  return count;\n}\n",
    "    let dp = new Array(n+1).fill(0);\n    dp[0] = 1;\n    for(let i = 1; i <= n; i++){\n        for(let j = 2*i; j <= m; j++){\n            dp[i] += dp[i-1];\n        }\n    }\n    return dp[n];\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    var count = 0;\n    for(var i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(i, n);\n    }\n    return count;\n}\n",
    "    let count = 0;\n    for (let i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n-1, i);\n    }\n    return count;\n}\n",
    "    if(n == 1){\n        return m;\n    }\n    if(n == 2){\n        return m * (m - 1);\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return total;\n}\n",
    "    if(n === 0) return 1;\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  var total = 0;\n  var arr = [];\n  for(var i = 1; i <= m; i++){\n    arr.push(i);\n  }\n  var sequences = [];\n  var temp = [];\n  var recurse = function(arr, temp, n){\n    if(temp.length === n){\n      sequences.push(temp.slice());\n      return;\n    }\n    for(var i = 0; i < arr.length; i++){\n      if(temp.length === 0){\n        temp.push(arr[i]);\n        recurse(arr, temp, n);\n        temp.pop();\n      } else {\n        if(arr[i] >= temp[temp.length - 1] * 2){\n          temp.push(arr[i]);\n          recurse(arr, temp, n);\n          temp.pop();\n        }\n      }\n    }\n  }\n  recurse(arr, temp, n);\n  return sequences.length;\n}\n"
  ]
}