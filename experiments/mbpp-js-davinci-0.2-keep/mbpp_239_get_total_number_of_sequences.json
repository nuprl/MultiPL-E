{
  "name": "mbpp_239_get_total_number_of_sequences",
  "language": "js",
  "prompt": "//Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfunction get_total_number_of_sequences(m, n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_total_number_of_sequences;\n  assert.deepEqual(candidate(10, 4),4);\n  assert.deepEqual(candidate(5, 2),6);\n  assert.deepEqual(candidate(16, 3),84);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(m, n, i);\n    }\n    return total;\n}\n",
    "  var count = 0;\n  var seq = [];\n  var recurse = function(prev){\n    if(seq.length === n){\n      count++;\n      return;\n    }\n    for(var i = prev; i <= m; i++){\n      if(i >= prev * 2){\n        seq.push(i);\n        recurse(i);\n        seq.pop();\n      }\n    }\n  }\n  recurse(1);\n  return count;\n}\n",
    "    let count = 0;\n    for(let i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n-1, i);\n    }\n    return count;\n}\n",
    "    if(n === 1){\n        return m;\n    }\n    let sum = 0;\n    for(let i = 2; i <= m; i++){\n        sum += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return sum;\n}\n",
    "    var count = 0;\n    for(var i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n-1, i);\n    }\n    return count;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(m, n, i);\n    }\n    return total;\n}\n",
    "    var result = 0;\n    for(var i = 2; i <= m; i++){\n        result += get_total_number_of_sequences_helper(i, n);\n    }\n    return result;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    let sequences = 0;\n    for(let i = 1; i <= m; i++){\n        sequences += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return sequences;\n}\n",
    "  let count = 0;\n  for (let i = 2; i <= m; i++) {\n    count += get_total_number_of_sequences_helper(m, n - 1, i);\n  }\n  return count;\n}\n",
    "    let result = 0;\n    for(let i = 2; i <= m; i++){\n        result += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return result;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "  var count = 0;\n  for(var i = 2; i <= m; i++){\n    count += get_total_number_of_sequences_helper(m, n-1, i);\n  }\n  return count;\n}\n",
    "    let dp = new Array(n+1).fill(0);\n    dp[0] = 1;\n    for(let i = 1; i <= n; i++){\n        for(let j = 2*i; j <= m; j++){\n            dp[i] += dp[i-1];\n        }\n    }\n    return dp[n];\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    var count = 0;\n    for(var i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(i, n);\n    }\n    return count;\n}\n",
    "    let count = 0;\n    for (let i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n-1, i);\n    }\n    return count;\n}\n",
    "    if(n == 1){\n        return m;\n    }\n    if(n == 2){\n        return m * (m - 1);\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return total;\n}\n",
    "    if(n === 0) return 1;\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  var total = 0;\n  var arr = [];\n  for(var i = 1; i <= m; i++){\n    arr.push(i);\n  }\n  var sequences = [];\n  var temp = [];\n  var recurse = function(arr, temp, n){\n    if(temp.length === n){\n      sequences.push(temp.slice());\n      return;\n    }\n    for(var i = 0; i < arr.length; i++){\n      if(temp.length === 0){\n        temp.push(arr[i]);\n        recurse(arr, temp, n);\n        temp.pop();\n      } else {\n        if(arr[i] >= temp[temp.length - 1] * 2){\n          temp.push(arr[i]);\n          recurse(arr, temp, n);\n          temp.pop();\n        }\n      }\n    }\n  }\n  recurse(arr, temp, n);\n  return sequences.length;\n}\n",
    "  var total = 0;\n  for(var i = 2; i <= m; i++){\n    total += get_total_number_of_sequences_helper(i, n);\n  }\n  return total;\n}\n",
    "    if(n === 1){\n        return m;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return total;\n}\n",
    "    if(n === 0){\n        return 1;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    var result = 0;\n    for(var i = 2; i <= m; i++){\n        result += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return result;\n}\n",
    "  let count = 0;\n  for(let i = 1; i <= m; i++){\n    count += get_total_number_of_sequences_helper(m, n, i);\n  }\n  return count;\n}\n",
    "    if(n === 1) return m;\n    if(n === 2) return m * (m + 1) / 2;\n    let sum = 0;\n    for(let i = 2; i <= m; i++){\n        sum += get_total_number_of_sequences(i, n - 1);\n    }\n    return sum;\n}\n",
    "  let total = 0;\n  for(let i = 2; i <= m; i++){\n    total += get_number_of_sequences(i, n);\n  }\n  return total;\n}\n",
    "    var count = 0;\n    var arr = [];\n    for(var i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    var helper = function(arr, n, count){\n        if(n === 0){\n            count++;\n            return;\n        }\n        for(var i = 0; i < arr.length; i++){\n            helper(arr.slice(i), n - 1, count);\n        }\n    }\n    helper(arr, n, count);\n    return count;\n}",
    "  var count = 0;\n  var arr = [];\n  for(var i = 1; i <= m; i++){\n    arr.push(i);\n  }\n  var sequences = get_sequences(arr, n);\n  for(var i = 0; i < sequences.length; i++){\n    if(is_valid_sequence(sequences[i])){\n      count++;\n    }\n  }\n  return count;\n}\n",
    "  if(n === 1){\n    return m;\n  }\n  if(n === 2){\n    return m * (m - 1);\n  }\n  return m * get_total_number_of_sequences(m - 1, n - 1);\n}\n",
    "    if(n === 1){\n        return m;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return total;\n}\n",
    "  if(n == 1) return m;\n  var count = 0;\n  for(var i = 2; i <= m; i++){\n    count += get_total_number_of_sequences(i, n-1);\n  }\n  return count;\n}\n",
    "  let count = 0;\n  function helper(m, n, curr = 1){\n    if(n === 0){\n      count++;\n      return;\n    }\n    for(let i = curr; i <= m; i++){\n      if(i >= 2 * curr){\n        helper(m, n - 1, i);\n      }\n    }\n  }\n  helper(m, n);\n  return count;\n}\n",
    "    var result = 0;\n    for(var i = 2; i <= m; i++){\n        result += get_total_number_of_sequences_helper(i, n);\n    }\n    return result;\n}\n",
    "    if(n === 1) return m;\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences_helper(i, n);\n    }\n    return total;\n}\n",
    "    let result = 0;\n    let arr = [];\n    for(let i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    let sequences = get_sequences(arr, n);\n    for(let i = 0; i < sequences.length; i++){\n        if(is_valid(sequences[i])){\n            result++;\n        }\n    }\n    return result;\n}\n",
    "  if(n === 1) return m;\n  if(n === 2) return m * (m - 1) / 2;\n  let total = m * (m - 1) / 2;\n  for(let i = 3; i <= n; i++){\n    total *= (m - i + 1);\n  }\n  return total;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return total;\n}\n",
    "    let total = 0;\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        arr.push(i);\n    }\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 2 * arr[i-1] && arr[i] <= m){\n            total++;\n        }\n    }\n    return total;\n}\n",
    "    var total = 0;\n    var prev = 1;\n    var curr = 2;\n    var temp = 0;\n    if(n == 1){\n        return m;\n    }\n    if(n == 2){\n        return m * (m - 1);\n    }\n    for(var i = 2; i < n; i++){\n        total = (m - 1) * (prev + curr);\n        temp = curr;\n        curr = total;\n        prev = temp;\n    }\n    return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(m, n, i);\n    }\n    return total;\n}\n",
    "    var total = 0;\n    for (var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "  if(n === 1){\n    return m;\n  }\n  if(n === 2){\n    return m * (m + 1) / 2;\n  }\n  let total = 0;\n  for(let i = 2; i <= m; i++){\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "    var result = 0;\n    for(var i = 2; i <= m; i++){\n        result += get_total_number_of_sequences_helper(i, n);\n    }\n    return result;\n}\n",
    "    var count = 0;\n    for(var i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return count;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    var result = 0;\n    for(var i = 2; i <= m; i++){\n        result += Math.pow(i, n);\n    }\n    return result;\n}\n",
    "    let count = 0;\n    for(let i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return count;\n}\n",
    "  var count = 0;\n  for(var i = 2; i <= m; i++){\n    count += get_total_number_of_sequences_helper(m, n - 1, i);\n  }\n  return count;\n}\n",
    "    var count = 0;\n    for (var i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return count;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    let total = 0;\n    let arr = [];\n    for(let i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    function helper(arr, n){\n        if(n === 0){\n            total++;\n            return;\n        }\n        for(let i = 0; i < arr.length; i++){\n            if(arr[i] >= 2 * arr[i - 1]){\n                helper(arr.slice(i), n - 1);\n            }\n        }\n    }\n    helper(arr, n);\n    return total;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(m, n, i);\n    }\n    return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences_helper(i, n);\n    }\n    return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return total;\n}\n",
    "    var count = 0;\n    var arr = [];\n    for(var i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    var result = [];\n    for(var i = 0; i < arr.length; i++){\n        var temp = [];\n        temp.push(arr[i]);\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[j] >= 2 * arr[i] && arr[j] <= m){\n                temp.push(arr[j]);\n            }\n        }\n        result.push(temp);\n    }\n    for(var i = 0; i < result.length; i++){\n        if(result[i].length === n){\n            count++;\n        }\n    }\n    return count;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences_helper(m, n-1, i);\n    }\n    return total;\n}\n",
    "  let result = 0;\n  for(let i = 2; i <= m; i++){\n    result += get_number_of_sequences(i, n);\n  }\n  return result;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    if(n === 0) return 1;\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  var arr = [];\n  for(var i = 1; i <= m; i++){\n    arr.push(i);\n  }\n  var result = [];\n  var temp = [];\n  get_total_number_of_sequences_helper(arr, n, result, temp);\n  return result.length;\n}\n",
    "    let result = 0;\n    let start = 2;\n    let end = m;\n    let count = 0;\n    while(start <= end){\n        if(count === n){\n            result++;\n            count = 0;\n            start = 2;\n            end = m;\n        }\n        if(start <= end){\n            end = end - start;\n            start = start * 2;\n            count++;\n        }\n    }\n    return result;\n}\n",
    "    var total = 0;\n    for (var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "  let count = 0;\n  let arr = [];\n  for (let i = 1; i <= m; i++) {\n    arr.push(i);\n  }\n  function helper(arr, n) {\n    if (n === 0) {\n      count++;\n      return;\n    }\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] >= 2 * arr[i - 1]) {\n        helper(arr.slice(i), n - 1);\n      }\n    }\n  }\n  helper(arr, n);\n  return count;\n}\n",
    "    if(n === 1){\n        return m;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return total;\n}\n",
    "  var total = 0;\n  var count = 0;\n  for(var i = 2; i <= m; i++){\n    count = 0;\n    for(var j = i; j <= m; j++){\n      if(j % i === 0){\n        count++;\n      }\n    }\n    total += count;\n  }\n  return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    var total_sequences = 0;\n    var sequence = [];\n    var current_number = 1;\n    var previous_number = 0;\n    var current_sequence_length = 0;\n    while(current_number <= m){\n        sequence.push(current_number);\n        current_sequence_length++;\n        if(current_sequence_length === n){\n            total_sequences++;\n            sequence.pop();\n            current_sequence_length--;\n            previous_number = sequence[sequence.length - 1];\n            current_number = previous_number * 2;\n        }\n        else{\n            previous_number = current_number;\n            current_number = previous_number * 2;\n        }\n    }\n    return total_sequences;\n}\n",
    "    if (n === 1) return m;\n    let result = 0;\n    for (let i = 2; i <= m; i++) {\n        result += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return result;\n}\n",
    "    if(n === 1) return m;\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    if(n === 0){\n        return 1;\n    }\n    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n-1);\n    }\n    return total;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    if(n === 0){\n        return 1;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return total;\n}\n",
    "    var count = 0;\n    for(var i = 2; i <= m; i++){\n        var arr = [i];\n        count += get_total_number_of_sequences_helper(m, n, arr);\n    }\n    return count;\n}\n",
    "  if(n === 1){\n    return m;\n  }\n  if(m === 1){\n    return 1;\n  }\n  return get_total_number_of_sequences(m, n - 1) + get_total_number_of_sequences(m - 1, n);\n}\n",
    "    var count = 0;\n    var arr = [];\n    for(var i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    var result = [];\n    for(var i = 0; i < arr.length; i++){\n        var temp = [];\n        temp.push(arr[i]);\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[j] >= 2 * temp[temp.length - 1]){\n                temp.push(arr[j]);\n            }\n        }\n        if(temp.length === n){\n            count++;\n            result.push(temp);\n        }\n    }\n    return count;\n}\n",
    "  let result = 0;\n  for(let i = 2; i <= m; i++){\n    result += get_total_number_of_sequences_helper(m, n - 1, i);\n  }\n  return result;\n}\n",
    "    // Write your code here\n    let count = 0;\n    for(let i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n-1, i);\n    }\n    return count;\n}\n",
    "    let count = 0;\n    for(let i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n-1, i);\n    }\n    return count;\n}\n",
    "    let dp = new Array(n+1).fill(0);\n    dp[0] = 1;\n    for(let i = 1; i <= n; i++){\n        for(let j = 2*i; j <= m && j <= n; j++){\n            dp[j] += dp[j-i];\n        }\n    }\n    return dp[n];\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(m, n, i);\n    }\n    return total;\n}\n",
    "    let arr = new Array(n).fill(0);\n    arr[0] = 1;\n    for(let i = 1; i < n; i++){\n        for(let j = i; j >= 0; j--){\n            if(arr[j] * 2 <= m){\n                arr[j] *= 2;\n                arr[i] += 1;\n            }\n        }\n    }\n    return arr[n-1];\n}\n",
    "  if(n === 0){\n    return 1;\n  }\n  if(n === 1){\n    return m;\n  }\n  let total = 0;\n  for(let i = 2; i <= m; i++){\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "    var count = 0;\n    for(var i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return count;\n}\n",
    "    if(n === 1){\n        return m;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n-1);\n    }\n    return total;\n}\n",
    "    if(n === 1){\n        return m;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}",
    "    var count = 0;\n    for(var i = 1; i <= m; i++){\n        var temp = i;\n        for(var j = 1; j < n; j++){\n            if(temp * 2 <= m){\n                temp *= 2;\n            }\n            else{\n                break;\n            }\n        }\n        if(j == n){\n            count++;\n        }\n    }\n    return count;\n}\n",
    "    var count = 0;\n    for(var i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return count;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    var count = 0;\n    for(var i = 2; i <= m; i++){\n        count += get_number_of_sequences(i, n);\n    }\n    return count;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(m, n, i);\n    }\n    return total;\n}\n",
    "    if(n === 0) return 1;\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(m, n, i);\n    }\n    return total;\n}\n",
    "  var total = 0;\n  var arr = [];\n  for(var i = 1; i <= m; i++){\n    arr.push(i);\n  }\n  var recurse = function(arr, n){\n    if(n === 0){\n      total++;\n      return;\n    }\n    for(var i = 0; i < arr.length; i++){\n      if(arr[i] >= 2 * arr[i - 1]){\n        recurse(arr.slice(i), n - 1);\n      }\n    }\n  }\n  recurse(arr, n);\n  return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    var count = 0;\n    var arr = [];\n    var i = 0;\n    while(i < n){\n        arr.push(2);\n        i++;\n    }\n    while(arr[n-1] <= m){\n        count++;\n        arr[n-1]++;\n        for(var j = n-1; j > 0; j--){\n            if(arr[j] > arr[j-1]*2){\n                arr[j-1] = arr[j]/2;\n            }\n        }\n    }\n    return count;\n}\n",
    "  var count = 0;\n  var arr = [];\n  for(var i = 1; i <= m; i++){\n    arr.push(i);\n  }\n  var sequences = get_all_sequences(arr, n);\n  for(var i = 0; i < sequences.length; i++){\n    if(is_valid_sequence(sequences[i])){\n      count++;\n    }\n  }\n  return count;\n}\n",
    "    let count = 0;\n    for(let i = 1; i <= m; i++){\n        if(i * 2 <= m){\n            count += get_total_number_of_sequences(m, n - 1);\n        }\n    }\n    return count;\n}\n",
    "    var result = 0;\n    for(var i = 2; i <= m; i++){\n        result += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return result;\n}\n",
    "    var result = 0;\n    for(var i = 2; i <= m; i++){\n        result += get_total_number_of_sequences_helper(m, n-1, i);\n    }\n    return result;\n}\n",
    "    let count = 0;\n    for(let i = 2; i <= m; i++){\n        let arr = [i];\n        for(let j = 2; j <= n; j++){\n            if(arr[j-2] * 2 <= m){\n                arr.push(arr[j-2] * 2);\n            }\n        }\n        if(arr.length === n){\n            count++;\n        }\n    }\n    return count;\n}\n",
    "  var count = 0;\n  function get_sequences(current_number, current_length){\n    if(current_length === n){\n      count++;\n      return;\n    }\n    for(var i = current_number * 2; i <= m; i++){\n      get_sequences(i, current_length + 1);\n    }\n  }\n  get_sequences(1, 1);\n  return count;\n}\n",
    "    var count = 0;\n    for(var i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n-1, i);\n    }\n    return count;\n}\n",
    "  var count = 0;\n  var sequence = [];\n  var helper = function(m, n, sequence){\n    if(sequence.length === n){\n      count++;\n      return;\n    }\n    for(var i = 2 * sequence[sequence.length - 1]; i <= m; i++){\n      sequence.push(i);\n      helper(m, n, sequence);\n      sequence.pop();\n    }\n  }\n  helper(m, n, sequence);\n  return count;\n}\n",
    "    var total = 0;\n    var arr = [];\n    for(var i = 0; i < n; i++){\n        arr.push(1);\n    }\n    while(arr[n-1] <= m){\n        var valid = true;\n        for(var i = 1; i < n; i++){\n            if(arr[i] < 2*arr[i-1]){\n                valid = false;\n                break;\n            }\n        }\n        if(valid){\n            total++;\n        }\n        arr[0]++;\n        for(var i = 0; i < n-1; i++){\n            if(arr[i] > m){\n                arr[i] = 1;\n                arr[i+1]++;\n            }\n        }\n    }\n    return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    var total = 0;\n    var arr = [];\n    for(var i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    var sequences = get_all_sequences(arr, n);\n    for(var i = 0; i < sequences.length; i++){\n        if(is_valid_sequence(sequences[i])){\n            total++;\n        }\n    }\n    return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return total;\n}\n",
    "  let count = 0;\n  let arr = [];\n  for(let i = 1; i <= m; i++){\n    arr.push(i);\n  }\n  let temp = [];\n  function helper(arr, temp, n){\n    if(temp.length === n){\n      count++;\n      return;\n    }\n    for(let i = 0; i < arr.length; i++){\n      if(temp.length === 0 || arr[i] >= 2 * temp[temp.length - 1]){\n        temp.push(arr[i]);\n        helper(arr, temp, n);\n        temp.pop();\n      }\n    }\n  }\n  helper(arr, temp, n);\n  return count;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    let total = 0;\n    let arr = [];\n    for(let i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    let sequences = [];\n    for(let i = 0; i < arr.length; i++){\n        let temp = [];\n        temp.push(arr[i]);\n        for(let j = i + 1; j < arr.length; j++){\n            if(arr[j] >= temp[temp.length - 1] * 2){\n                temp.push(arr[j]);\n            }\n        }\n        if(temp.length === n){\n            sequences.push(temp);\n        }\n    }\n    return sequences.length;\n}\n",
    "    var count = 0;\n    var arr = [];\n    for (var i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    var seq = [];\n    for (var i = 0; i < arr.length; i++){\n        seq.push(arr[i]);\n        for (var j = i + 1; j < arr.length; j++){\n            if (arr[j] >= 2 * seq[seq.length - 1]){\n                seq.push(arr[j]);\n                if (seq.length === n){\n                    count++;\n                }\n            }\n        }\n        seq = [];\n    }\n    return count;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return total;\n}\n",
    "    let total = 0;\n    for(let i = 1; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    var total = 0;\n    var arr = [];\n    for(var i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    var sequences = get_all_sequences(arr, n);\n    for(var i = 0; i < sequences.length; i++){\n        if(is_valid_sequence(sequences[i])){\n            total++;\n        }\n    }\n    return total;\n}\n",
    "    var count = 0;\n    for(var i = 1; i <= m; i++){\n        for(var j = i * 2; j <= m; j++){\n            count++;\n        }\n    }\n    return count * n;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "  if (n === 1) return m;\n  if (n === 2) return m * (m - 1);\n  if (n === 3) return m * (m - 1) * (m - 2);\n  if (n === 4) return m * (m - 1) * (m - 2) * (m - 3);\n  if (n === 5) return m * (m - 1) * (m - 2) * (m - 3) * (m - 4);\n  if (n === 6) return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5);\n  if (n === 7) return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6);\n  if (n === 8) return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7);\n  if (n === 9) return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8);\n  if (n === 10) return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9);\n  if (n === 11) return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9) * (m - 10);\n  if (n === 12) return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9) * (m - 10) *",
    "    var result = 0;\n    for(var i = 2; i <= m; i++){\n        result += get_total_number_of_sequences_helper(i, n);\n    }\n    return result;\n}\n",
    "    if(n === 1){\n        return m;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    if(m < 2 || n < 1) return 0;\n    let dp = new Array(n).fill(0);\n    dp[0] = 1;\n    for(let i = 1; i < n; i++){\n        for(let j = 2; j <= m; j++){\n            if(i - j >= 0){\n                dp[i] += dp[i - j];\n            }\n        }\n    }\n    return dp[n - 1];\n}\n",
    "  let count = 0;\n  for(let i = 1; i <= m; i++){\n    count += get_total_number_of_sequences_helper(i, m, n);\n  }\n  return count;\n}\n",
    "    let result = 0;\n    let arr = [];\n    for(let i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i; j < arr.length; j++){\n            if(arr[j] >= 2 * arr[i]){\n                newArr.push(arr[j]);\n            }\n        }\n    }\n    let newArr2 = [];\n    for(let i = 0; i < newArr.length; i++){\n        for(let j = i; j < newArr.length; j++){\n            if(newArr[j] >= 2 * newArr[i]){\n                newArr2.push(newArr[j]);\n            }\n        }\n    }\n    let newArr3 = [];\n    for(let i = 0; i < newArr2.length; i++){\n        for(let j = i; j < newArr2.length; j++){\n            if(newArr2[j] >= 2 * newArr2[i]){\n                newArr3.push(newArr2[j]);\n            }\n        }\n    }\n    let newArr4 = [];\n    for(let i = 0; i < newArr3.length; i++){\n        for(let j = i; j < newArr3.length; j++){\n            if(newArr3[j] >= 2 * newArr3[i]){\n                newArr4.push(newArr3[j]);\n            }\n        }\n    }\n    let newArr5 = [];\n    for(let i = 0; i < newArr4.length; i++){\n        for(let j = i; j < newArr4.length; j++){\n            if(newArr4[j] >= 2 * newArr4[i]){\n                newArr5.push(newArr4[j]);\n            }\n        }\n    }\n    let new",
    "    let total = 0;\n    let arr = [];\n    for(let i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    let sequences = get_all_sequences(arr, n);\n    for(let i = 0; i < sequences.length; i++){\n        if(is_valid_sequence(sequences[i])){\n            total++;\n        }\n    }\n    return total;\n}\n",
    "  var result = 0;\n  var sequence = [];\n  var helper = function(m, n, sequence){\n    if(sequence.length === n){\n      result++;\n      return;\n    }\n    for(var i = 2 * sequence[sequence.length - 1] || 1; i <= m; i++){\n      sequence.push(i);\n      helper(m, n, sequence);\n      sequence.pop();\n    }\n  }\n  helper(m, n, sequence);\n  return result;\n}\n",
    "    if(n === 1){\n        return m;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    if(n === 0){\n        return 1;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  if(n === 0) return 1;\n  let total = 0;\n  for(let i = 2; i <= m; i++){\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "  var count = 0;\n  var arr = [];\n  var i = 0;\n  while(i < n){\n    arr.push(1);\n    i++;\n  }\n  while(arr[0] <= m){\n    if(arr[n-1] <= m){\n      count++;\n    }\n    arr[n-1]++;\n    for(var j = n-1; j > 0; j--){\n      if(arr[j] > m){\n        arr[j-1]++;\n        arr[j] = arr[j-1]*2;\n      }\n    }\n  }\n  return count;\n}\n",
    "  let total = 0;\n  for(let i = 2; i <= m; i++){\n    total += get_number_of_sequences(i, n);\n  }\n  return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    var count = 0;\n    var arr = [];\n    for(var i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    for(var i = 0; i < arr.length; i++){\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[j] >= arr[i] * 2){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n",
    "    if(n === 0) return 1;\n    if(m === 0) return 0;\n    let total = 0;\n    for(let i = 2 * m; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    let count = 0;\n    for(let i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_recursive(m, n-1, i);\n    }\n    return count;\n}\n",
    "  if(n === 1){\n    return m;\n  }\n  if(n === 2){\n    return m * (m - 1);\n  }\n  return m * (m - 1) * Math.pow(m - 2, n - 2);\n}\n",
    "  let count = 0;\n  let arr = [];\n  for(let i = 1; i <= m; i++){\n    arr.push(i);\n  }\n  let sequences = [];\n  for(let i = 0; i < arr.length; i++){\n    let temp = [];\n    temp.push(arr[i]);\n    for(let j = i + 1; j < arr.length; j++){\n      if(arr[j] >= arr[i] * 2){\n        temp.push(arr[j]);\n      }\n    }\n    sequences.push(temp);\n  }\n  for(let i = 0; i < sequences.length; i++){\n    if(sequences[i].length === n){\n      count++;\n    }\n  }\n  return count;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "  var result = 0;\n  var arr = [];\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var aa = 0;\n  var ab = 0;\n  var ac = 0;\n  var ad = 0;\n  var ae = 0;\n  var af = 0;\n  var ag = 0;\n  var ah = 0;\n  var ai = 0;\n  var aj = 0;\n  var ak = 0;\n  var al = 0;\n  var am = 0;\n  var an = 0;\n  var ao = 0;\n  var ap = 0;\n  var aq = 0;\n  var ar = 0;\n  var as = 0;\n  var at = 0;\n  var au = 0;\n  var av = 0;\n  var aw = 0;\n  var ax = 0;\n  var ay = 0;\n  var az = 0;\n  var ba = 0;\n  var bb = 0;\n  var bc = 0;\n  var bd = 0;\n  var be = 0;\n  var bf = 0;\n  var bg = 0;\n  var bh = 0;\n  var bi = 0;\n  var bj = 0;\n  var bk = 0;\n  var bl = 0;\n  var bm = 0;\n  var bn = 0;\n  var bo = 0;\n  var bp = 0;\n  var bq = 0;\n  var br = 0;\n  var bs = 0;\n  var bt = 0;\n  var bu = 0;\n  var bv = 0;\n  var bw = 0;\n  var bx = 0;\n",
    "    var total = 0;\n    var i = 1;\n    while(i <= m){\n        total += get_number_of_sequences(m, n, i);\n        i++;\n    }\n    return total;\n}\n",
    "    let count = 0;\n    let arr = [];\n    for(let i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        let temp = [];\n        temp.push(arr[i]);\n        for(let j = i + 1; j < arr.length; j++){\n            if(arr[j] >= 2 * arr[i]){\n                temp.push(arr[j]);\n            }\n        }\n        result.push(temp);\n    }\n    for(let i = 0; i < result.length; i++){\n        if(result[i].length === n){\n            count++;\n        }\n    }\n    return count;\n}\n",
    "  var total = 0;\n  var arr = [];\n  for(var i = 1; i <= m; i++){\n    arr.push(i);\n  }\n  var sequences = get_sequences(arr, n);\n  for(var i = 0; i < sequences.length; i++){\n    var sequence = sequences[i];\n    var is_valid = true;\n    for(var j = 1; j < sequence.length; j++){\n      if(sequence[j] < 2 * sequence[j - 1]){\n        is_valid = false;\n        break;\n      }\n    }\n    if(is_valid){\n      total++;\n    }\n  }\n  return total;\n}\n",
    "    var count = 0;\n    var arr = [];\n    for(var i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n        for(var j = i + 1; j < arr.length; j++){\n            if(arr[j] >= num * 2){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return total;\n}\n",
    "    if(n === 0){\n        return 1;\n    }\n    if(n === 1){\n        return m;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return total;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return total;\n}\n",
    "    let dp = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for(let i = 1; i <= n; i++){\n        for(let j = 2; j <= m; j++){\n            if(i - j >= 0){\n                dp[i] += dp[i - j];\n            }\n        }\n    }\n    return dp[n];\n}\n",
    "    if (n == 1) return m;\n    if (n == 2) return m * (m - 1);\n    let total = 0;\n    for (let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return total;\n}\n",
    "    var count = 0;\n    for(var i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return count;\n}\n",
    "  var count = 0;\n  for(var i = 1; i <= m; i++){\n    count += get_total_number_of_sequences_helper(m, n, i);\n  }\n  return count;\n}\n",
    "  var count = 0;\n  var arr = [];\n  for(var i = 1; i <= m; i++){\n    arr.push(i);\n  }\n  var sequences = get_sequences(arr, n);\n  for(var i = 0; i < sequences.length; i++){\n    if(is_valid(sequences[i])){\n      count++;\n    }\n  }\n  return count;\n}\n",
    "    var count = 0;\n    for(var i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n-1, i);\n    }\n    return count;\n}\n",
    "  var count = 0;\n  var arr = [];\n  var num = 0;\n  var i = 0;\n  var j = 0;\n  for(i = 0; i < n; i++){\n    arr.push(num);\n  }\n  while(arr[0] <= m){\n    if(arr[n-1] <= m){\n      count++;\n    }\n    arr[n-1]++;\n    for(j = n-1; j > 0; j--){\n      if(arr[j] > m){\n        arr[j-1]++;\n        arr[j] = arr[j-1] * 2;\n      }\n    }\n  }\n  return count;\n}\n",
    "    let result = 0;\n    for(let i = 2; i <= m; i++){\n        result += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return result;\n}\n",
    "    let total_sequences = 0;\n    for(let i = 2; i <= m; i++){\n        total_sequences += get_number_of_sequences(i, n);\n    }\n    return total_sequences;\n}\n",
    "    if(n == 0){\n        return 1;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    if(n === 0) return 1;\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    var total = 0;\n    var start = 2;\n    var end = m;\n    var count = 0;\n    for(var i = start; i <= end; i++){\n        count++;\n        if(count == n){\n            total++;\n            count = 0;\n        }\n    }\n    return total;\n}\n",
    "  let total = 0;\n  for(let i = 2; i <= m; i++){\n    total += get_number_of_sequences(i, n);\n  }\n  return total;\n}\n",
    "    var result = 0;\n    for(var i = 2; i <= m; i++){\n        result += get_total_number_of_sequences_helper(i, n);\n    }\n    return result;\n}\n",
    "\tvar result = 0;\n\tfor(var i = 2; i <= m; i++){\n\t\tresult += get_total_number_of_sequences_helper(m, n, i);\n\t}\n\treturn result;\n}\n",
    "    if(n === 1){\n        return m;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    var count = 0;\n    var arr = [];\n    var i = 1;\n    while(i <= m){\n        arr.push(i);\n        i = i * 2;\n    }\n    var j = 0;\n    while(j < arr.length){\n        var k = j;\n        while(k < arr.length){\n            if(arr[k] - arr[j] <= m){\n                count++;\n            }\n            k++;\n        }\n        j++;\n    }\n    return count;\n}\n",
    "  var count = 0;\n  var arr = [];\n  for(var i = 1; i <= m; i++){\n    arr.push(i);\n  }\n  var sequences = get_sequences(arr, n);\n  for(var i = 0; i < sequences.length; i++){\n    if(is_valid_sequence(sequences[i])){\n      count++;\n    }\n  }\n  return count;\n}\n",
    "    let total_number_of_sequences = 0;\n    let current_number = 2;\n    let current_number_of_sequences = 1;\n    let previous_number_of_sequences = 0;\n    for(let i = 1; i < n; i++){\n        previous_number_of_sequences = current_number_of_sequences;\n        current_number_of_sequences = 0;\n        for(let j = current_number; j <= m; j++){\n            current_number_of_sequences += previous_number_of_sequences;\n        }\n        current_number *= 2;\n        total_number_of_sequences += current_number_of_sequences;\n    }\n    return total_number_of_sequences;\n}\n",
    "    let count = 0;\n    for(let i = 2; i <= m; i++){\n        let seq = [i];\n        count += get_sequences(seq, m, n);\n    }\n    return count;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    if(n === 0){\n        return 1;\n    }\n    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    var count = 0;\n    for(var i = 1; i <= m; i++){\n        if(i * 2 > m){\n            break;\n        }\n        count += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return count;\n}\n",
    "  var total = 0;\n  for (var i = 2; i <= m; i++){\n    total += get_number_of_sequences(i, n);\n  }\n  return total;\n}\n",
    "    if (n === 1) {\n        return m;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  var total = 0;\n  for(var i = 2; i <= m; i++){\n    total += get_total_number_of_sequences_helper(m, n, i);\n  }\n  return total;\n}\n",
    "  var total = 0;\n  for(var i = 2; i <= m; i++){\n    total += get_number_of_sequences(i, n);\n  }\n  return total;\n}\n",
    "  var total = 0;\n  for(var i = 1; i <= m; i++){\n    total += get_number_of_sequences(i, m, n);\n  }\n  return total;\n}\n",
    "    let total = 0;\n    for(let i = 1; i <= m; i++){\n        total += get_number_of_sequences(m, n, i);\n    }\n    return total;\n}\n",
    "  if(n === 1){\n    return m;\n  }\n  if(n === 2){\n    return m * (m - 1);\n  }\n  return (m - 1) * (get_total_number_of_sequences(m - 1, n - 1) + get_total_number_of_sequences(m - 2, n - 1));\n}\n",
    "  let result = 0;\n  for(let i = 2; i <= m; i++){\n    result += get_total_number_of_sequences_helper(m, n - 1, i);\n  }\n  return result;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += Math.pow(i, n);\n    }\n    return total;\n}\n",
    "    var total_sequences = 0;\n    var current_sequence = [];\n    var current_number = 1;\n    var current_index = 0;\n    var current_number_of_sequences = 0;\n    var current_number_of_sequences_with_current_number = 0;\n    var current_number_of_sequences_with_current_number_and_current_index = 0;\n    var current_number_of_sequences_with_current_number_and_current_index_and_current_sequence = 0;\n    var current_number_of_sequences_with_current_number_and_current_index_and_current_sequence_and_current_number_of_sequences = 0;\n    var current_number_of_sequences_with_current_number_and_current_index_and_current_sequence_and_current_number_of_sequences_and_current_number_of_sequences_with_current_number = 0;\n    var current_number_of_sequences_with_current_number_and_current_index_and_current_sequence_and_current_number_of_sequences_and_current_number_of_sequences_with_current_number_and_current_number_of_sequences_with_current_number_and_current_number_of_sequences_with_current_number_and_current_number_of_sequences_with_current_number_and_current_number_of_sequences_with_current_number_and_current_number_of_sequences_with_current_number_and_current_number_of_sequences_with_current_number_and_current_number_of_sequences_with_current_number_and_current_number_of_sequences_with_current_number_and_current_number_of_sequences_with_current_number_and_current_number_of_sequences_with_current_number_and_current_number_of_sequences_with_current_number_and_current_number_of_sequences_with_current_number_and_current_number_of_sequences_with_current_number_and_",
    "    let dp = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for(let i = 1; i <= n; i++){\n        for(let j = 2; j <= m; j++){\n            if(i - j >= 0){\n                dp[i] += dp[i - j];\n            }\n        }\n    }\n    return dp[n];\n}\n",
    "  let count = 0;\n  let arr = [];\n  for (let i = 1; i <= m; i++){\n    arr.push(i);\n  }\n  function helper(arr, n){\n    if (n === 0){\n      count++;\n      return;\n    }\n    for (let i = 0; i < arr.length; i++){\n      if (arr[i] >= 2 * arr[i - 1]){\n        helper(arr.slice(i), n - 1);\n      }\n    }\n  }\n  helper(arr, n);\n  return count;\n}\n",
    "  if(n === 0) return 1;\n  let total = 0;\n  for(let i = 2; i <= m; i++){\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "  let total = 0;\n  for(let i = 2; i <= m; i++){\n    total += get_total_number_of_sequences_helper(m, n-1, i);\n  }\n  return total;\n}\n",
    "    var total = 0;\n    var arr = [];\n    for(var i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    var sequences = [];\n    var sequence = [];\n    var count = 0;\n    var helper = function(arr, sequence, count){\n        if(count === n){\n            sequences.push(sequence.slice());\n            return;\n        }\n        for(var i = 0; i < arr.length; i++){\n            if(sequence.length === 0 || arr[i] >= 2 * sequence[sequence.length - 1]){\n                sequence.push(arr[i]);\n                helper(arr, sequence, count + 1);\n                sequence.pop();\n            }\n        }\n    }\n    helper(arr, sequence, count);\n    return sequences.length;\n}",
    "  var count = 0;\n  for(var i = 2; i <= m; i++){\n    count += get_total_number_of_sequences_helper(m, n-1, i);\n  }\n  return count;\n}\n",
    "    let total = 0;\n    for(let i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n",
    "    var count = 0;\n    var arr = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    for(i = 0; i < m; i++){\n        arr[i] = i + 1;\n    }\n    for(i = 0; i < m; i++){\n        for(j = 0; j < m; j++){\n            for(k = 0; k < m; k++){\n                if(arr[i] >= arr[j] * 2 && arr[j] >= arr[k] * 2 && arr[k] >= arr[i] * 2){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n",
    "    var result = 0;\n    var arr = [];\n    for(var i = 1; i <= m; i++){\n        arr.push(i);\n    }\n    var sequences = [];\n    var temp = [];\n    get_sequences(arr, temp, sequences, n);\n    for(var i = 0; i < sequences.length; i++){\n        if(sequences[i].length == n){\n            result++;\n        }\n    }\n    return result;\n}\n",
    "    var count = 0;\n    for(var i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return count;\n}\n",
    "    if(n == 1)\n        return m;\n    if(n == 2)\n        return m*(m+1)/2;\n    var dp = new Array(n+1);\n    for(var i = 0; i <= n; i++)\n        dp[i] = new Array(m+1);\n    for(var i = 0; i <= n; i++)\n        for(var j = 0; j <= m; j++)\n            dp[i][j] = 0;\n    for(var i = 1; i <= m; i++)\n        dp[1][i] = 1;\n    for(var i = 2; i <= n; i++)\n        for(var j = 2; j <= m; j++)\n            dp[i][j] = dp[i][j-1] + dp[i-1][j-1];\n    return dp[n][m];\n}\n",
    "    var count = 0;\n    for(var i = 2; i <= m; i++){\n        count += get_total_number_of_sequences_helper(i, n - 1);\n    }\n    return count;\n}\n",
    "  var count = 0;\n  var sequence = [];\n  var start = 1;\n  var end = m;\n  var i = 0;\n  while(i < n){\n    sequence.push(start);\n    start = start * 2;\n    i++;\n  }\n  while(sequence[0] <= m){\n    count++;\n    sequence[n-1]++;\n    for(var i = n-1; i > 0; i--){\n      if(sequence[i] > m){\n        sequence[i] = sequence[i-1] * 2;\n        sequence[i-1]++;\n      }\n    }\n  }\n  return count;\n}\n",
    "    var total = 0;\n    var arr = [];\n    var i = 1;\n    while(i <= m){\n        arr.push(i);\n        i *= 2;\n    }\n    var recurse = function(arr, n, total){\n        if(n === 0){\n            total++;\n            return;\n        }\n        for(var i = 0; i < arr.length; i++){\n            recurse(arr.slice(i), n - 1, total);\n        }\n    }\n    recurse(arr, n, total);\n    return total;\n}\n",
    "    var total = 0;\n    for(var i = 2; i <= m; i++){\n        total += get_number_of_sequences(i, n);\n    }\n    return total;\n}\n"
  ]
}