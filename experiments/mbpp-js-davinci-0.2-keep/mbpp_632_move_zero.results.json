{
  "name": "mbpp_632_move_zero",
  "language": "js",
  "prompt": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in num_list:\n        if i == 0:\n            l.append(i)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpk9ve1606.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,3,-5,7]))\n\n#Write a python function to find the median of three values.\ndef median(lst):\n    sortedLst = sorted(lst)\n    lstLen = len(lst)\n    index = (lstLen - 1) // 2\n\n    if (lstLen % 2):\n        return sortedLst[index]\n    else:\n        return (sortedLst[index] + sortedLst[index + 1])/2.0\nprint(median([1,2,3]))\nprint(median([1,2,3,4]))\nprint(median([53, 12, 65, 7, 420, 317, 88]))\n\n#Write a python function to find the maximum 3 numbers from a given sequence of numbers.\ndef max_of_two( x, y ):\n    if x > y:\n        return x\n    return y\ndef max_of_three( x, y, z\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpkk20fwpy.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        sm = sm + (i * i)\n    return sm\nn = 4\nprint(squaresum(n))\n\n#Write a python function to find the sum of all even numbers in a given list.\ndef sum_even(data):\n    sum = 0\n    for num in data:\n        if num % 2 == 0:\n            sum += num\n    return sum\nprint(sum_even([1,2,3,4,5,6,7,8,9]))\n\n#Write a python function to find the sum of all odd numbers in a given list.\ndef sum_odd(data):\n    sum = 0\n    for num in data:\n        if num % 2 != 0:\n            sum += num\n    return sum\nprint(sum_odd([1,2,3,4,5,6,7,8,9]))\n\n#Write a python function to find the product of all numbers in a given list.\ndef product(data):\n    p = 1\n    for num\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpta6_v_5a.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to find the second largest number in a given list.\ndef second_largest(data):\n    data.sort()\n    return data[-2]\nprint(second_largest([1,2,3,4,5]))\nprint(second_largest([6,7,8,9,10]))\n\n#Write a python function to find the second lowest number in a given list.\ndef second_lowest(data):\n    data.sort()\n    return data[1]\nprint(second_lowest([1,2,3,4,5]))\nprint(second_lowest([6,7,8,9,10]))\n\n#Write a python function to find the second smallest number in a given list.\ndef second_smallest(data):\n    data.\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmp99gksr9_.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n):\n    sum = 0\n    for i in n:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3]))\nprint(squaresum([1,3,5,7]))\n\n#Write a python function to take a list of words and return the length of the longest one.\ndef find_longest_word(words_list):\n    word_len = []\n    for n in words_list:\n        word_len.append((len(n), n))\n    word_len.sort()\n    return word_len[-1][1]\nprint(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n#Write a python function to take a list of words and return the length of the longest one.\ndef find_longest_word(words_list):\n    word_len = []\n    for n in words_list:\n        word_len.append((len(n), n))\n    word_len.sort()\n    return word_len[-1][1\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmp3yt9l0p1.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to multiply all the numbers in the given list.\ndef multiply(numbers):\n    total = numbers[0]\n    for x in numbers:\n        total *= x\n    return total\nprint(multiply((8, 2, 3, -1, 7)))\n\n#Write a python function to find the second largest number in the given list.\ndef second_largest(numbers):\n    if (len(numbers)<2):\n        return\n    if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n        return\n    dup_items = set()\n    uniq_items = []\n    for x in numbers:\n        if x not in dup_items:\n            uniq_items.append(x)\n            dup_items.add(x)\n    uniq_items.sort()\n    return  uniq_items[-2]\nprint(second_largest([1, 2, 3, 4, 4]))\nprint(second_largest([1, 1, 1, 0, 0]))\nprint(second_largest([1, 1, 3, 3, 3]))\nprint(second_largest([1, 2, 3, 4, 5]))\n\n#Write a python function to find the second lowest number in the given list.\ndef second_smallest(numbers):\n    if (len(numbers)<2):\n        return\n    if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n        return\n    dup_items = set()\n    uniq_items = []\n    for x in numbers:\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmp9zrrcoxk.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l + [0] * num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to check whether a given number is perfect or not.\n#According to Wikipedia : In number theory, a perfect number is a positive integer that is equal to the sum of its proper positive divisors, that is, the sum of its positive divisors excluding the number itself (also known as its aliquot sum). Equivalently, a perfect number is a number that is half the sum of all of its positive divisors (including itself).\n#Example : The first perfect number is 6, because 1, 2, and 3 are its proper positive divisors, and 1 + 2 + 3 = 6. Equivalently, the number 6 is equal to half the sum of all its positive divisors: ( 1 + 2 + 3 + 6 ) / 2 = 6. The next perfect number is 28 = 1 + 2 + 4 + 7 + 14. This is followed\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmp8_5jk2k4.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in num_list:\n        if i == 0:\n            l.append(i)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]))\nprint(move_zero([1,2,3]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the median of three values.\ndef median(l):\n    l.sort()\n    if len(l) % 2 == 0:\n        median1 = l[len(l)//2]\n        median2 = l[len(l)//2 - 1]\n        median = (median1 + median2)/2\n    else:\n        median = l[len(l)//2]\n    return median\nprint(median([1,2,3]))\nprint(median([1,2,3,4]))\nprint(median([53, 12, 65, 7, 420, 317, 88]))\n\n#Write a python function to find the maximum length of consecutive 0\u2019s in a given binary string.\ndef max_consecutive_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpmf8_rgiw.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the sum of all the elements of the given list.\ndef sum_list(items):\n    sum_numbers = 0\n    for x in items:\n        sum_numbers += x\n    return sum_numbers\nprint(sum_list([1,2,-8]))\n\n#Write a python function to multiply all the elements of the given list.\ndef multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot\nprint(multiply_list([1,2,-8]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(numbers):\n    if (len(numbers)<2):\n        return\n    if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n        return\n    dup_items = set()\n    uniq\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpn3ulad3_.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 || num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp5tevvdez.js:23:10)\n    at Object.<anonymous> (/tmp/tmp5tevvdez.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 5, 0,\n    0, 0, 0, 2\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\nprint(second_largest([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second smallest number from the given list of numbers.\ndef second_smallest(\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpocf2148o.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpujic1k1f.js:21:10)\n    at Object.<anonymous> (/tmp/tmpujic1k1f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2, 3, 4, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l + [0] * num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpj390krll.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the factorial of a number (a non-negative integer).\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n#Write a python function to check whether a number is perfect or not.\ndef is_perfect(n):\n    sum = 0\n    for x in range(1, n):\n        if n % x == 0:\n            sum += x\n    return sum == n\nprint(is_perfect(6))\n\n#Write a python function to check whether a given string is palindrome or not.\ndef isPalindrome(string):\n\tleft_pos = 0\n\tright_pos = len(string) - 1\n\t\n\twhile right_pos >= left_pos:\n\t\tif not string[left_pos] == string[right_pos]:\n\t\t\treturn False\n\t\tleft_pos += 1\n\t\tright_pos -= 1\n\treturn True\nprint(isPalindrome('aza')) \n\n#Write a python function to check whether a given string is pangram or not.\nimport string\ndef ispangram(str1, alphabet=string.ascii_lowercase):  \n    alphaset = set(alphabet)  \n    return alphaset <= set(str1.lower())  \nprint(ispangram(\"The quick brown fox jumps over the lazy dog\"))\n\n#Write a python function to check whether a given string is an anagram or not.\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpbj2x2l93.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    return sum([num **2 for num in n])\nprint(squaresum([1,2,3]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    return sum([num **2 for num in n])\nprint(squaresum([1,2,3]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    return sum([num **2 for num in n])\nprint(squaresum([1,2,3]))\n\n#Write a python function to check whether a given number is perfect or not.\ndef perfect_number(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return True if sum == n and n!=0 else False\nprint(perfect_number(6))\nprint(perfect_number(28))\nprint(perfect_number(496))\nprint(perfect_number(8128))\nprint\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpsrwtq4dt.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to multiply all the numbers in the list.\ndef multiply(numbers):\n    total = 1\n    for x in numbers:\n        total *= x\n    return total\nprint(multiply((8, 2, 3, -1, 7)))\n\n#Write a python function to check whether a given number is perfect or not.\ndef is_perfect(n):\n    sum = 0\n    for x in range(1, n):\n        if n % x == 0:\n            sum += x\n    return sum == n\nprint(is_perfect(6))\nprint(is_perfect(28))\nprint(is_perfect(496))\nprint(is_perfect(8128))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0, 10, 15, 40, -5, 42, 17, 28, 75]))\n\n#Write a python function to calculate the sum of squares of a given list of numbers.\ndef squares(numbers):\n    return sum(x * x for x in numbers)\nprint(squares([1, 2, 3, 4]))\n\n#Write a python function to calculate the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpckoqh6f4.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return(l+[0]*num_list.count(0))\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        sm = sm + (i * i)\n    return sm\nprint(squaresum(3))\nprint(squaresum(5))\n\n#Write a python function to find the sum of cubes of all numbers in a given list.\ndef sum_of_cubes(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i*i)\n    return sum\nprint(sum_of_cubes([1,2,3]))\n\n#Write a python function to find the sum of squares of all even numbers in a given list.\ndef squaresum_even(n) :\n    sm = 0\n    for i in range(2, n+1, 2) :\n        sm = sm + (i * i)\n    return sm\nprint(squaresum_even(3))\nprint(squaresum_even(5))\n\n#Write a python function to find the sum of squares of all odd numbers in a given list.\ndef squaresum_odd(n) :\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpqzxgh9xp.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to remove duplicates from a list.\ndef Remove(duplicate): \n    final_list = [] \n    for num in duplicate: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n      \n# Driver Code \nduplicate = [2, 4, 10, 20, 5, 2, 20, 4] \nprint(Remove(duplicate))\n\n#Write a python function to check whether two lists are identical.\ndef is_identical(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    return True\nprint(is_identical([1,2,3], [1,2,3]))\nprint(is_identical([1,2,3], [1,2,0]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0, 10, 15, 40, -5, 42, 17, 28, 75]))\n\n#Write a python function that takes a positive integer and returns the sum of the cube of all the positive integers smaller than the specified number.\ndef sum_of_cubes\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp1s0d724r.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        sm = sm + (i * i)\n    return sm\nn = 4\nprint(squaresum(n))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        sm = sm + (i * i)\n    return sm\nn = 4\nprint(squaresum(n))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        sm = sm + (i * i)\n    return sm\nn = 4\nprint(squaresum(n))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    sm = 0\n    for i in range(1, n+1) :\n       \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpe1gkcayd.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    count = num_list.count(0)\n    for i in num_list:\n        if i!=0:\n            l.append(i)\n    while(count):\n        l.append(0)\n        count=count-1\n    return(l)\nmove_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4])\n\n#Write a python function to calculate the sum of the digits in a given string.\ndef sum_digits_string(str1):\n    sum_digit = 0\n    for x in str1:\n        if x.isdigit() == True:\n            z = int(x)\n            sum_digit = sum_digit + z\n\n    return sum_digit\nprint(sum_digits_string(\"123abcd45\"))\nprint(sum_digits_string(\"abcd1234\"))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l=data[0]\n    s=data[0]\n    for num in data:\n        if num> l:\n            l=num\n        elif num<s:\n            s=num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function that takes a sequence of numbers and determines whether all the numbers are different from each other.\ndef test_distinct(data):\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False\nprint(test_distinct([1,5,7,9]))\nprint(test_distinct([2,4,5,5,7,9]))\n\n#Write a python function to find the second lowest grade of any student(s) from the given names and grades of each student using lists and lambda.\ndef second_lowest_grade(students):\n    students = sorted(students, key = lambda x: x[1])\n    second_lowest_grade = sorted(list(set([marks for name, marks in students])))[1]\n   \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpe6jj40ha.js:5\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in num_list:\n        if i == 0:\n            l.append(i)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpk9ve1606.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l + [0] * num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(numbers):\n    count = 0\n    n1 = n2 = float('-inf')\n    for x in numbers:\n        count += 1\n        if x > n2:\n            if x >= n1:\n                n1, n2 = x, n1            \n            else:\n                n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpz0ppwp43.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest_num_in_list(list):\n    list.sort()\n    return list[-2]\nprint(second_largest_num_in_list([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second smallest number from the given list of numbers.\ndef second_smallest_num_in_list(list):\n    list.sort()\n    return list[1]\nprint(second_smallest_num_in_list([1, 2, -8, -2, 0]))\n\n#Write a python function to find the nth largest number from the given list of numbers.\ndef nth_largest_num_in_list(list, n):\n    list.sort()\n    return list[-n]\nprint(nth_largest_num_in_list\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpfbgop547.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to remove all the duplicates from the given list.\ndef remove_duplicates(num_list):\n    new_list = []\n    for num in num_list:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\nprint(remove_duplicates([1,2,3,4,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpy7oh76ax.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 || num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp5tevvdez.js:23:10)\n    at Object.<anonymous> (/tmp/tmp5tevvdez.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 5, 0,\n    0, 0, 0, 2\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        sm = sm + (i * i)\n    return sm\nprint(squaresum(3))\nprint(squaresum(5))\n\n#Write a python function to find the sum of all numbers in a given list.\ndef sum(numbers):\n    total = 0\n    for x in numbers:\n        total += x\n    return total\nprint(sum((8, 2, 3, 0, 7)))\n\n#Write a python function to multiply all the numbers in a given list.\ndef multiply(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total  \nprint(multiply((8, 2, 3, -1, 7)))\n\n#Write a python function to calculate the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial :\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp5imydgzs.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n    \n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp9wxry1p2.js:22:10)\n    at Object.<anonymous> (/tmp/tmp9wxry1p2.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2, 3, 4, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l + [0] * num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([0,0,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number in a list.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number in a list.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number in a list.\ndef second_largest(numbers):\n    count = 0\n    n1 = n2 = float('-inf')\n    for x in numbers:\n        count += 1\n        if x > n2:\n            if x >= n1:\n                n1, n2 = x, n1            \n            else:\n                n2 = x\n    return n2 if\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpt9_v2d_6.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in range(len(num_list)):\n        if num_list[i] != 0:\n            l.append(num_list[i])\n    for i in range(num_list.count(0)):\n        l.append(0)\n    return l\n\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\n\nprint(sum_digits(1234))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\n\nprint(product(1234))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\n\nprint(second_largest([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second smallest number from the given list of numbers.\ndef second_smallest(list):\n    list.sort()\n    return list[1]\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpnm373igx.js:4\n    for i in range(len(num_list)):\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) {\n            b.push(num_list[i]);\n        } else {\n            a.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmpeibj0p83.js:21:10)\n    at Object.<anonymous> (/tmp/tmpeibj0p83.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        sm = sm + (i * i)\n    return sm\nprint(squaresum(3))\nprint(squaresum(6))\n\n#Write a python function to find the sum of cubes of all numbers in a given list.\ndef sumCube(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        sm = sm + (i * i * i)\n    return sm\nprint(sumCube(3))\nprint(sumCube(6))\n\n#Write a python function to find the sum of the first n positive integers.\ndef sumN(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        sm = sm + i\n    return sm\nprint(sumN(3))\nprint(sumN(6))\n\n#Write a python function to find the product of the first n positive integers.\ndef product(n) :\n    sm = 1\n    for i in range(1, n+1) :\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpe931npff.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    z = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n        else:\n            z.append(i)\n    l.extend(z)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    max = data[0]\n    min = data[0]\n    for i in data:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return max,min\nprint(max_min([0,10,-2,30,5,91]))\n\n#Write a python function to find the sum of all numbers in a list.\ndef sum_list(num_list):\n    sum = 0\n    for i in num_list:\n        sum += i\n    return sum\nprint(sum_list([1,2,3,4,5,6,7,8,9]))\n\n#Write a python function to multiply all the numbers in a list.\ndef multiply_list(num_list):\n    mul = 1\n    for i in num_list:\n        mul *= i\n    return mul\nprint(multiply_list([1,2,3,4,5,6,7,8,9]))\n\n#Write a python function to check whether a number is in a given range.\ndef check_range(num):\n    if num in range(1,10):\n        print(f\"{num} is in the range\")\n    else:\n        print(f\"{num} is not in the range\")\ncheck_range(5)\n\n#Write a python function to calculate the factorial of a number.\ndef factorial(num):\n    fact = 1\n    for i in range(1,num\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpbmow_gi8.js:5\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) {\n            b.push(num_list[i]);\n        } else {\n            a.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\nmove_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4])\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmphoy_kl44.js:23:10)\n    at Object.<anonymous> (/tmp/tmphoy_kl44.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 || num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmpw8mi6l2w.js:22:10)\n    at Object.<anonymous> (/tmp/tmpw8mi6l2w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 5, 0,\n    0, 0, 0, 2\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpmnpr6c7v.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 || num_list[i] === 0.0 ) {\n            b.push(num_list[i]);\n        } else {\n            a.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp13xzgkzj.js:21:10)\n    at Object.<anonymous> (/tmp/tmp13xzgkzj.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the average of a given list of numbers.\ndef average(data):\n    n = len(data)\n    if n<=0:\n        return 0\n    else:\n        sum = 0\n        for i in data:\n            sum += i\n        return sum/n\nprint(average([1,2,3,4,5]))\n\n#Write a python function to find the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n#Write a python function to find the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp10yarpfl.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product_digits(n):\n    s = 1\n    while n:\n        s *= n % 10\n        n //= 10\n    return s\nprint(product_digits(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\nprint(second_largest([1, 2, -8, 0]))\n\n#Write a python function to find the second smallest number from the given list of numbers.\ndef second_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp1gx6u4nd.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(num_list.count(0)):\n        l.append(0)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to find the sum of squares of a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to check whether a given list is empty or not.\ndef is_empty(any_structure):\n    if any_structure:\n        print('Structure is not empty.')\n        return False\n    else:\n        print('Structure is empty.')\n        return True\nprint(is_empty([]))\nprint(is_empty([1,2,3\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpwqg_0jbm.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    count = num_list.count(0)\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(0,count):\n        l.append(0)\n    return(l)\n\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\n\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\n\nprint(second_largest([1,2,3,4,5]))\n\n#Write a python function to find the second\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpvog5487z.js:5\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    count = num_list.count(0)\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(0,count):\n        l.append(0)\n    return(l)\n\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,3]))\nprint(move_zero([0,0,0]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\n\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function that takes a sequence of numbers and determines if all the numbers are different from each other.\ndef diff(data):\n    for i in range(len(data)):\n        for j in range(len(data)):\n            if i != j:\n                if data[i] == data[j]:\n                    return False\n    return True\n\nprint(diff([1,2,3,4,5]))\nprint(diff([1,2,3,2,5]))\n\n#Write a python function to find the second lowest and second greatest numbers from a sequence of numbers.\ndef second_max_min(data):\n    l = data[0]\n    s = data[0]\n    sl = data[0]\n    ss = data[0]\n    for num in data:\n        if num> l:\n            sl = s\n            s = l\n            l = num\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmphvaaossw.js:5\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i]!=0){\n            l.push(num_list[i])\n        }\n    }\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i]==0){\n            l.push(num_list[i])\n        }\n    }\n    return l\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    max = data[0]\n    min = data[0]\n    for i in data:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return max, min\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef sum_sq(num_list):\n    sum = 0\n    for i in num_list:\n        sum += i**2\n    return sum\nprint(sum_sq([0,1,2,3,4]))\nprint(sum_sq([1,2,3,4]))\n\n#Write a python function to check whether a given number is perfect or not.\n#According to Wikipedia : In number theory, a perfect number is a positive integer that is equal to the sum of its proper positive divisors, that is, the sum of its positive divisors excluding the number itself (also known as its aliquot sum). Equivalently, a perfect number is a number that is half the sum of all of its positive divisors (including itself).\n#Example : The first perfect number is 6, because 1, 2, and 3 are its proper positive divisors, and 1 + 2 + 3 = 6. Equivalently, the number 6 is equal to half the sum of all its positive divisors: ( 1 + 2 + 3 + 6 ) / 2 = 6. The next perfect number is 28 = 1 + 2 + 4 + 7 + 14. This is followed by the perfect numbers\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpjqe7x1bm.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(num_list.count(0)):\n        l.append(0)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,10,4,1,56,2,1,3,56,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of a given list of numbers.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\nprint(squaresum([11,12,13,14,15]))\n\n#Write a python function to find the sum of all the numbers in a list.\ndef sum(numbers):\n    total = 0\n    for x in numbers:\n        total += x\n    return total\nprint(sum((8, 2, 3, 0, 7)))\n\n#Write a python function to multiply all the numbers in a list.\ndef multiply(numbers):\n    total = 1\n    for x in numbers:\n        total *= x\n    return total\nprint(multiply((8, 2, 3, -1, 7)))\n\n#Write a python\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpmiwk1xz8.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the sum of all the elements of the given list.\ndef sum_list(items):\n    sum_numbers = 0\n    for x in items:\n        sum_numbers += x\n    return sum_numbers\nprint(sum_list([1,2,-8]))\n\n#Write a python function to multiply all the elements of the given list.\ndef multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot\nprint(multiply_list([1,2,-8]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(numbers):\n    if (len(numbers)<2):\n        return\n    if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n        return\n    dup_items = set()\n    uniq\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpn3ulad3_.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squares(data):\n    sum = 0\n    for i in data:\n        sum = sum + (i*i)\n    return sum\nprint(squares([1,2,3,4]))\nprint(squares([0,3,4,5]))\n\n#Write a python function to find the sum of all numbers in a given list.\ndef sum(data):\n    sum = 0\n    for i in data:\n        sum = sum + i\n    return sum\nprint(sum([1,2,3,4]))\nprint(sum([0,3,4,5]))\n\n#Write a python function to multiply all numbers in a given list.\ndef multiply(data):\n    mul = 1\n    for i in data:\n        mul = mul * i\n    return mul\nprint(multiply([1,2,3,4]))\nprint(multiply([0,3,4,5]))\n\n#Write a python function to check whether a given number is perfect or not.\ndef perfect(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i ==\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp5vcaeayw.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) {\n            b.push(num_list[i]);\n        } else {\n            a.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmpeibj0p83.js:21:10)\n    at Object.<anonymous> (/tmp/tmpeibj0p83.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpujic1k1f.js:21:10)\n    at Object.<anonymous> (/tmp/tmpujic1k1f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2, 3, 4, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a Python program to compute the product of a list of integers (without using for loop).\nfrom functools import reduce\ndef product(fracs):\n    t = reduce(lambda x, y : x * y, fracs)\n    return t.numerator, t.denominator\nprint(product([1,2,3,4]))\n\n#Write a Python program to remove duplicates from a list.\na = [10,20,30,20,10,50,60,40,80,50,40]\n\ndup_items = set()\nuniq_items = []\nfor x in a:\n    if x not in dup_items:\n        uniq_items.append(x)\n        dup_items.add(x)\n\nprint(dup_items)\n\n#Write a Python program to get the difference between the two lists.\nlist1 = [1, 2, 3, 4]\nlist2 = [1, 2]\nprint(list(set(list1) - set(list2)))\n\n#Write a Python program to generate all sublists of a list.\ndef sub_lists(my_list):\n    subs = [[]]\n    for i in range(len(my_list)):\n        n = i+1\n        while n <= len(my_list):\n            sub = my_list[i:n]\n            subs.append(sub)\n            n += 1\n    return subs\n\nprint(sub_lists([1,2,3,4]))\n\n#Write a Python program to generate all permutations of a list in Python.\nimport itertools\nprint(list(itertools\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpaw8pu9kn.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to check whether a given number is a perfect number or not.\ndef is_perfect(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum == n\nprint(is_perfect(6))\n\n#Write a python function to check whether a given number is a Armstrong number or not.\ndef is_armstrong(n):\n    sum = 0  \n    temp = n  \n    while temp > 0:  \n        digit = temp % 10  \n        sum += digit ** 3  \n        temp //= 10  \n    if n == sum:  \n        return True\n    else:  \n        return False\nprint(is_armstrong(153))\n\n#Write a python function to check whether a given number is a palindrome or not.\ndef is_palindrome(n):\n    temp = n\n    rev = 0\n    while temp != 0:\n        rev = (rev * 10) + (temp % 10)\n        temp = temp // 10\n    if n == rev:\n        return True\n    else:\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpinaa1q8a.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n#Write a python function to check whether a given number is a perfect number or not.\ndef is_perfect(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum == n\nprint(is_perfect(6))\n\n#Write a python function to check whether a given number is an armstrong number or not.\ndef is_armstrong(num):\n    order = len(str(num))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if num == sum:\n        return True\n    else:\n        return False\nprint(is_armstrong(153))\n\n#Write a python function to check whether a given number is a palindrome or not.\ndef is_palindrome(n):\n    rev = 0    \n    i = n\n    while i > 0:\n        rev = rev * 10 + i\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpp30riadk.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the median of three values.\ndef median(lst):\n    lst.sort()\n    if len(lst) % 2 == 0:\n        return (lst[int(len(lst)/2)] + lst[int(len(lst)/2)-1])/2\n    else:\n        return lst[int(len(lst)/2)]\nprint(median([1,2,3,4,5]))\nprint(median([1,2,3,4,5,6]))\n\n#Write a python function to find the factorial of a number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n#Write a python\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpdsb8vjf6.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(numbers):\n    count = 0\n    n1 = n2 = float('-inf')\n    for x in numbers:\n        count += 1\n        if x > n2:\n            if x >= n1:\n                n1, n2 = x, n1            \n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpjeeqgzol.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 || num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmpypdaxzsp.js:21:10)\n    at Object.<anonymous> (/tmp/tmpypdaxzsp.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 5, 0,\n    0, 0, 0, 2\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    count = num_list.count(0)\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(0,count):\n        l.append(0)\n    return(l)\n\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,3,4,5,6,7,8,9,10]))\nprint(move_zero([0,0,0,0,0,0,0,0,0,0]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\n\nprint(sum_digits(123))\nprint(sum_digits(34567))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product_digits(n):\n    product = 1\n    while n:\n        product *= n % 10\n        n //= 10\n    return product\n\nprint(product_digits(123))\nprint(product_digits(34567))\n\n#Write a python function to check whether a given number is perfect or not.\ndef perfect_number(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum == n\n\nprint(perfect_number(6))\nprint(perfect_number(28))\nprint(perfect_number(496))\nprint(perfect_number(8128))\nprint(perfect_number(33550336))\n\n#Write a python function to check whether a given number is Adam number or not.\ndef adam_number(n):\n    n2 = int(str(n**2)[::-1])\n    n3 = int(str(n)[::-1])**2\n    return n == n2 + n3\n\nprint(adam_number(12))\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpfxex8yj_.js:5\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpkc5_6asc.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpmnpr6c7v.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to check whether a number is in a given range.\ndef test_range(n):\n    if n in range(3,9):\n        print( \" %s is in the range\"%str(n))\n    else :\n        print(\"The number is outside the given range.\")\ntest_range(5)\n\n#Write a python function to calculate the sum of squares of a given list of numbers.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i * i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to check whether a given string is a Palindrome or Anagram or None of them.\n#Display the message accordingly to the user.\ndef isPalindrome(str):\n    for i in range(0, int(len(str)/2)):\n        if str[i] != str[len(str)-i-1]:\n            return False\n    return True\n \ns = \"malayalam\"\nans = isPalindrome(s)\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpykb2ngql.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        sm = sm + (i * i)\n    return sm\nprint(squaresum(3))\nprint(squaresum(5))\n\n#Write a python function to find the sum of cubes of all numbers in a given list.\ndef sumcube(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        sm = sm + (i * i * i)\n    return sm\nprint(sumcube(3))\nprint(sumcube(5))\n\n#Write a python function to find the sum of squares of even numbers in a given list.\ndef squaresum_even(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        if i % 2 == 0 :\n            sm = sm + (i * i)\n    return sm\nprint(squaresum_even(3))\nprint(squaresum_even(5))\n\n#Write a python function to find the sum of squares of odd numbers in a given list\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpkdvaf_11.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(num_list.count(0)):\n        l.append(0)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,10,4,1,56,2,1,3,56,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to check whether a given string is a Palindrome or not.\ndef isPalindrome(string):\n\tleft_pos = 0\n\tright_pos = len(string) - 1\n\t\n\twhile right_pos >= left_pos:\n\t\tif not string[left_pos] == string[right_pos]:\n\t\t\treturn False\n\t\tleft_pos += 1\n\t\tright_pos -= 1\n\treturn True\nprint(isPalindrome('aza')) \n\n#Write a python function to check whether a given string is a pangram or not.\nimport string\ndef ispangram\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmprewtqgha.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l + [0] * num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the median of a given list of integers.\ndef median(data):\n    data.sort()\n    if len(data) % 2 == 0:\n        n = len(data)\n        a = data[n//2]\n        b = data[n//2 - 1]\n        median = (a + b)/2\n    else:\n        median = data[len(data)//2]\n    return median\nprint(median([2,4,5,9]))\nprint(median([2,4,5,9,6]))\n\n#Write a python function to find the maximum 3 numbers from a given list of integers.\ndef max_of_three(num1, num2, num3):\n    if (num1 >= num2) and (num1 >= num3):\n        largest = num1\n    elif (num2 >= num1) and (num2 >= num3):\n        largest =\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp8gtfh9af.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(num_list.count(0)):\n        l.append(0)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,10,4,1,56,2,1,3,56,4]))\n\n#Write a python function to calculate the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n#Write a python function to check whether a given number is prime or not.\ndef test_prime(n):\n    if (n==1):\n        return False\n    elif (n==2):\n        return True;\n    else:\n        for x in range(2,n):\n            if(n % x==0):\n                return False\n        return True             \nprint(test_prime(9))\n\n#Write a python function to print the even numbers from a given list.\ndef is_even_num(l):\n    enum = []\n    for n in l:\n        if n % 2 == 0:\n            enum.append(n)\n    return enum\nprint(is_even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(is_even_num([1, 3, 5, 7, 9]))\n\n#Write a python function to print the odd numbers from a given list.\ndef is_odd_num(l):\n    enum = []\n    for n in l:\n        if n % 2 != 0:\n            enum.append(n)\n    return enum\nprint\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmphvdyvvj0.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpx5ts6wiw.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    count = num_list.count(0)\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(0,count):\n        l.append(0)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\nprint(sum_digits(1234))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\nprint(second_largest([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second smallest\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpale18pb7.js:5\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = [];\n    for(var i=0; i<num_list.length; i++){\n        if (num_list[i]!=0){\n            l.push(num_list[i]);\n        }\n    }\n    for(var i=0; i<num_list.length; i++){\n        if (num_list[i]==0){\n            l.push(num_list[i]);\n        }\n    }\n    return l;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to find the sum of cubes of all numbers in a given list.\ndef sumcube(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i*i)\n    return sum\nprint(sumcube([1,2,3,4,5]))\nprint(sumcube([6,7,8,9,10]))\n\n#Write a python function to find the sum of all numbers in a given list.\ndef sum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + i\n    return sum\nprint(sum([1,2,3,4,5]))\nprint(sum([6,7,8,9,10]))\n\n#Write a python function to find the product of all numbers in a\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmplphpbbiq.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in num_list:\n        if i == 0:\n            l.append(i)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp1gqc0b9o.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\nprint(second_largest([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second smallest number from the given list of numbers.\ndef second_smallest(\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpocf2148o.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l + [0] * num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpj390krll.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 || num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmpypdaxzsp.js:21:10)\n    at Object.<anonymous> (/tmp/tmpypdaxzsp.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 5, 0,\n    0, 0, 0, 2\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l + [0] * num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the median of a given list of integers.\ndef median(data):\n    data.sort()\n    if len(data) % 2 == 0:\n        n = len(data)\n        a = data[n//2]\n        b = data[n//2 - 1]\n        median = (a + b)/2\n    else:\n        median = data[len(data)//2]\n    return median\nprint(median([0,1,2,10,4,1,56,2,1,3,56,4]))\n\n#Write a python function to find the average of a given list of integers.\ndef average(data):\n    n = len(data)\n    if n == 0:\n        return 0\n    else:\n        return sum(data)/n\nprint(average([0,1,2,10,4,1,56,2,1,3,56,4]))\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpemig3b5g.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to check whether a given number is perfect or not.\ndef perfect_number(n):\n    sum = 0\n    for x in range(1, n):\n        if n % x == 0:\n            sum += x\n    return sum == n\nprint(perfect_number(6))\nprint(perfect_number(28))\n\n#Write a python function to calculate the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n#Write a python function to check whether a given number is prime or not.\ndef test_prime(n):\n    if (n==1):\n        return False\n    elif (n==2):\n        return True;\n    else:\n        for x in range(2,n):\n            if(n % x==0):\n                return False\n        return True             \nprint(test_prime(9))\n\n#Write a python function to check whether a given number is Adam number or not.\ndef reverse(s): \n    return s[::-1] \n  \ndef isPalindrome(s): \n    rev = reverse(s) \n    if (s\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpaladhdse.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    count = num_list.count(0)\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(0,count):\n        l.append(0)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the median of a given list of integers.\ndef median(data):\n    data.sort()\n    if len(data) % 2 == 0:\n        median1 = data[len(data)//2]\n        median2 = data[len(data)//2 - 1]\n        median = (median1 + median2)/2\n    else:\n        median = data[len(data)//2]\n    return median\nprint(median([0,1,2,10,4,1,56,2,1,3,56,4]))\n\n#Write a python function to find the maximum number from a list of numbers.\ndef max_num_in_list(list):\n    max = list[0]\n    for a in list:\n        if a > max:\n            max = a\n    return max\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpblrp1g2t.js:5\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l=data[0]\n    s=data[0]\n    for num in data:\n        if num> l:\n            l=num\n        elif num<s:\n            s=num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        sm = sm + (i * i)\n    return sm\nn = 4\nprint(squaresum(n))\n\n#Write a python function to find the sum of cubes of all numbers in a given list.\ndef sum_of_cubes(n):\n    sum = 0\n    for i in n:\n        sum = sum + (i*i*i)\n    return sum\nn = [1, 2, 3]\nprint(sum_of_cubes(n))\n\n#Write a python function to find the sum of squares of all even numbers in a given list.\ndef squaresum(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        if i%2==0:\n            sm = sm + (i * i)\n    return sm\nn = 4\nprint(squaresum(n))\n\n#Write a python function to find the sum of squares of all odd numbers in a given list.\ndef squaresum(n) :\n    sm\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpn9u0bhle.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 || num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp5tevvdez.js:23:10)\n    at Object.<anonymous> (/tmp/tmp5tevvdez.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 5, 0,\n    0, 0, 0, 2\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) {\n            b.push(num_list[i]);\n        } else {\n            a.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp5tvcn_f4.js:20:10)\n    at Object.<anonymous> (/tmp/tmp5tvcn_f4.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to check whether a given number is perfect or not.\ndef perfect(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum == n\nprint(perfect(6))\nprint(perfect(28))\n\n#Write a python function to check whether a given number is Adam number or not.\ndef isAdam(num):\n    n = num\n    rev = 0\n    while n != 0:\n        rev = rev * 10 + n % 10\n        n = n // 10\n    sq = num * num\n    sq_rev = rev * rev\n    n = sq_rev\n    rev = 0\n    while n != 0:\n        rev = rev * 10 + n % 10\n        n = n // 10\n    return sq == rev\nprint(isAdam(12))\nprint(isAdam(18))\n\n#Write a python function to check whether a given number is Armstrong number or not.\ndef isArmstrong(num):\n    n = num\n    order = len(str(num))\n    sum = 0\n    while n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpu8fi42se.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the sum of all the elements of the given list.\ndef sum_list(items):\n    sum_numbers = 0\n    for x in items:\n        sum_numbers += x\n    return sum_numbers\nprint(sum_list([1,2,-8]))\n\n#Write a python function to multiply all the elements of the given list.\ndef multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot\nprint(multiply_list([1,2,-8]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(numbers):\n    count = 0\n    n1 = float('-inf')\n    n2 = float('-inf')\n    for x in numbers:\n        count += 1\n        if x > n2:\n            if x >=\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpc790scjq.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) {\n            b.push(num_list[i]);\n        } else {\n            a.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmpeibj0p83.js:21:10)\n    at Object.<anonymous> (/tmp/tmpeibj0p83.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a Python program to compute the product of a list of integers (without using for loop).\nfrom functools import reduce\ndef product(fracs):\n    t = reduce(lambda x, y : x * y, fracs)\n    return t.numerator, t.denominator\n\n#Write a Python program to remove duplicates from a list.\na = [10,20,30,20,10,50,60,40,80,50,40]\n\ndup_items = set()\nuniq_items = []\nfor x in a:\n    if x not in dup_items:\n        uniq_items.append(x)\n        dup_items.add(x)\n\nprint(dup_items)\n\n#Write a Python program to get the difference between the two lists.\nlist1 = [1, 2, 3, 4]\nlist2 = [1, 2]\nprint(list(set(list1) - set(list2)))\n\n#Write a Python program access the index of a list.\nnum = [1, 2, 3, 4]\nprint(num.index(3))\n\n#Write a Python program to flatten a shallow list.\nimport itertools\noriginal_list = [[2,4,3],[1,5,6], [9], [7,9,0]]\nnew_merged_list = list(itertools.chain(*original_list))\nprint(new_merged_list)\n\n#Write a Python program to append a list to the second list.\nlist1 = [1, 2, 3, 0]\nlist2 = ['Red', 'Green', 'Black']\nfinal_list = list1\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp_qqfrs3r.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function that takes a positive integer and returns the sum of the cube of all the positive integers smaller than the specified number.\ndef sum_of_cubes(n):\n    sum = 0\n    for i in range(n):\n        sum = sum + (i**3)\n    return sum\nprint(sum_of_cubes(3))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpz756gq_b.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\nprint(second_largest([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second smallest number from the given list of numbers.\ndef second_smallest(\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpocf2148o.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n#Write a python function to check whether a given number is perfect or not.\ndef is_perfect(n):\n    sum = 0\n    for x in range(1, n):\n        if n % x == 0:\n            sum += x\n    return sum == n\nprint(is_perfect(6))\n\n#Write a python function to check whether a given number is prime or not.\ndef is_prime(n):\n    if (n==1):\n        return False\n    elif (n==2):\n        return True;\n    else:\n        for x in range(2,n):\n            if(n % x==0):\n                return False\n        return True             \nprint(is_prime(9))\n\n#Write a python function to check whether a given number is armstrong number or not.\ndef is_armstrong(num):\n    sum = 0  \n    temp = num  \n    while temp > 0:  \n       digit = temp % 10  \n       sum += digit ** 3  \n       temp //= 10  \n    if num ==\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp_ighi_qv.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    z = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n        else:\n            z.append(i)\n    l.extend(z)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,10,4,1,56,2,1,3,56,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\nprint(squaresum([11,12,13,14,15]))\n\n#Write a python function to check whether a given number is perfect or not.\ndef perfect_number(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum = sum + i\n    return sum == n\nprint(perfect_number(6))\nprint(perfect_number(28))\nprint(perfect_number(496))\nprint(perfect_number(8128))\n\n#Write a python function to print all the perfect numbers between the given interval.\ndef perfect_number(n):\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpqc19fxby.js:5\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\nprint(second_largest([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second smallest number from the given list of numbers.\ndef second_smallest(list):\n    list.sort()\n    return list[1]\nprint(second_smallest([1, 2, -8, -2, 0]))\n\n#Write a python function to find the sum of all the elements of the given list.\ndef sum(list):\n    total = 0\n    for i in list:\n        total += i\n    return total\nprint(sum([1, 2, -8, -2, 0]))\n\n#Write a python function to multiply all the elements of the given list.\ndef multiply(list):\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpfaynfysy.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to check whether a given string is a Palindrome or not.\ndef isPalindrome(string):\n    left_pos = 0\n    right_pos = len(string) - 1\n    while right_pos >= left_pos:\n        if not string[left_pos] == string[right_pos]:\n            return False\n        left_pos += 1\n        right_pos -= 1\n        return True\nprint(isPalindrome('aza')) \n\n#Write a python function to check whether a given number is a Perfect number or not.\ndef isPerfect(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum = sum + i\n    return sum == n\nprint(isPerfect(6))\nprint(isPerfect(28\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp5aldgbpz.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return(l+[0]*num_list.count(0))\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the square of a given number.\ndef square(n):\n    return n**2\nprint(square(10))\n\n#Write a python function to calculate the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n#Write a python function to check whether a given number is a perfect number or not.\ndef perfect_number(n):\n    sum = 0\n    for x in range(1, n):\n        if n % x == 0:\n            sum += x\n    return sum == n\nprint(perfect_number(6))\nprint(perfect_number(28))\n\n#Write a python function to calculate the power of a given number.\ndef power(base,exp):\n    if(exp==1):\n        return(base)\n    if(exp!=1):\n        return(base*power(base,exp-1))\nbase=int(input(\"Enter base: \"))\nexp=int(input(\"Enter exponential value: \"))\nprint(\"Result:\",power(base,exp))\n\n#Write a python function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1))\n    \nprint(harmonic_sum(7))\nprint(harmonic_sum(4))\n\n#Write a python function to calculate the geometric sum of\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpyvgic02u.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\nprint(second_largest([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second smallest number from the given list of numbers.\ndef second_smallest(\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpocf2148o.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            l.push(num_list[i])\n        }\n    }\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]==0){\n            l.push(num_list[i])\n        }\n    }\n    return l\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum difference between the successive elements in a given list.\ndef max_diff(num):\n    return max(num) - min(num)\nprint(max_diff([1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the sum of all the elements of the given list.\ndef sum_list(num):\n    return sum(num)\nprint(sum_list([1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to multiply all the elements of the given list.\ndef multiply_list(num):\n    total = 1\n    for x in num:\n        total *= x\n    return total\nprint(multiply_list([1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the second largest number in the given list.\ndef second_largest(num):\n    num.sort()\n    return num[-2]\nprint(second_largest([1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the second smallest number in the given list.\ndef second_smallest(num):\n    num.sort()\n    return num[1]\nprint(second_smallest([1,2,10,4,1,0,56,2\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpjxrl7yku.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) {\n            b.push(num_list[i]);\n        } else {\n            a.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmpil265x4h.js:21:10)\n    at Object.<anonymous> (/tmp/tmpil265x4h.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in num_list:\n        if i == 0:\n            l.append(i)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([0,0,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,3]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    max = data[0]\n    min = data[0]\n    for i in data:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return max,min\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef sum_sq(data):\n    sum = 0\n    for i in data:\n        sum = sum + (i**2)\n    return sum\nprint(sum_sq([1,2,3,4]))\n\n#Write a python function to find the sum of squares of all even numbers in a given list.\ndef sum_sq_even(data):\n    sum = 0\n    for i in data:\n        if i%2 == 0:\n            sum = sum + (i**2)\n    return sum\nprint(sum_sq_even([1,2,3,4,5]))\n\n#Write a python function to find the product of all numbers in a given list.\ndef prod(data):\n    prod = 1\n    for i in data:\n        prod = prod * i\n    return prod\nprint(prod([1,2,3,4]))\n\n#Write a python function to check whether a given number is perfect or not.\ndef perfect(n):\n    sum = 0\n    for i in range\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpool4ib33.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to check whether a given number is perfect or not.\ndef perfect_number(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return True if sum == n and n!=0 else False\nprint(perfect_number(6))\nprint(perfect_number(28))\nprint(perfect_number(496))\nprint(perfect_number(8128))\nprint(perfect_number(33550336))\n\n#Write a python function to find the next perfect square for a given number.\ndef next_perfect_square(n):\n    i = 1;\n    while True:\n        if i*i >= n:\n            return i*i\n        i += 1\nprint(next_perfect_square(5))\nprint(next_perfect_square(12))\nprint(next_perfect_square(15))\n\n#Write a python function to find the maximum number from a list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpm3r1av2n.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\nprint(second_largest([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second smallest number from the given list of numbers.\ndef second_smallest(list):\n    list.\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpdrk7szxw.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 || num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp5tevvdez.js:23:10)\n    at Object.<anonymous> (/tmp/tmp5tevvdez.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 5, 0,\n    0, 0, 0, 2\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to find the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to find the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to find the sum of the digits of a given number\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpaolwai98.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpx5ts6wiw.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(num_list.count(0)):\n        l.append(0)\n    return(l)\n\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    max = data[0]\n    min = data[0]\n    for i in data:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return max,min\n\nprint(max_min([0,10,-2,30,5,6]))\nprint(max_min([24,52,0,-16]))\nprint(max_min([1]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef sum_sq(data):\n    sum = 0\n    for i in data:\n        sum += i**2\n    return sum\n\nprint(sum_sq([1,2,3,4]))\nprint(sum_sq([0,3,4,5]))\n\n#Write a python function to check whether a given number is perfect or not.\ndef perfect(n):\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            sum += i\n    if sum == n:\n        return True\n    else:\n        return False\n\nprint(perfect(6))\nprint(perfect(28))\nprint(perfect(496))\nprint(perfect(12))\n\n#Write a python function to check whether a given number is Adam number or\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp_g4xht_g.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return(l+[0]*num_list.count(0))\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(numbers):\n    count = 0\n    n1 = n2 = float('-inf')\n    for x in numbers:\n        count += 1\n        if x > n2:\n            if x >= n1:\n                n1, n2 = x, n1            \n            else:\n               \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp8ah1539e.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([0,0,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,3]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(numbers):\n    count = 0\n    n1 = n2 = float('-inf')\n    for x in numbers:\n        count += 1\n        if x > n2:\n            if x >= n1:\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpeqqwju0v.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to find the sum of squares of all even numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        if i%2 == 0:\n            sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to find the product of all numbers in a given list.\ndef product(nums):\n    p = 1\n    for i in nums:\n        p = p * i\n    return p\nprint(product([1,2,3,4]))\n\n#Write a python function to find the product of all even numbers in a given\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp232078jt.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\nprint(second_largest([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second smallest number from the given list of numbers.\ndef second_smallest(\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpocf2148o.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) {\n            b.push(num_list[i]);\n        } else {\n            a.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp5tvcn_f4.js:20:10)\n    at Object.<anonymous> (/tmp/tmp5tvcn_f4.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            l.push(num_list[i])\n        }\n    }\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]==0){\n            l.push(num_list[i])\n        }\n    }\n    return l\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) {\n            b.push(num_list[i]);\n        } else {\n            a.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp5tvcn_f4.js:20:10)\n    at Object.<anonymous> (/tmp/tmp5tvcn_f4.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l + [0] * num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpj390krll.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the square of a given number.\ndef square(n):\n    return n*n\nprint(square(5))\n\n#Write a python function to calculate the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n#Write a python function to check whether a given number is prime or not.\ndef test_prime(n):\n    if (n==1):\n        return False\n    elif (n==2):\n        return True;\n    else:\n        for x in range(2,n):\n            if(n % x==0):\n                return False\n        return True             \nprint(test_prime(9))\n\n#Write a python function to check whether a given number is Adam number or not.\ndef isAdam(num):\n    n = num\n    rev = 0\n    while n != 0:\n        rev = rev * 10 + n % 10\n        n = n // 10\n    if num ** 2 == rev ** 2:\n        return True\n    else:\n        return False\nprint(isAdam(12))\nprint(isAdam(13))\n\n#Write a python function to print the given number of diagonal lines of stars.\ndef diagonalStar(n):\n    for i in range(0, n):\n        for j in range(0, i + 1):\n            print(\"* \", end=\"\")\n        print(\"\\r\")\nn = 5\ndiagonal\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpd5xh42cz.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    count = num_list.count(0)\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(0,count):\n        l.append(0)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squares(data):\n    sum = 0\n    for i in data:\n        sum = sum + (i*i)\n    return sum\nprint(squares([1,2,3,4]))\nprint(squares([0,3,4,5]))\n\n#Write a python function to check whether a given string is palindrome or not.\ndef isPalindrome(s):\n    return s == s[::-1]\nprint(isPalindrome('aza'))\nprint(isPalindrome('azab'))\n\n#Write a python function to print the given string in the format specified in the sample output.\ndef print_full_name(a, b):\n    print(\"Hello \"+a+\" \"+b+\"! You just delved into python.\")\nprint_full_name('Guido', 'Rossum')\n\n#Write a python function to check whether a given number is perfect or not.\ndef is_perfect(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp1pjxo8u4.js:5\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\nprint(second_largest([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second smallest number from the given list of numbers.\ndef second_smallest(list):\n    list.\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpdrk7szxw.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to check whether a given string is a palindrome or not.\ndef isPalindrome(string):\n    left_pos = 0\n    right_pos = len(string) - 1\n    while right_pos >= left_pos:\n        if not string[left_pos] == string[right_pos]:\n            return False\n        left_pos += 1\n        right_pos -= 1\n        return\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp_3uub4fh.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return(l+[0]*num_list.count(0))\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to check whether a given string is a Palindrome or not.\ndef isPalindrome(string):\n    left_pos = 0\n    right_pos = len(string) - 1\n    while right_pos >= left_pos:\n        if not string[left_pos] == string[right_pos]:\n            return False\n        left_pos += 1\n        right_pos -= 1\n       \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpz7j446an.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    count = num_list.count(0)\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(0,count):\n        l.append(0)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i*i\n    return sum\nprint(squaresum(3))\n\n#Write a python function to check whether a given number is a perfect number or not.\ndef perfect_number(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum == n\nprint(perfect_number(6))\nprint(perfect_number(28))\n\n#Write a python function to print all the prime numbers in a given interval.\ndef prime_number(l,h):\n    for num in range(l, h + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)\nprime_number(1,10)\n\n#Write a python function to check whether a given string is a palindrome or not.\ndef is_pal\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp3ia6jw17.js:5\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l + [0] * num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpj390krll.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squares(data):\n    squares = 0\n    for num in data:\n        squares += num ** 2\n    return squares\nprint(squares([1,2,3,4]))\nprint(squares([0,3,4,5]))\n\n#Write a python function to calculate the average of numbers in a given list.\ndef avg(data):\n    sum = 0\n    for num in data:\n        sum += num\n    return sum/len(data)\nprint(avg([1,2,3,4,5]))\n\n#Write a python function to calculate the median of numbers in a given list.\ndef median(data):\n    data.sort()\n    if len(data) % 2 == 0:\n        median1 = data[len(data)//2]\n        median2 = data[len(data)//2 - 1]\n        median = (median1 + median2)/2\n    else:\n        median = data[len(data)//2]\n    return median\nprint(median([1,2,3,4,5]))\nprint(median([1,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpyhg8ftta.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to calculate the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n#Write a python function to check whether a given number is a perfect number or not.\ndef perfect_number(n):\n    sum = 0\n    for x in range(1, n):\n        if n % x == 0:\n            sum += x\n    return sum == n\nprint(perfect_number(6))\nprint(perfect_number(28))\n\n#Write a python function to check whether a given number is an armstrong number or not.\ndef is_armstrong(num):\n    order = len(str(num))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    if num == sum:\n        return True\n    else:\n        return False\nprint(is_\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp6ngr2oux.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in num_list:\n        if i == 0:\n            l.append(i)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp1gqc0b9o.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits in a given string.\ndef sum_digits_string(str1):\n    sum_digit = 0\n    for x in str1:\n        if x.isdigit() == True:\n            z = int(x)\n            sum_digit = sum_digit + z\n\n    return sum_digit\n     \nprint(sum_digits_string(\"123abcd45\"))\nprint(sum_digits_string(\"abcd1234\"))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function that takes a list of words and returns the length of the longest one.\ndef find_longest_word(words_list):\n    word_len = []\n    for n in words_list:\n        word_len.append((len(n), n))\n    word_len.sort()\n    return word_len[-1][1]\n\nprint(find_longest_word([\"PHP\", \"Exercises\", \"Backend\"]))\n\n#Write a python function to remove duplicates from a list.\na = [10,20,30,20,10,50,60,40,80,50,40]\n\ndef Remove(duplicate): \n    final_list = [] \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp3fnechhv.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var count = 0;\n    var new_list = [];\n    for(var i = 0; i < num_list.length; i++){\n        if(num_list[i] != 0){\n            new_list.push(num_list[i]);\n        }\n        else{\n            count += 1;\n        }\n    }\n    for(var i = 0; i < count; i++){\n        new_list.push(0);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    z = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n        else:\n            z.append(i)\n    l.extend(z)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,10,4,1,56,2,1,3,56,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\nprint(second_largest([1\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp8qpr7oy_.js:5\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6,70]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to check whether a given number is perfect or not.\ndef perfect_number(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum = sum + i\n    return sum == n\nprint(perfect_number(6))\nprint(perfect_number(28))\n\n#Write a python function to print all the prime numbers in a given interval.\ndef print_prime(start, end):\n    for val in range(start, end + 1):\n        if val > 1:\n            for n in range(2, val):\n                if (val % n) == 0:\n                    break\n            else:\n                print(val)\nprint_prime(1, 10)\n\n#Write a python function to check\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpc9318fgx.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to calculate the average of a given list of numbers.\ndef average(data):\n    sum = 0\n    for num in data:\n        sum = sum + num\n    return sum/len(data)\nprint(average([1,2,3,4,5]))\n\n#Write a python function to calculate the median of a given list of numbers.\ndef median(data):\n    data.sort()\n    if len(data)%2 == 0:\n        median1 = data[len(data)//2]\n        median2 = data[len(data)//2 - 1]\n        median = (median1 + median2)/2\n    else:\n        median = data[len(data)//2]\n    return median\nprint(median([1,2,3,4,5]))\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp_4i4_ikz.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return(l+[0]*num_list.count(0))\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits in a given string.\ndef sum_digits_string(str1):\n    sum_digit = 0\n    for x in str1:\n        if x.isdigit() == True:\n            z = int(x)\n            sum_digit = sum_digit + z\n\n    return sum_digit\n     \nprint(sum_digits_string(\"123abcd45\"))\nprint(sum_digits_string(\"abcd1234\"))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    sm = 0\n    for i in range(1, n+1) :\n        sm = sm + (i * i)\n    return sm\nn = 4\nprint(squaresum(n))\n\n#Write a python function to calculate the sum of the digits in a given string.\ndef sum_digits_string(str1):\n    sum_digit = 0\n    for x in str1:\n        if x.isdigit() == True:\n            z = int(x)\n            sum_digit = sum_digit + z\n\n    return sum_digit\n     \nprint(sum_digits\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpefx5l0rb.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l + [0] * num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpj390krll.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to find the sum of cubes of all numbers in a given list.\ndef sumcube(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i*i)\n    return sum\nprint(sumcube([1,2,3,4,5]))\nprint(sumcube([6,7,8,9,10]))\n\n#Write a python function to find the sum of the following series:\n#1 + x + x2 + x3 + \u2026.. + xn\ndef sum_series(n):\n    sum = 0\n    for i in range(n+1):\n        sum = sum + i\n    return sum\nprint(sum_series(6))\n\n#Write a python function to find the sum of the following series:\n#1 + x\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp_agm8bw5.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) {\n            b.push(num_list[i]);\n        } else {\n            a.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp5tvcn_f4.js:20:10)\n    at Object.<anonymous> (/tmp/tmp5tvcn_f4.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 || num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp5tevvdez.js:23:10)\n    at Object.<anonymous> (/tmp/tmp5tevvdez.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 5, 0,\n    0, 0, 0, 2\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a=[];\n    var b=[];\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            a.push(num_list[i]);\n        }\n        else{\n            b.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(numbers):\n    count = 0\n    n1 = n2 = float('-inf')\n    for x in numbers:\n        count += 1\n        if x > n2:\n            if x >= n1:\n                n1, n2 = x, n1            \n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpjeeqgzol.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest_num_in_list(list):\n    list.sort()\n    return list[-2]\nprint(second_largest_num_in_list([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second smallest number from the given list of numbers.\ndef second_smallest_num_in_list(list):\n    list.sort()\n    return list[1]\nprint(second_smallest_num_in_list([1, 2, -8, -2, 0]))\n\n#Write a python function to find the nth largest number from the given list of numbers.\ndef nth_largest_num_in_list(list,n):\n    list.sort()\n    return list[-n]\nprint(nth_largest_num_in_list\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpk0rveus2.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in num_list:\n        if i == 0:\n            l.append(i)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "/tmp/tmpk9ve1606.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return(l+[0]*num_list.count(0))\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmpq2js60xa.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = [];\n    l2 = [];\n    for(var i=0; i<num_list.length; i++){\n        if(num_list[i] == 0){\n            l2.push(num_list[i]);\n        }\n        else{\n            l.push(num_list[i]);\n        }\n    }\n    console.log(l.concat(l2));\n}\nmove_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "[\n  1, 2, 10,  4, 1, 56,\n  2, 1,  3, 56, 4,  0,\n  0, 0,  0,  0\n]\n[ 1, 2, 3, 4, 0, 0 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmp56wv43c1.js:22:10)\n    at Object.<anonymous> (/tmp/tmp56wv43c1.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to check whether a given number is perfect or not.\ndef perfect_number(n):\n    sum = 0\n    for x in range(1, n):\n        if n % x == 0:\n            sum += x\n    return sum == n\nprint(perfect_number(6))\nprint(perfect_number(28))\n\n#Write a python function to check whether a given number is Adam number or not.\ndef reverse(n):\n    rev = 0\n    while n > 0:\n        rev = (10 * rev) + n % 10\n        n //= 10\n    return rev\ndef is_adam_number(n):\n    m = reverse(n * n)\n    return reverse(n) == m\nprint(is_adam_number(12))\nprint(is_adam_number(18))\n\n#Write a python function to check whether a given number is Armstrong number or not.\ndef is_armstrong_number(num):\n    order = len(str(num))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit =\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmph2lv0i2m.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 || num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp5tevvdez.js:23:10)\n    at Object.<anonymous> (/tmp/tmp5tevvdez.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 5, 0,\n    0, 0, 0, 2\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the number of upper case letters and lower case letters in a given string.\ndef up_low(s):\n    d={\"upper\":0, \"lower\":0}\n    for c in s:\n        if c.isupper():\n           d[\"upper\"]+=1\n        elif c.islower():\n           d[\"lower\"]+=1\n        else:\n           pass\n    print(\"Original String : \", s)\n    print(\"No. of Upper case characters : \", d[\"upper\"])\n    print(\"No. of Lower case Characters : \", d[\"lower\"])\n\nup_low('The quick Brown Fox')\n\n#Write a python function to check whether a given number is prime or not.\ndef test_prime(n):\n    if (n==1):\n        return False\n    elif (n==2):\n        return True;\n    else:\n        for x in range(2,n):\n            if(n % x==0):\n                return False\n        return True             \nprint(test_prime(9))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n  l = data[0]\n  s = data[0]\n  for num in data:\n    if num> l:\n      l = num\n    elif num< s:\n        s = num\n  return l,s\nprint(max_min([0, 10, 15, 40, -5, 42, 17, 28, 75]))\n\n#Write a python function to find the sum of squares of a given list of numbers.\ndef squares(nums):\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "/tmp/tmp868vuhqp.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 || num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmpsstizl8g.js:23:10)\n    at Object.<anonymous> (/tmp/tmpsstizl8g.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 5, 0,\n    0, 0, 0, 2\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the median of a given list of integers.\ndef median(data):\n    data.sort()\n    if len(data) % 2 == 0:\n        median1 = data[len(data)//2]\n        median2 = data[len(data)//2 - 1]\n        median = (median1 + median2)/2\n    else:\n        median = data[len(data)//2]\n    return median\nprint(median([0,1,2,10,4,1,56,2,1,3,56,4]))\n\n#Write a python function to find the mode of a given list of integers.\ndef mode(data):\n    return max(set(data), key=data.count)\nprint(mode([0,1,2,10,4,1,56,2,1,3,56,4]))\n\n#Write a python function\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpug9__ip7.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) {\n            b.push(num_list[i]);\n        } else {\n            a.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmpil265x4h.js:21:10)\n    at Object.<anonymous> (/tmp/tmpil265x4h.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            l.push(num_list[i])\n        }\n    }\n    return l.concat(Array(num_list.length-l.length).fill(0))\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the square of a given number.\ndef square(n):\n    return n*n\nprint(square(2))\nprint(square(3))\n\n#Write a python function to calculate the cube of a given number.\ndef cube(n):\n    return n*n*n\nprint(cube(2))\nprint(cube(3))\n\n#Write a python function to calculate the power of a given number.\ndef power(n,p):\n    return n**p\nprint(power(2,3))\nprint(power(3,3))\n\n#Write a python function to calculate the power of a given number.\ndef power(n,p):\n    return n**p\nprint(power(2,3))\nprint(power(3,3))\n\n#Write a python function to calculate the power of a given number.\ndef power(n,p):\n    return n**p\nprint(power(2,3))\nprint(power(3,3))\n\n#Write a python function to calculate the power of a given number.\ndef power(n,p):\n    return n**p\nprint(power(2,3))\nprint(power(3,3))\n\n#Write a python function to calculate the power of a given number.\ndef power(n,p):\n    return n**p\nprint(power(2,3))\nprint(power(3,3))\n\n#Write a python function to calculate the power of a given number.\ndef power(n,p):\n    return n**p\nprint(power(2,3))\nprint(power(3,3))\n\n#Write a python\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmp547y3xz8.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpujic1k1f.js:21:10)\n    at Object.<anonymous> (/tmp/tmpujic1k1f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2, 3, 4, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpujic1k1f.js:21:10)\n    at Object.<anonymous> (/tmp/tmpujic1k1f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2, 3, 4, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 || num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmpw8mi6l2w.js:22:10)\n    at Object.<anonymous> (/tmp/tmpw8mi6l2w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 5, 0,\n    0, 0, 0, 2\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function that takes a positive integer and returns the sum of the cube of all the positive integers smaller than the specified number.\ndef sum_of_cubes(num):\n    sum = 0\n    for i in range(num):\n        sum = sum + (i**3)\n    return sum\nprint(sum_of_cubes(3))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpmmvyt39k.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    count = num_list.count(0)\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(0,count):\n        l.append(0)\n    return(l)\nmove_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4])\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\nsum_digits(1234)\n\n#Write a python function to calculate the maximum and minimum of a given list.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nmax_min([0,10,-2])\n\n#Write a python function to calculate the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n#Write a python function to check whether a given number is a perfect number or not.\ndef perfect_number(n):\n    sum = 0\n    for x in range(1, n):\n        if n % x == 0:\n            sum += x\n    return sum == n\nprint(perfect_number(6))\n\n#Write a python function to calculate the average of a given list.\ndef average(data):\n    sum = 0\n    for i in data:\n        sum += i\n    return sum/len(data)\naverage([1,2,3,4,5])\n\n#Write a python function to calculate the average of a given list.\ndef average(data):\n    sum = 0\n    for i in data:\n        sum += i\n    return\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmp5sjbq435.js:5\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = [];\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            l.push(num_list[i]);\n        }\n    }\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]==0){\n            l.push(num_list[i]);\n        }\n    }\n    return l;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    l.extend([0]*num_list.count(0))\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([10,20,30,40,50]))\nprint(move_zero([0,0,0]))\nprint(move_zero([1,2,3]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\nprint(squaresum([11,12,13,14,15]))\n\n#Write a python function to check whether a given number is perfect or not.\ndef is_perfect(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum == n\nprint(is_perfect(6))\nprint(is_perfect(28))\nprint(is_perfect(496))\nprint(is_perfect(12))\n\n#Write a python function to print all the perfect numbers in a given list.\ndef perfect_num(nums):\n    for i in nums:\n        sum = 0\n        for j in range(1, i):\n            if i % j == 0:\n               \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpws7zr87a.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function that takes a positive integer and returns the sum of the cube of all the positive integers smaller than the specified number.\ndef sum_of_cubes(n):\n    s = 0\n    for i in range(n):\n        s += i**3\n    return s\nprint(sum_of_cubes(3))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function that takes a positive integer and returns the sum of the cube of all the positive integers smaller than the specified number.\ndef sum_of_cubes(\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmp32w2g2ln.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum difference between the successive elements in a given list.\ndef max_diff(num):\n    return max(num) - min(num)\nprint(max_diff([1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the sum of all the elements of the given list.\ndef sum(numbers):\n    total = 0\n    for x in numbers:\n        total += x\n    return total\nprint(sum((8, 2, 3, 0, 7)))\n\n#Write a python function to multiply all the elements of the given list.\ndef multiply(numbers):\n    total = 1\n    for x in numbers:\n        total *= x\n    return total\nprint(multiply((8, 2, 3, -1, 7)))\n\n#Write a python function to find the second largest number in the given list.\ndef second_largest(numbers):\n    count = 0\n    m1 = m2 = float('-inf')\n    for x in numbers:\n        count += 1\n        if x > m2:\n            if x >= m1:\n                m1, m2 = x, m1            \n            else:\n                m2 = x\n    return m2 if count >= 2 else None\nprint(second_largest([1, 2, 3, 4, 5]))\nprint(second_largest([5, 4, 3, 2, 1]))\nprint(second_largest([1, 1, 1, 1, 1]))\nprint(second_largest([1, 2, 3,\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmp1iip10rg.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits in a given string.\ndef sum_digits_string(str1):\n    sum_digit = 0\n    for x in str1:\n        if x.isdigit() == True:\n            z = int(x)\n            sum_digit = sum_digit + z\n\n    return sum_digit\n     \nprint(sum_digits_string(\"123abcd45\"))\nprint(sum_digits_string(\"abcd1234\"))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0, 10, 15, 40, -5, 42, 17, 28, 75]))\n\n#Write a python function to check whether a given number is perfect or not.\ndef is_perfect(n):\n    sum = 0\n    for x in range(1, n):\n        if n % x == 0:\n            sum += x\n    return sum == n\nprint(is_perfect(6))\nprint(is_perfect(28))\nprint(is_perfect(496))\nprint(is_perfect(8128))\nprint(is_perfect(33550336))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n   \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpx3ulzpul.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return(l+[0]*num_list.count(0))\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([0,0,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of a given list.\ndef squares(data):\n    sum = 0\n    for i in data:\n        sum = sum + (i*i)\n    return sum\nprint(squares([1,2,3,4,5]))\nprint(squares([6,7,8,9,10]))\n\n#Write a python function to find the common items from two given lists.\ndef common_data(list1, list2):\n    result = False\n    for x in list1:\n        for y in list2:\n            if x == y:\n                result = True\n                return result\nprint(common_data([1,2,3,4,5], [5,6,7,8,9]))\nprint(common_data([1,2,3,4,5], [6,7,8,9]))\n\n#Write a python function to find the unique items from two given lists.\ndef unique_data(list1, list2):\n    result = []\n    for x in list1:\n        if x not in list2:\n            result.append(x)\n    for x in list2:\n        if x not in list1:\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmp0trnow9y.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 || num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmpw8mi6l2w.js:22:10)\n    at Object.<anonymous> (/tmp/tmpw8mi6l2w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 3, 4, 5, 0,\n    0, 0, 0, 2\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the factorial of a given number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=int(input(\"Input a number to compute the factiorial : \"))\nprint(factorial(n))\n\n#Write a python function to check whether a given number is prime or not.\ndef test_prime(n):\n    if (n==1):\n        return False\n    elif (n==2):\n        return True;\n    else:\n        for x in range(2,n):\n            if(n % x==0):\n                return False\n        return True             \nprint(test_prime(9))\n\n#Write a python function to print the even numbers from a given list.\ndef is_even_num(l):\n    enum = []\n    for n in l:\n        if n % 2 == 0:\n            enum.append(n)\n    return enum\nprint(is_even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n#Write a python function to print the odd numbers from a given list.\ndef is_odd_num(l):\n    enum = []\n    for n in l:\n        if n % 2 == 1:\n            enum.append(n)\n    return enum\nprint(is_odd_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n#Write a python function to check whether a given string is a palindrome or not.\ndef isPalindrome(string):\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmp3b3vv7f2.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a=[];\n    var b=[];\n    for(var i=0;i<num_list.length;i++){\n        if(num_list[i]!=0){\n            a.push(num_list[i]);\n        }\n        else{\n            b.push(num_list[i]);\n        }\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123955,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in num_list:\n        if i == 0:\n            l.append(i)\n    return l\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(1234))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function that takes a positive integer and returns the sum of the cube of all the positive integers smaller than the specified number.\ndef sum_of_cubes(n):\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\nprint(sum_of_cubes(3))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpv9mwih3a.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === 0 ) b.push(num_list[i]);\n        else a.push(num_list[i]);\n    }\n    return a.concat(b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n  3,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  2,\n  4,\n  5,\n  0,\n  0,\n  0,\n  0\n]\n    at test (/tmp/tmp8dbkt2ju.js:17:10)\n    at Object.<anonymous> (/tmp/tmp8dbkt2ju.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 2, 3, 4, 5,\n    0, 0, 0, 0\n  ],\n  expected: [\n    2, 3, 2, 4, 5,\n    0, 0, 0, 0\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits in a given string.\ndef sum_digits_string(str1):\n    sum_digit = 0\n    for x in str1:\n        if x.isdigit() == True:\n            z = int(x)\n            sum_digit = sum_digit + z\n\n    return sum_digit\n     \nprint(sum_digits_string(\"123abcd45\"))\nprint(sum_digits_string(\"abcd1234\"))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\nprint(second_largest([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second lowest number from the given list of numbers.\ndef second_smallest(list):\n    list.sort()\n   \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpm5swe6oh.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a Python program to compute the product of a list of integers (without using for loop).\nfrom functools import reduce\ndef product(fracs):\n    t = reduce(lambda x, y : x * y, fracs)\n    return t.numerator, t.denominator\nprint(product([1,2,3,4]))\n\n#Write a Python program to remove duplicates from a list.\na = [10,20,30,20,10,50,60,40,80,50,40]\ndup_items = set()\nuniq_items = []\nfor x in a:\n    if x not in dup_items:\n        uniq_items.append(x)\n        dup_items.add(x)\nprint(dup_items)\n\n#Write a Python program to get the difference between the two lists.\nlist1 = [1, 2, 3, 4]\nlist2 = [1, 2]\nprint(list(set(list1) - set(list2)))\n\n#Write a Python program to find the second smallest number in a list.\ndef second_smallest(numbers):\n    m1, m2 = float('inf'), float('inf')\n    for x in numbers:\n        if x <= m1:\n            m1, m2 = x, m1\n        elif x < m2:\n            m2 = x\n    return m2\nprint(second_smallest([1, 2, -8, -2, 0]))\n\n#Write a Python program to find the second largest number in a list.\ndef second_largest(numbers):\n    count = 0\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmp1t3cjfxj.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l + [0] * num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([0,0,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\nprint(second_largest([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second smallest number from the given list of numbers.\ndef second_smallest(list):\n    list.\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpbfklm6ge.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(num_list.count(0)):\n        l.append(0)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,10,4,1,56,2,1,3,56,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6,70]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\nprint(squaresum([11,12,13,14,15]))\n\n#Write a python function to check whether a given number is perfect or not.\ndef perfect_number(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum = sum + i\n    return sum == n\nprint(perfect_number(6))\nprint(perfect_number(28))\nprint(perfect_number(496))\nprint(perfect_number(8128))\nprint(perfect_number(33550336))\n\n#Write a python function to print all the prime numbers in a given\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmphvm4che7.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to find the product of all numbers in a given list.\ndef product(nums):\n    p = 1\n    for i in nums:\n        p = p * i\n    return p\nprint(product([1,2,3,4]))\nprint(product([4,5,6]))\n\n#Write a python function to find the second largest number in a given list.\ndef second_largest(nums):\n    nums.sort()\n    return nums[-2]\nprint(second_largest([1,2,3,4,5]))\nprint(second_largest([4,5,6,7,8,9]))\n\n#Write a python function to find the second smallest number in a given list.\ndef second_smallest(nums):\n    nums.sort\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpy26scq5k.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return(l+[0]*num_list.count(0))\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a Python program to compute the product of a list of integers (without using for loop).\nfrom functools import reduce\ndef product(fracs):\n    t = reduce(lambda x, y : x * y, fracs)\n    return t.numerator, t.denominator\n\n#Write a Python program to print Unicode characters.\nprint(u'\\u0050')\nprint(u'\\u0050\\u0079\\u0074\\u0068\\u006f\\u006e \\u0045\\u0078\\u0065\\u0072\\u0063\\u0069\\u0073\\u0065\\u0073 \\u002d \\u0077\\u0033\\u0072\\u0065\\u0073\\u006f\\u0075\\u0072\\u0063\\u0065')\n\n#Write a Python program to prove that two string variables of same value point same memory location.\nstr1 = \"Python\"\nstr2 = \"Python\"\nprint(id(str1))\nprint(id(str2))\n\n#Write a Python program to create a bytearray from a list.\nl = [10,20,56,35,17,99]\nprint(bytearray(l))\n\n#Write a Python program to display a floating number in specified numbers.\nx = 3.1415926\ny = 12.9999\nprint(\"\\nOriginal Number: \", x)\nprint(\"Formatted Number: \"+\"{:.2f}\".format(x));\nprint(\"Original Number: \", y)\nprint(\"Formatted Number: \"+\"{:.2f}\".format(y));\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpkcly4hn3.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmp9_xal9ok.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([0,0,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function that takes a positive integer and returns the sum of the cube of all the positive integers smaller than the specified number.\ndef sum_of_cubes(n):\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\nprint(sum_of_cubes(3))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpjnkvh6ca.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    count = num_list.count(0)\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in range(0,count):\n        l.append(0)\n    return(l)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\nprint(sum_digits(123))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of the digits of a given number.\ndef sum_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\nprint(sum_digits(123))\n\n#Write a python function to find the sum of the digits of a given number.\ndef sum_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\nprint(sum_digits(123))\n\n#Write a python function to find the sum of the digits of a given number.\ndef sum_digits(n):\n    sum = 0\n    while n:\n        sum += n % 10\n        n //= 10\n    return sum\nprint(sum_digits(123))\n\n#Write\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpow0ps72h.js:5\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    var a = [], b = [], prev;\n    \n    num_list.sort();\n    for ( var i = 0; i < num_list.length; i++ ) {\n        if ( num_list[i] === prev ) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n        prev = num_list[i];\n    }\n    return b.concat(a);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n  2,\n  3,\n  4,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4,\n  0,\n  0\n]\n    at test (/tmp/tmpujic1k1f.js:21:10)\n    at Object.<anonymous> (/tmp/tmpujic1k1f.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2, 3, 4, 0 ],\n  expected: [ 1, 2, 3, 4, 0, 0 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    return l+[0]*num_list.count(0)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(nums):\n    sum = 0\n    for i in nums:\n        sum = sum + (i*i)\n    return sum\nprint(squaresum([1,2,3,4,5]))\nprint(squaresum([6,7,8,9,10]))\n\n#Write a python function to check whether a given number is perfect or not.\ndef perfect_number(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum = sum + i\n    return sum == n\nprint(perfect_number(6))\nprint(perfect_number(28))\n\n#Write a python function to print the even numbers from a given list.\ndef even_num(l):\n    enum = []\n    for n in l:\n        if n % 2 == 0:\n            enum.append(n)\n    return enum\nprint(even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n#Write a python function to print the odd numbers from a given list.\ndef odd_num(l):\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpivn24fn8.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for (var i=0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            l.push(num_list[i])\n        }\n    }\n    for (var i=0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            l.push(num_list[i])\n        }\n    }\n    return l\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    l = []\n    for i in num_list:\n        if i != 0:\n            l.append(i)\n    for i in num_list:\n        if i == 0:\n            l.append(i)\n    return l\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([0,0,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpvu4t5u_y.js:4\n    for i in num_list:\n        ^\n\nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([10,20,10,40,50,60,70]))\n\n#Write a python function to calculate the sum of the digits of a given number.\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return s\nprint(sum_digits(123))\n\n#Write a python function to calculate the product of the digits of a given number.\ndef product(n):\n    p = 1\n    while n:\n        p *= n % 10\n        n //= 10\n    return p\nprint(product(123))\n\n#Write a python function to find the maximum number from the given list of numbers.\ndef max_num_in_list( list ):\n    max = list[ 0 ]\n    for a in list:\n        if a > max:\n            max = a\n    return max\nprint(max_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the minimum number from the given list of numbers.\ndef min_num_in_list( list ):\n    min = list[ 0 ]\n    for a in list:\n        if a < min:\n            min = a\n    return min\nprint(min_num_in_list([1, 2, -8, 0]))\n\n#Write a python function to find the second largest number from the given list of numbers.\ndef second_largest(list):\n    list.sort()\n    return list[-2]\nprint(second_largest([1, 2, -8, -2, 0]))\n\n#Write a python function to find the second smallest number from the given list of numbers.\ndef second_smallest(list):\n    list.sort()\n    return list[1]\nprint(\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpebmj26jd.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to move all zeroes to the end of the given list.\nfunction move_zero(num_list){\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return(x)\nprint(move_zero([0,1,2,10,4,1,0,56,2,0,1,3,0,56,0,4]))\nprint(move_zero([1,2,0,10,4,1,0,56,2,0,1,3,0,56,0,4]))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    return sum([num **2 for num in n])\nprint(squaresum((1,2,3)))\n\n#Write a python function to check whether a given number is perfect or not.\ndef perfect_number(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return True if sum == n and n!=0 else False\nprint(perfect_number(6))\nprint(perfect_number(28))\n\n#Write a python function to find the maximum and minimum numbers from a sequence of numbers.\ndef max_min(data):\n    l = data[0]\n    s = data[0]\n    for num in data:\n        if num> l:\n            l = num\n        elif num< s:\n            s = num\n    return l,s\nprint(max_min([0,10,-2,30,5,6]))\n\n#Write a python function to find the sum of squares of all numbers in a given list.\ndef squaresum(n) :\n    return\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123956,
      "stdout": "",
      "stderr": "/tmp/tmpfru0nrm3.js:3\n    a = [0 for i in range(num_list.count(0))]\n           ^^^\n\nSyntaxError: Unexpected token 'for'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}