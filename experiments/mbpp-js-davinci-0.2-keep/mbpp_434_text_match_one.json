{
  "name": "mbpp_434_text_match_one",
  "language": "js",
  "prompt": "//Write a function that matches a string that has an a followed by one or more b's.\nfunction text_match_one(text){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = text_match_one;\n  assert.deepEqual(candidate(\"ac\"),false);\n  assert.deepEqual(candidate(\"dc\"),false);\n  assert.deepEqual(candidate(\"abba\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var pattern = /ab+/;\n    if (pattern.test(text)) {\n        console.log(\"The text matches the pattern.\");\n    } else {\n        console.log(\"The text does NOT match the pattern.\");\n    }\n}\ntext_match_one(\"abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var regex = /ab+/;\n    if (regex.test(text)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    var regex=/ab+/;\n    if (regex.test(text)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    var regex = /ab+/;\n    var result = regex.test(text);\n    return result;\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var pattern = /ab+/;\n    if (pattern.test(text)){\n        return \"Found a match!\";\n    }\n    else{\n        return \"Did not find a match!\";\n    }\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var regex = /ab+/;\n    if (regex.test(text)) {\n        return true;\n    } else {\n        return false;\n    }\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "  var regex = /ab+/;\n  if (regex.test(text)) {\n    return true;\n  } else {\n    return false;\n  }\n}",
    "    var regex = /ab+/;\n    if(regex.test(text)){\n        return true;\n    }else{\n        return false;\n    }\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}",
    "    var regex = /ab+/;\n    if (regex.test(text)) {\n        return true;\n    }\n    return false;\n}",
    "    var regex = /ab+/;\n    return regex.test(text);\n}"
  ]
}