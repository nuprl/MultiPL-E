{
  "name": "mbpp_8_square_nums",
  "language": "js",
  "prompt": "//Write a function to find squares of individual elements in a list.\nfunction square_nums(nums){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = square_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30]),[100, 400, 900]);\n  assert.deepEqual(candidate([12, 15]),[144, 225]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var squares = [];\n    for(var i = 0; i < nums.length; i++){\n        squares.push(nums[i] * nums[i]);\n    }\n    return squares;\n}\n",
    "    var squares = [];\n    for(var i=0; i<nums.length; i++){\n        squares.push(nums[i]*nums[i]);\n    }\n    return squares;\n}\n",
    "    return nums.map(function(num){\n        return num*num;\n    });\n}",
    "    var square = nums.map(function(num){\n        return num * num;\n    });\n    return square;\n}",
    "    var squares = [];\n    for(var i = 0; i < nums.length; i++){\n        squares.push(nums[i] * nums[i]);\n    }\n    return squares;\n}\n",
    "    var square = nums.map(function(num){\n        return num * num;\n    });\n    return square;\n}",
    "    var sqr_nums = [];\n    for(var i=0; i<nums.length; i++){\n        sqr_nums.push(nums[i]*nums[i]);\n    }\n    return sqr_nums;\n}\n",
    "    return nums.map(function(num){\n        return num*num;\n    })\n}",
    "    return nums.map(function(num){\n        return num * num;\n    });\n}\n",
    "    var square_nums = nums.map(function(num){\n        return num * num;\n    });\n    return square_nums;\n}",
    "    var squared = nums.map(function(num){\n        return num * num;\n    });\n    return squared;\n}",
    "    return nums.map(function(num){\n        return num*num;\n    })\n}",
    "    return nums.map(function(num){\n        return num*num;\n    })\n}",
    "    var squares = [];\n    for(var i = 0; i < nums.length; i++){\n        squares.push(nums[i] * nums[i]);\n    }\n    return squares;\n}\n",
    "    var new_nums = [];\n    for(var i=0; i<nums.length; i++){\n        new_nums.push(nums[i]*nums[i]);\n    }\n    return new_nums;\n}",
    "    return nums.map(function(num){\n        return num*num;\n    });\n}",
    "    return nums.map(function(num){\n        return num*num;\n    })\n}",
    "    return nums.map(function(num){\n        return num*num;\n    });\n}",
    "    var square = nums.map(function(num){\n        return num * num;\n    });\n    return square;\n}",
    "    var squares = [];\n    for(var i = 0; i < nums.length; i++){\n        squares.push(nums[i] * nums[i]);\n    }\n    return squares;\n}"
  ]
}