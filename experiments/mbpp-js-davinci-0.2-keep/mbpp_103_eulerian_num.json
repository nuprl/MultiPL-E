{
  "name": "mbpp_103_eulerian_num",
  "language": "js",
  "prompt": "//Write a function to find the Eulerian number a(n, m).\nfunction eulerian_num(n, m){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = eulerian_num;\n  assert.deepEqual(candidate(3, 1),4);\n  assert.deepEqual(candidate(4, 1),11);\n  assert.deepEqual(candidate(5, 3),26);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var eulerian_num = 1;\n    for(var i = 1; i <= m; i++){\n        eulerian_num *= (n - i + 1) / i;\n    }\n    return eulerian_num;\n}\n",
    "\tif(m == 0 || n == m) return 1;\n\treturn eulerian_num(n-1, m-1) + (n-1)*eulerian_num(n-1, m);\n}\n",
    "    if(m == 0 || n == m) return 1;\n    return eulerian_num(n - 1, m - 1) + (n - m) * eulerian_num(n - 1, m);\n}\n",
    "    if(n == 0 || m == 0) return 1;\n    if(n == 1 || m == 1) return n;\n    if(n == m) return 1;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if(n == 0 || m == 0 || n < m) return 0;\n    if(n == m) return 1;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if(n == m || m == 0) return 1;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if(n == 0 || m == 0) return 1;\n    if(n == 1) return m + 1;\n    if(m == 1) return n + 1;\n    return (n + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "\tif(n < m) return 0;\n\tif(n == m) return 1;\n\tif(m == 0) return 1;\n\treturn (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    var eulerian = [];\n    for(var i = 0; i <= n; i++){\n        eulerian[i] = [];\n        for(var j = 0; j <= m; j++){\n            if(i == 0 || j == 0){\n                eulerian[i][j] = 1;\n            }else{\n                eulerian[i][j] = (i - j + 1) * eulerian[i - 1][j] + j * eulerian[i - 1][j - 1];\n            }\n        }\n    }\n    return eulerian[n][m];\n}\n",
    "    var arr = [];\n    for(var i = 0; i <= n; i++){\n        arr[i] = [];\n        for(var j = 0; j <= m; j++){\n            if(j == 0){\n                arr[i][j] = 1;\n            }\n            else if(i == 0){\n                arr[i][j] = 0;\n            }\n            else{\n                arr[i][j] = (j * arr[i - 1][j]) + arr[i - 1][j - 1];\n            }\n        }\n    }\n    return arr[n][m];\n}\n",
    "    if(n == m || m == 0) return 1;\n    return eulerian_num(n - 1, m - 1) + (n - 1) * eulerian_num(n - 1, m);\n}\n",
    "    if(n == 0 || m == 0) return 1;\n    if(n == 1) return m + 1;\n    if(m == 1) return n + 1;\n    return (n + m) * eulerian_num(n - 1, m) + (n + m) * eulerian_num(n, m - 1);\n}\n",
    "\tif(n == 0 || m == 0)\n\t\treturn 1;\n\tif(n == 1)\n\t\treturn m + 1;\n\tif(m == 1)\n\t\treturn n + 1;\n\treturn (n + m) * eulerian_num(n - 1, m) + (n + m) * eulerian_num(n, m - 1) - (n + m) * (n + m - 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    var result = 1;\n    for(var i = 1; i <= m; i++){\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    var eulerian = 0;\n    for(var i = 0; i <= m; i++){\n        eulerian += Math.pow(-1, i) * binomial(m, i) * binomial(n + m - i, n);\n    }\n    return eulerian;\n}\n",
    "    return factorial(n + 1) / (factorial(m + 1) * factorial(n - m + 1));\n}\n",
    "    if(n == 0 || m == 0 || n == m)\n        return 1;\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    var a = [];\n    for(var i = 0; i <= n; i++){\n        a[i] = [];\n        for(var j = 0; j <= m; j++){\n            if(i == 0 || j == 0){\n                a[i][j] = 1;\n            }else{\n                a[i][j] = a[i-1][j-1] + (i+1)*a[i][j-1];\n            }\n        }\n    }\n    return a[n][m];\n}\n",
    "    if(n == 0 && m == 0) return 1;\n    if(n == 0 || m == 0) return 0;\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "\tvar eul = [];\n\tfor(var i = 0; i < n; i++){\n\t\teul[i] = [];\n\t\tfor(var j = 0; j < m; j++){\n\t\t\tif(i == 0 || j == 0){\n\t\t\t\teul[i][j] = 1;\n\t\t\t}else{\n\t\t\t\teul[i][j] = eul[i-1][j] + j*eul[i-1][j-1];\n\t\t\t}\n\t\t}\n\t}\n\treturn eul[n-1][m-1];\n}\n"
  ]
}