{
  "name": "mbpp_740_tuple_to_dict",
  "language": "js",
  "prompt": "//Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunction tuple_to_dict(test_tup){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tuple_to_dict;\n  assert.deepEqual(candidate([1, 5, 7, 10, 13, 5]),{1: 5, 7: 10, 13: 5});\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),{1: 2, 3: 4, 5: 6});\n  assert.deepEqual(candidate([7, 8, 9, 10, 11, 12]),{7: 8, 9: 10, 11: 12});\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var dict = {};\n    for (var i = 0; i < test_tup.length; i+=2){\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\n",
    "    var test_dict = {};\n    for (var i = 0; i < test_tup.length; i+=2) {\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\n",
    "    var dict = {};\n    for(var i = 0; i < test_tup.length; i+=2){\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\n",
    "    var dict = {};\n    for(var i=0; i<test_tup.length; i+=2){\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\n",
    "    var test_dict = {};\n    for (var i = 0; i < test_tup.length; i += 2) {\n        test_dict[test_tup[i]] = test_tup[i + 1];\n    }\n    return test_dict;\n}",
    "    var res_dict = {};\n    for (var i = 0; i < test_tup.length; i += 2) {\n        res_dict[test_tup[i]] = test_tup[i + 1];\n    }\n    return res_dict;\n}",
    "    var dict = {};\n    for(var i = 0; i < test_tup.length; i++){\n        dict[test_tup[i]] = test_tup[i+1];\n        i++;\n    }\n    return dict;\n}\n",
    "    var dict = {};\n    for(var i=0; i<test_tup.length; i+=2){\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}",
    "    var dict = {};\n    for (var i = 0; i < test_tup.length; i+=2) {\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\n",
    "    var dict = {};\n    for(var i=0; i<test_tup.length; i+=2){\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\n",
    "    var dict = {};\n    for(var i=0; i<test_tup.length; i+=2){\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\n",
    "    var dict = {};\n    for(var i=0; i<test_tup.length; i+=2){\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\n",
    "    var res_dict = {}; \n    var i; \n    for (i = 0; i < test_tup.length; i += 2) { \n        res_dict[test_tup[i]] = test_tup[i + 1]; \n    } \n    return res_dict; \n}\n",
    "    var dict = {};\n    for (var i = 0; i < test_tup.length; i+=2) {\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\n",
    "    var dict = {};\n    for(var i = 0; i < test_tup.length; i++){\n        dict[test_tup[i]] = test_tup[i+1];\n        i++;\n    }\n    return dict;\n}\n",
    "    var dict = {};\n    for (var i = 0; i < test_tup.length; i+=2) {\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}",
    "    var test_dict = {};\n    for(var i = 0; i < test_tup.length; i += 2){\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\n",
    "    var test_dict = {};\n    for(var i = 0; i < test_tup.length; i+=2){\n        test_dict[test_tup[i]] = test_tup[i+1];\n    }\n    return test_dict;\n}\n",
    "    var dict = {};\n    for (var i = 0; i < test_tup.length; i+=2) {\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\n",
    "    var dict = {};\n    for (var i = 0; i < test_tup.length; i+=2) {\n        dict[test_tup[i]] = test_tup[i+1];\n    }\n    return dict;\n}\nvar test_tup = ('a', 1, 'b', 2, 'c', 3);"
  ]
}