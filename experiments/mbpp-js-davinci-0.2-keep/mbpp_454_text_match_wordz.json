{
  "name": "mbpp_454_text_match_wordz",
  "language": "js",
  "prompt": "//Write a function that matches a word containing 'z'.\nfunction text_match_wordz(text){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = text_match_wordz;\n  assert.deepEqual(candidate(\"pythonz.\"),true);\n  assert.deepEqual(candidate(\"xyz.\"),true);\n  assert.deepEqual(candidate(\"  lang  .\"),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    let regex = /\\w*z\\w*/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\bz\\w+/g;\n    console.log(text.match(regex));\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\b[a-z]+z\\b/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    let regex = /\\bz\\w+/g;\n    return text.match(regex);\n}",
    "    var regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let match = text.match(/\\w*z\\w*/gi);\n    return match;\n}",
    "    let match = text.match(/\\w*z\\w*/gi);\n    return match;\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}",
    "    var match = text.match(/\\w*z\\w*/gi);\n    return match;\n}",
    "    var regex = /\\w*z\\w*/g;\n    var result = text.match(regex);\n    return result;\n}",
    "    let regex = /\\bz\\w+\\b/g;\n    console.log(text.match(regex));\n}\n\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}\n",
    "  var pattern = /\\w*z\\w*/;\n  if (pattern.test(text)){\n    return true;\n  }\n  return false;\n}\n",
    "    let regex = /\\bz\\w+/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    if(regex.test(text)){\n        console.log(`${text} matches the pattern`);\n    }else{\n        console.log(`${text} does not match the pattern`);\n    }\n}\n\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy cat.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy cat.\");\n",
    "    let matches = text.match(/\\w*z\\w*/gi);\n    return matches;\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let matches = text.match(/\\w*z\\w*/gi);\n    return matches;\n}\n",
    "    let pattern = /\\w*z\\w*/;\n    return pattern.test(text);\n}\n",
    "    let regex = /\\bz\\w+\\b/g;\n    return text.match(regex);\n}\n",
    "    var match = text.match(/\\w*z\\w*/g);\n    return match;\n}",
    "    var pattern = /\\w*z\\w*/;\n    if(text.match(pattern)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}",
    "    let pattern = /\\w*z\\w*/;\n    return pattern.test(text);\n}",
    "    var regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    var re = /\\b[z]\\w+/g;\n    var result = text.match(re);\n    return result;\n}",
    "    var pattern = /\\w*z\\w*/;\n    return pattern.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    var regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\bz\\w+\\b/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}\n",
    "    var regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    let result = text.match(regex);\n    return result;\n}\n",
    "    var regex = /\\b[z]\\w+/g;\n    var result = text.match(regex);\n    return result;\n}\n",
    "    var match = text.match(/\\w*z\\w*/gi);\n    return match;\n}",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}",
    "    var pattern = /\\w*z\\w*/;\n    if(pattern.test(text)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /\\w*z\\w*/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    let wordz = /\\w*z\\w*/;\n    return text.match(wordz);\n}",
    "    var regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}",
    "    let match = text.match(/\\w*z\\w*/g);\n    return match;\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let match = text.match(/\\w*z\\w*/gi);\n    return match;\n}",
    "    let wordz = /\\w*z\\w*/;\n    return text.match(wordz);\n}",
    "    let pattern = /\\w*z\\w*/;\n    return text.match(pattern);\n}",
    "    var re = /\\w*z\\w*/;\n    return text.match(re);\n}\n",
    "    var pattern = /\\w*z\\w*/;\n    if(text.match(pattern)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "    var regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let match = text.match(/\\w*z\\w*/ig);\n    return match;\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\bz\\w+/g;\n    return text.match(regex);\n}",
    "    let regExp = /\\w*z\\w*/;\n    return text.match(regExp);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    var match = text.match(/\\w*z\\w*/gi);\n    return match;\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\bz\\w+\\b/g;\n    return text.match(regex);\n}\n",
    "    let pattern = /\\w*z\\w*/;\n    return pattern.test(text);\n}",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}",
    "    let regex = /\\bz\\w+/g;\n    return text.match(regex);\n}\n",
    "    var pattern = /\\w*z\\w*/;\n    return pattern.test(text);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    var regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}\n",
    "\tlet regex = /\\bz\\w+/g;\n\tconsole.log(text.match(regex));\n}\n",
    "\tlet regex = /\\w*z\\w*/;\n\treturn text.match(regex);\n}",
    "    let regex = /\\bz\\w+\\b/g;\n    let found = text.match(regex);\n    return found;\n}\n",
    "    var regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}",
    "    let pattern = /\\w*z\\w*/;\n    return pattern.test(text);\n}\n",
    "    let regex = /\\bz\\w+/g;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}\n",
    "    return text.match(/\\w*z\\w*/);\n}",
    "    let pattern = /\\w*z\\w*/;\n    return pattern.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let match = text.match(/\\w*z\\w*/gi);\n    return match;\n}\n",
    "    let regex = /\\w*z\\w*/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    var pattern = /\\w*z\\w*/;\n    if(text.match(pattern)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    var regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\w*z\\w*/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    let regex = /\\w*z\\w*/;\n    console.log(text.match(regex));\n}\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\n",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}\n",
    "    var regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}",
    "    let pattern = /\\w*z\\w*/;\n    return pattern.test(text);\n}\n",
    "    let regex = /\\bz\\w+\\b/g;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\w*z\\w*/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}\n",
    "    var pattern = /\\w*z\\w*/;\n    if(pattern.test(text)){\n        return true;\n    }\n    return false;\n}",
    "    return text.match(/\\w*z\\w*/g);\n}",
    "    let regex = /\\w*z\\w*/;\n    if(text.match(regex)){\n        return true;\n    }\n    return false;\n}",
    "    var regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    var regex = /\\w*z\\w*/;\n    return text.match(regex);\n}\n",
    "    return text.match(/\\w*z\\w*/g);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    if(text.match(/z/)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\bz\\w+/g;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let pattern = /\\w*z\\w*/;\n    return pattern.test(text);\n}\n",
    "    var regex = /\\b[z]\\w+/g;\n    var found = text.match(regex);\n    return found;\n}",
    "    var pattern = /\\b[z]\\w+/g;\n    return text.match(pattern);\n}\n",
    "    return text.match(/\\w*z\\w*/gi);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    var regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let pattern = /\\w*z\\w*/;\n    return pattern.test(text);\n}",
    "    var regex = /\\w*z\\w*/;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let match = text.match(/\\w*z\\w*/g);\n    return match;\n}\n",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let pattern = /\\w*z\\w*/;\n    return text.match(pattern);\n}\n",
    "    let pattern = /\\w*z\\w*/;\n    return pattern.test(text);\n}\n",
    "    // \\b: word boundary\n    // \\w: word character\n    // +: one or more times\n    // g: global\n    // i: case-insensitive\n    return text.match(/\\bz\\w+/gi);\n}\n",
    "    let regex = /\\b[a-z]+z\\b/g;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    var regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\bz\\w+/g;\n    return text.match(regex);\n}",
    "    let pattern = /\\w*z\\w*/;\n    return pattern.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    var pattern = /\\w*z\\w*/;\n    if(pattern.test(text)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /\\bz\\w*/g;\n    let found = text.match(regex);\n    return found;\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    // \\b: word boundary\n    // \\w: word character\n    // +: one or more\n    // g: global\n    // i: case-insensitive\n    var re = /\\bz\\w+/gi;\n    if (text.match(re)) {\n        return text.match(re);\n    } else {\n        return null;\n    }\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    let regex = /\\w*z\\w*/;\n    let result = text.match(regex);\n    return result;\n}",
    "    let match = text.match(/\\w*z\\w*/gi);\n    return match;\n}",
    "    let regex = /\\w*z\\w*/g;\n    console.log(text.match(regex));\n}\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\ntext_match_wordz",
    "    let regex = /\\bz\\w+\\b/g;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    console.log(text.match(regex));\n}\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog.\");\n",
    "    let regex = /\\bz\\w+/g;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\bz\\w+/g;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}\n",
    "    return text.match(/\\w*z\\w*/);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}\n",
    "    let regex = /\\bz\\w+/g;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    var re = /\\w*z\\w*/;\n    return re.test(text);\n}\n",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}",
    "    let regex = /\\bz\\w+\\b/g;\n    return text.match(regex);\n}\n",
    "    var regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\w*z\\w*/g;\n    let result = text.match(regex);\n    return result;\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let pattern = /\\b[z]\\w+/g;\n    return text.match(pattern);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\bz\\w+/g;\n    return text.match(regex);\n}"
  ]
}