{
  "name": "mbpp_454_text_match_wordz",
  "language": "js",
  "prompt": "//Write a function that matches a word containing 'z'.\nfunction text_match_wordz(text){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = text_match_wordz;\n  assert.deepEqual(candidate(\"pythonz.\"),true);\n  assert.deepEqual(candidate(\"xyz.\"),true);\n  assert.deepEqual(candidate(\"  lang  .\"),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    let regex = /\\w*z\\w*/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\bz\\w+/g;\n    console.log(text.match(regex));\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return text.match(regex);\n}",
    "    let regex = /\\w*z\\w*/g;\n    return text.match(regex);\n}\n",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n",
    "    let regex = /\\b[a-z]+z\\b/g;\n    let result = text.match(regex);\n    return result;\n}",
    "    let regex = /\\bz\\w+/g;\n    return text.match(regex);\n}",
    "    var regex = /\\w*z\\w*/;\n    return regex.test(text);\n}",
    "    let regex = /\\w*z\\w*/;\n    return regex.test(text);\n}\n"
  ]
}