{
  "name": "mbpp_261_division_elements",
  "language": "js",
  "prompt": "//Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nfunction division_elements(test_tup1, test_tup2){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = division_elements;\n  assert.deepEqual(candidate([10, 4, 6, 9], [5, 2, 3, 3]),[2, 2, 2, 3]);\n  assert.deepEqual(candidate([12, 6, 8, 16], [6, 3, 4, 4]),[2, 2, 2, 4]);\n  assert.deepEqual(candidate([20, 14, 36, 18], [5, 7, 6, 9]),[4, 2, 6, 2]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}",
    "    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}",
    "    var result = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}",
    "    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var res = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        res.push(test_tup1[i] / test_tup2[i]);\n    }\n    return res;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}",
    "    var res = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        res.push(test_tup1[i] / test_tup2[i]);\n    }\n    return res;\n}\n",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}",
    "    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var res = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        res.push(test_tup1[i] / test_tup2[i]);\n    }\n    return res;\n}",
    "    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for(var i=0; i<test_tup1.length; i++){\n        result.push(test_tup1[i]/test_tup2[i]);\n    }\n    return result;\n}\nvar test_tup1 = [10, 20, 30];\nvar test_tup2 = [10, 20, 30];",
    "    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] / test_tup2[i]);\n    }\n    return result;\n}\n"
  ]
}