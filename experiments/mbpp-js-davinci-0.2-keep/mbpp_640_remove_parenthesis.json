{
  "name": "mbpp_640_remove_parenthesis",
  "language": "js",
  "prompt": "//Write a function to remove the parenthesis and what is inbetween them from a string.\nfunction remove_parenthesis(items){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_parenthesis;\n  assert.deepEqual(candidate([\"python (chrome)\"]),\"python\");\n  assert.deepEqual(candidate([\"string(.abc)\"]),\"string\");\n  assert.deepEqual(candidate([\"alpha(num)\"]),\"alpha\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "  var new_items = items.replace(/\\(.*?\\)/g, '');\n  return new_items;\n}\n",
    "  var new_string = \"\";\n  for(var i = 0; i < items.length; i++){\n    if(items[i] === \"(\" || items[i] === \")\"){\n      continue;\n    }\n    else{\n      new_string += items[i];\n    }\n  }\n  return new_string;\n}",
    "  var newItems = items.replace(/[()]/g, '');\n  return newItems;\n}\n",
    "    var new_string = \"\";\n    for (var i = 0; i < items.length; i++){\n        if (items[i] != \"(\"){\n            if (items[i] != \")\"){\n                new_string += items[i];\n            }\n        }\n    }\n    return new_string;\n}",
    "  var new_items = [];\n  for(var i = 0; i < items.length; i++){\n    if(items[i] !== \"(\" && items[i] !== \")\"){\n      new_items.push(items[i]);\n    }\n  }\n  return new_items;\n}\n",
    "  var new_items = items.replace(/\\([^)]+\\)/g, '');\n  return new_items;\n}\n",
    "    var new_str = items.replace(/[()]/g, '');\n    return new_str;\n}",
    "    var new_items = items.replace(/\\(.*?\\)/g, '');\n    return new_items;\n}\n",
    "    var new_items = items.replace(/\\(.*?\\)/g, '');\n    return new_items;\n}",
    "    return items.replace(/\\(.*?\\)/g, '');\n}",
    "  var new_items = items.replace(/\\(.*?\\)/g, \"\");\n  return new_items;\n}\n",
    "    var new_items = items.replace(/[()]/g, '');\n    return new_items;\n}",
    "  var new_items = items.split(\" \");\n  var new_items2 = [];\n  for(var i = 0; i < new_items.length; i++){\n    if(new_items[i].indexOf(\"(\") === -1){\n      new_items2.push(new_items[i]);\n    }\n  }\n  return new_items2.join(\" \");\n}\n",
    "  var new_items = items.replace(/\\(.*?\\)/g, \"\");\n  return new_items;\n}\n",
    "  var new_items = items.replace(/[()]/g, '');\n  return new_items;\n}\n",
    "    var new_items = items.replace(/\\(.*?\\)/g, '');\n    return new_items;\n}\n",
    "    let new_items = items.replace(/\\(.*?\\)/g, '');\n    return new_items;\n}",
    "  var new_items = items.replace(/\\(.*?\\)/g, '');\n  return new_items;\n}\n",
    "  var new_items = items.replace(/\\(.*?\\)/g, '');\n  return new_items;\n}\n",
    "  var new_items = items.replace(/\\(.*?\\)/g, '');\n  return new_items;\n}\n"
  ]
}