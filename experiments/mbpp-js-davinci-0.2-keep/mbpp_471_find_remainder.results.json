{
  "name": "mbpp_471_find_remainder",
  "language": "js",
  "prompt": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    //Write your code here\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product%n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product *= arr[i];\n    }\n    return product%n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        prod = prod * arr[i];\n    }\n    return prod % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++) {\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        prod = (prod * arr[i]) % n;\n    }\n    return prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for(var i=0; i<arr.length; i++){\n        prod = (prod * arr[i]) % n;\n    }\n    return prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for(var i=0; i<arr.length; i++){\n        prod = (prod * arr[i]) % n;\n    }\n    return prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  var product = 1;\n  for(var i = 0; i < arr.length; i++){\n    product *= arr[i];\n  }\n  return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for (var i = 0; i < arr.length; i++) {\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for (var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  var product = 1;\n  for(var i = 0; i < arr.length; i++){\n    product = product * arr[i];\n  }\n  return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for (var i = 0; i < arr.length; i++){\n        result = result * arr[i] % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i=0; i<arr.length; i++){\n        result = result * arr[i] % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    //your code here\n    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        prod = (prod * arr[i]) % n;\n    }\n    return prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  var product = 1;\n  for (var i = 0; i < arr.length; i++){\n    product *= arr[i];\n  }\n  return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    //your code here\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    return arr.reduce((a, b) => a * b) % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = arr.reduce((a, b) => a * b);\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    //start writing your code here\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        prod *= arr[i];\n    }\n    return prod % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i] % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for (var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++) {\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i] % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    return arr.reduce((a, b) => a * b) % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  var product = 1;\n  for(var i = 0; i < arr.length; i++){\n    product *= arr[i];\n  }\n  return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        prod = (prod * arr[i]) % n;\n    }\n    return prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  var product = 1;\n  for(var i=0; i<arr.length; i++){\n    product = product * arr[i];\n  }\n  var remainder = product % n;\n  return remainder;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product%n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for(var i=0; i<arr.length; i++){\n        prod = prod * arr[i];\n    }\n    return prod % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  var product = 1;\n  for(var i = 0; i < arr.length; i++){\n    product *= arr[i];\n  }\n  return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    return arr.reduce((a, b) => a * b) % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var sum = 1;\n    for(var i = 0; i < arr.length; i++){\n        sum *= arr[i];\n    }\n    return sum % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    //your code here\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for (var i = 0; i < arr.length; i++) {\n        prod = (prod * arr[i]) % n;\n    }\n    return prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++) {\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n\tvar result = 1;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tresult = (result * arr[i]) % n;\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    return arr.reduce((a,b) => a*b)%n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    //your code here\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for(var i=0; i<arr.length; i++){\n        prod = prod * arr[i];\n    }\n    return prod % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for (var i = 0; i < arr.length; i++){\n        prod = prod * arr[i];\n    }\n    return prod % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        prod = (prod * arr[i]) % n;\n    }\n    return prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for (var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var result = 1;\n    for(var i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122763,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for(var i=0; i<arr.length; i++){\n        prod = prod * arr[i];\n    }\n    return prod % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        prod = prod * arr[i];\n    }\n    return prod % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    let result = 1;\n    for(let i = 0; i < arr.length; i++){\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for(var i=0; i<arr.length; i++){\n        prod = (prod*arr[i])%n;\n    }\n    return prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for(var i=0; i<arr.length; i++){\n        prod = prod * arr[i];\n    }\n    return prod%n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product *= arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    //your code here\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product*arr[i];\n    }\n    return product%n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = product * arr[i]\n    }\n    return product % n;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1666122764,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i=0; i<arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr, n){\n    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        prod = (prod * arr[i]) % n;\n    }\n    return prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
      "timestamp": 1665510243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}