{
  "name": "mbpp_59_is_octagonal",
  "language": "js",
  "prompt": "//Write a function to find the nth octagonal number.\nfunction is_octagonal(n){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_octagonal;\n  assert.deepEqual(candidate(5),65);\n  assert.deepEqual(candidate(10),280);\n  assert.deepEqual(candidate(15),645);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "  var a = (Math.sqrt(1 + 24 * n) + 1) / 6;\n  return a === Math.floor(a);\n}\n",
    "    var a = (Math.sqrt(1 + 24 * n) + 1) / 6;\n    return a === Math.floor(a);\n}\n",
    "    return (Math.sqrt(1+24*n)%6==5);\n}",
    "\treturn (Math.sqrt(1 + 24 * n) + 1) % 6 == 0;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) % 6 == 0;\n}\n",
    "\treturn ((Math.sqrt(1+24*n)+1)/6)%1==0;\n}\n",
    "\treturn (Math.sqrt(1 + 24 * n) + 1) % 6 == 0;\n}\n",
    "  var x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n  return x === Math.floor(x);\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) % 6 === 0;\n}\n",
    "    return Math.sqrt(1 + 24 * n) % 6 == 5;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) % 6 == 0;\n}\n",
    "  return (Math.sqrt(1 + 24 * n) + 1) % 6 == 0;\n}\n",
    "\treturn ((Math.sqrt(1+24*n)+1)/6)%1==0;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) % 6 == 0;\n}\n",
    "\treturn (Math.sqrt(1 + 24 * n) + 1) % 6 == 0;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) % 6 === 0;\n}\n",
    "\treturn ((1+Math.sqrt(1+24*n))/6)%1==0;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) % 6 === 0;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) % 6 == 0;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) % 6 == 0;\n}\n"
  ]
}