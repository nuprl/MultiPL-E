{
  "name": "mbpp_272_rear_extract",
  "language": "js",
  "prompt": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n  var result = [];\n  for (var i = 0; i < test_list.length; i++){\n    result.push(test_list[i][1]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmpijgm74qm.js:15:10)\n    at Object.<anonymous> (/tmp/tmpijgm74qm.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n\tvar rear_list = [];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\trear_list.push(test_list[i][test_list[i].length-1]);\n\t}\n\treturn rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n  var new_list = [];\n  for (var i = 0; i < test_list.length; i++){\n    new_list.push(test_list[i][test_list[i].length-1]);\n  }\n  return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmpuupghu36.js:15:10)\n    at Object.<anonymous> (/tmp/tmpuupghu36.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length-1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length-1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n\tvar result = [];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tresult.push(test_list[i][test_list[i].length - 1]);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n\tvar result = [];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tresult.push(test_list[i][test_list[i].length - 1]);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i=0; i<test_list.length; i++){\n        result.push(test_list[i][test_list[i].length-1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmp074b4oik.js:15:10)\n    at Object.<anonymous> (/tmp/tmp074b4oik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i=0; i<test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmp9qnbhdc4.js:15:10)\n    at Object.<anonymous> (/tmp/tmp9qnbhdc4.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i=0; i<test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmp9qnbhdc4.js:15:10)\n    at Object.<anonymous> (/tmp/tmp9qnbhdc4.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length-1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    return test_list.map(function(x){return x[x.length-1]});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmp4f136p8x.js:15:10)\n    at Object.<anonymous> (/tmp/tmp4f136p8x.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmp9qnbhdc4.js:15:10)\n    at Object.<anonymous> (/tmp/tmp9qnbhdc4.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i=0; i<test_list.length; i++){\n        result.push(test_list[i][test_list[i].length-1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmp4f136p8x.js:15:10)\n    at Object.<anonymous> (/tmp/tmp4f136p8x.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n  var result = [];\n  for(var i = 0; i < test_list.length; i++){\n    result.push(test_list[i][test_list[i].length-1]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length-1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i=0; i<test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n\tvar result = [];\n\tfor (var i = 0; i < test_list.length; i++){\n\t\tresult.push(test_list[i][1]);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmp2ugp2tgk.js:15:10)\n    at Object.<anonymous> (/tmp/tmp2ugp2tgk.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n\tvar result = [];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tresult.push(test_list[i][test_list[i].length - 1]);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n  var rear_list = [];\n  for(var i = 0; i < test_list.length; i++){\n    rear_list.push(test_list[i][test_list[i].length-1]);\n  }\n  return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        result_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmp9qnbhdc4.js:15:10)\n    at Object.<anonymous> (/tmp/tmp9qnbhdc4.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        result_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmpv6q_f326.js:15:10)\n    at Object.<anonymous> (/tmp/tmpv6q_f326.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmp4zgml5d1.js:15:10)\n    at Object.<anonymous> (/tmp/tmp4zgml5d1.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n  var new_list = [];\n  for(var i = 0; i < test_list.length; i++){\n    new_list.push(test_list[i][test_list[i].length-1]);\n  }\n  return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmp074b4oik.js:15:10)\n    at Object.<anonymous> (/tmp/tmp074b4oik.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n\tvar rear_list = [];\n\tfor (var i = 0; i < test_list.length; i++){\n\t\trear_list.push(test_list[i][1]);\n\t}\n\treturn rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmpx0ohq3qr.js:15:10)\n    at Object.<anonymous> (/tmp/tmpx0ohq3qr.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length-1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        result_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        result_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        result_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i=0; i<test_list.length; i++){\n        result.push(test_list[i][test_list[i].length-1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n\tvar new_list = [];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tnew_list.push(test_list[i][1]);\n\t}\n\treturn new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmp833mphvk.js:15:10)\n    at Object.<anonymous> (/tmp/tmp833mphvk.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        result_list.push(test_list[i][1]);\n    }\n    return result_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmpomy1hvel.js:15:10)\n    at Object.<anonymous> (/tmp/tmpomy1hvel.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmp4f136p8x.js:15:10)\n    at Object.<anonymous> (/tmp/tmp4f136p8x.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n  return test_list.map(function(tuple){\n    return tuple[1];\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmpd60y4_7t.js:13:10)\n    at Object.<anonymous> (/tmp/tmpd60y4_7t.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n\tvar rear_list = [];\n\tfor (var i = 0; i < test_list.length; i++){\n\t\trear_list.push(test_list[i][test_list[i].length - 1]);\n\t}\n\treturn rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n  var result = [];\n  for (var i = 0; i < test_list.length; i++){\n    result.push(test_list[i][test_list[i].length - 1]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmp9qnbhdc4.js:15:10)\n    at Object.<anonymous> (/tmp/tmp9qnbhdc4.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i=0; i<test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        result_list[i] = test_list[i][test_list[i].length - 1];\n    }\n    return result_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i=0; i<test_list.length; i++){\n        result.push(test_list[i][test_list[i].length-1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i=0;i<test_list.length;i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length-1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        result_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length-1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n\tvar rear_list = [];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\trear_list.push(test_list[i][test_list[i].length - 1]);\n\t}\n\treturn rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n\tvar rear_list = [];\n\tfor (var i = 0; i < test_list.length; i++){\n\t\trear_list.push(test_list[i][1]);\n\t}\n\treturn rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmpx0ohq3qr.js:15:10)\n    at Object.<anonymous> (/tmp/tmpx0ohq3qr.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n  var new_list = [];\n  for(var i = 0; i < test_list.length; i++){\n    new_list.push(test_list[i][1]);\n  }\n  return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Rash',\n  'Varsha',\n  'Kil'\n]\n\nshould loosely deep-equal\n\n[\n  21,\n  20,\n  19\n]\n    at test (/tmp/tmptpoxzcoc.js:15:10)\n    at Object.<anonymous> (/tmp/tmptpoxzcoc.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Rash', 'Varsha', 'Kil' ],\n  expected: [ 21, 20, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n\tvar result = [];\n\tfor(var i = 0; i < test_list.length; i++){\n\t\tresult.push(test_list[i][test_list[i].length-1]);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for (var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n  var result = [];\n  for(var i = 0; i < test_list.length; i++){\n    result.push(test_list[i][test_list[i].length - 1]);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var new_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_list.push(test_list[i][test_list[i].length - 1]);\n    }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        result_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return result_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for(var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1666123260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var result = [];\n    for(var i = 0; i < test_list.length; i++){\n        result.push(test_list[i][test_list[i].length - 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract(test_list){\n    var rear_list = [];\n    for (var i = 0; i < test_list.length; i++){\n        rear_list.push(test_list[i][test_list[i].length-1]);\n    }\n    return rear_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rear_extract;\n  assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);\n  assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);\n  assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);\n}\n\ntest();",
      "timestamp": 1665510129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}