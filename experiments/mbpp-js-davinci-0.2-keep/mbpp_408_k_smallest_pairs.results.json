{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "js",
  "prompt": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var pairs = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return res;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_SAFE_INTEGER;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        res.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(count < k){\n        if(i < len1 && j < len2){\n            if(nums1[i] < nums2[j]){\n                result.push([nums1[i], nums2[j]]);\n                i++;\n            }else{\n                result.push([nums1[i], nums2[j]]);\n                j++;\n            }\n        }else if(i < len1){\n            result.push([nums1[i], nums2[j-1]]);\n            i++;\n        }else if(j < len2){\n            result.push([nums1[i-1], nums2[j]]);\n            j++;\n        }\n        count++;\n    }\n    return result;\n}\n\nvar nums1 = [1,7,11];\nvar nums2 = [2,4,6];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmp86xzf60j.js:38:10)\n    at Object.<anonymous> (/tmp/tmp86xzf60j.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var len = len1 * len2;\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    var temp = [];\n    while(count < k && i < len1 && j < len2){\n        if(nums1[i] < nums2[j]){\n            temp.push(nums1[i]);\n            temp.push(nums2[j]);\n            result.push(temp);\n            temp = [];\n            i++;\n            count++;\n        }else if(nums1[i] > nums2[j]){\n            temp.push(nums1[i]);\n            temp.push(nums2[j]);\n            result.push(temp);\n            temp = [];\n            j++;\n            count++;\n        }else{\n            temp.push(nums1[i]);\n            temp.push(nums2[j]);\n            result.push(temp);\n            temp = [];\n            i++;\n            j++;\n            count++;\n        }\n    }\n    return result;\n}\n\nvar nums1 = [1,2,3];\nvar nums2 = [4,5,6];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmp_re7wmtd.js:47:10)\n    at Object.<anonymous> (/tmp/tmp_re7wmtd.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0;\n    var j = 0;\n    while(i < len1 && j < len2 && k > 0){\n        var sum = nums1[i] + nums2[j];\n        if(sum < 0){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n            k--;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n            k--;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    6\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    3,\n    2\n  ],\n  [\n    1,\n    6\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    6\n  ],\n  [\n    7,\n    2\n  ]\n]\n    at test (/tmp/tmpj7bnt2a8.js:30:10)\n    at Object.<anonymous> (/tmp/tmpj7bnt2a8.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 1, 4 ], [ 1, 6 ] ],\n  expected: [\n    [ 1, 2 ], [ 1, 4 ],\n    [ 3, 2 ], [ 1, 6 ],\n    [ 3, 4 ], [ 3, 6 ],\n    [ 7, 2 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 == 0 || len2 == 0 || k == 0) return res;\n    let index = new Array(len1).fill(0);\n    while(k-- > 0){\n        let min_val = Infinity;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2) continue;\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index == -1) break;\n        res.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var res = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    res.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return res.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    var index = new Array(len1).fill(0);\n    while(k > 0){\n        var min_val = Number.MAX_VALUE;\n        var min_index = -1;\n        for(var i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(count < k && i < len1 && j < len2){\n        var sum = nums1[i] + nums2[j];\n        if(result.length === 0){\n            result.push([nums1[i], nums2[j]]);\n            count++;\n        }else{\n            var len = result.length;\n            var flag = false;\n            for(var m = 0; m < len; m++){\n                var temp = result[m][0] + result[m][1];\n                if(sum < temp){\n                    result.splice(m, 0, [nums1[i], nums2[j]]);\n                    flag = true;\n                    break;\n                }\n            }\n            if(!flag){\n                result.push([nums1[i], nums2[j]]);\n            }\n            count++;\n        }\n        if(j < len2 - 1){\n            j++;\n        }else{\n            i++;\n            j = 0;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let i = 0;\n    let j = 0;\n    while(i < len1 && j < len2 && k > 0){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n        k--;\n    }\n    while(i < len1 && k > 0){\n        result.push([nums1[i], nums2[j-1]]);\n        i++;\n        k--;\n    }\n    while(j < len2 && k > 0){\n        result.push([nums1[i-1], nums2[j]]);\n        j++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmp6x6ipecs.js:36:10)\n    at Object.<anonymous> (/tmp/tmp6x6ipecs.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let index = [];\n    for(let i = 0; i < len1; i++){\n        index.push(0);\n    }\n    while(k > 0){\n        let min = Infinity;\n        let minIndex = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] < len2 && nums1[i] + nums2[index[i]] < min){\n                min = nums1[i] + nums2[index[i]];\n                minIndex = i;\n            }\n        }\n        if(minIndex == -1) break;\n        result.push([nums1[minIndex], nums2[index[minIndex]]]);\n        index[minIndex]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0) return result;\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Infinity;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2) continue;\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1) break;\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var res = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return res;\n    }\n    var index = new Array(len1).fill(0);\n    while(k > 0){\n        var min_val = Number.MAX_VALUE;\n        var min_index = -1;\n        for(var i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        res.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    if(nums1.length === 0 || nums2.length === 0 || k === 0) return res;\n    let pq = new PriorityQueue({ comparator: (a, b) => a[0] + a[1] - (b[0] + b[1]) });\n    for(let i = 0; i < nums1.length && i < k; i++){\n        pq.enqueue([nums1[i], nums2[0], 0]);\n    }\n    while(k-- > 0 && pq.length > 0){\n        let [n1, n2, index] = pq.dequeue();\n        res.push([n1, n2]);\n        if(index === nums2.length - 1) continue;\n        pq.enqueue([n1, nums2[index + 1], index + 1]);\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "/tmp/tmpkpocj447.js:5\n    let pq = new PriorityQueue({ comparator: (a, b) => a[0] + a[1] - (b[0] + b[1]) });\n             ^\n\nReferenceError: PriorityQueue is not defined\n    at k_smallest_pairs (/tmp/tmpkpocj447.js:5:14)\n    at test (/tmp/tmpkpocj447.js:23:20)\n    at Object.<anonymous> (/tmp/tmpkpocj447.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let index = new Array(len1).fill(0);\n    while(k > 0 && len1 > 0 && len2 > 0){\n        let min_val = Infinity;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] < len2 && nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        if(index[min_index] == len2){\n            len1--;\n        }\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    3,\n    2\n  ],\n  [\n    1,\n    6\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    6\n  ],\n  [\n    undefined,\n    undefined\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    3,\n    2\n  ],\n  [\n    1,\n    6\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    6\n  ],\n  [\n    7,\n    2\n  ]\n]\n    at test (/tmp/tmpd3k2luss.js:33:10)\n    at Object.<anonymous> (/tmp/tmpd3k2luss.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 2 ],\n    [ 1, 4 ],\n    [ 3, 2 ],\n    [ 1, 6 ],\n    [ 3, 4 ],\n    [ 3, 6 ],\n    [ undefined, undefined ]\n  ],\n  expected: [\n    [ 1, 2 ], [ 1, 4 ],\n    [ 3, 2 ], [ 1, 6 ],\n    [ 3, 4 ], [ 3, 6 ],\n    [ 7, 2 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0){\n        return res;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_VALUE;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        res.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n\tvar result = [];\n\tvar i = 0;\n\tvar j = 0;\n\twhile(i < nums1.length && j < nums2.length && k > 0){\n\t\tresult.push([nums1[i], nums2[j]]);\n\t\tif(nums1[i] < nums2[j]){\n\t\t\ti++;\n\t\t}else{\n\t\t\tj++;\n\t\t}\n\t\tk--;\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmp0sqeyfi4.js:23:10)\n    at Object.<anonymous> (/tmp/tmp0sqeyfi4.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_VALUE;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    res.sort((a,b) => a[0] + a[1] - b[0] - b[1]);\n    return res.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var pairs = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(pairs[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var pairs = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var pairs = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let i = 0;\n    let j = 0;\n    while(i < nums1.length && j < nums2.length && result.length < k){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmp95l7a6yl.js:23:10)\n    at Object.<anonymous> (/tmp/tmp95l7a6yl.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    res.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return res.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    res.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return res.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0;\n    var j = 0;\n    while(i < len1 && j < len2){\n        var sum = nums1[i] + nums2[j];\n        if(result.length < k){\n            result.push([nums1[i], nums2[j]]);\n        }\n        else{\n            var max = result[0][0] + result[0][1];\n            var index = 0;\n            for(var m = 1; m < result.length; m++){\n                var temp = result[m][0] + result[m][1];\n                if(temp > max){\n                    index = m;\n                    max = temp;\n                }\n            }\n            if(sum < max){\n                result[index] = [nums1[i], nums2[j]];\n            }\n            else{\n                break;\n            }\n        }\n        if(i < len1 - 1 && j < len2 - 1){\n            if(nums1[i + 1] + nums2[j] < nums1[i] + nums2[j + 1]){\n                i++;\n            }\n            else{\n                j++;\n            }\n        }\n        else if(i < len1 - 1){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    6\n  ],\n  [\n    3,\n    6\n  ],\n  [\n    7,\n    6\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    3,\n    2\n  ],\n  [\n    1,\n    6\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    6\n  ],\n  [\n    7,\n    2\n  ]\n]\n    at test (/tmp/tmpdz4_hf9v.js:55:10)\n    at Object.<anonymous> (/tmp/tmpdz4_hf9v.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 1, 4 ], [ 1, 6 ], [ 3, 6 ], [ 7, 6 ] ],\n  expected: [\n    [ 1, 2 ], [ 1, 4 ],\n    [ 3, 2 ], [ 1, 6 ],\n    [ 3, 4 ], [ 3, 6 ],\n    [ 7, 2 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a,b) => (a[0] + a[1]) - (b[0] + b[1]));\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    var index = [];\n    for(var i = 0; i < len1; i++){\n        index[i] = 0;\n    }\n    for(var i = 0; i < k; i++){\n        var min_val = Number.MAX_VALUE;\n        var min_index = -1;\n        for(var j = 0; j < len1; j++){\n            if(index[j] < len2 && nums1[j] + nums2[index[j]] < min_val){\n                min_val = nums1[j] + nums2[index[j]];\n                min_index = j;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        var pair = [];\n        pair.push(nums1[min_index]);\n        pair.push(nums2[index[min_index]]);\n        result.push(pair);\n        index[min_index]++;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    for(let i = 0; i < len1; i++){\n        for(let j = 0; j < len2; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => {\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return arr.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && k > 0){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n        k--;\n    }\n    while(i < nums1.length && k > 0){\n        result.push([nums1[i], nums2[j-1]]);\n        i++;\n        k--;\n    }\n    while(j < nums2.length && k > 0){\n        result.push([nums1[i-1], nums2[j]]);\n        j++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpuwmmg41b.js:34:10)\n    at Object.<anonymous> (/tmp/tmpuwmmg41b.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var len = len1 * len2;\n    if(len === 0) return result;\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(count < k && i < len1 && j < len2){\n        var sum = nums1[i] + nums2[j];\n        var min = sum;\n        var min_i = i;\n        var min_j = j;\n        for(var m = i; m < len1; m++){\n            for(var n = j; n < len2; n++){\n                var sum = nums1[m] + nums2[n];\n                if(sum < min){\n                    min = sum;\n                    min_i = m;\n                    min_j = n;\n                }\n            }\n        }\n        result.push([nums1[min_i], nums1[min_j]]);\n        i = min_i;\n        j = min_j;\n        count++;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    1\n  ],\n  [\n    1,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmp6w1ifxt_.js:39:10)\n    at Object.<anonymous> (/tmp/tmp6w1ifxt_.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 1 ], [ 1, 1 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0;\n    var j = 0;\n    while(i < len1 && j < len2){\n        var sum = nums1[i] + nums2[j];\n        var pair = [nums1[i], nums2[j]];\n        if(result.length < k){\n            result.push(pair);\n        }\n        else{\n            var max = result[0];\n            for(var m = 1; m < result.length; m++){\n                if(result[m][0] + result[m][1] > max[0] + max[1]){\n                    max = result[m];\n                }\n            }\n            if(max[0] + max[1] > sum){\n                result.splice(result.indexOf(max), 1);\n                result.push(pair);\n            }\n        }\n        if(i < len1 - 1 && j < len2 - 1){\n            if(nums1[i + 1] + nums2[j] < nums1[i] + nums2[j + 1]){\n                i++;\n            }\n            else{\n                j++;\n            }\n        }\n        else if(i < len1 - 1){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    6\n  ],\n  [\n    3,\n    6\n  ],\n  [\n    7,\n    6\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    3,\n    2\n  ],\n  [\n    1,\n    6\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    6\n  ],\n  [\n    7,\n    2\n  ]\n]\n    at test (/tmp/tmpep9yxiqo.js:51:10)\n    at Object.<anonymous> (/tmp/tmpep9yxiqo.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 1, 4 ], [ 1, 6 ], [ 3, 6 ], [ 7, 6 ] ],\n  expected: [\n    [ 1, 2 ], [ 1, 4 ],\n    [ 3, 2 ], [ 1, 6 ],\n    [ 3, 4 ], [ 3, 6 ],\n    [ 7, 2 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var result = [];\n    for(var i = 0; i < k && i < arr.length; i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && result.length < k){\n        var sum = nums1[i] + nums2[j];\n        if(result.length === 0){\n            result.push([nums1[i], nums2[j]]);\n        }\n        else{\n            var flag = false;\n            for(var m = 0; m < result.length; m++){\n                var temp = result[m][0] + result[m][1];\n                if(sum < temp){\n                    result.splice(m, 0, [nums1[i], nums2[j]]);\n                    flag = true;\n                    break;\n                }\n            }\n            if(!flag){\n                result.push([nums1[i], nums2[j]]);\n            }\n        }\n        if(j < nums2.length - 1){\n            j++;\n        }\n        else{\n            i++;\n            j = 0;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    res.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return res.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a,b) => a[0] + a[1] - b[0] - b[1]);\n    let result = [];\n    for(let i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 == 0 || len2 == 0 || k == 0){\n        return result;\n    }\n    var index = new Array(len1);\n    for(var i = 0; i < len1; i++){\n        index[i] = 0;\n    }\n    for(var i = 0; i < k && i < len1 * len2; i++){\n        var min_val = Number.MAX_VALUE;\n        var min_index = -1;\n        for(var j = 0; j < len1; j++){\n            if(index[j] < len2 && nums1[j] + nums2[index[j]] < min_val){\n                min_val = nums1[j] + nums2[index[j]];\n                min_index = j;\n            }\n        }\n        if(min_index != -1){\n            var temp = [];\n            temp.push(nums1[min_index]);\n            temp.push(nums2[index[min_index]]);\n            result.push(temp);\n            index[min_index]++;\n        }\n    }\n    return result;\n}\n\nvar nums1 = [1, 7, 11];\nvar nums2 = [2, 4, 6];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var len = len1 * len2;\n    if(len < k) return result;\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(count < k){\n        var temp = [];\n        var min = nums1[i] + nums2[j];\n        var min_i = i;\n        var min_j = j;\n        for(var m = i; m < len1; m++){\n            for(var n = j; n < len2; n++){\n                if(nums1[m] + nums2[n] < min){\n                    min = nums1[m] + nums2[n];\n                    min_i = m;\n                    min_j = n;\n                }\n            }\n        }\n        temp.push(nums1[min_i]);\n        temp.push(nums2[min_j]);\n        result.push(temp);\n        count++;\n        i = min_i;\n        j = min_j + 1;\n        if(j >= len2){\n            i++;\n            j = 0;\n        }\n    }\n    return result;\n}\n\nvar nums1 = [1,7,11];\nvar nums2 = [2,4,6];\nvar k = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    6\n  ],\n  [\n    3,\n    2\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    6\n  ],\n  [\n    7,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    3,\n    2\n  ],\n  [\n    1,\n    6\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    6\n  ],\n  [\n    7,\n    2\n  ]\n]\n    at test (/tmp/tmpwo7789yt.js:49:10)\n    at Object.<anonymous> (/tmp/tmpwo7789yt.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 2 ], [ 1, 4 ],\n    [ 1, 6 ], [ 3, 2 ],\n    [ 3, 4 ], [ 3, 6 ],\n    [ 7, 2 ]\n  ],\n  expected: [\n    [ 1, 2 ], [ 1, 4 ],\n    [ 3, 2 ], [ 1, 6 ],\n    [ 3, 4 ], [ 3, 6 ],\n    [ 7, 2 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 === 0 || len2 === 0){\n        return result;\n    }\n    var minHeap = new MinHeap();\n    for(var i = 0; i < len1; i++){\n        minHeap.insert(nums1[i] + nums2[0], [nums1[i], nums2[0]]);\n    }\n    for(var j = 0; j < k && !minHeap.isEmpty(); j++){\n        var pair = minHeap.extractMin();\n        result.push(pair.value);\n        var last = pair.value[1];\n        if(last < nums2[len2 - 1]){\n            var idx = nums2.indexOf(last);\n            minHeap.insert(pair.value[0] + nums2[idx + 1], [pair.value[0], nums2[idx + 1]]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "/tmp/tmpbhv5inpp.js:9\n    var minHeap = new MinHeap();\n                  ^\n\nReferenceError: MinHeap is not defined\n    at k_smallest_pairs (/tmp/tmpbhv5inpp.js:9:19)\n    at test (/tmp/tmpbhv5inpp.js:30:20)\n    at Object.<anonymous> (/tmp/tmpbhv5inpp.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_VALUE;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n  var result = [];\n  var len1 = nums1.length;\n  var len2 = nums2.length;\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  while(i < len1 && j < len2 && count < k){\n    if(nums1[i] <= nums2[j]){\n      result.push([nums1[i], nums2[j]]);\n      i++;\n    }else{\n      result.push([nums1[i], nums2[j]]);\n      j++;\n    }\n    count++;\n  }\n  while(i < len1 && count < k){\n    result.push([nums1[i], nums2[j-1]]);\n    i++;\n    count++;\n  }\n  while(j < len2 && count < k){\n    result.push([nums1[i-1], nums2[j]]);\n    j++;\n    count++;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmps3s37ep8.js:37:10)\n    at Object.<anonymous> (/tmp/tmps3s37ep8.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    res.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return res.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let i = 0;\n    let j = 0;\n    while(i < nums1.length && j < nums2.length && k > 0){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n            k--;\n        }\n        else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n            k--;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpzfque4m_.js:26:10)\n    at Object.<anonymous> (/tmp/tmpzfque4m_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    res.sort((a,b) => a[0] + a[1] - b[0] - b[1]);\n    return res.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var ret = [];\n    for(var i = 0; i < k && i < arr.length; i++){\n        ret.push(arr[i]);\n    }\n    return ret;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n  var pairs = [];\n  for(var i = 0; i < nums1.length; i++){\n    for(var j = 0; j < nums2.length; j++){\n      pairs.push([nums1[i], nums2[j]]);\n    }\n  }\n  pairs.sort(function(a, b){\n    return a[0] + a[1] - b[0] - b[1];\n  });\n  return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    var index = [];\n    for(var i = 0; i < len1; i++){\n        index[i] = 0;\n    }\n    while(k > 0){\n        var min_val = Number.MAX_VALUE;\n        var min_index = -1;\n        for(var i = 0; i < len1; i++){\n            if(index[i] < len2 && nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    return res.sort((a, b) => a[0] + a[1] - b[0] - b[1]).slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a,b) => a[0] + a[1] - b[0] - b[1]);\n    return arr.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    if(nums1.length === 0 || nums2.length === 0 || k === 0) return [];\n    let result = [];\n    let heap = new MinHeap();\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            if(heap.size() < k){\n                heap.add([nums1[i], nums2[j]]);\n            }else{\n                let sum = nums1[i] + nums2[j];\n                let top = heap.peek()[0] + heap.peek()[1];\n                if(sum < top){\n                    heap.poll();\n                    heap.add([nums1[i], nums2[j]]);\n                }\n            }\n        }\n    }\n    while(heap.size() > 0){\n        result.push(heap.poll());\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "/tmp/tmp0n9q96r4.js:5\n    let heap = new MinHeap();\n               ^\n\nReferenceError: MinHeap is not defined\n    at k_smallest_pairs (/tmp/tmp0n9q96r4.js:5:16)\n    at test (/tmp/tmp0n9q96r4.js:31:20)\n    at Object.<anonymous> (/tmp/tmp0n9q96r4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_SAFE_INTEGER;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_SAFE_INTEGER;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return arr.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var pairs = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && pairs.length < k){\n        if(nums1[i] < nums2[j]){\n            pairs.push([nums1[i], nums2[j]]);\n            i++;\n        }\n        else{\n            pairs.push([nums1[i], nums2[j]]);\n            j++;\n        }\n    }\n    return pairs;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpfpqx05y8.js:24:10)\n    at Object.<anonymous> (/tmp/tmpfpqx05y8.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let pairs = [];\n    for (let i = 0; i < nums1.length; i++){\n        for (let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < len1 && j < len2 && count < k){\n        var pair = [];\n        if(nums1[i] < nums2[j]){\n            pair.push(nums1[i]);\n            pair.push(nums2[j]);\n            result.push(pair);\n            i++;\n        }else{\n            pair.push(nums1[i]);\n            pair.push(nums2[j]);\n            result.push(pair);\n            j++;\n        }\n        count++;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpa9z8btwd.js:32:10)\n    at Object.<anonymous> (/tmp/tmpa9z8btwd.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n  let result = [];\n  let len1 = nums1.length;\n  let len2 = nums2.length;\n  let i = 0;\n  let j = 0;\n  while(i < len1 && j < len2 && result.length < k){\n    if(nums1[i] < nums2[j]){\n      result.push([nums1[i], nums2[j]]);\n      i++;\n    }else{\n      result.push([nums1[i], nums2[j]]);\n      j++;\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmp9d7g5yck.js:25:10)\n    at Object.<anonymous> (/tmp/tmp9d7g5yck.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    res.sort((a,b) => a[0] + a[1] - b[0] - b[1]);\n    return res.slice(0,k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let i = 0;\n    let j = 0;\n    while(i < len1 && j < len2 && k > 0){\n        result.push([nums1[i], nums2[j]]);\n        if(nums1[i] < nums2[j]){\n            i++;\n        }else{\n            j++;\n        }\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpuit2lglr.js:25:10)\n    at Object.<anonymous> (/tmp/tmpuit2lglr.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_VALUE;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    res.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return res.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_VALUE;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let i = 0;\n    let j = 0;\n    while(i < nums1.length && j < nums2.length && result.length < k){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmp95l7a6yl.js:23:10)\n    at Object.<anonymous> (/tmp/tmp95l7a6yl.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_VALUE;\n        let index_min = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                index_min = i;\n            }\n        }\n        if(index_min === -1){\n            break;\n        }\n        result.push([nums1[index_min], nums2[index[index_min]]]);\n        index[index_min]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0;\n    var j = 0;\n    while(i < len1 && j < len2 && k > 0){\n        var sum = nums1[i] + nums2[j];\n        if(sum < 0){\n            i++;\n        }else if(sum > 0){\n            j++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            i++;\n            j++;\n            k--;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmptmbjkp1g.js:29:10)\n    at Object.<anonymous> (/tmp/tmptmbjkp1g.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let i = 0;\n    let j = 0;\n    while(i < len1 && j < len2 && result.length < k){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmp0nbivqp1.js:25:10)\n    at Object.<anonymous> (/tmp/tmp0nbivqp1.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0;\n    var j = 0;\n    while(i<len1 && j<len2 && k>0){\n        result.push([nums1[i], nums2[j]]);\n        if(nums1[i]<nums2[j]){\n            i++;\n        }else{\n            j++;\n        }\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpymkxyucc.js:25:10)\n    at Object.<anonymous> (/tmp/tmpymkxyucc.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    return res.sort((a, b) => a[0] + a[1] - b[0] - b[1]).slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    if(nums1.length === 0 || nums2.length === 0 || k === 0){\n        return result;\n    }\n    var minHeap = new MinHeap();\n    for(var i = 0; i < nums1.length && i < k; i++){\n        minHeap.add(new Pair(nums1[i], nums2[0], 0));\n    }\n    for(var i = 0; i < k && !minHeap.isEmpty(); i++){\n        var pair = minHeap.poll();\n        result.push([pair.first, pair.second]);\n        var nextIndex = pair.secondIndex + 1;\n        if(nextIndex < nums2.length){\n            minHeap.add(new Pair(pair.first, nums2[nextIndex], nextIndex));\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "/tmp/tmpzvepxm43.js:7\n    var minHeap = new MinHeap();\n                  ^\n\nReferenceError: MinHeap is not defined\n    at k_smallest_pairs (/tmp/tmpzvepxm43.js:7:19)\n    at test (/tmp/tmpzvepxm43.js:27:20)\n    at Object.<anonymous> (/tmp/tmpzvepxm43.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let i = 0;\n    let j = 0;\n    while(i < len1 && j < len2 && k > 0){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n        k--;\n    }\n    while(i < len1 && k > 0){\n        result.push([nums1[i], nums2[j - 1]]);\n        i++;\n        k--;\n    }\n    while(j < len2 && k > 0){\n        result.push([nums1[i - 1], nums2[j]]);\n        j++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmphpejpr5o.js:36:10)\n    at Object.<anonymous> (/tmp/tmphpejpr5o.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && k > 0){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n            k--;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n            k--;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpqs06ecqn.js:25:10)\n    at Object.<anonymous> (/tmp/tmpqs06ecqn.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let i = 0;\n    let j = 0;\n    while(i < len1 && j < len2 && k > 0){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n        k--;\n    }\n    while(i < len1 && k > 0){\n        result.push([nums1[i], nums2[j-1]]);\n        i++;\n        k--;\n    }\n    while(j < len2 && k > 0){\n        result.push([nums1[i-1], nums2[j]]);\n        j++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmp6x6ipecs.js:36:10)\n    at Object.<anonymous> (/tmp/tmp6x6ipecs.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a,b) => a[0] + a[1] - b[0] - b[1]);\n    return arr.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return arr.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    while(i < nums1.length && j < nums2.length && count < k){\n        var sum = nums1[i] + nums2[j];\n        if(sum < 0){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n            count++;\n        }\n        else if(sum > 0){\n            result.push([nums1[i], nums2[j]]);\n            j++;\n            count++;\n        }\n        else{\n            result.push([nums1[i], nums2[j]]);\n            i++;\n            j++;\n            count++;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    6\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    3,\n    2\n  ],\n  [\n    1,\n    6\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    6\n  ],\n  [\n    7,\n    2\n  ]\n]\n    at test (/tmp/tmpeqhnrbdc.js:36:10)\n    at Object.<anonymous> (/tmp/tmpeqhnrbdc.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 1, 4 ], [ 1, 6 ] ],\n  expected: [\n    [ 1, 2 ], [ 1, 4 ],\n    [ 3, 2 ], [ 1, 6 ],\n    [ 3, 4 ], [ 3, 6 ],\n    [ 7, 2 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n  var result = [];\n  var len1 = nums1.length;\n  var len2 = nums2.length;\n  var i = 0;\n  var j = 0;\n  while(i < len1 && j < len2 && k > 0){\n    var sum = nums1[i] + nums2[j];\n    if(sum < 0){\n      result.push([nums1[i], nums2[j]]);\n      i++;\n      k--;\n    }else{\n      result.push([nums1[i], nums2[j]]);\n      j++;\n      k--;\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    6\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    3,\n    2\n  ],\n  [\n    1,\n    6\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    6\n  ],\n  [\n    7,\n    2\n  ]\n]\n    at test (/tmp/tmpz2ulvj1c.js:30:10)\n    at Object.<anonymous> (/tmp/tmpz2ulvj1c.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 1, 4 ], [ 1, 6 ] ],\n  expected: [\n    [ 1, 2 ], [ 1, 4 ],\n    [ 3, 2 ], [ 1, 6 ],\n    [ 3, 4 ], [ 3, 6 ],\n    [ 7, 2 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i=0; i<nums1.length; i++){\n        for(let j=0; j<nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0]+a[1]-b[0]-b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    res.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return res.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let i = 0;\n    let j = 0;\n    while(i < len1 && j < len2 && k > 0){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpnk2olaui.js:26:10)\n    at Object.<anonymous> (/tmp/tmpnk2olaui.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var res = [];\n    var len1 = nums1.length, len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0) return res;\n    var index = new Array(len1);\n    while(k-- > 0){\n        var min_val = Number.MAX_VALUE;\n        var in_min = -1;\n        for(var i = 0; i < len1; i++){\n            if(index[i] >= len2) continue;\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                in_min = i;\n            }\n        }\n        if(in_min === -1) break;\n        res.push([nums1[in_min], nums2[index[in_min]]]);\n        index[in_min]++;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpmem8ufr_.js:29:10)\n    at Object.<anonymous> (/tmp/tmpmem8ufr_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let index = new Array(len1).fill(0);\n    while(k-- > 0 && result.length < len1 * len2){\n        let min_val = Infinity;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] < len2 && nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1) break;\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n\tlet result = [];\n\tlet len1 = nums1.length;\n\tlet len2 = nums2.length;\n\tif(len1 == 0 || len2 == 0 || k == 0){\n\t\treturn result;\n\t}\n\tlet index = new Array(len1).fill(0);\n\twhile(k > 0){\n\t\tlet min_val = Number.MAX_VALUE;\n\t\tlet min_index = -1;\n\t\tfor(let i = 0; i < len1; i++){\n\t\t\tif(index[i] >= len2){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(nums1[i] + nums2[index[i]] < min_val){\n\t\t\t\tmin_val = nums1[i] + nums2[index[i]];\n\t\t\t\tmin_index = i;\n\t\t\t}\n\t\t}\n\t\tresult.push([nums1[min_index], nums2[index[min_index]]]);\n\t\tindex[min_index]++;\n\t\tk--;\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Infinity;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0) return result;\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Infinity;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2) continue;\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1) break;\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && k > 0){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n        k--;\n    }\n    while(i < nums1.length && k > 0){\n        result.push([nums1[i], nums2[j-1]]);\n        i++;\n        k--;\n    }\n    while(j < nums2.length && k > 0){\n        result.push([nums1[i-1], nums2[j]]);\n        j++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpuwmmg41b.js:34:10)\n    at Object.<anonymous> (/tmp/tmpuwmmg41b.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && result.length < k){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }\n        else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpie653d9v.js:24:10)\n    at Object.<anonymous> (/tmp/tmpie653d9v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i=0; i<nums1.length; i++){\n        for(var j=0; j<nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a,b){\n        return a[0]+a[1] - b[0]-b[1];\n    });\n    return result.slice(0,k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 == 0 || len2 == 0 || k == 0) return result;\n    var index = new Array(len1);\n    for(var i = 0; i < len1; i++){\n        index[i] = 0;\n    }\n    for(var i = 0; i < k; i++){\n        var min_val = Number.MAX_VALUE;\n        var min_index = -1;\n        for(var j = 0; j < len1; j++){\n            if(index[j] < len2 && nums1[j] + nums2[index[j]] < min_val){\n                min_val = nums1[j] + nums2[index[j]];\n                min_index = j;\n            }\n        }\n        if(min_index == -1) break;\n        var pair = [];\n        pair.push(nums1[min_index]);\n        pair.push(nums2[index[min_index]]);\n        result.push(pair);\n        index[min_index]++;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var i = 0, j = 0;\n    while(i < len1 && j < len2 && k > 0){\n        var sum = nums1[i] + nums2[j];\n        if(result.length === 0){\n            result.push([nums1[i], nums2[j]]);\n        }else{\n            var len = result.length;\n            var index = 0;\n            while(index < len && result[index][0] + result[index][1] < sum){\n                index++;\n            }\n            result.splice(index, 0, [nums1[i], nums2[j]]);\n        }\n        if(i + 1 < len1 && nums1[i + 1] + nums2[j] < nums1[i] + nums2[j + 1]){\n            i++;\n        }else{\n            j++;\n        }\n        k--;\n    }\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpy6kac7y4.js:34:10)\n    at Object.<anonymous> (/tmp/tmpy6kac7y4.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let i = 0;\n    let j = 0;\n    while(i < len1 && j < len2 && result.length < k){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmp0nbivqp1.js:25:10)\n    at Object.<anonymous> (/tmp/tmp0nbivqp1.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let i = 0;\n    let j = 0;\n    while(k > 0 && i < len1 && j < len2){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n        k--;\n    }\n    while(k > 0 && i < len1){\n        result.push([nums1[i], nums2[len2-1]]);\n        i++;\n        k--;\n    }\n    while(k > 0 && j < len2){\n        result.push([nums1[len1-1], nums2[j]]);\n        j++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmp3aw_k6e0.js:36:10)\n    at Object.<anonymous> (/tmp/tmp3aw_k6e0.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    res.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return res.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 === 0 || len2 === 0){\n        return result;\n    }\n    var index = [];\n    for(var i = 0; i < len1; i++){\n        index[i] = 0;\n    }\n    while(k > 0){\n        var min = Number.MAX_VALUE;\n        var t = -1;\n        for(var i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min){\n                min = nums1[i] + nums2[index[i]];\n                t = i;\n            }\n        }\n        if(t === -1){\n            break;\n        }\n        result.push([nums1[t], nums2[index[t]]]);\n        index[t]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && result.length < k){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }\n        else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpie653d9v.js:24:10)\n    at Object.<anonymous> (/tmp/tmpie653d9v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var pairs = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0) return result;\n    var index = new Array(len1);\n    for(var i = 0; i < len1; i++){\n        index[i] = 0;\n    }\n    while(k-- > 0){\n        var min_val = Number.MAX_VALUE;\n        var min_index = -1;\n        for(var i = 0; i < len1; i++){\n            if(index[i] >= len2) continue;\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1) break;\n        var temp = [];\n        temp.push(nums1[min_index]);\n        temp.push(nums2[index[min_index]]);\n        result.push(temp);\n        index[min_index]++;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    res.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return res.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    if(nums1.length === 0 || nums2.length === 0 || k === 0){\n        return result;\n    }\n    let pq = new PriorityQueue();\n    for(let i = 0; i < nums1.length && i < k; i++){\n        pq.enqueue(new Pair(nums1[i], nums2[0], 0));\n    }\n    while(k-- > 0 && !pq.isEmpty()){\n        let pair = pq.dequeue();\n        result.push([pair.first, pair.second]);\n        if(pair.index === nums2.length - 1){\n            continue;\n        }\n        pq.enqueue(new Pair(pair.first, nums2[pair.index + 1], pair.index + 1));\n    }\n    return result;\n}\n\nclass Pair{\n    constructor(first, second, index){\n        this.first = first;\n        this.second = second;\n        this.index = index;\n    }\n}\n\nclass PriorityQueue{\n    constructor(){\n        this.queue = [];\n    }\n\n    enqueue(item){\n        this.queue.push(item);\n        this.queue.sort((a, b) => a.first + a.second - b.first - b.second);\n    }\n\n    dequeue(){\n        return this.queue.shift();\n    }\n\n    isEmpty(){\n        return this.queue.length === 0;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpjt1gnvpg.js:54:10)\n    at Object.<anonymous> (/tmp/tmpjt1gnvpg.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 == 0 || len2 == 0 || k == 0){\n        return result;\n    }\n    var heap = new Heap();\n    for(var i = 0; i < len1; i++){\n        heap.add([nums1[i], nums2[0], 0]);\n    }\n    for(var i = 0; i < k && !heap.isEmpty(); i++){\n        var cur = heap.poll();\n        result.push([cur[0], cur[1]]);\n        if(cur[2] == len2 - 1){\n            continue;\n        }\n        heap.add([cur[0], nums2[cur[2] + 1], cur[2] + 1]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "/tmp/tmpayc227g0.js:9\n    var heap = new Heap();\n               ^\n\nReferenceError: Heap is not defined\n    at k_smallest_pairs (/tmp/tmpayc227g0.js:9:16)\n    at test (/tmp/tmpayc227g0.js:29:20)\n    at Object.<anonymous> (/tmp/tmpayc227g0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let index = new Array(len1).fill(0);\n    while(k-- > 0 && result.length < len1 * len2){\n        let min_val = Infinity;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] < len2 && nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index == -1) break;\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let maxHeap = new MaxHeap();\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            let sum = nums1[i] + nums2[j];\n            maxHeap.insert(sum);\n        }\n    }\n    for(let i = 0; i < k; i++){\n        result.push(maxHeap.extractMax());\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "/tmp/tmpijrgos1a.js:4\n    let maxHeap = new MaxHeap();\n                  ^\n\nReferenceError: MaxHeap is not defined\n    at k_smallest_pairs (/tmp/tmpijrgos1a.js:4:19)\n    at test (/tmp/tmpijrgos1a.js:22:20)\n    at Object.<anonymous> (/tmp/tmpijrgos1a.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let heap = new Heap(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    for(let i = 0; i < nums1.length && i < k; i++){\n        heap.push([nums1[i], nums2[0], 0]);\n    }\n    while(k-- > 0 && heap.size() > 0){\n        let top = heap.pop();\n        result.push([top[0], top[1]]);\n        let next = top[2] + 1;\n        if(next < nums2.length){\n            heap.push([top[0], nums2[next], next]);\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "/tmp/tmpwo1q96v8.js:4\n    let heap = new Heap(function(a, b){\n               ^\n\nReferenceError: Heap is not defined\n    at k_smallest_pairs (/tmp/tmpwo1q96v8.js:4:16)\n    at test (/tmp/tmpwo1q96v8.js:26:20)\n    at Object.<anonymous> (/tmp/tmpwo1q96v8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && result.length < k){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpxiz3lhta.js:23:10)\n    at Object.<anonymous> (/tmp/tmpxiz3lhta.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0) return result;\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Infinity;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2) continue;\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1) break;\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && result.length < k){\n        var pair = [nums1[i], nums2[j]];\n        result.push(pair);\n        if(nums1[i] < nums2[j]){\n            i++;\n        }else{\n            j++;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmp2q5d3h05.js:23:10)\n    at Object.<anonymous> (/tmp/tmp2q5d3h05.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let heap = new Heap(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    for(let i = 0; i < nums1.length && i < k; i++){\n        heap.push([nums1[i], nums2[0], 0]);\n    }\n    while(k > 0 && heap.size() > 0){\n        let [num1, num2, index] = heap.pop();\n        result.push([num1, num2]);\n        if(index === nums2.length - 1){\n            continue;\n        }\n        heap.push([num1, nums2[index + 1], index + 1]);\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "/tmp/tmpi1wnykac.js:4\n    let heap = new Heap(function(a, b){\n               ^\n\nReferenceError: Heap is not defined\n    at k_smallest_pairs (/tmp/tmpi1wnykac.js:4:16)\n    at test (/tmp/tmpi1wnykac.js:27:20)\n    at Object.<anonymous> (/tmp/tmpi1wnykac.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_SAFE_INTEGER;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 == 0 || len2 == 0) return result;\n    var index = new Array(len1).fill(0);\n    while(k > 0){\n        var min_val = Number.MAX_VALUE;\n        var min_index = -1;\n        for(var i = 0; i < len1; i++){\n            if(index[i] >= len2) continue;\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index == -1) break;\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let pairs = [];\n    let i = 0;\n    let j = 0;\n    while(pairs.length < k && i < nums1.length && j < nums2.length){\n        pairs.push([nums1[i], nums2[j]]);\n        if(j === nums2.length - 1){\n            i++;\n            j = 0;\n        }else{\n            j++;\n        }\n    }\n    return pairs;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    1,\n    6\n  ],\n  [\n    3,\n    2\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    6\n  ],\n  [\n    7,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ],\n  [\n    3,\n    2\n  ],\n  [\n    1,\n    6\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    3,\n    6\n  ],\n  [\n    7,\n    2\n  ]\n]\n    at test (/tmp/tmp7izxcono.js:25:10)\n    at Object.<anonymous> (/tmp/tmp7izxcono.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1, 2 ], [ 1, 4 ],\n    [ 1, 6 ], [ 3, 2 ],\n    [ 3, 4 ], [ 3, 6 ],\n    [ 7, 2 ]\n  ],\n  expected: [\n    [ 1, 2 ], [ 1, 4 ],\n    [ 3, 2 ], [ 1, 6 ],\n    [ 3, 4 ], [ 3, 6 ],\n    [ 7, 2 ]\n  ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let arr = [];\n    for(let i=0; i<nums1.length; i++){\n        for(let j=0; j<nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a,b) => a[0]+a[1]-b[0]-b[1]);\n    return arr.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && result.length < k){\n        var sum = nums1[i] + nums2[j];\n        if(result.length === 0){\n            result.push([nums1[i], nums2[j]]);\n        }\n        else{\n            var flag = false;\n            for(var m = 0; m < result.length; m++){\n                var sum_result = result[m][0] + result[m][1];\n                if(sum < sum_result){\n                    result.splice(m, 0, [nums1[i], nums2[j]]);\n                    flag = true;\n                    break;\n                }\n            }\n            if(!flag){\n                result.push([nums1[i], nums2[j]]);\n            }\n        }\n        if(j < nums2.length - 1){\n            j++;\n        }\n        else{\n            i++;\n            j = 0;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a,b) => a[0] + a[1] - b[0] - b[1]);\n    return arr.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && k > 0){\n        var pair = [nums1[i], nums2[j]];\n        result.push(pair);\n        if(nums1[i] < nums2[j]){\n            i++;\n        }else{\n            j++;\n        }\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpn5dwxgv4.js:24:10)\n    at Object.<anonymous> (/tmp/tmpn5dwxgv4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a,b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let pairs = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort((a,b) => a[0] + a[1] - b[0] - b[1]);\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return res;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_VALUE;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        res.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let maxHeap = new MaxHeap();\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            let sum = nums1[i] + nums2[j];\n            maxHeap.insert(sum);\n            if(maxHeap.size() > k){\n                maxHeap.extractMax();\n            }\n        }\n    }\n    while(maxHeap.size() > 0){\n        result.push(maxHeap.extractMax());\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "/tmp/tmppxxfyobk.js:4\n    let maxHeap = new MaxHeap();\n                  ^\n\nReferenceError: MaxHeap is not defined\n    at k_smallest_pairs (/tmp/tmppxxfyobk.js:4:19)\n    at test (/tmp/tmppxxfyobk.js:25:20)\n    at Object.<anonymous> (/tmp/tmppxxfyobk.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "ReferenceError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && k > 0){\n        var sum = nums1[i] + nums2[j];\n        if(result.length == 0){\n            result.push([nums1[i], nums2[j]]);\n            k--;\n        }\n        else{\n            var flag = false;\n            for(var m = 0; m < result.length; m++){\n                if(sum < result[m][0] + result[m][1]){\n                    result.splice(m, 0, [nums1[i], nums2[j]]);\n                    flag = true;\n                    break;\n                }\n            }\n            if(!flag){\n                result.push([nums1[i], nums2[j]]);\n            }\n            k--;\n        }\n        if(i == nums1.length - 1){\n            j++;\n        }\n        else if(j == nums2.length - 1){\n            i++;\n        }\n        else{\n            if(nums1[i] < nums2[j]){\n                i++;\n            }\n            else{\n                j++;\n            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpq50lib6z.js:49:10)\n    at Object.<anonymous> (/tmp/tmpq50lib6z.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return arr.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_SAFE_INTEGER;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_SAFE_INTEGER;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var pairs = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let i = 0;\n    let j = 0;\n    while(i < len1 && j < len2 && k > 0){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpnk2olaui.js:26:10)\n    at Object.<anonymous> (/tmp/tmpnk2olaui.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && k > 0){\n        var temp = [];\n        temp.push(nums1[i]);\n        temp.push(nums2[j]);\n        result.push(temp);\n        if(nums1[i] < nums2[j]){\n            i++;\n        }else{\n            j++;\n        }\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpypp4xkf6.js:26:10)\n    at Object.<anonymous> (/tmp/tmpypp4xkf6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let i = 0;\n    let j = 0;\n    while(i < len1 && j < len2 && k > 0){\n        if(nums1[i] < nums2[j]){\n            result.push([nums1[i], nums2[j]]);\n            i++;\n            k--;\n        }else{\n            result.push([nums1[i], nums2[j]]);\n            j++;\n            k--;\n        }\n    }\n    while(i < len1 && k > 0){\n        result.push([nums1[i], nums2[j-1]]);\n        i++;\n        k--;\n    }\n    while(j < len2 && k > 0){\n        result.push([nums1[i-1], nums2[j]]);\n        j++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpshq2q_f7.js:37:10)\n    at Object.<anonymous> (/tmp/tmpshq2q_f7.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < nums1.length && j < nums2.length && k > 0){\n        var pair = [nums1[i], nums2[j]];\n        result.push(pair);\n        if(nums1[i] < nums2[j]){\n            i++;\n        }else{\n            j++;\n        }\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmpn5dwxgv4.js:24:10)\n    at Object.<anonymous> (/tmp/tmpn5dwxgv4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return arr.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return arr.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    var index = [];\n    for(var i = 0; i < len1; i++){\n        index[i] = 0;\n    }\n    while(k > 0){\n        var min = Number.MAX_VALUE;\n        var t = -1;\n        for(var i = 0; i < len1; i++){\n            if(index[i] < len2 && nums1[i] + nums2[index[i]] < min){\n                min = nums1[i] + nums2[index[i]];\n                t = i;\n            }\n        }\n        if(t === -1){\n            break;\n        }\n        result.push([nums1[t], nums2[index[t]]]);\n        index[t]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 == 0 || len2 == 0 || k == 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_SAFE_INTEGER;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index == -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    let index = new Array(len1).fill(0);\n    while(k > 0){\n        let min_val = Number.MAX_SAFE_INTEGER;\n        let min_index = -1;\n        for(let i = 0; i < len1; i++){\n            if(index[i] >= len2){\n                continue;\n            }\n            if(nums1[i] + nums2[index[i]] < min_val){\n                min_val = nums1[i] + nums2[index[i]];\n                min_index = i;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        result.push([nums1[min_index], nums2[index[min_index]]]);\n        index[min_index]++;\n        k--;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    if(len1 === 0 || len2 === 0 || k === 0){\n        return result;\n    }\n    var index = [];\n    for(var i = 0; i < len1; i++){\n        index[i] = 0;\n    }\n    for(var i = 0; i < k; i++){\n        var min_val = Number.MAX_VALUE;\n        var min_index = -1;\n        for(var j = 0; j < len1; j++){\n            if(index[j] < len2 && nums1[j] + nums2[index[j]] < min_val){\n                min_val = nums1[j] + nums2[index[j]];\n                min_index = j;\n            }\n        }\n        if(min_index === -1){\n            break;\n        }\n        var pair = [];\n        pair.push(nums1[min_index]);\n        pair.push(nums2[index[min_index]]);\n        result.push(pair);\n        index[min_index]++;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var arr = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    var result = [];\n    for(var i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let res = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            res.push([nums1[i], nums2[j]]);\n        }\n    }\n    res.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return res.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var len = len1 * len2;\n    var i = 0;\n    var j = 0;\n    var count = 0;\n    var temp = [];\n    while(count < k && i < len1 && j < len2){\n        var sum = nums1[i] + nums2[j];\n        if(temp.length == 0){\n            temp.push(sum);\n            result.push([nums1[i], nums2[j]]);\n            count++;\n        }else{\n            var index = 0;\n            for(var m = 0; m < temp.length; m++){\n                if(temp[m] < sum){\n                    index++;\n                }\n            }\n            temp.splice(index, 0, sum);\n            result.splice(index, 0, [nums1[i], nums2[j]]);\n            count++;\n        }\n        if(i == len1 - 1){\n            j++;\n            i = 0;\n        }else{\n            i++;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    2\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    2\n  ],\n  [\n    1,\n    4\n  ]\n]\n    at test (/tmp/tmp_s19tta_.js:43:10)\n    at Object.<anonymous> (/tmp/tmp_s19tta_.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 2 ], [ 3, 2 ] ],\n  expected: [ [ 1, 2 ], [ 1, 4 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let arr = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            arr.push([nums1[i], nums2[j]]);\n        }\n    }\n    arr.sort((a, b) => a[0] + a[1] - b[0] - b[1]);\n    return arr.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var pairs = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            pairs.push([nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return pairs.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1665510119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    let result = [];\n    for(let i = 0; i < nums1.length; i++){\n        for(let j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort((a,b) => a[0] + a[1] - b[0] - b[1]);\n    return result.slice(0,k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        for(var j = 0; j < nums2.length; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122952,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs(nums1, nums2, k){\n    var result = [];\n    var len1 = nums1.length;\n    var len2 = nums2.length;\n    var len = len1 * len2;\n    if(len < k){\n        k = len;\n    }\n    var i, j;\n    for(i = 0; i < len1; i++){\n        for(j = 0; j < len2; j++){\n            result.push([nums1[i], nums2[j]]);\n        }\n    }\n    result.sort(function(a, b){\n        return a[0] + a[1] - b[0] - b[1];\n    });\n    return result.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = k_smallest_pairs;\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);\n  assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);\n}\n\ntest();",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}