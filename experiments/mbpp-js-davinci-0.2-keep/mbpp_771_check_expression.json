{
  "name": "mbpp_771_check_expression",
  "language": "js",
  "prompt": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    var stack = [];\n    var map = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    for(var i=0; i<exp.length; i++){\n        if(exp[i] === '(' || exp[i] === '[' || exp[i] === '{'){\n            stack.push(exp[i]);\n        }else{\n            var last = stack.pop();\n            if(exp[i] !== map[last]){\n                return false;\n            }\n        }\n    }\n    if(stack.length !== 0){\n        return false;\n    }\n    return true;\n}\n",
    "    var stack = [];\n    for(var i=0;i<exp.length;i++){\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='['){\n            stack.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']'){\n            if(stack.length==0){\n                return false;\n            }\n            else if(exp[i]==')' && stack[stack.length-1]=='('){\n                stack.pop();\n            }\n            else if(exp[i]=='}' && stack[stack.length-1]=='{'){\n                stack.pop();\n            }\n            else if(exp[i]==']' && stack[stack.length-1]=='['){\n                stack.pop();\n            }\n            else{\n                return false;\n            }\n        }\n    }\n    if(stack.length==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n",
    "    var stack = [];\n    for(var i = 0; i < exp.length; i++){\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '['){\n            stack.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']'){\n            if(stack.length == 0){\n                return false;\n            }\n            var last = stack.pop();\n            if(last == '(' && exp[i] != ')'){\n                return false;\n            }\n            if(last == '{' && exp[i] != '}'){\n                return false;\n            }\n            if(last == '[' && exp[i] != ']'){\n                return false;\n            }\n        }\n    }\n    if(stack.length != 0){\n        return false;\n    }\n    return true;\n}\n",
    "    var stack = [];\n    for(var i=0;i<exp.length;i++){\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '['){\n            stack.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']'){\n            if(stack.length == 0){\n                return false;\n            }\n            var last = stack.pop();\n            if(exp[i] == ')' && last != '('){\n                return false;\n            }\n            if(exp[i] == '}' && last != '{'){\n                return false;\n            }\n            if(exp[i] == ']' && last != '['){\n                return false;\n            }\n        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n    return false;\n}",
    "    let stack = [];\n    for(let i=0;i<exp.length;i++){\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='['){\n            stack.push(exp[i]);\n        }\n        else{\n            if(stack.length==0){\n                return false;\n            }\n            let top = stack.pop();\n            if(top=='(' && exp[i]!=')'){\n                return false;\n            }\n            if(top=='{' && exp[i]!='}'){\n                return false;\n            }\n            if(top=='[' && exp[i]!=']'){\n                return false;\n            }\n        }\n    }\n    if(stack.length==0){\n        return true;\n    }\n    return false;\n}\n",
    "    var stack = [];\n    var map = {\n        '}':'{',\n        ']':'[',\n        ')':'('\n    }\n    for(var i=0;i<exp.length;i++){\n        if(exp[i] === '{' || exp[i] === '[' || exp[i] === '('){\n            stack.push(exp[i]);\n        }else if(exp[i] === '}' || exp[i] === ']' || exp[i] === ')'){\n            if(stack.length === 0 || map[exp[i]] !== stack.pop()){\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    var stack = [];\n    for(var i=0;i<exp.length;i++){\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='['){\n            stack.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']'){\n            if(stack.length==0){\n                return false;\n            }\n            else{\n                var top = stack.pop();\n                if(exp[i]==')' && top!='('){\n                    return false;\n                }\n                else if(exp[i]=='}' && top!='{'){\n                    return false;\n                }\n                else if(exp[i]==']' && top!='['){\n                    return false;\n                }\n            }\n        }\n    }\n    if(stack.length==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "    var stack = [];\n    var open = {'{':'}','[':']','(':')'};\n    var closed = {'}':true,']':true,')':true};\n    for(var i=0;i<exp.length;i++){\n        var ch = exp[i];\n        if(open[ch]){\n            stack.push(ch);\n        }else if(closed[ch]){\n            if(open[stack.pop()]!=ch){\n                return false;\n            }\n        }\n    }\n    return stack.length==0;\n}\n",
    "    var stack = [];\n    for(var i=0;i<exp.length;i++){\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '['){\n            stack.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']'){\n            if(stack.length == 0){\n                return false;\n            }\n            else{\n                var last = stack.pop();\n                if(exp[i] == ')' && last != '('){\n                    return false;\n                }\n                else if(exp[i] == '}' && last != '{'){\n                    return false;\n                }\n                else if(exp[i] == ']' && last != '['){\n                    return false;\n                }\n            }\n        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "    var stack = [];\n    var open = ['(','{','['];\n    var close = [')','}',']'];\n    for(var i=0;i<exp.length;i++){\n        if(open.indexOf(exp[i])>-1){\n            stack.push(exp[i]);\n        }\n        else if(close.indexOf(exp[i])>-1){\n            var index = close.indexOf(exp[i]);\n            if(stack.length>0 && stack[stack.length-1] == open[index]){\n                stack.pop();\n            }\n            else{\n                return false;\n            }\n        }\n    }\n    if(stack.length>0){\n        return false;\n    }\n    return true;\n}",
    "    var stack = [];\n    var open = ['{','[','('];\n    var close = ['}',']',')'];\n    for(var i=0;i<exp.length;i++){\n        if(open.indexOf(exp[i])!=-1){\n            stack.push(exp[i]);\n        }\n        else if(close.indexOf(exp[i])!=-1){\n            var index = close.indexOf(exp[i]);\n            if(stack.length==0 || open[index]!=stack.pop()){\n                return false;\n            }\n        }\n    }\n    if(stack.length==0){\n        return true;\n    }\n    return false;\n}\n",
    "    var stack = [];\n    for(var i=0;i<exp.length;i++){\n        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='['){\n            stack.push(exp[i]);\n        }\n        else if(exp[i]==')' || exp[i]=='}' || exp[i]==']'){\n            if(stack.length==0){\n                return false;\n            }\n            var pop_element = stack.pop();\n            if(exp[i]==')' && pop_element!='('){\n                return false;\n            }\n            if(exp[i]=='}' && pop_element!='{'){\n                return false;\n            }\n            if(exp[i]==']' && pop_element!='['){\n                return false;\n            }\n        }\n    }\n    if(stack.length==0){\n        return true;\n    }\n    return false;\n}",
    "    var stack = [];\n    for(var i=0;i<exp.length;i++){\n        if(exp[i]=='('){\n            stack.push(exp[i]);\n        }\n        else if(exp[i]==')'){\n            if(stack.length==0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    if(stack.length==0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n",
    "    var stack = [];\n    var map = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    for(var i=0; i<exp.length; i++){\n        if(exp[i] === '(' || exp[i] === '{' || exp[i] === '['){\n            stack.push(exp[i]);\n        }\n        else{\n            var last = stack.pop();\n            if(exp[i] !== map[last]){\n                return false;\n            }\n        }\n    }\n    if(stack.length !== 0){\n        return false;\n    }\n    return true;\n}\n",
    "    var stack = [];\n    for(var i=0;i<exp.length;i++){\n        if(exp[i]=='('){\n            stack.push(exp[i]);\n        }\n        else if(exp[i]==')'){\n            if(stack.length==0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    if(stack.length==0){\n        return true;\n    }\n    return false;\n}",
    "    var stack = [];\n    for(var i = 0; i < exp.length; i++){\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '['){\n            stack.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']'){\n            if(stack.length == 0){\n                return false;\n            }\n            else if(stack[stack.length - 1] == '(' && exp[i] == ')'){\n                stack.pop();\n            }\n            else if(stack[stack.length - 1] == '{' && exp[i] == '}'){\n                stack.pop();\n            }\n            else if(stack[stack.length - 1] == '[' && exp[i] == ']'){\n                stack.pop();\n            }\n            else{\n                return false;\n            }\n        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n",
    "  let stack = [];\n  let open = ['(','{','['];\n  let close = [')','}',']'];\n  for(let i=0;i<exp.length;i++){\n    if(open.includes(exp[i])){\n      stack.push(exp[i]);\n    }\n    else if(close.includes(exp[i])){\n      let index = close.indexOf(exp[i]);\n      if(stack.length == 0 || stack[stack.length-1] != open[index]){\n        return false;\n      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  if(stack.length == 0){\n    return true;\n  }\n  return false;\n}\n",
    "    var stack = [];\n    for(var i=0; i<exp.length; i++){\n        if(exp[i] == '(' || exp[i] == '{' || exp[i] == '['){\n            stack.push(exp[i]);\n        }\n        else if(exp[i] == ')' || exp[i] == '}' || exp[i] == ']'){\n            if(stack.length == 0){\n                return false;\n            }\n            else{\n                if(exp[i] == ')' && stack[stack.length-1] == '('){\n                    stack.pop();\n                }\n                else if(exp[i] == '}' && stack[stack.length-1] == '{'){\n                    stack.pop();\n                }\n                else if(exp[i] == ']' && stack[stack.length-1] == '['){\n                    stack.pop();\n                }\n                else{\n                    return false;\n                }\n            }\n        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
    "  var stack = [];\n  var map = {\n    '(': ')',\n    '[': ']',\n    '{': '}'\n  }\n  for(var i = 0; i < exp.length; i++){\n    if(exp[i] === '(' || exp[i] === '{' || exp[i] === '['){\n      stack.push(exp[i]);\n    }\n    else{\n      var last = stack.pop();\n      if(exp[i] !== map[last]){\n        return false;\n      }\n    }\n  }\n  if(stack.length !== 0){\n    return false;\n  }\n  return true;\n}\n",
    "    var stack = [];\n    for(var i=0; i<exp.length; i++){\n        if(exp[i] == '('){\n            stack.push(exp[i]);\n        }\n        else if(exp[i] == ')'){\n            if(stack.length == 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    if(stack.length == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"
  ]
}