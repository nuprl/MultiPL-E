{
  "name": "mbpp_280_sequential_search",
  "language": "js",
  "prompt": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "results": [
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let pos = 0;\n    let found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        } else {\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (let i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let pos = 0;\n    let found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        } else {\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        } else {\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let pos = 0;\n    let found = false;\n\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        } else {\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(let i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i=0; i<dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n  for(var i = 0; i < dlist.length; i++){\n    if(dlist[i] == item){\n      return [true, i];\n    }\n  }\n  return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nvar dlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar item = 3;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        } else {\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let index = 0;\n    let found = false;\n    while(index < dlist.length && !found){\n        if(dlist[index] == item){\n            found = true;\n        }\n        else{\n            index++;\n        }\n    }\n    return [found, index];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let pos = 0;\n    let found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let found = false;\n    let pos = 0;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(let i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i=0; i<dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let pos = 0;\n    let found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(let i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let pos = 0;\n    let found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let pos = 0;\n    let found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let pos = 0;\n    let found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i=0; i<dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i=0; i<dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let index = 0;\n    let found = false;\n    while (index < dlist.length && !found){\n        if (dlist[index] == item){\n            found = true;\n        }\n        else{\n            index += 1;\n        }\n    }\n    return [found, index];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        } else {\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (let i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n\tfor(var i = 0; i < dlist.length; i++){\n\t\tif(dlist[i] == item){\n\t\t\treturn [true, i];\n\t\t}\n\t}\n\treturn [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i=0; i<dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let pos = 0;\n    let found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let pos = 0;\n    let found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(let i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for (var i = 0; i < dlist.length; i++){\n        if (dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let pos = 0;\n    let found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let pos = 0;\n    let found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    let pos = 0;\n    let found = false;\n    while (pos < dlist.length && !found){\n        if (dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos = pos + 1;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    var pos = 0;\n    var found = false;\n    while(pos < dlist.length && !found){\n        if(dlist[pos] == item){\n            found = true;\n        }\n        else{\n            pos++;\n        }\n    }\n    return [found, pos];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search(dlist, item){\n    for(var i = 0; i < dlist.length; i++){\n        if(dlist[i] == item){\n            return [true, i];\n        }\n    }\n    return [false, -1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sequential_search;\n  assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);\n  assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);\n  assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}