{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "js",
  "prompt": "//Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath(cost){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maxAverageOfPath;\n  assert.deepEqual(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]),5.2);\n  assert.deepEqual(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]),6.2);\n  assert.deepEqual(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]),7.2);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),5.8);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    let n = cost.length;\n    let dp = new Array(n).fill(0).map(()=>new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for(let i = 1; i < n; i++){\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(let i = 1; i < n; i++){\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(let i = 1; i < n; i++){\n        for(let j = 1; j < n; j++){\n            dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);\n}\n",
    "    var n = cost.length;\n    var dp = new Array(n);\n    for(var i=0;i<n;i++){\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for(var i=1;i<n;i++){\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(var i=1;i<n;i++){\n        for(var j=1;j<n;j++){\n            dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);\n}\n",
    "    let n = cost.length;\n    let dp = new Array(n);\n    for(let i=0; i<n; i++){\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for(let i=1; i<n; i++){\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(let i=1; i<n; i++){\n        for(let j=1; j<n; j++){\n            dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);\n}\n",
    "  let rows = cost.length;\n  let cols = cost[0].length;\n  let dp = new Array(rows);\n  for(let i = 0; i < rows; i++){\n    dp[i] = new Array(cols);\n    for(let j = 0; j < cols; j++){\n      dp[i][j] = new Array(2);\n      dp[i][j][0] = 0;\n      dp[i][j][1] = 0;\n    }\n  }\n  dp[0][0][0] = cost[0][0];\n  dp[0][0][1] = 1;\n  for(let i = 1; i < rows; i++){\n    dp[i][0][0] = dp[i-1][0][0] + cost[i][0];\n    dp[i][0][1] = dp[i-1][0][1] + 1;\n  }\n  for(let j = 1; j < cols; j++){\n    dp[0][j][0] = dp[0][j-1][0] + cost[0][j];\n    dp[0][j][1] = dp[0][j-1][1] + 1;\n  }\n  for(let i = 1; i < rows; i++){\n    for(let j = 1; j < cols; j++){\n      let left = dp[i][j-1][0] + cost[i][j];\n      let leftCount = dp[i][j-1][1] + 1;\n      let up = dp[i-1][j][0] + cost[i][j];\n      let upCount = dp[i-1][j][1] + 1;\n      if(left/leftCount > up/upCount){\n        dp[i][j][0] = left;\n        dp[i][j][1] = leftCount;\n      } else {\n        dp[i][j][0] = up;\n        dp[i][j][1] = upCount;\n      }\n   ",
    "    let n = cost.length;\n    let dp = new Array(n);\n    for(let i = 0; i < n; i++){\n        dp[i] = new Array(n);\n        for(let j = 0; j < n; j++){\n            dp[i][j] = new Array(2);\n        }\n    }\n    dp[0][0][0] = cost[0][0];\n    dp[0][0][1] = 1;\n    for(let i = 1; i < n; i++){\n        dp[i][0][0] = dp[i-1][0][0] + cost[i][0];\n        dp[i][0][1] = dp[i-1][0][1] + 1;\n        dp[0][i][0] = dp[0][i-1][0] + cost[0][i];\n        dp[0][i][1] = dp[0][i-1][1] + 1;\n    }\n    for(let i = 1; i < n; i++){\n        for(let j = 1; j < n; j++){\n            let a = dp[i-1][j][0] + cost[i][j];\n            let b = dp[i-1][j][1] + 1;\n            let c = dp[i][j-1][0] + cost[i][j];\n            let d = dp[i][j-1][1] + 1;\n            if(a/b > c/d){\n                dp[i][j][0] = a;\n                dp[i][j][1] = b;\n            }else{\n                dp[i][j][0] = c;\n                dp[i][j][1] = d;\n            }\n        }\n    }\n    return dp[n-1][n-1][0]/dp[n-1][n-1][1];\n}\n\nlet cost = [\n    [1,2,3],\n    [4,5,6],\n    [7,8,9]\n",
    "    let n = cost.length;\n    let dp = new Array(n);\n    for(let i = 0; i < n; i++){\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for(let i = 1; i < n; i++){\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(let i = 1; i < n; i++){\n        for(let j = 1; j < n; j++){\n            dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);\n}\n",
    "    let n = cost.length;\n    let dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for(let i = 1; i < n; i++){\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(let i = 1; i < n; i++){\n        for(let j = 1; j < n; j++){\n            dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);\n}\n",
    "    let n = cost.length;\n    let dp = new Array(n);\n    for(let i = 0; i < n; i++){\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for(let i = 1; i < n; i++){\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(let i = 1; i < n; i++){\n        for(let j = 1; j < n; j++){\n            dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);\n}\n",
    "  let dp = [];\n  for(let i = 0; i < cost.length; i++){\n    dp.push([]);\n  }\n  dp[0][0] = cost[0][0];\n  for(let i = 1; i < cost.length; i++){\n    dp[0][i] = dp[0][i-1] + cost[0][i];\n  }\n  for(let i = 1; i < cost.length; i++){\n    dp[i][0] = dp[i-1][0] + cost[i][0];\n  }\n  for(let i = 1; i < cost.length; i++){\n    for(let j = 1; j < cost.length; j++){\n      dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n    }\n  }\n  return dp[cost.length-1][cost.length-1] / (2*cost.length - 1);\n}\n",
    "    var n = cost.length;\n    var dp = [];\n    for(var i=0;i<n;i++){\n        dp[i] = [];\n        for(var j=0;j<n;j++){\n            if(i==0 && j==0){\n                dp[i][j] = cost[i][j];\n            }else if(i==0){\n                dp[i][j] = dp[i][j-1] + cost[i][j];\n            }else if(j==0){\n                dp[i][j] = dp[i-1][j] + cost[i][j];\n            }else{\n                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n            }\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);\n}\n",
    "    let n = cost.length;\n    let dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for(let i = 1; i < n; i++){\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(let i = 1; i < n; i++){\n        for(let j = 1; j < n; j++){\n            dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n-1);\n}\n",
    "  let n = cost.length;\n  let dp = new Array(n).fill(0).map(()=>new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for(let i=1;i<n;i++){\n    dp[0][i] = dp[0][i-1] + cost[0][i];\n  }\n  for(let i=1;i<n;i++){\n    dp[i][0] = dp[i-1][0] + cost[i][0];\n  }\n  for(let i=1;i<n;i++){\n    for(let j=1;j<n;j++){\n      dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]) + cost[i][j];\n    }\n  }\n  return dp[n-1][n-1]/(2*n-1);\n}\n",
    "    let n = cost.length;\n    let dp = new Array(n);\n    for(let i = 0; i < n; i++){\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for(let i = 1; i < n; i++){\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(let i = 1; i < n; i++){\n        for(let j = 1; j < n; j++){\n            dp[i][j] = cost[i][j] + Math.max(dp[i-1][j], dp[i][j-1]);\n        }\n    }\n    return dp[n-1][n-1] / (2*n-1);\n}\n",
    "  let n = cost.length;\n  let dp = new Array(n);\n  for(let i = 0; i < n; i++){\n    dp[i] = new Array(n);\n  }\n  dp[0][0] = cost[0][0];\n  for(let i = 1; i < n; i++){\n    dp[0][i] = dp[0][i-1] + cost[0][i];\n    dp[i][0] = dp[i-1][0] + cost[i][0];\n  }\n  for(let i = 1; i < n; i++){\n    for(let j = 1; j < n; j++){\n      dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n    }\n  }\n  return dp[n-1][n-1] / (2*n-1);\n}\n",
    "    let n = cost.length;\n    let dp = new Array(n).fill(0).map(()=>new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for(let i=1;i<n;i++){\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(let i=1;i<n;i++){\n        for(let j=1;j<n;j++){\n            dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1]/(2*n-1);\n}\n",
    "  let n = cost.length;\n  let dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for(let i = 1; i < n; i++){\n    dp[0][i] = dp[0][i-1] + cost[0][i];\n    dp[i][0] = dp[i-1][0] + cost[i][0];\n  }\n  for(let i = 1; i < n; i++){\n    for(let j = 1; j < n; j++){\n      dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n    }\n  }\n  return dp[n-1][n-1] / (2*n-1);\n}\n",
    "  let row = cost.length;\n  let col = cost[0].length;\n  let dp = [];\n  for(let i = 0; i < row; i++){\n    dp.push([]);\n  }\n  dp[0][0] = cost[0][0];\n  for(let i = 1; i < row; i++){\n    dp[i][0] = dp[i-1][0] + cost[i][0];\n  }\n  for(let j = 1; j < col; j++){\n    dp[0][j] = dp[0][j-1] + cost[0][j];\n  }\n  for(let i = 1; i < row; i++){\n    for(let j = 1; j < col; j++){\n      dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n    }\n  }\n  return dp[row-1][col-1]/(row+col-1);\n}\n",
    "    let row = cost.length;\n    let col = cost[0].length;\n    let dp = new Array(row);\n    for(let i = 0; i < row; i++){\n        dp[i] = new Array(col);\n    }\n    dp[0][0] = cost[0][0];\n    for(let i = 1; i < row; i++){\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(let i = 1; i < col; i++){\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n    }\n    for(let i = 1; i < row; i++){\n        for(let j = 1; j < col; j++){\n            dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[row-1][col-1] / (row + col - 1);\n}\n",
    "    let n = cost.length;\n    let dp = new Array(n);\n    for(let i = 0; i < n; i++){\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for(let i = 1; i < n; i++){\n        dp[0][i] = dp[0][i-1] + cost[0][i];\n        dp[i][0] = dp[i-1][0] + cost[i][0];\n    }\n    for(let i = 1; i < n; i++){\n        for(let j = 1; j < n; j++){\n            dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n        }\n    }\n    return dp[n-1][n-1] / (2*n - 1);\n}\n",
    "  let n = cost.length;\n  let m = cost[0].length;\n  let dp = new Array(n).fill(0).map(() => new Array(m).fill(0));\n  dp[0][0] = cost[0][0];\n  for(let i = 1; i < n; i++){\n    dp[i][0] = dp[i-1][0] + cost[i][0];\n  }\n  for(let j = 1; j < m; j++){\n    dp[0][j] = dp[0][j-1] + cost[0][j];\n  }\n  for(let i = 1; i < n; i++){\n    for(let j = 1; j < m; j++){\n      dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n    }\n  }\n  return dp[n-1][m-1] / (n+m-1);\n}\n"
  ]
}