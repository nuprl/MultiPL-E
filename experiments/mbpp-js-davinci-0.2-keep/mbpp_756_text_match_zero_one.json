{
  "name": "mbpp_756_text_match_zero_one",
  "language": "js",
  "prompt": "//Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunction text_match_zero_one(text){\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py",
  "prompt_terminology": "verbatim",
  "tests": "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = text_match_zero_one;\n  assert.deepEqual(candidate(\"ac\"),false);\n  assert.deepEqual(candidate(\"dc\"),false);\n  assert.deepEqual(candidate(\"abbbba\"),true);\n  assert.deepEqual(candidate(\"dsabbbba\"),true);\n  assert.deepEqual(candidate(\"asbbbba\"),false);\n  assert.deepEqual(candidate(\"abaaa\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nconsole.log"
  ],
  "completions": [
    "    let regex = /ab?/g;\n    return text.match(regex);\n}\n",
    "    let regex = /ab?/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab?/;\n    return regex.test(text);\n}\n",
    "    var regex = /ab?/;\n    if(regex.test(text)){\n        return true;\n    }\n    return false;\n}\n",
    "    let regex = /ab?/;\n    return regex.test(text);\n}\n",
    "    var pattern = /ab{1,}/;\n    if (pattern.test(text)){\n        return true;\n    }\n    return false;\n}\n",
    "    var regex = /ab?/;\n    return regex.test(text);\n}\n",
    "    var regex = /ab{1,}/g;\n    var result = text.match(regex);\n    return result;\n}\n",
    "    var regex = /ab?/;\n    if(regex.test(text)){\n        return \"Found a match!\";\n    }else{\n        return \"Did not find a match!\";\n    }\n}\n",
    "    let regex = /ab{1,}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    if(regex.test(text)){\n        console.log(\"Yes, there is a match!\");\n    }\n    else{\n        console.log(\"No match!\");\n    }\n}\ntext_match_zero_one(\"ab\");\ntext_match_zero_one(\"abb\");\ntext_match_zero_one(\"abbb\");\ntext_match_zero_one(\"abbbb\");\n",
    "    var regex = /ab{1,}/;\n    return regex.test(text);\n}",
    "    var regex = /ab?/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab?/;\n    return regex.test(text);\n}\n",
    "    var regex = /ab{1,}/;\n    if(regex.test(text)){\n        return \"Found a match!\";\n    }else{\n        return \"Did not find a match!\";\n    }\n}",
    "    var regex = /ab{1,}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab?/;\n    return regex.test(text);\n}\n",
    "    var regex = /ab?/;\n    if(regex.test(text)){\n        return true;\n    }\n    return false;\n}",
    "    let regex = /ab{1,}/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab{1,}/;\n    if(regex.test(text)){\n        console.log(\"Yes, there is a match!\");\n    }else{\n        console.log(\"No match!\");\n    }\n}\n"
  ]
}